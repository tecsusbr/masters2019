
MASTERS_LIGHTDEVICE.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000168c0  00000000  00000000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     00000104  20000000  000168c0  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00002814  20000108  000169c8  00030104  2**3
                  ALLOC
  3 .stack        00000e04  2000291c  000191dc  00030104  2**0
                  ALLOC
  4 .ARM.attributes 00000028  00000000  00000000  00030104  2**0
                  CONTENTS, READONLY
  5 .comment      0000008c  00000000  00000000  0003012c  2**0
                  CONTENTS, READONLY
  6 .debug_info   00060234  00000000  00000000  000301b8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00009e8e  00000000  00000000  000903ec  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    000141fa  00000000  00000000  0009a27a  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_aranges 00000eb0  00000000  00000000  000ae474  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 000019d8  00000000  00000000  000af324  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_macro  00025b9c  00000000  00000000  000b0cfc  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   00022abc  00000000  00000000  000d6898  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    0008fd18  00000000  00000000  000f9354  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_frame  00003184  00000000  00000000  0018906c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <exception_table>:
       0:	20 37 00 20 e5 8a 00 00 e1 8a 00 00 e1 8a 00 00      7. ............
	...
      2c:	e1 8a 00 00 00 00 00 00 00 00 00 00 e1 8a 00 00     ................
      3c:	e1 8a 00 00 e1 8a 00 00 e1 8a 00 00 e1 8a 00 00     ................
      4c:	e1 8a 00 00 a5 66 00 00 e1 8a 00 00 e1 8a 00 00     .....f..........
      5c:	e1 8a 00 00 e1 8a 00 00 75 74 00 00 85 74 00 00     ........ut...t..
      6c:	95 74 00 00 a5 74 00 00 b5 74 00 00 c5 74 00 00     .t...t...t...t..
      7c:	e1 8a 00 00 e1 8a 00 00 e1 8a 00 00 c1 87 00 00     ................
      8c:	d1 87 00 00 e1 87 00 00 00 00 00 00 00 00 00 00     ................
      9c:	e1 8a 00 00 e1 8a 00 00 00 00 00 00 e1 8a 00 00     ................
	...

00002100 <__d_nv_mem_start>:
    2100:	ffffffff 	.word	0xffffffff
    2104:	ffffffff 	.word	0xffffffff
    2108:	ffffffff 	.word	0xffffffff
    210c:	ffffffff 	.word	0xffffffff
    2110:	ffffffff 	.word	0xffffffff
    2114:	ffffffff 	.word	0xffffffff
    2118:	ffffffff 	.word	0xffffffff
    211c:	ffffffff 	.word	0xffffffff
    2120:	ffffffff 	.word	0xffffffff
    2124:	ffffffff 	.word	0xffffffff
    2128:	ffffffff 	.word	0xffffffff
    212c:	ffffffff 	.word	0xffffffff
    2130:	ffffffff 	.word	0xffffffff
    2134:	ffffffff 	.word	0xffffffff
    2138:	ffffffff 	.word	0xffffffff
    213c:	ffffffff 	.word	0xffffffff
    2140:	ffffffff 	.word	0xffffffff
    2144:	ffffffff 	.word	0xffffffff
    2148:	ffffffff 	.word	0xffffffff
    214c:	ffffffff 	.word	0xffffffff
    2150:	ffffffff 	.word	0xffffffff
    2154:	ffffffff 	.word	0xffffffff
    2158:	ffffffff 	.word	0xffffffff
    215c:	ffffffff 	.word	0xffffffff
    2160:	ffffffff 	.word	0xffffffff
    2164:	ffffffff 	.word	0xffffffff
    2168:	ffffffff 	.word	0xffffffff
    216c:	ffffffff 	.word	0xffffffff
    2170:	ffffffff 	.word	0xffffffff
    2174:	ffffffff 	.word	0xffffffff
    2178:	ffffffff 	.word	0xffffffff
    217c:	ffffffff 	.word	0xffffffff
    2180:	ffffffff 	.word	0xffffffff
    2184:	ffffffff 	.word	0xffffffff
    2188:	ffffffff 	.word	0xffffffff
    218c:	ffffffff 	.word	0xffffffff
    2190:	ffffffff 	.word	0xffffffff
    2194:	ffffffff 	.word	0xffffffff
    2198:	ffffffff 	.word	0xffffffff
    219c:	ffffffff 	.word	0xffffffff
    21a0:	ffffffff 	.word	0xffffffff
    21a4:	ffffffff 	.word	0xffffffff
    21a8:	ffffffff 	.word	0xffffffff
    21ac:	ffffffff 	.word	0xffffffff
    21b0:	ffffffff 	.word	0xffffffff
    21b4:	ffffffff 	.word	0xffffffff
    21b8:	ffffffff 	.word	0xffffffff
    21bc:	ffffffff 	.word	0xffffffff
    21c0:	ffffffff 	.word	0xffffffff
    21c4:	ffffffff 	.word	0xffffffff
    21c8:	ffffffff 	.word	0xffffffff
    21cc:	ffffffff 	.word	0xffffffff
    21d0:	ffffffff 	.word	0xffffffff
    21d4:	ffffffff 	.word	0xffffffff
    21d8:	ffffffff 	.word	0xffffffff
    21dc:	ffffffff 	.word	0xffffffff
    21e0:	ffffffff 	.word	0xffffffff
    21e4:	ffffffff 	.word	0xffffffff
    21e8:	ffffffff 	.word	0xffffffff
    21ec:	ffffffff 	.word	0xffffffff
    21f0:	ffffffff 	.word	0xffffffff
    21f4:	ffffffff 	.word	0xffffffff
    21f8:	ffffffff 	.word	0xffffffff
    21fc:	ffffffff 	.word	0xffffffff
    2200:	ffffffff 	.word	0xffffffff
    2204:	ffffffff 	.word	0xffffffff
    2208:	ffffffff 	.word	0xffffffff
    220c:	ffffffff 	.word	0xffffffff
    2210:	ffffffff 	.word	0xffffffff
    2214:	ffffffff 	.word	0xffffffff
    2218:	ffffffff 	.word	0xffffffff
    221c:	ffffffff 	.word	0xffffffff
    2220:	ffffffff 	.word	0xffffffff
    2224:	ffffffff 	.word	0xffffffff
    2228:	ffffffff 	.word	0xffffffff
    222c:	ffffffff 	.word	0xffffffff
    2230:	ffffffff 	.word	0xffffffff
    2234:	ffffffff 	.word	0xffffffff
    2238:	ffffffff 	.word	0xffffffff
    223c:	ffffffff 	.word	0xffffffff
    2240:	ffffffff 	.word	0xffffffff
    2244:	ffffffff 	.word	0xffffffff
    2248:	ffffffff 	.word	0xffffffff
    224c:	ffffffff 	.word	0xffffffff
    2250:	ffffffff 	.word	0xffffffff
    2254:	ffffffff 	.word	0xffffffff
    2258:	ffffffff 	.word	0xffffffff
    225c:	ffffffff 	.word	0xffffffff
    2260:	ffffffff 	.word	0xffffffff
    2264:	ffffffff 	.word	0xffffffff
    2268:	ffffffff 	.word	0xffffffff
    226c:	ffffffff 	.word	0xffffffff
    2270:	ffffffff 	.word	0xffffffff
    2274:	ffffffff 	.word	0xffffffff
    2278:	ffffffff 	.word	0xffffffff
    227c:	ffffffff 	.word	0xffffffff
    2280:	ffffffff 	.word	0xffffffff
    2284:	ffffffff 	.word	0xffffffff
    2288:	ffffffff 	.word	0xffffffff
    228c:	ffffffff 	.word	0xffffffff
    2290:	ffffffff 	.word	0xffffffff
    2294:	ffffffff 	.word	0xffffffff
    2298:	ffffffff 	.word	0xffffffff
    229c:	ffffffff 	.word	0xffffffff
    22a0:	ffffffff 	.word	0xffffffff
    22a4:	ffffffff 	.word	0xffffffff
    22a8:	ffffffff 	.word	0xffffffff
    22ac:	ffffffff 	.word	0xffffffff
    22b0:	ffffffff 	.word	0xffffffff
    22b4:	ffffffff 	.word	0xffffffff
    22b8:	ffffffff 	.word	0xffffffff
    22bc:	ffffffff 	.word	0xffffffff
    22c0:	ffffffff 	.word	0xffffffff
    22c4:	ffffffff 	.word	0xffffffff
    22c8:	ffffffff 	.word	0xffffffff
    22cc:	ffffffff 	.word	0xffffffff
    22d0:	ffffffff 	.word	0xffffffff
    22d4:	ffffffff 	.word	0xffffffff
    22d8:	ffffffff 	.word	0xffffffff
    22dc:	ffffffff 	.word	0xffffffff
    22e0:	ffffffff 	.word	0xffffffff
    22e4:	ffffffff 	.word	0xffffffff
    22e8:	ffffffff 	.word	0xffffffff
    22ec:	ffffffff 	.word	0xffffffff
    22f0:	ffffffff 	.word	0xffffffff
    22f4:	ffffffff 	.word	0xffffffff
    22f8:	ffffffff 	.word	0xffffffff
    22fc:	ffffffff 	.word	0xffffffff
    2300:	ffffffff 	.word	0xffffffff
    2304:	ffffffff 	.word	0xffffffff
    2308:	ffffffff 	.word	0xffffffff
    230c:	ffffffff 	.word	0xffffffff
    2310:	ffffffff 	.word	0xffffffff
    2314:	ffffffff 	.word	0xffffffff
    2318:	ffffffff 	.word	0xffffffff
    231c:	ffffffff 	.word	0xffffffff
    2320:	ffffffff 	.word	0xffffffff
    2324:	ffffffff 	.word	0xffffffff
    2328:	ffffffff 	.word	0xffffffff
    232c:	ffffffff 	.word	0xffffffff
    2330:	ffffffff 	.word	0xffffffff
    2334:	ffffffff 	.word	0xffffffff
    2338:	ffffffff 	.word	0xffffffff
    233c:	ffffffff 	.word	0xffffffff
    2340:	ffffffff 	.word	0xffffffff
    2344:	ffffffff 	.word	0xffffffff
    2348:	ffffffff 	.word	0xffffffff
    234c:	ffffffff 	.word	0xffffffff
    2350:	ffffffff 	.word	0xffffffff
    2354:	ffffffff 	.word	0xffffffff
    2358:	ffffffff 	.word	0xffffffff
    235c:	ffffffff 	.word	0xffffffff
    2360:	ffffffff 	.word	0xffffffff
    2364:	ffffffff 	.word	0xffffffff
    2368:	ffffffff 	.word	0xffffffff
    236c:	ffffffff 	.word	0xffffffff
    2370:	ffffffff 	.word	0xffffffff
    2374:	ffffffff 	.word	0xffffffff
    2378:	ffffffff 	.word	0xffffffff
    237c:	ffffffff 	.word	0xffffffff
    2380:	ffffffff 	.word	0xffffffff
    2384:	ffffffff 	.word	0xffffffff
    2388:	ffffffff 	.word	0xffffffff
    238c:	ffffffff 	.word	0xffffffff
    2390:	ffffffff 	.word	0xffffffff
    2394:	ffffffff 	.word	0xffffffff
    2398:	ffffffff 	.word	0xffffffff
    239c:	ffffffff 	.word	0xffffffff
    23a0:	ffffffff 	.word	0xffffffff
    23a4:	ffffffff 	.word	0xffffffff
    23a8:	ffffffff 	.word	0xffffffff
    23ac:	ffffffff 	.word	0xffffffff
    23b0:	ffffffff 	.word	0xffffffff
    23b4:	ffffffff 	.word	0xffffffff
    23b8:	ffffffff 	.word	0xffffffff
    23bc:	ffffffff 	.word	0xffffffff
    23c0:	ffffffff 	.word	0xffffffff
    23c4:	ffffffff 	.word	0xffffffff
    23c8:	ffffffff 	.word	0xffffffff
    23cc:	ffffffff 	.word	0xffffffff
    23d0:	ffffffff 	.word	0xffffffff
    23d4:	ffffffff 	.word	0xffffffff
    23d8:	ffffffff 	.word	0xffffffff
    23dc:	ffffffff 	.word	0xffffffff
    23e0:	ffffffff 	.word	0xffffffff
    23e4:	ffffffff 	.word	0xffffffff
    23e8:	ffffffff 	.word	0xffffffff
    23ec:	ffffffff 	.word	0xffffffff
    23f0:	ffffffff 	.word	0xffffffff
    23f4:	ffffffff 	.word	0xffffffff
    23f8:	ffffffff 	.word	0xffffffff
    23fc:	ffffffff 	.word	0xffffffff
    2400:	ffffffff 	.word	0xffffffff
    2404:	ffffffff 	.word	0xffffffff
    2408:	ffffffff 	.word	0xffffffff
    240c:	ffffffff 	.word	0xffffffff
    2410:	ffffffff 	.word	0xffffffff
    2414:	ffffffff 	.word	0xffffffff
    2418:	ffffffff 	.word	0xffffffff
    241c:	ffffffff 	.word	0xffffffff
    2420:	ffffffff 	.word	0xffffffff
    2424:	ffffffff 	.word	0xffffffff
    2428:	ffffffff 	.word	0xffffffff
    242c:	ffffffff 	.word	0xffffffff
    2430:	ffffffff 	.word	0xffffffff
    2434:	ffffffff 	.word	0xffffffff
    2438:	ffffffff 	.word	0xffffffff
    243c:	ffffffff 	.word	0xffffffff
    2440:	ffffffff 	.word	0xffffffff
    2444:	ffffffff 	.word	0xffffffff
    2448:	ffffffff 	.word	0xffffffff
    244c:	ffffffff 	.word	0xffffffff
    2450:	ffffffff 	.word	0xffffffff
    2454:	ffffffff 	.word	0xffffffff
    2458:	ffffffff 	.word	0xffffffff
    245c:	ffffffff 	.word	0xffffffff
    2460:	ffffffff 	.word	0xffffffff
    2464:	ffffffff 	.word	0xffffffff
    2468:	ffffffff 	.word	0xffffffff
    246c:	ffffffff 	.word	0xffffffff
    2470:	ffffffff 	.word	0xffffffff
    2474:	ffffffff 	.word	0xffffffff
    2478:	ffffffff 	.word	0xffffffff
    247c:	ffffffff 	.word	0xffffffff
    2480:	ffffffff 	.word	0xffffffff
    2484:	ffffffff 	.word	0xffffffff
    2488:	ffffffff 	.word	0xffffffff
    248c:	ffffffff 	.word	0xffffffff
    2490:	ffffffff 	.word	0xffffffff
    2494:	ffffffff 	.word	0xffffffff
    2498:	ffffffff 	.word	0xffffffff
    249c:	ffffffff 	.word	0xffffffff
    24a0:	ffffffff 	.word	0xffffffff
    24a4:	ffffffff 	.word	0xffffffff
    24a8:	ffffffff 	.word	0xffffffff
    24ac:	ffffffff 	.word	0xffffffff
    24b0:	ffffffff 	.word	0xffffffff
    24b4:	ffffffff 	.word	0xffffffff
    24b8:	ffffffff 	.word	0xffffffff
    24bc:	ffffffff 	.word	0xffffffff
    24c0:	ffffffff 	.word	0xffffffff
    24c4:	ffffffff 	.word	0xffffffff
    24c8:	ffffffff 	.word	0xffffffff
    24cc:	ffffffff 	.word	0xffffffff
    24d0:	ffffffff 	.word	0xffffffff
    24d4:	ffffffff 	.word	0xffffffff
    24d8:	ffffffff 	.word	0xffffffff
    24dc:	ffffffff 	.word	0xffffffff
    24e0:	ffffffff 	.word	0xffffffff
    24e4:	ffffffff 	.word	0xffffffff
    24e8:	ffffffff 	.word	0xffffffff
    24ec:	ffffffff 	.word	0xffffffff
    24f0:	ffffffff 	.word	0xffffffff
    24f4:	ffffffff 	.word	0xffffffff
    24f8:	ffffffff 	.word	0xffffffff
    24fc:	ffffffff 	.word	0xffffffff
    2500:	ffffffff 	.word	0xffffffff
    2504:	ffffffff 	.word	0xffffffff
    2508:	ffffffff 	.word	0xffffffff
    250c:	ffffffff 	.word	0xffffffff
    2510:	ffffffff 	.word	0xffffffff
    2514:	ffffffff 	.word	0xffffffff
    2518:	ffffffff 	.word	0xffffffff
    251c:	ffffffff 	.word	0xffffffff
    2520:	ffffffff 	.word	0xffffffff
    2524:	ffffffff 	.word	0xffffffff
    2528:	ffffffff 	.word	0xffffffff
    252c:	ffffffff 	.word	0xffffffff
    2530:	ffffffff 	.word	0xffffffff
    2534:	ffffffff 	.word	0xffffffff
    2538:	ffffffff 	.word	0xffffffff
    253c:	ffffffff 	.word	0xffffffff
    2540:	ffffffff 	.word	0xffffffff
    2544:	ffffffff 	.word	0xffffffff
    2548:	ffffffff 	.word	0xffffffff
    254c:	ffffffff 	.word	0xffffffff
    2550:	ffffffff 	.word	0xffffffff
    2554:	ffffffff 	.word	0xffffffff
    2558:	ffffffff 	.word	0xffffffff
    255c:	ffffffff 	.word	0xffffffff
    2560:	ffffffff 	.word	0xffffffff
    2564:	ffffffff 	.word	0xffffffff
    2568:	ffffffff 	.word	0xffffffff
    256c:	ffffffff 	.word	0xffffffff
    2570:	ffffffff 	.word	0xffffffff
    2574:	ffffffff 	.word	0xffffffff
    2578:	ffffffff 	.word	0xffffffff
    257c:	ffffffff 	.word	0xffffffff
    2580:	ffffffff 	.word	0xffffffff
    2584:	ffffffff 	.word	0xffffffff
    2588:	ffffffff 	.word	0xffffffff
    258c:	ffffffff 	.word	0xffffffff
    2590:	ffffffff 	.word	0xffffffff
    2594:	ffffffff 	.word	0xffffffff
    2598:	ffffffff 	.word	0xffffffff
    259c:	ffffffff 	.word	0xffffffff
    25a0:	ffffffff 	.word	0xffffffff
    25a4:	ffffffff 	.word	0xffffffff
    25a8:	ffffffff 	.word	0xffffffff
    25ac:	ffffffff 	.word	0xffffffff
    25b0:	ffffffff 	.word	0xffffffff
    25b4:	ffffffff 	.word	0xffffffff
    25b8:	ffffffff 	.word	0xffffffff
    25bc:	ffffffff 	.word	0xffffffff
    25c0:	ffffffff 	.word	0xffffffff
    25c4:	ffffffff 	.word	0xffffffff
    25c8:	ffffffff 	.word	0xffffffff
    25cc:	ffffffff 	.word	0xffffffff
    25d0:	ffffffff 	.word	0xffffffff
    25d4:	ffffffff 	.word	0xffffffff
    25d8:	ffffffff 	.word	0xffffffff
    25dc:	ffffffff 	.word	0xffffffff
    25e0:	ffffffff 	.word	0xffffffff
    25e4:	ffffffff 	.word	0xffffffff
    25e8:	ffffffff 	.word	0xffffffff
    25ec:	ffffffff 	.word	0xffffffff
    25f0:	ffffffff 	.word	0xffffffff
    25f4:	ffffffff 	.word	0xffffffff
    25f8:	ffffffff 	.word	0xffffffff
    25fc:	ffffffff 	.word	0xffffffff
    2600:	ffffffff 	.word	0xffffffff
    2604:	ffffffff 	.word	0xffffffff
    2608:	ffffffff 	.word	0xffffffff
    260c:	ffffffff 	.word	0xffffffff
    2610:	ffffffff 	.word	0xffffffff
    2614:	ffffffff 	.word	0xffffffff
    2618:	ffffffff 	.word	0xffffffff
    261c:	ffffffff 	.word	0xffffffff
    2620:	ffffffff 	.word	0xffffffff
    2624:	ffffffff 	.word	0xffffffff
    2628:	ffffffff 	.word	0xffffffff
    262c:	ffffffff 	.word	0xffffffff
    2630:	ffffffff 	.word	0xffffffff
    2634:	ffffffff 	.word	0xffffffff
    2638:	ffffffff 	.word	0xffffffff
    263c:	ffffffff 	.word	0xffffffff
    2640:	ffffffff 	.word	0xffffffff
    2644:	ffffffff 	.word	0xffffffff
    2648:	ffffffff 	.word	0xffffffff
    264c:	ffffffff 	.word	0xffffffff
    2650:	ffffffff 	.word	0xffffffff
    2654:	ffffffff 	.word	0xffffffff
    2658:	ffffffff 	.word	0xffffffff
    265c:	ffffffff 	.word	0xffffffff
    2660:	ffffffff 	.word	0xffffffff
    2664:	ffffffff 	.word	0xffffffff
    2668:	ffffffff 	.word	0xffffffff
    266c:	ffffffff 	.word	0xffffffff
    2670:	ffffffff 	.word	0xffffffff
    2674:	ffffffff 	.word	0xffffffff
    2678:	ffffffff 	.word	0xffffffff
    267c:	ffffffff 	.word	0xffffffff
    2680:	ffffffff 	.word	0xffffffff
    2684:	ffffffff 	.word	0xffffffff
    2688:	ffffffff 	.word	0xffffffff
    268c:	ffffffff 	.word	0xffffffff
    2690:	ffffffff 	.word	0xffffffff
    2694:	ffffffff 	.word	0xffffffff
    2698:	ffffffff 	.word	0xffffffff
    269c:	ffffffff 	.word	0xffffffff
    26a0:	ffffffff 	.word	0xffffffff
    26a4:	ffffffff 	.word	0xffffffff
    26a8:	ffffffff 	.word	0xffffffff
    26ac:	ffffffff 	.word	0xffffffff
    26b0:	ffffffff 	.word	0xffffffff
    26b4:	ffffffff 	.word	0xffffffff
    26b8:	ffffffff 	.word	0xffffffff
    26bc:	ffffffff 	.word	0xffffffff
    26c0:	ffffffff 	.word	0xffffffff
    26c4:	ffffffff 	.word	0xffffffff
    26c8:	ffffffff 	.word	0xffffffff
    26cc:	ffffffff 	.word	0xffffffff
    26d0:	ffffffff 	.word	0xffffffff
    26d4:	ffffffff 	.word	0xffffffff
    26d8:	ffffffff 	.word	0xffffffff
    26dc:	ffffffff 	.word	0xffffffff
    26e0:	ffffffff 	.word	0xffffffff
    26e4:	ffffffff 	.word	0xffffffff
    26e8:	ffffffff 	.word	0xffffffff
    26ec:	ffffffff 	.word	0xffffffff
    26f0:	ffffffff 	.word	0xffffffff
    26f4:	ffffffff 	.word	0xffffffff
    26f8:	ffffffff 	.word	0xffffffff
    26fc:	ffffffff 	.word	0xffffffff
    2700:	ffffffff 	.word	0xffffffff
    2704:	ffffffff 	.word	0xffffffff
    2708:	ffffffff 	.word	0xffffffff
    270c:	ffffffff 	.word	0xffffffff
    2710:	ffffffff 	.word	0xffffffff
    2714:	ffffffff 	.word	0xffffffff
    2718:	ffffffff 	.word	0xffffffff
    271c:	ffffffff 	.word	0xffffffff
    2720:	ffffffff 	.word	0xffffffff
    2724:	ffffffff 	.word	0xffffffff
    2728:	ffffffff 	.word	0xffffffff
    272c:	ffffffff 	.word	0xffffffff
    2730:	ffffffff 	.word	0xffffffff
    2734:	ffffffff 	.word	0xffffffff
    2738:	ffffffff 	.word	0xffffffff
    273c:	ffffffff 	.word	0xffffffff
    2740:	ffffffff 	.word	0xffffffff
    2744:	ffffffff 	.word	0xffffffff
    2748:	ffffffff 	.word	0xffffffff
    274c:	ffffffff 	.word	0xffffffff
    2750:	ffffffff 	.word	0xffffffff
    2754:	ffffffff 	.word	0xffffffff
    2758:	ffffffff 	.word	0xffffffff
    275c:	ffffffff 	.word	0xffffffff
    2760:	ffffffff 	.word	0xffffffff
    2764:	ffffffff 	.word	0xffffffff
    2768:	ffffffff 	.word	0xffffffff
    276c:	ffffffff 	.word	0xffffffff
    2770:	ffffffff 	.word	0xffffffff
    2774:	ffffffff 	.word	0xffffffff
    2778:	ffffffff 	.word	0xffffffff
    277c:	ffffffff 	.word	0xffffffff
    2780:	ffffffff 	.word	0xffffffff
    2784:	ffffffff 	.word	0xffffffff
    2788:	ffffffff 	.word	0xffffffff
    278c:	ffffffff 	.word	0xffffffff
    2790:	ffffffff 	.word	0xffffffff
    2794:	ffffffff 	.word	0xffffffff
    2798:	ffffffff 	.word	0xffffffff
    279c:	ffffffff 	.word	0xffffffff
    27a0:	ffffffff 	.word	0xffffffff
    27a4:	ffffffff 	.word	0xffffffff
    27a8:	ffffffff 	.word	0xffffffff
    27ac:	ffffffff 	.word	0xffffffff
    27b0:	ffffffff 	.word	0xffffffff
    27b4:	ffffffff 	.word	0xffffffff
    27b8:	ffffffff 	.word	0xffffffff
    27bc:	ffffffff 	.word	0xffffffff
    27c0:	ffffffff 	.word	0xffffffff
    27c4:	ffffffff 	.word	0xffffffff
    27c8:	ffffffff 	.word	0xffffffff
    27cc:	ffffffff 	.word	0xffffffff
    27d0:	ffffffff 	.word	0xffffffff
    27d4:	ffffffff 	.word	0xffffffff
    27d8:	ffffffff 	.word	0xffffffff
    27dc:	ffffffff 	.word	0xffffffff
    27e0:	ffffffff 	.word	0xffffffff
    27e4:	ffffffff 	.word	0xffffffff
    27e8:	ffffffff 	.word	0xffffffff
    27ec:	ffffffff 	.word	0xffffffff
    27f0:	ffffffff 	.word	0xffffffff
    27f4:	ffffffff 	.word	0xffffffff
    27f8:	ffffffff 	.word	0xffffffff
    27fc:	ffffffff 	.word	0xffffffff
    2800:	ffffffff 	.word	0xffffffff
    2804:	ffffffff 	.word	0xffffffff
    2808:	ffffffff 	.word	0xffffffff
    280c:	ffffffff 	.word	0xffffffff
    2810:	ffffffff 	.word	0xffffffff
    2814:	ffffffff 	.word	0xffffffff
    2818:	ffffffff 	.word	0xffffffff
    281c:	ffffffff 	.word	0xffffffff
    2820:	ffffffff 	.word	0xffffffff
    2824:	ffffffff 	.word	0xffffffff
    2828:	ffffffff 	.word	0xffffffff
    282c:	ffffffff 	.word	0xffffffff
    2830:	ffffffff 	.word	0xffffffff
    2834:	ffffffff 	.word	0xffffffff
    2838:	ffffffff 	.word	0xffffffff
    283c:	ffffffff 	.word	0xffffffff
    2840:	ffffffff 	.word	0xffffffff
    2844:	ffffffff 	.word	0xffffffff
    2848:	ffffffff 	.word	0xffffffff
    284c:	ffffffff 	.word	0xffffffff
    2850:	ffffffff 	.word	0xffffffff
    2854:	ffffffff 	.word	0xffffffff
    2858:	ffffffff 	.word	0xffffffff
    285c:	ffffffff 	.word	0xffffffff
    2860:	ffffffff 	.word	0xffffffff
    2864:	ffffffff 	.word	0xffffffff
    2868:	ffffffff 	.word	0xffffffff
    286c:	ffffffff 	.word	0xffffffff
    2870:	ffffffff 	.word	0xffffffff
    2874:	ffffffff 	.word	0xffffffff
    2878:	ffffffff 	.word	0xffffffff
    287c:	ffffffff 	.word	0xffffffff
    2880:	ffffffff 	.word	0xffffffff
    2884:	ffffffff 	.word	0xffffffff
    2888:	ffffffff 	.word	0xffffffff
    288c:	ffffffff 	.word	0xffffffff
    2890:	ffffffff 	.word	0xffffffff
    2894:	ffffffff 	.word	0xffffffff
    2898:	ffffffff 	.word	0xffffffff
    289c:	ffffffff 	.word	0xffffffff
    28a0:	ffffffff 	.word	0xffffffff
    28a4:	ffffffff 	.word	0xffffffff
    28a8:	ffffffff 	.word	0xffffffff
    28ac:	ffffffff 	.word	0xffffffff
    28b0:	ffffffff 	.word	0xffffffff
    28b4:	ffffffff 	.word	0xffffffff
    28b8:	ffffffff 	.word	0xffffffff
    28bc:	ffffffff 	.word	0xffffffff
    28c0:	ffffffff 	.word	0xffffffff
    28c4:	ffffffff 	.word	0xffffffff
    28c8:	ffffffff 	.word	0xffffffff
    28cc:	ffffffff 	.word	0xffffffff
    28d0:	ffffffff 	.word	0xffffffff
    28d4:	ffffffff 	.word	0xffffffff
    28d8:	ffffffff 	.word	0xffffffff
    28dc:	ffffffff 	.word	0xffffffff
    28e0:	ffffffff 	.word	0xffffffff
    28e4:	ffffffff 	.word	0xffffffff
    28e8:	ffffffff 	.word	0xffffffff
    28ec:	ffffffff 	.word	0xffffffff
    28f0:	ffffffff 	.word	0xffffffff
    28f4:	ffffffff 	.word	0xffffffff
    28f8:	ffffffff 	.word	0xffffffff
    28fc:	ffffffff 	.word	0xffffffff
    2900:	ffffffff 	.word	0xffffffff
    2904:	ffffffff 	.word	0xffffffff
    2908:	ffffffff 	.word	0xffffffff
    290c:	ffffffff 	.word	0xffffffff
    2910:	ffffffff 	.word	0xffffffff
    2914:	ffffffff 	.word	0xffffffff
    2918:	ffffffff 	.word	0xffffffff
    291c:	ffffffff 	.word	0xffffffff
    2920:	ffffffff 	.word	0xffffffff
    2924:	ffffffff 	.word	0xffffffff
    2928:	ffffffff 	.word	0xffffffff
    292c:	ffffffff 	.word	0xffffffff
    2930:	ffffffff 	.word	0xffffffff
    2934:	ffffffff 	.word	0xffffffff
    2938:	ffffffff 	.word	0xffffffff
    293c:	ffffffff 	.word	0xffffffff
    2940:	ffffffff 	.word	0xffffffff
    2944:	ffffffff 	.word	0xffffffff
    2948:	ffffffff 	.word	0xffffffff
    294c:	ffffffff 	.word	0xffffffff
    2950:	ffffffff 	.word	0xffffffff
    2954:	ffffffff 	.word	0xffffffff
    2958:	ffffffff 	.word	0xffffffff
    295c:	ffffffff 	.word	0xffffffff
    2960:	ffffffff 	.word	0xffffffff
    2964:	ffffffff 	.word	0xffffffff
    2968:	ffffffff 	.word	0xffffffff
    296c:	ffffffff 	.word	0xffffffff
    2970:	ffffffff 	.word	0xffffffff
    2974:	ffffffff 	.word	0xffffffff
    2978:	ffffffff 	.word	0xffffffff
    297c:	ffffffff 	.word	0xffffffff
    2980:	ffffffff 	.word	0xffffffff
    2984:	ffffffff 	.word	0xffffffff
    2988:	ffffffff 	.word	0xffffffff
    298c:	ffffffff 	.word	0xffffffff
    2990:	ffffffff 	.word	0xffffffff
    2994:	ffffffff 	.word	0xffffffff
    2998:	ffffffff 	.word	0xffffffff
    299c:	ffffffff 	.word	0xffffffff
    29a0:	ffffffff 	.word	0xffffffff
    29a4:	ffffffff 	.word	0xffffffff
    29a8:	ffffffff 	.word	0xffffffff
    29ac:	ffffffff 	.word	0xffffffff
    29b0:	ffffffff 	.word	0xffffffff
    29b4:	ffffffff 	.word	0xffffffff
    29b8:	ffffffff 	.word	0xffffffff
    29bc:	ffffffff 	.word	0xffffffff
    29c0:	ffffffff 	.word	0xffffffff
    29c4:	ffffffff 	.word	0xffffffff
    29c8:	ffffffff 	.word	0xffffffff
    29cc:	ffffffff 	.word	0xffffffff
    29d0:	ffffffff 	.word	0xffffffff
    29d4:	ffffffff 	.word	0xffffffff
    29d8:	ffffffff 	.word	0xffffffff
    29dc:	ffffffff 	.word	0xffffffff
    29e0:	ffffffff 	.word	0xffffffff
    29e4:	ffffffff 	.word	0xffffffff
    29e8:	ffffffff 	.word	0xffffffff
    29ec:	ffffffff 	.word	0xffffffff
    29f0:	ffffffff 	.word	0xffffffff
    29f4:	ffffffff 	.word	0xffffffff
    29f8:	ffffffff 	.word	0xffffffff
    29fc:	ffffffff 	.word	0xffffffff
    2a00:	ffffffff 	.word	0xffffffff
    2a04:	ffffffff 	.word	0xffffffff
    2a08:	ffffffff 	.word	0xffffffff
    2a0c:	ffffffff 	.word	0xffffffff
    2a10:	ffffffff 	.word	0xffffffff
    2a14:	ffffffff 	.word	0xffffffff
    2a18:	ffffffff 	.word	0xffffffff
    2a1c:	ffffffff 	.word	0xffffffff
    2a20:	ffffffff 	.word	0xffffffff
    2a24:	ffffffff 	.word	0xffffffff
    2a28:	ffffffff 	.word	0xffffffff
    2a2c:	ffffffff 	.word	0xffffffff
    2a30:	ffffffff 	.word	0xffffffff
    2a34:	ffffffff 	.word	0xffffffff
    2a38:	ffffffff 	.word	0xffffffff
    2a3c:	ffffffff 	.word	0xffffffff
    2a40:	ffffffff 	.word	0xffffffff
    2a44:	ffffffff 	.word	0xffffffff
    2a48:	ffffffff 	.word	0xffffffff
    2a4c:	ffffffff 	.word	0xffffffff
    2a50:	ffffffff 	.word	0xffffffff
    2a54:	ffffffff 	.word	0xffffffff
    2a58:	ffffffff 	.word	0xffffffff
    2a5c:	ffffffff 	.word	0xffffffff
    2a60:	ffffffff 	.word	0xffffffff
    2a64:	ffffffff 	.word	0xffffffff
    2a68:	ffffffff 	.word	0xffffffff
    2a6c:	ffffffff 	.word	0xffffffff
    2a70:	ffffffff 	.word	0xffffffff
    2a74:	ffffffff 	.word	0xffffffff
    2a78:	ffffffff 	.word	0xffffffff
    2a7c:	ffffffff 	.word	0xffffffff
    2a80:	ffffffff 	.word	0xffffffff
    2a84:	ffffffff 	.word	0xffffffff
    2a88:	ffffffff 	.word	0xffffffff
    2a8c:	ffffffff 	.word	0xffffffff
    2a90:	ffffffff 	.word	0xffffffff
    2a94:	ffffffff 	.word	0xffffffff
    2a98:	ffffffff 	.word	0xffffffff
    2a9c:	ffffffff 	.word	0xffffffff
    2aa0:	ffffffff 	.word	0xffffffff
    2aa4:	ffffffff 	.word	0xffffffff
    2aa8:	ffffffff 	.word	0xffffffff
    2aac:	ffffffff 	.word	0xffffffff
    2ab0:	ffffffff 	.word	0xffffffff
    2ab4:	ffffffff 	.word	0xffffffff
    2ab8:	ffffffff 	.word	0xffffffff
    2abc:	ffffffff 	.word	0xffffffff
    2ac0:	ffffffff 	.word	0xffffffff
    2ac4:	ffffffff 	.word	0xffffffff
    2ac8:	ffffffff 	.word	0xffffffff
    2acc:	ffffffff 	.word	0xffffffff
    2ad0:	ffffffff 	.word	0xffffffff
    2ad4:	ffffffff 	.word	0xffffffff
    2ad8:	ffffffff 	.word	0xffffffff
    2adc:	ffffffff 	.word	0xffffffff
    2ae0:	ffffffff 	.word	0xffffffff
    2ae4:	ffffffff 	.word	0xffffffff
    2ae8:	ffffffff 	.word	0xffffffff
    2aec:	ffffffff 	.word	0xffffffff
    2af0:	ffffffff 	.word	0xffffffff
    2af4:	ffffffff 	.word	0xffffffff
    2af8:	ffffffff 	.word	0xffffffff
    2afc:	ffffffff 	.word	0xffffffff
    2b00:	ffffffff 	.word	0xffffffff
    2b04:	ffffffff 	.word	0xffffffff
    2b08:	ffffffff 	.word	0xffffffff
    2b0c:	ffffffff 	.word	0xffffffff
    2b10:	ffffffff 	.word	0xffffffff
    2b14:	ffffffff 	.word	0xffffffff
    2b18:	ffffffff 	.word	0xffffffff
    2b1c:	ffffffff 	.word	0xffffffff
    2b20:	ffffffff 	.word	0xffffffff
    2b24:	ffffffff 	.word	0xffffffff
    2b28:	ffffffff 	.word	0xffffffff
    2b2c:	ffffffff 	.word	0xffffffff
    2b30:	ffffffff 	.word	0xffffffff
    2b34:	ffffffff 	.word	0xffffffff
    2b38:	ffffffff 	.word	0xffffffff
    2b3c:	ffffffff 	.word	0xffffffff
    2b40:	ffffffff 	.word	0xffffffff
    2b44:	ffffffff 	.word	0xffffffff
    2b48:	ffffffff 	.word	0xffffffff
    2b4c:	ffffffff 	.word	0xffffffff
    2b50:	ffffffff 	.word	0xffffffff
    2b54:	ffffffff 	.word	0xffffffff
    2b58:	ffffffff 	.word	0xffffffff
    2b5c:	ffffffff 	.word	0xffffffff
    2b60:	ffffffff 	.word	0xffffffff
    2b64:	ffffffff 	.word	0xffffffff
    2b68:	ffffffff 	.word	0xffffffff
    2b6c:	ffffffff 	.word	0xffffffff
    2b70:	ffffffff 	.word	0xffffffff
    2b74:	ffffffff 	.word	0xffffffff
    2b78:	ffffffff 	.word	0xffffffff
    2b7c:	ffffffff 	.word	0xffffffff
    2b80:	ffffffff 	.word	0xffffffff
    2b84:	ffffffff 	.word	0xffffffff
    2b88:	ffffffff 	.word	0xffffffff
    2b8c:	ffffffff 	.word	0xffffffff
    2b90:	ffffffff 	.word	0xffffffff
    2b94:	ffffffff 	.word	0xffffffff
    2b98:	ffffffff 	.word	0xffffffff
    2b9c:	ffffffff 	.word	0xffffffff
    2ba0:	ffffffff 	.word	0xffffffff
    2ba4:	ffffffff 	.word	0xffffffff
    2ba8:	ffffffff 	.word	0xffffffff
    2bac:	ffffffff 	.word	0xffffffff
    2bb0:	ffffffff 	.word	0xffffffff
    2bb4:	ffffffff 	.word	0xffffffff
    2bb8:	ffffffff 	.word	0xffffffff
    2bbc:	ffffffff 	.word	0xffffffff
    2bc0:	ffffffff 	.word	0xffffffff
    2bc4:	ffffffff 	.word	0xffffffff
    2bc8:	ffffffff 	.word	0xffffffff
    2bcc:	ffffffff 	.word	0xffffffff
    2bd0:	ffffffff 	.word	0xffffffff
    2bd4:	ffffffff 	.word	0xffffffff
    2bd8:	ffffffff 	.word	0xffffffff
    2bdc:	ffffffff 	.word	0xffffffff
    2be0:	ffffffff 	.word	0xffffffff
    2be4:	ffffffff 	.word	0xffffffff
    2be8:	ffffffff 	.word	0xffffffff
    2bec:	ffffffff 	.word	0xffffffff
    2bf0:	ffffffff 	.word	0xffffffff
    2bf4:	ffffffff 	.word	0xffffffff
    2bf8:	ffffffff 	.word	0xffffffff
    2bfc:	ffffffff 	.word	0xffffffff
    2c00:	ffffffff 	.word	0xffffffff
    2c04:	ffffffff 	.word	0xffffffff
    2c08:	ffffffff 	.word	0xffffffff
    2c0c:	ffffffff 	.word	0xffffffff
    2c10:	ffffffff 	.word	0xffffffff
    2c14:	ffffffff 	.word	0xffffffff
    2c18:	ffffffff 	.word	0xffffffff
    2c1c:	ffffffff 	.word	0xffffffff
    2c20:	ffffffff 	.word	0xffffffff
    2c24:	ffffffff 	.word	0xffffffff
    2c28:	ffffffff 	.word	0xffffffff
    2c2c:	ffffffff 	.word	0xffffffff
    2c30:	ffffffff 	.word	0xffffffff
    2c34:	ffffffff 	.word	0xffffffff
    2c38:	ffffffff 	.word	0xffffffff
    2c3c:	ffffffff 	.word	0xffffffff
    2c40:	ffffffff 	.word	0xffffffff
    2c44:	ffffffff 	.word	0xffffffff
    2c48:	ffffffff 	.word	0xffffffff
    2c4c:	ffffffff 	.word	0xffffffff
    2c50:	ffffffff 	.word	0xffffffff
    2c54:	ffffffff 	.word	0xffffffff
    2c58:	ffffffff 	.word	0xffffffff
    2c5c:	ffffffff 	.word	0xffffffff
    2c60:	ffffffff 	.word	0xffffffff
    2c64:	ffffffff 	.word	0xffffffff
    2c68:	ffffffff 	.word	0xffffffff
    2c6c:	ffffffff 	.word	0xffffffff
    2c70:	ffffffff 	.word	0xffffffff
    2c74:	ffffffff 	.word	0xffffffff
    2c78:	ffffffff 	.word	0xffffffff
    2c7c:	ffffffff 	.word	0xffffffff
    2c80:	ffffffff 	.word	0xffffffff
    2c84:	ffffffff 	.word	0xffffffff
    2c88:	ffffffff 	.word	0xffffffff
    2c8c:	ffffffff 	.word	0xffffffff
    2c90:	ffffffff 	.word	0xffffffff
    2c94:	ffffffff 	.word	0xffffffff
    2c98:	ffffffff 	.word	0xffffffff
    2c9c:	ffffffff 	.word	0xffffffff
    2ca0:	ffffffff 	.word	0xffffffff
    2ca4:	ffffffff 	.word	0xffffffff
    2ca8:	ffffffff 	.word	0xffffffff
    2cac:	ffffffff 	.word	0xffffffff
    2cb0:	ffffffff 	.word	0xffffffff
    2cb4:	ffffffff 	.word	0xffffffff
    2cb8:	ffffffff 	.word	0xffffffff
    2cbc:	ffffffff 	.word	0xffffffff
    2cc0:	ffffffff 	.word	0xffffffff
    2cc4:	ffffffff 	.word	0xffffffff
    2cc8:	ffffffff 	.word	0xffffffff
    2ccc:	ffffffff 	.word	0xffffffff
    2cd0:	ffffffff 	.word	0xffffffff
    2cd4:	ffffffff 	.word	0xffffffff
    2cd8:	ffffffff 	.word	0xffffffff
    2cdc:	ffffffff 	.word	0xffffffff
    2ce0:	ffffffff 	.word	0xffffffff
    2ce4:	ffffffff 	.word	0xffffffff
    2ce8:	ffffffff 	.word	0xffffffff
    2cec:	ffffffff 	.word	0xffffffff
    2cf0:	ffffffff 	.word	0xffffffff
    2cf4:	ffffffff 	.word	0xffffffff
    2cf8:	ffffffff 	.word	0xffffffff
    2cfc:	ffffffff 	.word	0xffffffff
    2d00:	ffffffff 	.word	0xffffffff
    2d04:	ffffffff 	.word	0xffffffff
    2d08:	ffffffff 	.word	0xffffffff
    2d0c:	ffffffff 	.word	0xffffffff
    2d10:	ffffffff 	.word	0xffffffff
    2d14:	ffffffff 	.word	0xffffffff
    2d18:	ffffffff 	.word	0xffffffff
    2d1c:	ffffffff 	.word	0xffffffff
    2d20:	ffffffff 	.word	0xffffffff
    2d24:	ffffffff 	.word	0xffffffff
    2d28:	ffffffff 	.word	0xffffffff
    2d2c:	ffffffff 	.word	0xffffffff
    2d30:	ffffffff 	.word	0xffffffff
    2d34:	ffffffff 	.word	0xffffffff
    2d38:	ffffffff 	.word	0xffffffff
    2d3c:	ffffffff 	.word	0xffffffff
    2d40:	ffffffff 	.word	0xffffffff
    2d44:	ffffffff 	.word	0xffffffff
    2d48:	ffffffff 	.word	0xffffffff
    2d4c:	ffffffff 	.word	0xffffffff
    2d50:	ffffffff 	.word	0xffffffff
    2d54:	ffffffff 	.word	0xffffffff
    2d58:	ffffffff 	.word	0xffffffff
    2d5c:	ffffffff 	.word	0xffffffff
    2d60:	ffffffff 	.word	0xffffffff
    2d64:	ffffffff 	.word	0xffffffff
    2d68:	ffffffff 	.word	0xffffffff
    2d6c:	ffffffff 	.word	0xffffffff
    2d70:	ffffffff 	.word	0xffffffff
    2d74:	ffffffff 	.word	0xffffffff
    2d78:	ffffffff 	.word	0xffffffff
    2d7c:	ffffffff 	.word	0xffffffff
    2d80:	ffffffff 	.word	0xffffffff
    2d84:	ffffffff 	.word	0xffffffff
    2d88:	ffffffff 	.word	0xffffffff
    2d8c:	ffffffff 	.word	0xffffffff
    2d90:	ffffffff 	.word	0xffffffff
    2d94:	ffffffff 	.word	0xffffffff
    2d98:	ffffffff 	.word	0xffffffff
    2d9c:	ffffffff 	.word	0xffffffff
    2da0:	ffffffff 	.word	0xffffffff
    2da4:	ffffffff 	.word	0xffffffff
    2da8:	ffffffff 	.word	0xffffffff
    2dac:	ffffffff 	.word	0xffffffff
    2db0:	ffffffff 	.word	0xffffffff
    2db4:	ffffffff 	.word	0xffffffff
    2db8:	ffffffff 	.word	0xffffffff
    2dbc:	ffffffff 	.word	0xffffffff
    2dc0:	ffffffff 	.word	0xffffffff
    2dc4:	ffffffff 	.word	0xffffffff
    2dc8:	ffffffff 	.word	0xffffffff
    2dcc:	ffffffff 	.word	0xffffffff
    2dd0:	ffffffff 	.word	0xffffffff
    2dd4:	ffffffff 	.word	0xffffffff
    2dd8:	ffffffff 	.word	0xffffffff
    2ddc:	ffffffff 	.word	0xffffffff
    2de0:	ffffffff 	.word	0xffffffff
    2de4:	ffffffff 	.word	0xffffffff
    2de8:	ffffffff 	.word	0xffffffff
    2dec:	ffffffff 	.word	0xffffffff
    2df0:	ffffffff 	.word	0xffffffff
    2df4:	ffffffff 	.word	0xffffffff
    2df8:	ffffffff 	.word	0xffffffff
    2dfc:	ffffffff 	.word	0xffffffff
    2e00:	ffffffff 	.word	0xffffffff
    2e04:	ffffffff 	.word	0xffffffff
    2e08:	ffffffff 	.word	0xffffffff
    2e0c:	ffffffff 	.word	0xffffffff
    2e10:	ffffffff 	.word	0xffffffff
    2e14:	ffffffff 	.word	0xffffffff
    2e18:	ffffffff 	.word	0xffffffff
    2e1c:	ffffffff 	.word	0xffffffff
    2e20:	ffffffff 	.word	0xffffffff
    2e24:	ffffffff 	.word	0xffffffff
    2e28:	ffffffff 	.word	0xffffffff
    2e2c:	ffffffff 	.word	0xffffffff
    2e30:	ffffffff 	.word	0xffffffff
    2e34:	ffffffff 	.word	0xffffffff
    2e38:	ffffffff 	.word	0xffffffff
    2e3c:	ffffffff 	.word	0xffffffff
    2e40:	ffffffff 	.word	0xffffffff
    2e44:	ffffffff 	.word	0xffffffff
    2e48:	ffffffff 	.word	0xffffffff
    2e4c:	ffffffff 	.word	0xffffffff
    2e50:	ffffffff 	.word	0xffffffff
    2e54:	ffffffff 	.word	0xffffffff
    2e58:	ffffffff 	.word	0xffffffff
    2e5c:	ffffffff 	.word	0xffffffff
    2e60:	ffffffff 	.word	0xffffffff
    2e64:	ffffffff 	.word	0xffffffff
    2e68:	ffffffff 	.word	0xffffffff
    2e6c:	ffffffff 	.word	0xffffffff
    2e70:	ffffffff 	.word	0xffffffff
    2e74:	ffffffff 	.word	0xffffffff
    2e78:	ffffffff 	.word	0xffffffff
    2e7c:	ffffffff 	.word	0xffffffff
    2e80:	ffffffff 	.word	0xffffffff
    2e84:	ffffffff 	.word	0xffffffff
    2e88:	ffffffff 	.word	0xffffffff
    2e8c:	ffffffff 	.word	0xffffffff
    2e90:	ffffffff 	.word	0xffffffff
    2e94:	ffffffff 	.word	0xffffffff
    2e98:	ffffffff 	.word	0xffffffff
    2e9c:	ffffffff 	.word	0xffffffff
    2ea0:	ffffffff 	.word	0xffffffff
    2ea4:	ffffffff 	.word	0xffffffff
    2ea8:	ffffffff 	.word	0xffffffff
    2eac:	ffffffff 	.word	0xffffffff
    2eb0:	ffffffff 	.word	0xffffffff
    2eb4:	ffffffff 	.word	0xffffffff
    2eb8:	ffffffff 	.word	0xffffffff
    2ebc:	ffffffff 	.word	0xffffffff
    2ec0:	ffffffff 	.word	0xffffffff
    2ec4:	ffffffff 	.word	0xffffffff
    2ec8:	ffffffff 	.word	0xffffffff
    2ecc:	ffffffff 	.word	0xffffffff
    2ed0:	ffffffff 	.word	0xffffffff
    2ed4:	ffffffff 	.word	0xffffffff
    2ed8:	ffffffff 	.word	0xffffffff
    2edc:	ffffffff 	.word	0xffffffff
    2ee0:	ffffffff 	.word	0xffffffff
    2ee4:	ffffffff 	.word	0xffffffff
    2ee8:	ffffffff 	.word	0xffffffff
    2eec:	ffffffff 	.word	0xffffffff
    2ef0:	ffffffff 	.word	0xffffffff
    2ef4:	ffffffff 	.word	0xffffffff
    2ef8:	ffffffff 	.word	0xffffffff
    2efc:	ffffffff 	.word	0xffffffff
    2f00:	ffffffff 	.word	0xffffffff
    2f04:	ffffffff 	.word	0xffffffff
    2f08:	ffffffff 	.word	0xffffffff
    2f0c:	ffffffff 	.word	0xffffffff
    2f10:	ffffffff 	.word	0xffffffff
    2f14:	ffffffff 	.word	0xffffffff
    2f18:	ffffffff 	.word	0xffffffff
    2f1c:	ffffffff 	.word	0xffffffff
    2f20:	ffffffff 	.word	0xffffffff
    2f24:	ffffffff 	.word	0xffffffff
    2f28:	ffffffff 	.word	0xffffffff
    2f2c:	ffffffff 	.word	0xffffffff
    2f30:	ffffffff 	.word	0xffffffff
    2f34:	ffffffff 	.word	0xffffffff
    2f38:	ffffffff 	.word	0xffffffff
    2f3c:	ffffffff 	.word	0xffffffff
    2f40:	ffffffff 	.word	0xffffffff
    2f44:	ffffffff 	.word	0xffffffff
    2f48:	ffffffff 	.word	0xffffffff
    2f4c:	ffffffff 	.word	0xffffffff
    2f50:	ffffffff 	.word	0xffffffff
    2f54:	ffffffff 	.word	0xffffffff
    2f58:	ffffffff 	.word	0xffffffff
    2f5c:	ffffffff 	.word	0xffffffff
    2f60:	ffffffff 	.word	0xffffffff
    2f64:	ffffffff 	.word	0xffffffff
    2f68:	ffffffff 	.word	0xffffffff
    2f6c:	ffffffff 	.word	0xffffffff
    2f70:	ffffffff 	.word	0xffffffff
    2f74:	ffffffff 	.word	0xffffffff
    2f78:	ffffffff 	.word	0xffffffff
    2f7c:	ffffffff 	.word	0xffffffff
    2f80:	ffffffff 	.word	0xffffffff
    2f84:	ffffffff 	.word	0xffffffff
    2f88:	ffffffff 	.word	0xffffffff
    2f8c:	ffffffff 	.word	0xffffffff
    2f90:	ffffffff 	.word	0xffffffff
    2f94:	ffffffff 	.word	0xffffffff
    2f98:	ffffffff 	.word	0xffffffff
    2f9c:	ffffffff 	.word	0xffffffff
    2fa0:	ffffffff 	.word	0xffffffff
    2fa4:	ffffffff 	.word	0xffffffff
    2fa8:	ffffffff 	.word	0xffffffff
    2fac:	ffffffff 	.word	0xffffffff
    2fb0:	ffffffff 	.word	0xffffffff
    2fb4:	ffffffff 	.word	0xffffffff
    2fb8:	ffffffff 	.word	0xffffffff
    2fbc:	ffffffff 	.word	0xffffffff
    2fc0:	ffffffff 	.word	0xffffffff
    2fc4:	ffffffff 	.word	0xffffffff
    2fc8:	ffffffff 	.word	0xffffffff
    2fcc:	ffffffff 	.word	0xffffffff
    2fd0:	ffffffff 	.word	0xffffffff
    2fd4:	ffffffff 	.word	0xffffffff
    2fd8:	ffffffff 	.word	0xffffffff
    2fdc:	ffffffff 	.word	0xffffffff
    2fe0:	ffffffff 	.word	0xffffffff
    2fe4:	ffffffff 	.word	0xffffffff
    2fe8:	ffffffff 	.word	0xffffffff
    2fec:	ffffffff 	.word	0xffffffff
    2ff0:	ffffffff 	.word	0xffffffff
    2ff4:	ffffffff 	.word	0xffffffff
    2ff8:	ffffffff 	.word	0xffffffff
    2ffc:	ffffffff 	.word	0xffffffff
    3000:	ffffffff 	.word	0xffffffff
    3004:	ffffffff 	.word	0xffffffff
    3008:	ffffffff 	.word	0xffffffff
    300c:	ffffffff 	.word	0xffffffff
    3010:	ffffffff 	.word	0xffffffff
    3014:	ffffffff 	.word	0xffffffff
    3018:	ffffffff 	.word	0xffffffff
    301c:	ffffffff 	.word	0xffffffff
    3020:	ffffffff 	.word	0xffffffff
    3024:	ffffffff 	.word	0xffffffff
    3028:	ffffffff 	.word	0xffffffff
    302c:	ffffffff 	.word	0xffffffff
    3030:	ffffffff 	.word	0xffffffff
    3034:	ffffffff 	.word	0xffffffff
    3038:	ffffffff 	.word	0xffffffff
    303c:	ffffffff 	.word	0xffffffff
    3040:	ffffffff 	.word	0xffffffff
    3044:	ffffffff 	.word	0xffffffff
    3048:	ffffffff 	.word	0xffffffff
    304c:	ffffffff 	.word	0xffffffff
    3050:	ffffffff 	.word	0xffffffff
    3054:	ffffffff 	.word	0xffffffff
    3058:	ffffffff 	.word	0xffffffff
    305c:	ffffffff 	.word	0xffffffff
    3060:	ffffffff 	.word	0xffffffff
    3064:	ffffffff 	.word	0xffffffff
    3068:	ffffffff 	.word	0xffffffff
    306c:	ffffffff 	.word	0xffffffff
    3070:	ffffffff 	.word	0xffffffff
    3074:	ffffffff 	.word	0xffffffff
    3078:	ffffffff 	.word	0xffffffff
    307c:	ffffffff 	.word	0xffffffff
    3080:	ffffffff 	.word	0xffffffff
    3084:	ffffffff 	.word	0xffffffff
    3088:	ffffffff 	.word	0xffffffff
    308c:	ffffffff 	.word	0xffffffff
    3090:	ffffffff 	.word	0xffffffff
    3094:	ffffffff 	.word	0xffffffff
    3098:	ffffffff 	.word	0xffffffff
    309c:	ffffffff 	.word	0xffffffff
    30a0:	ffffffff 	.word	0xffffffff
    30a4:	ffffffff 	.word	0xffffffff
    30a8:	ffffffff 	.word	0xffffffff
    30ac:	ffffffff 	.word	0xffffffff
    30b0:	ffffffff 	.word	0xffffffff
    30b4:	ffffffff 	.word	0xffffffff
    30b8:	ffffffff 	.word	0xffffffff
    30bc:	ffffffff 	.word	0xffffffff
    30c0:	ffffffff 	.word	0xffffffff
    30c4:	ffffffff 	.word	0xffffffff
    30c8:	ffffffff 	.word	0xffffffff
    30cc:	ffffffff 	.word	0xffffffff
    30d0:	ffffffff 	.word	0xffffffff
    30d4:	ffffffff 	.word	0xffffffff
    30d8:	ffffffff 	.word	0xffffffff
    30dc:	ffffffff 	.word	0xffffffff
    30e0:	ffffffff 	.word	0xffffffff
    30e4:	ffffffff 	.word	0xffffffff
    30e8:	ffffffff 	.word	0xffffffff
    30ec:	ffffffff 	.word	0xffffffff
    30f0:	ffffffff 	.word	0xffffffff
    30f4:	ffffffff 	.word	0xffffffff
    30f8:	ffffffff 	.word	0xffffffff
    30fc:	ffffffff 	.word	0xffffffff
    3100:	ffffffff 	.word	0xffffffff
    3104:	ffffffff 	.word	0xffffffff
    3108:	ffffffff 	.word	0xffffffff
    310c:	ffffffff 	.word	0xffffffff
    3110:	ffffffff 	.word	0xffffffff
    3114:	ffffffff 	.word	0xffffffff
    3118:	ffffffff 	.word	0xffffffff
    311c:	ffffffff 	.word	0xffffffff
    3120:	ffffffff 	.word	0xffffffff
    3124:	ffffffff 	.word	0xffffffff
    3128:	ffffffff 	.word	0xffffffff
    312c:	ffffffff 	.word	0xffffffff
    3130:	ffffffff 	.word	0xffffffff
    3134:	ffffffff 	.word	0xffffffff
    3138:	ffffffff 	.word	0xffffffff
    313c:	ffffffff 	.word	0xffffffff
    3140:	ffffffff 	.word	0xffffffff
    3144:	ffffffff 	.word	0xffffffff
    3148:	ffffffff 	.word	0xffffffff
    314c:	ffffffff 	.word	0xffffffff
    3150:	ffffffff 	.word	0xffffffff
    3154:	ffffffff 	.word	0xffffffff
    3158:	ffffffff 	.word	0xffffffff
    315c:	ffffffff 	.word	0xffffffff
    3160:	ffffffff 	.word	0xffffffff
    3164:	ffffffff 	.word	0xffffffff
    3168:	ffffffff 	.word	0xffffffff
    316c:	ffffffff 	.word	0xffffffff
    3170:	ffffffff 	.word	0xffffffff
    3174:	ffffffff 	.word	0xffffffff
    3178:	ffffffff 	.word	0xffffffff
    317c:	ffffffff 	.word	0xffffffff
    3180:	ffffffff 	.word	0xffffffff
    3184:	ffffffff 	.word	0xffffffff
    3188:	ffffffff 	.word	0xffffffff
    318c:	ffffffff 	.word	0xffffffff
    3190:	ffffffff 	.word	0xffffffff
    3194:	ffffffff 	.word	0xffffffff
    3198:	ffffffff 	.word	0xffffffff
    319c:	ffffffff 	.word	0xffffffff
    31a0:	ffffffff 	.word	0xffffffff
    31a4:	ffffffff 	.word	0xffffffff
    31a8:	ffffffff 	.word	0xffffffff
    31ac:	ffffffff 	.word	0xffffffff
    31b0:	ffffffff 	.word	0xffffffff
    31b4:	ffffffff 	.word	0xffffffff
    31b8:	ffffffff 	.word	0xffffffff
    31bc:	ffffffff 	.word	0xffffffff
    31c0:	ffffffff 	.word	0xffffffff
    31c4:	ffffffff 	.word	0xffffffff
    31c8:	ffffffff 	.word	0xffffffff
    31cc:	ffffffff 	.word	0xffffffff
    31d0:	ffffffff 	.word	0xffffffff
    31d4:	ffffffff 	.word	0xffffffff
    31d8:	ffffffff 	.word	0xffffffff
    31dc:	ffffffff 	.word	0xffffffff
    31e0:	ffffffff 	.word	0xffffffff
    31e4:	ffffffff 	.word	0xffffffff
    31e8:	ffffffff 	.word	0xffffffff
    31ec:	ffffffff 	.word	0xffffffff
    31f0:	ffffffff 	.word	0xffffffff
    31f4:	ffffffff 	.word	0xffffffff
    31f8:	ffffffff 	.word	0xffffffff
    31fc:	ffffffff 	.word	0xffffffff
    3200:	ffffffff 	.word	0xffffffff
    3204:	ffffffff 	.word	0xffffffff
    3208:	ffffffff 	.word	0xffffffff
    320c:	ffffffff 	.word	0xffffffff
    3210:	ffffffff 	.word	0xffffffff
    3214:	ffffffff 	.word	0xffffffff
    3218:	ffffffff 	.word	0xffffffff
    321c:	ffffffff 	.word	0xffffffff
    3220:	ffffffff 	.word	0xffffffff
    3224:	ffffffff 	.word	0xffffffff
    3228:	ffffffff 	.word	0xffffffff
    322c:	ffffffff 	.word	0xffffffff
    3230:	ffffffff 	.word	0xffffffff
    3234:	ffffffff 	.word	0xffffffff
    3238:	ffffffff 	.word	0xffffffff
    323c:	ffffffff 	.word	0xffffffff
    3240:	ffffffff 	.word	0xffffffff
    3244:	ffffffff 	.word	0xffffffff
    3248:	ffffffff 	.word	0xffffffff
    324c:	ffffffff 	.word	0xffffffff
    3250:	ffffffff 	.word	0xffffffff
    3254:	ffffffff 	.word	0xffffffff
    3258:	ffffffff 	.word	0xffffffff
    325c:	ffffffff 	.word	0xffffffff
    3260:	ffffffff 	.word	0xffffffff
    3264:	ffffffff 	.word	0xffffffff
    3268:	ffffffff 	.word	0xffffffff
    326c:	ffffffff 	.word	0xffffffff
    3270:	ffffffff 	.word	0xffffffff
    3274:	ffffffff 	.word	0xffffffff
    3278:	ffffffff 	.word	0xffffffff
    327c:	ffffffff 	.word	0xffffffff
    3280:	ffffffff 	.word	0xffffffff
    3284:	ffffffff 	.word	0xffffffff
    3288:	ffffffff 	.word	0xffffffff
    328c:	ffffffff 	.word	0xffffffff
    3290:	ffffffff 	.word	0xffffffff
    3294:	ffffffff 	.word	0xffffffff
    3298:	ffffffff 	.word	0xffffffff
    329c:	ffffffff 	.word	0xffffffff
    32a0:	ffffffff 	.word	0xffffffff
    32a4:	ffffffff 	.word	0xffffffff
    32a8:	ffffffff 	.word	0xffffffff
    32ac:	ffffffff 	.word	0xffffffff
    32b0:	ffffffff 	.word	0xffffffff
    32b4:	ffffffff 	.word	0xffffffff
    32b8:	ffffffff 	.word	0xffffffff
    32bc:	ffffffff 	.word	0xffffffff
    32c0:	ffffffff 	.word	0xffffffff
    32c4:	ffffffff 	.word	0xffffffff
    32c8:	ffffffff 	.word	0xffffffff
    32cc:	ffffffff 	.word	0xffffffff
    32d0:	ffffffff 	.word	0xffffffff
    32d4:	ffffffff 	.word	0xffffffff
    32d8:	ffffffff 	.word	0xffffffff
    32dc:	ffffffff 	.word	0xffffffff
    32e0:	ffffffff 	.word	0xffffffff
    32e4:	ffffffff 	.word	0xffffffff
    32e8:	ffffffff 	.word	0xffffffff
    32ec:	ffffffff 	.word	0xffffffff
    32f0:	ffffffff 	.word	0xffffffff
    32f4:	ffffffff 	.word	0xffffffff
    32f8:	ffffffff 	.word	0xffffffff
    32fc:	ffffffff 	.word	0xffffffff
    3300:	ffffffff 	.word	0xffffffff
    3304:	ffffffff 	.word	0xffffffff
    3308:	ffffffff 	.word	0xffffffff
    330c:	ffffffff 	.word	0xffffffff
    3310:	ffffffff 	.word	0xffffffff
    3314:	ffffffff 	.word	0xffffffff
    3318:	ffffffff 	.word	0xffffffff
    331c:	ffffffff 	.word	0xffffffff
    3320:	ffffffff 	.word	0xffffffff
    3324:	ffffffff 	.word	0xffffffff
    3328:	ffffffff 	.word	0xffffffff
    332c:	ffffffff 	.word	0xffffffff
    3330:	ffffffff 	.word	0xffffffff
    3334:	ffffffff 	.word	0xffffffff
    3338:	ffffffff 	.word	0xffffffff
    333c:	ffffffff 	.word	0xffffffff
    3340:	ffffffff 	.word	0xffffffff
    3344:	ffffffff 	.word	0xffffffff
    3348:	ffffffff 	.word	0xffffffff
    334c:	ffffffff 	.word	0xffffffff
    3350:	ffffffff 	.word	0xffffffff
    3354:	ffffffff 	.word	0xffffffff
    3358:	ffffffff 	.word	0xffffffff
    335c:	ffffffff 	.word	0xffffffff
    3360:	ffffffff 	.word	0xffffffff
    3364:	ffffffff 	.word	0xffffffff
    3368:	ffffffff 	.word	0xffffffff
    336c:	ffffffff 	.word	0xffffffff
    3370:	ffffffff 	.word	0xffffffff
    3374:	ffffffff 	.word	0xffffffff
    3378:	ffffffff 	.word	0xffffffff
    337c:	ffffffff 	.word	0xffffffff
    3380:	ffffffff 	.word	0xffffffff
    3384:	ffffffff 	.word	0xffffffff
    3388:	ffffffff 	.word	0xffffffff
    338c:	ffffffff 	.word	0xffffffff
    3390:	ffffffff 	.word	0xffffffff
    3394:	ffffffff 	.word	0xffffffff
    3398:	ffffffff 	.word	0xffffffff
    339c:	ffffffff 	.word	0xffffffff
    33a0:	ffffffff 	.word	0xffffffff
    33a4:	ffffffff 	.word	0xffffffff
    33a8:	ffffffff 	.word	0xffffffff
    33ac:	ffffffff 	.word	0xffffffff
    33b0:	ffffffff 	.word	0xffffffff
    33b4:	ffffffff 	.word	0xffffffff
    33b8:	ffffffff 	.word	0xffffffff
    33bc:	ffffffff 	.word	0xffffffff
    33c0:	ffffffff 	.word	0xffffffff
    33c4:	ffffffff 	.word	0xffffffff
    33c8:	ffffffff 	.word	0xffffffff
    33cc:	ffffffff 	.word	0xffffffff
    33d0:	ffffffff 	.word	0xffffffff
    33d4:	ffffffff 	.word	0xffffffff
    33d8:	ffffffff 	.word	0xffffffff
    33dc:	ffffffff 	.word	0xffffffff
    33e0:	ffffffff 	.word	0xffffffff
    33e4:	ffffffff 	.word	0xffffffff
    33e8:	ffffffff 	.word	0xffffffff
    33ec:	ffffffff 	.word	0xffffffff
    33f0:	ffffffff 	.word	0xffffffff
    33f4:	ffffffff 	.word	0xffffffff
    33f8:	ffffffff 	.word	0xffffffff
    33fc:	ffffffff 	.word	0xffffffff
    3400:	ffffffff 	.word	0xffffffff
    3404:	ffffffff 	.word	0xffffffff
    3408:	ffffffff 	.word	0xffffffff
    340c:	ffffffff 	.word	0xffffffff
    3410:	ffffffff 	.word	0xffffffff
    3414:	ffffffff 	.word	0xffffffff
    3418:	ffffffff 	.word	0xffffffff
    341c:	ffffffff 	.word	0xffffffff
    3420:	ffffffff 	.word	0xffffffff
    3424:	ffffffff 	.word	0xffffffff
    3428:	ffffffff 	.word	0xffffffff
    342c:	ffffffff 	.word	0xffffffff
    3430:	ffffffff 	.word	0xffffffff
    3434:	ffffffff 	.word	0xffffffff
    3438:	ffffffff 	.word	0xffffffff
    343c:	ffffffff 	.word	0xffffffff
    3440:	ffffffff 	.word	0xffffffff
    3444:	ffffffff 	.word	0xffffffff
    3448:	ffffffff 	.word	0xffffffff
    344c:	ffffffff 	.word	0xffffffff
    3450:	ffffffff 	.word	0xffffffff
    3454:	ffffffff 	.word	0xffffffff
    3458:	ffffffff 	.word	0xffffffff
    345c:	ffffffff 	.word	0xffffffff
    3460:	ffffffff 	.word	0xffffffff
    3464:	ffffffff 	.word	0xffffffff
    3468:	ffffffff 	.word	0xffffffff
    346c:	ffffffff 	.word	0xffffffff
    3470:	ffffffff 	.word	0xffffffff
    3474:	ffffffff 	.word	0xffffffff
    3478:	ffffffff 	.word	0xffffffff
    347c:	ffffffff 	.word	0xffffffff
    3480:	ffffffff 	.word	0xffffffff
    3484:	ffffffff 	.word	0xffffffff
    3488:	ffffffff 	.word	0xffffffff
    348c:	ffffffff 	.word	0xffffffff
    3490:	ffffffff 	.word	0xffffffff
    3494:	ffffffff 	.word	0xffffffff
    3498:	ffffffff 	.word	0xffffffff
    349c:	ffffffff 	.word	0xffffffff
    34a0:	ffffffff 	.word	0xffffffff
    34a4:	ffffffff 	.word	0xffffffff
    34a8:	ffffffff 	.word	0xffffffff
    34ac:	ffffffff 	.word	0xffffffff
    34b0:	ffffffff 	.word	0xffffffff
    34b4:	ffffffff 	.word	0xffffffff
    34b8:	ffffffff 	.word	0xffffffff
    34bc:	ffffffff 	.word	0xffffffff
    34c0:	ffffffff 	.word	0xffffffff
    34c4:	ffffffff 	.word	0xffffffff
    34c8:	ffffffff 	.word	0xffffffff
    34cc:	ffffffff 	.word	0xffffffff
    34d0:	ffffffff 	.word	0xffffffff
    34d4:	ffffffff 	.word	0xffffffff
    34d8:	ffffffff 	.word	0xffffffff
    34dc:	ffffffff 	.word	0xffffffff
    34e0:	ffffffff 	.word	0xffffffff
    34e4:	ffffffff 	.word	0xffffffff
    34e8:	ffffffff 	.word	0xffffffff
    34ec:	ffffffff 	.word	0xffffffff
    34f0:	ffffffff 	.word	0xffffffff
    34f4:	ffffffff 	.word	0xffffffff
    34f8:	ffffffff 	.word	0xffffffff
    34fc:	ffffffff 	.word	0xffffffff
    3500:	ffffffff 	.word	0xffffffff
    3504:	ffffffff 	.word	0xffffffff
    3508:	ffffffff 	.word	0xffffffff
    350c:	ffffffff 	.word	0xffffffff
    3510:	ffffffff 	.word	0xffffffff
    3514:	ffffffff 	.word	0xffffffff
    3518:	ffffffff 	.word	0xffffffff
    351c:	ffffffff 	.word	0xffffffff
    3520:	ffffffff 	.word	0xffffffff
    3524:	ffffffff 	.word	0xffffffff
    3528:	ffffffff 	.word	0xffffffff
    352c:	ffffffff 	.word	0xffffffff
    3530:	ffffffff 	.word	0xffffffff
    3534:	ffffffff 	.word	0xffffffff
    3538:	ffffffff 	.word	0xffffffff
    353c:	ffffffff 	.word	0xffffffff
    3540:	ffffffff 	.word	0xffffffff
    3544:	ffffffff 	.word	0xffffffff
    3548:	ffffffff 	.word	0xffffffff
    354c:	ffffffff 	.word	0xffffffff
    3550:	ffffffff 	.word	0xffffffff
    3554:	ffffffff 	.word	0xffffffff
    3558:	ffffffff 	.word	0xffffffff
    355c:	ffffffff 	.word	0xffffffff
    3560:	ffffffff 	.word	0xffffffff
    3564:	ffffffff 	.word	0xffffffff
    3568:	ffffffff 	.word	0xffffffff
    356c:	ffffffff 	.word	0xffffffff
    3570:	ffffffff 	.word	0xffffffff
    3574:	ffffffff 	.word	0xffffffff
    3578:	ffffffff 	.word	0xffffffff
    357c:	ffffffff 	.word	0xffffffff
    3580:	ffffffff 	.word	0xffffffff
    3584:	ffffffff 	.word	0xffffffff
    3588:	ffffffff 	.word	0xffffffff
    358c:	ffffffff 	.word	0xffffffff
    3590:	ffffffff 	.word	0xffffffff
    3594:	ffffffff 	.word	0xffffffff
    3598:	ffffffff 	.word	0xffffffff
    359c:	ffffffff 	.word	0xffffffff
    35a0:	ffffffff 	.word	0xffffffff
    35a4:	ffffffff 	.word	0xffffffff
    35a8:	ffffffff 	.word	0xffffffff
    35ac:	ffffffff 	.word	0xffffffff
    35b0:	ffffffff 	.word	0xffffffff
    35b4:	ffffffff 	.word	0xffffffff
    35b8:	ffffffff 	.word	0xffffffff
    35bc:	ffffffff 	.word	0xffffffff
    35c0:	ffffffff 	.word	0xffffffff
    35c4:	ffffffff 	.word	0xffffffff
    35c8:	ffffffff 	.word	0xffffffff
    35cc:	ffffffff 	.word	0xffffffff
    35d0:	ffffffff 	.word	0xffffffff
    35d4:	ffffffff 	.word	0xffffffff
    35d8:	ffffffff 	.word	0xffffffff
    35dc:	ffffffff 	.word	0xffffffff
    35e0:	ffffffff 	.word	0xffffffff
    35e4:	ffffffff 	.word	0xffffffff
    35e8:	ffffffff 	.word	0xffffffff
    35ec:	ffffffff 	.word	0xffffffff
    35f0:	ffffffff 	.word	0xffffffff
    35f4:	ffffffff 	.word	0xffffffff
    35f8:	ffffffff 	.word	0xffffffff
    35fc:	ffffffff 	.word	0xffffffff
    3600:	ffffffff 	.word	0xffffffff
    3604:	ffffffff 	.word	0xffffffff
    3608:	ffffffff 	.word	0xffffffff
    360c:	ffffffff 	.word	0xffffffff
    3610:	ffffffff 	.word	0xffffffff
    3614:	ffffffff 	.word	0xffffffff
    3618:	ffffffff 	.word	0xffffffff
    361c:	ffffffff 	.word	0xffffffff
    3620:	ffffffff 	.word	0xffffffff
    3624:	ffffffff 	.word	0xffffffff
    3628:	ffffffff 	.word	0xffffffff
    362c:	ffffffff 	.word	0xffffffff
    3630:	ffffffff 	.word	0xffffffff
    3634:	ffffffff 	.word	0xffffffff
    3638:	ffffffff 	.word	0xffffffff
    363c:	ffffffff 	.word	0xffffffff
    3640:	ffffffff 	.word	0xffffffff
    3644:	ffffffff 	.word	0xffffffff
    3648:	ffffffff 	.word	0xffffffff
    364c:	ffffffff 	.word	0xffffffff
    3650:	ffffffff 	.word	0xffffffff
    3654:	ffffffff 	.word	0xffffffff
    3658:	ffffffff 	.word	0xffffffff
    365c:	ffffffff 	.word	0xffffffff
    3660:	ffffffff 	.word	0xffffffff
    3664:	ffffffff 	.word	0xffffffff
    3668:	ffffffff 	.word	0xffffffff
    366c:	ffffffff 	.word	0xffffffff
    3670:	ffffffff 	.word	0xffffffff
    3674:	ffffffff 	.word	0xffffffff
    3678:	ffffffff 	.word	0xffffffff
    367c:	ffffffff 	.word	0xffffffff
    3680:	ffffffff 	.word	0xffffffff
    3684:	ffffffff 	.word	0xffffffff
    3688:	ffffffff 	.word	0xffffffff
    368c:	ffffffff 	.word	0xffffffff
    3690:	ffffffff 	.word	0xffffffff
    3694:	ffffffff 	.word	0xffffffff
    3698:	ffffffff 	.word	0xffffffff
    369c:	ffffffff 	.word	0xffffffff
    36a0:	ffffffff 	.word	0xffffffff
    36a4:	ffffffff 	.word	0xffffffff
    36a8:	ffffffff 	.word	0xffffffff
    36ac:	ffffffff 	.word	0xffffffff
    36b0:	ffffffff 	.word	0xffffffff
    36b4:	ffffffff 	.word	0xffffffff
    36b8:	ffffffff 	.word	0xffffffff
    36bc:	ffffffff 	.word	0xffffffff
    36c0:	ffffffff 	.word	0xffffffff
    36c4:	ffffffff 	.word	0xffffffff
    36c8:	ffffffff 	.word	0xffffffff
    36cc:	ffffffff 	.word	0xffffffff
    36d0:	ffffffff 	.word	0xffffffff
    36d4:	ffffffff 	.word	0xffffffff
    36d8:	ffffffff 	.word	0xffffffff
    36dc:	ffffffff 	.word	0xffffffff
    36e0:	ffffffff 	.word	0xffffffff
    36e4:	ffffffff 	.word	0xffffffff
    36e8:	ffffffff 	.word	0xffffffff
    36ec:	ffffffff 	.word	0xffffffff
    36f0:	ffffffff 	.word	0xffffffff
    36f4:	ffffffff 	.word	0xffffffff
    36f8:	ffffffff 	.word	0xffffffff
    36fc:	ffffffff 	.word	0xffffffff
    3700:	ffffffff 	.word	0xffffffff
    3704:	ffffffff 	.word	0xffffffff
    3708:	ffffffff 	.word	0xffffffff
    370c:	ffffffff 	.word	0xffffffff
    3710:	ffffffff 	.word	0xffffffff
    3714:	ffffffff 	.word	0xffffffff
    3718:	ffffffff 	.word	0xffffffff
    371c:	ffffffff 	.word	0xffffffff
    3720:	ffffffff 	.word	0xffffffff
    3724:	ffffffff 	.word	0xffffffff
    3728:	ffffffff 	.word	0xffffffff
    372c:	ffffffff 	.word	0xffffffff
    3730:	ffffffff 	.word	0xffffffff
    3734:	ffffffff 	.word	0xffffffff
    3738:	ffffffff 	.word	0xffffffff
    373c:	ffffffff 	.word	0xffffffff
    3740:	ffffffff 	.word	0xffffffff
    3744:	ffffffff 	.word	0xffffffff
    3748:	ffffffff 	.word	0xffffffff
    374c:	ffffffff 	.word	0xffffffff
    3750:	ffffffff 	.word	0xffffffff
    3754:	ffffffff 	.word	0xffffffff
    3758:	ffffffff 	.word	0xffffffff
    375c:	ffffffff 	.word	0xffffffff
    3760:	ffffffff 	.word	0xffffffff
    3764:	ffffffff 	.word	0xffffffff
    3768:	ffffffff 	.word	0xffffffff
    376c:	ffffffff 	.word	0xffffffff
    3770:	ffffffff 	.word	0xffffffff
    3774:	ffffffff 	.word	0xffffffff
    3778:	ffffffff 	.word	0xffffffff
    377c:	ffffffff 	.word	0xffffffff
    3780:	ffffffff 	.word	0xffffffff
    3784:	ffffffff 	.word	0xffffffff
    3788:	ffffffff 	.word	0xffffffff
    378c:	ffffffff 	.word	0xffffffff
    3790:	ffffffff 	.word	0xffffffff
    3794:	ffffffff 	.word	0xffffffff
    3798:	ffffffff 	.word	0xffffffff
    379c:	ffffffff 	.word	0xffffffff
    37a0:	ffffffff 	.word	0xffffffff
    37a4:	ffffffff 	.word	0xffffffff
    37a8:	ffffffff 	.word	0xffffffff
    37ac:	ffffffff 	.word	0xffffffff
    37b0:	ffffffff 	.word	0xffffffff
    37b4:	ffffffff 	.word	0xffffffff
    37b8:	ffffffff 	.word	0xffffffff
    37bc:	ffffffff 	.word	0xffffffff
    37c0:	ffffffff 	.word	0xffffffff
    37c4:	ffffffff 	.word	0xffffffff
    37c8:	ffffffff 	.word	0xffffffff
    37cc:	ffffffff 	.word	0xffffffff
    37d0:	ffffffff 	.word	0xffffffff
    37d4:	ffffffff 	.word	0xffffffff
    37d8:	ffffffff 	.word	0xffffffff
    37dc:	ffffffff 	.word	0xffffffff
    37e0:	ffffffff 	.word	0xffffffff
    37e4:	ffffffff 	.word	0xffffffff
    37e8:	ffffffff 	.word	0xffffffff
    37ec:	ffffffff 	.word	0xffffffff
    37f0:	ffffffff 	.word	0xffffffff
    37f4:	ffffffff 	.word	0xffffffff
    37f8:	ffffffff 	.word	0xffffffff
    37fc:	ffffffff 	.word	0xffffffff
    3800:	ffffffff 	.word	0xffffffff
    3804:	ffffffff 	.word	0xffffffff
    3808:	ffffffff 	.word	0xffffffff
    380c:	ffffffff 	.word	0xffffffff
    3810:	ffffffff 	.word	0xffffffff
    3814:	ffffffff 	.word	0xffffffff
    3818:	ffffffff 	.word	0xffffffff
    381c:	ffffffff 	.word	0xffffffff
    3820:	ffffffff 	.word	0xffffffff
    3824:	ffffffff 	.word	0xffffffff
    3828:	ffffffff 	.word	0xffffffff
    382c:	ffffffff 	.word	0xffffffff
    3830:	ffffffff 	.word	0xffffffff
    3834:	ffffffff 	.word	0xffffffff
    3838:	ffffffff 	.word	0xffffffff
    383c:	ffffffff 	.word	0xffffffff
    3840:	ffffffff 	.word	0xffffffff
    3844:	ffffffff 	.word	0xffffffff
    3848:	ffffffff 	.word	0xffffffff
    384c:	ffffffff 	.word	0xffffffff
    3850:	ffffffff 	.word	0xffffffff
    3854:	ffffffff 	.word	0xffffffff
    3858:	ffffffff 	.word	0xffffffff
    385c:	ffffffff 	.word	0xffffffff
    3860:	ffffffff 	.word	0xffffffff
    3864:	ffffffff 	.word	0xffffffff
    3868:	ffffffff 	.word	0xffffffff
    386c:	ffffffff 	.word	0xffffffff
    3870:	ffffffff 	.word	0xffffffff
    3874:	ffffffff 	.word	0xffffffff
    3878:	ffffffff 	.word	0xffffffff
    387c:	ffffffff 	.word	0xffffffff
    3880:	ffffffff 	.word	0xffffffff
    3884:	ffffffff 	.word	0xffffffff
    3888:	ffffffff 	.word	0xffffffff
    388c:	ffffffff 	.word	0xffffffff
    3890:	ffffffff 	.word	0xffffffff
    3894:	ffffffff 	.word	0xffffffff
    3898:	ffffffff 	.word	0xffffffff
    389c:	ffffffff 	.word	0xffffffff
    38a0:	ffffffff 	.word	0xffffffff
    38a4:	ffffffff 	.word	0xffffffff
    38a8:	ffffffff 	.word	0xffffffff
    38ac:	ffffffff 	.word	0xffffffff
    38b0:	ffffffff 	.word	0xffffffff
    38b4:	ffffffff 	.word	0xffffffff
    38b8:	ffffffff 	.word	0xffffffff
    38bc:	ffffffff 	.word	0xffffffff
    38c0:	ffffffff 	.word	0xffffffff
    38c4:	ffffffff 	.word	0xffffffff
    38c8:	ffffffff 	.word	0xffffffff
    38cc:	ffffffff 	.word	0xffffffff
    38d0:	ffffffff 	.word	0xffffffff
    38d4:	ffffffff 	.word	0xffffffff
    38d8:	ffffffff 	.word	0xffffffff
    38dc:	ffffffff 	.word	0xffffffff
    38e0:	ffffffff 	.word	0xffffffff
    38e4:	ffffffff 	.word	0xffffffff
    38e8:	ffffffff 	.word	0xffffffff
    38ec:	ffffffff 	.word	0xffffffff
    38f0:	ffffffff 	.word	0xffffffff
    38f4:	ffffffff 	.word	0xffffffff
    38f8:	ffffffff 	.word	0xffffffff
    38fc:	ffffffff 	.word	0xffffffff
    3900:	ffffffff 	.word	0xffffffff
    3904:	ffffffff 	.word	0xffffffff
    3908:	ffffffff 	.word	0xffffffff
    390c:	ffffffff 	.word	0xffffffff
    3910:	ffffffff 	.word	0xffffffff
    3914:	ffffffff 	.word	0xffffffff
    3918:	ffffffff 	.word	0xffffffff
    391c:	ffffffff 	.word	0xffffffff
    3920:	ffffffff 	.word	0xffffffff
    3924:	ffffffff 	.word	0xffffffff
    3928:	ffffffff 	.word	0xffffffff
    392c:	ffffffff 	.word	0xffffffff
    3930:	ffffffff 	.word	0xffffffff
    3934:	ffffffff 	.word	0xffffffff
    3938:	ffffffff 	.word	0xffffffff
    393c:	ffffffff 	.word	0xffffffff
    3940:	ffffffff 	.word	0xffffffff
    3944:	ffffffff 	.word	0xffffffff
    3948:	ffffffff 	.word	0xffffffff
    394c:	ffffffff 	.word	0xffffffff
    3950:	ffffffff 	.word	0xffffffff
    3954:	ffffffff 	.word	0xffffffff
    3958:	ffffffff 	.word	0xffffffff
    395c:	ffffffff 	.word	0xffffffff
    3960:	ffffffff 	.word	0xffffffff
    3964:	ffffffff 	.word	0xffffffff
    3968:	ffffffff 	.word	0xffffffff
    396c:	ffffffff 	.word	0xffffffff
    3970:	ffffffff 	.word	0xffffffff
    3974:	ffffffff 	.word	0xffffffff
    3978:	ffffffff 	.word	0xffffffff
    397c:	ffffffff 	.word	0xffffffff
    3980:	ffffffff 	.word	0xffffffff
    3984:	ffffffff 	.word	0xffffffff
    3988:	ffffffff 	.word	0xffffffff
    398c:	ffffffff 	.word	0xffffffff
    3990:	ffffffff 	.word	0xffffffff
    3994:	ffffffff 	.word	0xffffffff
    3998:	ffffffff 	.word	0xffffffff
    399c:	ffffffff 	.word	0xffffffff
    39a0:	ffffffff 	.word	0xffffffff
    39a4:	ffffffff 	.word	0xffffffff
    39a8:	ffffffff 	.word	0xffffffff
    39ac:	ffffffff 	.word	0xffffffff
    39b0:	ffffffff 	.word	0xffffffff
    39b4:	ffffffff 	.word	0xffffffff
    39b8:	ffffffff 	.word	0xffffffff
    39bc:	ffffffff 	.word	0xffffffff
    39c0:	ffffffff 	.word	0xffffffff
    39c4:	ffffffff 	.word	0xffffffff
    39c8:	ffffffff 	.word	0xffffffff
    39cc:	ffffffff 	.word	0xffffffff
    39d0:	ffffffff 	.word	0xffffffff
    39d4:	ffffffff 	.word	0xffffffff
    39d8:	ffffffff 	.word	0xffffffff
    39dc:	ffffffff 	.word	0xffffffff
    39e0:	ffffffff 	.word	0xffffffff
    39e4:	ffffffff 	.word	0xffffffff
    39e8:	ffffffff 	.word	0xffffffff
    39ec:	ffffffff 	.word	0xffffffff
    39f0:	ffffffff 	.word	0xffffffff
    39f4:	ffffffff 	.word	0xffffffff
    39f8:	ffffffff 	.word	0xffffffff
    39fc:	ffffffff 	.word	0xffffffff
    3a00:	ffffffff 	.word	0xffffffff
    3a04:	ffffffff 	.word	0xffffffff
    3a08:	ffffffff 	.word	0xffffffff
    3a0c:	ffffffff 	.word	0xffffffff
    3a10:	ffffffff 	.word	0xffffffff
    3a14:	ffffffff 	.word	0xffffffff
    3a18:	ffffffff 	.word	0xffffffff
    3a1c:	ffffffff 	.word	0xffffffff
    3a20:	ffffffff 	.word	0xffffffff
    3a24:	ffffffff 	.word	0xffffffff
    3a28:	ffffffff 	.word	0xffffffff
    3a2c:	ffffffff 	.word	0xffffffff
    3a30:	ffffffff 	.word	0xffffffff
    3a34:	ffffffff 	.word	0xffffffff
    3a38:	ffffffff 	.word	0xffffffff
    3a3c:	ffffffff 	.word	0xffffffff
    3a40:	ffffffff 	.word	0xffffffff
    3a44:	ffffffff 	.word	0xffffffff
    3a48:	ffffffff 	.word	0xffffffff
    3a4c:	ffffffff 	.word	0xffffffff
    3a50:	ffffffff 	.word	0xffffffff
    3a54:	ffffffff 	.word	0xffffffff
    3a58:	ffffffff 	.word	0xffffffff
    3a5c:	ffffffff 	.word	0xffffffff
    3a60:	ffffffff 	.word	0xffffffff
    3a64:	ffffffff 	.word	0xffffffff
    3a68:	ffffffff 	.word	0xffffffff
    3a6c:	ffffffff 	.word	0xffffffff
    3a70:	ffffffff 	.word	0xffffffff
    3a74:	ffffffff 	.word	0xffffffff
    3a78:	ffffffff 	.word	0xffffffff
    3a7c:	ffffffff 	.word	0xffffffff
    3a80:	ffffffff 	.word	0xffffffff
    3a84:	ffffffff 	.word	0xffffffff
    3a88:	ffffffff 	.word	0xffffffff
    3a8c:	ffffffff 	.word	0xffffffff
    3a90:	ffffffff 	.word	0xffffffff
    3a94:	ffffffff 	.word	0xffffffff
    3a98:	ffffffff 	.word	0xffffffff
    3a9c:	ffffffff 	.word	0xffffffff
    3aa0:	ffffffff 	.word	0xffffffff
    3aa4:	ffffffff 	.word	0xffffffff
    3aa8:	ffffffff 	.word	0xffffffff
    3aac:	ffffffff 	.word	0xffffffff
    3ab0:	ffffffff 	.word	0xffffffff
    3ab4:	ffffffff 	.word	0xffffffff
    3ab8:	ffffffff 	.word	0xffffffff
    3abc:	ffffffff 	.word	0xffffffff
    3ac0:	ffffffff 	.word	0xffffffff
    3ac4:	ffffffff 	.word	0xffffffff
    3ac8:	ffffffff 	.word	0xffffffff
    3acc:	ffffffff 	.word	0xffffffff
    3ad0:	ffffffff 	.word	0xffffffff
    3ad4:	ffffffff 	.word	0xffffffff
    3ad8:	ffffffff 	.word	0xffffffff
    3adc:	ffffffff 	.word	0xffffffff
    3ae0:	ffffffff 	.word	0xffffffff
    3ae4:	ffffffff 	.word	0xffffffff
    3ae8:	ffffffff 	.word	0xffffffff
    3aec:	ffffffff 	.word	0xffffffff
    3af0:	ffffffff 	.word	0xffffffff
    3af4:	ffffffff 	.word	0xffffffff
    3af8:	ffffffff 	.word	0xffffffff
    3afc:	ffffffff 	.word	0xffffffff
    3b00:	ffffffff 	.word	0xffffffff
    3b04:	ffffffff 	.word	0xffffffff
    3b08:	ffffffff 	.word	0xffffffff
    3b0c:	ffffffff 	.word	0xffffffff
    3b10:	ffffffff 	.word	0xffffffff
    3b14:	ffffffff 	.word	0xffffffff
    3b18:	ffffffff 	.word	0xffffffff
    3b1c:	ffffffff 	.word	0xffffffff
    3b20:	ffffffff 	.word	0xffffffff
    3b24:	ffffffff 	.word	0xffffffff
    3b28:	ffffffff 	.word	0xffffffff
    3b2c:	ffffffff 	.word	0xffffffff
    3b30:	ffffffff 	.word	0xffffffff
    3b34:	ffffffff 	.word	0xffffffff
    3b38:	ffffffff 	.word	0xffffffff
    3b3c:	ffffffff 	.word	0xffffffff
    3b40:	ffffffff 	.word	0xffffffff
    3b44:	ffffffff 	.word	0xffffffff
    3b48:	ffffffff 	.word	0xffffffff
    3b4c:	ffffffff 	.word	0xffffffff
    3b50:	ffffffff 	.word	0xffffffff
    3b54:	ffffffff 	.word	0xffffffff
    3b58:	ffffffff 	.word	0xffffffff
    3b5c:	ffffffff 	.word	0xffffffff
    3b60:	ffffffff 	.word	0xffffffff
    3b64:	ffffffff 	.word	0xffffffff
    3b68:	ffffffff 	.word	0xffffffff
    3b6c:	ffffffff 	.word	0xffffffff
    3b70:	ffffffff 	.word	0xffffffff
    3b74:	ffffffff 	.word	0xffffffff
    3b78:	ffffffff 	.word	0xffffffff
    3b7c:	ffffffff 	.word	0xffffffff
    3b80:	ffffffff 	.word	0xffffffff
    3b84:	ffffffff 	.word	0xffffffff
    3b88:	ffffffff 	.word	0xffffffff
    3b8c:	ffffffff 	.word	0xffffffff
    3b90:	ffffffff 	.word	0xffffffff
    3b94:	ffffffff 	.word	0xffffffff
    3b98:	ffffffff 	.word	0xffffffff
    3b9c:	ffffffff 	.word	0xffffffff
    3ba0:	ffffffff 	.word	0xffffffff
    3ba4:	ffffffff 	.word	0xffffffff
    3ba8:	ffffffff 	.word	0xffffffff
    3bac:	ffffffff 	.word	0xffffffff
    3bb0:	ffffffff 	.word	0xffffffff
    3bb4:	ffffffff 	.word	0xffffffff
    3bb8:	ffffffff 	.word	0xffffffff
    3bbc:	ffffffff 	.word	0xffffffff
    3bc0:	ffffffff 	.word	0xffffffff
    3bc4:	ffffffff 	.word	0xffffffff
    3bc8:	ffffffff 	.word	0xffffffff
    3bcc:	ffffffff 	.word	0xffffffff
    3bd0:	ffffffff 	.word	0xffffffff
    3bd4:	ffffffff 	.word	0xffffffff
    3bd8:	ffffffff 	.word	0xffffffff
    3bdc:	ffffffff 	.word	0xffffffff
    3be0:	ffffffff 	.word	0xffffffff
    3be4:	ffffffff 	.word	0xffffffff
    3be8:	ffffffff 	.word	0xffffffff
    3bec:	ffffffff 	.word	0xffffffff
    3bf0:	ffffffff 	.word	0xffffffff
    3bf4:	ffffffff 	.word	0xffffffff
    3bf8:	ffffffff 	.word	0xffffffff
    3bfc:	ffffffff 	.word	0xffffffff
    3c00:	ffffffff 	.word	0xffffffff
    3c04:	ffffffff 	.word	0xffffffff
    3c08:	ffffffff 	.word	0xffffffff
    3c0c:	ffffffff 	.word	0xffffffff
    3c10:	ffffffff 	.word	0xffffffff
    3c14:	ffffffff 	.word	0xffffffff
    3c18:	ffffffff 	.word	0xffffffff
    3c1c:	ffffffff 	.word	0xffffffff
    3c20:	ffffffff 	.word	0xffffffff
    3c24:	ffffffff 	.word	0xffffffff
    3c28:	ffffffff 	.word	0xffffffff
    3c2c:	ffffffff 	.word	0xffffffff
    3c30:	ffffffff 	.word	0xffffffff
    3c34:	ffffffff 	.word	0xffffffff
    3c38:	ffffffff 	.word	0xffffffff
    3c3c:	ffffffff 	.word	0xffffffff
    3c40:	ffffffff 	.word	0xffffffff
    3c44:	ffffffff 	.word	0xffffffff
    3c48:	ffffffff 	.word	0xffffffff
    3c4c:	ffffffff 	.word	0xffffffff
    3c50:	ffffffff 	.word	0xffffffff
    3c54:	ffffffff 	.word	0xffffffff
    3c58:	ffffffff 	.word	0xffffffff
    3c5c:	ffffffff 	.word	0xffffffff
    3c60:	ffffffff 	.word	0xffffffff
    3c64:	ffffffff 	.word	0xffffffff
    3c68:	ffffffff 	.word	0xffffffff
    3c6c:	ffffffff 	.word	0xffffffff
    3c70:	ffffffff 	.word	0xffffffff
    3c74:	ffffffff 	.word	0xffffffff
    3c78:	ffffffff 	.word	0xffffffff
    3c7c:	ffffffff 	.word	0xffffffff
    3c80:	ffffffff 	.word	0xffffffff
    3c84:	ffffffff 	.word	0xffffffff
    3c88:	ffffffff 	.word	0xffffffff
    3c8c:	ffffffff 	.word	0xffffffff
    3c90:	ffffffff 	.word	0xffffffff
    3c94:	ffffffff 	.word	0xffffffff
    3c98:	ffffffff 	.word	0xffffffff
    3c9c:	ffffffff 	.word	0xffffffff
    3ca0:	ffffffff 	.word	0xffffffff
    3ca4:	ffffffff 	.word	0xffffffff
    3ca8:	ffffffff 	.word	0xffffffff
    3cac:	ffffffff 	.word	0xffffffff
    3cb0:	ffffffff 	.word	0xffffffff
    3cb4:	ffffffff 	.word	0xffffffff
    3cb8:	ffffffff 	.word	0xffffffff
    3cbc:	ffffffff 	.word	0xffffffff
    3cc0:	ffffffff 	.word	0xffffffff
    3cc4:	ffffffff 	.word	0xffffffff
    3cc8:	ffffffff 	.word	0xffffffff
    3ccc:	ffffffff 	.word	0xffffffff
    3cd0:	ffffffff 	.word	0xffffffff
    3cd4:	ffffffff 	.word	0xffffffff
    3cd8:	ffffffff 	.word	0xffffffff
    3cdc:	ffffffff 	.word	0xffffffff
    3ce0:	ffffffff 	.word	0xffffffff
    3ce4:	ffffffff 	.word	0xffffffff
    3ce8:	ffffffff 	.word	0xffffffff
    3cec:	ffffffff 	.word	0xffffffff
    3cf0:	ffffffff 	.word	0xffffffff
    3cf4:	ffffffff 	.word	0xffffffff
    3cf8:	ffffffff 	.word	0xffffffff
    3cfc:	ffffffff 	.word	0xffffffff
    3d00:	ffffffff 	.word	0xffffffff
    3d04:	ffffffff 	.word	0xffffffff
    3d08:	ffffffff 	.word	0xffffffff
    3d0c:	ffffffff 	.word	0xffffffff
    3d10:	ffffffff 	.word	0xffffffff
    3d14:	ffffffff 	.word	0xffffffff
    3d18:	ffffffff 	.word	0xffffffff
    3d1c:	ffffffff 	.word	0xffffffff
    3d20:	ffffffff 	.word	0xffffffff
    3d24:	ffffffff 	.word	0xffffffff
    3d28:	ffffffff 	.word	0xffffffff
    3d2c:	ffffffff 	.word	0xffffffff
    3d30:	ffffffff 	.word	0xffffffff
    3d34:	ffffffff 	.word	0xffffffff
    3d38:	ffffffff 	.word	0xffffffff
    3d3c:	ffffffff 	.word	0xffffffff
    3d40:	ffffffff 	.word	0xffffffff
    3d44:	ffffffff 	.word	0xffffffff
    3d48:	ffffffff 	.word	0xffffffff
    3d4c:	ffffffff 	.word	0xffffffff
    3d50:	ffffffff 	.word	0xffffffff
    3d54:	ffffffff 	.word	0xffffffff
    3d58:	ffffffff 	.word	0xffffffff
    3d5c:	ffffffff 	.word	0xffffffff
    3d60:	ffffffff 	.word	0xffffffff
    3d64:	ffffffff 	.word	0xffffffff
    3d68:	ffffffff 	.word	0xffffffff
    3d6c:	ffffffff 	.word	0xffffffff
    3d70:	ffffffff 	.word	0xffffffff
    3d74:	ffffffff 	.word	0xffffffff
    3d78:	ffffffff 	.word	0xffffffff
    3d7c:	ffffffff 	.word	0xffffffff
    3d80:	ffffffff 	.word	0xffffffff
    3d84:	ffffffff 	.word	0xffffffff
    3d88:	ffffffff 	.word	0xffffffff
    3d8c:	ffffffff 	.word	0xffffffff
    3d90:	ffffffff 	.word	0xffffffff
    3d94:	ffffffff 	.word	0xffffffff
    3d98:	ffffffff 	.word	0xffffffff
    3d9c:	ffffffff 	.word	0xffffffff
    3da0:	ffffffff 	.word	0xffffffff
    3da4:	ffffffff 	.word	0xffffffff
    3da8:	ffffffff 	.word	0xffffffff
    3dac:	ffffffff 	.word	0xffffffff
    3db0:	ffffffff 	.word	0xffffffff
    3db4:	ffffffff 	.word	0xffffffff
    3db8:	ffffffff 	.word	0xffffffff
    3dbc:	ffffffff 	.word	0xffffffff
    3dc0:	ffffffff 	.word	0xffffffff
    3dc4:	ffffffff 	.word	0xffffffff
    3dc8:	ffffffff 	.word	0xffffffff
    3dcc:	ffffffff 	.word	0xffffffff
    3dd0:	ffffffff 	.word	0xffffffff
    3dd4:	ffffffff 	.word	0xffffffff
    3dd8:	ffffffff 	.word	0xffffffff
    3ddc:	ffffffff 	.word	0xffffffff
    3de0:	ffffffff 	.word	0xffffffff
    3de4:	ffffffff 	.word	0xffffffff
    3de8:	ffffffff 	.word	0xffffffff
    3dec:	ffffffff 	.word	0xffffffff
    3df0:	ffffffff 	.word	0xffffffff
    3df4:	ffffffff 	.word	0xffffffff
    3df8:	ffffffff 	.word	0xffffffff
    3dfc:	ffffffff 	.word	0xffffffff
    3e00:	ffffffff 	.word	0xffffffff
    3e04:	ffffffff 	.word	0xffffffff
    3e08:	ffffffff 	.word	0xffffffff
    3e0c:	ffffffff 	.word	0xffffffff
    3e10:	ffffffff 	.word	0xffffffff
    3e14:	ffffffff 	.word	0xffffffff
    3e18:	ffffffff 	.word	0xffffffff
    3e1c:	ffffffff 	.word	0xffffffff
    3e20:	ffffffff 	.word	0xffffffff
    3e24:	ffffffff 	.word	0xffffffff
    3e28:	ffffffff 	.word	0xffffffff
    3e2c:	ffffffff 	.word	0xffffffff
    3e30:	ffffffff 	.word	0xffffffff
    3e34:	ffffffff 	.word	0xffffffff
    3e38:	ffffffff 	.word	0xffffffff
    3e3c:	ffffffff 	.word	0xffffffff
    3e40:	ffffffff 	.word	0xffffffff
    3e44:	ffffffff 	.word	0xffffffff
    3e48:	ffffffff 	.word	0xffffffff
    3e4c:	ffffffff 	.word	0xffffffff
    3e50:	ffffffff 	.word	0xffffffff
    3e54:	ffffffff 	.word	0xffffffff
    3e58:	ffffffff 	.word	0xffffffff
    3e5c:	ffffffff 	.word	0xffffffff
    3e60:	ffffffff 	.word	0xffffffff
    3e64:	ffffffff 	.word	0xffffffff
    3e68:	ffffffff 	.word	0xffffffff
    3e6c:	ffffffff 	.word	0xffffffff
    3e70:	ffffffff 	.word	0xffffffff
    3e74:	ffffffff 	.word	0xffffffff
    3e78:	ffffffff 	.word	0xffffffff
    3e7c:	ffffffff 	.word	0xffffffff
    3e80:	ffffffff 	.word	0xffffffff
    3e84:	ffffffff 	.word	0xffffffff
    3e88:	ffffffff 	.word	0xffffffff
    3e8c:	ffffffff 	.word	0xffffffff
    3e90:	ffffffff 	.word	0xffffffff
    3e94:	ffffffff 	.word	0xffffffff
    3e98:	ffffffff 	.word	0xffffffff
    3e9c:	ffffffff 	.word	0xffffffff
    3ea0:	ffffffff 	.word	0xffffffff
    3ea4:	ffffffff 	.word	0xffffffff
    3ea8:	ffffffff 	.word	0xffffffff
    3eac:	ffffffff 	.word	0xffffffff
    3eb0:	ffffffff 	.word	0xffffffff
    3eb4:	ffffffff 	.word	0xffffffff
    3eb8:	ffffffff 	.word	0xffffffff
    3ebc:	ffffffff 	.word	0xffffffff
    3ec0:	ffffffff 	.word	0xffffffff
    3ec4:	ffffffff 	.word	0xffffffff
    3ec8:	ffffffff 	.word	0xffffffff
    3ecc:	ffffffff 	.word	0xffffffff
    3ed0:	ffffffff 	.word	0xffffffff
    3ed4:	ffffffff 	.word	0xffffffff
    3ed8:	ffffffff 	.word	0xffffffff
    3edc:	ffffffff 	.word	0xffffffff
    3ee0:	ffffffff 	.word	0xffffffff
    3ee4:	ffffffff 	.word	0xffffffff
    3ee8:	ffffffff 	.word	0xffffffff
    3eec:	ffffffff 	.word	0xffffffff
    3ef0:	ffffffff 	.word	0xffffffff
    3ef4:	ffffffff 	.word	0xffffffff
    3ef8:	ffffffff 	.word	0xffffffff
    3efc:	ffffffff 	.word	0xffffffff
    3f00:	ffffffff 	.word	0xffffffff
    3f04:	ffffffff 	.word	0xffffffff
    3f08:	ffffffff 	.word	0xffffffff
    3f0c:	ffffffff 	.word	0xffffffff
    3f10:	ffffffff 	.word	0xffffffff
    3f14:	ffffffff 	.word	0xffffffff
    3f18:	ffffffff 	.word	0xffffffff
    3f1c:	ffffffff 	.word	0xffffffff
    3f20:	ffffffff 	.word	0xffffffff
    3f24:	ffffffff 	.word	0xffffffff
    3f28:	ffffffff 	.word	0xffffffff
    3f2c:	ffffffff 	.word	0xffffffff
    3f30:	ffffffff 	.word	0xffffffff
    3f34:	ffffffff 	.word	0xffffffff
    3f38:	ffffffff 	.word	0xffffffff
    3f3c:	ffffffff 	.word	0xffffffff
    3f40:	ffffffff 	.word	0xffffffff
    3f44:	ffffffff 	.word	0xffffffff
    3f48:	ffffffff 	.word	0xffffffff
    3f4c:	ffffffff 	.word	0xffffffff
    3f50:	ffffffff 	.word	0xffffffff
    3f54:	ffffffff 	.word	0xffffffff
    3f58:	ffffffff 	.word	0xffffffff
    3f5c:	ffffffff 	.word	0xffffffff
    3f60:	ffffffff 	.word	0xffffffff
    3f64:	ffffffff 	.word	0xffffffff
    3f68:	ffffffff 	.word	0xffffffff
    3f6c:	ffffffff 	.word	0xffffffff
    3f70:	ffffffff 	.word	0xffffffff
    3f74:	ffffffff 	.word	0xffffffff
    3f78:	ffffffff 	.word	0xffffffff
    3f7c:	ffffffff 	.word	0xffffffff
    3f80:	ffffffff 	.word	0xffffffff
    3f84:	ffffffff 	.word	0xffffffff
    3f88:	ffffffff 	.word	0xffffffff
    3f8c:	ffffffff 	.word	0xffffffff
    3f90:	ffffffff 	.word	0xffffffff
    3f94:	ffffffff 	.word	0xffffffff
    3f98:	ffffffff 	.word	0xffffffff
    3f9c:	ffffffff 	.word	0xffffffff
    3fa0:	ffffffff 	.word	0xffffffff
    3fa4:	ffffffff 	.word	0xffffffff
    3fa8:	ffffffff 	.word	0xffffffff
    3fac:	ffffffff 	.word	0xffffffff
    3fb0:	ffffffff 	.word	0xffffffff
    3fb4:	ffffffff 	.word	0xffffffff
    3fb8:	ffffffff 	.word	0xffffffff
    3fbc:	ffffffff 	.word	0xffffffff
    3fc0:	ffffffff 	.word	0xffffffff
    3fc4:	ffffffff 	.word	0xffffffff
    3fc8:	ffffffff 	.word	0xffffffff
    3fcc:	ffffffff 	.word	0xffffffff
    3fd0:	ffffffff 	.word	0xffffffff
    3fd4:	ffffffff 	.word	0xffffffff
    3fd8:	ffffffff 	.word	0xffffffff
    3fdc:	ffffffff 	.word	0xffffffff
    3fe0:	ffffffff 	.word	0xffffffff
    3fe4:	ffffffff 	.word	0xffffffff
    3fe8:	ffffffff 	.word	0xffffffff
    3fec:	ffffffff 	.word	0xffffffff
    3ff0:	ffffffff 	.word	0xffffffff
    3ff4:	ffffffff 	.word	0xffffffff
    3ff8:	ffffffff 	.word	0xffffffff
    3ffc:	ffffffff 	.word	0xffffffff
    4000:	ffffffff 	.word	0xffffffff
    4004:	ffffffff 	.word	0xffffffff
    4008:	ffffffff 	.word	0xffffffff
    400c:	ffffffff 	.word	0xffffffff
    4010:	ffffffff 	.word	0xffffffff
    4014:	ffffffff 	.word	0xffffffff
    4018:	ffffffff 	.word	0xffffffff
    401c:	ffffffff 	.word	0xffffffff
    4020:	ffffffff 	.word	0xffffffff
    4024:	ffffffff 	.word	0xffffffff
    4028:	ffffffff 	.word	0xffffffff
    402c:	ffffffff 	.word	0xffffffff
    4030:	ffffffff 	.word	0xffffffff
    4034:	ffffffff 	.word	0xffffffff
    4038:	ffffffff 	.word	0xffffffff
    403c:	ffffffff 	.word	0xffffffff
    4040:	ffffffff 	.word	0xffffffff
    4044:	ffffffff 	.word	0xffffffff
    4048:	ffffffff 	.word	0xffffffff
    404c:	ffffffff 	.word	0xffffffff
    4050:	ffffffff 	.word	0xffffffff
    4054:	ffffffff 	.word	0xffffffff
    4058:	ffffffff 	.word	0xffffffff
    405c:	ffffffff 	.word	0xffffffff
    4060:	ffffffff 	.word	0xffffffff
    4064:	ffffffff 	.word	0xffffffff
    4068:	ffffffff 	.word	0xffffffff
    406c:	ffffffff 	.word	0xffffffff
    4070:	ffffffff 	.word	0xffffffff
    4074:	ffffffff 	.word	0xffffffff
    4078:	ffffffff 	.word	0xffffffff
    407c:	ffffffff 	.word	0xffffffff
    4080:	ffffffff 	.word	0xffffffff
    4084:	ffffffff 	.word	0xffffffff
    4088:	ffffffff 	.word	0xffffffff
    408c:	ffffffff 	.word	0xffffffff
    4090:	ffffffff 	.word	0xffffffff
    4094:	ffffffff 	.word	0xffffffff
    4098:	ffffffff 	.word	0xffffffff
    409c:	ffffffff 	.word	0xffffffff
    40a0:	ffffffff 	.word	0xffffffff
    40a4:	ffffffff 	.word	0xffffffff
    40a8:	ffffffff 	.word	0xffffffff
    40ac:	ffffffff 	.word	0xffffffff
    40b0:	ffffffff 	.word	0xffffffff
    40b4:	ffffffff 	.word	0xffffffff
    40b8:	ffffffff 	.word	0xffffffff
    40bc:	ffffffff 	.word	0xffffffff
    40c0:	ffffffff 	.word	0xffffffff
    40c4:	ffffffff 	.word	0xffffffff
    40c8:	ffffffff 	.word	0xffffffff
    40cc:	ffffffff 	.word	0xffffffff
    40d0:	ffffffff 	.word	0xffffffff
    40d4:	ffffffff 	.word	0xffffffff
    40d8:	ffffffff 	.word	0xffffffff
    40dc:	ffffffff 	.word	0xffffffff
    40e0:	ffffffff 	.word	0xffffffff
    40e4:	ffffffff 	.word	0xffffffff
    40e8:	ffffffff 	.word	0xffffffff
    40ec:	ffffffff 	.word	0xffffffff
    40f0:	ffffffff 	.word	0xffffffff
    40f4:	ffffffff 	.word	0xffffffff
    40f8:	ffffffff 	.word	0xffffffff
    40fc:	ffffffff 	.word	0xffffffff
    4100:	ffffffff 	.word	0xffffffff
    4104:	ffffffff 	.word	0xffffffff
    4108:	ffffffff 	.word	0xffffffff
    410c:	ffffffff 	.word	0xffffffff
    4110:	ffffffff 	.word	0xffffffff
    4114:	ffffffff 	.word	0xffffffff
    4118:	ffffffff 	.word	0xffffffff
    411c:	ffffffff 	.word	0xffffffff
    4120:	ffffffff 	.word	0xffffffff
    4124:	ffffffff 	.word	0xffffffff
    4128:	ffffffff 	.word	0xffffffff
    412c:	ffffffff 	.word	0xffffffff
    4130:	ffffffff 	.word	0xffffffff
    4134:	ffffffff 	.word	0xffffffff
    4138:	ffffffff 	.word	0xffffffff
    413c:	ffffffff 	.word	0xffffffff
    4140:	ffffffff 	.word	0xffffffff
    4144:	ffffffff 	.word	0xffffffff
    4148:	ffffffff 	.word	0xffffffff
    414c:	ffffffff 	.word	0xffffffff
    4150:	ffffffff 	.word	0xffffffff
    4154:	ffffffff 	.word	0xffffffff
    4158:	ffffffff 	.word	0xffffffff
    415c:	ffffffff 	.word	0xffffffff
    4160:	ffffffff 	.word	0xffffffff
    4164:	ffffffff 	.word	0xffffffff
    4168:	ffffffff 	.word	0xffffffff
    416c:	ffffffff 	.word	0xffffffff
    4170:	ffffffff 	.word	0xffffffff
    4174:	ffffffff 	.word	0xffffffff
    4178:	ffffffff 	.word	0xffffffff
    417c:	ffffffff 	.word	0xffffffff
    4180:	ffffffff 	.word	0xffffffff
    4184:	ffffffff 	.word	0xffffffff
    4188:	ffffffff 	.word	0xffffffff
    418c:	ffffffff 	.word	0xffffffff
    4190:	ffffffff 	.word	0xffffffff
    4194:	ffffffff 	.word	0xffffffff
    4198:	ffffffff 	.word	0xffffffff
    419c:	ffffffff 	.word	0xffffffff
    41a0:	ffffffff 	.word	0xffffffff
    41a4:	ffffffff 	.word	0xffffffff
    41a8:	ffffffff 	.word	0xffffffff
    41ac:	ffffffff 	.word	0xffffffff
    41b0:	ffffffff 	.word	0xffffffff
    41b4:	ffffffff 	.word	0xffffffff
    41b8:	ffffffff 	.word	0xffffffff
    41bc:	ffffffff 	.word	0xffffffff
    41c0:	ffffffff 	.word	0xffffffff
    41c4:	ffffffff 	.word	0xffffffff
    41c8:	ffffffff 	.word	0xffffffff
    41cc:	ffffffff 	.word	0xffffffff
    41d0:	ffffffff 	.word	0xffffffff
    41d4:	ffffffff 	.word	0xffffffff
    41d8:	ffffffff 	.word	0xffffffff
    41dc:	ffffffff 	.word	0xffffffff
    41e0:	ffffffff 	.word	0xffffffff
    41e4:	ffffffff 	.word	0xffffffff
    41e8:	ffffffff 	.word	0xffffffff
    41ec:	ffffffff 	.word	0xffffffff
    41f0:	ffffffff 	.word	0xffffffff
    41f4:	ffffffff 	.word	0xffffffff
    41f8:	ffffffff 	.word	0xffffffff
    41fc:	ffffffff 	.word	0xffffffff
    4200:	ffffffff 	.word	0xffffffff
    4204:	ffffffff 	.word	0xffffffff
    4208:	ffffffff 	.word	0xffffffff
    420c:	ffffffff 	.word	0xffffffff
    4210:	ffffffff 	.word	0xffffffff
    4214:	ffffffff 	.word	0xffffffff
    4218:	ffffffff 	.word	0xffffffff
    421c:	ffffffff 	.word	0xffffffff
    4220:	ffffffff 	.word	0xffffffff
    4224:	ffffffff 	.word	0xffffffff
    4228:	ffffffff 	.word	0xffffffff
    422c:	ffffffff 	.word	0xffffffff
    4230:	ffffffff 	.word	0xffffffff
    4234:	ffffffff 	.word	0xffffffff
    4238:	ffffffff 	.word	0xffffffff
    423c:	ffffffff 	.word	0xffffffff
    4240:	ffffffff 	.word	0xffffffff
    4244:	ffffffff 	.word	0xffffffff
    4248:	ffffffff 	.word	0xffffffff
    424c:	ffffffff 	.word	0xffffffff
    4250:	ffffffff 	.word	0xffffffff
    4254:	ffffffff 	.word	0xffffffff
    4258:	ffffffff 	.word	0xffffffff
    425c:	ffffffff 	.word	0xffffffff
    4260:	ffffffff 	.word	0xffffffff
    4264:	ffffffff 	.word	0xffffffff
    4268:	ffffffff 	.word	0xffffffff
    426c:	ffffffff 	.word	0xffffffff
    4270:	ffffffff 	.word	0xffffffff
    4274:	ffffffff 	.word	0xffffffff
    4278:	ffffffff 	.word	0xffffffff
    427c:	ffffffff 	.word	0xffffffff
    4280:	ffffffff 	.word	0xffffffff
    4284:	ffffffff 	.word	0xffffffff
    4288:	ffffffff 	.word	0xffffffff
    428c:	ffffffff 	.word	0xffffffff
    4290:	ffffffff 	.word	0xffffffff
    4294:	ffffffff 	.word	0xffffffff
    4298:	ffffffff 	.word	0xffffffff
    429c:	ffffffff 	.word	0xffffffff
    42a0:	ffffffff 	.word	0xffffffff
    42a4:	ffffffff 	.word	0xffffffff
    42a8:	ffffffff 	.word	0xffffffff
    42ac:	ffffffff 	.word	0xffffffff
    42b0:	ffffffff 	.word	0xffffffff
    42b4:	ffffffff 	.word	0xffffffff
    42b8:	ffffffff 	.word	0xffffffff
    42bc:	ffffffff 	.word	0xffffffff
    42c0:	ffffffff 	.word	0xffffffff
    42c4:	ffffffff 	.word	0xffffffff
    42c8:	ffffffff 	.word	0xffffffff
    42cc:	ffffffff 	.word	0xffffffff
    42d0:	ffffffff 	.word	0xffffffff
    42d4:	ffffffff 	.word	0xffffffff
    42d8:	ffffffff 	.word	0xffffffff
    42dc:	ffffffff 	.word	0xffffffff
    42e0:	ffffffff 	.word	0xffffffff
    42e4:	ffffffff 	.word	0xffffffff
    42e8:	ffffffff 	.word	0xffffffff
    42ec:	ffffffff 	.word	0xffffffff
    42f0:	ffffffff 	.word	0xffffffff
    42f4:	ffffffff 	.word	0xffffffff
    42f8:	ffffffff 	.word	0xffffffff
    42fc:	ffffffff 	.word	0xffffffff
    4300:	ffffffff 	.word	0xffffffff
    4304:	ffffffff 	.word	0xffffffff
    4308:	ffffffff 	.word	0xffffffff
    430c:	ffffffff 	.word	0xffffffff
    4310:	ffffffff 	.word	0xffffffff
    4314:	ffffffff 	.word	0xffffffff
    4318:	ffffffff 	.word	0xffffffff
    431c:	ffffffff 	.word	0xffffffff
    4320:	ffffffff 	.word	0xffffffff
    4324:	ffffffff 	.word	0xffffffff
    4328:	ffffffff 	.word	0xffffffff
    432c:	ffffffff 	.word	0xffffffff
    4330:	ffffffff 	.word	0xffffffff
    4334:	ffffffff 	.word	0xffffffff
    4338:	ffffffff 	.word	0xffffffff
    433c:	ffffffff 	.word	0xffffffff
    4340:	ffffffff 	.word	0xffffffff
    4344:	ffffffff 	.word	0xffffffff
    4348:	ffffffff 	.word	0xffffffff
    434c:	ffffffff 	.word	0xffffffff
    4350:	ffffffff 	.word	0xffffffff
    4354:	ffffffff 	.word	0xffffffff
    4358:	ffffffff 	.word	0xffffffff
    435c:	ffffffff 	.word	0xffffffff
    4360:	ffffffff 	.word	0xffffffff
    4364:	ffffffff 	.word	0xffffffff
    4368:	ffffffff 	.word	0xffffffff
    436c:	ffffffff 	.word	0xffffffff
    4370:	ffffffff 	.word	0xffffffff
    4374:	ffffffff 	.word	0xffffffff
    4378:	ffffffff 	.word	0xffffffff
    437c:	ffffffff 	.word	0xffffffff
    4380:	ffffffff 	.word	0xffffffff
    4384:	ffffffff 	.word	0xffffffff
    4388:	ffffffff 	.word	0xffffffff
    438c:	ffffffff 	.word	0xffffffff
    4390:	ffffffff 	.word	0xffffffff
    4394:	ffffffff 	.word	0xffffffff
    4398:	ffffffff 	.word	0xffffffff
    439c:	ffffffff 	.word	0xffffffff
    43a0:	ffffffff 	.word	0xffffffff
    43a4:	ffffffff 	.word	0xffffffff
    43a8:	ffffffff 	.word	0xffffffff
    43ac:	ffffffff 	.word	0xffffffff
    43b0:	ffffffff 	.word	0xffffffff
    43b4:	ffffffff 	.word	0xffffffff
    43b8:	ffffffff 	.word	0xffffffff
    43bc:	ffffffff 	.word	0xffffffff
    43c0:	ffffffff 	.word	0xffffffff
    43c4:	ffffffff 	.word	0xffffffff
    43c8:	ffffffff 	.word	0xffffffff
    43cc:	ffffffff 	.word	0xffffffff
    43d0:	ffffffff 	.word	0xffffffff
    43d4:	ffffffff 	.word	0xffffffff
    43d8:	ffffffff 	.word	0xffffffff
    43dc:	ffffffff 	.word	0xffffffff
    43e0:	ffffffff 	.word	0xffffffff
    43e4:	ffffffff 	.word	0xffffffff
    43e8:	ffffffff 	.word	0xffffffff
    43ec:	ffffffff 	.word	0xffffffff
    43f0:	ffffffff 	.word	0xffffffff
    43f4:	ffffffff 	.word	0xffffffff
    43f8:	ffffffff 	.word	0xffffffff
    43fc:	ffffffff 	.word	0xffffffff
    4400:	ffffffff 	.word	0xffffffff
    4404:	ffffffff 	.word	0xffffffff
    4408:	ffffffff 	.word	0xffffffff
    440c:	ffffffff 	.word	0xffffffff
    4410:	ffffffff 	.word	0xffffffff
    4414:	ffffffff 	.word	0xffffffff
    4418:	ffffffff 	.word	0xffffffff
    441c:	ffffffff 	.word	0xffffffff
    4420:	ffffffff 	.word	0xffffffff
    4424:	ffffffff 	.word	0xffffffff
    4428:	ffffffff 	.word	0xffffffff
    442c:	ffffffff 	.word	0xffffffff
    4430:	ffffffff 	.word	0xffffffff
    4434:	ffffffff 	.word	0xffffffff
    4438:	ffffffff 	.word	0xffffffff
    443c:	ffffffff 	.word	0xffffffff
    4440:	ffffffff 	.word	0xffffffff
    4444:	ffffffff 	.word	0xffffffff
    4448:	ffffffff 	.word	0xffffffff
    444c:	ffffffff 	.word	0xffffffff
    4450:	ffffffff 	.word	0xffffffff
    4454:	ffffffff 	.word	0xffffffff
    4458:	ffffffff 	.word	0xffffffff
    445c:	ffffffff 	.word	0xffffffff
    4460:	ffffffff 	.word	0xffffffff
    4464:	ffffffff 	.word	0xffffffff
    4468:	ffffffff 	.word	0xffffffff
    446c:	ffffffff 	.word	0xffffffff
    4470:	ffffffff 	.word	0xffffffff
    4474:	ffffffff 	.word	0xffffffff
    4478:	ffffffff 	.word	0xffffffff
    447c:	ffffffff 	.word	0xffffffff
    4480:	ffffffff 	.word	0xffffffff
    4484:	ffffffff 	.word	0xffffffff
    4488:	ffffffff 	.word	0xffffffff
    448c:	ffffffff 	.word	0xffffffff
    4490:	ffffffff 	.word	0xffffffff
    4494:	ffffffff 	.word	0xffffffff
    4498:	ffffffff 	.word	0xffffffff
    449c:	ffffffff 	.word	0xffffffff
    44a0:	ffffffff 	.word	0xffffffff
    44a4:	ffffffff 	.word	0xffffffff
    44a8:	ffffffff 	.word	0xffffffff
    44ac:	ffffffff 	.word	0xffffffff
    44b0:	ffffffff 	.word	0xffffffff
    44b4:	ffffffff 	.word	0xffffffff
    44b8:	ffffffff 	.word	0xffffffff
    44bc:	ffffffff 	.word	0xffffffff
    44c0:	ffffffff 	.word	0xffffffff
    44c4:	ffffffff 	.word	0xffffffff
    44c8:	ffffffff 	.word	0xffffffff
    44cc:	ffffffff 	.word	0xffffffff
    44d0:	ffffffff 	.word	0xffffffff
    44d4:	ffffffff 	.word	0xffffffff
    44d8:	ffffffff 	.word	0xffffffff
    44dc:	ffffffff 	.word	0xffffffff
    44e0:	ffffffff 	.word	0xffffffff
    44e4:	ffffffff 	.word	0xffffffff
    44e8:	ffffffff 	.word	0xffffffff
    44ec:	ffffffff 	.word	0xffffffff
    44f0:	ffffffff 	.word	0xffffffff
    44f4:	ffffffff 	.word	0xffffffff
    44f8:	ffffffff 	.word	0xffffffff
    44fc:	ffffffff 	.word	0xffffffff
    4500:	ffffffff 	.word	0xffffffff
    4504:	ffffffff 	.word	0xffffffff
    4508:	ffffffff 	.word	0xffffffff
    450c:	ffffffff 	.word	0xffffffff
    4510:	ffffffff 	.word	0xffffffff
    4514:	ffffffff 	.word	0xffffffff
    4518:	ffffffff 	.word	0xffffffff
    451c:	ffffffff 	.word	0xffffffff
    4520:	ffffffff 	.word	0xffffffff
    4524:	ffffffff 	.word	0xffffffff
    4528:	ffffffff 	.word	0xffffffff
    452c:	ffffffff 	.word	0xffffffff
    4530:	ffffffff 	.word	0xffffffff
    4534:	ffffffff 	.word	0xffffffff
    4538:	ffffffff 	.word	0xffffffff
    453c:	ffffffff 	.word	0xffffffff
    4540:	ffffffff 	.word	0xffffffff
    4544:	ffffffff 	.word	0xffffffff
    4548:	ffffffff 	.word	0xffffffff
    454c:	ffffffff 	.word	0xffffffff
    4550:	ffffffff 	.word	0xffffffff
    4554:	ffffffff 	.word	0xffffffff
    4558:	ffffffff 	.word	0xffffffff
    455c:	ffffffff 	.word	0xffffffff
    4560:	ffffffff 	.word	0xffffffff
    4564:	ffffffff 	.word	0xffffffff
    4568:	ffffffff 	.word	0xffffffff
    456c:	ffffffff 	.word	0xffffffff
    4570:	ffffffff 	.word	0xffffffff
    4574:	ffffffff 	.word	0xffffffff
    4578:	ffffffff 	.word	0xffffffff
    457c:	ffffffff 	.word	0xffffffff
    4580:	ffffffff 	.word	0xffffffff
    4584:	ffffffff 	.word	0xffffffff
    4588:	ffffffff 	.word	0xffffffff
    458c:	ffffffff 	.word	0xffffffff
    4590:	ffffffff 	.word	0xffffffff
    4594:	ffffffff 	.word	0xffffffff
    4598:	ffffffff 	.word	0xffffffff
    459c:	ffffffff 	.word	0xffffffff
    45a0:	ffffffff 	.word	0xffffffff
    45a4:	ffffffff 	.word	0xffffffff
    45a8:	ffffffff 	.word	0xffffffff
    45ac:	ffffffff 	.word	0xffffffff
    45b0:	ffffffff 	.word	0xffffffff
    45b4:	ffffffff 	.word	0xffffffff
    45b8:	ffffffff 	.word	0xffffffff
    45bc:	ffffffff 	.word	0xffffffff
    45c0:	ffffffff 	.word	0xffffffff
    45c4:	ffffffff 	.word	0xffffffff
    45c8:	ffffffff 	.word	0xffffffff
    45cc:	ffffffff 	.word	0xffffffff
    45d0:	ffffffff 	.word	0xffffffff
    45d4:	ffffffff 	.word	0xffffffff
    45d8:	ffffffff 	.word	0xffffffff
    45dc:	ffffffff 	.word	0xffffffff
    45e0:	ffffffff 	.word	0xffffffff
    45e4:	ffffffff 	.word	0xffffffff
    45e8:	ffffffff 	.word	0xffffffff
    45ec:	ffffffff 	.word	0xffffffff
    45f0:	ffffffff 	.word	0xffffffff
    45f4:	ffffffff 	.word	0xffffffff
    45f8:	ffffffff 	.word	0xffffffff
    45fc:	ffffffff 	.word	0xffffffff
    4600:	ffffffff 	.word	0xffffffff
    4604:	ffffffff 	.word	0xffffffff
    4608:	ffffffff 	.word	0xffffffff
    460c:	ffffffff 	.word	0xffffffff
    4610:	ffffffff 	.word	0xffffffff
    4614:	ffffffff 	.word	0xffffffff
    4618:	ffffffff 	.word	0xffffffff
    461c:	ffffffff 	.word	0xffffffff
    4620:	ffffffff 	.word	0xffffffff
    4624:	ffffffff 	.word	0xffffffff
    4628:	ffffffff 	.word	0xffffffff
    462c:	ffffffff 	.word	0xffffffff
    4630:	ffffffff 	.word	0xffffffff
    4634:	ffffffff 	.word	0xffffffff
    4638:	ffffffff 	.word	0xffffffff
    463c:	ffffffff 	.word	0xffffffff
    4640:	ffffffff 	.word	0xffffffff
    4644:	ffffffff 	.word	0xffffffff
    4648:	ffffffff 	.word	0xffffffff
    464c:	ffffffff 	.word	0xffffffff
    4650:	ffffffff 	.word	0xffffffff
    4654:	ffffffff 	.word	0xffffffff
    4658:	ffffffff 	.word	0xffffffff
    465c:	ffffffff 	.word	0xffffffff
    4660:	ffffffff 	.word	0xffffffff
    4664:	ffffffff 	.word	0xffffffff
    4668:	ffffffff 	.word	0xffffffff
    466c:	ffffffff 	.word	0xffffffff
    4670:	ffffffff 	.word	0xffffffff
    4674:	ffffffff 	.word	0xffffffff
    4678:	ffffffff 	.word	0xffffffff
    467c:	ffffffff 	.word	0xffffffff
    4680:	ffffffff 	.word	0xffffffff
    4684:	ffffffff 	.word	0xffffffff
    4688:	ffffffff 	.word	0xffffffff
    468c:	ffffffff 	.word	0xffffffff
    4690:	ffffffff 	.word	0xffffffff
    4694:	ffffffff 	.word	0xffffffff
    4698:	ffffffff 	.word	0xffffffff
    469c:	ffffffff 	.word	0xffffffff
    46a0:	ffffffff 	.word	0xffffffff
    46a4:	ffffffff 	.word	0xffffffff
    46a8:	ffffffff 	.word	0xffffffff
    46ac:	ffffffff 	.word	0xffffffff
    46b0:	ffffffff 	.word	0xffffffff
    46b4:	ffffffff 	.word	0xffffffff
    46b8:	ffffffff 	.word	0xffffffff
    46bc:	ffffffff 	.word	0xffffffff
    46c0:	ffffffff 	.word	0xffffffff
    46c4:	ffffffff 	.word	0xffffffff
    46c8:	ffffffff 	.word	0xffffffff
    46cc:	ffffffff 	.word	0xffffffff
    46d0:	ffffffff 	.word	0xffffffff
    46d4:	ffffffff 	.word	0xffffffff
    46d8:	ffffffff 	.word	0xffffffff
    46dc:	ffffffff 	.word	0xffffffff
    46e0:	ffffffff 	.word	0xffffffff
    46e4:	ffffffff 	.word	0xffffffff
    46e8:	ffffffff 	.word	0xffffffff
    46ec:	ffffffff 	.word	0xffffffff
    46f0:	ffffffff 	.word	0xffffffff
    46f4:	ffffffff 	.word	0xffffffff
    46f8:	ffffffff 	.word	0xffffffff
    46fc:	ffffffff 	.word	0xffffffff
    4700:	ffffffff 	.word	0xffffffff
    4704:	ffffffff 	.word	0xffffffff
    4708:	ffffffff 	.word	0xffffffff
    470c:	ffffffff 	.word	0xffffffff
    4710:	ffffffff 	.word	0xffffffff
    4714:	ffffffff 	.word	0xffffffff
    4718:	ffffffff 	.word	0xffffffff
    471c:	ffffffff 	.word	0xffffffff
    4720:	ffffffff 	.word	0xffffffff
    4724:	ffffffff 	.word	0xffffffff
    4728:	ffffffff 	.word	0xffffffff
    472c:	ffffffff 	.word	0xffffffff
    4730:	ffffffff 	.word	0xffffffff
    4734:	ffffffff 	.word	0xffffffff
    4738:	ffffffff 	.word	0xffffffff
    473c:	ffffffff 	.word	0xffffffff
    4740:	ffffffff 	.word	0xffffffff
    4744:	ffffffff 	.word	0xffffffff
    4748:	ffffffff 	.word	0xffffffff
    474c:	ffffffff 	.word	0xffffffff
    4750:	ffffffff 	.word	0xffffffff
    4754:	ffffffff 	.word	0xffffffff
    4758:	ffffffff 	.word	0xffffffff
    475c:	ffffffff 	.word	0xffffffff
    4760:	ffffffff 	.word	0xffffffff
    4764:	ffffffff 	.word	0xffffffff
    4768:	ffffffff 	.word	0xffffffff
    476c:	ffffffff 	.word	0xffffffff
    4770:	ffffffff 	.word	0xffffffff
    4774:	ffffffff 	.word	0xffffffff
    4778:	ffffffff 	.word	0xffffffff
    477c:	ffffffff 	.word	0xffffffff
    4780:	ffffffff 	.word	0xffffffff
    4784:	ffffffff 	.word	0xffffffff
    4788:	ffffffff 	.word	0xffffffff
    478c:	ffffffff 	.word	0xffffffff
    4790:	ffffffff 	.word	0xffffffff
    4794:	ffffffff 	.word	0xffffffff
    4798:	ffffffff 	.word	0xffffffff
    479c:	ffffffff 	.word	0xffffffff
    47a0:	ffffffff 	.word	0xffffffff
    47a4:	ffffffff 	.word	0xffffffff
    47a8:	ffffffff 	.word	0xffffffff
    47ac:	ffffffff 	.word	0xffffffff
    47b0:	ffffffff 	.word	0xffffffff
    47b4:	ffffffff 	.word	0xffffffff
    47b8:	ffffffff 	.word	0xffffffff
    47bc:	ffffffff 	.word	0xffffffff
    47c0:	ffffffff 	.word	0xffffffff
    47c4:	ffffffff 	.word	0xffffffff
    47c8:	ffffffff 	.word	0xffffffff
    47cc:	ffffffff 	.word	0xffffffff
    47d0:	ffffffff 	.word	0xffffffff
    47d4:	ffffffff 	.word	0xffffffff
    47d8:	ffffffff 	.word	0xffffffff
    47dc:	ffffffff 	.word	0xffffffff
    47e0:	ffffffff 	.word	0xffffffff
    47e4:	ffffffff 	.word	0xffffffff
    47e8:	ffffffff 	.word	0xffffffff
    47ec:	ffffffff 	.word	0xffffffff
    47f0:	ffffffff 	.word	0xffffffff
    47f4:	ffffffff 	.word	0xffffffff
    47f8:	ffffffff 	.word	0xffffffff
    47fc:	ffffffff 	.word	0xffffffff
    4800:	ffffffff 	.word	0xffffffff
    4804:	ffffffff 	.word	0xffffffff
    4808:	ffffffff 	.word	0xffffffff
    480c:	ffffffff 	.word	0xffffffff
    4810:	ffffffff 	.word	0xffffffff
    4814:	ffffffff 	.word	0xffffffff
    4818:	ffffffff 	.word	0xffffffff
    481c:	ffffffff 	.word	0xffffffff
    4820:	ffffffff 	.word	0xffffffff
    4824:	ffffffff 	.word	0xffffffff
    4828:	ffffffff 	.word	0xffffffff
    482c:	ffffffff 	.word	0xffffffff
    4830:	ffffffff 	.word	0xffffffff
    4834:	ffffffff 	.word	0xffffffff
    4838:	ffffffff 	.word	0xffffffff
    483c:	ffffffff 	.word	0xffffffff
    4840:	ffffffff 	.word	0xffffffff
    4844:	ffffffff 	.word	0xffffffff
    4848:	ffffffff 	.word	0xffffffff
    484c:	ffffffff 	.word	0xffffffff
    4850:	ffffffff 	.word	0xffffffff
    4854:	ffffffff 	.word	0xffffffff
    4858:	ffffffff 	.word	0xffffffff
    485c:	ffffffff 	.word	0xffffffff
    4860:	ffffffff 	.word	0xffffffff
    4864:	ffffffff 	.word	0xffffffff
    4868:	ffffffff 	.word	0xffffffff
    486c:	ffffffff 	.word	0xffffffff
    4870:	ffffffff 	.word	0xffffffff
    4874:	ffffffff 	.word	0xffffffff
    4878:	ffffffff 	.word	0xffffffff
    487c:	ffffffff 	.word	0xffffffff
    4880:	ffffffff 	.word	0xffffffff
    4884:	ffffffff 	.word	0xffffffff
    4888:	ffffffff 	.word	0xffffffff
    488c:	ffffffff 	.word	0xffffffff
    4890:	ffffffff 	.word	0xffffffff
    4894:	ffffffff 	.word	0xffffffff
    4898:	ffffffff 	.word	0xffffffff
    489c:	ffffffff 	.word	0xffffffff
    48a0:	ffffffff 	.word	0xffffffff
    48a4:	ffffffff 	.word	0xffffffff
    48a8:	ffffffff 	.word	0xffffffff
    48ac:	ffffffff 	.word	0xffffffff
    48b0:	ffffffff 	.word	0xffffffff
    48b4:	ffffffff 	.word	0xffffffff
    48b8:	ffffffff 	.word	0xffffffff
    48bc:	ffffffff 	.word	0xffffffff
    48c0:	ffffffff 	.word	0xffffffff
    48c4:	ffffffff 	.word	0xffffffff
    48c8:	ffffffff 	.word	0xffffffff
    48cc:	ffffffff 	.word	0xffffffff
    48d0:	ffffffff 	.word	0xffffffff
    48d4:	ffffffff 	.word	0xffffffff
    48d8:	ffffffff 	.word	0xffffffff
    48dc:	ffffffff 	.word	0xffffffff
    48e0:	ffffffff 	.word	0xffffffff
    48e4:	ffffffff 	.word	0xffffffff
    48e8:	ffffffff 	.word	0xffffffff
    48ec:	ffffffff 	.word	0xffffffff
    48f0:	ffffffff 	.word	0xffffffff
    48f4:	ffffffff 	.word	0xffffffff
    48f8:	ffffffff 	.word	0xffffffff
    48fc:	ffffffff 	.word	0xffffffff
    4900:	ffffffff 	.word	0xffffffff
    4904:	ffffffff 	.word	0xffffffff
    4908:	ffffffff 	.word	0xffffffff
    490c:	ffffffff 	.word	0xffffffff
    4910:	ffffffff 	.word	0xffffffff
    4914:	ffffffff 	.word	0xffffffff
    4918:	ffffffff 	.word	0xffffffff
    491c:	ffffffff 	.word	0xffffffff
    4920:	ffffffff 	.word	0xffffffff
    4924:	ffffffff 	.word	0xffffffff
    4928:	ffffffff 	.word	0xffffffff
    492c:	ffffffff 	.word	0xffffffff
    4930:	ffffffff 	.word	0xffffffff
    4934:	ffffffff 	.word	0xffffffff
    4938:	ffffffff 	.word	0xffffffff
    493c:	ffffffff 	.word	0xffffffff
    4940:	ffffffff 	.word	0xffffffff
    4944:	ffffffff 	.word	0xffffffff
    4948:	ffffffff 	.word	0xffffffff
    494c:	ffffffff 	.word	0xffffffff
    4950:	ffffffff 	.word	0xffffffff
    4954:	ffffffff 	.word	0xffffffff
    4958:	ffffffff 	.word	0xffffffff
    495c:	ffffffff 	.word	0xffffffff
    4960:	ffffffff 	.word	0xffffffff
    4964:	ffffffff 	.word	0xffffffff
    4968:	ffffffff 	.word	0xffffffff
    496c:	ffffffff 	.word	0xffffffff
    4970:	ffffffff 	.word	0xffffffff
    4974:	ffffffff 	.word	0xffffffff
    4978:	ffffffff 	.word	0xffffffff
    497c:	ffffffff 	.word	0xffffffff
    4980:	ffffffff 	.word	0xffffffff
    4984:	ffffffff 	.word	0xffffffff
    4988:	ffffffff 	.word	0xffffffff
    498c:	ffffffff 	.word	0xffffffff
    4990:	ffffffff 	.word	0xffffffff
    4994:	ffffffff 	.word	0xffffffff
    4998:	ffffffff 	.word	0xffffffff
    499c:	ffffffff 	.word	0xffffffff
    49a0:	ffffffff 	.word	0xffffffff
    49a4:	ffffffff 	.word	0xffffffff
    49a8:	ffffffff 	.word	0xffffffff
    49ac:	ffffffff 	.word	0xffffffff
    49b0:	ffffffff 	.word	0xffffffff
    49b4:	ffffffff 	.word	0xffffffff
    49b8:	ffffffff 	.word	0xffffffff
    49bc:	ffffffff 	.word	0xffffffff
    49c0:	ffffffff 	.word	0xffffffff
    49c4:	ffffffff 	.word	0xffffffff
    49c8:	ffffffff 	.word	0xffffffff
    49cc:	ffffffff 	.word	0xffffffff
    49d0:	ffffffff 	.word	0xffffffff
    49d4:	ffffffff 	.word	0xffffffff
    49d8:	ffffffff 	.word	0xffffffff
    49dc:	ffffffff 	.word	0xffffffff
    49e0:	ffffffff 	.word	0xffffffff
    49e4:	ffffffff 	.word	0xffffffff
    49e8:	ffffffff 	.word	0xffffffff
    49ec:	ffffffff 	.word	0xffffffff
    49f0:	ffffffff 	.word	0xffffffff
    49f4:	ffffffff 	.word	0xffffffff
    49f8:	ffffffff 	.word	0xffffffff
    49fc:	ffffffff 	.word	0xffffffff
    4a00:	ffffffff 	.word	0xffffffff
    4a04:	ffffffff 	.word	0xffffffff
    4a08:	ffffffff 	.word	0xffffffff
    4a0c:	ffffffff 	.word	0xffffffff
    4a10:	ffffffff 	.word	0xffffffff
    4a14:	ffffffff 	.word	0xffffffff
    4a18:	ffffffff 	.word	0xffffffff
    4a1c:	ffffffff 	.word	0xffffffff
    4a20:	ffffffff 	.word	0xffffffff
    4a24:	ffffffff 	.word	0xffffffff
    4a28:	ffffffff 	.word	0xffffffff
    4a2c:	ffffffff 	.word	0xffffffff
    4a30:	ffffffff 	.word	0xffffffff
    4a34:	ffffffff 	.word	0xffffffff
    4a38:	ffffffff 	.word	0xffffffff
    4a3c:	ffffffff 	.word	0xffffffff
    4a40:	ffffffff 	.word	0xffffffff
    4a44:	ffffffff 	.word	0xffffffff
    4a48:	ffffffff 	.word	0xffffffff
    4a4c:	ffffffff 	.word	0xffffffff
    4a50:	ffffffff 	.word	0xffffffff
    4a54:	ffffffff 	.word	0xffffffff
    4a58:	ffffffff 	.word	0xffffffff
    4a5c:	ffffffff 	.word	0xffffffff
    4a60:	ffffffff 	.word	0xffffffff
    4a64:	ffffffff 	.word	0xffffffff
    4a68:	ffffffff 	.word	0xffffffff
    4a6c:	ffffffff 	.word	0xffffffff
    4a70:	ffffffff 	.word	0xffffffff
    4a74:	ffffffff 	.word	0xffffffff
    4a78:	ffffffff 	.word	0xffffffff
    4a7c:	ffffffff 	.word	0xffffffff
    4a80:	ffffffff 	.word	0xffffffff
    4a84:	ffffffff 	.word	0xffffffff
    4a88:	ffffffff 	.word	0xffffffff
    4a8c:	ffffffff 	.word	0xffffffff
    4a90:	ffffffff 	.word	0xffffffff
    4a94:	ffffffff 	.word	0xffffffff
    4a98:	ffffffff 	.word	0xffffffff
    4a9c:	ffffffff 	.word	0xffffffff
    4aa0:	ffffffff 	.word	0xffffffff
    4aa4:	ffffffff 	.word	0xffffffff
    4aa8:	ffffffff 	.word	0xffffffff
    4aac:	ffffffff 	.word	0xffffffff
    4ab0:	ffffffff 	.word	0xffffffff
    4ab4:	ffffffff 	.word	0xffffffff
    4ab8:	ffffffff 	.word	0xffffffff
    4abc:	ffffffff 	.word	0xffffffff
    4ac0:	ffffffff 	.word	0xffffffff
    4ac4:	ffffffff 	.word	0xffffffff
    4ac8:	ffffffff 	.word	0xffffffff
    4acc:	ffffffff 	.word	0xffffffff
    4ad0:	ffffffff 	.word	0xffffffff
    4ad4:	ffffffff 	.word	0xffffffff
    4ad8:	ffffffff 	.word	0xffffffff
    4adc:	ffffffff 	.word	0xffffffff
    4ae0:	ffffffff 	.word	0xffffffff
    4ae4:	ffffffff 	.word	0xffffffff
    4ae8:	ffffffff 	.word	0xffffffff
    4aec:	ffffffff 	.word	0xffffffff
    4af0:	ffffffff 	.word	0xffffffff
    4af4:	ffffffff 	.word	0xffffffff
    4af8:	ffffffff 	.word	0xffffffff
    4afc:	ffffffff 	.word	0xffffffff
    4b00:	ffffffff 	.word	0xffffffff
    4b04:	ffffffff 	.word	0xffffffff
    4b08:	ffffffff 	.word	0xffffffff
    4b0c:	ffffffff 	.word	0xffffffff
    4b10:	ffffffff 	.word	0xffffffff
    4b14:	ffffffff 	.word	0xffffffff
    4b18:	ffffffff 	.word	0xffffffff
    4b1c:	ffffffff 	.word	0xffffffff
    4b20:	ffffffff 	.word	0xffffffff
    4b24:	ffffffff 	.word	0xffffffff
    4b28:	ffffffff 	.word	0xffffffff
    4b2c:	ffffffff 	.word	0xffffffff
    4b30:	ffffffff 	.word	0xffffffff
    4b34:	ffffffff 	.word	0xffffffff
    4b38:	ffffffff 	.word	0xffffffff
    4b3c:	ffffffff 	.word	0xffffffff
    4b40:	ffffffff 	.word	0xffffffff
    4b44:	ffffffff 	.word	0xffffffff
    4b48:	ffffffff 	.word	0xffffffff
    4b4c:	ffffffff 	.word	0xffffffff
    4b50:	ffffffff 	.word	0xffffffff
    4b54:	ffffffff 	.word	0xffffffff
    4b58:	ffffffff 	.word	0xffffffff
    4b5c:	ffffffff 	.word	0xffffffff
    4b60:	ffffffff 	.word	0xffffffff
    4b64:	ffffffff 	.word	0xffffffff
    4b68:	ffffffff 	.word	0xffffffff
    4b6c:	ffffffff 	.word	0xffffffff
    4b70:	ffffffff 	.word	0xffffffff
    4b74:	ffffffff 	.word	0xffffffff
    4b78:	ffffffff 	.word	0xffffffff
    4b7c:	ffffffff 	.word	0xffffffff
    4b80:	ffffffff 	.word	0xffffffff
    4b84:	ffffffff 	.word	0xffffffff
    4b88:	ffffffff 	.word	0xffffffff
    4b8c:	ffffffff 	.word	0xffffffff
    4b90:	ffffffff 	.word	0xffffffff
    4b94:	ffffffff 	.word	0xffffffff
    4b98:	ffffffff 	.word	0xffffffff
    4b9c:	ffffffff 	.word	0xffffffff
    4ba0:	ffffffff 	.word	0xffffffff
    4ba4:	ffffffff 	.word	0xffffffff
    4ba8:	ffffffff 	.word	0xffffffff
    4bac:	ffffffff 	.word	0xffffffff
    4bb0:	ffffffff 	.word	0xffffffff
    4bb4:	ffffffff 	.word	0xffffffff
    4bb8:	ffffffff 	.word	0xffffffff
    4bbc:	ffffffff 	.word	0xffffffff
    4bc0:	ffffffff 	.word	0xffffffff
    4bc4:	ffffffff 	.word	0xffffffff
    4bc8:	ffffffff 	.word	0xffffffff
    4bcc:	ffffffff 	.word	0xffffffff
    4bd0:	ffffffff 	.word	0xffffffff
    4bd4:	ffffffff 	.word	0xffffffff
    4bd8:	ffffffff 	.word	0xffffffff
    4bdc:	ffffffff 	.word	0xffffffff
    4be0:	ffffffff 	.word	0xffffffff
    4be4:	ffffffff 	.word	0xffffffff
    4be8:	ffffffff 	.word	0xffffffff
    4bec:	ffffffff 	.word	0xffffffff
    4bf0:	ffffffff 	.word	0xffffffff
    4bf4:	ffffffff 	.word	0xffffffff
    4bf8:	ffffffff 	.word	0xffffffff
    4bfc:	ffffffff 	.word	0xffffffff
    4c00:	ffffffff 	.word	0xffffffff
    4c04:	ffffffff 	.word	0xffffffff
    4c08:	ffffffff 	.word	0xffffffff
    4c0c:	ffffffff 	.word	0xffffffff
    4c10:	ffffffff 	.word	0xffffffff
    4c14:	ffffffff 	.word	0xffffffff
    4c18:	ffffffff 	.word	0xffffffff
    4c1c:	ffffffff 	.word	0xffffffff
    4c20:	ffffffff 	.word	0xffffffff
    4c24:	ffffffff 	.word	0xffffffff
    4c28:	ffffffff 	.word	0xffffffff
    4c2c:	ffffffff 	.word	0xffffffff
    4c30:	ffffffff 	.word	0xffffffff
    4c34:	ffffffff 	.word	0xffffffff
    4c38:	ffffffff 	.word	0xffffffff
    4c3c:	ffffffff 	.word	0xffffffff
    4c40:	ffffffff 	.word	0xffffffff
    4c44:	ffffffff 	.word	0xffffffff
    4c48:	ffffffff 	.word	0xffffffff
    4c4c:	ffffffff 	.word	0xffffffff
    4c50:	ffffffff 	.word	0xffffffff
    4c54:	ffffffff 	.word	0xffffffff
    4c58:	ffffffff 	.word	0xffffffff
    4c5c:	ffffffff 	.word	0xffffffff
    4c60:	ffffffff 	.word	0xffffffff
    4c64:	ffffffff 	.word	0xffffffff
    4c68:	ffffffff 	.word	0xffffffff
    4c6c:	ffffffff 	.word	0xffffffff
    4c70:	ffffffff 	.word	0xffffffff
    4c74:	ffffffff 	.word	0xffffffff
    4c78:	ffffffff 	.word	0xffffffff
    4c7c:	ffffffff 	.word	0xffffffff
    4c80:	ffffffff 	.word	0xffffffff
    4c84:	ffffffff 	.word	0xffffffff
    4c88:	ffffffff 	.word	0xffffffff
    4c8c:	ffffffff 	.word	0xffffffff
    4c90:	ffffffff 	.word	0xffffffff
    4c94:	ffffffff 	.word	0xffffffff
    4c98:	ffffffff 	.word	0xffffffff
    4c9c:	ffffffff 	.word	0xffffffff
    4ca0:	ffffffff 	.word	0xffffffff
    4ca4:	ffffffff 	.word	0xffffffff
    4ca8:	ffffffff 	.word	0xffffffff
    4cac:	ffffffff 	.word	0xffffffff
    4cb0:	ffffffff 	.word	0xffffffff
    4cb4:	ffffffff 	.word	0xffffffff
    4cb8:	ffffffff 	.word	0xffffffff
    4cbc:	ffffffff 	.word	0xffffffff
    4cc0:	ffffffff 	.word	0xffffffff
    4cc4:	ffffffff 	.word	0xffffffff
    4cc8:	ffffffff 	.word	0xffffffff
    4ccc:	ffffffff 	.word	0xffffffff
    4cd0:	ffffffff 	.word	0xffffffff
    4cd4:	ffffffff 	.word	0xffffffff
    4cd8:	ffffffff 	.word	0xffffffff
    4cdc:	ffffffff 	.word	0xffffffff
    4ce0:	ffffffff 	.word	0xffffffff
    4ce4:	ffffffff 	.word	0xffffffff
    4ce8:	ffffffff 	.word	0xffffffff
    4cec:	ffffffff 	.word	0xffffffff
    4cf0:	ffffffff 	.word	0xffffffff
    4cf4:	ffffffff 	.word	0xffffffff
    4cf8:	ffffffff 	.word	0xffffffff
    4cfc:	ffffffff 	.word	0xffffffff
    4d00:	ffffffff 	.word	0xffffffff
    4d04:	ffffffff 	.word	0xffffffff
    4d08:	ffffffff 	.word	0xffffffff
    4d0c:	ffffffff 	.word	0xffffffff
    4d10:	ffffffff 	.word	0xffffffff
    4d14:	ffffffff 	.word	0xffffffff
    4d18:	ffffffff 	.word	0xffffffff
    4d1c:	ffffffff 	.word	0xffffffff
    4d20:	ffffffff 	.word	0xffffffff
    4d24:	ffffffff 	.word	0xffffffff
    4d28:	ffffffff 	.word	0xffffffff
    4d2c:	ffffffff 	.word	0xffffffff
    4d30:	ffffffff 	.word	0xffffffff
    4d34:	ffffffff 	.word	0xffffffff
    4d38:	ffffffff 	.word	0xffffffff
    4d3c:	ffffffff 	.word	0xffffffff
    4d40:	ffffffff 	.word	0xffffffff
    4d44:	ffffffff 	.word	0xffffffff
    4d48:	ffffffff 	.word	0xffffffff
    4d4c:	ffffffff 	.word	0xffffffff
    4d50:	ffffffff 	.word	0xffffffff
    4d54:	ffffffff 	.word	0xffffffff
    4d58:	ffffffff 	.word	0xffffffff
    4d5c:	ffffffff 	.word	0xffffffff
    4d60:	ffffffff 	.word	0xffffffff
    4d64:	ffffffff 	.word	0xffffffff
    4d68:	ffffffff 	.word	0xffffffff
    4d6c:	ffffffff 	.word	0xffffffff
    4d70:	ffffffff 	.word	0xffffffff
    4d74:	ffffffff 	.word	0xffffffff
    4d78:	ffffffff 	.word	0xffffffff
    4d7c:	ffffffff 	.word	0xffffffff
    4d80:	ffffffff 	.word	0xffffffff
    4d84:	ffffffff 	.word	0xffffffff
    4d88:	ffffffff 	.word	0xffffffff
    4d8c:	ffffffff 	.word	0xffffffff
    4d90:	ffffffff 	.word	0xffffffff
    4d94:	ffffffff 	.word	0xffffffff
    4d98:	ffffffff 	.word	0xffffffff
    4d9c:	ffffffff 	.word	0xffffffff
    4da0:	ffffffff 	.word	0xffffffff
    4da4:	ffffffff 	.word	0xffffffff
    4da8:	ffffffff 	.word	0xffffffff
    4dac:	ffffffff 	.word	0xffffffff
    4db0:	ffffffff 	.word	0xffffffff
    4db4:	ffffffff 	.word	0xffffffff
    4db8:	ffffffff 	.word	0xffffffff
    4dbc:	ffffffff 	.word	0xffffffff
    4dc0:	ffffffff 	.word	0xffffffff
    4dc4:	ffffffff 	.word	0xffffffff
    4dc8:	ffffffff 	.word	0xffffffff
    4dcc:	ffffffff 	.word	0xffffffff
    4dd0:	ffffffff 	.word	0xffffffff
    4dd4:	ffffffff 	.word	0xffffffff
    4dd8:	ffffffff 	.word	0xffffffff
    4ddc:	ffffffff 	.word	0xffffffff
    4de0:	ffffffff 	.word	0xffffffff
    4de4:	ffffffff 	.word	0xffffffff
    4de8:	ffffffff 	.word	0xffffffff
    4dec:	ffffffff 	.word	0xffffffff
    4df0:	ffffffff 	.word	0xffffffff
    4df4:	ffffffff 	.word	0xffffffff
    4df8:	ffffffff 	.word	0xffffffff
    4dfc:	ffffffff 	.word	0xffffffff
    4e00:	ffffffff 	.word	0xffffffff
    4e04:	ffffffff 	.word	0xffffffff
    4e08:	ffffffff 	.word	0xffffffff
    4e0c:	ffffffff 	.word	0xffffffff
    4e10:	ffffffff 	.word	0xffffffff
    4e14:	ffffffff 	.word	0xffffffff
    4e18:	ffffffff 	.word	0xffffffff
    4e1c:	ffffffff 	.word	0xffffffff
    4e20:	ffffffff 	.word	0xffffffff
    4e24:	ffffffff 	.word	0xffffffff
    4e28:	ffffffff 	.word	0xffffffff
    4e2c:	ffffffff 	.word	0xffffffff
    4e30:	ffffffff 	.word	0xffffffff
    4e34:	ffffffff 	.word	0xffffffff
    4e38:	ffffffff 	.word	0xffffffff
    4e3c:	ffffffff 	.word	0xffffffff
    4e40:	ffffffff 	.word	0xffffffff
    4e44:	ffffffff 	.word	0xffffffff
    4e48:	ffffffff 	.word	0xffffffff
    4e4c:	ffffffff 	.word	0xffffffff
    4e50:	ffffffff 	.word	0xffffffff
    4e54:	ffffffff 	.word	0xffffffff
    4e58:	ffffffff 	.word	0xffffffff
    4e5c:	ffffffff 	.word	0xffffffff
    4e60:	ffffffff 	.word	0xffffffff
    4e64:	ffffffff 	.word	0xffffffff
    4e68:	ffffffff 	.word	0xffffffff
    4e6c:	ffffffff 	.word	0xffffffff
    4e70:	ffffffff 	.word	0xffffffff
    4e74:	ffffffff 	.word	0xffffffff
    4e78:	ffffffff 	.word	0xffffffff
    4e7c:	ffffffff 	.word	0xffffffff
    4e80:	ffffffff 	.word	0xffffffff
    4e84:	ffffffff 	.word	0xffffffff
    4e88:	ffffffff 	.word	0xffffffff
    4e8c:	ffffffff 	.word	0xffffffff
    4e90:	ffffffff 	.word	0xffffffff
    4e94:	ffffffff 	.word	0xffffffff
    4e98:	ffffffff 	.word	0xffffffff
    4e9c:	ffffffff 	.word	0xffffffff
    4ea0:	ffffffff 	.word	0xffffffff
    4ea4:	ffffffff 	.word	0xffffffff
    4ea8:	ffffffff 	.word	0xffffffff
    4eac:	ffffffff 	.word	0xffffffff
    4eb0:	ffffffff 	.word	0xffffffff
    4eb4:	ffffffff 	.word	0xffffffff
    4eb8:	ffffffff 	.word	0xffffffff
    4ebc:	ffffffff 	.word	0xffffffff
    4ec0:	ffffffff 	.word	0xffffffff
    4ec4:	ffffffff 	.word	0xffffffff
    4ec8:	ffffffff 	.word	0xffffffff
    4ecc:	ffffffff 	.word	0xffffffff
    4ed0:	ffffffff 	.word	0xffffffff
    4ed4:	ffffffff 	.word	0xffffffff
    4ed8:	ffffffff 	.word	0xffffffff
    4edc:	ffffffff 	.word	0xffffffff
    4ee0:	ffffffff 	.word	0xffffffff
    4ee4:	ffffffff 	.word	0xffffffff
    4ee8:	ffffffff 	.word	0xffffffff
    4eec:	ffffffff 	.word	0xffffffff
    4ef0:	ffffffff 	.word	0xffffffff
    4ef4:	ffffffff 	.word	0xffffffff
    4ef8:	ffffffff 	.word	0xffffffff
    4efc:	ffffffff 	.word	0xffffffff
    4f00:	ffffffff 	.word	0xffffffff
    4f04:	ffffffff 	.word	0xffffffff
    4f08:	ffffffff 	.word	0xffffffff
    4f0c:	ffffffff 	.word	0xffffffff
    4f10:	ffffffff 	.word	0xffffffff
    4f14:	ffffffff 	.word	0xffffffff
    4f18:	ffffffff 	.word	0xffffffff
    4f1c:	ffffffff 	.word	0xffffffff
    4f20:	ffffffff 	.word	0xffffffff
    4f24:	ffffffff 	.word	0xffffffff
    4f28:	ffffffff 	.word	0xffffffff
    4f2c:	ffffffff 	.word	0xffffffff
    4f30:	ffffffff 	.word	0xffffffff
    4f34:	ffffffff 	.word	0xffffffff
    4f38:	ffffffff 	.word	0xffffffff
    4f3c:	ffffffff 	.word	0xffffffff
    4f40:	ffffffff 	.word	0xffffffff
    4f44:	ffffffff 	.word	0xffffffff
    4f48:	ffffffff 	.word	0xffffffff
    4f4c:	ffffffff 	.word	0xffffffff
    4f50:	ffffffff 	.word	0xffffffff
    4f54:	ffffffff 	.word	0xffffffff
    4f58:	ffffffff 	.word	0xffffffff
    4f5c:	ffffffff 	.word	0xffffffff
    4f60:	ffffffff 	.word	0xffffffff
    4f64:	ffffffff 	.word	0xffffffff
    4f68:	ffffffff 	.word	0xffffffff
    4f6c:	ffffffff 	.word	0xffffffff
    4f70:	ffffffff 	.word	0xffffffff
    4f74:	ffffffff 	.word	0xffffffff
    4f78:	ffffffff 	.word	0xffffffff
    4f7c:	ffffffff 	.word	0xffffffff
    4f80:	ffffffff 	.word	0xffffffff
    4f84:	ffffffff 	.word	0xffffffff
    4f88:	ffffffff 	.word	0xffffffff
    4f8c:	ffffffff 	.word	0xffffffff
    4f90:	ffffffff 	.word	0xffffffff
    4f94:	ffffffff 	.word	0xffffffff
    4f98:	ffffffff 	.word	0xffffffff
    4f9c:	ffffffff 	.word	0xffffffff
    4fa0:	ffffffff 	.word	0xffffffff
    4fa4:	ffffffff 	.word	0xffffffff
    4fa8:	ffffffff 	.word	0xffffffff
    4fac:	ffffffff 	.word	0xffffffff
    4fb0:	ffffffff 	.word	0xffffffff
    4fb4:	ffffffff 	.word	0xffffffff
    4fb8:	ffffffff 	.word	0xffffffff
    4fbc:	ffffffff 	.word	0xffffffff
    4fc0:	ffffffff 	.word	0xffffffff
    4fc4:	ffffffff 	.word	0xffffffff
    4fc8:	ffffffff 	.word	0xffffffff
    4fcc:	ffffffff 	.word	0xffffffff
    4fd0:	ffffffff 	.word	0xffffffff
    4fd4:	ffffffff 	.word	0xffffffff
    4fd8:	ffffffff 	.word	0xffffffff
    4fdc:	ffffffff 	.word	0xffffffff
    4fe0:	ffffffff 	.word	0xffffffff
    4fe4:	ffffffff 	.word	0xffffffff
    4fe8:	ffffffff 	.word	0xffffffff
    4fec:	ffffffff 	.word	0xffffffff
    4ff0:	ffffffff 	.word	0xffffffff
    4ff4:	ffffffff 	.word	0xffffffff
    4ff8:	ffffffff 	.word	0xffffffff
    4ffc:	ffffffff 	.word	0xffffffff
    5000:	ffffffff 	.word	0xffffffff
    5004:	ffffffff 	.word	0xffffffff
    5008:	ffffffff 	.word	0xffffffff
    500c:	ffffffff 	.word	0xffffffff
    5010:	ffffffff 	.word	0xffffffff
    5014:	ffffffff 	.word	0xffffffff
    5018:	ffffffff 	.word	0xffffffff
    501c:	ffffffff 	.word	0xffffffff
    5020:	ffffffff 	.word	0xffffffff
    5024:	ffffffff 	.word	0xffffffff
    5028:	ffffffff 	.word	0xffffffff
    502c:	ffffffff 	.word	0xffffffff
    5030:	ffffffff 	.word	0xffffffff
    5034:	ffffffff 	.word	0xffffffff
    5038:	ffffffff 	.word	0xffffffff
    503c:	ffffffff 	.word	0xffffffff
    5040:	ffffffff 	.word	0xffffffff
    5044:	ffffffff 	.word	0xffffffff
    5048:	ffffffff 	.word	0xffffffff
    504c:	ffffffff 	.word	0xffffffff
    5050:	ffffffff 	.word	0xffffffff
    5054:	ffffffff 	.word	0xffffffff
    5058:	ffffffff 	.word	0xffffffff
    505c:	ffffffff 	.word	0xffffffff
    5060:	ffffffff 	.word	0xffffffff
    5064:	ffffffff 	.word	0xffffffff
    5068:	ffffffff 	.word	0xffffffff
    506c:	ffffffff 	.word	0xffffffff
    5070:	ffffffff 	.word	0xffffffff
    5074:	ffffffff 	.word	0xffffffff
    5078:	ffffffff 	.word	0xffffffff
    507c:	ffffffff 	.word	0xffffffff
    5080:	ffffffff 	.word	0xffffffff
    5084:	ffffffff 	.word	0xffffffff
    5088:	ffffffff 	.word	0xffffffff
    508c:	ffffffff 	.word	0xffffffff
    5090:	ffffffff 	.word	0xffffffff
    5094:	ffffffff 	.word	0xffffffff
    5098:	ffffffff 	.word	0xffffffff
    509c:	ffffffff 	.word	0xffffffff
    50a0:	ffffffff 	.word	0xffffffff
    50a4:	ffffffff 	.word	0xffffffff
    50a8:	ffffffff 	.word	0xffffffff
    50ac:	ffffffff 	.word	0xffffffff
    50b0:	ffffffff 	.word	0xffffffff
    50b4:	ffffffff 	.word	0xffffffff
    50b8:	ffffffff 	.word	0xffffffff
    50bc:	ffffffff 	.word	0xffffffff
    50c0:	ffffffff 	.word	0xffffffff
    50c4:	ffffffff 	.word	0xffffffff
    50c8:	ffffffff 	.word	0xffffffff
    50cc:	ffffffff 	.word	0xffffffff
    50d0:	ffffffff 	.word	0xffffffff
    50d4:	ffffffff 	.word	0xffffffff
    50d8:	ffffffff 	.word	0xffffffff
    50dc:	ffffffff 	.word	0xffffffff
    50e0:	ffffffff 	.word	0xffffffff
    50e4:	ffffffff 	.word	0xffffffff
    50e8:	ffffffff 	.word	0xffffffff
    50ec:	ffffffff 	.word	0xffffffff
    50f0:	ffffffff 	.word	0xffffffff
    50f4:	ffffffff 	.word	0xffffffff
    50f8:	ffffffff 	.word	0xffffffff
    50fc:	ffffffff 	.word	0xffffffff
    5100:	ffffffff 	.word	0xffffffff
    5104:	ffffffff 	.word	0xffffffff
    5108:	ffffffff 	.word	0xffffffff
    510c:	ffffffff 	.word	0xffffffff
    5110:	ffffffff 	.word	0xffffffff
    5114:	ffffffff 	.word	0xffffffff
    5118:	ffffffff 	.word	0xffffffff
    511c:	ffffffff 	.word	0xffffffff
    5120:	ffffffff 	.word	0xffffffff
    5124:	ffffffff 	.word	0xffffffff
    5128:	ffffffff 	.word	0xffffffff
    512c:	ffffffff 	.word	0xffffffff
    5130:	ffffffff 	.word	0xffffffff
    5134:	ffffffff 	.word	0xffffffff
    5138:	ffffffff 	.word	0xffffffff
    513c:	ffffffff 	.word	0xffffffff
    5140:	ffffffff 	.word	0xffffffff
    5144:	ffffffff 	.word	0xffffffff
    5148:	ffffffff 	.word	0xffffffff
    514c:	ffffffff 	.word	0xffffffff
    5150:	ffffffff 	.word	0xffffffff
    5154:	ffffffff 	.word	0xffffffff
    5158:	ffffffff 	.word	0xffffffff
    515c:	ffffffff 	.word	0xffffffff
    5160:	ffffffff 	.word	0xffffffff
    5164:	ffffffff 	.word	0xffffffff
    5168:	ffffffff 	.word	0xffffffff
    516c:	ffffffff 	.word	0xffffffff
    5170:	ffffffff 	.word	0xffffffff
    5174:	ffffffff 	.word	0xffffffff
    5178:	ffffffff 	.word	0xffffffff
    517c:	ffffffff 	.word	0xffffffff
    5180:	ffffffff 	.word	0xffffffff
    5184:	ffffffff 	.word	0xffffffff
    5188:	ffffffff 	.word	0xffffffff
    518c:	ffffffff 	.word	0xffffffff
    5190:	ffffffff 	.word	0xffffffff
    5194:	ffffffff 	.word	0xffffffff
    5198:	ffffffff 	.word	0xffffffff
    519c:	ffffffff 	.word	0xffffffff
    51a0:	ffffffff 	.word	0xffffffff
    51a4:	ffffffff 	.word	0xffffffff
    51a8:	ffffffff 	.word	0xffffffff
    51ac:	ffffffff 	.word	0xffffffff
    51b0:	ffffffff 	.word	0xffffffff
    51b4:	ffffffff 	.word	0xffffffff
    51b8:	ffffffff 	.word	0xffffffff
    51bc:	ffffffff 	.word	0xffffffff
    51c0:	ffffffff 	.word	0xffffffff
    51c4:	ffffffff 	.word	0xffffffff
    51c8:	ffffffff 	.word	0xffffffff
    51cc:	ffffffff 	.word	0xffffffff
    51d0:	ffffffff 	.word	0xffffffff
    51d4:	ffffffff 	.word	0xffffffff
    51d8:	ffffffff 	.word	0xffffffff
    51dc:	ffffffff 	.word	0xffffffff
    51e0:	ffffffff 	.word	0xffffffff
    51e4:	ffffffff 	.word	0xffffffff
    51e8:	ffffffff 	.word	0xffffffff
    51ec:	ffffffff 	.word	0xffffffff
    51f0:	ffffffff 	.word	0xffffffff
    51f4:	ffffffff 	.word	0xffffffff
    51f8:	ffffffff 	.word	0xffffffff
    51fc:	ffffffff 	.word	0xffffffff
    5200:	ffffffff 	.word	0xffffffff
    5204:	ffffffff 	.word	0xffffffff
    5208:	ffffffff 	.word	0xffffffff
    520c:	ffffffff 	.word	0xffffffff
    5210:	ffffffff 	.word	0xffffffff
    5214:	ffffffff 	.word	0xffffffff
    5218:	ffffffff 	.word	0xffffffff
    521c:	ffffffff 	.word	0xffffffff
    5220:	ffffffff 	.word	0xffffffff
    5224:	ffffffff 	.word	0xffffffff
    5228:	ffffffff 	.word	0xffffffff
    522c:	ffffffff 	.word	0xffffffff
    5230:	ffffffff 	.word	0xffffffff
    5234:	ffffffff 	.word	0xffffffff
    5238:	ffffffff 	.word	0xffffffff
    523c:	ffffffff 	.word	0xffffffff
    5240:	ffffffff 	.word	0xffffffff
    5244:	ffffffff 	.word	0xffffffff
    5248:	ffffffff 	.word	0xffffffff
    524c:	ffffffff 	.word	0xffffffff
    5250:	ffffffff 	.word	0xffffffff
    5254:	ffffffff 	.word	0xffffffff
    5258:	ffffffff 	.word	0xffffffff
    525c:	ffffffff 	.word	0xffffffff
    5260:	ffffffff 	.word	0xffffffff
    5264:	ffffffff 	.word	0xffffffff
    5268:	ffffffff 	.word	0xffffffff
    526c:	ffffffff 	.word	0xffffffff
    5270:	ffffffff 	.word	0xffffffff
    5274:	ffffffff 	.word	0xffffffff
    5278:	ffffffff 	.word	0xffffffff
    527c:	ffffffff 	.word	0xffffffff
    5280:	ffffffff 	.word	0xffffffff
    5284:	ffffffff 	.word	0xffffffff
    5288:	ffffffff 	.word	0xffffffff
    528c:	ffffffff 	.word	0xffffffff
    5290:	ffffffff 	.word	0xffffffff
    5294:	ffffffff 	.word	0xffffffff
    5298:	ffffffff 	.word	0xffffffff
    529c:	ffffffff 	.word	0xffffffff
    52a0:	ffffffff 	.word	0xffffffff
    52a4:	ffffffff 	.word	0xffffffff
    52a8:	ffffffff 	.word	0xffffffff
    52ac:	ffffffff 	.word	0xffffffff
    52b0:	ffffffff 	.word	0xffffffff
    52b4:	ffffffff 	.word	0xffffffff
    52b8:	ffffffff 	.word	0xffffffff
    52bc:	ffffffff 	.word	0xffffffff
    52c0:	ffffffff 	.word	0xffffffff
    52c4:	ffffffff 	.word	0xffffffff
    52c8:	ffffffff 	.word	0xffffffff
    52cc:	ffffffff 	.word	0xffffffff
    52d0:	ffffffff 	.word	0xffffffff
    52d4:	ffffffff 	.word	0xffffffff
    52d8:	ffffffff 	.word	0xffffffff
    52dc:	ffffffff 	.word	0xffffffff
    52e0:	ffffffff 	.word	0xffffffff
    52e4:	ffffffff 	.word	0xffffffff
    52e8:	ffffffff 	.word	0xffffffff
    52ec:	ffffffff 	.word	0xffffffff
    52f0:	ffffffff 	.word	0xffffffff
    52f4:	ffffffff 	.word	0xffffffff
    52f8:	ffffffff 	.word	0xffffffff
    52fc:	ffffffff 	.word	0xffffffff
    5300:	ffffffff 	.word	0xffffffff
    5304:	ffffffff 	.word	0xffffffff
    5308:	ffffffff 	.word	0xffffffff
    530c:	ffffffff 	.word	0xffffffff
    5310:	ffffffff 	.word	0xffffffff
    5314:	ffffffff 	.word	0xffffffff
    5318:	ffffffff 	.word	0xffffffff
    531c:	ffffffff 	.word	0xffffffff
    5320:	ffffffff 	.word	0xffffffff
    5324:	ffffffff 	.word	0xffffffff
    5328:	ffffffff 	.word	0xffffffff
    532c:	ffffffff 	.word	0xffffffff
    5330:	ffffffff 	.word	0xffffffff
    5334:	ffffffff 	.word	0xffffffff
    5338:	ffffffff 	.word	0xffffffff
    533c:	ffffffff 	.word	0xffffffff
    5340:	ffffffff 	.word	0xffffffff
    5344:	ffffffff 	.word	0xffffffff
    5348:	ffffffff 	.word	0xffffffff
    534c:	ffffffff 	.word	0xffffffff
    5350:	ffffffff 	.word	0xffffffff
    5354:	ffffffff 	.word	0xffffffff
    5358:	ffffffff 	.word	0xffffffff
    535c:	ffffffff 	.word	0xffffffff
    5360:	ffffffff 	.word	0xffffffff
    5364:	ffffffff 	.word	0xffffffff
    5368:	ffffffff 	.word	0xffffffff
    536c:	ffffffff 	.word	0xffffffff
    5370:	ffffffff 	.word	0xffffffff
    5374:	ffffffff 	.word	0xffffffff
    5378:	ffffffff 	.word	0xffffffff
    537c:	ffffffff 	.word	0xffffffff
    5380:	ffffffff 	.word	0xffffffff
    5384:	ffffffff 	.word	0xffffffff
    5388:	ffffffff 	.word	0xffffffff
    538c:	ffffffff 	.word	0xffffffff
    5390:	ffffffff 	.word	0xffffffff
    5394:	ffffffff 	.word	0xffffffff
    5398:	ffffffff 	.word	0xffffffff
    539c:	ffffffff 	.word	0xffffffff
    53a0:	ffffffff 	.word	0xffffffff
    53a4:	ffffffff 	.word	0xffffffff
    53a8:	ffffffff 	.word	0xffffffff
    53ac:	ffffffff 	.word	0xffffffff
    53b0:	ffffffff 	.word	0xffffffff
    53b4:	ffffffff 	.word	0xffffffff
    53b8:	ffffffff 	.word	0xffffffff
    53bc:	ffffffff 	.word	0xffffffff
    53c0:	ffffffff 	.word	0xffffffff
    53c4:	ffffffff 	.word	0xffffffff
    53c8:	ffffffff 	.word	0xffffffff
    53cc:	ffffffff 	.word	0xffffffff
    53d0:	ffffffff 	.word	0xffffffff
    53d4:	ffffffff 	.word	0xffffffff
    53d8:	ffffffff 	.word	0xffffffff
    53dc:	ffffffff 	.word	0xffffffff
    53e0:	ffffffff 	.word	0xffffffff
    53e4:	ffffffff 	.word	0xffffffff
    53e8:	ffffffff 	.word	0xffffffff
    53ec:	ffffffff 	.word	0xffffffff
    53f0:	ffffffff 	.word	0xffffffff
    53f4:	ffffffff 	.word	0xffffffff
    53f8:	ffffffff 	.word	0xffffffff
    53fc:	ffffffff 	.word	0xffffffff
    5400:	ffffffff 	.word	0xffffffff
    5404:	ffffffff 	.word	0xffffffff
    5408:	ffffffff 	.word	0xffffffff
    540c:	ffffffff 	.word	0xffffffff
    5410:	ffffffff 	.word	0xffffffff
    5414:	ffffffff 	.word	0xffffffff
    5418:	ffffffff 	.word	0xffffffff
    541c:	ffffffff 	.word	0xffffffff
    5420:	ffffffff 	.word	0xffffffff
    5424:	ffffffff 	.word	0xffffffff
    5428:	ffffffff 	.word	0xffffffff
    542c:	ffffffff 	.word	0xffffffff
    5430:	ffffffff 	.word	0xffffffff
    5434:	ffffffff 	.word	0xffffffff
    5438:	ffffffff 	.word	0xffffffff
    543c:	ffffffff 	.word	0xffffffff
    5440:	ffffffff 	.word	0xffffffff
    5444:	ffffffff 	.word	0xffffffff
    5448:	ffffffff 	.word	0xffffffff
    544c:	ffffffff 	.word	0xffffffff
    5450:	ffffffff 	.word	0xffffffff
    5454:	ffffffff 	.word	0xffffffff
    5458:	ffffffff 	.word	0xffffffff
    545c:	ffffffff 	.word	0xffffffff
    5460:	ffffffff 	.word	0xffffffff
    5464:	ffffffff 	.word	0xffffffff
    5468:	ffffffff 	.word	0xffffffff
    546c:	ffffffff 	.word	0xffffffff
    5470:	ffffffff 	.word	0xffffffff
    5474:	ffffffff 	.word	0xffffffff
    5478:	ffffffff 	.word	0xffffffff
    547c:	ffffffff 	.word	0xffffffff
    5480:	ffffffff 	.word	0xffffffff
    5484:	ffffffff 	.word	0xffffffff
    5488:	ffffffff 	.word	0xffffffff
    548c:	ffffffff 	.word	0xffffffff
    5490:	ffffffff 	.word	0xffffffff
    5494:	ffffffff 	.word	0xffffffff
    5498:	ffffffff 	.word	0xffffffff
    549c:	ffffffff 	.word	0xffffffff
    54a0:	ffffffff 	.word	0xffffffff
    54a4:	ffffffff 	.word	0xffffffff
    54a8:	ffffffff 	.word	0xffffffff
    54ac:	ffffffff 	.word	0xffffffff
    54b0:	ffffffff 	.word	0xffffffff
    54b4:	ffffffff 	.word	0xffffffff
    54b8:	ffffffff 	.word	0xffffffff
    54bc:	ffffffff 	.word	0xffffffff
    54c0:	ffffffff 	.word	0xffffffff
    54c4:	ffffffff 	.word	0xffffffff
    54c8:	ffffffff 	.word	0xffffffff
    54cc:	ffffffff 	.word	0xffffffff
    54d0:	ffffffff 	.word	0xffffffff
    54d4:	ffffffff 	.word	0xffffffff
    54d8:	ffffffff 	.word	0xffffffff
    54dc:	ffffffff 	.word	0xffffffff
    54e0:	ffffffff 	.word	0xffffffff
    54e4:	ffffffff 	.word	0xffffffff
    54e8:	ffffffff 	.word	0xffffffff
    54ec:	ffffffff 	.word	0xffffffff
    54f0:	ffffffff 	.word	0xffffffff
    54f4:	ffffffff 	.word	0xffffffff
    54f8:	ffffffff 	.word	0xffffffff
    54fc:	ffffffff 	.word	0xffffffff
    5500:	ffffffff 	.word	0xffffffff
    5504:	ffffffff 	.word	0xffffffff
    5508:	ffffffff 	.word	0xffffffff
    550c:	ffffffff 	.word	0xffffffff
    5510:	ffffffff 	.word	0xffffffff
    5514:	ffffffff 	.word	0xffffffff
    5518:	ffffffff 	.word	0xffffffff
    551c:	ffffffff 	.word	0xffffffff
    5520:	ffffffff 	.word	0xffffffff
    5524:	ffffffff 	.word	0xffffffff
    5528:	ffffffff 	.word	0xffffffff
    552c:	ffffffff 	.word	0xffffffff
    5530:	ffffffff 	.word	0xffffffff
    5534:	ffffffff 	.word	0xffffffff
    5538:	ffffffff 	.word	0xffffffff
    553c:	ffffffff 	.word	0xffffffff
    5540:	ffffffff 	.word	0xffffffff
    5544:	ffffffff 	.word	0xffffffff
    5548:	ffffffff 	.word	0xffffffff
    554c:	ffffffff 	.word	0xffffffff
    5550:	ffffffff 	.word	0xffffffff
    5554:	ffffffff 	.word	0xffffffff
    5558:	ffffffff 	.word	0xffffffff
    555c:	ffffffff 	.word	0xffffffff
    5560:	ffffffff 	.word	0xffffffff
    5564:	ffffffff 	.word	0xffffffff
    5568:	ffffffff 	.word	0xffffffff
    556c:	ffffffff 	.word	0xffffffff
    5570:	ffffffff 	.word	0xffffffff
    5574:	ffffffff 	.word	0xffffffff
    5578:	ffffffff 	.word	0xffffffff
    557c:	ffffffff 	.word	0xffffffff
    5580:	ffffffff 	.word	0xffffffff
    5584:	ffffffff 	.word	0xffffffff
    5588:	ffffffff 	.word	0xffffffff
    558c:	ffffffff 	.word	0xffffffff
    5590:	ffffffff 	.word	0xffffffff
    5594:	ffffffff 	.word	0xffffffff
    5598:	ffffffff 	.word	0xffffffff
    559c:	ffffffff 	.word	0xffffffff
    55a0:	ffffffff 	.word	0xffffffff
    55a4:	ffffffff 	.word	0xffffffff
    55a8:	ffffffff 	.word	0xffffffff
    55ac:	ffffffff 	.word	0xffffffff
    55b0:	ffffffff 	.word	0xffffffff
    55b4:	ffffffff 	.word	0xffffffff
    55b8:	ffffffff 	.word	0xffffffff
    55bc:	ffffffff 	.word	0xffffffff
    55c0:	ffffffff 	.word	0xffffffff
    55c4:	ffffffff 	.word	0xffffffff
    55c8:	ffffffff 	.word	0xffffffff
    55cc:	ffffffff 	.word	0xffffffff
    55d0:	ffffffff 	.word	0xffffffff
    55d4:	ffffffff 	.word	0xffffffff
    55d8:	ffffffff 	.word	0xffffffff
    55dc:	ffffffff 	.word	0xffffffff
    55e0:	ffffffff 	.word	0xffffffff
    55e4:	ffffffff 	.word	0xffffffff
    55e8:	ffffffff 	.word	0xffffffff
    55ec:	ffffffff 	.word	0xffffffff
    55f0:	ffffffff 	.word	0xffffffff
    55f4:	ffffffff 	.word	0xffffffff
    55f8:	ffffffff 	.word	0xffffffff
    55fc:	ffffffff 	.word	0xffffffff
    5600:	ffffffff 	.word	0xffffffff
    5604:	ffffffff 	.word	0xffffffff
    5608:	ffffffff 	.word	0xffffffff
    560c:	ffffffff 	.word	0xffffffff
    5610:	ffffffff 	.word	0xffffffff
    5614:	ffffffff 	.word	0xffffffff
    5618:	ffffffff 	.word	0xffffffff
    561c:	ffffffff 	.word	0xffffffff
    5620:	ffffffff 	.word	0xffffffff
    5624:	ffffffff 	.word	0xffffffff
    5628:	ffffffff 	.word	0xffffffff
    562c:	ffffffff 	.word	0xffffffff
    5630:	ffffffff 	.word	0xffffffff
    5634:	ffffffff 	.word	0xffffffff
    5638:	ffffffff 	.word	0xffffffff
    563c:	ffffffff 	.word	0xffffffff
    5640:	ffffffff 	.word	0xffffffff
    5644:	ffffffff 	.word	0xffffffff
    5648:	ffffffff 	.word	0xffffffff
    564c:	ffffffff 	.word	0xffffffff
    5650:	ffffffff 	.word	0xffffffff
    5654:	ffffffff 	.word	0xffffffff
    5658:	ffffffff 	.word	0xffffffff
    565c:	ffffffff 	.word	0xffffffff
    5660:	ffffffff 	.word	0xffffffff
    5664:	ffffffff 	.word	0xffffffff
    5668:	ffffffff 	.word	0xffffffff
    566c:	ffffffff 	.word	0xffffffff
    5670:	ffffffff 	.word	0xffffffff
    5674:	ffffffff 	.word	0xffffffff
    5678:	ffffffff 	.word	0xffffffff
    567c:	ffffffff 	.word	0xffffffff
    5680:	ffffffff 	.word	0xffffffff
    5684:	ffffffff 	.word	0xffffffff
    5688:	ffffffff 	.word	0xffffffff
    568c:	ffffffff 	.word	0xffffffff
    5690:	ffffffff 	.word	0xffffffff
    5694:	ffffffff 	.word	0xffffffff
    5698:	ffffffff 	.word	0xffffffff
    569c:	ffffffff 	.word	0xffffffff
    56a0:	ffffffff 	.word	0xffffffff
    56a4:	ffffffff 	.word	0xffffffff
    56a8:	ffffffff 	.word	0xffffffff
    56ac:	ffffffff 	.word	0xffffffff
    56b0:	ffffffff 	.word	0xffffffff
    56b4:	ffffffff 	.word	0xffffffff
    56b8:	ffffffff 	.word	0xffffffff
    56bc:	ffffffff 	.word	0xffffffff
    56c0:	ffffffff 	.word	0xffffffff
    56c4:	ffffffff 	.word	0xffffffff
    56c8:	ffffffff 	.word	0xffffffff
    56cc:	ffffffff 	.word	0xffffffff
    56d0:	ffffffff 	.word	0xffffffff
    56d4:	ffffffff 	.word	0xffffffff
    56d8:	ffffffff 	.word	0xffffffff
    56dc:	ffffffff 	.word	0xffffffff
    56e0:	ffffffff 	.word	0xffffffff
    56e4:	ffffffff 	.word	0xffffffff
    56e8:	ffffffff 	.word	0xffffffff
    56ec:	ffffffff 	.word	0xffffffff
    56f0:	ffffffff 	.word	0xffffffff
    56f4:	ffffffff 	.word	0xffffffff
    56f8:	ffffffff 	.word	0xffffffff
    56fc:	ffffffff 	.word	0xffffffff
    5700:	ffffffff 	.word	0xffffffff
    5704:	ffffffff 	.word	0xffffffff
    5708:	ffffffff 	.word	0xffffffff
    570c:	ffffffff 	.word	0xffffffff
    5710:	ffffffff 	.word	0xffffffff
    5714:	ffffffff 	.word	0xffffffff
    5718:	ffffffff 	.word	0xffffffff
    571c:	ffffffff 	.word	0xffffffff
    5720:	ffffffff 	.word	0xffffffff
    5724:	ffffffff 	.word	0xffffffff
    5728:	ffffffff 	.word	0xffffffff
    572c:	ffffffff 	.word	0xffffffff
    5730:	ffffffff 	.word	0xffffffff
    5734:	ffffffff 	.word	0xffffffff
    5738:	ffffffff 	.word	0xffffffff
    573c:	ffffffff 	.word	0xffffffff
    5740:	ffffffff 	.word	0xffffffff
    5744:	ffffffff 	.word	0xffffffff
    5748:	ffffffff 	.word	0xffffffff
    574c:	ffffffff 	.word	0xffffffff
    5750:	ffffffff 	.word	0xffffffff
    5754:	ffffffff 	.word	0xffffffff
    5758:	ffffffff 	.word	0xffffffff
    575c:	ffffffff 	.word	0xffffffff
    5760:	ffffffff 	.word	0xffffffff
    5764:	ffffffff 	.word	0xffffffff
    5768:	ffffffff 	.word	0xffffffff
    576c:	ffffffff 	.word	0xffffffff
    5770:	ffffffff 	.word	0xffffffff
    5774:	ffffffff 	.word	0xffffffff
    5778:	ffffffff 	.word	0xffffffff
    577c:	ffffffff 	.word	0xffffffff
    5780:	ffffffff 	.word	0xffffffff
    5784:	ffffffff 	.word	0xffffffff
    5788:	ffffffff 	.word	0xffffffff
    578c:	ffffffff 	.word	0xffffffff
    5790:	ffffffff 	.word	0xffffffff
    5794:	ffffffff 	.word	0xffffffff
    5798:	ffffffff 	.word	0xffffffff
    579c:	ffffffff 	.word	0xffffffff
    57a0:	ffffffff 	.word	0xffffffff
    57a4:	ffffffff 	.word	0xffffffff
    57a8:	ffffffff 	.word	0xffffffff
    57ac:	ffffffff 	.word	0xffffffff
    57b0:	ffffffff 	.word	0xffffffff
    57b4:	ffffffff 	.word	0xffffffff
    57b8:	ffffffff 	.word	0xffffffff
    57bc:	ffffffff 	.word	0xffffffff
    57c0:	ffffffff 	.word	0xffffffff
    57c4:	ffffffff 	.word	0xffffffff
    57c8:	ffffffff 	.word	0xffffffff
    57cc:	ffffffff 	.word	0xffffffff
    57d0:	ffffffff 	.word	0xffffffff
    57d4:	ffffffff 	.word	0xffffffff
    57d8:	ffffffff 	.word	0xffffffff
    57dc:	ffffffff 	.word	0xffffffff
    57e0:	ffffffff 	.word	0xffffffff
    57e4:	ffffffff 	.word	0xffffffff
    57e8:	ffffffff 	.word	0xffffffff
    57ec:	ffffffff 	.word	0xffffffff
    57f0:	ffffffff 	.word	0xffffffff
    57f4:	ffffffff 	.word	0xffffffff
    57f8:	ffffffff 	.word	0xffffffff
    57fc:	ffffffff 	.word	0xffffffff
    5800:	ffffffff 	.word	0xffffffff
    5804:	ffffffff 	.word	0xffffffff
    5808:	ffffffff 	.word	0xffffffff
    580c:	ffffffff 	.word	0xffffffff
    5810:	ffffffff 	.word	0xffffffff
    5814:	ffffffff 	.word	0xffffffff
    5818:	ffffffff 	.word	0xffffffff
    581c:	ffffffff 	.word	0xffffffff
    5820:	ffffffff 	.word	0xffffffff
    5824:	ffffffff 	.word	0xffffffff
    5828:	ffffffff 	.word	0xffffffff
    582c:	ffffffff 	.word	0xffffffff
    5830:	ffffffff 	.word	0xffffffff
    5834:	ffffffff 	.word	0xffffffff
    5838:	ffffffff 	.word	0xffffffff
    583c:	ffffffff 	.word	0xffffffff
    5840:	ffffffff 	.word	0xffffffff
    5844:	ffffffff 	.word	0xffffffff
    5848:	ffffffff 	.word	0xffffffff
    584c:	ffffffff 	.word	0xffffffff
    5850:	ffffffff 	.word	0xffffffff
    5854:	ffffffff 	.word	0xffffffff
    5858:	ffffffff 	.word	0xffffffff
    585c:	ffffffff 	.word	0xffffffff
    5860:	ffffffff 	.word	0xffffffff
    5864:	ffffffff 	.word	0xffffffff
    5868:	ffffffff 	.word	0xffffffff
    586c:	ffffffff 	.word	0xffffffff
    5870:	ffffffff 	.word	0xffffffff
    5874:	ffffffff 	.word	0xffffffff
    5878:	ffffffff 	.word	0xffffffff
    587c:	ffffffff 	.word	0xffffffff
    5880:	ffffffff 	.word	0xffffffff
    5884:	ffffffff 	.word	0xffffffff
    5888:	ffffffff 	.word	0xffffffff
    588c:	ffffffff 	.word	0xffffffff
    5890:	ffffffff 	.word	0xffffffff
    5894:	ffffffff 	.word	0xffffffff
    5898:	ffffffff 	.word	0xffffffff
    589c:	ffffffff 	.word	0xffffffff
    58a0:	ffffffff 	.word	0xffffffff
    58a4:	ffffffff 	.word	0xffffffff
    58a8:	ffffffff 	.word	0xffffffff
    58ac:	ffffffff 	.word	0xffffffff
    58b0:	ffffffff 	.word	0xffffffff
    58b4:	ffffffff 	.word	0xffffffff
    58b8:	ffffffff 	.word	0xffffffff
    58bc:	ffffffff 	.word	0xffffffff
    58c0:	ffffffff 	.word	0xffffffff
    58c4:	ffffffff 	.word	0xffffffff
    58c8:	ffffffff 	.word	0xffffffff
    58cc:	ffffffff 	.word	0xffffffff
    58d0:	ffffffff 	.word	0xffffffff
    58d4:	ffffffff 	.word	0xffffffff
    58d8:	ffffffff 	.word	0xffffffff
    58dc:	ffffffff 	.word	0xffffffff
    58e0:	ffffffff 	.word	0xffffffff
    58e4:	ffffffff 	.word	0xffffffff
    58e8:	ffffffff 	.word	0xffffffff
    58ec:	ffffffff 	.word	0xffffffff
    58f0:	ffffffff 	.word	0xffffffff
    58f4:	ffffffff 	.word	0xffffffff
    58f8:	ffffffff 	.word	0xffffffff
    58fc:	ffffffff 	.word	0xffffffff
    5900:	ffffffff 	.word	0xffffffff
    5904:	ffffffff 	.word	0xffffffff
    5908:	ffffffff 	.word	0xffffffff
    590c:	ffffffff 	.word	0xffffffff
    5910:	ffffffff 	.word	0xffffffff
    5914:	ffffffff 	.word	0xffffffff
    5918:	ffffffff 	.word	0xffffffff
    591c:	ffffffff 	.word	0xffffffff
    5920:	ffffffff 	.word	0xffffffff
    5924:	ffffffff 	.word	0xffffffff
    5928:	ffffffff 	.word	0xffffffff
    592c:	ffffffff 	.word	0xffffffff
    5930:	ffffffff 	.word	0xffffffff
    5934:	ffffffff 	.word	0xffffffff
    5938:	ffffffff 	.word	0xffffffff
    593c:	ffffffff 	.word	0xffffffff
    5940:	ffffffff 	.word	0xffffffff
    5944:	ffffffff 	.word	0xffffffff
    5948:	ffffffff 	.word	0xffffffff
    594c:	ffffffff 	.word	0xffffffff
    5950:	ffffffff 	.word	0xffffffff
    5954:	ffffffff 	.word	0xffffffff
    5958:	ffffffff 	.word	0xffffffff
    595c:	ffffffff 	.word	0xffffffff
    5960:	ffffffff 	.word	0xffffffff
    5964:	ffffffff 	.word	0xffffffff
    5968:	ffffffff 	.word	0xffffffff
    596c:	ffffffff 	.word	0xffffffff
    5970:	ffffffff 	.word	0xffffffff
    5974:	ffffffff 	.word	0xffffffff
    5978:	ffffffff 	.word	0xffffffff
    597c:	ffffffff 	.word	0xffffffff
    5980:	ffffffff 	.word	0xffffffff
    5984:	ffffffff 	.word	0xffffffff
    5988:	ffffffff 	.word	0xffffffff
    598c:	ffffffff 	.word	0xffffffff
    5990:	ffffffff 	.word	0xffffffff
    5994:	ffffffff 	.word	0xffffffff
    5998:	ffffffff 	.word	0xffffffff
    599c:	ffffffff 	.word	0xffffffff
    59a0:	ffffffff 	.word	0xffffffff
    59a4:	ffffffff 	.word	0xffffffff
    59a8:	ffffffff 	.word	0xffffffff
    59ac:	ffffffff 	.word	0xffffffff
    59b0:	ffffffff 	.word	0xffffffff
    59b4:	ffffffff 	.word	0xffffffff
    59b8:	ffffffff 	.word	0xffffffff
    59bc:	ffffffff 	.word	0xffffffff
    59c0:	ffffffff 	.word	0xffffffff
    59c4:	ffffffff 	.word	0xffffffff
    59c8:	ffffffff 	.word	0xffffffff
    59cc:	ffffffff 	.word	0xffffffff
    59d0:	ffffffff 	.word	0xffffffff
    59d4:	ffffffff 	.word	0xffffffff
    59d8:	ffffffff 	.word	0xffffffff
    59dc:	ffffffff 	.word	0xffffffff
    59e0:	ffffffff 	.word	0xffffffff
    59e4:	ffffffff 	.word	0xffffffff
    59e8:	ffffffff 	.word	0xffffffff
    59ec:	ffffffff 	.word	0xffffffff
    59f0:	ffffffff 	.word	0xffffffff
    59f4:	ffffffff 	.word	0xffffffff
    59f8:	ffffffff 	.word	0xffffffff
    59fc:	ffffffff 	.word	0xffffffff
    5a00:	ffffffff 	.word	0xffffffff
    5a04:	ffffffff 	.word	0xffffffff
    5a08:	ffffffff 	.word	0xffffffff
    5a0c:	ffffffff 	.word	0xffffffff
    5a10:	ffffffff 	.word	0xffffffff
    5a14:	ffffffff 	.word	0xffffffff
    5a18:	ffffffff 	.word	0xffffffff
    5a1c:	ffffffff 	.word	0xffffffff
    5a20:	ffffffff 	.word	0xffffffff
    5a24:	ffffffff 	.word	0xffffffff
    5a28:	ffffffff 	.word	0xffffffff
    5a2c:	ffffffff 	.word	0xffffffff
    5a30:	ffffffff 	.word	0xffffffff
    5a34:	ffffffff 	.word	0xffffffff
    5a38:	ffffffff 	.word	0xffffffff
    5a3c:	ffffffff 	.word	0xffffffff
    5a40:	ffffffff 	.word	0xffffffff
    5a44:	ffffffff 	.word	0xffffffff
    5a48:	ffffffff 	.word	0xffffffff
    5a4c:	ffffffff 	.word	0xffffffff
    5a50:	ffffffff 	.word	0xffffffff
    5a54:	ffffffff 	.word	0xffffffff
    5a58:	ffffffff 	.word	0xffffffff
    5a5c:	ffffffff 	.word	0xffffffff
    5a60:	ffffffff 	.word	0xffffffff
    5a64:	ffffffff 	.word	0xffffffff
    5a68:	ffffffff 	.word	0xffffffff
    5a6c:	ffffffff 	.word	0xffffffff
    5a70:	ffffffff 	.word	0xffffffff
    5a74:	ffffffff 	.word	0xffffffff
    5a78:	ffffffff 	.word	0xffffffff
    5a7c:	ffffffff 	.word	0xffffffff
    5a80:	ffffffff 	.word	0xffffffff
    5a84:	ffffffff 	.word	0xffffffff
    5a88:	ffffffff 	.word	0xffffffff
    5a8c:	ffffffff 	.word	0xffffffff
    5a90:	ffffffff 	.word	0xffffffff
    5a94:	ffffffff 	.word	0xffffffff
    5a98:	ffffffff 	.word	0xffffffff
    5a9c:	ffffffff 	.word	0xffffffff
    5aa0:	ffffffff 	.word	0xffffffff
    5aa4:	ffffffff 	.word	0xffffffff
    5aa8:	ffffffff 	.word	0xffffffff
    5aac:	ffffffff 	.word	0xffffffff
    5ab0:	ffffffff 	.word	0xffffffff
    5ab4:	ffffffff 	.word	0xffffffff
    5ab8:	ffffffff 	.word	0xffffffff
    5abc:	ffffffff 	.word	0xffffffff
    5ac0:	ffffffff 	.word	0xffffffff
    5ac4:	ffffffff 	.word	0xffffffff
    5ac8:	ffffffff 	.word	0xffffffff
    5acc:	ffffffff 	.word	0xffffffff
    5ad0:	ffffffff 	.word	0xffffffff
    5ad4:	ffffffff 	.word	0xffffffff
    5ad8:	ffffffff 	.word	0xffffffff
    5adc:	ffffffff 	.word	0xffffffff
    5ae0:	ffffffff 	.word	0xffffffff
    5ae4:	ffffffff 	.word	0xffffffff
    5ae8:	ffffffff 	.word	0xffffffff
    5aec:	ffffffff 	.word	0xffffffff
    5af0:	ffffffff 	.word	0xffffffff
    5af4:	ffffffff 	.word	0xffffffff
    5af8:	ffffffff 	.word	0xffffffff
    5afc:	ffffffff 	.word	0xffffffff
    5b00:	ffffffff 	.word	0xffffffff
    5b04:	ffffffff 	.word	0xffffffff
    5b08:	ffffffff 	.word	0xffffffff
    5b0c:	ffffffff 	.word	0xffffffff
    5b10:	ffffffff 	.word	0xffffffff
    5b14:	ffffffff 	.word	0xffffffff
    5b18:	ffffffff 	.word	0xffffffff
    5b1c:	ffffffff 	.word	0xffffffff
    5b20:	ffffffff 	.word	0xffffffff
    5b24:	ffffffff 	.word	0xffffffff
    5b28:	ffffffff 	.word	0xffffffff
    5b2c:	ffffffff 	.word	0xffffffff
    5b30:	ffffffff 	.word	0xffffffff
    5b34:	ffffffff 	.word	0xffffffff
    5b38:	ffffffff 	.word	0xffffffff
    5b3c:	ffffffff 	.word	0xffffffff
    5b40:	ffffffff 	.word	0xffffffff
    5b44:	ffffffff 	.word	0xffffffff
    5b48:	ffffffff 	.word	0xffffffff
    5b4c:	ffffffff 	.word	0xffffffff
    5b50:	ffffffff 	.word	0xffffffff
    5b54:	ffffffff 	.word	0xffffffff
    5b58:	ffffffff 	.word	0xffffffff
    5b5c:	ffffffff 	.word	0xffffffff
    5b60:	ffffffff 	.word	0xffffffff
    5b64:	ffffffff 	.word	0xffffffff
    5b68:	ffffffff 	.word	0xffffffff
    5b6c:	ffffffff 	.word	0xffffffff
    5b70:	ffffffff 	.word	0xffffffff
    5b74:	ffffffff 	.word	0xffffffff
    5b78:	ffffffff 	.word	0xffffffff
    5b7c:	ffffffff 	.word	0xffffffff
    5b80:	ffffffff 	.word	0xffffffff
    5b84:	ffffffff 	.word	0xffffffff
    5b88:	ffffffff 	.word	0xffffffff
    5b8c:	ffffffff 	.word	0xffffffff
    5b90:	ffffffff 	.word	0xffffffff
    5b94:	ffffffff 	.word	0xffffffff
    5b98:	ffffffff 	.word	0xffffffff
    5b9c:	ffffffff 	.word	0xffffffff
    5ba0:	ffffffff 	.word	0xffffffff
    5ba4:	ffffffff 	.word	0xffffffff
    5ba8:	ffffffff 	.word	0xffffffff
    5bac:	ffffffff 	.word	0xffffffff
    5bb0:	ffffffff 	.word	0xffffffff
    5bb4:	ffffffff 	.word	0xffffffff
    5bb8:	ffffffff 	.word	0xffffffff
    5bbc:	ffffffff 	.word	0xffffffff
    5bc0:	ffffffff 	.word	0xffffffff
    5bc4:	ffffffff 	.word	0xffffffff
    5bc8:	ffffffff 	.word	0xffffffff
    5bcc:	ffffffff 	.word	0xffffffff
    5bd0:	ffffffff 	.word	0xffffffff
    5bd4:	ffffffff 	.word	0xffffffff
    5bd8:	ffffffff 	.word	0xffffffff
    5bdc:	ffffffff 	.word	0xffffffff
    5be0:	ffffffff 	.word	0xffffffff
    5be4:	ffffffff 	.word	0xffffffff
    5be8:	ffffffff 	.word	0xffffffff
    5bec:	ffffffff 	.word	0xffffffff
    5bf0:	ffffffff 	.word	0xffffffff
    5bf4:	ffffffff 	.word	0xffffffff
    5bf8:	ffffffff 	.word	0xffffffff
    5bfc:	ffffffff 	.word	0xffffffff
    5c00:	ffffffff 	.word	0xffffffff
    5c04:	ffffffff 	.word	0xffffffff
    5c08:	ffffffff 	.word	0xffffffff
    5c0c:	ffffffff 	.word	0xffffffff
    5c10:	ffffffff 	.word	0xffffffff
    5c14:	ffffffff 	.word	0xffffffff
    5c18:	ffffffff 	.word	0xffffffff
    5c1c:	ffffffff 	.word	0xffffffff
    5c20:	ffffffff 	.word	0xffffffff
    5c24:	ffffffff 	.word	0xffffffff
    5c28:	ffffffff 	.word	0xffffffff
    5c2c:	ffffffff 	.word	0xffffffff
    5c30:	ffffffff 	.word	0xffffffff
    5c34:	ffffffff 	.word	0xffffffff
    5c38:	ffffffff 	.word	0xffffffff
    5c3c:	ffffffff 	.word	0xffffffff
    5c40:	ffffffff 	.word	0xffffffff
    5c44:	ffffffff 	.word	0xffffffff
    5c48:	ffffffff 	.word	0xffffffff
    5c4c:	ffffffff 	.word	0xffffffff
    5c50:	ffffffff 	.word	0xffffffff
    5c54:	ffffffff 	.word	0xffffffff
    5c58:	ffffffff 	.word	0xffffffff
    5c5c:	ffffffff 	.word	0xffffffff
    5c60:	ffffffff 	.word	0xffffffff
    5c64:	ffffffff 	.word	0xffffffff
    5c68:	ffffffff 	.word	0xffffffff
    5c6c:	ffffffff 	.word	0xffffffff
    5c70:	ffffffff 	.word	0xffffffff
    5c74:	ffffffff 	.word	0xffffffff
    5c78:	ffffffff 	.word	0xffffffff
    5c7c:	ffffffff 	.word	0xffffffff
    5c80:	ffffffff 	.word	0xffffffff
    5c84:	ffffffff 	.word	0xffffffff
    5c88:	ffffffff 	.word	0xffffffff
    5c8c:	ffffffff 	.word	0xffffffff
    5c90:	ffffffff 	.word	0xffffffff
    5c94:	ffffffff 	.word	0xffffffff
    5c98:	ffffffff 	.word	0xffffffff
    5c9c:	ffffffff 	.word	0xffffffff
    5ca0:	ffffffff 	.word	0xffffffff
    5ca4:	ffffffff 	.word	0xffffffff
    5ca8:	ffffffff 	.word	0xffffffff
    5cac:	ffffffff 	.word	0xffffffff
    5cb0:	ffffffff 	.word	0xffffffff
    5cb4:	ffffffff 	.word	0xffffffff
    5cb8:	ffffffff 	.word	0xffffffff
    5cbc:	ffffffff 	.word	0xffffffff
    5cc0:	ffffffff 	.word	0xffffffff
    5cc4:	ffffffff 	.word	0xffffffff
    5cc8:	ffffffff 	.word	0xffffffff
    5ccc:	ffffffff 	.word	0xffffffff
    5cd0:	ffffffff 	.word	0xffffffff
    5cd4:	ffffffff 	.word	0xffffffff
    5cd8:	ffffffff 	.word	0xffffffff
    5cdc:	ffffffff 	.word	0xffffffff
    5ce0:	ffffffff 	.word	0xffffffff
    5ce4:	ffffffff 	.word	0xffffffff
    5ce8:	ffffffff 	.word	0xffffffff
    5cec:	ffffffff 	.word	0xffffffff
    5cf0:	ffffffff 	.word	0xffffffff
    5cf4:	ffffffff 	.word	0xffffffff
    5cf8:	ffffffff 	.word	0xffffffff
    5cfc:	ffffffff 	.word	0xffffffff
    5d00:	ffffffff 	.word	0xffffffff
    5d04:	ffffffff 	.word	0xffffffff
    5d08:	ffffffff 	.word	0xffffffff
    5d0c:	ffffffff 	.word	0xffffffff
    5d10:	ffffffff 	.word	0xffffffff
    5d14:	ffffffff 	.word	0xffffffff
    5d18:	ffffffff 	.word	0xffffffff
    5d1c:	ffffffff 	.word	0xffffffff
    5d20:	ffffffff 	.word	0xffffffff
    5d24:	ffffffff 	.word	0xffffffff
    5d28:	ffffffff 	.word	0xffffffff
    5d2c:	ffffffff 	.word	0xffffffff
    5d30:	ffffffff 	.word	0xffffffff
    5d34:	ffffffff 	.word	0xffffffff
    5d38:	ffffffff 	.word	0xffffffff
    5d3c:	ffffffff 	.word	0xffffffff
    5d40:	ffffffff 	.word	0xffffffff
    5d44:	ffffffff 	.word	0xffffffff
    5d48:	ffffffff 	.word	0xffffffff
    5d4c:	ffffffff 	.word	0xffffffff
    5d50:	ffffffff 	.word	0xffffffff
    5d54:	ffffffff 	.word	0xffffffff
    5d58:	ffffffff 	.word	0xffffffff
    5d5c:	ffffffff 	.word	0xffffffff
    5d60:	ffffffff 	.word	0xffffffff
    5d64:	ffffffff 	.word	0xffffffff
    5d68:	ffffffff 	.word	0xffffffff
    5d6c:	ffffffff 	.word	0xffffffff
    5d70:	ffffffff 	.word	0xffffffff
    5d74:	ffffffff 	.word	0xffffffff
    5d78:	ffffffff 	.word	0xffffffff
    5d7c:	ffffffff 	.word	0xffffffff
    5d80:	ffffffff 	.word	0xffffffff
    5d84:	ffffffff 	.word	0xffffffff
    5d88:	ffffffff 	.word	0xffffffff
    5d8c:	ffffffff 	.word	0xffffffff
    5d90:	ffffffff 	.word	0xffffffff
    5d94:	ffffffff 	.word	0xffffffff
    5d98:	ffffffff 	.word	0xffffffff
    5d9c:	ffffffff 	.word	0xffffffff
    5da0:	ffffffff 	.word	0xffffffff
    5da4:	ffffffff 	.word	0xffffffff
    5da8:	ffffffff 	.word	0xffffffff
    5dac:	ffffffff 	.word	0xffffffff
    5db0:	ffffffff 	.word	0xffffffff
    5db4:	ffffffff 	.word	0xffffffff
    5db8:	ffffffff 	.word	0xffffffff
    5dbc:	ffffffff 	.word	0xffffffff
    5dc0:	ffffffff 	.word	0xffffffff
    5dc4:	ffffffff 	.word	0xffffffff
    5dc8:	ffffffff 	.word	0xffffffff
    5dcc:	ffffffff 	.word	0xffffffff
    5dd0:	ffffffff 	.word	0xffffffff
    5dd4:	ffffffff 	.word	0xffffffff
    5dd8:	ffffffff 	.word	0xffffffff
    5ddc:	ffffffff 	.word	0xffffffff
    5de0:	ffffffff 	.word	0xffffffff
    5de4:	ffffffff 	.word	0xffffffff
    5de8:	ffffffff 	.word	0xffffffff
    5dec:	ffffffff 	.word	0xffffffff
    5df0:	ffffffff 	.word	0xffffffff
    5df4:	ffffffff 	.word	0xffffffff
    5df8:	ffffffff 	.word	0xffffffff
    5dfc:	ffffffff 	.word	0xffffffff
    5e00:	ffffffff 	.word	0xffffffff
    5e04:	ffffffff 	.word	0xffffffff
    5e08:	ffffffff 	.word	0xffffffff
    5e0c:	ffffffff 	.word	0xffffffff
    5e10:	ffffffff 	.word	0xffffffff
    5e14:	ffffffff 	.word	0xffffffff
    5e18:	ffffffff 	.word	0xffffffff
    5e1c:	ffffffff 	.word	0xffffffff
    5e20:	ffffffff 	.word	0xffffffff
    5e24:	ffffffff 	.word	0xffffffff
    5e28:	ffffffff 	.word	0xffffffff
    5e2c:	ffffffff 	.word	0xffffffff
    5e30:	ffffffff 	.word	0xffffffff
    5e34:	ffffffff 	.word	0xffffffff
    5e38:	ffffffff 	.word	0xffffffff
    5e3c:	ffffffff 	.word	0xffffffff
    5e40:	ffffffff 	.word	0xffffffff
    5e44:	ffffffff 	.word	0xffffffff
    5e48:	ffffffff 	.word	0xffffffff
    5e4c:	ffffffff 	.word	0xffffffff
    5e50:	ffffffff 	.word	0xffffffff
    5e54:	ffffffff 	.word	0xffffffff
    5e58:	ffffffff 	.word	0xffffffff
    5e5c:	ffffffff 	.word	0xffffffff
    5e60:	ffffffff 	.word	0xffffffff
    5e64:	ffffffff 	.word	0xffffffff
    5e68:	ffffffff 	.word	0xffffffff
    5e6c:	ffffffff 	.word	0xffffffff
    5e70:	ffffffff 	.word	0xffffffff
    5e74:	ffffffff 	.word	0xffffffff
    5e78:	ffffffff 	.word	0xffffffff
    5e7c:	ffffffff 	.word	0xffffffff
    5e80:	ffffffff 	.word	0xffffffff
    5e84:	ffffffff 	.word	0xffffffff
    5e88:	ffffffff 	.word	0xffffffff
    5e8c:	ffffffff 	.word	0xffffffff
    5e90:	ffffffff 	.word	0xffffffff
    5e94:	ffffffff 	.word	0xffffffff
    5e98:	ffffffff 	.word	0xffffffff
    5e9c:	ffffffff 	.word	0xffffffff
    5ea0:	ffffffff 	.word	0xffffffff
    5ea4:	ffffffff 	.word	0xffffffff
    5ea8:	ffffffff 	.word	0xffffffff
    5eac:	ffffffff 	.word	0xffffffff
    5eb0:	ffffffff 	.word	0xffffffff
    5eb4:	ffffffff 	.word	0xffffffff
    5eb8:	ffffffff 	.word	0xffffffff
    5ebc:	ffffffff 	.word	0xffffffff
    5ec0:	ffffffff 	.word	0xffffffff
    5ec4:	ffffffff 	.word	0xffffffff
    5ec8:	ffffffff 	.word	0xffffffff
    5ecc:	ffffffff 	.word	0xffffffff
    5ed0:	ffffffff 	.word	0xffffffff
    5ed4:	ffffffff 	.word	0xffffffff
    5ed8:	ffffffff 	.word	0xffffffff
    5edc:	ffffffff 	.word	0xffffffff
    5ee0:	ffffffff 	.word	0xffffffff
    5ee4:	ffffffff 	.word	0xffffffff
    5ee8:	ffffffff 	.word	0xffffffff
    5eec:	ffffffff 	.word	0xffffffff
    5ef0:	ffffffff 	.word	0xffffffff
    5ef4:	ffffffff 	.word	0xffffffff
    5ef8:	ffffffff 	.word	0xffffffff
    5efc:	ffffffff 	.word	0xffffffff
    5f00:	ffffffff 	.word	0xffffffff
    5f04:	ffffffff 	.word	0xffffffff
    5f08:	ffffffff 	.word	0xffffffff
    5f0c:	ffffffff 	.word	0xffffffff
    5f10:	ffffffff 	.word	0xffffffff
    5f14:	ffffffff 	.word	0xffffffff
    5f18:	ffffffff 	.word	0xffffffff
    5f1c:	ffffffff 	.word	0xffffffff
    5f20:	ffffffff 	.word	0xffffffff
    5f24:	ffffffff 	.word	0xffffffff
    5f28:	ffffffff 	.word	0xffffffff
    5f2c:	ffffffff 	.word	0xffffffff
    5f30:	ffffffff 	.word	0xffffffff
    5f34:	ffffffff 	.word	0xffffffff
    5f38:	ffffffff 	.word	0xffffffff
    5f3c:	ffffffff 	.word	0xffffffff
    5f40:	ffffffff 	.word	0xffffffff
    5f44:	ffffffff 	.word	0xffffffff
    5f48:	ffffffff 	.word	0xffffffff
    5f4c:	ffffffff 	.word	0xffffffff
    5f50:	ffffffff 	.word	0xffffffff
    5f54:	ffffffff 	.word	0xffffffff
    5f58:	ffffffff 	.word	0xffffffff
    5f5c:	ffffffff 	.word	0xffffffff
    5f60:	ffffffff 	.word	0xffffffff
    5f64:	ffffffff 	.word	0xffffffff
    5f68:	ffffffff 	.word	0xffffffff
    5f6c:	ffffffff 	.word	0xffffffff
    5f70:	ffffffff 	.word	0xffffffff
    5f74:	ffffffff 	.word	0xffffffff
    5f78:	ffffffff 	.word	0xffffffff
    5f7c:	ffffffff 	.word	0xffffffff
    5f80:	ffffffff 	.word	0xffffffff
    5f84:	ffffffff 	.word	0xffffffff
    5f88:	ffffffff 	.word	0xffffffff
    5f8c:	ffffffff 	.word	0xffffffff
    5f90:	ffffffff 	.word	0xffffffff
    5f94:	ffffffff 	.word	0xffffffff
    5f98:	ffffffff 	.word	0xffffffff
    5f9c:	ffffffff 	.word	0xffffffff
    5fa0:	ffffffff 	.word	0xffffffff
    5fa4:	ffffffff 	.word	0xffffffff
    5fa8:	ffffffff 	.word	0xffffffff
    5fac:	ffffffff 	.word	0xffffffff
    5fb0:	ffffffff 	.word	0xffffffff
    5fb4:	ffffffff 	.word	0xffffffff
    5fb8:	ffffffff 	.word	0xffffffff
    5fbc:	ffffffff 	.word	0xffffffff
    5fc0:	ffffffff 	.word	0xffffffff
    5fc4:	ffffffff 	.word	0xffffffff
    5fc8:	ffffffff 	.word	0xffffffff
    5fcc:	ffffffff 	.word	0xffffffff
    5fd0:	ffffffff 	.word	0xffffffff
    5fd4:	ffffffff 	.word	0xffffffff
    5fd8:	ffffffff 	.word	0xffffffff
    5fdc:	ffffffff 	.word	0xffffffff
    5fe0:	ffffffff 	.word	0xffffffff
    5fe4:	ffffffff 	.word	0xffffffff
    5fe8:	ffffffff 	.word	0xffffffff
    5fec:	ffffffff 	.word	0xffffffff
    5ff0:	ffffffff 	.word	0xffffffff
    5ff4:	ffffffff 	.word	0xffffffff
    5ff8:	ffffffff 	.word	0xffffffff
    5ffc:	ffffffff 	.word	0xffffffff
    6000:	ffffffff 	.word	0xffffffff
    6004:	ffffffff 	.word	0xffffffff
    6008:	ffffffff 	.word	0xffffffff
    600c:	ffffffff 	.word	0xffffffff
    6010:	ffffffff 	.word	0xffffffff
    6014:	ffffffff 	.word	0xffffffff
    6018:	ffffffff 	.word	0xffffffff
    601c:	ffffffff 	.word	0xffffffff
    6020:	ffffffff 	.word	0xffffffff
    6024:	ffffffff 	.word	0xffffffff
    6028:	ffffffff 	.word	0xffffffff
    602c:	ffffffff 	.word	0xffffffff
    6030:	ffffffff 	.word	0xffffffff
    6034:	ffffffff 	.word	0xffffffff
    6038:	ffffffff 	.word	0xffffffff
    603c:	ffffffff 	.word	0xffffffff
    6040:	ffffffff 	.word	0xffffffff
    6044:	ffffffff 	.word	0xffffffff
    6048:	ffffffff 	.word	0xffffffff
    604c:	ffffffff 	.word	0xffffffff
    6050:	ffffffff 	.word	0xffffffff
    6054:	ffffffff 	.word	0xffffffff
    6058:	ffffffff 	.word	0xffffffff
    605c:	ffffffff 	.word	0xffffffff
    6060:	ffffffff 	.word	0xffffffff
    6064:	ffffffff 	.word	0xffffffff
    6068:	ffffffff 	.word	0xffffffff
    606c:	ffffffff 	.word	0xffffffff
    6070:	ffffffff 	.word	0xffffffff
    6074:	ffffffff 	.word	0xffffffff
    6078:	ffffffff 	.word	0xffffffff
    607c:	ffffffff 	.word	0xffffffff
    6080:	ffffffff 	.word	0xffffffff
    6084:	ffffffff 	.word	0xffffffff
    6088:	ffffffff 	.word	0xffffffff
    608c:	ffffffff 	.word	0xffffffff
    6090:	ffffffff 	.word	0xffffffff
    6094:	ffffffff 	.word	0xffffffff
    6098:	ffffffff 	.word	0xffffffff
    609c:	ffffffff 	.word	0xffffffff
    60a0:	ffffffff 	.word	0xffffffff
    60a4:	ffffffff 	.word	0xffffffff
    60a8:	ffffffff 	.word	0xffffffff
    60ac:	ffffffff 	.word	0xffffffff
    60b0:	ffffffff 	.word	0xffffffff
    60b4:	ffffffff 	.word	0xffffffff
    60b8:	ffffffff 	.word	0xffffffff
    60bc:	ffffffff 	.word	0xffffffff
    60c0:	ffffffff 	.word	0xffffffff
    60c4:	ffffffff 	.word	0xffffffff
    60c8:	ffffffff 	.word	0xffffffff
    60cc:	ffffffff 	.word	0xffffffff
    60d0:	ffffffff 	.word	0xffffffff
    60d4:	ffffffff 	.word	0xffffffff
    60d8:	ffffffff 	.word	0xffffffff
    60dc:	ffffffff 	.word	0xffffffff
    60e0:	ffffffff 	.word	0xffffffff
    60e4:	ffffffff 	.word	0xffffffff
    60e8:	ffffffff 	.word	0xffffffff
    60ec:	ffffffff 	.word	0xffffffff
    60f0:	ffffffff 	.word	0xffffffff
    60f4:	ffffffff 	.word	0xffffffff
    60f8:	ffffffff 	.word	0xffffffff
    60fc:	ffffffff 	.word	0xffffffff

00006100 <pds_ff_PDS_ROUTE_TABLE_HOP_ID>:
    6100:	00200009 20002080 00000000 00000001     .. .. . ........

00006110 <pds_ff_PDS_ROUTE_TABLE_COORD_ID>:
    6110:	00800008 20002104 00000000 00000001     .....!. ........

00006120 <pds_ff_PDS_DEVICE_TABLE_SLEEP_ID>:
    6120:	00640007 200020a0 00000000 00000001     ..d.. . ........

00006130 <pds_ff_PDS_DEVICE_TABLE_NONSLEEP_ID>:
    6130:	00500006 200025d8 00000000 00000001     ..P..%. ........

00006140 <pds_ff_PDS_CHANNEL_UPDATE_ID>:
    6140:	00010005 2000008f 00000000 00000000     ....... ........

00006150 <pds_ff_PDS_BLOOM_VALUE_ID>:
    6150:	00080004 200028f0 00000000 00000000     .....(. ........

00006160 <pds_ff_PDS_SECURITY_COUNTER_ID>:
    6160:	00040003 20002914 00000000 00000000     .....). ........

00006170 <pds_ff_PDS_SECURITY_KEY_ID>:
    6170:	00100002 20000078 00000000 00000000     ....x.. ........

00006180 <pds_ff_PDS_GENERAL_INFO_ID>:
    6180:	00180001 20001db0 0000a8b1 00000000     ....... ........

00006190 <MiWiFullParamsDirDescr>:
    6190:	0001664c 40010008                       Lf.....@

00006198 <__do_global_dtors_aux>:
    6198:	b510      	push	{r4, lr}
    619a:	4c06      	ldr	r4, [pc, #24]	; (61b4 <__do_global_dtors_aux+0x1c>)
    619c:	7823      	ldrb	r3, [r4, #0]
    619e:	2b00      	cmp	r3, #0
    61a0:	d107      	bne.n	61b2 <__do_global_dtors_aux+0x1a>
    61a2:	4b05      	ldr	r3, [pc, #20]	; (61b8 <__do_global_dtors_aux+0x20>)
    61a4:	2b00      	cmp	r3, #0
    61a6:	d002      	beq.n	61ae <__do_global_dtors_aux+0x16>
    61a8:	4804      	ldr	r0, [pc, #16]	; (61bc <__do_global_dtors_aux+0x24>)
    61aa:	e000      	b.n	61ae <__do_global_dtors_aux+0x16>
    61ac:	bf00      	nop
    61ae:	2301      	movs	r3, #1
    61b0:	7023      	strb	r3, [r4, #0]
    61b2:	bd10      	pop	{r4, pc}
    61b4:	20000108 	.word	0x20000108
    61b8:	00000000 	.word	0x00000000
    61bc:	000168c0 	.word	0x000168c0

000061c0 <frame_dummy>:
    61c0:	4b08      	ldr	r3, [pc, #32]	; (61e4 <frame_dummy+0x24>)
    61c2:	b510      	push	{r4, lr}
    61c4:	2b00      	cmp	r3, #0
    61c6:	d003      	beq.n	61d0 <frame_dummy+0x10>
    61c8:	4907      	ldr	r1, [pc, #28]	; (61e8 <frame_dummy+0x28>)
    61ca:	4808      	ldr	r0, [pc, #32]	; (61ec <frame_dummy+0x2c>)
    61cc:	e000      	b.n	61d0 <frame_dummy+0x10>
    61ce:	bf00      	nop
    61d0:	4807      	ldr	r0, [pc, #28]	; (61f0 <frame_dummy+0x30>)
    61d2:	6803      	ldr	r3, [r0, #0]
    61d4:	2b00      	cmp	r3, #0
    61d6:	d100      	bne.n	61da <frame_dummy+0x1a>
    61d8:	bd10      	pop	{r4, pc}
    61da:	4b06      	ldr	r3, [pc, #24]	; (61f4 <frame_dummy+0x34>)
    61dc:	2b00      	cmp	r3, #0
    61de:	d0fb      	beq.n	61d8 <frame_dummy+0x18>
    61e0:	4798      	blx	r3
    61e2:	e7f9      	b.n	61d8 <frame_dummy+0x18>
    61e4:	00000000 	.word	0x00000000
    61e8:	2000010c 	.word	0x2000010c
    61ec:	000168c0 	.word	0x000168c0
    61f0:	000168c0 	.word	0x000168c0
    61f4:	00000000 	.word	0x00000000

000061f8 <appDataInd>:
{
	AppPacket_t *msg = (AppPacket_t *)ind->payload;
	
	// Received data!
	// Your code Here.
}
    61f8:	4770      	bx	lr
    61fa:	Address 0x000061fa is out of bounds.


000061fc <appDataConf>:
	else
	{

	}

	if (APP_STATE_WAIT_CONF == appState)
    61fc:	4b04      	ldr	r3, [pc, #16]	; (6210 <appDataConf+0x14>)
    61fe:	781b      	ldrb	r3, [r3, #0]
    6200:	2b09      	cmp	r3, #9
    6202:	d000      	beq.n	6206 <appDataConf+0xa>
	{
		appState = APP_STATE_SENDING_DONE;
	}
}
    6204:	4770      	bx	lr
		appState = APP_STATE_SENDING_DONE;
    6206:	220a      	movs	r2, #10
    6208:	4b01      	ldr	r3, [pc, #4]	; (6210 <appDataConf+0x14>)
    620a:	701a      	strb	r2, [r3, #0]
}
    620c:	e7fa      	b.n	6204 <appDataConf+0x8>
    620e:	46c0      	nop			; (mov r8, r8)
    6210:	2000012f 	.word	0x2000012f

00006214 <ReconnectionIndication>:
}

#if defined(ENABLE_NETWORK_FREEZER)
static void ReconnectionIndication (miwi_status_t status)
{
	if(SUCCESS == status)
    6214:	2800      	cmp	r0, #0
    6216:	d003      	beq.n	6220 <ReconnectionIndication+0xc>
	{
		appState = APP_STATE_RECONNECT_SUCCESS;
	}
	else
	{
		appState = APP_STATE_RECONNECT_FAILURE;
    6218:	2207      	movs	r2, #7
    621a:	4b03      	ldr	r3, [pc, #12]	; (6228 <ReconnectionIndication+0x14>)
    621c:	701a      	strb	r2, [r3, #0]
	}
}
    621e:	4770      	bx	lr
		appState = APP_STATE_RECONNECT_SUCCESS;
    6220:	2206      	movs	r2, #6
    6222:	4b01      	ldr	r3, [pc, #4]	; (6228 <ReconnectionIndication+0x14>)
    6224:	701a      	strb	r2, [r3, #0]
    6226:	e7fa      	b.n	621e <ReconnectionIndication+0xa>
    6228:	2000012f 	.word	0x2000012f

0000622c <Connection_Confirm>:
}


static void Connection_Confirm(miwi_status_t status)
{
	if (SUCCESS == status)
    622c:	2800      	cmp	r0, #0
    622e:	d003      	beq.n	6238 <Connection_Confirm+0xc>
	{
        appState = APP_STATE_SEND;
	}
	else
	{
        appState = APP_STATE_CONNECT_NETWORK;
    6230:	2202      	movs	r2, #2
    6232:	4b03      	ldr	r3, [pc, #12]	; (6240 <Connection_Confirm+0x14>)
    6234:	701a      	strb	r2, [r3, #0]
	}
}
    6236:	4770      	bx	lr
        appState = APP_STATE_SEND;
    6238:	2208      	movs	r2, #8
    623a:	4b01      	ldr	r3, [pc, #4]	; (6240 <Connection_Confirm+0x14>)
    623c:	701a      	strb	r2, [r3, #0]
    623e:	e7fa      	b.n	6236 <Connection_Confirm+0xa>
    6240:	2000012f 	.word	0x2000012f

00006244 <searchConfim>:
{
    6244:	b530      	push	{r4, r5, lr}
    6246:	b083      	sub	sp, #12
	if (foundScanResults)
    6248:	2800      	cmp	r0, #0
    624a:	d024      	beq.n	6296 <searchConfim+0x52>
    624c:	000a      	movs	r2, r1
    624e:	3209      	adds	r2, #9
    6250:	2300      	movs	r3, #0
    6252:	25ff      	movs	r5, #255	; 0xff
    6254:	e004      	b.n	6260 <searchConfim+0x1c>
		for (uint8_t loopindex = 0; loopindex < foundScanResults; loopindex++)
    6256:	3301      	adds	r3, #1
    6258:	b2db      	uxtb	r3, r3
    625a:	3212      	adds	r2, #18
    625c:	4298      	cmp	r0, r3
    625e:	d004      	beq.n	626a <searchConfim+0x26>
			if (searchConfRes->beaconList[loopindex].connectionPermit)
    6260:	7814      	ldrb	r4, [r2, #0]
    6262:	2c00      	cmp	r4, #0
    6264:	d0f7      	beq.n	6256 <searchConfim+0x12>
    6266:	001d      	movs	r5, r3
    6268:	e7f5      	b.n	6256 <searchConfim+0x12>
		if (selectedParentIndex != 0xFF)
    626a:	2dff      	cmp	r5, #255	; 0xff
    626c:	d00f      	beq.n	628e <searchConfim+0x4a>
			SHORT_ADDR_LEN, (uint8_t*)&searchConfRes->beaconList[selectedParentIndex].shortAddress, CAPABILITY_INFO, Connection_Confirm);
    626e:	00eb      	lsls	r3, r5, #3
    6270:	195a      	adds	r2, r3, r5
    6272:	0052      	lsls	r2, r2, #1
    6274:	3210      	adds	r2, #16
    6276:	188a      	adds	r2, r1, r2
			MiApp_EstablishConnection(searchConfRes->beaconList[selectedParentIndex].logicalChannel,
    6278:	195d      	adds	r5, r3, r5
    627a:	006d      	lsls	r5, r5, #1
    627c:	1949      	adds	r1, r1, r5
    627e:	7b08      	ldrb	r0, [r1, #12]
    6280:	4b07      	ldr	r3, [pc, #28]	; (62a0 <searchConfim+0x5c>)
    6282:	9300      	str	r3, [sp, #0]
    6284:	2305      	movs	r3, #5
    6286:	2102      	movs	r1, #2
    6288:	4c06      	ldr	r4, [pc, #24]	; (62a4 <searchConfim+0x60>)
    628a:	47a0      	blx	r4
			return;
    628c:	e006      	b.n	629c <searchConfim+0x58>
		appState = APP_STATE_CONNECT_NETWORK;
    628e:	2202      	movs	r2, #2
    6290:	4b05      	ldr	r3, [pc, #20]	; (62a8 <searchConfim+0x64>)
    6292:	701a      	strb	r2, [r3, #0]
    6294:	e002      	b.n	629c <searchConfim+0x58>
		appState = APP_STATE_CONNECT_NETWORK;
    6296:	2202      	movs	r2, #2
    6298:	4b03      	ldr	r3, [pc, #12]	; (62a8 <searchConfim+0x64>)
    629a:	701a      	strb	r2, [r3, #0]
}
    629c:	b003      	add	sp, #12
    629e:	bd30      	pop	{r4, r5, pc}
    62a0:	0000622d 	.word	0x0000622d
    62a4:	00010a11 	.word	0x00010a11
    62a8:	2000012f 	.word	0x2000012f

000062ac <appDataSendingTimerHandler>:
{
    62ac:	b510      	push	{r4, lr}
	if ((APP_STATE_WAIT_SEND_TIMER == appState) || (APP_STATE_PREPARE_TO_SLEEP == appState))
    62ae:	4b07      	ldr	r3, [pc, #28]	; (62cc <appDataSendingTimerHandler+0x20>)
    62b0:	781b      	ldrb	r3, [r3, #0]
    62b2:	3b0b      	subs	r3, #11
    62b4:	22fd      	movs	r2, #253	; 0xfd
    62b6:	4213      	tst	r3, r2
    62b8:	d003      	beq.n	62c2 <appDataSendingTimerHandler+0x16>
		SYS_TimerStart(&appDataSendingTimer);
    62ba:	4805      	ldr	r0, [pc, #20]	; (62d0 <appDataSendingTimerHandler+0x24>)
    62bc:	4b05      	ldr	r3, [pc, #20]	; (62d4 <appDataSendingTimerHandler+0x28>)
    62be:	4798      	blx	r3
}
    62c0:	e002      	b.n	62c8 <appDataSendingTimerHandler+0x1c>
		appState = APP_STATE_SEND;
    62c2:	3af5      	subs	r2, #245	; 0xf5
    62c4:	4b01      	ldr	r3, [pc, #4]	; (62cc <appDataSendingTimerHandler+0x20>)
    62c6:	701a      	strb	r2, [r3, #0]
}
    62c8:	bd10      	pop	{r4, pc}
    62ca:	46c0      	nop			; (mov r8, r8)
    62cc:	2000012f 	.word	0x2000012f
    62d0:	20001d28 	.word	0x20001d28
    62d4:	0000bfc5 	.word	0x0000bfc5

000062d8 <appLinkFailureCallback>:
#endif
	APP_TaskHandler();
}

void appLinkFailureCallback(void)
{
    62d8:	b510      	push	{r4, lr}
	/* On link failure initiate search to establish connection */
	appState = APP_STATE_CONNECT_NETWORK;
    62da:	2202      	movs	r2, #2
    62dc:	4b02      	ldr	r3, [pc, #8]	; (62e8 <appLinkFailureCallback+0x10>)
    62de:	701a      	strb	r2, [r3, #0]
	SYS_TimerStop(&appDataSendingTimer);
    62e0:	4802      	ldr	r0, [pc, #8]	; (62ec <appLinkFailureCallback+0x14>)
    62e2:	4b03      	ldr	r3, [pc, #12]	; (62f0 <appLinkFailureCallback+0x18>)
    62e4:	4798      	blx	r3
}
    62e6:	bd10      	pop	{r4, pc}
    62e8:	2000012f 	.word	0x2000012f
    62ec:	20001d28 	.word	0x20001d28
    62f0:	0000bf59 	.word	0x0000bf59

000062f4 <streetlight_init>:
{
    62f4:	b570      	push	{r4, r5, r6, lr}
    62f6:	b082      	sub	sp, #8
    MiApp_SubscribeReConnectionCallback((ReconnectionCallback_t)ReconnectionIndication );
    62f8:	481a      	ldr	r0, [pc, #104]	; (6364 <streetlight_init+0x70>)
    62fa:	4b1b      	ldr	r3, [pc, #108]	; (6368 <streetlight_init+0x74>)
    62fc:	4798      	blx	r3
	if (MiApp_ProtocolInit(&defaultParamsRomOrRam, &defaultParamsRamOnly) == RECONNECTION_IN_PROGRESS)
    62fe:	491b      	ldr	r1, [pc, #108]	; (636c <streetlight_init+0x78>)
    6300:	481b      	ldr	r0, [pc, #108]	; (6370 <streetlight_init+0x7c>)
    6302:	4b1c      	ldr	r3, [pc, #112]	; (6374 <streetlight_init+0x80>)
    6304:	4798      	blx	r3
    6306:	280e      	cmp	r0, #14
    6308:	d027      	beq.n	635a <streetlight_init+0x66>
	memset((uint8_t *)&invalidIEEEAddr, 0x00, LONG_ADDR_LEN);
    630a:	2200      	movs	r2, #0
    630c:	2300      	movs	r3, #0
    630e:	9200      	str	r2, [sp, #0]
    6310:	9301      	str	r3, [sp, #4]
	if (0 == memcmp((uint8_t *)&invalidIEEEAddr, (uint8_t *)&myLongAddress, LONG_ADDR_LEN))
    6312:	4e19      	ldr	r6, [pc, #100]	; (6378 <streetlight_init+0x84>)
    6314:	3208      	adds	r2, #8
    6316:	0031      	movs	r1, r6
    6318:	4668      	mov	r0, sp
    631a:	4d18      	ldr	r5, [pc, #96]	; (637c <streetlight_init+0x88>)
    631c:	47a8      	blx	r5
    631e:	0004      	movs	r4, r0
	memset((uint8_t *)&invalidIEEEAddr, 0xFF, LONG_ADDR_LEN);
    6320:	2201      	movs	r2, #1
    6322:	4252      	negs	r2, r2
    6324:	17d3      	asrs	r3, r2, #31
    6326:	9200      	str	r2, [sp, #0]
    6328:	9301      	str	r3, [sp, #4]
	if (0 == memcmp((uint8_t *)&invalidIEEEAddr, (uint8_t *)&myLongAddress, LONG_ADDR_LEN))
    632a:	3209      	adds	r2, #9
    632c:	0031      	movs	r1, r6
    632e:	4668      	mov	r0, sp
    6330:	47a8      	blx	r5
    6332:	2800      	cmp	r0, #0
    6334:	d001      	beq.n	633a <streetlight_init+0x46>
	if (invalidIEEEAddrFlag)
    6336:	2c00      	cmp	r4, #0
    6338:	d108      	bne.n	634c <streetlight_init+0x58>
    633a:	4c0f      	ldr	r4, [pc, #60]	; (6378 <streetlight_init+0x84>)
    633c:	0026      	movs	r6, r4
    633e:	3608      	adds	r6, #8
			*peui64++ = (uint8_t)rand();
    6340:	4d0f      	ldr	r5, [pc, #60]	; (6380 <streetlight_init+0x8c>)
    6342:	47a8      	blx	r5
    6344:	7020      	strb	r0, [r4, #0]
    6346:	3401      	adds	r4, #1
		for(i = 0; i<MY_ADDRESS_LENGTH; i++)
    6348:	42b4      	cmp	r4, r6
    634a:	d1fa      	bne.n	6342 <streetlight_init+0x4e>
	PHY_SetIEEEAddr((uint8_t *)&myLongAddress);
    634c:	480a      	ldr	r0, [pc, #40]	; (6378 <streetlight_init+0x84>)
    634e:	4b0d      	ldr	r3, [pc, #52]	; (6384 <streetlight_init+0x90>)
    6350:	4798      	blx	r3
	sio2host_init();
    6352:	4b0d      	ldr	r3, [pc, #52]	; (6388 <streetlight_init+0x94>)
    6354:	4798      	blx	r3
}
    6356:	b002      	add	sp, #8
    6358:	bd70      	pop	{r4, r5, r6, pc}
		appState = APP_STATE_WAIT_FOR_RECONNECT_CALLBACK;
    635a:	2205      	movs	r2, #5
    635c:	4b0b      	ldr	r3, [pc, #44]	; (638c <streetlight_init+0x98>)
    635e:	701a      	strb	r2, [r3, #0]
    6360:	e7d3      	b.n	630a <streetlight_init+0x16>
    6362:	46c0      	nop			; (mov r8, r8)
    6364:	00006215 	.word	0x00006215
    6368:	00011969 	.word	0x00011969
    636c:	2000000c 	.word	0x2000000c
    6370:	20000030 	.word	0x20000030
    6374:	0000d73d 	.word	0x0000d73d
    6378:	20000094 	.word	0x20000094
    637c:	00014cc1 	.word	0x00014cc1
    6380:	000152f5 	.word	0x000152f5
    6384:	0000b671 	.word	0x0000b671
    6388:	00008d49 	.word	0x00008d49
    638c:	2000012f 	.word	0x2000012f

00006390 <streetlight_task>:
{
    6390:	b510      	push	{r4, lr}
    6392:	b086      	sub	sp, #24
	MeshTasks();
    6394:	4b2a      	ldr	r3, [pc, #168]	; (6440 <streetlight_task+0xb0>)
    6396:	4798      	blx	r3
    PDS_TaskHandler();
    6398:	4b2a      	ldr	r3, [pc, #168]	; (6444 <streetlight_task+0xb4>)
    639a:	4798      	blx	r3
	switch (appState) {
    639c:	4b2a      	ldr	r3, [pc, #168]	; (6448 <streetlight_task+0xb8>)
    639e:	781a      	ldrb	r2, [r3, #0]
    63a0:	2a0a      	cmp	r2, #10
    63a2:	d825      	bhi.n	63f0 <streetlight_task+0x60>
    63a4:	0093      	lsls	r3, r2, #2
    63a6:	4a29      	ldr	r2, [pc, #164]	; (644c <streetlight_task+0xbc>)
    63a8:	58d3      	ldr	r3, [r2, r3]
    63aa:	469f      	mov	pc, r3
	appDataSendingTimer.interval = APP_SENDING_INTERVAL;
    63ac:	4b28      	ldr	r3, [pc, #160]	; (6450 <streetlight_task+0xc0>)
    63ae:	4a29      	ldr	r2, [pc, #164]	; (6454 <streetlight_task+0xc4>)
    63b0:	609a      	str	r2, [r3, #8]
	appDataSendingTimer.mode = SYS_TIMER_INTERVAL_MODE;
    63b2:	2200      	movs	r2, #0
    63b4:	731a      	strb	r2, [r3, #12]
	appDataSendingTimer.handler = appDataSendingTimerHandler;
    63b6:	4a28      	ldr	r2, [pc, #160]	; (6458 <streetlight_task+0xc8>)
    63b8:	611a      	str	r2, [r3, #16]
	MiApp_SubscribeDataIndicationCallback(appDataInd);
    63ba:	4828      	ldr	r0, [pc, #160]	; (645c <streetlight_task+0xcc>)
    63bc:	4b28      	ldr	r3, [pc, #160]	; (6460 <streetlight_task+0xd0>)
    63be:	4798      	blx	r3
	MiApp_SubscribeLinkFailureCallback(appLinkFailureCallback);
    63c0:	4828      	ldr	r0, [pc, #160]	; (6464 <streetlight_task+0xd4>)
    63c2:	4b29      	ldr	r3, [pc, #164]	; (6468 <streetlight_task+0xd8>)
    63c4:	4798      	blx	r3
	if (appState == APP_STATE_RECONNECT_SUCCESS)
    63c6:	4b20      	ldr	r3, [pc, #128]	; (6448 <streetlight_task+0xb8>)
    63c8:	781b      	ldrb	r3, [r3, #0]
    63ca:	2b06      	cmp	r3, #6
    63cc:	d003      	beq.n	63d6 <streetlight_task+0x46>
		appState = APP_STATE_CONNECT_NETWORK;
    63ce:	2202      	movs	r2, #2
    63d0:	4b1d      	ldr	r3, [pc, #116]	; (6448 <streetlight_task+0xb8>)
    63d2:	701a      	strb	r2, [r3, #0]
    63d4:	e00c      	b.n	63f0 <streetlight_task+0x60>
		appState = APP_STATE_SEND;
    63d6:	2208      	movs	r2, #8
    63d8:	4b1b      	ldr	r3, [pc, #108]	; (6448 <streetlight_task+0xb8>)
    63da:	701a      	strb	r2, [r3, #0]
    63dc:	e008      	b.n	63f0 <streetlight_task+0x60>
			MiApp_SearchConnection(5, CHANNEL_MAP, searchConfim);
    63de:	4a23      	ldr	r2, [pc, #140]	; (646c <streetlight_task+0xdc>)
    63e0:	2180      	movs	r1, #128	; 0x80
    63e2:	0489      	lsls	r1, r1, #18
    63e4:	2005      	movs	r0, #5
    63e6:	4b22      	ldr	r3, [pc, #136]	; (6470 <streetlight_task+0xe0>)
    63e8:	4798      	blx	r3
			appState = APP_STATE_CONNECTING_NETWORK;
    63ea:	2203      	movs	r2, #3
    63ec:	4b16      	ldr	r3, [pc, #88]	; (6448 <streetlight_task+0xb8>)
    63ee:	701a      	strb	r2, [r3, #0]
}
    63f0:	b006      	add	sp, #24
    63f2:	bd10      	pop	{r4, pc}
	uint16_t dstAddr = 0; /* PAN Coordinator Address */
    63f4:	2116      	movs	r1, #22
    63f6:	4469      	add	r1, sp
    63f8:	2300      	movs	r3, #0
    63fa:	800b      	strh	r3, [r1, #0]
	appMsg.packet_type = PACKET_DATA;
    63fc:	4b1d      	ldr	r3, [pc, #116]	; (6474 <streetlight_task+0xe4>)
    63fe:	2201      	movs	r2, #1
    6400:	719a      	strb	r2, [r3, #6]
	if (MiApp_SendData(2, (uint8_t *)&dstAddr, sizeof(appMsg), (uint8_t *)&appMsg, wsnmsghandle, true, appDataConf))
    6402:	481d      	ldr	r0, [pc, #116]	; (6478 <streetlight_task+0xe8>)
    6404:	9002      	str	r0, [sp, #8]
    6406:	9201      	str	r2, [sp, #4]
    6408:	4a1c      	ldr	r2, [pc, #112]	; (647c <streetlight_task+0xec>)
    640a:	7812      	ldrb	r2, [r2, #0]
    640c:	9200      	str	r2, [sp, #0]
    640e:	220b      	movs	r2, #11
    6410:	2002      	movs	r0, #2
    6412:	4c1b      	ldr	r4, [pc, #108]	; (6480 <streetlight_task+0xf0>)
    6414:	47a0      	blx	r4
    6416:	2800      	cmp	r0, #0
    6418:	d103      	bne.n	6422 <streetlight_task+0x92>
		appState = APP_STATE_SENDING_DONE;
    641a:	220a      	movs	r2, #10
    641c:	4b0a      	ldr	r3, [pc, #40]	; (6448 <streetlight_task+0xb8>)
    641e:	701a      	strb	r2, [r3, #0]
    6420:	e7e6      	b.n	63f0 <streetlight_task+0x60>
		++wsnmsghandle;
    6422:	4a16      	ldr	r2, [pc, #88]	; (647c <streetlight_task+0xec>)
    6424:	7813      	ldrb	r3, [r2, #0]
    6426:	3301      	adds	r3, #1
    6428:	7013      	strb	r3, [r2, #0]
		appState = APP_STATE_WAIT_CONF;
    642a:	2209      	movs	r2, #9
    642c:	4b06      	ldr	r3, [pc, #24]	; (6448 <streetlight_task+0xb8>)
    642e:	701a      	strb	r2, [r3, #0]
    6430:	e7de      	b.n	63f0 <streetlight_task+0x60>
			SYS_TimerStart(&appDataSendingTimer);
    6432:	4807      	ldr	r0, [pc, #28]	; (6450 <streetlight_task+0xc0>)
    6434:	4b13      	ldr	r3, [pc, #76]	; (6484 <streetlight_task+0xf4>)
    6436:	4798      	blx	r3
			appState = APP_STATE_WAIT_SEND_TIMER;
    6438:	220b      	movs	r2, #11
    643a:	4b03      	ldr	r3, [pc, #12]	; (6448 <streetlight_task+0xb8>)
    643c:	701a      	strb	r2, [r3, #0]
}
    643e:	e7d7      	b.n	63f0 <streetlight_task+0x60>
    6440:	0000da11 	.word	0x0000da11
    6444:	0000a855 	.word	0x0000a855
    6448:	2000012f 	.word	0x2000012f
    644c:	00015e28 	.word	0x00015e28
    6450:	20001d28 	.word	0x20001d28
    6454:	00002710 	.word	0x00002710
    6458:	000062ad 	.word	0x000062ad
    645c:	000061f9 	.word	0x000061f9
    6460:	0000f015 	.word	0x0000f015
    6464:	000062d9 	.word	0x000062d9
    6468:	00011955 	.word	0x00011955
    646c:	00006245 	.word	0x00006245
    6470:	00010b1d 	.word	0x00010b1d
    6474:	20000124 	.word	0x20000124
    6478:	000061fd 	.word	0x000061fd
    647c:	20000130 	.word	0x20000130
    6480:	0000dbbd 	.word	0x0000dbbd
    6484:	0000bfc5 	.word	0x0000bfc5

00006488 <delay_init>:
 *
 * This must be called during start up to initialize the delay routine with
 * the current used main clock. It must run any time the main CPU clock is changed.
 */
void delay_init(void)
{
    6488:	b570      	push	{r4, r5, r6, lr}
	cycles_per_ms = system_gclk_gen_get_hz(0);
    648a:	2000      	movs	r0, #0
    648c:	4b08      	ldr	r3, [pc, #32]	; (64b0 <delay_init+0x28>)
    648e:	4798      	blx	r3
    6490:	0005      	movs	r5, r0
	cycles_per_ms /= 1000;
    6492:	4c08      	ldr	r4, [pc, #32]	; (64b4 <delay_init+0x2c>)
    6494:	21fa      	movs	r1, #250	; 0xfa
    6496:	0089      	lsls	r1, r1, #2
    6498:	47a0      	blx	r4
    649a:	4b07      	ldr	r3, [pc, #28]	; (64b8 <delay_init+0x30>)
    649c:	6018      	str	r0, [r3, #0]
	cycles_per_us = cycles_per_ms / 1000;
    649e:	4907      	ldr	r1, [pc, #28]	; (64bc <delay_init+0x34>)
    64a0:	0028      	movs	r0, r5
    64a2:	47a0      	blx	r4
    64a4:	4b06      	ldr	r3, [pc, #24]	; (64c0 <delay_init+0x38>)
    64a6:	6018      	str	r0, [r3, #0]

	SysTick->CTRL = SysTick_CTRL_CLKSOURCE_Msk | SysTick_CTRL_ENABLE_Msk;
    64a8:	2205      	movs	r2, #5
    64aa:	4b06      	ldr	r3, [pc, #24]	; (64c4 <delay_init+0x3c>)
    64ac:	601a      	str	r2, [r3, #0]
}
    64ae:	bd70      	pop	{r4, r5, r6, pc}
    64b0:	000084b9 	.word	0x000084b9
    64b4:	00012469 	.word	0x00012469
    64b8:	20000000 	.word	0x20000000
    64bc:	000f4240 	.word	0x000f4240
    64c0:	20000004 	.word	0x20000004
    64c4:	e000e010 	.word	0xe000e010

000064c8 <delay_cycles_us>:
 *
 * \param n  Number of microseconds to wait
 */
void delay_cycles_us(
		uint32_t n)
{
    64c8:	b530      	push	{r4, r5, lr}
	while (n--) {
		/* Devide up to blocks of 10u */
		delay_cycles(cycles_per_us);
    64ca:	4b08      	ldr	r3, [pc, #32]	; (64ec <delay_cycles_us+0x24>)
    64cc:	681c      	ldr	r4, [r3, #0]
 */
static inline void delay_cycles(
		const uint32_t n)
{
	if (n > 0) {
		SysTick->LOAD = n;
    64ce:	4a08      	ldr	r2, [pc, #32]	; (64f0 <delay_cycles_us+0x28>)
		SysTick->VAL = 0;
    64d0:	2500      	movs	r5, #0

		while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)) {
    64d2:	2180      	movs	r1, #128	; 0x80
    64d4:	0249      	lsls	r1, r1, #9
	while (n--) {
    64d6:	3801      	subs	r0, #1
    64d8:	d307      	bcc.n	64ea <delay_cycles_us+0x22>
	if (n > 0) {
    64da:	2c00      	cmp	r4, #0
    64dc:	d0fb      	beq.n	64d6 <delay_cycles_us+0xe>
		SysTick->LOAD = n;
    64de:	6054      	str	r4, [r2, #4]
		SysTick->VAL = 0;
    64e0:	6095      	str	r5, [r2, #8]
		while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)) {
    64e2:	6813      	ldr	r3, [r2, #0]
    64e4:	420b      	tst	r3, r1
    64e6:	d0fc      	beq.n	64e2 <delay_cycles_us+0x1a>
    64e8:	e7f5      	b.n	64d6 <delay_cycles_us+0xe>
	}
}
    64ea:	bd30      	pop	{r4, r5, pc}
    64ec:	20000004 	.word	0x20000004
    64f0:	e000e010 	.word	0xe000e010

000064f4 <cpu_irq_enter_critical>:
volatile bool g_interrupt_enabled = true;
#endif

void cpu_irq_enter_critical(void)
{
	if (cpu_irq_critical_section_counter == 0) {
    64f4:	4b0c      	ldr	r3, [pc, #48]	; (6528 <cpu_irq_enter_critical+0x34>)
    64f6:	681b      	ldr	r3, [r3, #0]
    64f8:	2b00      	cmp	r3, #0
    64fa:	d106      	bne.n	650a <cpu_irq_enter_critical+0x16>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
    64fc:	f3ef 8310 	mrs	r3, PRIMASK
		if (cpu_irq_is_enabled()) {
    6500:	2b00      	cmp	r3, #0
    6502:	d007      	beq.n	6514 <cpu_irq_enter_critical+0x20>
			cpu_irq_disable();
			cpu_irq_prev_interrupt_state = true;
		} else {
			/* Make sure the to save the prev state as false */
			cpu_irq_prev_interrupt_state = false;
    6504:	2200      	movs	r2, #0
    6506:	4b09      	ldr	r3, [pc, #36]	; (652c <cpu_irq_enter_critical+0x38>)
    6508:	701a      	strb	r2, [r3, #0]
		}

	}

	cpu_irq_critical_section_counter++;
    650a:	4a07      	ldr	r2, [pc, #28]	; (6528 <cpu_irq_enter_critical+0x34>)
    650c:	6813      	ldr	r3, [r2, #0]
    650e:	3301      	adds	r3, #1
    6510:	6013      	str	r3, [r2, #0]
}
    6512:	4770      	bx	lr
  __ASM volatile ("cpsid i" : : : "memory");
    6514:	b672      	cpsid	i
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
    6516:	f3bf 8f5f 	dmb	sy
			cpu_irq_disable();
    651a:	2200      	movs	r2, #0
    651c:	4b04      	ldr	r3, [pc, #16]	; (6530 <cpu_irq_enter_critical+0x3c>)
    651e:	701a      	strb	r2, [r3, #0]
			cpu_irq_prev_interrupt_state = true;
    6520:	3201      	adds	r2, #1
    6522:	4b02      	ldr	r3, [pc, #8]	; (652c <cpu_irq_enter_critical+0x38>)
    6524:	701a      	strb	r2, [r3, #0]
    6526:	e7f0      	b.n	650a <cpu_irq_enter_critical+0x16>
    6528:	20000134 	.word	0x20000134
    652c:	20000138 	.word	0x20000138
    6530:	20000008 	.word	0x20000008

00006534 <cpu_irq_leave_critical>:
void cpu_irq_leave_critical(void)
{
	/* Check if the user is trying to leave a critical section when not in a critical section */
	Assert(cpu_irq_critical_section_counter > 0);

	cpu_irq_critical_section_counter--;
    6534:	4b08      	ldr	r3, [pc, #32]	; (6558 <cpu_irq_leave_critical+0x24>)
    6536:	681a      	ldr	r2, [r3, #0]
    6538:	3a01      	subs	r2, #1
    653a:	601a      	str	r2, [r3, #0]

	/* Only enable global interrupts when the counter reaches 0 and the state of the global interrupt flag
	   was enabled when entering critical state */
	if ((cpu_irq_critical_section_counter == 0) && (cpu_irq_prev_interrupt_state)) {
    653c:	681b      	ldr	r3, [r3, #0]
    653e:	2b00      	cmp	r3, #0
    6540:	d109      	bne.n	6556 <cpu_irq_leave_critical+0x22>
    6542:	4b06      	ldr	r3, [pc, #24]	; (655c <cpu_irq_leave_critical+0x28>)
    6544:	781b      	ldrb	r3, [r3, #0]
    6546:	2b00      	cmp	r3, #0
    6548:	d005      	beq.n	6556 <cpu_irq_leave_critical+0x22>
		cpu_irq_enable();
    654a:	2201      	movs	r2, #1
    654c:	4b04      	ldr	r3, [pc, #16]	; (6560 <cpu_irq_leave_critical+0x2c>)
    654e:	701a      	strb	r2, [r3, #0]
    6550:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
    6554:	b662      	cpsie	i
	}
}
    6556:	4770      	bx	lr
    6558:	20000134 	.word	0x20000134
    655c:	20000138 	.word	0x20000138
    6560:	20000008 	.word	0x20000008

00006564 <system_board_init>:




void system_board_init(void)
{
    6564:	b5f0      	push	{r4, r5, r6, r7, lr}
    6566:	46c6      	mov	lr, r8
    6568:	b500      	push	{lr}
    656a:	b082      	sub	sp, #8
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->direction  = PORT_PIN_DIR_INPUT;
	config->input_pull = PORT_PIN_PULL_UP;
    656c:	ac01      	add	r4, sp, #4
    656e:	2601      	movs	r6, #1
    6570:	7066      	strb	r6, [r4, #1]
	config->powersave  = false;
    6572:	2700      	movs	r7, #0
    6574:	70a7      	strb	r7, [r4, #2]
	struct port_config pin_conf;
	port_get_config_defaults(&pin_conf);

	/* Configure LEDs as outputs, turn them off */
	pin_conf.direction  = PORT_PIN_DIR_OUTPUT;
    6576:	7026      	strb	r6, [r4, #0]
	port_pin_set_config(LED_0_PIN, &pin_conf);
    6578:	0021      	movs	r1, r4
    657a:	2013      	movs	r0, #19
    657c:	4d27      	ldr	r5, [pc, #156]	; (661c <system_board_init+0xb8>)
    657e:	47a8      	blx	r5
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
    6580:	4b27      	ldr	r3, [pc, #156]	; (6620 <system_board_init+0xbc>)
    6582:	4698      	mov	r8, r3
    6584:	2380      	movs	r3, #128	; 0x80
    6586:	031b      	lsls	r3, r3, #12
    6588:	4642      	mov	r2, r8
    658a:	6193      	str	r3, [r2, #24]
	port_pin_set_output_level(LED_0_PIN, LED_0_INACTIVE);

	/* Set buttons as inputs */
	pin_conf.direction  = PORT_PIN_DIR_INPUT;
    658c:	7027      	strb	r7, [r4, #0]
	pin_conf.input_pull = PORT_PIN_PULL_UP;
    658e:	7066      	strb	r6, [r4, #1]
	port_pin_set_config(BUTTON_0_PIN, &pin_conf);
    6590:	0021      	movs	r1, r4
    6592:	201c      	movs	r0, #28
    6594:	47a8      	blx	r5
	config->input_pull = PORT_PIN_PULL_UP;
    6596:	7066      	strb	r6, [r4, #1]
	config->powersave  = false;
    6598:	70a7      	strb	r7, [r4, #2]
	
#ifdef CONF_BOARD_AT86RFX	

	port_get_config_defaults(&pin_conf);
	pin_conf.direction  = PORT_PIN_DIR_OUTPUT;
    659a:	7026      	strb	r6, [r4, #0]
	port_pin_set_config(AT86RFX_SPI_SCK, &pin_conf);
    659c:	0021      	movs	r1, r4
    659e:	2052      	movs	r0, #82	; 0x52
    65a0:	47a8      	blx	r5
	port_pin_set_config(AT86RFX_SPI_MOSI, &pin_conf);
    65a2:	0021      	movs	r1, r4
    65a4:	203e      	movs	r0, #62	; 0x3e
    65a6:	47a8      	blx	r5
	port_pin_set_config(AT86RFX_SPI_CS, &pin_conf);
    65a8:	0021      	movs	r1, r4
    65aa:	203f      	movs	r0, #63	; 0x3f
    65ac:	47a8      	blx	r5
	port_pin_set_config(AT86RFX_RST_PIN, &pin_conf);
    65ae:	0021      	movs	r1, r4
    65b0:	202f      	movs	r0, #47	; 0x2f
    65b2:	47a8      	blx	r5
	port_pin_set_config(AT86RFX_SLP_PIN, &pin_conf);
    65b4:	0021      	movs	r1, r4
    65b6:	2014      	movs	r0, #20
    65b8:	47a8      	blx	r5
		port_base->OUTSET.reg = pin_mask;
    65ba:	2280      	movs	r2, #128	; 0x80
    65bc:	02d2      	lsls	r2, r2, #11
    65be:	4b19      	ldr	r3, [pc, #100]	; (6624 <system_board_init+0xc0>)
    65c0:	619a      	str	r2, [r3, #24]
    65c2:	4b19      	ldr	r3, [pc, #100]	; (6628 <system_board_init+0xc4>)
    65c4:	2280      	movs	r2, #128	; 0x80
    65c6:	05d2      	lsls	r2, r2, #23
    65c8:	619a      	str	r2, [r3, #24]
    65ca:	2280      	movs	r2, #128	; 0x80
    65cc:	0612      	lsls	r2, r2, #24
    65ce:	619a      	str	r2, [r3, #24]
    65d0:	2280      	movs	r2, #128	; 0x80
    65d2:	0212      	lsls	r2, r2, #8
    65d4:	619a      	str	r2, [r3, #24]
    65d6:	2380      	movs	r3, #128	; 0x80
    65d8:	035b      	lsls	r3, r3, #13
    65da:	4642      	mov	r2, r8
    65dc:	6193      	str	r3, [r2, #24]
	port_pin_set_output_level(AT86RFX_SPI_MOSI, true);
	port_pin_set_output_level(AT86RFX_SPI_CS, true);
	port_pin_set_output_level(AT86RFX_RST_PIN, true);
	port_pin_set_output_level(AT86RFX_SLP_PIN, true);

	pin_conf.direction  = PORT_PIN_DIR_INPUT;
    65de:	7027      	strb	r7, [r4, #0]
	port_pin_set_config(AT86RFX_SPI_MISO, &pin_conf);
    65e0:	0021      	movs	r1, r4
    65e2:	2053      	movs	r0, #83	; 0x53
    65e4:	47a8      	blx	r5
	
	/* SAMR21 Antenna Diversity Configuration */

	PM->APBCMASK.reg |= (1<<PM_APBCMASK_RFCTRL_Pos);
    65e6:	4a11      	ldr	r2, [pc, #68]	; (662c <system_board_init+0xc8>)
    65e8:	6a11      	ldr	r1, [r2, #32]
    65ea:	2380      	movs	r3, #128	; 0x80
    65ec:	039b      	lsls	r3, r3, #14
    65ee:	430b      	orrs	r3, r1
    65f0:	6213      	str	r3, [r2, #32]
		
	/*Pins  PA12/RFCTRL2 and PA09/RFCTRL1 are used as DIG1 and DIG2 pins respectively in SAMR21 Xplained Pro*/	
	
	/* FECTRL register is Written with value 4 => F2CFG = 00 and F1CFG = 01 */	
	REG_RFCTRL_FECFG = RFCTRL_CFG_ANT_DIV;
    65f2:	2204      	movs	r2, #4
    65f4:	4b0e      	ldr	r3, [pc, #56]	; (6630 <system_board_init+0xcc>)
    65f6:	801a      	strh	r2, [r3, #0]
	Assert(config);

	/* Default configuration values */
	config->mux_position = SYSTEM_PINMUX_GPIO;
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
    65f8:	466b      	mov	r3, sp
    65fa:	709e      	strb	r6, [r3, #2]
	config->powersave    = false;
    65fc:	70df      	strb	r7, [r3, #3]
	struct system_pinmux_config config_pinmux;
	system_pinmux_get_config_defaults(&config_pinmux);
	
	/*MUX Position is 'F' i.e 5 for FECTRL Function and is same for all  FECTRL supported pins
	 * as provided in the data sheet */
	config_pinmux.mux_position = MUX_PA09F_RFCTRL_FECTRL1 ;
    65fe:	2305      	movs	r3, #5
    6600:	466a      	mov	r2, sp
    6602:	7013      	strb	r3, [r2, #0]
	
	config_pinmux.direction    = SYSTEM_PINMUX_PIN_DIR_OUTPUT;	
    6604:	7056      	strb	r6, [r2, #1]
	system_pinmux_pin_set_config(PIN_RFCTRL1, &config_pinmux);
    6606:	4669      	mov	r1, sp
    6608:	2009      	movs	r0, #9
    660a:	4c0a      	ldr	r4, [pc, #40]	; (6634 <system_board_init+0xd0>)
    660c:	47a0      	blx	r4
	system_pinmux_pin_set_config(PIN_RFCTRL2, &config_pinmux);
    660e:	4669      	mov	r1, sp
    6610:	200c      	movs	r0, #12
    6612:	47a0      	blx	r4
#endif

}
    6614:	b002      	add	sp, #8
    6616:	bc04      	pop	{r2}
    6618:	4690      	mov	r8, r2
    661a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    661c:	00006a35 	.word	0x00006a35
    6620:	41004400 	.word	0x41004400
    6624:	41004500 	.word	0x41004500
    6628:	41004480 	.word	0x41004480
    662c:	40000400 	.word	0x40000400
    6630:	42005400 	.word	0x42005400
    6634:	000086c9 	.word	0x000086c9

00006638 <extint_register_callback>:
	/* Sanity check arguments */
	Assert(callback);

	if (type != EXTINT_CALLBACK_TYPE_DETECT) {
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
    6638:	2317      	movs	r3, #23
	if (type != EXTINT_CALLBACK_TYPE_DETECT) {
    663a:	2a00      	cmp	r2, #0
    663c:	d001      	beq.n	6642 <extint_register_callback+0xa>
	} else if (_extint_dev.callbacks[channel] == callback) {
		return STATUS_OK;
	}

	return STATUS_ERR_ALREADY_INITIALIZED;
}
    663e:	0018      	movs	r0, r3
    6640:	4770      	bx	lr
	if (_extint_dev.callbacks[channel] == NULL) {
    6642:	008b      	lsls	r3, r1, #2
    6644:	4a06      	ldr	r2, [pc, #24]	; (6660 <extint_register_callback+0x28>)
    6646:	589b      	ldr	r3, [r3, r2]
    6648:	2b00      	cmp	r3, #0
    664a:	d003      	beq.n	6654 <extint_register_callback+0x1c>
	} else if (_extint_dev.callbacks[channel] == callback) {
    664c:	4283      	cmp	r3, r0
    664e:	d005      	beq.n	665c <extint_register_callback+0x24>
	return STATUS_ERR_ALREADY_INITIALIZED;
    6650:	231d      	movs	r3, #29
    6652:	e7f4      	b.n	663e <extint_register_callback+0x6>
		_extint_dev.callbacks[channel] = callback;
    6654:	0089      	lsls	r1, r1, #2
    6656:	5088      	str	r0, [r1, r2]
		return STATUS_OK;
    6658:	2300      	movs	r3, #0
    665a:	e7f0      	b.n	663e <extint_register_callback+0x6>
		return STATUS_OK;
    665c:	2300      	movs	r3, #0
    665e:	e7ee      	b.n	663e <extint_register_callback+0x6>
    6660:	20001d40 	.word	0x20001d40

00006664 <extint_chan_enable_callback>:

		eic->INTENSET.reg = (1UL << channel);
	}
	else {
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
    6664:	2317      	movs	r3, #23
	if (type == EXTINT_CALLBACK_TYPE_DETECT) {
    6666:	2900      	cmp	r1, #0
    6668:	d001      	beq.n	666e <extint_chan_enable_callback+0xa>
	}

	return STATUS_OK;
}
    666a:	0018      	movs	r0, r3
    666c:	4770      	bx	lr
		Eic *const eics[EIC_INST_NUM] = EIC_INSTS;

		return eics[eic_index];
	} else {
		Assert(false);
		return NULL;
    666e:	2200      	movs	r2, #0
	if (eic_index < EIC_INST_NUM) {
    6670:	281f      	cmp	r0, #31
    6672:	d800      	bhi.n	6676 <extint_chan_enable_callback+0x12>
		return eics[eic_index];
    6674:	4a02      	ldr	r2, [pc, #8]	; (6680 <extint_chan_enable_callback+0x1c>)
		eic->INTENSET.reg = (1UL << channel);
    6676:	2301      	movs	r3, #1
    6678:	4083      	lsls	r3, r0
    667a:	60d3      	str	r3, [r2, #12]
	return STATUS_OK;
    667c:	2300      	movs	r3, #0
    667e:	e7f4      	b.n	666a <extint_chan_enable_callback+0x6>
    6680:	40001800 	.word	0x40001800

00006684 <extint_chan_disable_callback>:

		eic->INTENCLR.reg = (1UL << channel);
	}
	else {
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
    6684:	2317      	movs	r3, #23
	if (type == EXTINT_CALLBACK_TYPE_DETECT) {
    6686:	2900      	cmp	r1, #0
    6688:	d001      	beq.n	668e <extint_chan_disable_callback+0xa>
	}

	return STATUS_OK;
}
    668a:	0018      	movs	r0, r3
    668c:	4770      	bx	lr
		return NULL;
    668e:	2200      	movs	r2, #0
	if (eic_index < EIC_INST_NUM) {
    6690:	281f      	cmp	r0, #31
    6692:	d800      	bhi.n	6696 <extint_chan_disable_callback+0x12>
		return eics[eic_index];
    6694:	4a02      	ldr	r2, [pc, #8]	; (66a0 <extint_chan_disable_callback+0x1c>)
		eic->INTENCLR.reg = (1UL << channel);
    6696:	2301      	movs	r3, #1
    6698:	4083      	lsls	r3, r0
    669a:	6093      	str	r3, [r2, #8]
	return STATUS_OK;
    669c:	2300      	movs	r3, #0
    669e:	e7f4      	b.n	668a <extint_chan_disable_callback+0x6>
    66a0:	40001800 	.word	0x40001800

000066a4 <EIC_Handler>:
	return _current_channel;
}

/** Handler for the EXTINT hardware module interrupt. */
void EIC_Handler(void)
{
    66a4:	b570      	push	{r4, r5, r6, lr}
	/* Find any triggered channels, run associated callback handlers */
	for (_current_channel = 0; _current_channel < EIC_NUMBER_OF_INTERRUPTS ; _current_channel++) {
    66a6:	2200      	movs	r2, #0
    66a8:	4b10      	ldr	r3, [pc, #64]	; (66ec <EIC_Handler+0x48>)
    66aa:	701a      	strb	r2, [r3, #0]
    66ac:	2300      	movs	r3, #0
    66ae:	4910      	ldr	r1, [pc, #64]	; (66f0 <EIC_Handler+0x4c>)
 */
static inline bool extint_chan_is_detected(
		const uint8_t channel)
{
	Eic *const eic_module = _extint_get_eic_from_channel(channel);
	uint32_t eic_mask   = (1UL << (channel % 32));
    66b0:	251f      	movs	r5, #31
		if (extint_chan_is_detected(_current_channel)) {
			/* Clear flag */
			extint_chan_clear_detected(_current_channel);
			/* Find any associated callback entries in the callback table */
			if (_extint_dev.callbacks[_current_channel] != NULL) {
    66b2:	4e10      	ldr	r6, [pc, #64]	; (66f4 <EIC_Handler+0x50>)
	for (_current_channel = 0; _current_channel < EIC_NUMBER_OF_INTERRUPTS ; _current_channel++) {
    66b4:	4c0d      	ldr	r4, [pc, #52]	; (66ec <EIC_Handler+0x48>)
    66b6:	e00a      	b.n	66ce <EIC_Handler+0x2a>
		return eics[eic_index];
    66b8:	490d      	ldr	r1, [pc, #52]	; (66f0 <EIC_Handler+0x4c>)
    66ba:	e008      	b.n	66ce <EIC_Handler+0x2a>
    66bc:	7823      	ldrb	r3, [r4, #0]
    66be:	3301      	adds	r3, #1
    66c0:	b2db      	uxtb	r3, r3
    66c2:	7023      	strb	r3, [r4, #0]
    66c4:	2b0f      	cmp	r3, #15
    66c6:	d810      	bhi.n	66ea <EIC_Handler+0x46>
		return NULL;
    66c8:	2100      	movs	r1, #0
	if (eic_index < EIC_INST_NUM) {
    66ca:	2b1f      	cmp	r3, #31
    66cc:	d9f4      	bls.n	66b8 <EIC_Handler+0x14>
	uint32_t eic_mask   = (1UL << (channel % 32));
    66ce:	0028      	movs	r0, r5
    66d0:	4018      	ands	r0, r3
    66d2:	2201      	movs	r2, #1
    66d4:	4082      	lsls	r2, r0

	return (eic_module->INTFLAG.reg & eic_mask);
    66d6:	6908      	ldr	r0, [r1, #16]
		if (extint_chan_is_detected(_current_channel)) {
    66d8:	4210      	tst	r0, r2
    66da:	d0ef      	beq.n	66bc <EIC_Handler+0x18>
		const uint8_t channel)
{
	Eic *const eic_module = _extint_get_eic_from_channel(channel);
	uint32_t eic_mask   = (1UL << (channel % 32));

	eic_module->INTFLAG.reg = eic_mask;
    66dc:	610a      	str	r2, [r1, #16]
			if (_extint_dev.callbacks[_current_channel] != NULL) {
    66de:	009b      	lsls	r3, r3, #2
    66e0:	599b      	ldr	r3, [r3, r6]
    66e2:	2b00      	cmp	r3, #0
    66e4:	d0ea      	beq.n	66bc <EIC_Handler+0x18>
				/* Run the registered callback */
				_extint_dev.callbacks[_current_channel]();
    66e6:	4798      	blx	r3
    66e8:	e7e8      	b.n	66bc <EIC_Handler+0x18>
			}
		}
	}
}
    66ea:	bd70      	pop	{r4, r5, r6, pc}
    66ec:	20001d3c 	.word	0x20001d3c
    66f0:	40001800 	.word	0x40001800
    66f4:	20001d40 	.word	0x20001d40

000066f8 <_extint_enable>:
{
	Eic *const eics[EIC_INST_NUM] = EIC_INSTS;

	/* Enable all EIC hardware modules. */
	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
		eics[i]->CTRL.reg |= EIC_CTRL_ENABLE;
    66f8:	4a04      	ldr	r2, [pc, #16]	; (670c <_extint_enable+0x14>)
    66fa:	7813      	ldrb	r3, [r2, #0]
    66fc:	2102      	movs	r1, #2
    66fe:	430b      	orrs	r3, r1
    6700:	7013      	strb	r3, [r2, #0]
		if (eics[i]->STATUS.reg & EIC_STATUS_SYNCBUSY) {
    6702:	7853      	ldrb	r3, [r2, #1]
    6704:	b25b      	sxtb	r3, r3
    6706:	2b00      	cmp	r3, #0
    6708:	dbfb      	blt.n	6702 <_extint_enable+0xa>
	}

	while (extint_is_syncing()) {
		/* Wait for all hardware modules to complete synchronization */
	}
}
    670a:	4770      	bx	lr
    670c:	40001800 	.word	0x40001800

00006710 <_system_extint_init>:
{
    6710:	b500      	push	{lr}
    6712:	b083      	sub	sp, #12
		const enum system_clock_apb_bus bus,
		const uint32_t mask)
{
	switch (bus) {
		case SYSTEM_CLOCK_APB_APBA:
			PM->APBAMASK.reg |= mask;
    6714:	4a12      	ldr	r2, [pc, #72]	; (6760 <_system_extint_init+0x50>)
    6716:	6993      	ldr	r3, [r2, #24]
    6718:	2140      	movs	r1, #64	; 0x40
    671a:	430b      	orrs	r3, r1
    671c:	6193      	str	r3, [r2, #24]
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->source_generator = GCLK_GENERATOR_0;
    671e:	a901      	add	r1, sp, #4
    6720:	2300      	movs	r3, #0
    6722:	700b      	strb	r3, [r1, #0]
	system_gclk_chan_set_config(EIC_GCLK_ID, &gclk_chan_conf);
    6724:	2005      	movs	r0, #5
    6726:	4b0f      	ldr	r3, [pc, #60]	; (6764 <_system_extint_init+0x54>)
    6728:	4798      	blx	r3
	system_gclk_chan_enable(EIC_GCLK_ID);
    672a:	2005      	movs	r0, #5
    672c:	4b0e      	ldr	r3, [pc, #56]	; (6768 <_system_extint_init+0x58>)
    672e:	4798      	blx	r3
		eics[i]->CTRL.reg |= EIC_CTRL_SWRST;
    6730:	4a0e      	ldr	r2, [pc, #56]	; (676c <_system_extint_init+0x5c>)
    6732:	7813      	ldrb	r3, [r2, #0]
    6734:	2101      	movs	r1, #1
    6736:	430b      	orrs	r3, r1
    6738:	7013      	strb	r3, [r2, #0]
		if (eics[i]->STATUS.reg & EIC_STATUS_SYNCBUSY) {
    673a:	7853      	ldrb	r3, [r2, #1]
    673c:	b25b      	sxtb	r3, r3
    673e:	2b00      	cmp	r3, #0
    6740:	dbfb      	blt.n	673a <_system_extint_init+0x2a>
    6742:	4b0b      	ldr	r3, [pc, #44]	; (6770 <_system_extint_init+0x60>)
    6744:	0019      	movs	r1, r3
    6746:	3140      	adds	r1, #64	; 0x40
		_extint_dev.callbacks[j] = NULL;
    6748:	2200      	movs	r2, #0
    674a:	c304      	stmia	r3!, {r2}
	for (uint8_t j = 0; j < EIC_NUMBER_OF_INTERRUPTS; j++) {
    674c:	4299      	cmp	r1, r3
    674e:	d1fc      	bne.n	674a <_system_extint_init+0x3a>
 * \param[in] vector Interrupt vector to enable
 */
static inline void system_interrupt_enable(
		const enum system_interrupt_vector vector)
{
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
    6750:	2210      	movs	r2, #16
    6752:	4b08      	ldr	r3, [pc, #32]	; (6774 <_system_extint_init+0x64>)
    6754:	601a      	str	r2, [r3, #0]
	_extint_enable();
    6756:	4b08      	ldr	r3, [pc, #32]	; (6778 <_system_extint_init+0x68>)
    6758:	4798      	blx	r3
}
    675a:	b003      	add	sp, #12
    675c:	bd00      	pop	{pc}
    675e:	46c0      	nop			; (mov r8, r8)
    6760:	40000400 	.word	0x40000400
    6764:	000085d1 	.word	0x000085d1
    6768:	00008545 	.word	0x00008545
    676c:	40001800 	.word	0x40001800
    6770:	20001d40 	.word	0x20001d40
    6774:	e000e100 	.word	0xe000e100
    6778:	000066f9 	.word	0x000066f9

0000677c <extint_chan_get_config_defaults>:
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->gpio_pin            = 0;
    677c:	2300      	movs	r3, #0
    677e:	6003      	str	r3, [r0, #0]
	config->gpio_pin_mux        = 0;
    6780:	6043      	str	r3, [r0, #4]
	config->gpio_pin_pull       = EXTINT_PULL_UP;
    6782:	2201      	movs	r2, #1
    6784:	7202      	strb	r2, [r0, #8]
	config->wake_if_sleeping    = true;
    6786:	7242      	strb	r2, [r0, #9]
	config->filter_input_signal = false;
    6788:	7283      	strb	r3, [r0, #10]
	config->detection_criteria  = EXTINT_DETECT_FALLING;
    678a:	3302      	adds	r3, #2
    678c:	72c3      	strb	r3, [r0, #11]
}
    678e:	4770      	bx	lr

00006790 <extint_chan_set_config>:

 */
void extint_chan_set_config(
		const uint8_t channel,
		const struct extint_chan_conf *const config)
{
    6790:	b5f0      	push	{r4, r5, r6, r7, lr}
    6792:	b083      	sub	sp, #12
    6794:	0005      	movs	r5, r0
    6796:	000c      	movs	r4, r1
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    6798:	a901      	add	r1, sp, #4
    679a:	2300      	movs	r3, #0
    679c:	704b      	strb	r3, [r1, #1]
	config->powersave    = false;
    679e:	70cb      	strb	r3, [r1, #3]
			config->detection_criteria)));

	struct system_pinmux_config pinmux_config;
	system_pinmux_get_config_defaults(&pinmux_config);

	pinmux_config.mux_position = config->gpio_pin_mux;
    67a0:	7923      	ldrb	r3, [r4, #4]
    67a2:	700b      	strb	r3, [r1, #0]
	pinmux_config.direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
	pinmux_config.input_pull   = (enum system_pinmux_pin_pull)config->gpio_pin_pull;
    67a4:	7a23      	ldrb	r3, [r4, #8]
    67a6:	708b      	strb	r3, [r1, #2]
	system_pinmux_pin_set_config(config->gpio_pin, &pinmux_config);
    67a8:	7820      	ldrb	r0, [r4, #0]
    67aa:	4b15      	ldr	r3, [pc, #84]	; (6800 <extint_chan_set_config+0x70>)
    67ac:	4798      	blx	r3
		return NULL;
    67ae:	2000      	movs	r0, #0
	if (eic_index < EIC_INST_NUM) {
    67b0:	2d1f      	cmp	r5, #31
    67b2:	d800      	bhi.n	67b6 <extint_chan_set_config+0x26>
		return eics[eic_index];
    67b4:	4813      	ldr	r0, [pc, #76]	; (6804 <extint_chan_set_config+0x74>)

	/* Get a pointer to the module hardware instance */
	Eic *const EIC_module = _extint_get_eic_from_channel(channel);

	uint32_t config_pos = (4 * (channel % 8));
    67b6:	2207      	movs	r2, #7
    67b8:	402a      	ands	r2, r5
    67ba:	0092      	lsls	r2, r2, #2
	uint32_t new_config;

	/* Determine the channel's new edge detection configuration */
	new_config = (config->detection_criteria << EIC_CONFIG_SENSE0_Pos);
    67bc:	7ae7      	ldrb	r7, [r4, #11]

	/* Enable the hardware signal filter if requested in the config */
	if (config->filter_input_signal) {
    67be:	7aa3      	ldrb	r3, [r4, #10]
    67c0:	2b00      	cmp	r3, #0
    67c2:	d001      	beq.n	67c8 <extint_chan_set_config+0x38>
    67c4:	2308      	movs	r3, #8
    67c6:	431f      	orrs	r7, r3
    67c8:	08eb      	lsrs	r3, r5, #3
    67ca:	009b      	lsls	r3, r3, #2
    67cc:	18c3      	adds	r3, r0, r3
		new_config |= EIC_CONFIG_FILTEN0;
	}

	/* Clear the existing and set the new channel configuration */
	EIC_module->CONFIG[channel / 8].reg
		= (EIC_module->CONFIG[channel / 8].reg &
    67ce:	6999      	ldr	r1, [r3, #24]
			~((EIC_CONFIG_SENSE0_Msk | EIC_CONFIG_FILTEN0) << config_pos)) |
    67d0:	260f      	movs	r6, #15
    67d2:	4096      	lsls	r6, r2
		= (EIC_module->CONFIG[channel / 8].reg &
    67d4:	43b1      	bics	r1, r6
			(new_config << config_pos);
    67d6:	4097      	lsls	r7, r2
    67d8:	003a      	movs	r2, r7
			~((EIC_CONFIG_SENSE0_Msk | EIC_CONFIG_FILTEN0) << config_pos)) |
    67da:	430a      	orrs	r2, r1
		= (EIC_module->CONFIG[channel / 8].reg &
    67dc:	619a      	str	r2, [r3, #24]

	/* Set the channel's new wake up mode setting */
	if (config->wake_if_sleeping) {
    67de:	7a63      	ldrb	r3, [r4, #9]
    67e0:	2b00      	cmp	r3, #0
    67e2:	d106      	bne.n	67f2 <extint_chan_set_config+0x62>
		EIC_module->WAKEUP.reg |=  (1UL << channel);
	} else {
		EIC_module->WAKEUP.reg &= ~(1UL << channel);
    67e4:	6943      	ldr	r3, [r0, #20]
    67e6:	2201      	movs	r2, #1
    67e8:	40aa      	lsls	r2, r5
    67ea:	4393      	bics	r3, r2
    67ec:	6143      	str	r3, [r0, #20]
	}
}
    67ee:	b003      	add	sp, #12
    67f0:	bdf0      	pop	{r4, r5, r6, r7, pc}
		EIC_module->WAKEUP.reg |=  (1UL << channel);
    67f2:	6942      	ldr	r2, [r0, #20]
    67f4:	2301      	movs	r3, #1
    67f6:	40ab      	lsls	r3, r5
    67f8:	4313      	orrs	r3, r2
    67fa:	6143      	str	r3, [r0, #20]
    67fc:	e7f7      	b.n	67ee <extint_chan_set_config+0x5e>
    67fe:	46c0      	nop			; (mov r8, r8)
    6800:	000086c9 	.word	0x000086c9
    6804:	40001800 	.word	0x40001800

00006808 <nvm_set_config>:
 *                        EEPROM and/or auxiliary space configuration from being
 *                        altered
 */
enum status_code nvm_set_config(
		const struct nvm_config *const config)
{
    6808:	b510      	push	{r4, lr}
			break;

		case SYSTEM_CLOCK_APB_APBB:
			PM->APBBMASK.reg |= mask;
    680a:	4a1e      	ldr	r2, [pc, #120]	; (6884 <nvm_set_config+0x7c>)
    680c:	69d3      	ldr	r3, [r2, #28]
    680e:	2104      	movs	r1, #4
    6810:	430b      	orrs	r3, r1
    6812:	61d3      	str	r3, [r2, #28]
	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBB, PM_APBBMASK_NVMCTRL);
#endif

	/* Clear error flags */
	nvm_module->STATUS.reg = NVMCTRL_STATUS_MASK;
    6814:	4b1c      	ldr	r3, [pc, #112]	; (6888 <nvm_set_config+0x80>)
    6816:	2220      	movs	r2, #32
    6818:	32ff      	adds	r2, #255	; 0xff
    681a:	831a      	strh	r2, [r3, #24]
static inline bool nvm_is_ready(void)
{
	/* Get a pointer to the module hardware instance */
	Nvmctrl *const nvm_module = NVMCTRL;

	return nvm_module->INTFLAG.reg & NVMCTRL_INTFLAG_READY;
    681c:	7d1a      	ldrb	r2, [r3, #20]

	/* Check if the module is busy */
	if (!nvm_is_ready()) {
		return STATUS_BUSY;
    681e:	2305      	movs	r3, #5
	if (!nvm_is_ready()) {
    6820:	07d2      	lsls	r2, r2, #31
    6822:	d401      	bmi.n	6828 <nvm_set_config+0x20>
	if (nvm_module->STATUS.reg & NVMCTRL_STATUS_SB) {
		return STATUS_ERR_IO;
	}

	return STATUS_OK;
}
    6824:	0018      	movs	r0, r3
    6826:	bd10      	pop	{r4, pc}
			NVMCTRL_CTRLB_SLEEPPRM(config->sleep_power_mode) |
    6828:	7803      	ldrb	r3, [r0, #0]
    682a:	021b      	lsls	r3, r3, #8
    682c:	22c0      	movs	r2, #192	; 0xc0
    682e:	0092      	lsls	r2, r2, #2
    6830:	4013      	ands	r3, r2
			((config->manual_page_write & 0x01) << NVMCTRL_CTRLB_MANW_Pos) |
    6832:	7841      	ldrb	r1, [r0, #1]
    6834:	01c9      	lsls	r1, r1, #7
    6836:	22ff      	movs	r2, #255	; 0xff
    6838:	400a      	ands	r2, r1
			NVMCTRL_CTRLB_SLEEPPRM(config->sleep_power_mode) |
    683a:	4313      	orrs	r3, r2
			NVMCTRL_CTRLB_RWS(config->wait_states) |
    683c:	7881      	ldrb	r1, [r0, #2]
    683e:	0049      	lsls	r1, r1, #1
    6840:	221e      	movs	r2, #30
    6842:	400a      	ands	r2, r1
			((config->manual_page_write & 0x01) << NVMCTRL_CTRLB_MANW_Pos) |
    6844:	4313      	orrs	r3, r2
			((config->disable_cache & 0x01) << NVMCTRL_CTRLB_CACHEDIS_Pos) |
    6846:	78c2      	ldrb	r2, [r0, #3]
    6848:	0492      	lsls	r2, r2, #18
    684a:	2180      	movs	r1, #128	; 0x80
    684c:	02c9      	lsls	r1, r1, #11
    684e:	400a      	ands	r2, r1
			NVMCTRL_CTRLB_RWS(config->wait_states) |
    6850:	4313      	orrs	r3, r2
			NVMCTRL_CTRLB_READMODE(config->cache_readmode);
    6852:	7902      	ldrb	r2, [r0, #4]
    6854:	0412      	lsls	r2, r2, #16
    6856:	21c0      	movs	r1, #192	; 0xc0
    6858:	0289      	lsls	r1, r1, #10
    685a:	400a      	ands	r2, r1
			((config->disable_cache & 0x01) << NVMCTRL_CTRLB_CACHEDIS_Pos) |
    685c:	4313      	orrs	r3, r2
	nvm_module->CTRLB.reg =
    685e:	4a0a      	ldr	r2, [pc, #40]	; (6888 <nvm_set_config+0x80>)
    6860:	6053      	str	r3, [r2, #4]
	_nvm_dev.page_size         = (8 << nvm_module->PARAM.bit.PSZ);
    6862:	6893      	ldr	r3, [r2, #8]
    6864:	035b      	lsls	r3, r3, #13
    6866:	0f5b      	lsrs	r3, r3, #29
    6868:	4908      	ldr	r1, [pc, #32]	; (688c <nvm_set_config+0x84>)
    686a:	2408      	movs	r4, #8
    686c:	409c      	lsls	r4, r3
    686e:	800c      	strh	r4, [r1, #0]
	_nvm_dev.number_of_pages   = nvm_module->PARAM.bit.NVMP;
    6870:	6893      	ldr	r3, [r2, #8]
    6872:	804b      	strh	r3, [r1, #2]
	_nvm_dev.manual_page_write = config->manual_page_write;
    6874:	7843      	ldrb	r3, [r0, #1]
    6876:	710b      	strb	r3, [r1, #4]
	if (nvm_module->STATUS.reg & NVMCTRL_STATUS_SB) {
    6878:	8b13      	ldrh	r3, [r2, #24]
    687a:	05db      	lsls	r3, r3, #23
	return STATUS_OK;
    687c:	0fdb      	lsrs	r3, r3, #31
    687e:	011b      	lsls	r3, r3, #4
    6880:	e7d0      	b.n	6824 <nvm_set_config+0x1c>
    6882:	46c0      	nop			; (mov r8, r8)
    6884:	40000400 	.word	0x40000400
    6888:	41004000 	.word	0x41004000
    688c:	2000013c 	.word	0x2000013c

00006890 <nvm_execute_command>:
 */
enum status_code nvm_execute_command(
		const enum nvm_command command,
		const uint32_t address,
		const uint32_t parameter)
{
    6890:	b530      	push	{r4, r5, lr}
    6892:	0004      	movs	r4, r0
	uint32_t ctrlb_bak;

	/* Check that the address given is valid  */
	if (address > ((uint32_t)_nvm_dev.page_size * _nvm_dev.number_of_pages)
    6894:	4a22      	ldr	r2, [pc, #136]	; (6920 <nvm_execute_command+0x90>)
    6896:	8810      	ldrh	r0, [r2, #0]
    6898:	8853      	ldrh	r3, [r2, #2]
    689a:	4343      	muls	r3, r0
    689c:	428b      	cmp	r3, r1
    689e:	d206      	bcs.n	68ae <nvm_execute_command+0x1e>
		&& !(address >= NVMCTRL_AUX0_ADDRESS && address <= NVMCTRL_AUX1_ADDRESS )){
    68a0:	2280      	movs	r2, #128	; 0x80
    68a2:	0192      	lsls	r2, r2, #6
		if (address >= ((uint32_t)NVMCTRL_RWW_EEPROM_SIZE + NVMCTRL_RWW_EEPROM_ADDR)
			|| address < NVMCTRL_RWW_EEPROM_ADDR){
			return STATUS_ERR_BAD_ADDRESS;
		}
#else
		return STATUS_ERR_BAD_ADDRESS;
    68a4:	2018      	movs	r0, #24
		&& !(address >= NVMCTRL_AUX0_ADDRESS && address <= NVMCTRL_AUX1_ADDRESS )){
    68a6:	4b1f      	ldr	r3, [pc, #124]	; (6924 <nvm_execute_command+0x94>)
    68a8:	18cb      	adds	r3, r1, r3
    68aa:	4293      	cmp	r3, r2
    68ac:	d80e      	bhi.n	68cc <nvm_execute_command+0x3c>

	/* Get a pointer to the module hardware instance */
	Nvmctrl *const nvm_module = NVMCTRL;

	/* Turn off cache before issuing flash commands */
	ctrlb_bak = nvm_module->CTRLB.reg;
    68ae:	4b1e      	ldr	r3, [pc, #120]	; (6928 <nvm_execute_command+0x98>)
    68b0:	685d      	ldr	r5, [r3, #4]
#if (SAMC20) || (SAMC21)
	nvm_module->CTRLB.reg = ((ctrlb_bak &(~(NVMCTRL_CTRLB_CACHEDIS(0x2))))
							| NVMCTRL_CTRLB_CACHEDIS(0x1));
#else
	nvm_module->CTRLB.reg = ctrlb_bak | NVMCTRL_CTRLB_CACHEDIS;
    68b2:	2280      	movs	r2, #128	; 0x80
    68b4:	02d2      	lsls	r2, r2, #11
    68b6:	432a      	orrs	r2, r5
    68b8:	605a      	str	r2, [r3, #4]
#endif

	/* Clear error flags */
	nvm_module->STATUS.reg = NVMCTRL_STATUS_MASK;
    68ba:	2220      	movs	r2, #32
    68bc:	32ff      	adds	r2, #255	; 0xff
    68be:	831a      	strh	r2, [r3, #24]
    68c0:	7d1b      	ldrb	r3, [r3, #20]

	/* Check if the module is busy */
	if (!nvm_is_ready()) {
    68c2:	07db      	lsls	r3, r3, #31
    68c4:	d403      	bmi.n	68ce <nvm_execute_command+0x3e>
		/* Restore the setting */
		nvm_module->CTRLB.reg = ctrlb_bak;
    68c6:	4b18      	ldr	r3, [pc, #96]	; (6928 <nvm_execute_command+0x98>)
    68c8:	605d      	str	r5, [r3, #4]
		return STATUS_BUSY;
    68ca:	2005      	movs	r0, #5

	/* Restore the setting */
	nvm_module->CTRLB.reg = ctrlb_bak;

	return STATUS_OK;
}
    68cc:	bd30      	pop	{r4, r5, pc}
	switch (command) {
    68ce:	2c45      	cmp	r4, #69	; 0x45
    68d0:	d822      	bhi.n	6918 <nvm_execute_command+0x88>
    68d2:	00a3      	lsls	r3, r4, #2
    68d4:	4a15      	ldr	r2, [pc, #84]	; (692c <nvm_execute_command+0x9c>)
    68d6:	58d3      	ldr	r3, [r2, r3]
    68d8:	469f      	mov	pc, r3
			if (nvm_module->STATUS.reg & NVMCTRL_STATUS_SB) {
    68da:	4b13      	ldr	r3, [pc, #76]	; (6928 <nvm_execute_command+0x98>)
    68dc:	8b1b      	ldrh	r3, [r3, #24]
    68de:	05db      	lsls	r3, r3, #23
    68e0:	d503      	bpl.n	68ea <nvm_execute_command+0x5a>
				nvm_module->CTRLB.reg = ctrlb_bak;
    68e2:	4b11      	ldr	r3, [pc, #68]	; (6928 <nvm_execute_command+0x98>)
    68e4:	605d      	str	r5, [r3, #4]
				return STATUS_ERR_IO;
    68e6:	2010      	movs	r0, #16
    68e8:	e7f0      	b.n	68cc <nvm_execute_command+0x3c>
			nvm_module->ADDR.reg = (uintptr_t)&NVM_MEMORY[address / 4];
    68ea:	0889      	lsrs	r1, r1, #2
    68ec:	0049      	lsls	r1, r1, #1
    68ee:	4b0e      	ldr	r3, [pc, #56]	; (6928 <nvm_execute_command+0x98>)
    68f0:	61d9      	str	r1, [r3, #28]
			break;
    68f2:	e003      	b.n	68fc <nvm_execute_command+0x6c>
			nvm_module->ADDR.reg = (uintptr_t)&NVM_MEMORY[address / 4];
    68f4:	0889      	lsrs	r1, r1, #2
    68f6:	0049      	lsls	r1, r1, #1
    68f8:	4b0b      	ldr	r3, [pc, #44]	; (6928 <nvm_execute_command+0x98>)
    68fa:	61d9      	str	r1, [r3, #28]
	nvm_module->CTRLA.reg = command | NVMCTRL_CTRLA_CMDEX_KEY;
    68fc:	20a5      	movs	r0, #165	; 0xa5
    68fe:	0200      	lsls	r0, r0, #8
    6900:	4304      	orrs	r4, r0
    6902:	4b09      	ldr	r3, [pc, #36]	; (6928 <nvm_execute_command+0x98>)
    6904:	801c      	strh	r4, [r3, #0]
    6906:	0019      	movs	r1, r3
	while (!nvm_is_ready()) {
    6908:	2201      	movs	r2, #1
    690a:	7d0b      	ldrb	r3, [r1, #20]
    690c:	4213      	tst	r3, r2
    690e:	d0fc      	beq.n	690a <nvm_execute_command+0x7a>
	nvm_module->CTRLB.reg = ctrlb_bak;
    6910:	4b05      	ldr	r3, [pc, #20]	; (6928 <nvm_execute_command+0x98>)
    6912:	605d      	str	r5, [r3, #4]
	return STATUS_OK;
    6914:	2000      	movs	r0, #0
    6916:	e7d9      	b.n	68cc <nvm_execute_command+0x3c>
			nvm_module->CTRLB.reg = ctrlb_bak;
    6918:	4b03      	ldr	r3, [pc, #12]	; (6928 <nvm_execute_command+0x98>)
    691a:	605d      	str	r5, [r3, #4]
			return STATUS_ERR_INVALID_ARG;
    691c:	2017      	movs	r0, #23
    691e:	e7d5      	b.n	68cc <nvm_execute_command+0x3c>
    6920:	2000013c 	.word	0x2000013c
    6924:	ff7fc000 	.word	0xff7fc000
    6928:	41004000 	.word	0x41004000
    692c:	00015e54 	.word	0x00015e54

00006930 <nvm_write_buffer>:
 */
enum status_code nvm_write_buffer(
		const uint32_t destination_address,
		const uint8_t *buffer,
		uint16_t length)
{
    6930:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	bool is_rww_eeprom = false;
#endif

	/* Check if the destination address is valid */
	if (destination_address >
			((uint32_t)_nvm_dev.page_size * _nvm_dev.number_of_pages)) {
    6932:	4b25      	ldr	r3, [pc, #148]	; (69c8 <nvm_write_buffer+0x98>)
    6934:	881d      	ldrh	r5, [r3, #0]
    6936:	885b      	ldrh	r3, [r3, #2]
    6938:	436b      	muls	r3, r5
			|| destination_address < NVMCTRL_RWW_EEPROM_ADDR){
			return STATUS_ERR_BAD_ADDRESS;
		}
		is_rww_eeprom = true;
#else
		return STATUS_ERR_BAD_ADDRESS;
    693a:	2418      	movs	r4, #24
	if (destination_address >
    693c:	4283      	cmp	r3, r0
    693e:	d201      	bcs.n	6944 <nvm_write_buffer+0x14>
				destination_address, 0);
#endif
	}

	return STATUS_OK;
}
    6940:	0020      	movs	r0, r4
    6942:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if (destination_address & (_nvm_dev.page_size - 1)) {
    6944:	1e6b      	subs	r3, r5, #1
    6946:	4218      	tst	r0, r3
    6948:	d1fa      	bne.n	6940 <nvm_write_buffer+0x10>
		return STATUS_ERR_INVALID_ARG;
    694a:	3c01      	subs	r4, #1
	if (length > _nvm_dev.page_size) {
    694c:	4295      	cmp	r5, r2
    694e:	d3f7      	bcc.n	6940 <nvm_write_buffer+0x10>
    6950:	4b1e      	ldr	r3, [pc, #120]	; (69cc <nvm_write_buffer+0x9c>)
    6952:	7d1b      	ldrb	r3, [r3, #20]
		return STATUS_BUSY;
    6954:	3c12      	subs	r4, #18
	if (!nvm_is_ready()) {
    6956:	07db      	lsls	r3, r3, #31
    6958:	d5f2      	bpl.n	6940 <nvm_write_buffer+0x10>
	nvm_module->CTRLA.reg = NVM_COMMAND_PAGE_BUFFER_CLEAR | NVMCTRL_CTRLA_CMDEX_KEY;
    695a:	4c1d      	ldr	r4, [pc, #116]	; (69d0 <nvm_write_buffer+0xa0>)
    695c:	4b1b      	ldr	r3, [pc, #108]	; (69cc <nvm_write_buffer+0x9c>)
    695e:	801c      	strh	r4, [r3, #0]
    6960:	001d      	movs	r5, r3
	while (!nvm_is_ready()) {
    6962:	2401      	movs	r4, #1
    6964:	7d2b      	ldrb	r3, [r5, #20]
    6966:	4223      	tst	r3, r4
    6968:	d0fc      	beq.n	6964 <nvm_write_buffer+0x34>
	nvm_module->STATUS.reg = NVMCTRL_STATUS_MASK;
    696a:	2420      	movs	r4, #32
    696c:	34ff      	adds	r4, #255	; 0xff
    696e:	4b17      	ldr	r3, [pc, #92]	; (69cc <nvm_write_buffer+0x9c>)
    6970:	831c      	strh	r4, [r3, #24]
	for (uint16_t i = 0; i < length; i += 2) {
    6972:	2a00      	cmp	r2, #0
    6974:	d022      	beq.n	69bc <nvm_write_buffer+0x8c>
    6976:	2301      	movs	r3, #1
    6978:	0005      	movs	r5, r0
    697a:	439d      	bics	r5, r3
    697c:	2300      	movs	r3, #0
		if (i < (length - 1)) {
    697e:	1e57      	subs	r7, r2, #1
    6980:	e009      	b.n	6996 <nvm_write_buffer+0x66>
			data |= (buffer[i + 1] << 8);
    6982:	18ce      	adds	r6, r1, r3
    6984:	7876      	ldrb	r6, [r6, #1]
    6986:	0236      	lsls	r6, r6, #8
    6988:	4334      	orrs	r4, r6
		NVM_MEMORY[nvm_address++] = data;
    698a:	802c      	strh	r4, [r5, #0]
	for (uint16_t i = 0; i < length; i += 2) {
    698c:	3302      	adds	r3, #2
    698e:	b29b      	uxth	r3, r3
    6990:	3502      	adds	r5, #2
    6992:	429a      	cmp	r2, r3
    6994:	d904      	bls.n	69a0 <nvm_write_buffer+0x70>
		data = buffer[i];
    6996:	5ccc      	ldrb	r4, [r1, r3]
		if (i < (length - 1)) {
    6998:	42bb      	cmp	r3, r7
    699a:	dbf2      	blt.n	6982 <nvm_write_buffer+0x52>
		data = buffer[i];
    699c:	b2a4      	uxth	r4, r4
    699e:	e7f4      	b.n	698a <nvm_write_buffer+0x5a>
	if ((_nvm_dev.manual_page_write == false) && (length < NVMCTRL_PAGE_SIZE)) {
    69a0:	4b09      	ldr	r3, [pc, #36]	; (69c8 <nvm_write_buffer+0x98>)
    69a2:	791b      	ldrb	r3, [r3, #4]
	return STATUS_OK;
    69a4:	2400      	movs	r4, #0
	if ((_nvm_dev.manual_page_write == false) && (length < NVMCTRL_PAGE_SIZE)) {
    69a6:	2b00      	cmp	r3, #0
    69a8:	d1ca      	bne.n	6940 <nvm_write_buffer+0x10>
    69aa:	2a3f      	cmp	r2, #63	; 0x3f
    69ac:	d8c8      	bhi.n	6940 <nvm_write_buffer+0x10>
		return nvm_execute_command(NVM_COMMAND_WRITE_PAGE,
    69ae:	2200      	movs	r2, #0
    69b0:	0001      	movs	r1, r0
    69b2:	2004      	movs	r0, #4
    69b4:	4b07      	ldr	r3, [pc, #28]	; (69d4 <nvm_write_buffer+0xa4>)
    69b6:	4798      	blx	r3
    69b8:	0004      	movs	r4, r0
    69ba:	e7c1      	b.n	6940 <nvm_write_buffer+0x10>
	if ((_nvm_dev.manual_page_write == false) && (length < NVMCTRL_PAGE_SIZE)) {
    69bc:	4b02      	ldr	r3, [pc, #8]	; (69c8 <nvm_write_buffer+0x98>)
    69be:	791b      	ldrb	r3, [r3, #4]
	return STATUS_OK;
    69c0:	2400      	movs	r4, #0
	if ((_nvm_dev.manual_page_write == false) && (length < NVMCTRL_PAGE_SIZE)) {
    69c2:	2b00      	cmp	r3, #0
    69c4:	d0f3      	beq.n	69ae <nvm_write_buffer+0x7e>
    69c6:	e7bb      	b.n	6940 <nvm_write_buffer+0x10>
    69c8:	2000013c 	.word	0x2000013c
    69cc:	41004000 	.word	0x41004000
    69d0:	ffffa544 	.word	0xffffa544
    69d4:	00006891 	.word	0x00006891

000069d8 <nvm_erase_row>:
		bool is_rww_eeprom = false;
#endif

	/* Check if the row address is valid */
	if (row_address >
			((uint32_t)_nvm_dev.page_size * _nvm_dev.number_of_pages)) {
    69d8:	4b13      	ldr	r3, [pc, #76]	; (6a28 <nvm_erase_row+0x50>)
    69da:	881a      	ldrh	r2, [r3, #0]
    69dc:	885b      	ldrh	r3, [r3, #2]
    69de:	4353      	muls	r3, r2
			|| row_address < NVMCTRL_RWW_EEPROM_ADDR){
			return STATUS_ERR_BAD_ADDRESS;
		}
		is_rww_eeprom = true;
#else
		return STATUS_ERR_BAD_ADDRESS;
    69e0:	2118      	movs	r1, #24
	if (row_address >
    69e2:	4283      	cmp	r3, r0
    69e4:	d201      	bcs.n	69ea <nvm_erase_row+0x12>
	if ((enum nvm_error)(nvm_module->STATUS.reg & NVM_ERRORS_MASK) != NVM_ERROR_NONE) {
		return STATUS_ABORTED;
	}

	return STATUS_OK;
}
    69e6:	0008      	movs	r0, r1
    69e8:	4770      	bx	lr
	if (row_address & ((_nvm_dev.page_size * NVMCTRL_ROW_PAGES) - 1)) {
    69ea:	0092      	lsls	r2, r2, #2
    69ec:	3a01      	subs	r2, #1
    69ee:	4210      	tst	r0, r2
    69f0:	d1f9      	bne.n	69e6 <nvm_erase_row+0xe>
    69f2:	4b0e      	ldr	r3, [pc, #56]	; (6a2c <nvm_erase_row+0x54>)
    69f4:	7d1b      	ldrb	r3, [r3, #20]
		return STATUS_BUSY;
    69f6:	3913      	subs	r1, #19
	if (!nvm_is_ready()) {
    69f8:	07db      	lsls	r3, r3, #31
    69fa:	d5f4      	bpl.n	69e6 <nvm_erase_row+0xe>
	nvm_module->STATUS.reg = NVMCTRL_STATUS_MASK;
    69fc:	4b0b      	ldr	r3, [pc, #44]	; (6a2c <nvm_erase_row+0x54>)
    69fe:	2220      	movs	r2, #32
    6a00:	32ff      	adds	r2, #255	; 0xff
    6a02:	831a      	strh	r2, [r3, #24]
	nvm_module->ADDR.reg  = (uintptr_t)&NVM_MEMORY[row_address / 4];
    6a04:	0880      	lsrs	r0, r0, #2
    6a06:	0040      	lsls	r0, r0, #1
    6a08:	61d8      	str	r0, [r3, #28]
	nvm_module->CTRLA.reg = NVM_COMMAND_ERASE_ROW | NVMCTRL_CTRLA_CMDEX_KEY;
    6a0a:	4a09      	ldr	r2, [pc, #36]	; (6a30 <nvm_erase_row+0x58>)
    6a0c:	801a      	strh	r2, [r3, #0]
    6a0e:	0019      	movs	r1, r3
	while (!nvm_is_ready()) {
    6a10:	2201      	movs	r2, #1
    6a12:	7d0b      	ldrb	r3, [r1, #20]
    6a14:	4213      	tst	r3, r2
    6a16:	d0fc      	beq.n	6a12 <nvm_erase_row+0x3a>
	if ((enum nvm_error)(nvm_module->STATUS.reg & NVM_ERRORS_MASK) != NVM_ERROR_NONE) {
    6a18:	4b04      	ldr	r3, [pc, #16]	; (6a2c <nvm_erase_row+0x54>)
    6a1a:	8b19      	ldrh	r1, [r3, #24]
    6a1c:	201c      	movs	r0, #28
    6a1e:	4001      	ands	r1, r0
	return STATUS_OK;
    6a20:	1e48      	subs	r0, r1, #1
    6a22:	4181      	sbcs	r1, r0
    6a24:	0089      	lsls	r1, r1, #2
    6a26:	e7de      	b.n	69e6 <nvm_erase_row+0xe>
    6a28:	2000013c 	.word	0x2000013c
    6a2c:	41004000 	.word	0x41004000
    6a30:	ffffa502 	.word	0xffffa502

00006a34 <port_pin_set_config>:
 *  \param[in] config    Configuration settings for the pin
 */
void port_pin_set_config(
		const uint8_t gpio_pin,
		const struct port_config *const config)
{
    6a34:	b500      	push	{lr}
    6a36:	b083      	sub	sp, #12
	config->mux_position = SYSTEM_PINMUX_GPIO;
    6a38:	ab01      	add	r3, sp, #4
    6a3a:	2280      	movs	r2, #128	; 0x80
    6a3c:	701a      	strb	r2, [r3, #0]

	struct system_pinmux_config pinmux_config;
	system_pinmux_get_config_defaults(&pinmux_config);

	pinmux_config.mux_position = SYSTEM_PINMUX_GPIO;
	pinmux_config.direction    = (enum system_pinmux_pin_dir)config->direction;
    6a3e:	780a      	ldrb	r2, [r1, #0]
    6a40:	705a      	strb	r2, [r3, #1]
	pinmux_config.input_pull   = (enum system_pinmux_pin_pull)config->input_pull;
    6a42:	784a      	ldrb	r2, [r1, #1]
    6a44:	709a      	strb	r2, [r3, #2]
	pinmux_config.powersave    = config->powersave;
    6a46:	788a      	ldrb	r2, [r1, #2]
    6a48:	70da      	strb	r2, [r3, #3]

	system_pinmux_pin_set_config(gpio_pin, &pinmux_config);
    6a4a:	0019      	movs	r1, r3
    6a4c:	4b01      	ldr	r3, [pc, #4]	; (6a54 <port_pin_set_config+0x20>)
    6a4e:	4798      	blx	r3
}
    6a50:	b003      	add	sp, #12
    6a52:	bd00      	pop	{pc}
    6a54:	000086c9 	.word	0x000086c9

00006a58 <_i2c_master_wait_for_sync>:
{
	/* Sanity check */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_hw = &(module->hw->I2CM);
    6a58:	6801      	ldr	r1, [r0, #0]

#if defined(FEATURE_SERCOM_SYNCBUSY_SCHEME_VERSION_1)
	return (i2c_hw->STATUS.reg & SERCOM_I2CM_STATUS_SYNCBUSY);
#elif defined(FEATURE_SERCOM_SYNCBUSY_SCHEME_VERSION_2)
	return (i2c_hw->SYNCBUSY.reg & SERCOM_I2CM_SYNCBUSY_MASK);
    6a5a:	2207      	movs	r2, #7
    6a5c:	69cb      	ldr	r3, [r1, #28]
		const struct i2c_master_module *const module)
{
	/* Sanity check */
	Assert(module);

	while (i2c_master_is_syncing(module)) {
    6a5e:	421a      	tst	r2, r3
    6a60:	d1fc      	bne.n	6a5c <_i2c_master_wait_for_sync+0x4>
		/* Wait for I2C module to sync. */
	}
}
    6a62:	4770      	bx	lr

00006a64 <i2c_master_init>:
 */
enum status_code i2c_master_init(
		struct i2c_master_module *const module,
		Sercom *const hw,
		const struct i2c_master_config *const config)
{
    6a64:	b5f0      	push	{r4, r5, r6, r7, lr}
    6a66:	46d6      	mov	lr, sl
    6a68:	464f      	mov	r7, r9
    6a6a:	4646      	mov	r6, r8
    6a6c:	b5c0      	push	{r6, r7, lr}
    6a6e:	b08a      	sub	sp, #40	; 0x28
    6a70:	0006      	movs	r6, r0
    6a72:	000f      	movs	r7, r1
    6a74:	0014      	movs	r4, r2
	Assert(module);
	Assert(hw);
	Assert(config);

	/* Initialize software module */
	module->hw = hw;
    6a76:	6031      	str	r1, [r6, #0]

	SercomI2cm *const i2c_module = &(module->hw->I2CM);

	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    6a78:	0008      	movs	r0, r1
    6a7a:	4b97      	ldr	r3, [pc, #604]	; (6cd8 <i2c_master_init+0x274>)
    6a7c:	4798      	blx	r3
			break;

		case SYSTEM_CLOCK_APB_APBC:
			PM->APBCMASK.reg |= mask;
    6a7e:	4a97      	ldr	r2, [pc, #604]	; (6cdc <i2c_master_init+0x278>)
    6a80:	6a11      	ldr	r1, [r2, #32]
		gclk_index   = SERCOM5_GCLK_ID_CORE;
	} else {
		gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
	}
#else
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
    6a82:	1c85      	adds	r5, r0, #2
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBD, 1 << pm_index);
	} else {
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
	}
#else
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
    6a84:	2301      	movs	r3, #1
    6a86:	40ab      	lsls	r3, r5
    6a88:	430b      	orrs	r3, r1
    6a8a:	6213      	str	r3, [r2, #32]
#endif

	/* Set up the GCLK for the module */
	struct system_gclk_chan_config gclk_chan_conf;
	system_gclk_chan_get_config_defaults(&gclk_chan_conf);
	gclk_chan_conf.source_generator = config->generator_source;
    6a8c:	a909      	add	r1, sp, #36	; 0x24
    6a8e:	7b23      	ldrb	r3, [r4, #12]
    6a90:	700b      	strb	r3, [r1, #0]
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
    6a92:	3014      	adds	r0, #20
	system_gclk_chan_set_config(gclk_index, &gclk_chan_conf);
    6a94:	b2c5      	uxtb	r5, r0
    6a96:	0028      	movs	r0, r5
    6a98:	4b91      	ldr	r3, [pc, #580]	; (6ce0 <i2c_master_init+0x27c>)
    6a9a:	4798      	blx	r3
	system_gclk_chan_enable(gclk_index);
    6a9c:	0028      	movs	r0, r5
    6a9e:	4b91      	ldr	r3, [pc, #580]	; (6ce4 <i2c_master_init+0x280>)
    6aa0:	4798      	blx	r3
	sercom_set_gclk_generator(config->generator_source, false);
    6aa2:	7b20      	ldrb	r0, [r4, #12]
    6aa4:	2100      	movs	r1, #0
    6aa6:	4b90      	ldr	r3, [pc, #576]	; (6ce8 <i2c_master_init+0x284>)
    6aa8:	4798      	blx	r3

	/* Check if module is enabled. */
	if (i2c_module->CTRLA.reg & SERCOM_I2CM_CTRLA_ENABLE) {
    6aaa:	683b      	ldr	r3, [r7, #0]
		return STATUS_ERR_DENIED;
    6aac:	201c      	movs	r0, #28
	if (i2c_module->CTRLA.reg & SERCOM_I2CM_CTRLA_ENABLE) {
    6aae:	079b      	lsls	r3, r3, #30
    6ab0:	d505      	bpl.n	6abe <i2c_master_init+0x5a>
	/* Set sercom module to operate in I2C master mode. */
	i2c_module->CTRLA.reg = SERCOM_I2CM_CTRLA_MODE(0x5);

	/* Set config and return status. */
	return _i2c_master_set_config(module, config);
}
    6ab2:	b00a      	add	sp, #40	; 0x28
    6ab4:	bc1c      	pop	{r2, r3, r4}
    6ab6:	4690      	mov	r8, r2
    6ab8:	4699      	mov	r9, r3
    6aba:	46a2      	mov	sl, r4
    6abc:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (i2c_module->CTRLA.reg & SERCOM_I2CM_CTRLA_SWRST) {
    6abe:	683b      	ldr	r3, [r7, #0]
		return STATUS_BUSY;
    6ac0:	3817      	subs	r0, #23
	if (i2c_module->CTRLA.reg & SERCOM_I2CM_CTRLA_SWRST) {
    6ac2:	07db      	lsls	r3, r3, #31
    6ac4:	d4f5      	bmi.n	6ab2 <i2c_master_init+0x4e>
	i2c_module->CTRLA.reg = SERCOM_I2CM_CTRLA_MODE(0x5);
    6ac6:	2314      	movs	r3, #20
    6ac8:	603b      	str	r3, [r7, #0]
	SercomI2cm *const i2c_module = &(module->hw->I2CM);
    6aca:	6833      	ldr	r3, [r6, #0]
    6acc:	4698      	mov	r8, r3
	uint8_t sercom_index = _sercom_get_sercom_inst_index(sercom_hw);
    6ace:	0018      	movs	r0, r3
    6ad0:	4b81      	ldr	r3, [pc, #516]	; (6cd8 <i2c_master_init+0x274>)
    6ad2:	4798      	blx	r3
    6ad4:	0005      	movs	r5, r0
    6ad6:	2380      	movs	r3, #128	; 0x80
    6ad8:	aa08      	add	r2, sp, #32
    6ada:	7013      	strb	r3, [r2, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    6adc:	2300      	movs	r3, #0
    6ade:	7053      	strb	r3, [r2, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
    6ae0:	2201      	movs	r2, #1
    6ae2:	a908      	add	r1, sp, #32
    6ae4:	708a      	strb	r2, [r1, #2]
	config->powersave    = false;
    6ae6:	70cb      	strb	r3, [r1, #3]
	uint32_t pad0 = config->pinmux_pad0;
    6ae8:	69e0      	ldr	r0, [r4, #28]
	uint32_t pad1 = config->pinmux_pad1;
    6aea:	6a27      	ldr	r7, [r4, #32]
	if (pad0 == PINMUX_DEFAULT) {
    6aec:	2800      	cmp	r0, #0
    6aee:	d100      	bne.n	6af2 <i2c_master_init+0x8e>
    6af0:	e0af      	b.n	6c52 <i2c_master_init+0x1ee>
	pin_conf.mux_position = pad0 & 0xFFFF;
    6af2:	ab08      	add	r3, sp, #32
    6af4:	7018      	strb	r0, [r3, #0]
	pin_conf.direction    = SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK;
    6af6:	2302      	movs	r3, #2
    6af8:	aa08      	add	r2, sp, #32
    6afa:	7053      	strb	r3, [r2, #1]
	system_pinmux_pin_set_config(pad0 >> 16, &pin_conf);
    6afc:	0c00      	lsrs	r0, r0, #16
    6afe:	b2c0      	uxtb	r0, r0
    6b00:	0011      	movs	r1, r2
    6b02:	4b7a      	ldr	r3, [pc, #488]	; (6cec <i2c_master_init+0x288>)
    6b04:	4798      	blx	r3
	if (pad1 == PINMUX_DEFAULT) {
    6b06:	2f00      	cmp	r7, #0
    6b08:	d100      	bne.n	6b0c <i2c_master_init+0xa8>
    6b0a:	e0a7      	b.n	6c5c <i2c_master_init+0x1f8>
	pin_conf.mux_position = pad1 & 0xFFFF;
    6b0c:	ab08      	add	r3, sp, #32
    6b0e:	701f      	strb	r7, [r3, #0]
	pin_conf.direction    = SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK;
    6b10:	2302      	movs	r3, #2
    6b12:	aa08      	add	r2, sp, #32
    6b14:	7053      	strb	r3, [r2, #1]
	system_pinmux_pin_set_config(pad1 >> 16, &pin_conf);
    6b16:	0c3f      	lsrs	r7, r7, #16
    6b18:	b2f8      	uxtb	r0, r7
    6b1a:	0011      	movs	r1, r2
    6b1c:	4b73      	ldr	r3, [pc, #460]	; (6cec <i2c_master_init+0x288>)
    6b1e:	4798      	blx	r3
	module->unknown_bus_state_timeout = config->unknown_bus_state_timeout;
    6b20:	8aa3      	ldrh	r3, [r4, #20]
    6b22:	80f3      	strh	r3, [r6, #6]
	module->buffer_timeout = config->buffer_timeout;
    6b24:	8ae3      	ldrh	r3, [r4, #22]
    6b26:	8133      	strh	r3, [r6, #8]
	if (config->run_in_standby || system_is_debugger_present()) {
    6b28:	7e23      	ldrb	r3, [r4, #24]
		tmp_ctrla = SERCOM_I2CM_CTRLA_RUNSTDBY;
    6b2a:	2280      	movs	r2, #128	; 0x80
	if (config->run_in_standby || system_is_debugger_present()) {
    6b2c:	2b00      	cmp	r3, #0
    6b2e:	d104      	bne.n	6b3a <i2c_master_init+0xd6>
 * \retval false Debugger is not connected to the system
 *
 */
static inline bool system_is_debugger_present(void)
{
	return DSU->STATUSB.reg & DSU_STATUSB_DBGPRES;
    6b30:	4b6f      	ldr	r3, [pc, #444]	; (6cf0 <i2c_master_init+0x28c>)
    6b32:	789b      	ldrb	r3, [r3, #2]
    6b34:	079b      	lsls	r3, r3, #30
		tmp_ctrla = SERCOM_I2CM_CTRLA_RUNSTDBY;
    6b36:	0fdb      	lsrs	r3, r3, #31
    6b38:	01da      	lsls	r2, r3, #7
	tmp_ctrla |= config->transfer_speed;
    6b3a:	68a1      	ldr	r1, [r4, #8]
    6b3c:	6923      	ldr	r3, [r4, #16]
    6b3e:	430b      	orrs	r3, r1
    6b40:	4313      	orrs	r3, r2
	if (config->scl_low_timeout) {
    6b42:	2224      	movs	r2, #36	; 0x24
    6b44:	5ca2      	ldrb	r2, [r4, r2]
    6b46:	2a00      	cmp	r2, #0
    6b48:	d002      	beq.n	6b50 <i2c_master_init+0xec>
		tmp_ctrla |= SERCOM_I2CM_CTRLA_LOWTOUTEN;
    6b4a:	2280      	movs	r2, #128	; 0x80
    6b4c:	05d2      	lsls	r2, r2, #23
    6b4e:	4313      	orrs	r3, r2
		tmp_ctrla |= config->inactive_timeout;
    6b50:	6aa2      	ldr	r2, [r4, #40]	; 0x28
    6b52:	4313      	orrs	r3, r2
	if (config->scl_stretch_only_after_ack_bit || (config->transfer_speed == I2C_MASTER_SPEED_HIGH_SPEED)) {
    6b54:	222c      	movs	r2, #44	; 0x2c
    6b56:	5ca2      	ldrb	r2, [r4, r2]
    6b58:	2a00      	cmp	r2, #0
    6b5a:	d103      	bne.n	6b64 <i2c_master_init+0x100>
    6b5c:	2280      	movs	r2, #128	; 0x80
    6b5e:	0492      	lsls	r2, r2, #18
    6b60:	4291      	cmp	r1, r2
    6b62:	d102      	bne.n	6b6a <i2c_master_init+0x106>
		tmp_ctrla |= SERCOM_I2CM_CTRLA_SCLSM;
    6b64:	2280      	movs	r2, #128	; 0x80
    6b66:	0512      	lsls	r2, r2, #20
    6b68:	4313      	orrs	r3, r2
	if (config->slave_scl_low_extend_timeout) {
    6b6a:	222d      	movs	r2, #45	; 0x2d
    6b6c:	5ca2      	ldrb	r2, [r4, r2]
    6b6e:	2a00      	cmp	r2, #0
    6b70:	d002      	beq.n	6b78 <i2c_master_init+0x114>
		tmp_ctrla |= SERCOM_I2CM_CTRLA_SEXTTOEN;
    6b72:	2280      	movs	r2, #128	; 0x80
    6b74:	0412      	lsls	r2, r2, #16
    6b76:	4313      	orrs	r3, r2
	if (config->master_scl_low_extend_timeout) {
    6b78:	222e      	movs	r2, #46	; 0x2e
    6b7a:	5ca2      	ldrb	r2, [r4, r2]
    6b7c:	2a00      	cmp	r2, #0
    6b7e:	d002      	beq.n	6b86 <i2c_master_init+0x122>
		tmp_ctrla |= SERCOM_I2CM_CTRLA_MEXTTOEN;
    6b80:	2280      	movs	r2, #128	; 0x80
    6b82:	03d2      	lsls	r2, r2, #15
    6b84:	4313      	orrs	r3, r2
	i2c_module->CTRLA.reg |= tmp_ctrla;
    6b86:	4642      	mov	r2, r8
    6b88:	6812      	ldr	r2, [r2, #0]
    6b8a:	4313      	orrs	r3, r2
    6b8c:	4642      	mov	r2, r8
    6b8e:	6013      	str	r3, [r2, #0]
	i2c_module->CTRLB.reg = SERCOM_I2CM_CTRLB_SMEN;
    6b90:	2380      	movs	r3, #128	; 0x80
    6b92:	005b      	lsls	r3, r3, #1
    6b94:	6053      	str	r3, [r2, #4]
	uint32_t fgclk       = system_gclk_chan_get_hz(SERCOM0_GCLK_ID_CORE + sercom_index);
    6b96:	0028      	movs	r0, r5
    6b98:	3014      	adds	r0, #20
    6b9a:	b2c0      	uxtb	r0, r0
    6b9c:	4b55      	ldr	r3, [pc, #340]	; (6cf4 <i2c_master_init+0x290>)
    6b9e:	4798      	blx	r3
    6ba0:	9007      	str	r0, [sp, #28]
	uint32_t fscl        = 1000 * config->baud_rate;
    6ba2:	23fa      	movs	r3, #250	; 0xfa
    6ba4:	009b      	lsls	r3, r3, #2
    6ba6:	6822      	ldr	r2, [r4, #0]
    6ba8:	435a      	muls	r2, r3
    6baa:	4691      	mov	r9, r2
	uint32_t fscl_hs     = 1000 * config->baud_rate_high_speed;
    6bac:	6863      	ldr	r3, [r4, #4]
    6bae:	469a      	mov	sl, r3
	tmp_baud = (int32_t)(div_ceil(
    6bb0:	4d51      	ldr	r5, [pc, #324]	; (6cf8 <i2c_master_init+0x294>)
    6bb2:	47a8      	blx	r5
    6bb4:	9000      	str	r0, [sp, #0]
    6bb6:	9101      	str	r1, [sp, #4]
    6bb8:	464b      	mov	r3, r9
    6bba:	0058      	lsls	r0, r3, #1
    6bbc:	47a8      	blx	r5
    6bbe:	9002      	str	r0, [sp, #8]
    6bc0:	9103      	str	r1, [sp, #12]
    6bc2:	8e20      	ldrh	r0, [r4, #48]	; 0x30
    6bc4:	47a8      	blx	r5
    6bc6:	9004      	str	r0, [sp, #16]
    6bc8:	9105      	str	r1, [sp, #20]
    6bca:	4f4c      	ldr	r7, [pc, #304]	; (6cfc <i2c_master_init+0x298>)
    6bcc:	4a4c      	ldr	r2, [pc, #304]	; (6d00 <i2c_master_init+0x29c>)
    6bce:	4b4d      	ldr	r3, [pc, #308]	; (6d04 <i2c_master_init+0x2a0>)
    6bd0:	9800      	ldr	r0, [sp, #0]
    6bd2:	9901      	ldr	r1, [sp, #4]
    6bd4:	47b8      	blx	r7
    6bd6:	0002      	movs	r2, r0
    6bd8:	000b      	movs	r3, r1
    6bda:	9804      	ldr	r0, [sp, #16]
    6bdc:	9905      	ldr	r1, [sp, #20]
    6bde:	47b8      	blx	r7
    6be0:	4e49      	ldr	r6, [pc, #292]	; (6d08 <i2c_master_init+0x2a4>)
    6be2:	2200      	movs	r2, #0
    6be4:	4b49      	ldr	r3, [pc, #292]	; (6d0c <i2c_master_init+0x2a8>)
    6be6:	47b0      	blx	r6
    6be8:	9004      	str	r0, [sp, #16]
    6bea:	9105      	str	r1, [sp, #20]
    6bec:	4648      	mov	r0, r9
    6bee:	47a8      	blx	r5
    6bf0:	0002      	movs	r2, r0
    6bf2:	000b      	movs	r3, r1
    6bf4:	9804      	ldr	r0, [sp, #16]
    6bf6:	9905      	ldr	r1, [sp, #20]
    6bf8:	47b8      	blx	r7
    6bfa:	0002      	movs	r2, r0
    6bfc:	000b      	movs	r3, r1
    6bfe:	4d44      	ldr	r5, [pc, #272]	; (6d10 <i2c_master_init+0x2ac>)
    6c00:	9800      	ldr	r0, [sp, #0]
    6c02:	9901      	ldr	r1, [sp, #4]
    6c04:	47a8      	blx	r5
    6c06:	9a02      	ldr	r2, [sp, #8]
    6c08:	9b03      	ldr	r3, [sp, #12]
    6c0a:	47b0      	blx	r6
    6c0c:	2200      	movs	r2, #0
    6c0e:	4b41      	ldr	r3, [pc, #260]	; (6d14 <i2c_master_init+0x2b0>)
    6c10:	47a8      	blx	r5
    6c12:	9a02      	ldr	r2, [sp, #8]
    6c14:	9b03      	ldr	r3, [sp, #12]
    6c16:	4d40      	ldr	r5, [pc, #256]	; (6d18 <i2c_master_init+0x2b4>)
    6c18:	47a8      	blx	r5
    6c1a:	4b40      	ldr	r3, [pc, #256]	; (6d1c <i2c_master_init+0x2b8>)
    6c1c:	4798      	blx	r3
    6c1e:	0005      	movs	r5, r0
	if (config->transfer_speed == I2C_MASTER_SPEED_HIGH_SPEED) {
    6c20:	2380      	movs	r3, #128	; 0x80
    6c22:	049b      	lsls	r3, r3, #18
    6c24:	68a2      	ldr	r2, [r4, #8]
    6c26:	429a      	cmp	r2, r3
    6c28:	d01e      	beq.n	6c68 <i2c_master_init+0x204>
	if (tmp_baud > 255 || tmp_baud < 0 || tmp_baud_hs > 255 || tmp_baud_hs < 0) {
    6c2a:	0003      	movs	r3, r0
    6c2c:	2040      	movs	r0, #64	; 0x40
    6c2e:	2dff      	cmp	r5, #255	; 0xff
    6c30:	d900      	bls.n	6c34 <i2c_master_init+0x1d0>
    6c32:	e73e      	b.n	6ab2 <i2c_master_init+0x4e>
	int32_t tmp_baudlow_hs = 0;
    6c34:	2400      	movs	r4, #0
	int32_t tmp_baud_hs = 0;
    6c36:	2000      	movs	r0, #0
		i2c_module->BAUD.reg = SERCOM_I2CM_BAUD_BAUD(tmp_baud) |
    6c38:	25ff      	movs	r5, #255	; 0xff
    6c3a:	401d      	ands	r5, r3
			SERCOM_I2CM_BAUD_HSBAUD(tmp_baud_hs) | SERCOM_I2CM_BAUD_HSBAUDLOW(tmp_baudlow_hs);
    6c3c:	0624      	lsls	r4, r4, #24
    6c3e:	4325      	orrs	r5, r4
    6c40:	0400      	lsls	r0, r0, #16
    6c42:	23ff      	movs	r3, #255	; 0xff
    6c44:	041b      	lsls	r3, r3, #16
    6c46:	4018      	ands	r0, r3
    6c48:	4305      	orrs	r5, r0
		i2c_module->BAUD.reg = SERCOM_I2CM_BAUD_BAUD(tmp_baud) |
    6c4a:	4643      	mov	r3, r8
    6c4c:	60dd      	str	r5, [r3, #12]
	enum status_code tmp_status_code = STATUS_OK;
    6c4e:	2000      	movs	r0, #0
    6c50:	e72f      	b.n	6ab2 <i2c_master_init+0x4e>
		pad0 = _sercom_get_default_pad(sercom_hw, 0);
    6c52:	2100      	movs	r1, #0
    6c54:	4640      	mov	r0, r8
    6c56:	4b32      	ldr	r3, [pc, #200]	; (6d20 <i2c_master_init+0x2bc>)
    6c58:	4798      	blx	r3
    6c5a:	e74a      	b.n	6af2 <i2c_master_init+0x8e>
		pad1 = _sercom_get_default_pad(sercom_hw, 1);
    6c5c:	2101      	movs	r1, #1
    6c5e:	4640      	mov	r0, r8
    6c60:	4b2f      	ldr	r3, [pc, #188]	; (6d20 <i2c_master_init+0x2bc>)
    6c62:	4798      	blx	r3
    6c64:	0007      	movs	r7, r0
    6c66:	e751      	b.n	6b0c <i2c_master_init+0xa8>
	uint32_t fscl_hs     = 1000 * config->baud_rate_high_speed;
    6c68:	26fa      	movs	r6, #250	; 0xfa
    6c6a:	00b6      	lsls	r6, r6, #2
    6c6c:	4653      	mov	r3, sl
    6c6e:	435e      	muls	r6, r3
		tmp_baudlow_hs = (int32_t)((fgclk * 2.0) / (3.0 * fscl_hs) - 1);
    6c70:	9800      	ldr	r0, [sp, #0]
    6c72:	9901      	ldr	r1, [sp, #4]
    6c74:	0002      	movs	r2, r0
    6c76:	000b      	movs	r3, r1
    6c78:	4c23      	ldr	r4, [pc, #140]	; (6d08 <i2c_master_init+0x2a4>)
    6c7a:	47a0      	blx	r4
    6c7c:	9000      	str	r0, [sp, #0]
    6c7e:	9101      	str	r1, [sp, #4]
    6c80:	0030      	movs	r0, r6
    6c82:	4b1d      	ldr	r3, [pc, #116]	; (6cf8 <i2c_master_init+0x294>)
    6c84:	4798      	blx	r3
    6c86:	2200      	movs	r2, #0
    6c88:	4b26      	ldr	r3, [pc, #152]	; (6d24 <i2c_master_init+0x2c0>)
    6c8a:	47b8      	blx	r7
    6c8c:	0002      	movs	r2, r0
    6c8e:	000b      	movs	r3, r1
    6c90:	9800      	ldr	r0, [sp, #0]
    6c92:	9901      	ldr	r1, [sp, #4]
    6c94:	4c20      	ldr	r4, [pc, #128]	; (6d18 <i2c_master_init+0x2b4>)
    6c96:	47a0      	blx	r4
    6c98:	2200      	movs	r2, #0
    6c9a:	4b1e      	ldr	r3, [pc, #120]	; (6d14 <i2c_master_init+0x2b0>)
    6c9c:	4c1c      	ldr	r4, [pc, #112]	; (6d10 <i2c_master_init+0x2ac>)
    6c9e:	47a0      	blx	r4
    6ca0:	4b1e      	ldr	r3, [pc, #120]	; (6d1c <i2c_master_init+0x2b8>)
    6ca2:	4798      	blx	r3
    6ca4:	1e04      	subs	r4, r0, #0
		if (tmp_baudlow_hs) {
    6ca6:	d00c      	beq.n	6cc2 <i2c_master_init+0x25e>
			tmp_baud_hs = (int32_t)(fgclk / fscl_hs) - 2 - tmp_baudlow_hs;
    6ca8:	0031      	movs	r1, r6
    6caa:	9807      	ldr	r0, [sp, #28]
    6cac:	4b1e      	ldr	r3, [pc, #120]	; (6d28 <i2c_master_init+0x2c4>)
    6cae:	4798      	blx	r3
    6cb0:	3802      	subs	r0, #2
    6cb2:	1b00      	subs	r0, r0, r4
	if (tmp_baud > 255 || tmp_baud < 0 || tmp_baud_hs > 255 || tmp_baud_hs < 0) {
    6cb4:	002b      	movs	r3, r5
    6cb6:	2dff      	cmp	r5, #255	; 0xff
    6cb8:	d80c      	bhi.n	6cd4 <i2c_master_init+0x270>
    6cba:	28ff      	cmp	r0, #255	; 0xff
    6cbc:	d9bc      	bls.n	6c38 <i2c_master_init+0x1d4>
    6cbe:	2040      	movs	r0, #64	; 0x40
    6cc0:	e6f7      	b.n	6ab2 <i2c_master_init+0x4e>
			tmp_baud_hs = (int32_t)(div_ceil(fgclk, 2 * fscl_hs)) - 1;
    6cc2:	0071      	lsls	r1, r6, #1
    6cc4:	1e48      	subs	r0, r1, #1
    6cc6:	9b07      	ldr	r3, [sp, #28]
    6cc8:	469c      	mov	ip, r3
    6cca:	4460      	add	r0, ip
    6ccc:	4b16      	ldr	r3, [pc, #88]	; (6d28 <i2c_master_init+0x2c4>)
    6cce:	4798      	blx	r3
    6cd0:	3801      	subs	r0, #1
    6cd2:	e7ef      	b.n	6cb4 <i2c_master_init+0x250>
	if (tmp_baud > 255 || tmp_baud < 0 || tmp_baud_hs > 255 || tmp_baud_hs < 0) {
    6cd4:	2040      	movs	r0, #64	; 0x40
    6cd6:	e6ec      	b.n	6ab2 <i2c_master_init+0x4e>
    6cd8:	000073cd 	.word	0x000073cd
    6cdc:	40000400 	.word	0x40000400
    6ce0:	000085d1 	.word	0x000085d1
    6ce4:	00008545 	.word	0x00008545
    6ce8:	00007209 	.word	0x00007209
    6cec:	000086c9 	.word	0x000086c9
    6cf0:	41002000 	.word	0x41002000
    6cf4:	000085ed 	.word	0x000085ed
    6cf8:	00014b71 	.word	0x00014b71
    6cfc:	00013fdd 	.word	0x00013fdd
    6d00:	e826d695 	.word	0xe826d695
    6d04:	3e112e0b 	.word	0x3e112e0b
    6d08:	00013355 	.word	0x00013355
    6d0c:	40240000 	.word	0x40240000
    6d10:	000144dd 	.word	0x000144dd
    6d14:	3ff00000 	.word	0x3ff00000
    6d18:	00013975 	.word	0x00013975
    6d1c:	00014b09 	.word	0x00014b09
    6d20:	00007255 	.word	0x00007255
    6d24:	40080000 	.word	0x40080000
    6d28:	00012469 	.word	0x00012469

00006d2c <i2c_master_reset>:
 * Reset the module to hardware defaults.
 *
 * \param[in,out] module Pointer to software module structure
 */
void i2c_master_reset(struct i2c_master_module *const module)
{
    6d2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    6d2e:	0004      	movs	r4, r0
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
    6d30:	6807      	ldr	r7, [r0, #0]

	/* Wait for sync */
	_i2c_master_wait_for_sync(module);
    6d32:	4e08      	ldr	r6, [pc, #32]	; (6d54 <i2c_master_reset+0x28>)
    6d34:	47b0      	blx	r6
{
	/* Sanity check of arguments */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
    6d36:	6825      	ldr	r5, [r4, #0]
		/* Disable module interrupts */
		system_interrupt_disable(_sercom_get_interrupt_vector(module->hw));
#endif

	/* Wait for module to sync */
	_i2c_master_wait_for_sync(module);
    6d38:	0020      	movs	r0, r4
    6d3a:	47b0      	blx	r6

	/* Disbale interrupt */
	i2c_module->INTENCLR.reg = SERCOM_I2CM_INTENCLR_MASK;
    6d3c:	2383      	movs	r3, #131	; 0x83
    6d3e:	752b      	strb	r3, [r5, #20]
	/* Clear interrupt flag */
	i2c_module->INTFLAG.reg = SERCOM_I2CM_INTFLAG_MASK;
    6d40:	762b      	strb	r3, [r5, #24]

	/* Disable module */
	i2c_module->CTRLA.reg &= ~SERCOM_I2CM_CTRLA_ENABLE;
    6d42:	682b      	ldr	r3, [r5, #0]
    6d44:	2202      	movs	r2, #2
    6d46:	4393      	bics	r3, r2
    6d48:	602b      	str	r3, [r5, #0]
	system_interrupt_clear_pending(_sercom_get_interrupt_vector(module->hw));
	system_interrupt_leave_critical_section();
#endif

	/* Wait for sync */
	_i2c_master_wait_for_sync(module);
    6d4a:	0020      	movs	r0, r4
    6d4c:	47b0      	blx	r6

	/* Reset module */
	i2c_module->CTRLA.reg = SERCOM_I2CM_CTRLA_SWRST;
    6d4e:	2301      	movs	r3, #1
    6d50:	603b      	str	r3, [r7, #0]
}
    6d52:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    6d54:	00006a59 	.word	0x00006a59

00006d58 <_i2c_master_address_response>:
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
    6d58:	6803      	ldr	r3, [r0, #0]

	/* Check for error and ignore bus-error; workaround for BUSSTATE stuck in
	 * BUSY */
	if (i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_SB) {
    6d5a:	7e1a      	ldrb	r2, [r3, #24]
    6d5c:	0792      	lsls	r2, r2, #30
    6d5e:	d507      	bpl.n	6d70 <_i2c_master_address_response+0x18>

		/* Clear write interrupt flag */
		i2c_module->INTFLAG.reg = SERCOM_I2CM_INTFLAG_SB;
    6d60:	2202      	movs	r2, #2
    6d62:	761a      	strb	r2, [r3, #24]

		/* Check arbitration. */
		if (i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_ARBLOST) {
    6d64:	8b5b      	ldrh	r3, [r3, #26]
    6d66:	079b      	lsls	r3, r3, #30
			/* Return packet collision. */
			return STATUS_ERR_PACKET_COLLISION;
    6d68:	2041      	movs	r0, #65	; 0x41

		/* Return bad address value. */
		return STATUS_ERR_BAD_ADDRESS;
	}

	return STATUS_OK;
    6d6a:	17db      	asrs	r3, r3, #31
    6d6c:	4018      	ands	r0, r3
}
    6d6e:	4770      	bx	lr
	} else if (i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_RXNACK) {
    6d70:	8b5a      	ldrh	r2, [r3, #26]
    6d72:	0752      	lsls	r2, r2, #29
    6d74:	d506      	bpl.n	6d84 <_i2c_master_address_response+0x2c>
		i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
    6d76:	6859      	ldr	r1, [r3, #4]
    6d78:	22c0      	movs	r2, #192	; 0xc0
    6d7a:	0292      	lsls	r2, r2, #10
    6d7c:	430a      	orrs	r2, r1
    6d7e:	605a      	str	r2, [r3, #4]
		return STATUS_ERR_BAD_ADDRESS;
    6d80:	2018      	movs	r0, #24
    6d82:	e7f4      	b.n	6d6e <_i2c_master_address_response+0x16>
	return STATUS_OK;
    6d84:	2000      	movs	r0, #0
    6d86:	e7f2      	b.n	6d6e <_i2c_master_address_response+0x16>

00006d88 <_i2c_master_wait_for_bus>:
 * \retval STATUS_ERR_TIMEOUT  If no response was given within specified timeout
 *                             period
 */
enum status_code _i2c_master_wait_for_bus(
		struct i2c_master_module *const module)
{
    6d88:	b530      	push	{r4, r5, lr}
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
    6d8a:	6802      	ldr	r2, [r0, #0]

	/* Wait for reply. */
	uint16_t timeout_counter = 0;
    6d8c:	2300      	movs	r3, #0
	while (!(i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_MB) &&
    6d8e:	2401      	movs	r4, #1
    6d90:	2502      	movs	r5, #2
    6d92:	7e11      	ldrb	r1, [r2, #24]
    6d94:	4221      	tst	r1, r4
    6d96:	d10b      	bne.n	6db0 <_i2c_master_wait_for_bus+0x28>
			!(i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_SB)) {
    6d98:	7e11      	ldrb	r1, [r2, #24]
	while (!(i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_MB) &&
    6d9a:	4229      	tst	r1, r5
    6d9c:	d106      	bne.n	6dac <_i2c_master_wait_for_bus+0x24>

		/* Check timeout condition. */
		if (++timeout_counter >= module->buffer_timeout) {
    6d9e:	3301      	adds	r3, #1
    6da0:	b29b      	uxth	r3, r3
    6da2:	8901      	ldrh	r1, [r0, #8]
    6da4:	4299      	cmp	r1, r3
    6da6:	d8f4      	bhi.n	6d92 <_i2c_master_wait_for_bus+0xa>
			return STATUS_ERR_TIMEOUT;
    6da8:	2012      	movs	r0, #18
    6daa:	e002      	b.n	6db2 <_i2c_master_wait_for_bus+0x2a>
		}
	}
	return STATUS_OK;
    6dac:	2000      	movs	r0, #0
    6dae:	e000      	b.n	6db2 <_i2c_master_wait_for_bus+0x2a>
    6db0:	2000      	movs	r0, #0
}
    6db2:	bd30      	pop	{r4, r5, pc}

00006db4 <_i2c_master_send_hs_master_code>:
 * \retval STATUS_OK           No error happen
 */
enum status_code _i2c_master_send_hs_master_code(
		struct i2c_master_module *const module,
		uint8_t hs_master_code)
{
    6db4:	b510      	push	{r4, lr}
	SercomI2cm *const i2c_module = &(module->hw->I2CM);
    6db6:	6804      	ldr	r4, [r0, #0]
	/* Return value. */
	enum status_code tmp_status;

	/* Set NACK for high speed code */
	i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
    6db8:	6862      	ldr	r2, [r4, #4]
    6dba:	2380      	movs	r3, #128	; 0x80
    6dbc:	02db      	lsls	r3, r3, #11
    6dbe:	4313      	orrs	r3, r2
    6dc0:	6063      	str	r3, [r4, #4]
	/* Send high speed code */
	i2c_module->ADDR.reg = hs_master_code;
    6dc2:	6261      	str	r1, [r4, #36]	; 0x24
	/* Wait for response on bus. */
	tmp_status = _i2c_master_wait_for_bus(module);
    6dc4:	4b02      	ldr	r3, [pc, #8]	; (6dd0 <_i2c_master_send_hs_master_code+0x1c>)
    6dc6:	4798      	blx	r3
	/* Clear write interrupt flag */
	i2c_module->INTFLAG.reg = SERCOM_I2CM_INTENCLR_MB;
    6dc8:	2301      	movs	r3, #1
    6dca:	7623      	strb	r3, [r4, #24]

	return tmp_status;
}
    6dcc:	bd10      	pop	{r4, pc}
    6dce:	46c0      	nop			; (mov r8, r8)
    6dd0:	00006d89 	.word	0x00006d89

00006dd4 <_i2c_master_read_packet>:
 *
 */
static enum status_code _i2c_master_read_packet(
		struct i2c_master_module *const module,
		struct i2c_master_packet *const packet)
{
    6dd4:	b5f0      	push	{r4, r5, r6, r7, lr}
    6dd6:	46de      	mov	lr, fp
    6dd8:	4657      	mov	r7, sl
    6dda:	464e      	mov	r6, r9
    6ddc:	4645      	mov	r5, r8
    6dde:	b5e0      	push	{r5, r6, r7, lr}
    6de0:	b083      	sub	sp, #12
    6de2:	0006      	movs	r6, r0
    6de4:	4689      	mov	r9, r1
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);
	Assert(packet);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
    6de6:	6805      	ldr	r5, [r0, #0]

	/* Return value. */
	enum status_code tmp_status;
	uint16_t tmp_data_length = packet->data_length;
    6de8:	884c      	ldrh	r4, [r1, #2]

	/* Written buffer counter. */
	uint16_t counter = 0;

	bool sclsm_flag = i2c_module->CTRLA.bit.SCLSM;
    6dea:	682b      	ldr	r3, [r5, #0]
    6dec:	011b      	lsls	r3, r3, #4
    6dee:	0fdb      	lsrs	r3, r3, #31
    6df0:	469a      	mov	sl, r3

	/* Switch to high speed mode */
	if (packet->high_speed) {
    6df2:	7a4b      	ldrb	r3, [r1, #9]
    6df4:	2b00      	cmp	r3, #0
    6df6:	d12b      	bne.n	6e50 <_i2c_master_read_packet+0x7c>
		_i2c_master_send_hs_master_code(module, packet->hs_master_code);
	}

	/* Set action to ACK. */
	i2c_module->CTRLB.reg &= ~SERCOM_I2CM_CTRLB_ACKACT;
    6df8:	686b      	ldr	r3, [r5, #4]
    6dfa:	4a58      	ldr	r2, [pc, #352]	; (6f5c <_i2c_master_read_packet+0x188>)
    6dfc:	4013      	ands	r3, r2
    6dfe:	606b      	str	r3, [r5, #4]

	/* Set address and direction bit. Will send start command on bus. */
	if (packet->ten_bit_address) {
    6e00:	464b      	mov	r3, r9
    6e02:	7a1b      	ldrb	r3, [r3, #8]
    6e04:	2b00      	cmp	r3, #0
    6e06:	d127      	bne.n	6e58 <_i2c_master_read_packet+0x84>
				I2C_TRANSFER_READ;
		} else {
			return tmp_status;
		}
	} else {
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_READ |
    6e08:	464b      	mov	r3, r9
    6e0a:	881b      	ldrh	r3, [r3, #0]
    6e0c:	005b      	lsls	r3, r3, #1
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos);
    6e0e:	464a      	mov	r2, r9
    6e10:	7a52      	ldrb	r2, [r2, #9]
    6e12:	0392      	lsls	r2, r2, #14
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_READ |
    6e14:	4313      	orrs	r3, r2
    6e16:	2201      	movs	r2, #1
    6e18:	4313      	orrs	r3, r2
    6e1a:	626b      	str	r3, [r5, #36]	; 0x24
	}

	/* Wait for response on bus. */
	tmp_status = _i2c_master_wait_for_bus(module);
    6e1c:	0030      	movs	r0, r6
    6e1e:	4b50      	ldr	r3, [pc, #320]	; (6f60 <_i2c_master_read_packet+0x18c>)
    6e20:	4798      	blx	r3
    6e22:	9001      	str	r0, [sp, #4]

	/* Set action to ack or nack. */
	if ((sclsm_flag) && (packet->data_length == 1)) {
    6e24:	4653      	mov	r3, sl
    6e26:	2b00      	cmp	r3, #0
    6e28:	d003      	beq.n	6e32 <_i2c_master_read_packet+0x5e>
    6e2a:	464b      	mov	r3, r9
    6e2c:	885b      	ldrh	r3, [r3, #2]
    6e2e:	2b01      	cmp	r3, #1
    6e30:	d03b      	beq.n	6eaa <_i2c_master_read_packet+0xd6>
		i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
	} else {
		i2c_module->CTRLB.reg &= ~SERCOM_I2CM_CTRLB_ACKACT;	
    6e32:	686b      	ldr	r3, [r5, #4]
    6e34:	4a49      	ldr	r2, [pc, #292]	; (6f5c <_i2c_master_read_packet+0x188>)
    6e36:	4013      	ands	r3, r2
    6e38:	606b      	str	r3, [r5, #4]
	}

	/* Check for address response error unless previous error is
	 * detected. */
	if (tmp_status == STATUS_OK) {
    6e3a:	9b01      	ldr	r3, [sp, #4]
    6e3c:	2b00      	cmp	r3, #0
    6e3e:	d03a      	beq.n	6eb6 <_i2c_master_read_packet+0xe2>
		_i2c_master_wait_for_sync(module);
		packet->data[counter] = i2c_module->DATA.reg;
	}

	return tmp_status;
}
    6e40:	9801      	ldr	r0, [sp, #4]
    6e42:	b003      	add	sp, #12
    6e44:	bc3c      	pop	{r2, r3, r4, r5}
    6e46:	4690      	mov	r8, r2
    6e48:	4699      	mov	r9, r3
    6e4a:	46a2      	mov	sl, r4
    6e4c:	46ab      	mov	fp, r5
    6e4e:	bdf0      	pop	{r4, r5, r6, r7, pc}
		_i2c_master_send_hs_master_code(module, packet->hs_master_code);
    6e50:	7a89      	ldrb	r1, [r1, #10]
    6e52:	4b44      	ldr	r3, [pc, #272]	; (6f64 <_i2c_master_read_packet+0x190>)
    6e54:	4798      	blx	r3
    6e56:	e7cf      	b.n	6df8 <_i2c_master_read_packet+0x24>
		i2c_module->ADDR.reg = (packet->address << 1) |
    6e58:	464b      	mov	r3, r9
    6e5a:	881b      	ldrh	r3, [r3, #0]
    6e5c:	005b      	lsls	r3, r3, #1
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
    6e5e:	464a      	mov	r2, r9
    6e60:	7a52      	ldrb	r2, [r2, #9]
    6e62:	0392      	lsls	r2, r2, #14
		i2c_module->ADDR.reg = (packet->address << 1) |
    6e64:	4313      	orrs	r3, r2
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
    6e66:	2280      	movs	r2, #128	; 0x80
    6e68:	0212      	lsls	r2, r2, #8
    6e6a:	4313      	orrs	r3, r2
		i2c_module->ADDR.reg = (packet->address << 1) |
    6e6c:	626b      	str	r3, [r5, #36]	; 0x24
		tmp_status = _i2c_master_wait_for_bus(module);
    6e6e:	0030      	movs	r0, r6
    6e70:	4b3b      	ldr	r3, [pc, #236]	; (6f60 <_i2c_master_read_packet+0x18c>)
    6e72:	4798      	blx	r3
    6e74:	9001      	str	r0, [sp, #4]
		i2c_module->CTRLB.reg &= ~SERCOM_I2CM_CTRLB_ACKACT;
    6e76:	686b      	ldr	r3, [r5, #4]
    6e78:	4a38      	ldr	r2, [pc, #224]	; (6f5c <_i2c_master_read_packet+0x188>)
    6e7a:	4013      	ands	r3, r2
    6e7c:	606b      	str	r3, [r5, #4]
		if (tmp_status == STATUS_OK) {
    6e7e:	2800      	cmp	r0, #0
    6e80:	d1de      	bne.n	6e40 <_i2c_master_read_packet+0x6c>
			tmp_status = _i2c_master_address_response(module);
    6e82:	0030      	movs	r0, r6
    6e84:	4b38      	ldr	r3, [pc, #224]	; (6f68 <_i2c_master_read_packet+0x194>)
    6e86:	4798      	blx	r3
    6e88:	9001      	str	r0, [sp, #4]
		if (tmp_status == STATUS_OK) {
    6e8a:	2800      	cmp	r0, #0
    6e8c:	d1d8      	bne.n	6e40 <_i2c_master_read_packet+0x6c>
			i2c_module->ADDR.reg = (((packet->address >> 8) | 0x78) << 1) |
    6e8e:	464b      	mov	r3, r9
    6e90:	881b      	ldrh	r3, [r3, #0]
    6e92:	0a1b      	lsrs	r3, r3, #8
    6e94:	2278      	movs	r2, #120	; 0x78
    6e96:	4313      	orrs	r3, r2
    6e98:	005b      	lsls	r3, r3, #1
				(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
    6e9a:	464a      	mov	r2, r9
    6e9c:	7a52      	ldrb	r2, [r2, #9]
    6e9e:	0392      	lsls	r2, r2, #14
    6ea0:	2101      	movs	r1, #1
    6ea2:	430a      	orrs	r2, r1
    6ea4:	4313      	orrs	r3, r2
			i2c_module->ADDR.reg = (((packet->address >> 8) | 0x78) << 1) |
    6ea6:	626b      	str	r3, [r5, #36]	; 0x24
    6ea8:	e7b8      	b.n	6e1c <_i2c_master_read_packet+0x48>
		i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
    6eaa:	686a      	ldr	r2, [r5, #4]
    6eac:	2380      	movs	r3, #128	; 0x80
    6eae:	02db      	lsls	r3, r3, #11
    6eb0:	4313      	orrs	r3, r2
    6eb2:	606b      	str	r3, [r5, #4]
    6eb4:	e7c1      	b.n	6e3a <_i2c_master_read_packet+0x66>
		tmp_status = _i2c_master_address_response(module);
    6eb6:	0030      	movs	r0, r6
    6eb8:	4b2b      	ldr	r3, [pc, #172]	; (6f68 <_i2c_master_read_packet+0x194>)
    6eba:	4798      	blx	r3
    6ebc:	9001      	str	r0, [sp, #4]
	if (tmp_status == STATUS_OK) {
    6ebe:	2800      	cmp	r0, #0
    6ec0:	d1be      	bne.n	6e40 <_i2c_master_read_packet+0x6c>
    6ec2:	3c01      	subs	r4, #1
    6ec4:	b2a4      	uxth	r4, r4
    6ec6:	4680      	mov	r8, r0
		while (tmp_data_length--) {
    6ec8:	4b28      	ldr	r3, [pc, #160]	; (6f6c <_i2c_master_read_packet+0x198>)
    6eca:	469b      	mov	fp, r3
    6ecc:	e015      	b.n	6efa <_i2c_master_read_packet+0x126>
					((sclsm_flag) && (tmp_data_length == 1)))) {
    6ece:	2c01      	cmp	r4, #1
    6ed0:	d020      	beq.n	6f14 <_i2c_master_read_packet+0x140>
				_i2c_master_wait_for_sync(module);
    6ed2:	0030      	movs	r0, r6
    6ed4:	4b26      	ldr	r3, [pc, #152]	; (6f70 <_i2c_master_read_packet+0x19c>)
    6ed6:	4798      	blx	r3
				packet->data[counter++] = i2c_module->DATA.reg;
    6ed8:	4643      	mov	r3, r8
    6eda:	1c5f      	adds	r7, r3, #1
    6edc:	b2bf      	uxth	r7, r7
    6ede:	2328      	movs	r3, #40	; 0x28
    6ee0:	5ceb      	ldrb	r3, [r5, r3]
    6ee2:	464a      	mov	r2, r9
    6ee4:	6852      	ldr	r2, [r2, #4]
    6ee6:	4641      	mov	r1, r8
    6ee8:	5453      	strb	r3, [r2, r1]
				tmp_status = _i2c_master_wait_for_bus(module);
    6eea:	0030      	movs	r0, r6
    6eec:	4b1c      	ldr	r3, [pc, #112]	; (6f60 <_i2c_master_read_packet+0x18c>)
    6eee:	4798      	blx	r3
    6ef0:	3c01      	subs	r4, #1
    6ef2:	b2a4      	uxth	r4, r4
			if (tmp_status != STATUS_OK) {
    6ef4:	2800      	cmp	r0, #0
    6ef6:	d115      	bne.n	6f24 <_i2c_master_read_packet+0x150>
				packet->data[counter++] = i2c_module->DATA.reg;
    6ef8:	46b8      	mov	r8, r7
		while (tmp_data_length--) {
    6efa:	455c      	cmp	r4, fp
    6efc:	d014      	beq.n	6f28 <_i2c_master_read_packet+0x154>
			if (!(i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE(2))) {
    6efe:	8b6b      	ldrh	r3, [r5, #26]
    6f00:	069b      	lsls	r3, r3, #26
    6f02:	d527      	bpl.n	6f54 <_i2c_master_read_packet+0x180>
			if (module->send_nack && (((!sclsm_flag) && (tmp_data_length == 0)) ||
    6f04:	7af3      	ldrb	r3, [r6, #11]
    6f06:	2b00      	cmp	r3, #0
    6f08:	d0e3      	beq.n	6ed2 <_i2c_master_read_packet+0xfe>
    6f0a:	4653      	mov	r3, sl
    6f0c:	2b00      	cmp	r3, #0
    6f0e:	d1de      	bne.n	6ece <_i2c_master_read_packet+0xfa>
    6f10:	2c00      	cmp	r4, #0
    6f12:	d1de      	bne.n	6ed2 <_i2c_master_read_packet+0xfe>
				i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
    6f14:	686a      	ldr	r2, [r5, #4]
    6f16:	2380      	movs	r3, #128	; 0x80
    6f18:	02db      	lsls	r3, r3, #11
    6f1a:	4313      	orrs	r3, r2
    6f1c:	606b      	str	r3, [r5, #4]
    6f1e:	3c01      	subs	r4, #1
    6f20:	b2a4      	uxth	r4, r4
    6f22:	e7ea      	b.n	6efa <_i2c_master_read_packet+0x126>
				packet->data[counter++] = i2c_module->DATA.reg;
    6f24:	46b8      	mov	r8, r7
				tmp_status = _i2c_master_wait_for_bus(module);
    6f26:	9001      	str	r0, [sp, #4]
		if (module->send_stop) {
    6f28:	7ab3      	ldrb	r3, [r6, #10]
    6f2a:	2b00      	cmp	r3, #0
    6f2c:	d109      	bne.n	6f42 <_i2c_master_read_packet+0x16e>
		_i2c_master_wait_for_sync(module);
    6f2e:	0030      	movs	r0, r6
    6f30:	4b0f      	ldr	r3, [pc, #60]	; (6f70 <_i2c_master_read_packet+0x19c>)
    6f32:	4798      	blx	r3
		packet->data[counter] = i2c_module->DATA.reg;
    6f34:	2328      	movs	r3, #40	; 0x28
    6f36:	5cea      	ldrb	r2, [r5, r3]
    6f38:	464b      	mov	r3, r9
    6f3a:	685b      	ldr	r3, [r3, #4]
    6f3c:	4641      	mov	r1, r8
    6f3e:	545a      	strb	r2, [r3, r1]
    6f40:	e77e      	b.n	6e40 <_i2c_master_read_packet+0x6c>
			_i2c_master_wait_for_sync(module);
    6f42:	0030      	movs	r0, r6
    6f44:	4b0a      	ldr	r3, [pc, #40]	; (6f70 <_i2c_master_read_packet+0x19c>)
    6f46:	4798      	blx	r3
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
    6f48:	686a      	ldr	r2, [r5, #4]
    6f4a:	23c0      	movs	r3, #192	; 0xc0
    6f4c:	029b      	lsls	r3, r3, #10
    6f4e:	4313      	orrs	r3, r2
    6f50:	606b      	str	r3, [r5, #4]
    6f52:	e7ec      	b.n	6f2e <_i2c_master_read_packet+0x15a>
				return STATUS_ERR_PACKET_COLLISION;
    6f54:	2341      	movs	r3, #65	; 0x41
    6f56:	9301      	str	r3, [sp, #4]
    6f58:	e772      	b.n	6e40 <_i2c_master_read_packet+0x6c>
    6f5a:	46c0      	nop			; (mov r8, r8)
    6f5c:	fffbffff 	.word	0xfffbffff
    6f60:	00006d89 	.word	0x00006d89
    6f64:	00006db5 	.word	0x00006db5
    6f68:	00006d59 	.word	0x00006d59
    6f6c:	0000ffff 	.word	0x0000ffff
    6f70:	00006a59 	.word	0x00006a59

00006f74 <_i2c_master_write_packet>:
 *                                      acknowledged the address
 */
static enum status_code _i2c_master_write_packet(
		struct i2c_master_module *const module,
		struct i2c_master_packet *const packet)
{
    6f74:	b5f0      	push	{r4, r5, r6, r7, lr}
    6f76:	46de      	mov	lr, fp
    6f78:	4657      	mov	r7, sl
    6f7a:	464e      	mov	r6, r9
    6f7c:	4645      	mov	r5, r8
    6f7e:	b5e0      	push	{r5, r6, r7, lr}
    6f80:	b083      	sub	sp, #12
    6f82:	0006      	movs	r6, r0
    6f84:	000f      	movs	r7, r1
	SercomI2cm *const i2c_module = &(module->hw->I2CM);
    6f86:	6805      	ldr	r5, [r0, #0]

	/* Return value. */
	enum status_code tmp_status;
	uint16_t tmp_data_length = packet->data_length;
    6f88:	884c      	ldrh	r4, [r1, #2]

	_i2c_master_wait_for_sync(module);
    6f8a:	4b32      	ldr	r3, [pc, #200]	; (7054 <_i2c_master_write_packet+0xe0>)
    6f8c:	4798      	blx	r3

	/* Switch to high speed mode */
	if (packet->high_speed) {
    6f8e:	7a7b      	ldrb	r3, [r7, #9]
    6f90:	2b00      	cmp	r3, #0
    6f92:	d11d      	bne.n	6fd0 <_i2c_master_write_packet+0x5c>
		_i2c_master_send_hs_master_code(module, packet->hs_master_code);
	}

	/* Set action to ACK. */
	i2c_module->CTRLB.reg &= ~SERCOM_I2CM_CTRLB_ACKACT;
    6f94:	686b      	ldr	r3, [r5, #4]
    6f96:	4a30      	ldr	r2, [pc, #192]	; (7058 <_i2c_master_write_packet+0xe4>)
    6f98:	4013      	ands	r3, r2
    6f9a:	606b      	str	r3, [r5, #4]

	/* Set address and direction bit. Will send start command on bus. */
	if (packet->ten_bit_address) {
    6f9c:	7a3b      	ldrb	r3, [r7, #8]
    6f9e:	2b00      	cmp	r3, #0
    6fa0:	d01b      	beq.n	6fda <_i2c_master_write_packet+0x66>
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_WRITE |
    6fa2:	883b      	ldrh	r3, [r7, #0]
    6fa4:	005b      	lsls	r3, r3, #1
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
    6fa6:	7a7a      	ldrb	r2, [r7, #9]
    6fa8:	0392      	lsls	r2, r2, #14
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_WRITE |
    6faa:	4313      	orrs	r3, r2
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
    6fac:	2280      	movs	r2, #128	; 0x80
    6fae:	0212      	lsls	r2, r2, #8
    6fb0:	4313      	orrs	r3, r2
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_WRITE |
    6fb2:	626b      	str	r3, [r5, #36]	; 0x24
	} else {
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_WRITE |
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos);
	}
	/* Wait for response on bus. */
	tmp_status = _i2c_master_wait_for_bus(module);
    6fb4:	0030      	movs	r0, r6
    6fb6:	4b29      	ldr	r3, [pc, #164]	; (705c <_i2c_master_write_packet+0xe8>)
    6fb8:	4798      	blx	r3
    6fba:	9001      	str	r0, [sp, #4]

	/* Check for address response error unless previous error is
	 * detected. */
	if (tmp_status == STATUS_OK) {
    6fbc:	2800      	cmp	r0, #0
    6fbe:	d013      	beq.n	6fe8 <_i2c_master_write_packet+0x74>
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
		}
	}

	return tmp_status;
}
    6fc0:	9801      	ldr	r0, [sp, #4]
    6fc2:	b003      	add	sp, #12
    6fc4:	bc3c      	pop	{r2, r3, r4, r5}
    6fc6:	4690      	mov	r8, r2
    6fc8:	4699      	mov	r9, r3
    6fca:	46a2      	mov	sl, r4
    6fcc:	46ab      	mov	fp, r5
    6fce:	bdf0      	pop	{r4, r5, r6, r7, pc}
		_i2c_master_send_hs_master_code(module, packet->hs_master_code);
    6fd0:	7ab9      	ldrb	r1, [r7, #10]
    6fd2:	0030      	movs	r0, r6
    6fd4:	4b22      	ldr	r3, [pc, #136]	; (7060 <_i2c_master_write_packet+0xec>)
    6fd6:	4798      	blx	r3
    6fd8:	e7dc      	b.n	6f94 <_i2c_master_write_packet+0x20>
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_WRITE |
    6fda:	883b      	ldrh	r3, [r7, #0]
    6fdc:	005b      	lsls	r3, r3, #1
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos);
    6fde:	7a7a      	ldrb	r2, [r7, #9]
    6fe0:	0392      	lsls	r2, r2, #14
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_WRITE |
    6fe2:	4313      	orrs	r3, r2
    6fe4:	626b      	str	r3, [r5, #36]	; 0x24
    6fe6:	e7e5      	b.n	6fb4 <_i2c_master_write_packet+0x40>
		tmp_status = _i2c_master_address_response(module);
    6fe8:	0030      	movs	r0, r6
    6fea:	4b1e      	ldr	r3, [pc, #120]	; (7064 <_i2c_master_write_packet+0xf0>)
    6fec:	4798      	blx	r3
    6fee:	1e03      	subs	r3, r0, #0
    6ff0:	9001      	str	r0, [sp, #4]
	if (tmp_status == STATUS_OK) {
    6ff2:	d1e5      	bne.n	6fc0 <_i2c_master_write_packet+0x4c>
    6ff4:	46a0      	mov	r8, r4
    6ff6:	2400      	movs	r4, #0
			if (!(i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE(2))) {
    6ff8:	3320      	adds	r3, #32
    6ffa:	4699      	mov	r9, r3
			_i2c_master_wait_for_sync(module);
    6ffc:	4b15      	ldr	r3, [pc, #84]	; (7054 <_i2c_master_write_packet+0xe0>)
    6ffe:	469b      	mov	fp, r3
			tmp_status = _i2c_master_wait_for_bus(module);
    7000:	4b16      	ldr	r3, [pc, #88]	; (705c <_i2c_master_write_packet+0xe8>)
    7002:	469a      	mov	sl, r3
		while (tmp_data_length--) {
    7004:	4544      	cmp	r4, r8
    7006:	d015      	beq.n	7034 <_i2c_master_write_packet+0xc0>
			if (!(i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE(2))) {
    7008:	8b6b      	ldrh	r3, [r5, #26]
    700a:	464a      	mov	r2, r9
    700c:	4213      	tst	r3, r2
    700e:	d01d      	beq.n	704c <_i2c_master_write_packet+0xd8>
			_i2c_master_wait_for_sync(module);
    7010:	0030      	movs	r0, r6
    7012:	47d8      	blx	fp
			i2c_module->DATA.reg = packet->data[buffer_counter++];
    7014:	687b      	ldr	r3, [r7, #4]
    7016:	5d1a      	ldrb	r2, [r3, r4]
    7018:	2328      	movs	r3, #40	; 0x28
    701a:	54ea      	strb	r2, [r5, r3]
			tmp_status = _i2c_master_wait_for_bus(module);
    701c:	0030      	movs	r0, r6
    701e:	47d0      	blx	sl
			if (tmp_status != STATUS_OK) {
    7020:	2800      	cmp	r0, #0
    7022:	d106      	bne.n	7032 <_i2c_master_write_packet+0xbe>
			if (i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_RXNACK) {
    7024:	8b6b      	ldrh	r3, [r5, #26]
    7026:	3401      	adds	r4, #1
    7028:	075b      	lsls	r3, r3, #29
    702a:	d5eb      	bpl.n	7004 <_i2c_master_write_packet+0x90>
				tmp_status = STATUS_ERR_OVERFLOW;
    702c:	231e      	movs	r3, #30
    702e:	9301      	str	r3, [sp, #4]
    7030:	e000      	b.n	7034 <_i2c_master_write_packet+0xc0>
			tmp_status = _i2c_master_wait_for_bus(module);
    7032:	9001      	str	r0, [sp, #4]
		if (module->send_stop) {
    7034:	7ab3      	ldrb	r3, [r6, #10]
    7036:	2b00      	cmp	r3, #0
    7038:	d0c2      	beq.n	6fc0 <_i2c_master_write_packet+0x4c>
			_i2c_master_wait_for_sync(module);
    703a:	0030      	movs	r0, r6
    703c:	4b05      	ldr	r3, [pc, #20]	; (7054 <_i2c_master_write_packet+0xe0>)
    703e:	4798      	blx	r3
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
    7040:	686a      	ldr	r2, [r5, #4]
    7042:	23c0      	movs	r3, #192	; 0xc0
    7044:	029b      	lsls	r3, r3, #10
    7046:	4313      	orrs	r3, r2
    7048:	606b      	str	r3, [r5, #4]
    704a:	e7b9      	b.n	6fc0 <_i2c_master_write_packet+0x4c>
				return STATUS_ERR_PACKET_COLLISION;
    704c:	2341      	movs	r3, #65	; 0x41
    704e:	9301      	str	r3, [sp, #4]
    7050:	e7b6      	b.n	6fc0 <_i2c_master_write_packet+0x4c>
    7052:	46c0      	nop			; (mov r8, r8)
    7054:	00006a59 	.word	0x00006a59
    7058:	fffbffff 	.word	0xfffbffff
    705c:	00006d89 	.word	0x00006d89
    7060:	00006db5 	.word	0x00006db5
    7064:	00006d59 	.word	0x00006d59

00007068 <i2c_master_read_packet_wait>:
{
    7068:	b510      	push	{r4, lr}
	module->send_stop = true;
    706a:	2301      	movs	r3, #1
    706c:	7283      	strb	r3, [r0, #10]
	module->send_nack = true;
    706e:	72c3      	strb	r3, [r0, #11]
	return _i2c_master_read_packet(module, packet);
    7070:	4b01      	ldr	r3, [pc, #4]	; (7078 <i2c_master_read_packet_wait+0x10>)
    7072:	4798      	blx	r3
}
    7074:	bd10      	pop	{r4, pc}
    7076:	46c0      	nop			; (mov r8, r8)
    7078:	00006dd5 	.word	0x00006dd5

0000707c <i2c_master_write_packet_wait_no_stop>:
 *                                      more data
 */
enum status_code i2c_master_write_packet_wait_no_stop(
		struct i2c_master_module *const module,
		struct i2c_master_packet *const packet)
{
    707c:	b510      	push	{r4, lr}
	if (module->buffer_remaining > 0) {
		return STATUS_BUSY;
	}
#endif

	module->send_stop = false;
    707e:	2300      	movs	r3, #0
    7080:	7283      	strb	r3, [r0, #10]
	module->send_nack = true;
    7082:	3301      	adds	r3, #1
    7084:	72c3      	strb	r3, [r0, #11]

	return _i2c_master_write_packet(module, packet);
    7086:	4b01      	ldr	r3, [pc, #4]	; (708c <i2c_master_write_packet_wait_no_stop+0x10>)
    7088:	4798      	blx	r3
}
    708a:	bd10      	pop	{r4, pc}
    708c:	00006f75 	.word	0x00006f75

00007090 <long_division>:
/**
 * \internal Calculate 64 bit division, ref can be found in
 * http://en.wikipedia.org/wiki/Division_algorithm#Long_division
 */
static uint64_t long_division(uint64_t n, uint64_t d)
{
    7090:	b5f0      	push	{r4, r5, r6, r7, lr}
    7092:	46de      	mov	lr, fp
    7094:	4657      	mov	r7, sl
    7096:	464e      	mov	r6, r9
    7098:	4645      	mov	r5, r8
    709a:	b5e0      	push	{r5, r6, r7, lr}
    709c:	b087      	sub	sp, #28
    709e:	4680      	mov	r8, r0
    70a0:	9104      	str	r1, [sp, #16]
    70a2:	0016      	movs	r6, r2
    70a4:	001f      	movs	r7, r3
	int32_t i;
	uint64_t q = 0, r = 0, bit_shift;
    70a6:	2200      	movs	r2, #0
    70a8:	2300      	movs	r3, #0
    70aa:	2100      	movs	r1, #0
    70ac:	468b      	mov	fp, r1
	for (i = 63; i >= 0; i--) {
    70ae:	243f      	movs	r4, #63	; 0x3f
		bit_shift = (uint64_t)1 << i;
    70b0:	2001      	movs	r0, #1
    70b2:	0021      	movs	r1, r4
    70b4:	9600      	str	r6, [sp, #0]
    70b6:	9701      	str	r7, [sp, #4]
    70b8:	465c      	mov	r4, fp
    70ba:	9403      	str	r4, [sp, #12]
    70bc:	4644      	mov	r4, r8
    70be:	9405      	str	r4, [sp, #20]
    70c0:	e013      	b.n	70ea <long_division+0x5a>
    70c2:	2420      	movs	r4, #32
    70c4:	1a64      	subs	r4, r4, r1
    70c6:	0005      	movs	r5, r0
    70c8:	40e5      	lsrs	r5, r4
    70ca:	46a8      	mov	r8, r5
    70cc:	e014      	b.n	70f8 <long_division+0x68>
		if (n & bit_shift) {
			r |= 0x01;
		}

		if (r >= d) {
			r = r - d;
    70ce:	9c00      	ldr	r4, [sp, #0]
    70d0:	9d01      	ldr	r5, [sp, #4]
    70d2:	1b12      	subs	r2, r2, r4
    70d4:	41ab      	sbcs	r3, r5
			q |= bit_shift;
    70d6:	465c      	mov	r4, fp
    70d8:	464d      	mov	r5, r9
    70da:	432c      	orrs	r4, r5
    70dc:	46a3      	mov	fp, r4
    70de:	9c03      	ldr	r4, [sp, #12]
    70e0:	4645      	mov	r5, r8
    70e2:	432c      	orrs	r4, r5
    70e4:	9403      	str	r4, [sp, #12]
	for (i = 63; i >= 0; i--) {
    70e6:	3901      	subs	r1, #1
    70e8:	d325      	bcc.n	7136 <long_division+0xa6>
		bit_shift = (uint64_t)1 << i;
    70ea:	2420      	movs	r4, #32
    70ec:	4264      	negs	r4, r4
    70ee:	190c      	adds	r4, r1, r4
    70f0:	d4e7      	bmi.n	70c2 <long_division+0x32>
    70f2:	0005      	movs	r5, r0
    70f4:	40a5      	lsls	r5, r4
    70f6:	46a8      	mov	r8, r5
    70f8:	0004      	movs	r4, r0
    70fa:	408c      	lsls	r4, r1
    70fc:	46a1      	mov	r9, r4
		r = r << 1;
    70fe:	1892      	adds	r2, r2, r2
    7100:	415b      	adcs	r3, r3
    7102:	0014      	movs	r4, r2
    7104:	001d      	movs	r5, r3
		if (n & bit_shift) {
    7106:	9e05      	ldr	r6, [sp, #20]
    7108:	464f      	mov	r7, r9
    710a:	403e      	ands	r6, r7
    710c:	46b4      	mov	ip, r6
    710e:	9e04      	ldr	r6, [sp, #16]
    7110:	4647      	mov	r7, r8
    7112:	403e      	ands	r6, r7
    7114:	46b2      	mov	sl, r6
    7116:	4666      	mov	r6, ip
    7118:	4657      	mov	r7, sl
    711a:	433e      	orrs	r6, r7
    711c:	d003      	beq.n	7126 <long_division+0x96>
			r |= 0x01;
    711e:	0006      	movs	r6, r0
    7120:	4326      	orrs	r6, r4
    7122:	0032      	movs	r2, r6
    7124:	002b      	movs	r3, r5
		if (r >= d) {
    7126:	9c00      	ldr	r4, [sp, #0]
    7128:	9d01      	ldr	r5, [sp, #4]
    712a:	429d      	cmp	r5, r3
    712c:	d8db      	bhi.n	70e6 <long_division+0x56>
    712e:	d1ce      	bne.n	70ce <long_division+0x3e>
    7130:	4294      	cmp	r4, r2
    7132:	d8d8      	bhi.n	70e6 <long_division+0x56>
    7134:	e7cb      	b.n	70ce <long_division+0x3e>
    7136:	9b03      	ldr	r3, [sp, #12]
		}
	}

	return q;
}
    7138:	4658      	mov	r0, fp
    713a:	0019      	movs	r1, r3
    713c:	b007      	add	sp, #28
    713e:	bc3c      	pop	{r2, r3, r4, r5}
    7140:	4690      	mov	r8, r2
    7142:	4699      	mov	r9, r3
    7144:	46a2      	mov	sl, r4
    7146:	46ab      	mov	fp, r5
    7148:	bdf0      	pop	{r4, r5, r6, r7, pc}

0000714a <_sercom_get_sync_baud_val>:
 */
enum status_code _sercom_get_sync_baud_val(
		const uint32_t baudrate,
		const uint32_t external_clock,
		uint16_t *const baudvalue)
{
    714a:	b510      	push	{r4, lr}
	uint16_t baud_calculated = 0;
	uint32_t clock_value = external_clock;


	/* Check if baudrate is outside of valid range */
	if (baudrate > (external_clock / 2)) {
    714c:	0849      	lsrs	r1, r1, #1
		/* Return with error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
    714e:	2340      	movs	r3, #64	; 0x40
    7150:	2400      	movs	r4, #0
	if (baudrate > (external_clock / 2)) {
    7152:	4281      	cmp	r1, r0
    7154:	d202      	bcs.n	715c <_sercom_get_sync_baud_val+0x12>
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
	} else {
		*baudvalue = baud_calculated;
		return STATUS_OK;
	}
}
    7156:	0018      	movs	r0, r3
    7158:	bd10      	pop	{r4, pc}
		baud_calculated++;
    715a:	001c      	movs	r4, r3
		clock_value = clock_value - baudrate;
    715c:	1a09      	subs	r1, r1, r0
		baud_calculated++;
    715e:	1c63      	adds	r3, r4, #1
    7160:	b29b      	uxth	r3, r3
	while (clock_value >= baudrate) {
    7162:	4288      	cmp	r0, r1
    7164:	d9f9      	bls.n	715a <_sercom_get_sync_baud_val+0x10>
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
    7166:	2340      	movs	r3, #64	; 0x40
	if (baud_calculated > 0xFF) {
    7168:	2cff      	cmp	r4, #255	; 0xff
    716a:	d8f4      	bhi.n	7156 <_sercom_get_sync_baud_val+0xc>
		*baudvalue = baud_calculated;
    716c:	8014      	strh	r4, [r2, #0]
		return STATUS_OK;
    716e:	2300      	movs	r3, #0
    7170:	e7f1      	b.n	7156 <_sercom_get_sync_baud_val+0xc>
    7172:	Address 0x00007172 is out of bounds.


00007174 <_sercom_get_async_baud_val>:
		const uint32_t baudrate,
		const uint32_t peripheral_clock,
		uint16_t *const baudval,
		enum sercom_asynchronous_operation_mode mode,
		enum sercom_asynchronous_sample_num sample_num)
{
    7174:	b5f0      	push	{r4, r5, r6, r7, lr}
    7176:	b083      	sub	sp, #12
    7178:	000f      	movs	r7, r1
    717a:	0016      	movs	r6, r2
    717c:	aa08      	add	r2, sp, #32
    717e:	7811      	ldrb	r1, [r2, #0]
	uint8_t baud_fp;
	uint32_t baud_int = 0;
	uint64_t temp1;

	/* Check if the baudrate is outside of valid range */
	if ((baudrate * sample_num) > peripheral_clock) {
    7180:	0004      	movs	r4, r0
    7182:	434c      	muls	r4, r1
		/* Return with error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
    7184:	2240      	movs	r2, #64	; 0x40
	if ((baudrate * sample_num) > peripheral_clock) {
    7186:	42bc      	cmp	r4, r7
    7188:	d902      	bls.n	7190 <_sercom_get_async_baud_val+0x1c>
		baud_calculated = baud_int | (baud_fp << 13);
	}

	*baudval = baud_calculated;
	return STATUS_OK;
}
    718a:	0010      	movs	r0, r2
    718c:	b003      	add	sp, #12
    718e:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if(mode == SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC) {
    7190:	2b00      	cmp	r3, #0
    7192:	d114      	bne.n	71be <_sercom_get_async_baud_val+0x4a>
		temp1 = ((sample_num * (uint64_t)baudrate) << SHIFT);
    7194:	0002      	movs	r2, r0
    7196:	0008      	movs	r0, r1
    7198:	2100      	movs	r1, #0
    719a:	4c19      	ldr	r4, [pc, #100]	; (7200 <_sercom_get_async_baud_val+0x8c>)
    719c:	47a0      	blx	r4
    719e:	0001      	movs	r1, r0
		ratio = long_division(temp1, peripheral_clock);
    71a0:	003a      	movs	r2, r7
    71a2:	2300      	movs	r3, #0
    71a4:	2000      	movs	r0, #0
    71a6:	4c17      	ldr	r4, [pc, #92]	; (7204 <_sercom_get_async_baud_val+0x90>)
    71a8:	47a0      	blx	r4
		scale = ((uint64_t)1 << SHIFT) - ratio;
    71aa:	2200      	movs	r2, #0
    71ac:	2301      	movs	r3, #1
    71ae:	1a12      	subs	r2, r2, r0
    71b0:	418b      	sbcs	r3, r1
		baud_calculated = (65536 * scale) >> SHIFT;
    71b2:	0c12      	lsrs	r2, r2, #16
    71b4:	041b      	lsls	r3, r3, #16
    71b6:	431a      	orrs	r2, r3
	*baudval = baud_calculated;
    71b8:	8032      	strh	r2, [r6, #0]
	return STATUS_OK;
    71ba:	2200      	movs	r2, #0
    71bc:	e7e5      	b.n	718a <_sercom_get_async_baud_val+0x16>
	uint64_t baud_calculated = 0;
    71be:	2200      	movs	r2, #0
	} else if(mode == SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL) {
    71c0:	2b01      	cmp	r3, #1
    71c2:	d1f9      	bne.n	71b8 <_sercom_get_async_baud_val+0x44>
		temp1 = ((uint64_t)baudrate * sample_num);
    71c4:	000a      	movs	r2, r1
    71c6:	2300      	movs	r3, #0
    71c8:	2100      	movs	r1, #0
    71ca:	4c0d      	ldr	r4, [pc, #52]	; (7200 <_sercom_get_async_baud_val+0x8c>)
    71cc:	47a0      	blx	r4
    71ce:	0002      	movs	r2, r0
    71d0:	000b      	movs	r3, r1
    71d2:	9200      	str	r2, [sp, #0]
    71d4:	9301      	str	r3, [sp, #4]
		baud_int = long_division( peripheral_clock, temp1);
    71d6:	0038      	movs	r0, r7
    71d8:	2100      	movs	r1, #0
    71da:	4c0a      	ldr	r4, [pc, #40]	; (7204 <_sercom_get_async_baud_val+0x90>)
    71dc:	47a0      	blx	r4
    71de:	0005      	movs	r5, r0
		if(baud_int > BAUD_INT_MAX) {
    71e0:	2380      	movs	r3, #128	; 0x80
    71e2:	019b      	lsls	r3, r3, #6
				return STATUS_ERR_BAUDRATE_UNAVAILABLE;
    71e4:	2240      	movs	r2, #64	; 0x40
		if(baud_int > BAUD_INT_MAX) {
    71e6:	4298      	cmp	r0, r3
    71e8:	d8cf      	bhi.n	718a <_sercom_get_async_baud_val+0x16>
		temp1 = long_division( 8 * (uint64_t)peripheral_clock, temp1);
    71ea:	0f79      	lsrs	r1, r7, #29
    71ec:	00f8      	lsls	r0, r7, #3
    71ee:	9a00      	ldr	r2, [sp, #0]
    71f0:	9b01      	ldr	r3, [sp, #4]
    71f2:	47a0      	blx	r4
		baud_fp = temp1 - 8 * baud_int;
    71f4:	00ea      	lsls	r2, r5, #3
    71f6:	1a82      	subs	r2, r0, r2
		baud_calculated = baud_int | (baud_fp << 13);
    71f8:	b2d2      	uxtb	r2, r2
    71fa:	0352      	lsls	r2, r2, #13
    71fc:	432a      	orrs	r2, r5
    71fe:	e7db      	b.n	71b8 <_sercom_get_async_baud_val+0x44>
    7200:	000127c9 	.word	0x000127c9
    7204:	00007091 	.word	0x00007091

00007208 <sercom_set_gclk_generator>:
 *                                         forced.
 */
enum status_code sercom_set_gclk_generator(
		const enum gclk_generator generator_source,
		const bool force_change)
{
    7208:	b510      	push	{r4, lr}
    720a:	b082      	sub	sp, #8
    720c:	0004      	movs	r4, r0
	/* Check if valid option */
	if (!_sercom_config.generator_is_set || force_change) {
    720e:	4b0e      	ldr	r3, [pc, #56]	; (7248 <sercom_set_gclk_generator+0x40>)
    7210:	781b      	ldrb	r3, [r3, #0]
    7212:	2b00      	cmp	r3, #0
    7214:	d007      	beq.n	7226 <sercom_set_gclk_generator+0x1e>
    7216:	2900      	cmp	r1, #0
    7218:	d105      	bne.n	7226 <sercom_set_gclk_generator+0x1e>
		/* Save config */
		_sercom_config.generator_source = generator_source;
		_sercom_config.generator_is_set = true;

		return STATUS_OK;
	} else if (generator_source == _sercom_config.generator_source) {
    721a:	4b0b      	ldr	r3, [pc, #44]	; (7248 <sercom_set_gclk_generator+0x40>)
    721c:	785b      	ldrb	r3, [r3, #1]
    721e:	4283      	cmp	r3, r0
    7220:	d010      	beq.n	7244 <sercom_set_gclk_generator+0x3c>
		/* Return status OK if same config */
		return STATUS_OK;
	}

	/* Return invalid config to already initialized GCLK */
	return STATUS_ERR_ALREADY_INITIALIZED;
    7222:	201d      	movs	r0, #29
    7224:	e00c      	b.n	7240 <sercom_set_gclk_generator+0x38>
		gclk_chan_conf.source_generator = generator_source;
    7226:	a901      	add	r1, sp, #4
    7228:	700c      	strb	r4, [r1, #0]
		system_gclk_chan_set_config(SERCOM_GCLK_ID, &gclk_chan_conf);
    722a:	2013      	movs	r0, #19
    722c:	4b07      	ldr	r3, [pc, #28]	; (724c <sercom_set_gclk_generator+0x44>)
    722e:	4798      	blx	r3
		system_gclk_chan_enable(SERCOM_GCLK_ID);
    7230:	2013      	movs	r0, #19
    7232:	4b07      	ldr	r3, [pc, #28]	; (7250 <sercom_set_gclk_generator+0x48>)
    7234:	4798      	blx	r3
		_sercom_config.generator_source = generator_source;
    7236:	4b04      	ldr	r3, [pc, #16]	; (7248 <sercom_set_gclk_generator+0x40>)
    7238:	705c      	strb	r4, [r3, #1]
		_sercom_config.generator_is_set = true;
    723a:	2201      	movs	r2, #1
    723c:	701a      	strb	r2, [r3, #0]
		return STATUS_OK;
    723e:	2000      	movs	r0, #0
}
    7240:	b002      	add	sp, #8
    7242:	bd10      	pop	{r4, pc}
		return STATUS_OK;
    7244:	2000      	movs	r0, #0
    7246:	e7fb      	b.n	7240 <sercom_set_gclk_generator+0x38>
    7248:	20000144 	.word	0x20000144
    724c:	000085d1 	.word	0x000085d1
    7250:	00008545 	.word	0x00008545

00007254 <_sercom_get_default_pad>:
 */
uint32_t _sercom_get_default_pad(
		Sercom *const sercom_module,
		const uint8_t pad)
{
	switch ((uintptr_t)sercom_module) {
    7254:	4b40      	ldr	r3, [pc, #256]	; (7358 <_sercom_get_default_pad+0x104>)
    7256:	4298      	cmp	r0, r3
    7258:	d031      	beq.n	72be <_sercom_get_default_pad+0x6a>
    725a:	d90a      	bls.n	7272 <_sercom_get_default_pad+0x1e>
    725c:	4b3f      	ldr	r3, [pc, #252]	; (735c <_sercom_get_default_pad+0x108>)
    725e:	4298      	cmp	r0, r3
    7260:	d04d      	beq.n	72fe <_sercom_get_default_pad+0xaa>
    7262:	4b3f      	ldr	r3, [pc, #252]	; (7360 <_sercom_get_default_pad+0x10c>)
    7264:	4298      	cmp	r0, r3
    7266:	d05a      	beq.n	731e <_sercom_get_default_pad+0xca>
    7268:	4b3e      	ldr	r3, [pc, #248]	; (7364 <_sercom_get_default_pad+0x110>)
    726a:	4298      	cmp	r0, r3
    726c:	d037      	beq.n	72de <_sercom_get_default_pad+0x8a>
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
	}

	Assert(false);
	return 0;
    726e:	2000      	movs	r0, #0
}
    7270:	4770      	bx	lr
	switch ((uintptr_t)sercom_module) {
    7272:	4b3d      	ldr	r3, [pc, #244]	; (7368 <_sercom_get_default_pad+0x114>)
    7274:	4298      	cmp	r0, r3
    7276:	d00c      	beq.n	7292 <_sercom_get_default_pad+0x3e>
    7278:	4b3c      	ldr	r3, [pc, #240]	; (736c <_sercom_get_default_pad+0x118>)
    727a:	4298      	cmp	r0, r3
    727c:	d1f7      	bne.n	726e <_sercom_get_default_pad+0x1a>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    727e:	2901      	cmp	r1, #1
    7280:	d017      	beq.n	72b2 <_sercom_get_default_pad+0x5e>
    7282:	2900      	cmp	r1, #0
    7284:	d05d      	beq.n	7342 <_sercom_get_default_pad+0xee>
    7286:	2902      	cmp	r1, #2
    7288:	d015      	beq.n	72b6 <_sercom_get_default_pad+0x62>
    728a:	2903      	cmp	r1, #3
    728c:	d015      	beq.n	72ba <_sercom_get_default_pad+0x66>
	return 0;
    728e:	2000      	movs	r0, #0
    7290:	e7ee      	b.n	7270 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    7292:	2901      	cmp	r1, #1
    7294:	d007      	beq.n	72a6 <_sercom_get_default_pad+0x52>
    7296:	2900      	cmp	r1, #0
    7298:	d051      	beq.n	733e <_sercom_get_default_pad+0xea>
    729a:	2902      	cmp	r1, #2
    729c:	d005      	beq.n	72aa <_sercom_get_default_pad+0x56>
    729e:	2903      	cmp	r1, #3
    72a0:	d005      	beq.n	72ae <_sercom_get_default_pad+0x5a>
	return 0;
    72a2:	2000      	movs	r0, #0
    72a4:	e7e4      	b.n	7270 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    72a6:	4832      	ldr	r0, [pc, #200]	; (7370 <_sercom_get_default_pad+0x11c>)
    72a8:	e7e2      	b.n	7270 <_sercom_get_default_pad+0x1c>
    72aa:	4832      	ldr	r0, [pc, #200]	; (7374 <_sercom_get_default_pad+0x120>)
    72ac:	e7e0      	b.n	7270 <_sercom_get_default_pad+0x1c>
    72ae:	4832      	ldr	r0, [pc, #200]	; (7378 <_sercom_get_default_pad+0x124>)
    72b0:	e7de      	b.n	7270 <_sercom_get_default_pad+0x1c>
    72b2:	4832      	ldr	r0, [pc, #200]	; (737c <_sercom_get_default_pad+0x128>)
    72b4:	e7dc      	b.n	7270 <_sercom_get_default_pad+0x1c>
    72b6:	4832      	ldr	r0, [pc, #200]	; (7380 <_sercom_get_default_pad+0x12c>)
    72b8:	e7da      	b.n	7270 <_sercom_get_default_pad+0x1c>
    72ba:	4832      	ldr	r0, [pc, #200]	; (7384 <_sercom_get_default_pad+0x130>)
    72bc:	e7d8      	b.n	7270 <_sercom_get_default_pad+0x1c>
    72be:	2901      	cmp	r1, #1
    72c0:	d007      	beq.n	72d2 <_sercom_get_default_pad+0x7e>
    72c2:	2900      	cmp	r1, #0
    72c4:	d03f      	beq.n	7346 <_sercom_get_default_pad+0xf2>
    72c6:	2902      	cmp	r1, #2
    72c8:	d005      	beq.n	72d6 <_sercom_get_default_pad+0x82>
    72ca:	2903      	cmp	r1, #3
    72cc:	d005      	beq.n	72da <_sercom_get_default_pad+0x86>
	return 0;
    72ce:	2000      	movs	r0, #0
    72d0:	e7ce      	b.n	7270 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    72d2:	482d      	ldr	r0, [pc, #180]	; (7388 <_sercom_get_default_pad+0x134>)
    72d4:	e7cc      	b.n	7270 <_sercom_get_default_pad+0x1c>
    72d6:	482d      	ldr	r0, [pc, #180]	; (738c <_sercom_get_default_pad+0x138>)
    72d8:	e7ca      	b.n	7270 <_sercom_get_default_pad+0x1c>
    72da:	482d      	ldr	r0, [pc, #180]	; (7390 <_sercom_get_default_pad+0x13c>)
    72dc:	e7c8      	b.n	7270 <_sercom_get_default_pad+0x1c>
    72de:	2901      	cmp	r1, #1
    72e0:	d007      	beq.n	72f2 <_sercom_get_default_pad+0x9e>
    72e2:	2900      	cmp	r1, #0
    72e4:	d031      	beq.n	734a <_sercom_get_default_pad+0xf6>
    72e6:	2902      	cmp	r1, #2
    72e8:	d005      	beq.n	72f6 <_sercom_get_default_pad+0xa2>
    72ea:	2903      	cmp	r1, #3
    72ec:	d005      	beq.n	72fa <_sercom_get_default_pad+0xa6>
	return 0;
    72ee:	2000      	movs	r0, #0
    72f0:	e7be      	b.n	7270 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    72f2:	4828      	ldr	r0, [pc, #160]	; (7394 <_sercom_get_default_pad+0x140>)
    72f4:	e7bc      	b.n	7270 <_sercom_get_default_pad+0x1c>
    72f6:	4828      	ldr	r0, [pc, #160]	; (7398 <_sercom_get_default_pad+0x144>)
    72f8:	e7ba      	b.n	7270 <_sercom_get_default_pad+0x1c>
    72fa:	4828      	ldr	r0, [pc, #160]	; (739c <_sercom_get_default_pad+0x148>)
    72fc:	e7b8      	b.n	7270 <_sercom_get_default_pad+0x1c>
    72fe:	2901      	cmp	r1, #1
    7300:	d007      	beq.n	7312 <_sercom_get_default_pad+0xbe>
    7302:	2900      	cmp	r1, #0
    7304:	d023      	beq.n	734e <_sercom_get_default_pad+0xfa>
    7306:	2902      	cmp	r1, #2
    7308:	d005      	beq.n	7316 <_sercom_get_default_pad+0xc2>
    730a:	2903      	cmp	r1, #3
    730c:	d005      	beq.n	731a <_sercom_get_default_pad+0xc6>
	return 0;
    730e:	2000      	movs	r0, #0
    7310:	e7ae      	b.n	7270 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    7312:	4823      	ldr	r0, [pc, #140]	; (73a0 <_sercom_get_default_pad+0x14c>)
    7314:	e7ac      	b.n	7270 <_sercom_get_default_pad+0x1c>
    7316:	4823      	ldr	r0, [pc, #140]	; (73a4 <_sercom_get_default_pad+0x150>)
    7318:	e7aa      	b.n	7270 <_sercom_get_default_pad+0x1c>
    731a:	4823      	ldr	r0, [pc, #140]	; (73a8 <_sercom_get_default_pad+0x154>)
    731c:	e7a8      	b.n	7270 <_sercom_get_default_pad+0x1c>
    731e:	2901      	cmp	r1, #1
    7320:	d007      	beq.n	7332 <_sercom_get_default_pad+0xde>
    7322:	2900      	cmp	r1, #0
    7324:	d015      	beq.n	7352 <_sercom_get_default_pad+0xfe>
    7326:	2902      	cmp	r1, #2
    7328:	d005      	beq.n	7336 <_sercom_get_default_pad+0xe2>
    732a:	2903      	cmp	r1, #3
    732c:	d005      	beq.n	733a <_sercom_get_default_pad+0xe6>
	return 0;
    732e:	2000      	movs	r0, #0
    7330:	e79e      	b.n	7270 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    7332:	481e      	ldr	r0, [pc, #120]	; (73ac <_sercom_get_default_pad+0x158>)
    7334:	e79c      	b.n	7270 <_sercom_get_default_pad+0x1c>
    7336:	481e      	ldr	r0, [pc, #120]	; (73b0 <_sercom_get_default_pad+0x15c>)
    7338:	e79a      	b.n	7270 <_sercom_get_default_pad+0x1c>
    733a:	481e      	ldr	r0, [pc, #120]	; (73b4 <_sercom_get_default_pad+0x160>)
    733c:	e798      	b.n	7270 <_sercom_get_default_pad+0x1c>
    733e:	481e      	ldr	r0, [pc, #120]	; (73b8 <_sercom_get_default_pad+0x164>)
    7340:	e796      	b.n	7270 <_sercom_get_default_pad+0x1c>
    7342:	2003      	movs	r0, #3
    7344:	e794      	b.n	7270 <_sercom_get_default_pad+0x1c>
    7346:	481d      	ldr	r0, [pc, #116]	; (73bc <_sercom_get_default_pad+0x168>)
    7348:	e792      	b.n	7270 <_sercom_get_default_pad+0x1c>
    734a:	481d      	ldr	r0, [pc, #116]	; (73c0 <_sercom_get_default_pad+0x16c>)
    734c:	e790      	b.n	7270 <_sercom_get_default_pad+0x1c>
    734e:	481d      	ldr	r0, [pc, #116]	; (73c4 <_sercom_get_default_pad+0x170>)
    7350:	e78e      	b.n	7270 <_sercom_get_default_pad+0x1c>
    7352:	481d      	ldr	r0, [pc, #116]	; (73c8 <_sercom_get_default_pad+0x174>)
    7354:	e78c      	b.n	7270 <_sercom_get_default_pad+0x1c>
    7356:	46c0      	nop			; (mov r8, r8)
    7358:	42001000 	.word	0x42001000
    735c:	42001800 	.word	0x42001800
    7360:	42001c00 	.word	0x42001c00
    7364:	42001400 	.word	0x42001400
    7368:	42000800 	.word	0x42000800
    736c:	42000c00 	.word	0x42000c00
    7370:	00050003 	.word	0x00050003
    7374:	00060003 	.word	0x00060003
    7378:	00070003 	.word	0x00070003
    737c:	00010003 	.word	0x00010003
    7380:	001e0003 	.word	0x001e0003
    7384:	001f0003 	.word	0x001f0003
    7388:	000d0002 	.word	0x000d0002
    738c:	000e0002 	.word	0x000e0002
    7390:	000f0002 	.word	0x000f0002
    7394:	00110003 	.word	0x00110003
    7398:	00120003 	.word	0x00120003
    739c:	00130003 	.word	0x00130003
    73a0:	003f0005 	.word	0x003f0005
    73a4:	003e0005 	.word	0x003e0005
    73a8:	00520005 	.word	0x00520005
    73ac:	00170003 	.word	0x00170003
    73b0:	00180003 	.word	0x00180003
    73b4:	00190003 	.word	0x00190003
    73b8:	00040003 	.word	0x00040003
    73bc:	000c0002 	.word	0x000c0002
    73c0:	00100003 	.word	0x00100003
    73c4:	00530005 	.word	0x00530005
    73c8:	00160003 	.word	0x00160003

000073cc <_sercom_get_sercom_inst_index>:
 *
 * \return Index of given instance.
 */
uint8_t _sercom_get_sercom_inst_index(
		Sercom *const sercom_instance)
{
    73cc:	b530      	push	{r4, r5, lr}
    73ce:	b087      	sub	sp, #28
	/* Save all available SERCOM instances for compare */
	Sercom *sercom_instances[SERCOM_INST_NUM] = SERCOM_INSTS;
    73d0:	4b0b      	ldr	r3, [pc, #44]	; (7400 <_sercom_get_sercom_inst_index+0x34>)
    73d2:	466a      	mov	r2, sp
    73d4:	cb32      	ldmia	r3!, {r1, r4, r5}
    73d6:	c232      	stmia	r2!, {r1, r4, r5}
    73d8:	cb32      	ldmia	r3!, {r1, r4, r5}
    73da:	c232      	stmia	r2!, {r1, r4, r5}

	/* Find index for sercom instance */
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
		if ((uintptr_t)sercom_instance == (uintptr_t)sercom_instances[i]) {
    73dc:	9b00      	ldr	r3, [sp, #0]
    73de:	4283      	cmp	r3, r0
    73e0:	d00b      	beq.n	73fa <_sercom_get_sercom_inst_index+0x2e>
    73e2:	2301      	movs	r3, #1
    73e4:	009a      	lsls	r2, r3, #2
    73e6:	4669      	mov	r1, sp
    73e8:	5852      	ldr	r2, [r2, r1]
    73ea:	4282      	cmp	r2, r0
    73ec:	d006      	beq.n	73fc <_sercom_get_sercom_inst_index+0x30>
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    73ee:	3301      	adds	r3, #1
    73f0:	2b06      	cmp	r3, #6
    73f2:	d1f7      	bne.n	73e4 <_sercom_get_sercom_inst_index+0x18>
		}
	}

	/* Invalid data given */
	Assert(false);
	return 0;
    73f4:	2000      	movs	r0, #0
}
    73f6:	b007      	add	sp, #28
    73f8:	bd30      	pop	{r4, r5, pc}
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    73fa:	2300      	movs	r3, #0
			return i;
    73fc:	b2d8      	uxtb	r0, r3
    73fe:	e7fa      	b.n	73f6 <_sercom_get_sercom_inst_index+0x2a>
    7400:	00015f6c 	.word	0x00015f6c

00007404 <_sercom_default_handler>:
 */
static void _sercom_default_handler(
		const uint8_t instance)
{
	Assert(false);
}
    7404:	4770      	bx	lr
    7406:	Address 0x00007406 is out of bounds.


00007408 <_sercom_set_handler>:
 * \param[in]  interrupt_handler  Pointer to instance callback handler.
 */
void _sercom_set_handler(
		const uint8_t instance,
		const sercom_handler_t interrupt_handler)
{
    7408:	b5f0      	push	{r4, r5, r6, r7, lr}
	/* Initialize handlers with default handler and device instances with 0 */
	if (_handler_table_initialized == false) {
    740a:	4b0a      	ldr	r3, [pc, #40]	; (7434 <_sercom_set_handler+0x2c>)
    740c:	781b      	ldrb	r3, [r3, #0]
    740e:	2b00      	cmp	r3, #0
    7410:	d10c      	bne.n	742c <_sercom_set_handler+0x24>
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
			_sercom_interrupt_handlers[i] = &_sercom_default_handler;
    7412:	4f09      	ldr	r7, [pc, #36]	; (7438 <_sercom_set_handler+0x30>)
    7414:	4e09      	ldr	r6, [pc, #36]	; (743c <_sercom_set_handler+0x34>)
			_sercom_instances[i] = NULL;
    7416:	4d0a      	ldr	r5, [pc, #40]	; (7440 <_sercom_set_handler+0x38>)
    7418:	2400      	movs	r4, #0
			_sercom_interrupt_handlers[i] = &_sercom_default_handler;
    741a:	51de      	str	r6, [r3, r7]
			_sercom_instances[i] = NULL;
    741c:	195a      	adds	r2, r3, r5
    741e:	6014      	str	r4, [r2, #0]
    7420:	3304      	adds	r3, #4
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    7422:	2b18      	cmp	r3, #24
    7424:	d1f9      	bne.n	741a <_sercom_set_handler+0x12>
		}

		_handler_table_initialized = true;
    7426:	2201      	movs	r2, #1
    7428:	4b02      	ldr	r3, [pc, #8]	; (7434 <_sercom_set_handler+0x2c>)
    742a:	701a      	strb	r2, [r3, #0]
	}

	/* Save interrupt handler */
	_sercom_interrupt_handlers[instance] = interrupt_handler;
    742c:	0080      	lsls	r0, r0, #2
    742e:	4b02      	ldr	r3, [pc, #8]	; (7438 <_sercom_set_handler+0x30>)
    7430:	50c1      	str	r1, [r0, r3]
}
    7432:	bdf0      	pop	{r4, r5, r6, r7, pc}
    7434:	20000146 	.word	0x20000146
    7438:	20000148 	.word	0x20000148
    743c:	00007405 	.word	0x00007405
    7440:	20001d80 	.word	0x20001d80

00007444 <_sercom_get_interrupt_vector>:
 * \retval SYSTEM_INTERRUPT_MODULE_SERCOM6
 * \retval SYSTEM_INTERRUPT_MODULE_SERCOM7
 */
enum system_interrupt_vector _sercom_get_interrupt_vector(
		Sercom *const sercom_instance)
{
    7444:	b500      	push	{lr}
    7446:	b083      	sub	sp, #12
	const uint8_t sercom_int_vectors[SERCOM_INST_NUM] =
    7448:	2309      	movs	r3, #9
    744a:	466a      	mov	r2, sp
    744c:	7013      	strb	r3, [r2, #0]
    744e:	3301      	adds	r3, #1
    7450:	7053      	strb	r3, [r2, #1]
    7452:	3301      	adds	r3, #1
    7454:	7093      	strb	r3, [r2, #2]
    7456:	3301      	adds	r3, #1
    7458:	70d3      	strb	r3, [r2, #3]
    745a:	3301      	adds	r3, #1
    745c:	7113      	strb	r3, [r2, #4]
    745e:	3301      	adds	r3, #1
    7460:	7153      	strb	r3, [r2, #5]
		{
			MREPEAT(SERCOM_INST_NUM, _SERCOM_INTERRUPT_VECT_NUM, ~)
		};

	/* Retrieve the index of the SERCOM being requested */
	uint8_t instance_index = _sercom_get_sercom_inst_index(sercom_instance);
    7462:	4b03      	ldr	r3, [pc, #12]	; (7470 <_sercom_get_interrupt_vector+0x2c>)
    7464:	4798      	blx	r3

	/* Get the vector number from the lookup table for the requested SERCOM */
	return (enum system_interrupt_vector)sercom_int_vectors[instance_index];
    7466:	466b      	mov	r3, sp
    7468:	5618      	ldrsb	r0, [r3, r0]
}
    746a:	b003      	add	sp, #12
    746c:	bd00      	pop	{pc}
    746e:	46c0      	nop			; (mov r8, r8)
    7470:	000073cd 	.word	0x000073cd

00007474 <SERCOM0_Handler>:

/** Auto-generate a set of interrupt handlers for each SERCOM in the device */
MREPEAT(SERCOM_INST_NUM, _SERCOM_INTERRUPT_HANDLER, ~)
    7474:	b510      	push	{r4, lr}
    7476:	4b02      	ldr	r3, [pc, #8]	; (7480 <SERCOM0_Handler+0xc>)
    7478:	681b      	ldr	r3, [r3, #0]
    747a:	2000      	movs	r0, #0
    747c:	4798      	blx	r3
    747e:	bd10      	pop	{r4, pc}
    7480:	20000148 	.word	0x20000148

00007484 <SERCOM1_Handler>:
    7484:	b510      	push	{r4, lr}
    7486:	4b02      	ldr	r3, [pc, #8]	; (7490 <SERCOM1_Handler+0xc>)
    7488:	685b      	ldr	r3, [r3, #4]
    748a:	2001      	movs	r0, #1
    748c:	4798      	blx	r3
    748e:	bd10      	pop	{r4, pc}
    7490:	20000148 	.word	0x20000148

00007494 <SERCOM2_Handler>:
    7494:	b510      	push	{r4, lr}
    7496:	4b02      	ldr	r3, [pc, #8]	; (74a0 <SERCOM2_Handler+0xc>)
    7498:	689b      	ldr	r3, [r3, #8]
    749a:	2002      	movs	r0, #2
    749c:	4798      	blx	r3
    749e:	bd10      	pop	{r4, pc}
    74a0:	20000148 	.word	0x20000148

000074a4 <SERCOM3_Handler>:
    74a4:	b510      	push	{r4, lr}
    74a6:	4b02      	ldr	r3, [pc, #8]	; (74b0 <SERCOM3_Handler+0xc>)
    74a8:	68db      	ldr	r3, [r3, #12]
    74aa:	2003      	movs	r0, #3
    74ac:	4798      	blx	r3
    74ae:	bd10      	pop	{r4, pc}
    74b0:	20000148 	.word	0x20000148

000074b4 <SERCOM4_Handler>:
    74b4:	b510      	push	{r4, lr}
    74b6:	4b02      	ldr	r3, [pc, #8]	; (74c0 <SERCOM4_Handler+0xc>)
    74b8:	691b      	ldr	r3, [r3, #16]
    74ba:	2004      	movs	r0, #4
    74bc:	4798      	blx	r3
    74be:	bd10      	pop	{r4, pc}
    74c0:	20000148 	.word	0x20000148

000074c4 <SERCOM5_Handler>:
    74c4:	b510      	push	{r4, lr}
    74c6:	4b02      	ldr	r3, [pc, #8]	; (74d0 <SERCOM5_Handler+0xc>)
    74c8:	695b      	ldr	r3, [r3, #20]
    74ca:	2005      	movs	r0, #5
    74cc:	4798      	blx	r3
    74ce:	bd10      	pop	{r4, pc}
    74d0:	20000148 	.word	0x20000148

000074d4 <spi_init>:
 */
enum status_code spi_init(
		struct spi_module *const module,
		Sercom *const hw,
		const struct spi_config *const config)
{
    74d4:	b5f0      	push	{r4, r5, r6, r7, lr}
    74d6:	46d6      	mov	lr, sl
    74d8:	464f      	mov	r7, r9
    74da:	b580      	push	{r7, lr}
    74dc:	b08b      	sub	sp, #44	; 0x2c
    74de:	4681      	mov	r9, r0
    74e0:	000f      	movs	r7, r1
    74e2:	0014      	movs	r4, r2
	Assert(module);
	Assert(hw);
	Assert(config);

	/* Initialize device instance */
	module->hw = hw;
    74e4:	0003      	movs	r3, r0
    74e6:	6019      	str	r1, [r3, #0]

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if module is enabled. */
	if (spi_module->CTRLA.reg & SERCOM_SPI_CTRLA_ENABLE) {
    74e8:	680b      	ldr	r3, [r1, #0]
    74ea:	079b      	lsls	r3, r3, #30
    74ec:	d409      	bmi.n	7502 <spi_init+0x2e>
		return STATUS_ERR_DENIED;
#  endif
	}

	/* Check if reset is in progress. */
	if (spi_module->CTRLA.reg & SERCOM_SPI_CTRLA_SWRST){
    74ee:	680b      	ldr	r3, [r1, #0]
		return STATUS_BUSY;
    74f0:	2005      	movs	r0, #5
	if (spi_module->CTRLA.reg & SERCOM_SPI_CTRLA_SWRST){
    74f2:	07db      	lsls	r3, r3, #31
    74f4:	d400      	bmi.n	74f8 <spi_init+0x24>
    74f6:	e098      	b.n	762a <spi_init+0x156>
	_sercom_instances[instance_index] = module;
#endif

	/* Write configuration to module and return status code */
	return _spi_set_config(module, config);
}
    74f8:	b00b      	add	sp, #44	; 0x2c
    74fa:	bc0c      	pop	{r2, r3}
    74fc:	4691      	mov	r9, r2
    74fe:	469a      	mov	sl, r3
    7500:	bdf0      	pop	{r4, r5, r6, r7, pc}
	uint32_t pad_pinmuxes[] = {
    7502:	6a93      	ldr	r3, [r2, #40]	; 0x28
    7504:	9305      	str	r3, [sp, #20]
    7506:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
    7508:	9306      	str	r3, [sp, #24]
    750a:	6b13      	ldr	r3, [r2, #48]	; 0x30
    750c:	9307      	str	r3, [sp, #28]
    750e:	6b53      	ldr	r3, [r2, #52]	; 0x34
    7510:	9308      	str	r3, [sp, #32]
    7512:	2600      	movs	r6, #0
		uint32_t current_pinmux = pad_pinmuxes[pad];
    7514:	ab05      	add	r3, sp, #20
    7516:	9301      	str	r3, [sp, #4]
    7518:	e00a      	b.n	7530 <spi_init+0x5c>
			current_pinmux = _sercom_get_default_pad(hw, pad);
    751a:	0038      	movs	r0, r7
    751c:	4b93      	ldr	r3, [pc, #588]	; (776c <spi_init+0x298>)
    751e:	4798      	blx	r3
    7520:	e00c      	b.n	753c <spi_init+0x68>

	if (pin_index & 1) {
		return (pmux_reg & PORT_PMUX_PMUXO_Msk) >> PORT_PMUX_PMUXO_Pos;
	}
	else {
		return (pmux_reg & PORT_PMUX_PMUXE_Msk) >> PORT_PMUX_PMUXE_Pos;
    7522:	230f      	movs	r3, #15
    7524:	4018      	ands	r0, r3
		if ((current_pinmux & 0xFFFF) !=
    7526:	4281      	cmp	r1, r0
    7528:	d12d      	bne.n	7586 <spi_init+0xb2>
    752a:	3601      	adds	r6, #1
	for (uint8_t pad = 0; pad < 4; pad++) {
    752c:	2e04      	cmp	r6, #4
    752e:	d02f      	beq.n	7590 <spi_init+0xbc>
    7530:	b2f1      	uxtb	r1, r6
		uint32_t current_pinmux = pad_pinmuxes[pad];
    7532:	00b3      	lsls	r3, r6, #2
    7534:	9a01      	ldr	r2, [sp, #4]
    7536:	5898      	ldr	r0, [r3, r2]
		if (current_pinmux == PINMUX_DEFAULT) {
    7538:	2800      	cmp	r0, #0
    753a:	d0ee      	beq.n	751a <spi_init+0x46>
		if (current_pinmux == PINMUX_UNUSED) {
    753c:	1c43      	adds	r3, r0, #1
    753e:	d0f4      	beq.n	752a <spi_init+0x56>
		if ((current_pinmux & 0xFFFF) !=
    7540:	0401      	lsls	r1, r0, #16
    7542:	0c09      	lsrs	r1, r1, #16
				system_pinmux_pin_get_mux_position(current_pinmux >> 16)) {
    7544:	0c00      	lsrs	r0, r0, #16
	if (port_index < PORT_INST_NUM) {
    7546:	b2c3      	uxtb	r3, r0
    7548:	469c      	mov	ip, r3
		return NULL;
    754a:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
    754c:	0602      	lsls	r2, r0, #24
    754e:	d405      	bmi.n	755c <spi_init+0x88>
		return &(ports[port_index]->Group[group_index]);
    7550:	4663      	mov	r3, ip
    7552:	095b      	lsrs	r3, r3, #5
    7554:	01db      	lsls	r3, r3, #7
    7556:	4a86      	ldr	r2, [pc, #536]	; (7770 <spi_init+0x29c>)
    7558:	4692      	mov	sl, r2
    755a:	4453      	add	r3, sl
	uint32_t pin_index = (gpio_pin % 32);
    755c:	221f      	movs	r2, #31
    755e:	4660      	mov	r0, ip
    7560:	4002      	ands	r2, r0
	if (!(port->PINCFG[pin_index].reg & PORT_PINCFG_PMUXEN)) {
    7562:	1898      	adds	r0, r3, r2
    7564:	3040      	adds	r0, #64	; 0x40
    7566:	7800      	ldrb	r0, [r0, #0]
    7568:	4682      	mov	sl, r0
		return SYSTEM_PINMUX_GPIO;
    756a:	2080      	movs	r0, #128	; 0x80
	if (!(port->PINCFG[pin_index].reg & PORT_PINCFG_PMUXEN)) {
    756c:	4655      	mov	r5, sl
    756e:	07ed      	lsls	r5, r5, #31
    7570:	d5d9      	bpl.n	7526 <spi_init+0x52>
	uint32_t pmux_reg = port->PMUX[pin_index / 2].reg;
    7572:	0852      	lsrs	r2, r2, #1
    7574:	189b      	adds	r3, r3, r2
    7576:	3330      	adds	r3, #48	; 0x30
    7578:	7818      	ldrb	r0, [r3, #0]
    757a:	b2c0      	uxtb	r0, r0
	if (pin_index & 1) {
    757c:	4663      	mov	r3, ip
    757e:	07db      	lsls	r3, r3, #31
    7580:	d5cf      	bpl.n	7522 <spi_init+0x4e>
		return (pmux_reg & PORT_PMUX_PMUXO_Msk) >> PORT_PMUX_PMUXO_Pos;
    7582:	0900      	lsrs	r0, r0, #4
    7584:	e7cf      	b.n	7526 <spi_init+0x52>
			module->hw = NULL;
    7586:	2300      	movs	r3, #0
    7588:	464a      	mov	r2, r9
    758a:	6013      	str	r3, [r2, #0]
			return STATUS_ERR_DENIED;
    758c:	201c      	movs	r0, #28
    758e:	e7b3      	b.n	74f8 <spi_init+0x24>
	uint32_t external_clock = system_gclk_chan_get_hz(SERCOM_GCLK_ID);
    7590:	2013      	movs	r0, #19
    7592:	4b78      	ldr	r3, [pc, #480]	; (7774 <spi_init+0x2a0>)
    7594:	4798      	blx	r3
	if (config->mode == SPI_MODE_MASTER) {
    7596:	7822      	ldrb	r2, [r4, #0]
	uint32_t ctrla = 0;
    7598:	2500      	movs	r5, #0
	if (config->mode == SPI_MODE_MASTER) {
    759a:	2a01      	cmp	r2, #1
    759c:	d027      	beq.n	75ee <spi_init+0x11a>
	ctrla |= config->mux_setting;
    759e:	6863      	ldr	r3, [r4, #4]
    75a0:	68a2      	ldr	r2, [r4, #8]
    75a2:	4313      	orrs	r3, r2
    75a4:	68e2      	ldr	r2, [r4, #12]
    75a6:	4313      	orrs	r3, r2
    75a8:	432b      	orrs	r3, r5
	ctrlb |= config->character_size;
    75aa:	7c22      	ldrb	r2, [r4, #16]
	if (config->run_in_standby) {
    75ac:	7c61      	ldrb	r1, [r4, #17]
    75ae:	2900      	cmp	r1, #0
    75b0:	d001      	beq.n	75b6 <spi_init+0xe2>
		ctrla |= SERCOM_SPI_CTRLA_RUNSTDBY;
    75b2:	2180      	movs	r1, #128	; 0x80
    75b4:	430b      	orrs	r3, r1
	if (config->receiver_enable) {
    75b6:	7ca1      	ldrb	r1, [r4, #18]
    75b8:	2900      	cmp	r1, #0
    75ba:	d002      	beq.n	75c2 <spi_init+0xee>
		ctrlb |= SERCOM_SPI_CTRLB_RXEN;
    75bc:	2180      	movs	r1, #128	; 0x80
    75be:	0289      	lsls	r1, r1, #10
    75c0:	430a      	orrs	r2, r1
	if (config->select_slave_low_detect_enable) {
    75c2:	7ce1      	ldrb	r1, [r4, #19]
    75c4:	2900      	cmp	r1, #0
    75c6:	d002      	beq.n	75ce <spi_init+0xfa>
		ctrlb |= SERCOM_SPI_CTRLB_SSDE;
    75c8:	2180      	movs	r1, #128	; 0x80
    75ca:	0089      	lsls	r1, r1, #2
    75cc:	430a      	orrs	r2, r1
	if (config->master_slave_select_enable) {
    75ce:	7d21      	ldrb	r1, [r4, #20]
    75d0:	2900      	cmp	r1, #0
    75d2:	d002      	beq.n	75da <spi_init+0x106>
		ctrlb |= SERCOM_SPI_CTRLB_MSSEN;
    75d4:	2180      	movs	r1, #128	; 0x80
    75d6:	0189      	lsls	r1, r1, #6
    75d8:	430a      	orrs	r2, r1
	if (spi_module->CTRLA.reg == ctrla &&
    75da:	6839      	ldr	r1, [r7, #0]
	ctrla |= SERCOM_SPI_CTRLA_ENABLE;
    75dc:	2002      	movs	r0, #2
    75de:	4303      	orrs	r3, r0
	if (spi_module->CTRLA.reg == ctrla &&
    75e0:	428b      	cmp	r3, r1
    75e2:	d018      	beq.n	7616 <spi_init+0x142>
	module->hw = NULL;
    75e4:	2300      	movs	r3, #0
    75e6:	464a      	mov	r2, r9
    75e8:	6013      	str	r3, [r2, #0]
	return STATUS_ERR_DENIED;
    75ea:	201c      	movs	r0, #28
    75ec:	e784      	b.n	74f8 <spi_init+0x24>
		enum status_code error_code = _sercom_get_sync_baud_val(
    75ee:	aa04      	add	r2, sp, #16
    75f0:	0001      	movs	r1, r0
    75f2:	69a0      	ldr	r0, [r4, #24]
    75f4:	4b60      	ldr	r3, [pc, #384]	; (7778 <spi_init+0x2a4>)
    75f6:	4798      	blx	r3
    75f8:	0003      	movs	r3, r0
			return STATUS_ERR_INVALID_ARG;
    75fa:	2017      	movs	r0, #23
		if (error_code != STATUS_OK) {
    75fc:	2b00      	cmp	r3, #0
    75fe:	d000      	beq.n	7602 <spi_init+0x12e>
    7600:	e77a      	b.n	74f8 <spi_init+0x24>
		if (spi_module->BAUD.reg !=  (uint8_t)baud) {
    7602:	7b3b      	ldrb	r3, [r7, #12]
    7604:	b2db      	uxtb	r3, r3
    7606:	aa04      	add	r2, sp, #16
    7608:	7812      	ldrb	r2, [r2, #0]
			return STATUS_ERR_DENIED;
    760a:	3005      	adds	r0, #5
		if (spi_module->BAUD.reg !=  (uint8_t)baud) {
    760c:	429a      	cmp	r2, r3
    760e:	d000      	beq.n	7612 <spi_init+0x13e>
    7610:	e772      	b.n	74f8 <spi_init+0x24>
		ctrla |= SERCOM_SPI_CTRLA_MODE(0x3);
    7612:	350c      	adds	r5, #12
    7614:	e7c3      	b.n	759e <spi_init+0xca>
			spi_module->CTRLB.reg == ctrlb) {
    7616:	687b      	ldr	r3, [r7, #4]
	if (spi_module->CTRLA.reg == ctrla &&
    7618:	4293      	cmp	r3, r2
    761a:	d1e3      	bne.n	75e4 <spi_init+0x110>
		module->mode           = config->mode;
    761c:	7823      	ldrb	r3, [r4, #0]
    761e:	464a      	mov	r2, r9
    7620:	7153      	strb	r3, [r2, #5]
		module->character_size = config->character_size;
    7622:	7c23      	ldrb	r3, [r4, #16]
    7624:	7193      	strb	r3, [r2, #6]
		return STATUS_OK;
    7626:	2000      	movs	r0, #0
    7628:	e766      	b.n	74f8 <spi_init+0x24>
	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    762a:	0008      	movs	r0, r1
    762c:	4b53      	ldr	r3, [pc, #332]	; (777c <spi_init+0x2a8>)
    762e:	4798      	blx	r3
    7630:	4a53      	ldr	r2, [pc, #332]	; (7780 <spi_init+0x2ac>)
    7632:	6a11      	ldr	r1, [r2, #32]
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
    7634:	1c85      	adds	r5, r0, #2
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
    7636:	2301      	movs	r3, #1
    7638:	40ab      	lsls	r3, r5
    763a:	430b      	orrs	r3, r1
    763c:	6213      	str	r3, [r2, #32]
	gclk_chan_conf.source_generator = config->generator_source;
    763e:	a909      	add	r1, sp, #36	; 0x24
    7640:	2624      	movs	r6, #36	; 0x24
    7642:	5da3      	ldrb	r3, [r4, r6]
    7644:	700b      	strb	r3, [r1, #0]
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
    7646:	3014      	adds	r0, #20
	system_gclk_chan_set_config(gclk_index, &gclk_chan_conf);
    7648:	b2c5      	uxtb	r5, r0
    764a:	0028      	movs	r0, r5
    764c:	4b4d      	ldr	r3, [pc, #308]	; (7784 <spi_init+0x2b0>)
    764e:	4798      	blx	r3
	system_gclk_chan_enable(gclk_index);
    7650:	0028      	movs	r0, r5
    7652:	4b4d      	ldr	r3, [pc, #308]	; (7788 <spi_init+0x2b4>)
    7654:	4798      	blx	r3
	sercom_set_gclk_generator(config->generator_source, false);
    7656:	5da0      	ldrb	r0, [r4, r6]
    7658:	2100      	movs	r1, #0
    765a:	4b4c      	ldr	r3, [pc, #304]	; (778c <spi_init+0x2b8>)
    765c:	4798      	blx	r3
	if (config->mode == SPI_MODE_MASTER) {
    765e:	7823      	ldrb	r3, [r4, #0]
    7660:	2b01      	cmp	r3, #1
    7662:	d019      	beq.n	7698 <spi_init+0x1c4>
	SercomSpi *const spi_module = &(module->hw->SPI);
    7664:	464b      	mov	r3, r9
    7666:	681e      	ldr	r6, [r3, #0]
	config->mux_position = SYSTEM_PINMUX_GPIO;
    7668:	ab04      	add	r3, sp, #16
    766a:	2280      	movs	r2, #128	; 0x80
    766c:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    766e:	2200      	movs	r2, #0
    7670:	705a      	strb	r2, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
    7672:	2101      	movs	r1, #1
    7674:	7099      	strb	r1, [r3, #2]
	config->powersave    = false;
    7676:	70da      	strb	r2, [r3, #3]
	if(config->mode == SPI_MODE_SLAVE) {
    7678:	7823      	ldrb	r3, [r4, #0]
    767a:	2b00      	cmp	r3, #0
    767c:	d101      	bne.n	7682 <spi_init+0x1ae>
		pin_conf.input_pull = SYSTEM_PINMUX_PIN_PULL_NONE;
    767e:	ab04      	add	r3, sp, #16
    7680:	709a      	strb	r2, [r3, #2]
	uint32_t pad_pinmuxes[] = {
    7682:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    7684:	9305      	str	r3, [sp, #20]
    7686:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    7688:	9306      	str	r3, [sp, #24]
    768a:	6b23      	ldr	r3, [r4, #48]	; 0x30
    768c:	9307      	str	r3, [sp, #28]
    768e:	6b63      	ldr	r3, [r4, #52]	; 0x34
    7690:	9308      	str	r3, [sp, #32]
    7692:	2700      	movs	r7, #0
		uint32_t current_pinmux = pad_pinmuxes[pad];
    7694:	ad05      	add	r5, sp, #20
    7696:	e011      	b.n	76bc <spi_init+0x1e8>
		spi_module->CTRLA.reg |= SERCOM_SPI_CTRLA_MODE(0x3);
    7698:	683b      	ldr	r3, [r7, #0]
    769a:	220c      	movs	r2, #12
    769c:	4313      	orrs	r3, r2
    769e:	603b      	str	r3, [r7, #0]
    76a0:	e7e0      	b.n	7664 <spi_init+0x190>
			current_pinmux = _sercom_get_default_pad(hw, pad);
    76a2:	0030      	movs	r0, r6
    76a4:	4b31      	ldr	r3, [pc, #196]	; (776c <spi_init+0x298>)
    76a6:	4798      	blx	r3
    76a8:	e00d      	b.n	76c6 <spi_init+0x1f2>
			pin_conf.mux_position = current_pinmux & 0xFFFF;
    76aa:	a904      	add	r1, sp, #16
    76ac:	7008      	strb	r0, [r1, #0]
			system_pinmux_pin_set_config(current_pinmux >> 16, &pin_conf);
    76ae:	0c00      	lsrs	r0, r0, #16
    76b0:	b2c0      	uxtb	r0, r0
    76b2:	4b37      	ldr	r3, [pc, #220]	; (7790 <spi_init+0x2bc>)
    76b4:	4798      	blx	r3
    76b6:	3701      	adds	r7, #1
	for (uint8_t pad = 0; pad < 4; pad++) {
    76b8:	2f04      	cmp	r7, #4
    76ba:	d007      	beq.n	76cc <spi_init+0x1f8>
    76bc:	b2f9      	uxtb	r1, r7
		uint32_t current_pinmux = pad_pinmuxes[pad];
    76be:	00bb      	lsls	r3, r7, #2
    76c0:	5958      	ldr	r0, [r3, r5]
		if (current_pinmux == PINMUX_DEFAULT) {
    76c2:	2800      	cmp	r0, #0
    76c4:	d0ed      	beq.n	76a2 <spi_init+0x1ce>
		if (current_pinmux != PINMUX_UNUSED) {
    76c6:	1c43      	adds	r3, r0, #1
    76c8:	d1ef      	bne.n	76aa <spi_init+0x1d6>
    76ca:	e7f4      	b.n	76b6 <spi_init+0x1e2>
	module->mode             = config->mode;
    76cc:	7823      	ldrb	r3, [r4, #0]
    76ce:	464a      	mov	r2, r9
    76d0:	7153      	strb	r3, [r2, #5]
	module->character_size   = config->character_size;
    76d2:	7c23      	ldrb	r3, [r4, #16]
    76d4:	7193      	strb	r3, [r2, #6]
	module->receiver_enabled = config->receiver_enable;
    76d6:	7ca3      	ldrb	r3, [r4, #18]
    76d8:	71d3      	strb	r3, [r2, #7]
	module->master_slave_select_enable = config->master_slave_select_enable;
    76da:	7d23      	ldrb	r3, [r4, #20]
    76dc:	7213      	strb	r3, [r2, #8]
	uint16_t baud = 0;
    76de:	2200      	movs	r2, #0
    76e0:	ab02      	add	r3, sp, #8
    76e2:	80da      	strh	r2, [r3, #6]
	if (config->mode == SPI_MODE_MASTER) {
    76e4:	7823      	ldrb	r3, [r4, #0]
    76e6:	2b01      	cmp	r3, #1
    76e8:	d028      	beq.n	773c <spi_init+0x268>
	ctrla |= config->transfer_mode;
    76ea:	6863      	ldr	r3, [r4, #4]
    76ec:	68a2      	ldr	r2, [r4, #8]
    76ee:	4313      	orrs	r3, r2
	ctrla |= config->mux_setting;
    76f0:	68e2      	ldr	r2, [r4, #12]
    76f2:	4313      	orrs	r3, r2
	ctrlb |= config->character_size;
    76f4:	7c21      	ldrb	r1, [r4, #16]
	if (config->run_in_standby || system_is_debugger_present()) {
    76f6:	7c62      	ldrb	r2, [r4, #17]
    76f8:	2a00      	cmp	r2, #0
    76fa:	d103      	bne.n	7704 <spi_init+0x230>
    76fc:	4a25      	ldr	r2, [pc, #148]	; (7794 <spi_init+0x2c0>)
    76fe:	7892      	ldrb	r2, [r2, #2]
    7700:	0792      	lsls	r2, r2, #30
    7702:	d501      	bpl.n	7708 <spi_init+0x234>
		ctrla |= SERCOM_SPI_CTRLA_RUNSTDBY;
    7704:	2280      	movs	r2, #128	; 0x80
    7706:	4313      	orrs	r3, r2
	if (config->receiver_enable) {
    7708:	7ca2      	ldrb	r2, [r4, #18]
    770a:	2a00      	cmp	r2, #0
    770c:	d002      	beq.n	7714 <spi_init+0x240>
		ctrlb |= SERCOM_SPI_CTRLB_RXEN;
    770e:	2280      	movs	r2, #128	; 0x80
    7710:	0292      	lsls	r2, r2, #10
    7712:	4311      	orrs	r1, r2
	if (config->select_slave_low_detect_enable) {
    7714:	7ce2      	ldrb	r2, [r4, #19]
    7716:	2a00      	cmp	r2, #0
    7718:	d002      	beq.n	7720 <spi_init+0x24c>
		ctrlb |= SERCOM_SPI_CTRLB_SSDE;
    771a:	2280      	movs	r2, #128	; 0x80
    771c:	0092      	lsls	r2, r2, #2
    771e:	4311      	orrs	r1, r2
	if (config->master_slave_select_enable) {
    7720:	7d22      	ldrb	r2, [r4, #20]
    7722:	2a00      	cmp	r2, #0
    7724:	d002      	beq.n	772c <spi_init+0x258>
		ctrlb |= SERCOM_SPI_CTRLB_MSSEN;
    7726:	2280      	movs	r2, #128	; 0x80
    7728:	0192      	lsls	r2, r2, #6
    772a:	4311      	orrs	r1, r2
	spi_module->CTRLA.reg |= ctrla;
    772c:	6832      	ldr	r2, [r6, #0]
    772e:	4313      	orrs	r3, r2
    7730:	6033      	str	r3, [r6, #0]
	spi_module->CTRLB.reg |= ctrlb;
    7732:	6873      	ldr	r3, [r6, #4]
    7734:	430b      	orrs	r3, r1
    7736:	6073      	str	r3, [r6, #4]
	return STATUS_OK;
    7738:	2000      	movs	r0, #0
    773a:	e6dd      	b.n	74f8 <spi_init+0x24>
		uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    773c:	464b      	mov	r3, r9
    773e:	6818      	ldr	r0, [r3, #0]
    7740:	4b0e      	ldr	r3, [pc, #56]	; (777c <spi_init+0x2a8>)
    7742:	4798      	blx	r3
		uint32_t gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
    7744:	3014      	adds	r0, #20
		uint32_t internal_clock = system_gclk_chan_get_hz(gclk_index);
    7746:	b2c0      	uxtb	r0, r0
    7748:	4b0a      	ldr	r3, [pc, #40]	; (7774 <spi_init+0x2a0>)
    774a:	4798      	blx	r3
    774c:	0001      	movs	r1, r0
		enum status_code error_code = _sercom_get_sync_baud_val(
    774e:	ab02      	add	r3, sp, #8
    7750:	1d9a      	adds	r2, r3, #6
    7752:	69a0      	ldr	r0, [r4, #24]
    7754:	4b08      	ldr	r3, [pc, #32]	; (7778 <spi_init+0x2a4>)
    7756:	4798      	blx	r3
    7758:	0003      	movs	r3, r0
			return STATUS_ERR_INVALID_ARG;
    775a:	2017      	movs	r0, #23
		if (error_code != STATUS_OK) {
    775c:	2b00      	cmp	r3, #0
    775e:	d000      	beq.n	7762 <spi_init+0x28e>
    7760:	e6ca      	b.n	74f8 <spi_init+0x24>
		spi_module->BAUD.reg = (uint8_t)baud;
    7762:	ab02      	add	r3, sp, #8
    7764:	3306      	adds	r3, #6
    7766:	781b      	ldrb	r3, [r3, #0]
    7768:	7333      	strb	r3, [r6, #12]
    776a:	e7be      	b.n	76ea <spi_init+0x216>
    776c:	00007255 	.word	0x00007255
    7770:	41004400 	.word	0x41004400
    7774:	000085ed 	.word	0x000085ed
    7778:	0000714b 	.word	0x0000714b
    777c:	000073cd 	.word	0x000073cd
    7780:	40000400 	.word	0x40000400
    7784:	000085d1 	.word	0x000085d1
    7788:	00008545 	.word	0x00008545
    778c:	00007209 	.word	0x00007209
    7790:	000086c9 	.word	0x000086c9
    7794:	41002000 	.word	0x41002000

00007798 <spi_select_slave>:
 */
enum status_code spi_select_slave(
		struct spi_module *const module,
		struct spi_slave_inst *const slave,
		const bool select)
{
    7798:	b510      	push	{r4, lr}
	Assert(module);
	Assert(module->hw);
	Assert(slave);

	/* Check that the SPI module is operating in master mode */
	if (module->mode != SPI_MODE_MASTER) {
    779a:	7944      	ldrb	r4, [r0, #5]
		return STATUS_ERR_UNSUPPORTED_DEV;
    779c:	2315      	movs	r3, #21
	if (module->mode != SPI_MODE_MASTER) {
    779e:	2c01      	cmp	r4, #1
    77a0:	d001      	beq.n	77a6 <spi_select_slave+0xe>
			/* Drive Slave Select high */
			port_pin_set_output_level(slave->ss_pin, true);
		}
	}
	return STATUS_OK;
}
    77a2:	0018      	movs	r0, r3
    77a4:	bd10      	pop	{r4, pc}
	if(!(module->master_slave_select_enable))
    77a6:	7a04      	ldrb	r4, [r0, #8]
	return STATUS_OK;
    77a8:	2300      	movs	r3, #0
	if(!(module->master_slave_select_enable))
    77aa:	2c00      	cmp	r4, #0
    77ac:	d1f9      	bne.n	77a2 <spi_select_slave+0xa>
		if (select) {
    77ae:	2a00      	cmp	r2, #0
    77b0:	d058      	beq.n	7864 <spi_select_slave+0xcc>
			if (slave->address_enabled) {
    77b2:	784b      	ldrb	r3, [r1, #1]
    77b4:	2b00      	cmp	r3, #0
    77b6:	d044      	beq.n	7842 <spi_select_slave+0xaa>
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    77b8:	6803      	ldr	r3, [r0, #0]
    77ba:	7e1b      	ldrb	r3, [r3, #24]
				if (!spi_is_ready_to_write(module)) {
    77bc:	07db      	lsls	r3, r3, #31
    77be:	d410      	bmi.n	77e2 <spi_select_slave+0x4a>
					port_pin_set_output_level(slave->ss_pin, true);
    77c0:	780a      	ldrb	r2, [r1, #0]
	if (port_index < PORT_INST_NUM) {
    77c2:	09d1      	lsrs	r1, r2, #7
		return NULL;
    77c4:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
    77c6:	2900      	cmp	r1, #0
    77c8:	d104      	bne.n	77d4 <spi_select_slave+0x3c>
		return &(ports[port_index]->Group[group_index]);
    77ca:	0953      	lsrs	r3, r2, #5
    77cc:	01db      	lsls	r3, r3, #7
    77ce:	492e      	ldr	r1, [pc, #184]	; (7888 <spi_select_slave+0xf0>)
    77d0:	468c      	mov	ip, r1
    77d2:	4463      	add	r3, ip
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    77d4:	211f      	movs	r1, #31
    77d6:	4011      	ands	r1, r2
    77d8:	2201      	movs	r2, #1
    77da:	408a      	lsls	r2, r1
		port_base->OUTSET.reg = pin_mask;
    77dc:	619a      	str	r2, [r3, #24]
					return STATUS_BUSY;
    77de:	2305      	movs	r3, #5
    77e0:	e7df      	b.n	77a2 <spi_select_slave+0xa>
				port_pin_set_output_level(slave->ss_pin, false);
    77e2:	780a      	ldrb	r2, [r1, #0]
	if (port_index < PORT_INST_NUM) {
    77e4:	09d4      	lsrs	r4, r2, #7
		return NULL;
    77e6:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
    77e8:	2c00      	cmp	r4, #0
    77ea:	d104      	bne.n	77f6 <spi_select_slave+0x5e>
		return &(ports[port_index]->Group[group_index]);
    77ec:	0953      	lsrs	r3, r2, #5
    77ee:	01db      	lsls	r3, r3, #7
    77f0:	4c25      	ldr	r4, [pc, #148]	; (7888 <spi_select_slave+0xf0>)
    77f2:	46a4      	mov	ip, r4
    77f4:	4463      	add	r3, ip
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    77f6:	241f      	movs	r4, #31
    77f8:	4014      	ands	r4, r2
    77fa:	2201      	movs	r2, #1
    77fc:	40a2      	lsls	r2, r4
	} else {
		port_base->OUTCLR.reg = pin_mask;
    77fe:	615a      	str	r2, [r3, #20]
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    7800:	6803      	ldr	r3, [r0, #0]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    7802:	7e1a      	ldrb	r2, [r3, #24]

	/* Check if the data register has been copied to the shift register */
	if (!spi_is_ready_to_write(module)) {
    7804:	07d2      	lsls	r2, r2, #31
    7806:	d501      	bpl.n	780c <spi_select_slave+0x74>
		/* Data register has not been copied to the shift register, return */
		return STATUS_BUSY;
	}

	/* Write the character to the DATA register */
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    7808:	788a      	ldrb	r2, [r1, #2]
    780a:	629a      	str	r2, [r3, #40]	; 0x28
				if (!(module->receiver_enabled)) {
    780c:	79c2      	ldrb	r2, [r0, #7]
	return STATUS_OK;
    780e:	2300      	movs	r3, #0
				if (!(module->receiver_enabled)) {
    7810:	2a00      	cmp	r2, #0
    7812:	d1c6      	bne.n	77a2 <spi_select_slave+0xa>
	SercomSpi *const spi_module = &(module->hw->SPI);
    7814:	6802      	ldr	r2, [r0, #0]
					while (!spi_is_ready_to_read(module)) {
    7816:	2104      	movs	r1, #4
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    7818:	7e13      	ldrb	r3, [r2, #24]
    781a:	420b      	tst	r3, r1
    781c:	d0fc      	beq.n	7818 <spi_select_slave+0x80>
    781e:	7e11      	ldrb	r1, [r2, #24]
	return STATUS_OK;
    7820:	2300      	movs	r3, #0
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if data is ready to be read */
	if (!spi_is_ready_to_read(module)) {
    7822:	0749      	lsls	r1, r1, #29
    7824:	d5bd      	bpl.n	77a2 <spi_select_slave+0xa>

	/* Return value */
	enum status_code retval = STATUS_OK;

	/* Check if data is overflown */
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    7826:	8b53      	ldrh	r3, [r2, #26]
    7828:	075b      	lsls	r3, r3, #29
    782a:	d501      	bpl.n	7830 <spi_select_slave+0x98>
		retval = STATUS_ERR_OVERFLOW;
		/* Clear overflow flag */
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
    782c:	2304      	movs	r3, #4
    782e:	8353      	strh	r3, [r2, #26]
	}

	/* Read the character from the DATA register */
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    7830:	7983      	ldrb	r3, [r0, #6]
    7832:	2b01      	cmp	r3, #1
    7834:	d002      	beq.n	783c <spi_select_slave+0xa4>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
	} else {
		*rx_data = (uint8_t)spi_module->DATA.reg;
    7836:	6a93      	ldr	r3, [r2, #40]	; 0x28
    7838:	2300      	movs	r3, #0
    783a:	e7b2      	b.n	77a2 <spi_select_slave+0xa>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
    783c:	6a93      	ldr	r3, [r2, #40]	; 0x28
    783e:	2300      	movs	r3, #0
    7840:	e7af      	b.n	77a2 <spi_select_slave+0xa>
				port_pin_set_output_level(slave->ss_pin, false);
    7842:	780a      	ldrb	r2, [r1, #0]
	if (port_index < PORT_INST_NUM) {
    7844:	09d1      	lsrs	r1, r2, #7
		return NULL;
    7846:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
    7848:	2900      	cmp	r1, #0
    784a:	d104      	bne.n	7856 <spi_select_slave+0xbe>
		return &(ports[port_index]->Group[group_index]);
    784c:	0953      	lsrs	r3, r2, #5
    784e:	01db      	lsls	r3, r3, #7
    7850:	490d      	ldr	r1, [pc, #52]	; (7888 <spi_select_slave+0xf0>)
    7852:	468c      	mov	ip, r1
    7854:	4463      	add	r3, ip
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    7856:	211f      	movs	r1, #31
    7858:	4011      	ands	r1, r2
    785a:	2201      	movs	r2, #1
    785c:	408a      	lsls	r2, r1
		port_base->OUTCLR.reg = pin_mask;
    785e:	615a      	str	r2, [r3, #20]
	return STATUS_OK;
    7860:	2300      	movs	r3, #0
    7862:	e79e      	b.n	77a2 <spi_select_slave+0xa>
			port_pin_set_output_level(slave->ss_pin, true);
    7864:	780a      	ldrb	r2, [r1, #0]
	if (port_index < PORT_INST_NUM) {
    7866:	09d1      	lsrs	r1, r2, #7
		return NULL;
    7868:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
    786a:	2900      	cmp	r1, #0
    786c:	d104      	bne.n	7878 <spi_select_slave+0xe0>
		return &(ports[port_index]->Group[group_index]);
    786e:	0953      	lsrs	r3, r2, #5
    7870:	01db      	lsls	r3, r3, #7
    7872:	4905      	ldr	r1, [pc, #20]	; (7888 <spi_select_slave+0xf0>)
    7874:	468c      	mov	ip, r1
    7876:	4463      	add	r3, ip
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    7878:	211f      	movs	r1, #31
    787a:	4011      	ands	r1, r2
    787c:	2201      	movs	r2, #1
    787e:	408a      	lsls	r2, r1
		port_base->OUTSET.reg = pin_mask;
    7880:	619a      	str	r2, [r3, #24]
	return STATUS_OK;
    7882:	2300      	movs	r3, #0
    7884:	e78d      	b.n	77a2 <spi_select_slave+0xa>
    7886:	46c0      	nop			; (mov r8, r8)
    7888:	41004400 	.word	0x41004400

0000788c <usart_init>:
 */
enum status_code usart_init(
		struct usart_module *const module,
		Sercom *const hw,
		const struct usart_config *const config)
{
    788c:	b5f0      	push	{r4, r5, r6, r7, lr}
    788e:	46de      	mov	lr, fp
    7890:	4657      	mov	r7, sl
    7892:	464e      	mov	r6, r9
    7894:	4645      	mov	r5, r8
    7896:	b5e0      	push	{r5, r6, r7, lr}
    7898:	b091      	sub	sp, #68	; 0x44
    789a:	0005      	movs	r5, r0
    789c:	000c      	movs	r4, r1
    789e:	0016      	movs	r6, r2
	Assert(config);

	enum status_code status_code = STATUS_OK;

	/* Assign module pointer to software instance struct */
	module->hw = hw;
    78a0:	6029      	str	r1, [r5, #0]

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);

	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    78a2:	0008      	movs	r0, r1
    78a4:	4bba      	ldr	r3, [pc, #744]	; (7b90 <usart_init+0x304>)
    78a6:	4798      	blx	r3
    78a8:	0002      	movs	r2, r0
#else
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
#endif

	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_SWRST) {
    78aa:	6823      	ldr	r3, [r4, #0]
		/* The module is busy resetting itself */
		return STATUS_BUSY;
    78ac:	2005      	movs	r0, #5
	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_SWRST) {
    78ae:	07db      	lsls	r3, r3, #31
    78b0:	d506      	bpl.n	78c0 <usart_init+0x34>
	_sercom_set_handler(instance_index, _usart_interrupt_handler);
	_sercom_instances[instance_index] = module;
#endif

	return status_code;
}
    78b2:	b011      	add	sp, #68	; 0x44
    78b4:	bc3c      	pop	{r2, r3, r4, r5}
    78b6:	4690      	mov	r8, r2
    78b8:	4699      	mov	r9, r3
    78ba:	46a2      	mov	sl, r4
    78bc:	46ab      	mov	fp, r5
    78be:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_ENABLE) {
    78c0:	6823      	ldr	r3, [r4, #0]
		return STATUS_ERR_DENIED;
    78c2:	3017      	adds	r0, #23
	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_ENABLE) {
    78c4:	079b      	lsls	r3, r3, #30
    78c6:	d4f4      	bmi.n	78b2 <usart_init+0x26>
    78c8:	49b2      	ldr	r1, [pc, #712]	; (7b94 <usart_init+0x308>)
    78ca:	6a08      	ldr	r0, [r1, #32]
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
    78cc:	1c97      	adds	r7, r2, #2
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
    78ce:	2301      	movs	r3, #1
    78d0:	40bb      	lsls	r3, r7
    78d2:	4303      	orrs	r3, r0
    78d4:	620b      	str	r3, [r1, #32]
	gclk_chan_conf.source_generator = config->generator_source;
    78d6:	a90f      	add	r1, sp, #60	; 0x3c
    78d8:	272d      	movs	r7, #45	; 0x2d
    78da:	5df3      	ldrb	r3, [r6, r7]
    78dc:	700b      	strb	r3, [r1, #0]
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
    78de:	3214      	adds	r2, #20
	system_gclk_chan_set_config(gclk_index, &gclk_chan_conf);
    78e0:	b2d3      	uxtb	r3, r2
    78e2:	9302      	str	r3, [sp, #8]
    78e4:	0018      	movs	r0, r3
    78e6:	4bac      	ldr	r3, [pc, #688]	; (7b98 <usart_init+0x30c>)
    78e8:	4798      	blx	r3
	system_gclk_chan_enable(gclk_index);
    78ea:	9802      	ldr	r0, [sp, #8]
    78ec:	4bab      	ldr	r3, [pc, #684]	; (7b9c <usart_init+0x310>)
    78ee:	4798      	blx	r3
	sercom_set_gclk_generator(config->generator_source, false);
    78f0:	5df0      	ldrb	r0, [r6, r7]
    78f2:	2100      	movs	r1, #0
    78f4:	4baa      	ldr	r3, [pc, #680]	; (7ba0 <usart_init+0x314>)
    78f6:	4798      	blx	r3
	module->character_size = config->character_size;
    78f8:	7af3      	ldrb	r3, [r6, #11]
    78fa:	716b      	strb	r3, [r5, #5]
	module->receiver_enabled = config->receiver_enable;
    78fc:	2324      	movs	r3, #36	; 0x24
    78fe:	5cf3      	ldrb	r3, [r6, r3]
    7900:	71ab      	strb	r3, [r5, #6]
	module->transmitter_enabled = config->transmitter_enable;
    7902:	2325      	movs	r3, #37	; 0x25
    7904:	5cf3      	ldrb	r3, [r6, r3]
    7906:	71eb      	strb	r3, [r5, #7]
	module->lin_slave_enabled = config->lin_slave_enable;
    7908:	7ef3      	ldrb	r3, [r6, #27]
    790a:	722b      	strb	r3, [r5, #8]
	module->start_frame_detection_enabled = config->start_frame_detection_enable;
    790c:	7f33      	ldrb	r3, [r6, #28]
    790e:	726b      	strb	r3, [r5, #9]
	SercomUsart *const usart_hw = &(module->hw->USART);
    7910:	682b      	ldr	r3, [r5, #0]
    7912:	4698      	mov	r8, r3
	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    7914:	0018      	movs	r0, r3
    7916:	4b9e      	ldr	r3, [pc, #632]	; (7b90 <usart_init+0x304>)
    7918:	4798      	blx	r3
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
    791a:	3014      	adds	r0, #20
	uint16_t baud  = 0;
    791c:	2200      	movs	r2, #0
    791e:	230e      	movs	r3, #14
    7920:	a906      	add	r1, sp, #24
    7922:	468c      	mov	ip, r1
    7924:	4463      	add	r3, ip
    7926:	801a      	strh	r2, [r3, #0]
	switch (config->sample_rate) {
    7928:	8a32      	ldrh	r2, [r6, #16]
    792a:	9202      	str	r2, [sp, #8]
    792c:	2380      	movs	r3, #128	; 0x80
    792e:	01db      	lsls	r3, r3, #7
    7930:	429a      	cmp	r2, r3
    7932:	d100      	bne.n	7936 <usart_init+0xaa>
    7934:	e09a      	b.n	7a6c <usart_init+0x1e0>
    7936:	d90f      	bls.n	7958 <usart_init+0xcc>
    7938:	23c0      	movs	r3, #192	; 0xc0
    793a:	01db      	lsls	r3, r3, #7
    793c:	9a02      	ldr	r2, [sp, #8]
    793e:	429a      	cmp	r2, r3
    7940:	d100      	bne.n	7944 <usart_init+0xb8>
    7942:	e08e      	b.n	7a62 <usart_init+0x1d6>
    7944:	2380      	movs	r3, #128	; 0x80
    7946:	021b      	lsls	r3, r3, #8
    7948:	429a      	cmp	r2, r3
    794a:	d000      	beq.n	794e <usart_init+0xc2>
    794c:	e11b      	b.n	7b86 <usart_init+0x2fa>
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_3;
    794e:	2303      	movs	r3, #3
    7950:	9306      	str	r3, [sp, #24]
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
    7952:	2300      	movs	r3, #0
    7954:	9307      	str	r3, [sp, #28]
    7956:	e008      	b.n	796a <usart_init+0xde>
	switch (config->sample_rate) {
    7958:	2380      	movs	r3, #128	; 0x80
    795a:	019b      	lsls	r3, r3, #6
    795c:	429a      	cmp	r2, r3
    795e:	d000      	beq.n	7962 <usart_init+0xd6>
    7960:	e111      	b.n	7b86 <usart_init+0x2fa>
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
    7962:	2310      	movs	r3, #16
    7964:	9306      	str	r3, [sp, #24]
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
    7966:	3b0f      	subs	r3, #15
    7968:	9307      	str	r3, [sp, #28]
	ctrla = (uint32_t)config->data_order |
    796a:	6833      	ldr	r3, [r6, #0]
    796c:	9305      	str	r3, [sp, #20]
		(uint32_t)config->mux_setting |
    796e:	68f3      	ldr	r3, [r6, #12]
    7970:	469b      	mov	fp, r3
		config->sample_adjustment |
    7972:	6973      	ldr	r3, [r6, #20]
    7974:	9303      	str	r3, [sp, #12]
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
    7976:	7e33      	ldrb	r3, [r6, #24]
    7978:	9304      	str	r3, [sp, #16]
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);
    797a:	2326      	movs	r3, #38	; 0x26
    797c:	5cf3      	ldrb	r3, [r6, r3]
    797e:	469a      	mov	sl, r3
	transfer_mode = (uint32_t)config->transfer_mode;
    7980:	6873      	ldr	r3, [r6, #4]
    7982:	4699      	mov	r9, r3
	switch (transfer_mode)
    7984:	2b00      	cmp	r3, #0
    7986:	d100      	bne.n	798a <usart_init+0xfe>
    7988:	e09c      	b.n	7ac4 <usart_init+0x238>
    798a:	2380      	movs	r3, #128	; 0x80
    798c:	055b      	lsls	r3, r3, #21
    798e:	4599      	cmp	r9, r3
    7990:	d100      	bne.n	7994 <usart_init+0x108>
    7992:	e080      	b.n	7a96 <usart_init+0x20a>
	if(config->encoding_format_enable) {
    7994:	7e73      	ldrb	r3, [r6, #25]
    7996:	2b00      	cmp	r3, #0
    7998:	d002      	beq.n	79a0 <usart_init+0x114>
		usart_hw->RXPL.reg = config->receive_pulse_length;
    799a:	7eb3      	ldrb	r3, [r6, #26]
    799c:	4642      	mov	r2, r8
    799e:	7393      	strb	r3, [r2, #14]
	usart_hw->BAUD.reg = baud;
    79a0:	230e      	movs	r3, #14
    79a2:	aa06      	add	r2, sp, #24
    79a4:	4694      	mov	ip, r2
    79a6:	4463      	add	r3, ip
    79a8:	881b      	ldrh	r3, [r3, #0]
    79aa:	4642      	mov	r2, r8
    79ac:	8193      	strh	r3, [r2, #12]
	ctrla |= transfer_mode;
    79ae:	9b05      	ldr	r3, [sp, #20]
    79b0:	465a      	mov	r2, fp
    79b2:	4313      	orrs	r3, r2
    79b4:	9a03      	ldr	r2, [sp, #12]
    79b6:	4313      	orrs	r3, r2
    79b8:	464a      	mov	r2, r9
    79ba:	4313      	orrs	r3, r2
    79bc:	9f02      	ldr	r7, [sp, #8]
    79be:	431f      	orrs	r7, r3
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
    79c0:	9b04      	ldr	r3, [sp, #16]
    79c2:	021b      	lsls	r3, r3, #8
	ctrla |= transfer_mode;
    79c4:	431f      	orrs	r7, r3
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);
    79c6:	4653      	mov	r3, sl
    79c8:	075b      	lsls	r3, r3, #29
	ctrla |= transfer_mode;
    79ca:	431f      	orrs	r7, r3
	if (config->use_external_clock == false) {
    79cc:	2327      	movs	r3, #39	; 0x27
    79ce:	5cf3      	ldrb	r3, [r6, r3]
    79d0:	2b00      	cmp	r3, #0
    79d2:	d101      	bne.n	79d8 <usart_init+0x14c>
		ctrla |= SERCOM_USART_CTRLA_MODE(0x1);
    79d4:	3304      	adds	r3, #4
    79d6:	431f      	orrs	r7, r3
			(config->encoding_format_enable << SERCOM_USART_CTRLB_ENC_Pos) |
    79d8:	7e73      	ldrb	r3, [r6, #25]
    79da:	029b      	lsls	r3, r3, #10
			(config->start_frame_detection_enable << SERCOM_USART_CTRLB_SFDE_Pos) |
    79dc:	7f32      	ldrb	r2, [r6, #28]
    79de:	0252      	lsls	r2, r2, #9
			(config->encoding_format_enable << SERCOM_USART_CTRLB_ENC_Pos) |
    79e0:	4313      	orrs	r3, r2
			(config->collision_detection_enable << SERCOM_USART_CTRLB_COLDEN_Pos) |
    79e2:	7f72      	ldrb	r2, [r6, #29]
    79e4:	0212      	lsls	r2, r2, #8
			(config->start_frame_detection_enable << SERCOM_USART_CTRLB_SFDE_Pos) |
    79e6:	4313      	orrs	r3, r2
			(config->receiver_enable << SERCOM_USART_CTRLB_RXEN_Pos) |
    79e8:	2224      	movs	r2, #36	; 0x24
    79ea:	5cb2      	ldrb	r2, [r6, r2]
    79ec:	0452      	lsls	r2, r2, #17
			(config->collision_detection_enable << SERCOM_USART_CTRLB_COLDEN_Pos) |
    79ee:	4313      	orrs	r3, r2
			(config->transmitter_enable << SERCOM_USART_CTRLB_TXEN_Pos);
    79f0:	2225      	movs	r2, #37	; 0x25
    79f2:	5cb2      	ldrb	r2, [r6, r2]
    79f4:	0412      	lsls	r2, r2, #16
			(config->receiver_enable << SERCOM_USART_CTRLB_RXEN_Pos) |
    79f6:	4313      	orrs	r3, r2
	ctrlb |= (uint32_t)config->character_size;
    79f8:	7ab1      	ldrb	r1, [r6, #10]
    79fa:	7af2      	ldrb	r2, [r6, #11]
    79fc:	4311      	orrs	r1, r2
    79fe:	4319      	orrs	r1, r3
	if (config->parity != USART_PARITY_NONE) {
    7a00:	8933      	ldrh	r3, [r6, #8]
    7a02:	2bff      	cmp	r3, #255	; 0xff
    7a04:	d100      	bne.n	7a08 <usart_init+0x17c>
    7a06:	e081      	b.n	7b0c <usart_init+0x280>
		ctrla |= SERCOM_USART_CTRLA_FORM(1);
    7a08:	2280      	movs	r2, #128	; 0x80
    7a0a:	0452      	lsls	r2, r2, #17
    7a0c:	4317      	orrs	r7, r2
		ctrlb |= config->parity;
    7a0e:	4319      	orrs	r1, r3
	if (config->run_in_standby || system_is_debugger_present()) {
    7a10:	232c      	movs	r3, #44	; 0x2c
    7a12:	5cf3      	ldrb	r3, [r6, r3]
    7a14:	2b00      	cmp	r3, #0
    7a16:	d103      	bne.n	7a20 <usart_init+0x194>
    7a18:	4b62      	ldr	r3, [pc, #392]	; (7ba4 <usart_init+0x318>)
    7a1a:	789b      	ldrb	r3, [r3, #2]
    7a1c:	079b      	lsls	r3, r3, #30
    7a1e:	d501      	bpl.n	7a24 <usart_init+0x198>
		ctrla |= SERCOM_USART_CTRLA_RUNSTDBY;
    7a20:	2380      	movs	r3, #128	; 0x80
    7a22:	431f      	orrs	r7, r3
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomUsart *const usart_hw = &(module->hw->USART);
    7a24:	682a      	ldr	r2, [r5, #0]

#ifdef FEATURE_USART_SYNC_SCHEME_V2
	return (usart_hw->SYNCBUSY.reg);
    7a26:	69d3      	ldr	r3, [r2, #28]
		const struct usart_module *const module)
{
	/* Sanity check */
	Assert(module);

	while (usart_is_syncing(module)) {
    7a28:	2b00      	cmp	r3, #0
    7a2a:	d1fc      	bne.n	7a26 <usart_init+0x19a>
	usart_hw->CTRLB.reg = ctrlb;
    7a2c:	4643      	mov	r3, r8
    7a2e:	6059      	str	r1, [r3, #4]
	SercomUsart *const usart_hw = &(module->hw->USART);
    7a30:	682a      	ldr	r2, [r5, #0]
	return (usart_hw->SYNCBUSY.reg);
    7a32:	69d3      	ldr	r3, [r2, #28]
	while (usart_is_syncing(module)) {
    7a34:	2b00      	cmp	r3, #0
    7a36:	d1fc      	bne.n	7a32 <usart_init+0x1a6>
	usart_hw->CTRLA.reg = ctrla;
    7a38:	4643      	mov	r3, r8
    7a3a:	601f      	str	r7, [r3, #0]
	config->mux_position = SYSTEM_PINMUX_GPIO;
    7a3c:	ab0e      	add	r3, sp, #56	; 0x38
    7a3e:	2280      	movs	r2, #128	; 0x80
    7a40:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    7a42:	2200      	movs	r2, #0
    7a44:	705a      	strb	r2, [r3, #1]
	config->powersave    = false;
    7a46:	70da      	strb	r2, [r3, #3]
	pin_conf.input_pull = SYSTEM_PINMUX_PIN_PULL_NONE;
    7a48:	709a      	strb	r2, [r3, #2]
	uint32_t pad_pinmuxes[] = {
    7a4a:	6b33      	ldr	r3, [r6, #48]	; 0x30
    7a4c:	930a      	str	r3, [sp, #40]	; 0x28
    7a4e:	6b73      	ldr	r3, [r6, #52]	; 0x34
    7a50:	930b      	str	r3, [sp, #44]	; 0x2c
    7a52:	6bb3      	ldr	r3, [r6, #56]	; 0x38
    7a54:	930c      	str	r3, [sp, #48]	; 0x30
    7a56:	6bf3      	ldr	r3, [r6, #60]	; 0x3c
    7a58:	9302      	str	r3, [sp, #8]
    7a5a:	930d      	str	r3, [sp, #52]	; 0x34
    7a5c:	2700      	movs	r7, #0
		uint32_t current_pinmux = pad_pinmuxes[pad];
    7a5e:	ae0a      	add	r6, sp, #40	; 0x28
    7a60:	e063      	b.n	7b2a <usart_init+0x29e>
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_8;
    7a62:	2308      	movs	r3, #8
    7a64:	9306      	str	r3, [sp, #24]
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
    7a66:	3b07      	subs	r3, #7
    7a68:	9307      	str	r3, [sp, #28]
    7a6a:	e77e      	b.n	796a <usart_init+0xde>
	ctrla = (uint32_t)config->data_order |
    7a6c:	6833      	ldr	r3, [r6, #0]
    7a6e:	9305      	str	r3, [sp, #20]
		(uint32_t)config->mux_setting |
    7a70:	68f3      	ldr	r3, [r6, #12]
    7a72:	469b      	mov	fp, r3
		config->sample_adjustment |
    7a74:	6973      	ldr	r3, [r6, #20]
    7a76:	9303      	str	r3, [sp, #12]
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
    7a78:	7e33      	ldrb	r3, [r6, #24]
    7a7a:	9304      	str	r3, [sp, #16]
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);
    7a7c:	2326      	movs	r3, #38	; 0x26
    7a7e:	5cf3      	ldrb	r3, [r6, r3]
    7a80:	469a      	mov	sl, r3
	transfer_mode = (uint32_t)config->transfer_mode;
    7a82:	6873      	ldr	r3, [r6, #4]
    7a84:	4699      	mov	r9, r3
	switch (transfer_mode)
    7a86:	2b00      	cmp	r3, #0
    7a88:	d018      	beq.n	7abc <usart_init+0x230>
    7a8a:	2380      	movs	r3, #128	; 0x80
    7a8c:	055b      	lsls	r3, r3, #21
    7a8e:	4599      	cmp	r9, r3
    7a90:	d001      	beq.n	7a96 <usart_init+0x20a>
	enum status_code status_code = STATUS_OK;
    7a92:	2000      	movs	r0, #0
    7a94:	e025      	b.n	7ae2 <usart_init+0x256>
			if (!config->use_external_clock) {
    7a96:	2327      	movs	r3, #39	; 0x27
    7a98:	5cf3      	ldrb	r3, [r6, r3]
    7a9a:	2b00      	cmp	r3, #0
    7a9c:	d000      	beq.n	7aa0 <usart_init+0x214>
    7a9e:	e779      	b.n	7994 <usart_init+0x108>
				status_code = _sercom_get_sync_baud_val(config->baudrate,
    7aa0:	6a33      	ldr	r3, [r6, #32]
    7aa2:	001f      	movs	r7, r3
    7aa4:	b2c0      	uxtb	r0, r0
    7aa6:	4b40      	ldr	r3, [pc, #256]	; (7ba8 <usart_init+0x31c>)
    7aa8:	4798      	blx	r3
    7aaa:	0001      	movs	r1, r0
    7aac:	220e      	movs	r2, #14
    7aae:	ab06      	add	r3, sp, #24
    7ab0:	469c      	mov	ip, r3
    7ab2:	4462      	add	r2, ip
    7ab4:	0038      	movs	r0, r7
    7ab6:	4b3d      	ldr	r3, [pc, #244]	; (7bac <usart_init+0x320>)
    7ab8:	4798      	blx	r3
    7aba:	e012      	b.n	7ae2 <usart_init+0x256>
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_8;
    7abc:	2308      	movs	r3, #8
    7abe:	9306      	str	r3, [sp, #24]
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
    7ac0:	2300      	movs	r3, #0
    7ac2:	9307      	str	r3, [sp, #28]
			if (config->use_external_clock) {
    7ac4:	2327      	movs	r3, #39	; 0x27
    7ac6:	5cf3      	ldrb	r3, [r6, r3]
    7ac8:	2b00      	cmp	r3, #0
    7aca:	d00e      	beq.n	7aea <usart_init+0x25e>
				status_code =
    7acc:	9b06      	ldr	r3, [sp, #24]
    7ace:	9300      	str	r3, [sp, #0]
    7ad0:	9b07      	ldr	r3, [sp, #28]
    7ad2:	220e      	movs	r2, #14
    7ad4:	a906      	add	r1, sp, #24
    7ad6:	468c      	mov	ip, r1
    7ad8:	4462      	add	r2, ip
    7ada:	6ab1      	ldr	r1, [r6, #40]	; 0x28
    7adc:	6a30      	ldr	r0, [r6, #32]
    7ade:	4f34      	ldr	r7, [pc, #208]	; (7bb0 <usart_init+0x324>)
    7ae0:	47b8      	blx	r7
	if (status_code != STATUS_OK) {
    7ae2:	2800      	cmp	r0, #0
    7ae4:	d000      	beq.n	7ae8 <usart_init+0x25c>
    7ae6:	e6e4      	b.n	78b2 <usart_init+0x26>
    7ae8:	e754      	b.n	7994 <usart_init+0x108>
						_sercom_get_async_baud_val(config->baudrate,
    7aea:	6a33      	ldr	r3, [r6, #32]
    7aec:	001f      	movs	r7, r3
    7aee:	b2c0      	uxtb	r0, r0
    7af0:	4b2d      	ldr	r3, [pc, #180]	; (7ba8 <usart_init+0x31c>)
    7af2:	4798      	blx	r3
    7af4:	0001      	movs	r1, r0
				status_code =
    7af6:	9b06      	ldr	r3, [sp, #24]
    7af8:	9300      	str	r3, [sp, #0]
    7afa:	9b07      	ldr	r3, [sp, #28]
    7afc:	220e      	movs	r2, #14
    7afe:	a806      	add	r0, sp, #24
    7b00:	4684      	mov	ip, r0
    7b02:	4462      	add	r2, ip
    7b04:	0038      	movs	r0, r7
    7b06:	4f2a      	ldr	r7, [pc, #168]	; (7bb0 <usart_init+0x324>)
    7b08:	47b8      	blx	r7
    7b0a:	e7ea      	b.n	7ae2 <usart_init+0x256>
		if(config->lin_slave_enable) {
    7b0c:	7ef3      	ldrb	r3, [r6, #27]
    7b0e:	2b00      	cmp	r3, #0
    7b10:	d100      	bne.n	7b14 <usart_init+0x288>
    7b12:	e77d      	b.n	7a10 <usart_init+0x184>
			ctrla |= SERCOM_USART_CTRLA_FORM(0x4);
    7b14:	2380      	movs	r3, #128	; 0x80
    7b16:	04db      	lsls	r3, r3, #19
    7b18:	431f      	orrs	r7, r3
    7b1a:	e779      	b.n	7a10 <usart_init+0x184>
			current_pinmux = _sercom_get_default_pad(hw, pad);
    7b1c:	0020      	movs	r0, r4
    7b1e:	4b25      	ldr	r3, [pc, #148]	; (7bb4 <usart_init+0x328>)
    7b20:	4798      	blx	r3
    7b22:	e007      	b.n	7b34 <usart_init+0x2a8>
    7b24:	3701      	adds	r7, #1
	for (uint8_t pad = 0; pad < 4; pad++) {
    7b26:	2f04      	cmp	r7, #4
    7b28:	d00d      	beq.n	7b46 <usart_init+0x2ba>
    7b2a:	b2f9      	uxtb	r1, r7
		uint32_t current_pinmux = pad_pinmuxes[pad];
    7b2c:	00bb      	lsls	r3, r7, #2
    7b2e:	5998      	ldr	r0, [r3, r6]
		if (current_pinmux == PINMUX_DEFAULT) {
    7b30:	2800      	cmp	r0, #0
    7b32:	d0f3      	beq.n	7b1c <usart_init+0x290>
		if (current_pinmux != PINMUX_UNUSED) {
    7b34:	1c43      	adds	r3, r0, #1
    7b36:	d0f5      	beq.n	7b24 <usart_init+0x298>
			pin_conf.mux_position = current_pinmux & 0xFFFF;
    7b38:	a90e      	add	r1, sp, #56	; 0x38
    7b3a:	7008      	strb	r0, [r1, #0]
			system_pinmux_pin_set_config(current_pinmux >> 16, &pin_conf);
    7b3c:	0c00      	lsrs	r0, r0, #16
    7b3e:	b2c0      	uxtb	r0, r0
    7b40:	4b1d      	ldr	r3, [pc, #116]	; (7bb8 <usart_init+0x32c>)
    7b42:	4798      	blx	r3
    7b44:	e7ee      	b.n	7b24 <usart_init+0x298>
		module->callback[i]            = NULL;
    7b46:	2300      	movs	r3, #0
    7b48:	60eb      	str	r3, [r5, #12]
    7b4a:	612b      	str	r3, [r5, #16]
    7b4c:	616b      	str	r3, [r5, #20]
    7b4e:	61ab      	str	r3, [r5, #24]
    7b50:	61eb      	str	r3, [r5, #28]
    7b52:	622b      	str	r3, [r5, #32]
	module->tx_buffer_ptr              = NULL;
    7b54:	62ab      	str	r3, [r5, #40]	; 0x28
	module->rx_buffer_ptr              = NULL;
    7b56:	626b      	str	r3, [r5, #36]	; 0x24
	module->remaining_tx_buffer_length = 0x0000;
    7b58:	2200      	movs	r2, #0
    7b5a:	85eb      	strh	r3, [r5, #46]	; 0x2e
	module->remaining_rx_buffer_length = 0x0000;
    7b5c:	85ab      	strh	r3, [r5, #44]	; 0x2c
	module->callback_reg_mask          = 0x00;
    7b5e:	3330      	adds	r3, #48	; 0x30
    7b60:	54ea      	strb	r2, [r5, r3]
	module->callback_enable_mask       = 0x00;
    7b62:	3301      	adds	r3, #1
    7b64:	54ea      	strb	r2, [r5, r3]
	module->rx_status                  = STATUS_OK;
    7b66:	3301      	adds	r3, #1
    7b68:	54ea      	strb	r2, [r5, r3]
	module->tx_status                  = STATUS_OK;
    7b6a:	3301      	adds	r3, #1
    7b6c:	54ea      	strb	r2, [r5, r3]
	uint8_t instance_index = _sercom_get_sercom_inst_index(module->hw);
    7b6e:	6828      	ldr	r0, [r5, #0]
    7b70:	4b07      	ldr	r3, [pc, #28]	; (7b90 <usart_init+0x304>)
    7b72:	4798      	blx	r3
    7b74:	0004      	movs	r4, r0
	_sercom_set_handler(instance_index, _usart_interrupt_handler);
    7b76:	4911      	ldr	r1, [pc, #68]	; (7bbc <usart_init+0x330>)
    7b78:	4b11      	ldr	r3, [pc, #68]	; (7bc0 <usart_init+0x334>)
    7b7a:	4798      	blx	r3
	_sercom_instances[instance_index] = module;
    7b7c:	00a4      	lsls	r4, r4, #2
    7b7e:	4b11      	ldr	r3, [pc, #68]	; (7bc4 <usart_init+0x338>)
    7b80:	50e5      	str	r5, [r4, r3]
	return status_code;
    7b82:	2000      	movs	r0, #0
    7b84:	e695      	b.n	78b2 <usart_init+0x26>
	enum sercom_asynchronous_sample_num sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
    7b86:	2310      	movs	r3, #16
    7b88:	9306      	str	r3, [sp, #24]
	enum sercom_asynchronous_operation_mode mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
    7b8a:	2300      	movs	r3, #0
    7b8c:	9307      	str	r3, [sp, #28]
    7b8e:	e6ec      	b.n	796a <usart_init+0xde>
    7b90:	000073cd 	.word	0x000073cd
    7b94:	40000400 	.word	0x40000400
    7b98:	000085d1 	.word	0x000085d1
    7b9c:	00008545 	.word	0x00008545
    7ba0:	00007209 	.word	0x00007209
    7ba4:	41002000 	.word	0x41002000
    7ba8:	000085ed 	.word	0x000085ed
    7bac:	0000714b 	.word	0x0000714b
    7bb0:	00007175 	.word	0x00007175
    7bb4:	00007255 	.word	0x00007255
    7bb8:	000086c9 	.word	0x000086c9
    7bbc:	00007cf1 	.word	0x00007cf1
    7bc0:	00007409 	.word	0x00007409
    7bc4:	20001d80 	.word	0x20001d80

00007bc8 <usart_write_wait>:

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);

	/* Check that the transmitter is enabled */
	if (!(module->transmitter_enabled)) {
    7bc8:	79c2      	ldrb	r2, [r0, #7]
		return STATUS_ERR_DENIED;
    7bca:	231c      	movs	r3, #28
	if (!(module->transmitter_enabled)) {
    7bcc:	2a00      	cmp	r2, #0
    7bce:	d101      	bne.n	7bd4 <usart_write_wait+0xc>
	while (!(usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_TXC)) {
		/* Wait until data is sent */
	}

	return STATUS_OK;
}
    7bd0:	0018      	movs	r0, r3
    7bd2:	4770      	bx	lr
	if (module->remaining_tx_buffer_length > 0) {
    7bd4:	8dc2      	ldrh	r2, [r0, #46]	; 0x2e
    7bd6:	b292      	uxth	r2, r2
		return STATUS_BUSY;
    7bd8:	3b17      	subs	r3, #23
	if (module->remaining_tx_buffer_length > 0) {
    7bda:	2a00      	cmp	r2, #0
    7bdc:	d1f8      	bne.n	7bd0 <usart_write_wait+0x8>
	SercomUsart *const usart_hw = &(module->hw->USART);
    7bde:	6802      	ldr	r2, [r0, #0]
	usart_hw->DATA.reg = tx_data;
    7be0:	8511      	strh	r1, [r2, #40]	; 0x28
	while (!(usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_TXC)) {
    7be2:	2102      	movs	r1, #2
    7be4:	7e13      	ldrb	r3, [r2, #24]
    7be6:	420b      	tst	r3, r1
    7be8:	d0fc      	beq.n	7be4 <usart_write_wait+0x1c>
	return STATUS_OK;
    7bea:	2300      	movs	r3, #0
    7bec:	e7f0      	b.n	7bd0 <usart_write_wait+0x8>

00007bee <usart_read_wait>:

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);

	/* Check that the receiver is enabled */
	if (!(module->receiver_enabled)) {
    7bee:	7982      	ldrb	r2, [r0, #6]
		return STATUS_ERR_DENIED;
    7bf0:	231c      	movs	r3, #28
	if (!(module->receiver_enabled)) {
    7bf2:	2a00      	cmp	r2, #0
    7bf4:	d101      	bne.n	7bfa <usart_read_wait+0xc>

	/* Read data from USART module */
	*rx_data = usart_hw->DATA.reg;

	return STATUS_OK;
}
    7bf6:	0018      	movs	r0, r3
    7bf8:	4770      	bx	lr
	if (module->remaining_rx_buffer_length > 0) {
    7bfa:	8d82      	ldrh	r2, [r0, #44]	; 0x2c
    7bfc:	b292      	uxth	r2, r2
		return STATUS_BUSY;
    7bfe:	3b17      	subs	r3, #23
	if (module->remaining_rx_buffer_length > 0) {
    7c00:	2a00      	cmp	r2, #0
    7c02:	d1f8      	bne.n	7bf6 <usart_read_wait+0x8>
	SercomUsart *const usart_hw = &(module->hw->USART);
    7c04:	6802      	ldr	r2, [r0, #0]
	if (!(usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_RXC)) {
    7c06:	7e10      	ldrb	r0, [r2, #24]
    7c08:	0740      	lsls	r0, r0, #29
    7c0a:	d5f4      	bpl.n	7bf6 <usart_read_wait+0x8>
	error_code = (uint8_t)(usart_hw->STATUS.reg & SERCOM_USART_STATUS_MASK);
    7c0c:	8b53      	ldrh	r3, [r2, #26]
    7c0e:	b2db      	uxtb	r3, r3
	if (error_code) {
    7c10:	0698      	lsls	r0, r3, #26
    7c12:	d01d      	beq.n	7c50 <usart_read_wait+0x62>
		if (error_code & SERCOM_USART_STATUS_FERR) {
    7c14:	0798      	lsls	r0, r3, #30
    7c16:	d503      	bpl.n	7c20 <usart_read_wait+0x32>
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_FERR;
    7c18:	2302      	movs	r3, #2
    7c1a:	8353      	strh	r3, [r2, #26]
			return STATUS_ERR_BAD_FORMAT;
    7c1c:	3318      	adds	r3, #24
    7c1e:	e7ea      	b.n	7bf6 <usart_read_wait+0x8>
		} else if (error_code & SERCOM_USART_STATUS_BUFOVF) {
    7c20:	0758      	lsls	r0, r3, #29
    7c22:	d503      	bpl.n	7c2c <usart_read_wait+0x3e>
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_BUFOVF;
    7c24:	2304      	movs	r3, #4
    7c26:	8353      	strh	r3, [r2, #26]
			return STATUS_ERR_OVERFLOW;
    7c28:	331a      	adds	r3, #26
    7c2a:	e7e4      	b.n	7bf6 <usart_read_wait+0x8>
		} else if (error_code & SERCOM_USART_STATUS_PERR) {
    7c2c:	07d8      	lsls	r0, r3, #31
    7c2e:	d503      	bpl.n	7c38 <usart_read_wait+0x4a>
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_PERR;
    7c30:	2301      	movs	r3, #1
    7c32:	8353      	strh	r3, [r2, #26]
			return STATUS_ERR_BAD_DATA;
    7c34:	3312      	adds	r3, #18
    7c36:	e7de      	b.n	7bf6 <usart_read_wait+0x8>
		else if (error_code & SERCOM_USART_STATUS_ISF) {
    7c38:	06d8      	lsls	r0, r3, #27
    7c3a:	d503      	bpl.n	7c44 <usart_read_wait+0x56>
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_ISF;
    7c3c:	2310      	movs	r3, #16
    7c3e:	8353      	strh	r3, [r2, #26]
			return STATUS_ERR_PROTOCOL;
    7c40:	3332      	adds	r3, #50	; 0x32
    7c42:	e7d8      	b.n	7bf6 <usart_read_wait+0x8>
		else if (error_code & SERCOM_USART_STATUS_COLL) {
    7c44:	069b      	lsls	r3, r3, #26
    7c46:	d503      	bpl.n	7c50 <usart_read_wait+0x62>
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_COLL;
    7c48:	2320      	movs	r3, #32
    7c4a:	8353      	strh	r3, [r2, #26]
			return STATUS_ERR_PACKET_COLLISION;
    7c4c:	3321      	adds	r3, #33	; 0x21
    7c4e:	e7d2      	b.n	7bf6 <usart_read_wait+0x8>
	*rx_data = usart_hw->DATA.reg;
    7c50:	8d13      	ldrh	r3, [r2, #40]	; 0x28
    7c52:	800b      	strh	r3, [r1, #0]
	return STATUS_OK;
    7c54:	2300      	movs	r3, #0
    7c56:	e7ce      	b.n	7bf6 <usart_read_wait+0x8>

00007c58 <usart_read_buffer_wait>:
 */
enum status_code usart_read_buffer_wait(
		struct usart_module *const module,
		uint8_t *rx_data,
		uint16_t length)
{
    7c58:	b5f0      	push	{r4, r5, r6, r7, lr}
    7c5a:	46d6      	mov	lr, sl
    7c5c:	b500      	push	{lr}
    7c5e:	b084      	sub	sp, #16
    7c60:	0004      	movs	r4, r0
    7c62:	9101      	str	r1, [sp, #4]
	Assert(module);
	Assert(module->hw);

	/* Check if the buffer length is valid */
	if (length == 0) {
		return STATUS_ERR_INVALID_ARG;
    7c64:	2017      	movs	r0, #23
	if (length == 0) {
    7c66:	2a00      	cmp	r2, #0
    7c68:	d103      	bne.n	7c72 <usart_read_buffer_wait+0x1a>
			rx_data[rx_pos++] = (received_data >> 8);
		}
	}

	return STATUS_OK;
}
    7c6a:	b004      	add	sp, #16
    7c6c:	bc04      	pop	{r2}
    7c6e:	4692      	mov	sl, r2
    7c70:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (!(module->receiver_enabled)) {
    7c72:	79a3      	ldrb	r3, [r4, #6]
		return STATUS_ERR_DENIED;
    7c74:	3005      	adds	r0, #5
	if (!(module->receiver_enabled)) {
    7c76:	2b00      	cmp	r3, #0
    7c78:	d0f7      	beq.n	7c6a <usart_read_buffer_wait+0x12>
	SercomUsart *const usart_hw = &(module->hw->USART);
    7c7a:	6826      	ldr	r6, [r4, #0]
	while (length--) {
    7c7c:	3a01      	subs	r2, #1
    7c7e:	b293      	uxth	r3, r2
    7c80:	469a      	mov	sl, r3
    7c82:	2500      	movs	r5, #0
			if (usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_RXC) {
    7c84:	2704      	movs	r7, #4
    7c86:	e019      	b.n	7cbc <usart_read_buffer_wait+0x64>
		uint16_t received_data = 0;
    7c88:	2300      	movs	r3, #0
    7c8a:	aa02      	add	r2, sp, #8
    7c8c:	80d3      	strh	r3, [r2, #6]
		retval = usart_read_wait(module, &received_data);
    7c8e:	1d91      	adds	r1, r2, #6
    7c90:	0020      	movs	r0, r4
    7c92:	4b15      	ldr	r3, [pc, #84]	; (7ce8 <usart_read_buffer_wait+0x90>)
    7c94:	4798      	blx	r3
		if (retval != STATUS_OK) {
    7c96:	2800      	cmp	r0, #0
    7c98:	d1e7      	bne.n	7c6a <usart_read_buffer_wait+0x12>
		rx_data[rx_pos++] = received_data;
    7c9a:	1c69      	adds	r1, r5, #1
    7c9c:	b289      	uxth	r1, r1
    7c9e:	ab02      	add	r3, sp, #8
    7ca0:	88db      	ldrh	r3, [r3, #6]
    7ca2:	9a01      	ldr	r2, [sp, #4]
    7ca4:	5553      	strb	r3, [r2, r5]
		if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
    7ca6:	7962      	ldrb	r2, [r4, #5]
    7ca8:	2a01      	cmp	r2, #1
    7caa:	d014      	beq.n	7cd6 <usart_read_buffer_wait+0x7e>
		rx_data[rx_pos++] = received_data;
    7cac:	000d      	movs	r5, r1
	while (length--) {
    7cae:	4653      	mov	r3, sl
    7cb0:	3b01      	subs	r3, #1
    7cb2:	b29b      	uxth	r3, r3
    7cb4:	469a      	mov	sl, r3
    7cb6:	4b0d      	ldr	r3, [pc, #52]	; (7cec <usart_read_buffer_wait+0x94>)
    7cb8:	459a      	cmp	sl, r3
    7cba:	d0d6      	beq.n	7c6a <usart_read_buffer_wait+0x12>
			if (usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_RXC) {
    7cbc:	7e33      	ldrb	r3, [r6, #24]
    7cbe:	423b      	tst	r3, r7
    7cc0:	d1e2      	bne.n	7c88 <usart_read_buffer_wait+0x30>
    7cc2:	4b0a      	ldr	r3, [pc, #40]	; (7cec <usart_read_buffer_wait+0x94>)
    7cc4:	7e32      	ldrb	r2, [r6, #24]
    7cc6:	423a      	tst	r2, r7
    7cc8:	d1de      	bne.n	7c88 <usart_read_buffer_wait+0x30>
			} else if (i == USART_TIMEOUT) {
    7cca:	2b01      	cmp	r3, #1
    7ccc:	d009      	beq.n	7ce2 <usart_read_buffer_wait+0x8a>
    7cce:	3b01      	subs	r3, #1
		for (uint32_t i = 0; i <= USART_TIMEOUT; i++) {
    7cd0:	2b00      	cmp	r3, #0
    7cd2:	d1f7      	bne.n	7cc4 <usart_read_buffer_wait+0x6c>
    7cd4:	e7d8      	b.n	7c88 <usart_read_buffer_wait+0x30>
			rx_data[rx_pos++] = (received_data >> 8);
    7cd6:	3502      	adds	r5, #2
    7cd8:	b2ad      	uxth	r5, r5
    7cda:	0a1b      	lsrs	r3, r3, #8
    7cdc:	9a01      	ldr	r2, [sp, #4]
    7cde:	5453      	strb	r3, [r2, r1]
    7ce0:	e7e5      	b.n	7cae <usart_read_buffer_wait+0x56>
				return STATUS_ERR_TIMEOUT;
    7ce2:	2012      	movs	r0, #18
    7ce4:	e7c1      	b.n	7c6a <usart_read_buffer_wait+0x12>
    7ce6:	46c0      	nop			; (mov r8, r8)
    7ce8:	00007bef 	.word	0x00007bef
    7cec:	0000ffff 	.word	0x0000ffff

00007cf0 <_usart_interrupt_handler>:
 * \param[in]  instance  ID of the SERCOM instance calling the interrupt
 *                       handler.
 */
void _usart_interrupt_handler(
		uint8_t instance)
{
    7cf0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	uint16_t callback_status;
	uint8_t error_code;


	/* Get device instance from the look-up table */
	struct usart_module *module
    7cf2:	0080      	lsls	r0, r0, #2
    7cf4:	4b62      	ldr	r3, [pc, #392]	; (7e80 <_usart_interrupt_handler+0x190>)
    7cf6:	58c5      	ldr	r5, [r0, r3]
		= (struct usart_module *)_sercom_instances[instance];

	/* Pointer to the hardware module instance */
	SercomUsart *const usart_hw
		= &(module->hw->USART);
    7cf8:	682c      	ldr	r4, [r5, #0]
	return (usart_hw->SYNCBUSY.reg);
    7cfa:	69e3      	ldr	r3, [r4, #28]
	while (usart_is_syncing(module)) {
    7cfc:	2b00      	cmp	r3, #0
    7cfe:	d1fc      	bne.n	7cfa <_usart_interrupt_handler+0xa>

	/* Wait for the synchronization to complete */
	_usart_wait_for_sync(module);

	/* Read and mask interrupt flag register */
	interrupt_status = usart_hw->INTFLAG.reg;
    7d00:	7e23      	ldrb	r3, [r4, #24]
	interrupt_status &= usart_hw->INTENSET.reg;
    7d02:	7da6      	ldrb	r6, [r4, #22]
    7d04:	401e      	ands	r6, r3
	callback_status = module->callback_reg_mask &
    7d06:	2330      	movs	r3, #48	; 0x30
    7d08:	5ceb      	ldrb	r3, [r5, r3]
    7d0a:	2231      	movs	r2, #49	; 0x31
    7d0c:	5caf      	ldrb	r7, [r5, r2]
    7d0e:	401f      	ands	r7, r3
			module->callback_enable_mask;

	/* Check if a DATA READY interrupt has occurred,
	 * and if there is more to transfer */
	if (interrupt_status & SERCOM_USART_INTFLAG_DRE) {
    7d10:	07f3      	lsls	r3, r6, #31
    7d12:	d522      	bpl.n	7d5a <_usart_interrupt_handler+0x6a>
		if (module->remaining_tx_buffer_length) {
    7d14:	8deb      	ldrh	r3, [r5, #46]	; 0x2e
    7d16:	b29b      	uxth	r3, r3
    7d18:	2b00      	cmp	r3, #0
    7d1a:	d01c      	beq.n	7d56 <_usart_interrupt_handler+0x66>
			/* Write value will be at least 8-bits long */
			uint16_t data_to_send = *(module->tx_buffer_ptr);
    7d1c:	6aaa      	ldr	r2, [r5, #40]	; 0x28
    7d1e:	7813      	ldrb	r3, [r2, #0]
    7d20:	b2db      	uxtb	r3, r3
			/* Increment 8-bit pointer */
			(module->tx_buffer_ptr)++;
    7d22:	1c51      	adds	r1, r2, #1
    7d24:	62a9      	str	r1, [r5, #40]	; 0x28

			if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
    7d26:	7969      	ldrb	r1, [r5, #5]
    7d28:	2901      	cmp	r1, #1
    7d2a:	d00e      	beq.n	7d4a <_usart_interrupt_handler+0x5a>
			uint16_t data_to_send = *(module->tx_buffer_ptr);
    7d2c:	b29b      	uxth	r3, r3
				data_to_send |= (*(module->tx_buffer_ptr) << 8);
				/* Increment 8-bit pointer */
				(module->tx_buffer_ptr)++;
			}
			/* Write the data to send */
			usart_hw->DATA.reg = (data_to_send & SERCOM_USART_DATA_MASK);
    7d2e:	05db      	lsls	r3, r3, #23
    7d30:	0ddb      	lsrs	r3, r3, #23
    7d32:	8523      	strh	r3, [r4, #40]	; 0x28

			if (--(module->remaining_tx_buffer_length) == 0) {
    7d34:	8deb      	ldrh	r3, [r5, #46]	; 0x2e
    7d36:	3b01      	subs	r3, #1
    7d38:	b29b      	uxth	r3, r3
    7d3a:	85eb      	strh	r3, [r5, #46]	; 0x2e
    7d3c:	2b00      	cmp	r3, #0
    7d3e:	d10c      	bne.n	7d5a <_usart_interrupt_handler+0x6a>
				/* Disable the Data Register Empty Interrupt */
				usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_DRE;
    7d40:	3301      	adds	r3, #1
    7d42:	7523      	strb	r3, [r4, #20]
				/* Enable Transmission Complete interrupt */
				usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_TXC;
    7d44:	3301      	adds	r3, #1
    7d46:	75a3      	strb	r3, [r4, #22]
    7d48:	e007      	b.n	7d5a <_usart_interrupt_handler+0x6a>
				data_to_send |= (*(module->tx_buffer_ptr) << 8);
    7d4a:	7851      	ldrb	r1, [r2, #1]
    7d4c:	0209      	lsls	r1, r1, #8
    7d4e:	430b      	orrs	r3, r1
				(module->tx_buffer_ptr)++;
    7d50:	3202      	adds	r2, #2
    7d52:	62aa      	str	r2, [r5, #40]	; 0x28
    7d54:	e7eb      	b.n	7d2e <_usart_interrupt_handler+0x3e>

			}
		} else {
			usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_DRE;
    7d56:	2301      	movs	r3, #1
    7d58:	7523      	strb	r3, [r4, #20]
		}
	}

	/* Check if the Transmission Complete interrupt has occurred and
	 * that the transmit buffer is empty */
	if (interrupt_status & SERCOM_USART_INTFLAG_TXC) {
    7d5a:	07b3      	lsls	r3, r6, #30
    7d5c:	d506      	bpl.n	7d6c <_usart_interrupt_handler+0x7c>

		/* Disable TX Complete Interrupt, and set STATUS_OK */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_TXC;
    7d5e:	2302      	movs	r3, #2
    7d60:	7523      	strb	r3, [r4, #20]
		module->tx_status = STATUS_OK;
    7d62:	2200      	movs	r2, #0
    7d64:	3331      	adds	r3, #49	; 0x31
    7d66:	54ea      	strb	r2, [r5, r3]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_BUFFER_TRANSMITTED)) {
    7d68:	07fb      	lsls	r3, r7, #31
    7d6a:	d41a      	bmi.n	7da2 <_usart_interrupt_handler+0xb2>
		}
	}

	/* Check if the Receive Complete interrupt has occurred, and that
	 * there's more data to receive */
	if (interrupt_status & SERCOM_USART_INTFLAG_RXC) {
    7d6c:	0773      	lsls	r3, r6, #29
    7d6e:	d565      	bpl.n	7e3c <_usart_interrupt_handler+0x14c>

		if (module->remaining_rx_buffer_length) {
    7d70:	8dab      	ldrh	r3, [r5, #44]	; 0x2c
    7d72:	b29b      	uxth	r3, r3
    7d74:	2b00      	cmp	r3, #0
    7d76:	d05f      	beq.n	7e38 <_usart_interrupt_handler+0x148>
			/* Read out the status code and mask away all but the 4 LSBs*/
			error_code = (uint8_t)(usart_hw->STATUS.reg & SERCOM_USART_STATUS_MASK);
    7d78:	8b63      	ldrh	r3, [r4, #26]
    7d7a:	b2db      	uxtb	r3, r3
#if !SAMD20
			/* CTS status should not be considered as an error */
			if(error_code & SERCOM_USART_STATUS_CTS) {
    7d7c:	071a      	lsls	r2, r3, #28
    7d7e:	d414      	bmi.n	7daa <_usart_interrupt_handler+0xba>
			error_code = (uint8_t)(usart_hw->STATUS.reg & SERCOM_USART_STATUS_MASK);
    7d80:	223f      	movs	r2, #63	; 0x3f
    7d82:	4013      	ands	r3, r2
			if(error_code & SERCOM_USART_STATUS_TXE) {
				error_code &= ~SERCOM_USART_STATUS_TXE;
			}
#endif
			/* Check if an error has occurred during the receiving */
			if (error_code) {
    7d84:	2b00      	cmp	r3, #0
    7d86:	d034      	beq.n	7df2 <_usart_interrupt_handler+0x102>
				/* Check which error occurred */
				if (error_code & SERCOM_USART_STATUS_FERR) {
    7d88:	079a      	lsls	r2, r3, #30
    7d8a:	d511      	bpl.n	7db0 <_usart_interrupt_handler+0xc0>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_BAD_FORMAT;
    7d8c:	221a      	movs	r2, #26
    7d8e:	2332      	movs	r3, #50	; 0x32
    7d90:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_FERR;
    7d92:	3b30      	subs	r3, #48	; 0x30
    7d94:	8363      	strh	r3, [r4, #26]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_COLL;
				}
#endif

				/* Run callback if registered and enabled */
				if (callback_status
    7d96:	077b      	lsls	r3, r7, #29
    7d98:	d550      	bpl.n	7e3c <_usart_interrupt_handler+0x14c>
						& (1 << USART_CALLBACK_ERROR)) {
					(*(module->callback[USART_CALLBACK_ERROR]))(module);
    7d9a:	0028      	movs	r0, r5
    7d9c:	696b      	ldr	r3, [r5, #20]
    7d9e:	4798      	blx	r3
    7da0:	e04c      	b.n	7e3c <_usart_interrupt_handler+0x14c>
			(*(module->callback[USART_CALLBACK_BUFFER_TRANSMITTED]))(module);
    7da2:	0028      	movs	r0, r5
    7da4:	68eb      	ldr	r3, [r5, #12]
    7da6:	4798      	blx	r3
    7da8:	e7e0      	b.n	7d6c <_usart_interrupt_handler+0x7c>
				error_code &= ~SERCOM_USART_STATUS_CTS;
    7daa:	2237      	movs	r2, #55	; 0x37
    7dac:	4013      	ands	r3, r2
    7dae:	e7e9      	b.n	7d84 <_usart_interrupt_handler+0x94>
				} else if (error_code & SERCOM_USART_STATUS_BUFOVF) {
    7db0:	075a      	lsls	r2, r3, #29
    7db2:	d505      	bpl.n	7dc0 <_usart_interrupt_handler+0xd0>
					module->rx_status = STATUS_ERR_OVERFLOW;
    7db4:	221e      	movs	r2, #30
    7db6:	2332      	movs	r3, #50	; 0x32
    7db8:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_BUFOVF;
    7dba:	3b2e      	subs	r3, #46	; 0x2e
    7dbc:	8363      	strh	r3, [r4, #26]
    7dbe:	e7ea      	b.n	7d96 <_usart_interrupt_handler+0xa6>
				} else if (error_code & SERCOM_USART_STATUS_PERR) {
    7dc0:	07da      	lsls	r2, r3, #31
    7dc2:	d505      	bpl.n	7dd0 <_usart_interrupt_handler+0xe0>
					module->rx_status = STATUS_ERR_BAD_DATA;
    7dc4:	2213      	movs	r2, #19
    7dc6:	2332      	movs	r3, #50	; 0x32
    7dc8:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_PERR;
    7dca:	3b31      	subs	r3, #49	; 0x31
    7dcc:	8363      	strh	r3, [r4, #26]
    7dce:	e7e2      	b.n	7d96 <_usart_interrupt_handler+0xa6>
				else if (error_code & SERCOM_USART_STATUS_ISF) {
    7dd0:	06da      	lsls	r2, r3, #27
    7dd2:	d505      	bpl.n	7de0 <_usart_interrupt_handler+0xf0>
					module->rx_status = STATUS_ERR_PROTOCOL;
    7dd4:	2242      	movs	r2, #66	; 0x42
    7dd6:	2332      	movs	r3, #50	; 0x32
    7dd8:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_ISF;
    7dda:	3b22      	subs	r3, #34	; 0x22
    7ddc:	8363      	strh	r3, [r4, #26]
    7dde:	e7da      	b.n	7d96 <_usart_interrupt_handler+0xa6>
				else if (error_code & SERCOM_USART_STATUS_COLL) {
    7de0:	2220      	movs	r2, #32
    7de2:	421a      	tst	r2, r3
    7de4:	d0d7      	beq.n	7d96 <_usart_interrupt_handler+0xa6>
					module->rx_status = STATUS_ERR_PACKET_COLLISION;
    7de6:	3221      	adds	r2, #33	; 0x21
    7de8:	2332      	movs	r3, #50	; 0x32
    7dea:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_COLL;
    7dec:	3b12      	subs	r3, #18
    7dee:	8363      	strh	r3, [r4, #26]
    7df0:	e7d1      	b.n	7d96 <_usart_interrupt_handler+0xa6>

			} else {

				/* Read current packet from DATA register,
				 * increment buffer pointer and decrement buffer length */
				uint16_t received_data = (usart_hw->DATA.reg & SERCOM_USART_DATA_MASK);
    7df2:	8d23      	ldrh	r3, [r4, #40]	; 0x28
    7df4:	05db      	lsls	r3, r3, #23
    7df6:	0ddb      	lsrs	r3, r3, #23

				/* Read value will be at least 8-bits long */
				*(module->rx_buffer_ptr) = received_data;
    7df8:	b2da      	uxtb	r2, r3
    7dfa:	6a69      	ldr	r1, [r5, #36]	; 0x24
    7dfc:	700a      	strb	r2, [r1, #0]
				/* Increment 8-bit pointer */
				module->rx_buffer_ptr += 1;
    7dfe:	6a6a      	ldr	r2, [r5, #36]	; 0x24
    7e00:	1c51      	adds	r1, r2, #1
    7e02:	6269      	str	r1, [r5, #36]	; 0x24

				if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
    7e04:	7969      	ldrb	r1, [r5, #5]
    7e06:	2901      	cmp	r1, #1
    7e08:	d010      	beq.n	7e2c <_usart_interrupt_handler+0x13c>
					/* Increment 8-bit pointer */
					module->rx_buffer_ptr += 1;
				}

				/* Check if the last character have been received */
				if(--(module->remaining_rx_buffer_length) == 0) {
    7e0a:	8dab      	ldrh	r3, [r5, #44]	; 0x2c
    7e0c:	3b01      	subs	r3, #1
    7e0e:	b29b      	uxth	r3, r3
    7e10:	85ab      	strh	r3, [r5, #44]	; 0x2c
    7e12:	2b00      	cmp	r3, #0
    7e14:	d112      	bne.n	7e3c <_usart_interrupt_handler+0x14c>
					/* Disable RX Complete Interrupt,
					 * and set STATUS_OK */
					usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_RXC;
    7e16:	3304      	adds	r3, #4
    7e18:	7523      	strb	r3, [r4, #20]
					module->rx_status = STATUS_OK;
    7e1a:	2200      	movs	r2, #0
    7e1c:	332e      	adds	r3, #46	; 0x2e
    7e1e:	54ea      	strb	r2, [r5, r3]

					/* Run callback if registered and enabled */
					if (callback_status
    7e20:	07bb      	lsls	r3, r7, #30
    7e22:	d50b      	bpl.n	7e3c <_usart_interrupt_handler+0x14c>
							& (1 << USART_CALLBACK_BUFFER_RECEIVED)) {
						(*(module->callback[USART_CALLBACK_BUFFER_RECEIVED]))(module);
    7e24:	0028      	movs	r0, r5
    7e26:	692b      	ldr	r3, [r5, #16]
    7e28:	4798      	blx	r3
    7e2a:	e007      	b.n	7e3c <_usart_interrupt_handler+0x14c>
					*(module->rx_buffer_ptr) = (received_data >> 8);
    7e2c:	0a1b      	lsrs	r3, r3, #8
    7e2e:	7053      	strb	r3, [r2, #1]
					module->rx_buffer_ptr += 1;
    7e30:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    7e32:	3301      	adds	r3, #1
    7e34:	626b      	str	r3, [r5, #36]	; 0x24
    7e36:	e7e8      	b.n	7e0a <_usart_interrupt_handler+0x11a>
					}
				}
			}
		} else {
			/* This should not happen. Disable Receive Complete interrupt. */
			usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_RXC;
    7e38:	2304      	movs	r3, #4
    7e3a:	7523      	strb	r3, [r4, #20]
		}
	}

#ifdef FEATURE_USART_HARDWARE_FLOW_CONTROL
	if (interrupt_status & SERCOM_USART_INTFLAG_CTSIC) {
    7e3c:	06f3      	lsls	r3, r6, #27
    7e3e:	d504      	bpl.n	7e4a <_usart_interrupt_handler+0x15a>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_CTSIC;
    7e40:	2310      	movs	r3, #16
    7e42:	7523      	strb	r3, [r4, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_CTSIC;
    7e44:	7623      	strb	r3, [r4, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_CTS_INPUT_CHANGE)) {
    7e46:	06fb      	lsls	r3, r7, #27
    7e48:	d40e      	bmi.n	7e68 <_usart_interrupt_handler+0x178>
		}
	}
#endif

#ifdef FEATURE_USART_LIN_SLAVE
	if (interrupt_status & SERCOM_USART_INTFLAG_RXBRK) {
    7e4a:	06b3      	lsls	r3, r6, #26
    7e4c:	d504      	bpl.n	7e58 <_usart_interrupt_handler+0x168>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_RXBRK;
    7e4e:	2320      	movs	r3, #32
    7e50:	7523      	strb	r3, [r4, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_RXBRK;
    7e52:	7623      	strb	r3, [r4, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_BREAK_RECEIVED)) {
    7e54:	073b      	lsls	r3, r7, #28
    7e56:	d40b      	bmi.n	7e70 <_usart_interrupt_handler+0x180>
		}
	}
#endif

#ifdef FEATURE_USART_START_FRAME_DECTION
	if (interrupt_status & SERCOM_USART_INTFLAG_RXS) {
    7e58:	0733      	lsls	r3, r6, #28
    7e5a:	d504      	bpl.n	7e66 <_usart_interrupt_handler+0x176>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_RXS;
    7e5c:	2308      	movs	r3, #8
    7e5e:	7523      	strb	r3, [r4, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_RXS;
    7e60:	7623      	strb	r3, [r4, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_START_RECEIVED)) {
    7e62:	06bb      	lsls	r3, r7, #26
    7e64:	d408      	bmi.n	7e78 <_usart_interrupt_handler+0x188>
			(*(module->callback[USART_CALLBACK_START_RECEIVED]))(module);
		}
	}
#endif
}
    7e66:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			(*(module->callback[USART_CALLBACK_CTS_INPUT_CHANGE]))(module);
    7e68:	0028      	movs	r0, r5
    7e6a:	69eb      	ldr	r3, [r5, #28]
    7e6c:	4798      	blx	r3
    7e6e:	e7ec      	b.n	7e4a <_usart_interrupt_handler+0x15a>
			(*(module->callback[USART_CALLBACK_BREAK_RECEIVED]))(module);
    7e70:	0028      	movs	r0, r5
    7e72:	69ab      	ldr	r3, [r5, #24]
    7e74:	4798      	blx	r3
    7e76:	e7ef      	b.n	7e58 <_usart_interrupt_handler+0x168>
			(*(module->callback[USART_CALLBACK_START_RECEIVED]))(module);
    7e78:	6a2b      	ldr	r3, [r5, #32]
    7e7a:	0028      	movs	r0, r5
    7e7c:	4798      	blx	r3
}
    7e7e:	e7f2      	b.n	7e66 <_usart_interrupt_handler+0x176>
    7e80:	20001d80 	.word	0x20001d80

00007e84 <system_clock_source_get_hz>:
 *
 * \returns Frequency of the given clock source, in Hz.
 */
uint32_t system_clock_source_get_hz(
		const enum system_clock_source clock_source)
{
    7e84:	b510      	push	{r4, lr}
	switch (clock_source) {
    7e86:	2808      	cmp	r0, #8
    7e88:	d803      	bhi.n	7e92 <system_clock_source_get_hz+0xe>
    7e8a:	0080      	lsls	r0, r0, #2
    7e8c:	4b1c      	ldr	r3, [pc, #112]	; (7f00 <system_clock_source_get_hz+0x7c>)
    7e8e:	581b      	ldr	r3, [r3, r0]
    7e90:	469f      	mov	pc, r3

		return _system_clock_inst.dpll.frequency;
#endif

	default:
		return 0;
    7e92:	2000      	movs	r0, #0
    7e94:	e032      	b.n	7efc <system_clock_source_get_hz+0x78>
		return _system_clock_inst.xosc.frequency;
    7e96:	4b1b      	ldr	r3, [pc, #108]	; (7f04 <system_clock_source_get_hz+0x80>)
    7e98:	6918      	ldr	r0, [r3, #16]
    7e9a:	e02f      	b.n	7efc <system_clock_source_get_hz+0x78>
		return 8000000UL >> SYSCTRL->OSC8M.bit.PRESC;
    7e9c:	4b1a      	ldr	r3, [pc, #104]	; (7f08 <system_clock_source_get_hz+0x84>)
    7e9e:	6a1b      	ldr	r3, [r3, #32]
    7ea0:	059b      	lsls	r3, r3, #22
    7ea2:	0f9b      	lsrs	r3, r3, #30
    7ea4:	4819      	ldr	r0, [pc, #100]	; (7f0c <system_clock_source_get_hz+0x88>)
    7ea6:	40d8      	lsrs	r0, r3
    7ea8:	e028      	b.n	7efc <system_clock_source_get_hz+0x78>
		return _system_clock_inst.xosc32k.frequency;
    7eaa:	4b16      	ldr	r3, [pc, #88]	; (7f04 <system_clock_source_get_hz+0x80>)
    7eac:	6958      	ldr	r0, [r3, #20]
    7eae:	e025      	b.n	7efc <system_clock_source_get_hz+0x78>
		if (!(_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_ENABLE))
    7eb0:	4b14      	ldr	r3, [pc, #80]	; (7f04 <system_clock_source_get_hz+0x80>)
    7eb2:	681b      	ldr	r3, [r3, #0]
			return 0;
    7eb4:	2000      	movs	r0, #0
		if (!(_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_ENABLE))
    7eb6:	079b      	lsls	r3, r3, #30
    7eb8:	d520      	bpl.n	7efc <system_clock_source_get_hz+0x78>
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
    7eba:	4913      	ldr	r1, [pc, #76]	; (7f08 <system_clock_source_get_hz+0x84>)
    7ebc:	2210      	movs	r2, #16
    7ebe:	68cb      	ldr	r3, [r1, #12]
    7ec0:	421a      	tst	r2, r3
    7ec2:	d0fc      	beq.n	7ebe <system_clock_source_get_hz+0x3a>
		switch(_system_clock_inst.dfll.control &
    7ec4:	4b0f      	ldr	r3, [pc, #60]	; (7f04 <system_clock_source_get_hz+0x80>)
    7ec6:	681a      	ldr	r2, [r3, #0]
    7ec8:	2324      	movs	r3, #36	; 0x24
    7eca:	4013      	ands	r3, r2
    7ecc:	2b04      	cmp	r3, #4
    7ece:	d001      	beq.n	7ed4 <system_clock_source_get_hz+0x50>
			return 48000000UL;
    7ed0:	480f      	ldr	r0, [pc, #60]	; (7f10 <system_clock_source_get_hz+0x8c>)
    7ed2:	e013      	b.n	7efc <system_clock_source_get_hz+0x78>
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
    7ed4:	2000      	movs	r0, #0
    7ed6:	4b0f      	ldr	r3, [pc, #60]	; (7f14 <system_clock_source_get_hz+0x90>)
    7ed8:	4798      	blx	r3
					(_system_clock_inst.dfll.mul & 0xffff);
    7eda:	4b0a      	ldr	r3, [pc, #40]	; (7f04 <system_clock_source_get_hz+0x80>)
    7edc:	689b      	ldr	r3, [r3, #8]
    7ede:	041b      	lsls	r3, r3, #16
    7ee0:	0c1b      	lsrs	r3, r3, #16
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
    7ee2:	4358      	muls	r0, r3
    7ee4:	e00a      	b.n	7efc <system_clock_source_get_hz+0x78>
		if (!(SYSCTRL->DPLLSTATUS.reg & SYSCTRL_DPLLSTATUS_ENABLE)) {
    7ee6:	2350      	movs	r3, #80	; 0x50
    7ee8:	4a07      	ldr	r2, [pc, #28]	; (7f08 <system_clock_source_get_hz+0x84>)
    7eea:	5cd3      	ldrb	r3, [r2, r3]
			return 0;
    7eec:	2000      	movs	r0, #0
		if (!(SYSCTRL->DPLLSTATUS.reg & SYSCTRL_DPLLSTATUS_ENABLE)) {
    7eee:	075b      	lsls	r3, r3, #29
    7ef0:	d504      	bpl.n	7efc <system_clock_source_get_hz+0x78>
		return _system_clock_inst.dpll.frequency;
    7ef2:	4b04      	ldr	r3, [pc, #16]	; (7f04 <system_clock_source_get_hz+0x80>)
    7ef4:	68d8      	ldr	r0, [r3, #12]
    7ef6:	e001      	b.n	7efc <system_clock_source_get_hz+0x78>
		return 32768UL;
    7ef8:	2080      	movs	r0, #128	; 0x80
    7efa:	0200      	lsls	r0, r0, #8
	}
}
    7efc:	bd10      	pop	{r4, pc}
    7efe:	46c0      	nop			; (mov r8, r8)
    7f00:	00015f84 	.word	0x00015f84
    7f04:	20000160 	.word	0x20000160
    7f08:	40000800 	.word	0x40000800
    7f0c:	007a1200 	.word	0x007a1200
    7f10:	02dc6c00 	.word	0x02dc6c00
    7f14:	000085ed 	.word	0x000085ed

00007f18 <system_clock_source_osc8m_set_config>:
 *
 * \param[in] config  OSC8M configuration structure containing the new config
 */
void system_clock_source_osc8m_set_config(
		struct system_clock_source_osc8m_config *const config)
{
    7f18:	b570      	push	{r4, r5, r6, lr}
	SYSCTRL_OSC8M_Type temp = SYSCTRL->OSC8M;
    7f1a:	490c      	ldr	r1, [pc, #48]	; (7f4c <system_clock_source_osc8m_set_config+0x34>)
    7f1c:	6a0b      	ldr	r3, [r1, #32]

	/* Use temporary struct to reduce register access */
	temp.bit.PRESC    = config->prescaler;
    7f1e:	7804      	ldrb	r4, [r0, #0]
	temp.bit.ONDEMAND = config->on_demand;
    7f20:	7885      	ldrb	r5, [r0, #2]
	temp.bit.RUNSTDBY = config->run_in_standby;

	SYSCTRL->OSC8M = temp;
    7f22:	7840      	ldrb	r0, [r0, #1]
    7f24:	2201      	movs	r2, #1
    7f26:	4010      	ands	r0, r2
    7f28:	0180      	lsls	r0, r0, #6
    7f2a:	2640      	movs	r6, #64	; 0x40
    7f2c:	43b3      	bics	r3, r6
    7f2e:	4303      	orrs	r3, r0
    7f30:	402a      	ands	r2, r5
    7f32:	01d2      	lsls	r2, r2, #7
    7f34:	2080      	movs	r0, #128	; 0x80
    7f36:	4383      	bics	r3, r0
    7f38:	4313      	orrs	r3, r2
    7f3a:	2203      	movs	r2, #3
    7f3c:	4022      	ands	r2, r4
    7f3e:	0212      	lsls	r2, r2, #8
    7f40:	4803      	ldr	r0, [pc, #12]	; (7f50 <system_clock_source_osc8m_set_config+0x38>)
    7f42:	4003      	ands	r3, r0
    7f44:	4313      	orrs	r3, r2
    7f46:	620b      	str	r3, [r1, #32]
}
    7f48:	bd70      	pop	{r4, r5, r6, pc}
    7f4a:	46c0      	nop			; (mov r8, r8)
    7f4c:	40000800 	.word	0x40000800
    7f50:	fffffcff 	.word	0xfffffcff

00007f54 <system_clock_source_osc32k_set_config>:
 *
 * \param[in] config  OSC32K configuration structure containing the new config
 */
void system_clock_source_osc32k_set_config(
		struct system_clock_source_osc32k_config *const config)
{
    7f54:	b5f0      	push	{r4, r5, r6, r7, lr}
    7f56:	46ce      	mov	lr, r9
    7f58:	4647      	mov	r7, r8
    7f5a:	b580      	push	{r7, lr}
	SYSCTRL_OSC32K_Type temp = SYSCTRL->OSC32K;
    7f5c:	4b19      	ldr	r3, [pc, #100]	; (7fc4 <system_clock_source_osc32k_set_config+0x70>)
    7f5e:	4699      	mov	r9, r3
    7f60:	699b      	ldr	r3, [r3, #24]

	/* Update settings via a temporary struct to reduce register access */
	temp.bit.EN1K     = config->enable_1khz_output;
    7f62:	7841      	ldrb	r1, [r0, #1]
    7f64:	468c      	mov	ip, r1
	temp.bit.EN32K    = config->enable_32khz_output;
	temp.bit.STARTUP  = config->startup_time;
    7f66:	7805      	ldrb	r5, [r0, #0]
	temp.bit.ONDEMAND = config->on_demand;
    7f68:	7906      	ldrb	r6, [r0, #4]
	temp.bit.RUNSTDBY = config->run_in_standby;
    7f6a:	78c7      	ldrb	r7, [r0, #3]
	temp.bit.WRTLOCK  = config->write_once;
    7f6c:	7944      	ldrb	r4, [r0, #5]

	SYSCTRL->OSC32K  = temp;
    7f6e:	7880      	ldrb	r0, [r0, #2]
    7f70:	2101      	movs	r1, #1
    7f72:	4008      	ands	r0, r1
    7f74:	0080      	lsls	r0, r0, #2
    7f76:	2204      	movs	r2, #4
    7f78:	4393      	bics	r3, r2
    7f7a:	4303      	orrs	r3, r0
    7f7c:	4660      	mov	r0, ip
    7f7e:	4008      	ands	r0, r1
    7f80:	00c0      	lsls	r0, r0, #3
    7f82:	3204      	adds	r2, #4
    7f84:	4393      	bics	r3, r2
    7f86:	4303      	orrs	r3, r0
    7f88:	0038      	movs	r0, r7
    7f8a:	4008      	ands	r0, r1
    7f8c:	0180      	lsls	r0, r0, #6
    7f8e:	2740      	movs	r7, #64	; 0x40
    7f90:	43bb      	bics	r3, r7
    7f92:	4303      	orrs	r3, r0
    7f94:	0030      	movs	r0, r6
    7f96:	4008      	ands	r0, r1
    7f98:	01c0      	lsls	r0, r0, #7
    7f9a:	2680      	movs	r6, #128	; 0x80
    7f9c:	43b3      	bics	r3, r6
    7f9e:	4303      	orrs	r3, r0
    7fa0:	2007      	movs	r0, #7
    7fa2:	4005      	ands	r5, r0
    7fa4:	022d      	lsls	r5, r5, #8
    7fa6:	4808      	ldr	r0, [pc, #32]	; (7fc8 <system_clock_source_osc32k_set_config+0x74>)
    7fa8:	4003      	ands	r3, r0
    7faa:	432b      	orrs	r3, r5
    7fac:	4021      	ands	r1, r4
    7fae:	0309      	lsls	r1, r1, #12
    7fb0:	4806      	ldr	r0, [pc, #24]	; (7fcc <system_clock_source_osc32k_set_config+0x78>)
    7fb2:	4003      	ands	r3, r0
    7fb4:	430b      	orrs	r3, r1
    7fb6:	464a      	mov	r2, r9
    7fb8:	6193      	str	r3, [r2, #24]
}
    7fba:	bc0c      	pop	{r2, r3}
    7fbc:	4690      	mov	r8, r2
    7fbe:	4699      	mov	r9, r3
    7fc0:	bdf0      	pop	{r4, r5, r6, r7, pc}
    7fc2:	46c0      	nop			; (mov r8, r8)
    7fc4:	40000800 	.word	0x40000800
    7fc8:	fffff8ff 	.word	0xfffff8ff
    7fcc:	ffffefff 	.word	0xffffefff

00007fd0 <system_clock_source_xosc32k_set_config>:
 *
 * \param[in] config  XOSC32K configuration structure containing the new config
 */
void system_clock_source_xosc32k_set_config(
		struct system_clock_source_xosc32k_config *const config)
{
    7fd0:	b5f0      	push	{r4, r5, r6, r7, lr}
    7fd2:	46de      	mov	lr, fp
    7fd4:	4657      	mov	r7, sl
    7fd6:	464e      	mov	r6, r9
    7fd8:	4645      	mov	r5, r8
    7fda:	b5e0      	push	{r5, r6, r7, lr}
    7fdc:	0001      	movs	r1, r0
	SYSCTRL_XOSC32K_Type temp = SYSCTRL->XOSC32K;
    7fde:	4b26      	ldr	r3, [pc, #152]	; (8078 <system_clock_source_xosc32k_set_config+0xa8>)
    7fe0:	469b      	mov	fp, r3
    7fe2:	8a9b      	ldrh	r3, [r3, #20]

	temp.bit.STARTUP = config->startup_time;
    7fe4:	7845      	ldrb	r5, [r0, #1]

	if (config->external_clock == SYSTEM_CLOCK_EXTERNAL_CRYSTAL) {
    7fe6:	7800      	ldrb	r0, [r0, #0]
    7fe8:	4242      	negs	r2, r0
    7fea:	4142      	adcs	r2, r0
    7fec:	4691      	mov	r9, r2
		temp.bit.XTALEN = 1;
	} else {
		temp.bit.XTALEN = 0;
	}

	temp.bit.AAMPEN = config->auto_gain_control;
    7fee:	7888      	ldrb	r0, [r1, #2]
	temp.bit.EN1K = config->enable_1khz_output;
    7ff0:	78ca      	ldrb	r2, [r1, #3]
    7ff2:	4694      	mov	ip, r2
	temp.bit.EN32K = config->enable_32khz_output;
    7ff4:	790a      	ldrb	r2, [r1, #4]
    7ff6:	4690      	mov	r8, r2

	temp.bit.ONDEMAND = config->on_demand;
    7ff8:	7b4e      	ldrb	r6, [r1, #13]
	temp.bit.RUNSTDBY = config->run_in_standby;
    7ffa:	7b0f      	ldrb	r7, [r1, #12]
	temp.bit.WRTLOCK  = config->write_once;
    7ffc:	7b8c      	ldrb	r4, [r1, #14]

	/* Cache the new frequency in case the user needs to check the current
	 * operating frequency later */
	_system_clock_inst.xosc32k.frequency = config->frequency;
    7ffe:	688a      	ldr	r2, [r1, #8]
    8000:	491e      	ldr	r1, [pc, #120]	; (807c <system_clock_source_xosc32k_set_config+0xac>)
    8002:	614a      	str	r2, [r1, #20]

	SYSCTRL->XOSC32K = temp;
    8004:	2101      	movs	r1, #1
    8006:	464a      	mov	r2, r9
    8008:	0092      	lsls	r2, r2, #2
    800a:	4691      	mov	r9, r2
    800c:	2204      	movs	r2, #4
    800e:	4393      	bics	r3, r2
    8010:	464a      	mov	r2, r9
    8012:	4313      	orrs	r3, r2
    8014:	4642      	mov	r2, r8
    8016:	400a      	ands	r2, r1
    8018:	00d2      	lsls	r2, r2, #3
    801a:	4690      	mov	r8, r2
    801c:	2208      	movs	r2, #8
    801e:	4393      	bics	r3, r2
    8020:	4642      	mov	r2, r8
    8022:	4313      	orrs	r3, r2
    8024:	4662      	mov	r2, ip
    8026:	400a      	ands	r2, r1
    8028:	0112      	lsls	r2, r2, #4
    802a:	4694      	mov	ip, r2
    802c:	2210      	movs	r2, #16
    802e:	4393      	bics	r3, r2
    8030:	4662      	mov	r2, ip
    8032:	4313      	orrs	r3, r2
    8034:	4008      	ands	r0, r1
    8036:	0140      	lsls	r0, r0, #5
    8038:	2220      	movs	r2, #32
    803a:	4393      	bics	r3, r2
    803c:	4303      	orrs	r3, r0
    803e:	400f      	ands	r7, r1
    8040:	01bf      	lsls	r7, r7, #6
    8042:	2040      	movs	r0, #64	; 0x40
    8044:	4383      	bics	r3, r0
    8046:	433b      	orrs	r3, r7
    8048:	400e      	ands	r6, r1
    804a:	01f6      	lsls	r6, r6, #7
    804c:	3040      	adds	r0, #64	; 0x40
    804e:	4383      	bics	r3, r0
    8050:	4333      	orrs	r3, r6
    8052:	3879      	subs	r0, #121	; 0x79
    8054:	4005      	ands	r5, r0
    8056:	022d      	lsls	r5, r5, #8
    8058:	4809      	ldr	r0, [pc, #36]	; (8080 <system_clock_source_xosc32k_set_config+0xb0>)
    805a:	4003      	ands	r3, r0
    805c:	432b      	orrs	r3, r5
    805e:	4021      	ands	r1, r4
    8060:	0309      	lsls	r1, r1, #12
    8062:	4808      	ldr	r0, [pc, #32]	; (8084 <system_clock_source_xosc32k_set_config+0xb4>)
    8064:	4003      	ands	r3, r0
    8066:	430b      	orrs	r3, r1
    8068:	465a      	mov	r2, fp
    806a:	8293      	strh	r3, [r2, #20]
}
    806c:	bc3c      	pop	{r2, r3, r4, r5}
    806e:	4690      	mov	r8, r2
    8070:	4699      	mov	r9, r3
    8072:	46a2      	mov	sl, r4
    8074:	46ab      	mov	fp, r5
    8076:	bdf0      	pop	{r4, r5, r6, r7, pc}
    8078:	40000800 	.word	0x40000800
    807c:	20000160 	.word	0x20000160
    8080:	fffff8ff 	.word	0xfffff8ff
    8084:	ffffefff 	.word	0xffffefff

00008088 <system_clock_source_dfll_set_config>:
 *
 * \param[in] config  DFLL configuration structure containing the new config
 */
void system_clock_source_dfll_set_config(
		struct system_clock_source_dfll_config *const config)
{
    8088:	b510      	push	{r4, lr}
	_system_clock_inst.dfll.val =
			SYSCTRL_DFLLVAL_COARSE(config->coarse_value) |
    808a:	7a03      	ldrb	r3, [r0, #8]
    808c:	069b      	lsls	r3, r3, #26
    808e:	0c1b      	lsrs	r3, r3, #16
			SYSCTRL_DFLLVAL_FINE(config->fine_value);
    8090:	8942      	ldrh	r2, [r0, #10]
    8092:	0592      	lsls	r2, r2, #22
    8094:	0d92      	lsrs	r2, r2, #22
			SYSCTRL_DFLLVAL_COARSE(config->coarse_value) |
    8096:	4313      	orrs	r3, r2
	_system_clock_inst.dfll.val =
    8098:	4918      	ldr	r1, [pc, #96]	; (80fc <system_clock_source_dfll_set_config+0x74>)
    809a:	604b      	str	r3, [r1, #4]

	_system_clock_inst.dfll.control =
			(uint32_t)config->wakeup_lock     |
    809c:	7983      	ldrb	r3, [r0, #6]
    809e:	79c2      	ldrb	r2, [r0, #7]
    80a0:	4313      	orrs	r3, r2
			(uint32_t)config->stable_tracking |
			(uint32_t)config->quick_lock      |
    80a2:	8842      	ldrh	r2, [r0, #2]
    80a4:	8884      	ldrh	r4, [r0, #4]
    80a6:	4322      	orrs	r2, r4
    80a8:	4313      	orrs	r3, r2
			(uint32_t)config->chill_cycle     |
			((uint32_t)config->on_demand << SYSCTRL_DFLLCTRL_ONDEMAND_Pos);
    80aa:	7842      	ldrb	r2, [r0, #1]
    80ac:	01d2      	lsls	r2, r2, #7
			(uint32_t)config->chill_cycle     |
    80ae:	4313      	orrs	r3, r2
	_system_clock_inst.dfll.control =
    80b0:	600b      	str	r3, [r1, #0]

	if (config->loop_mode == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {
    80b2:	7803      	ldrb	r3, [r0, #0]
    80b4:	2b04      	cmp	r3, #4
    80b6:	d011      	beq.n	80dc <system_clock_source_dfll_set_config+0x54>
				SYSCTRL_DFLLMUL_MUL(config->multiply_factor);

		/* Enable the closed loop mode */
		_system_clock_inst.dfll.control |= config->loop_mode;
	}
	if (config->loop_mode == SYSTEM_CLOCK_DFLL_LOOP_MODE_USB_RECOVERY) {
    80b8:	2b20      	cmp	r3, #32
    80ba:	d10e      	bne.n	80da <system_clock_source_dfll_set_config+0x52>

		_system_clock_inst.dfll.mul =
				SYSCTRL_DFLLMUL_CSTEP(config->coarse_max_step) |
    80bc:	7b03      	ldrb	r3, [r0, #12]
    80be:	069b      	lsls	r3, r3, #26
				SYSCTRL_DFLLMUL_FSTEP(config->fine_max_step)   |
				SYSCTRL_DFLLMUL_MUL(config->multiply_factor);
    80c0:	8a02      	ldrh	r2, [r0, #16]
				SYSCTRL_DFLLMUL_FSTEP(config->fine_max_step)   |
    80c2:	4313      	orrs	r3, r2
    80c4:	89c2      	ldrh	r2, [r0, #14]
    80c6:	0412      	lsls	r2, r2, #16
    80c8:	490d      	ldr	r1, [pc, #52]	; (8100 <system_clock_source_dfll_set_config+0x78>)
    80ca:	400a      	ands	r2, r1
    80cc:	4313      	orrs	r3, r2
		_system_clock_inst.dfll.mul =
    80ce:	4a0b      	ldr	r2, [pc, #44]	; (80fc <system_clock_source_dfll_set_config+0x74>)
    80d0:	6093      	str	r3, [r2, #8]

		/* Enable the USB recovery mode */
		_system_clock_inst.dfll.control |= config->loop_mode |
    80d2:	6811      	ldr	r1, [r2, #0]
    80d4:	4b0b      	ldr	r3, [pc, #44]	; (8104 <system_clock_source_dfll_set_config+0x7c>)
    80d6:	430b      	orrs	r3, r1
    80d8:	6013      	str	r3, [r2, #0]
				SYSCTRL_DFLLCTRL_MODE | SYSCTRL_DFLLCTRL_BPLCKC;
	}
}
    80da:	bd10      	pop	{r4, pc}
				SYSCTRL_DFLLMUL_CSTEP(config->coarse_max_step) |
    80dc:	7b03      	ldrb	r3, [r0, #12]
    80de:	069b      	lsls	r3, r3, #26
				SYSCTRL_DFLLMUL_MUL(config->multiply_factor);
    80e0:	8a02      	ldrh	r2, [r0, #16]
				SYSCTRL_DFLLMUL_FSTEP(config->fine_max_step)   |
    80e2:	4313      	orrs	r3, r2
    80e4:	89c2      	ldrh	r2, [r0, #14]
    80e6:	0412      	lsls	r2, r2, #16
    80e8:	4905      	ldr	r1, [pc, #20]	; (8100 <system_clock_source_dfll_set_config+0x78>)
    80ea:	400a      	ands	r2, r1
    80ec:	4313      	orrs	r3, r2
		_system_clock_inst.dfll.mul =
    80ee:	4a03      	ldr	r2, [pc, #12]	; (80fc <system_clock_source_dfll_set_config+0x74>)
    80f0:	6093      	str	r3, [r2, #8]
		_system_clock_inst.dfll.control |= config->loop_mode;
    80f2:	6813      	ldr	r3, [r2, #0]
    80f4:	2104      	movs	r1, #4
    80f6:	430b      	orrs	r3, r1
    80f8:	6013      	str	r3, [r2, #0]
    80fa:	e7ee      	b.n	80da <system_clock_source_dfll_set_config+0x52>
    80fc:	20000160 	.word	0x20000160
    8100:	03ff0000 	.word	0x03ff0000
    8104:	00000424 	.word	0x00000424

00008108 <system_clock_source_enable>:
 *                                 device
 */
enum status_code system_clock_source_enable(
		const enum system_clock_source clock_source)
{
	switch (clock_source) {
    8108:	2808      	cmp	r0, #8
    810a:	d803      	bhi.n	8114 <system_clock_source_enable+0xc>
    810c:	0080      	lsls	r0, r0, #2
    810e:	4b25      	ldr	r3, [pc, #148]	; (81a4 <system_clock_source_enable+0x9c>)
    8110:	581b      	ldr	r3, [r3, r0]
    8112:	469f      	mov	pc, r3
		/* Always enabled */
		return STATUS_OK;

	default:
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
    8114:	2017      	movs	r0, #23
    8116:	e044      	b.n	81a2 <system_clock_source_enable+0x9a>
		SYSCTRL->OSC8M.reg |= SYSCTRL_OSC8M_ENABLE;
    8118:	4a23      	ldr	r2, [pc, #140]	; (81a8 <system_clock_source_enable+0xa0>)
    811a:	6a13      	ldr	r3, [r2, #32]
    811c:	2102      	movs	r1, #2
    811e:	430b      	orrs	r3, r1
    8120:	6213      	str	r3, [r2, #32]
		return STATUS_OK;
    8122:	2000      	movs	r0, #0
    8124:	e03d      	b.n	81a2 <system_clock_source_enable+0x9a>
		SYSCTRL->OSC32K.reg |= SYSCTRL_OSC32K_ENABLE;
    8126:	4a20      	ldr	r2, [pc, #128]	; (81a8 <system_clock_source_enable+0xa0>)
    8128:	6993      	ldr	r3, [r2, #24]
    812a:	2102      	movs	r1, #2
    812c:	430b      	orrs	r3, r1
    812e:	6193      	str	r3, [r2, #24]
	}

	return STATUS_OK;
    8130:	2000      	movs	r0, #0
		break;
    8132:	e036      	b.n	81a2 <system_clock_source_enable+0x9a>
		SYSCTRL->XOSC.reg |= SYSCTRL_XOSC_ENABLE;
    8134:	4a1c      	ldr	r2, [pc, #112]	; (81a8 <system_clock_source_enable+0xa0>)
    8136:	8a13      	ldrh	r3, [r2, #16]
    8138:	2102      	movs	r1, #2
    813a:	430b      	orrs	r3, r1
    813c:	8213      	strh	r3, [r2, #16]
	return STATUS_OK;
    813e:	2000      	movs	r0, #0
		break;
    8140:	e02f      	b.n	81a2 <system_clock_source_enable+0x9a>
		SYSCTRL->XOSC32K.reg |= SYSCTRL_XOSC32K_ENABLE;
    8142:	4a19      	ldr	r2, [pc, #100]	; (81a8 <system_clock_source_enable+0xa0>)
    8144:	8a93      	ldrh	r3, [r2, #20]
    8146:	2102      	movs	r1, #2
    8148:	430b      	orrs	r3, r1
    814a:	8293      	strh	r3, [r2, #20]
	return STATUS_OK;
    814c:	2000      	movs	r0, #0
		break;
    814e:	e028      	b.n	81a2 <system_clock_source_enable+0x9a>
		_system_clock_inst.dfll.control |= SYSCTRL_DFLLCTRL_ENABLE;
    8150:	4916      	ldr	r1, [pc, #88]	; (81ac <system_clock_source_enable+0xa4>)
    8152:	680b      	ldr	r3, [r1, #0]
    8154:	2202      	movs	r2, #2
    8156:	4313      	orrs	r3, r2
    8158:	600b      	str	r3, [r1, #0]
	SYSCTRL->DFLLCTRL.reg = SYSCTRL_DFLLCTRL_ENABLE;
    815a:	4b13      	ldr	r3, [pc, #76]	; (81a8 <system_clock_source_enable+0xa0>)
    815c:	849a      	strh	r2, [r3, #36]	; 0x24
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
    815e:	0019      	movs	r1, r3
    8160:	320e      	adds	r2, #14
    8162:	68cb      	ldr	r3, [r1, #12]
    8164:	421a      	tst	r2, r3
    8166:	d0fc      	beq.n	8162 <system_clock_source_enable+0x5a>
	SYSCTRL->DFLLMUL.reg = _system_clock_inst.dfll.mul;
    8168:	4a10      	ldr	r2, [pc, #64]	; (81ac <system_clock_source_enable+0xa4>)
    816a:	6891      	ldr	r1, [r2, #8]
    816c:	4b0e      	ldr	r3, [pc, #56]	; (81a8 <system_clock_source_enable+0xa0>)
    816e:	62d9      	str	r1, [r3, #44]	; 0x2c
	SYSCTRL->DFLLVAL.reg = _system_clock_inst.dfll.val;
    8170:	6852      	ldr	r2, [r2, #4]
    8172:	629a      	str	r2, [r3, #40]	; 0x28
	SYSCTRL->DFLLCTRL.reg = 0;
    8174:	2200      	movs	r2, #0
    8176:	849a      	strh	r2, [r3, #36]	; 0x24
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
    8178:	0019      	movs	r1, r3
    817a:	3210      	adds	r2, #16
    817c:	68cb      	ldr	r3, [r1, #12]
    817e:	421a      	tst	r2, r3
    8180:	d0fc      	beq.n	817c <system_clock_source_enable+0x74>
	SYSCTRL->DFLLCTRL.reg = _system_clock_inst.dfll.control;
    8182:	4b0a      	ldr	r3, [pc, #40]	; (81ac <system_clock_source_enable+0xa4>)
    8184:	681b      	ldr	r3, [r3, #0]
    8186:	b29b      	uxth	r3, r3
    8188:	4a07      	ldr	r2, [pc, #28]	; (81a8 <system_clock_source_enable+0xa0>)
    818a:	8493      	strh	r3, [r2, #36]	; 0x24
	return STATUS_OK;
    818c:	2000      	movs	r0, #0
    818e:	e008      	b.n	81a2 <system_clock_source_enable+0x9a>
		SYSCTRL->DPLLCTRLA.reg |= SYSCTRL_DPLLCTRLA_ENABLE;
    8190:	4905      	ldr	r1, [pc, #20]	; (81a8 <system_clock_source_enable+0xa0>)
    8192:	2244      	movs	r2, #68	; 0x44
    8194:	5c8b      	ldrb	r3, [r1, r2]
    8196:	2002      	movs	r0, #2
    8198:	4303      	orrs	r3, r0
    819a:	548b      	strb	r3, [r1, r2]
	return STATUS_OK;
    819c:	2000      	movs	r0, #0
		break;
    819e:	e000      	b.n	81a2 <system_clock_source_enable+0x9a>
		return STATUS_OK;
    81a0:	2000      	movs	r0, #0
}
    81a2:	4770      	bx	lr
    81a4:	00015fa8 	.word	0x00015fa8
    81a8:	40000800 	.word	0x40000800
    81ac:	20000160 	.word	0x20000160

000081b0 <system_clock_init>:
 * \note OSC8M is always enabled and if user selects other clocks for GCLK generators,
 * the OSC8M default enable can be disabled after system_clock_init. Make sure the
 * clock switch successfully before disabling OSC8M.
 */
void system_clock_init(void)
{
    81b0:	b5f0      	push	{r4, r5, r6, r7, lr}
    81b2:	46de      	mov	lr, fp
    81b4:	4657      	mov	r7, sl
    81b6:	464e      	mov	r6, r9
    81b8:	4645      	mov	r5, r8
    81ba:	b5e0      	push	{r5, r6, r7, lr}
    81bc:	b091      	sub	sp, #68	; 0x44
	/* Various bits in the INTFLAG register can be set to one at startup.
	   This will ensure that these bits are cleared */
	SYSCTRL->INTFLAG.reg = SYSCTRL_INTFLAG_BOD33RDY | SYSCTRL_INTFLAG_BOD33DET |
    81be:	22c2      	movs	r2, #194	; 0xc2
    81c0:	00d2      	lsls	r2, r2, #3
    81c2:	4b65      	ldr	r3, [pc, #404]	; (8358 <system_clock_init+0x1a8>)
    81c4:	609a      	str	r2, [r3, #8]
static inline void system_flash_set_waitstates(uint8_t wait_states)
{
	Assert(NVMCTRL_CTRLB_RWS((uint32_t)wait_states) ==
			((uint32_t)wait_states << NVMCTRL_CTRLB_RWS_Pos));

	NVMCTRL->CTRLB.bit.RWS = wait_states;
    81c6:	4a65      	ldr	r2, [pc, #404]	; (835c <system_clock_init+0x1ac>)
    81c8:	6853      	ldr	r3, [r2, #4]
    81ca:	211e      	movs	r1, #30
    81cc:	438b      	bics	r3, r1
    81ce:	391a      	subs	r1, #26
    81d0:	430b      	orrs	r3, r1
    81d2:	6053      	str	r3, [r2, #4]
	gclk_conf.source_generator = GCLK_GENERATOR_3;
    81d4:	2203      	movs	r2, #3
    81d6:	ab01      	add	r3, sp, #4
    81d8:	701a      	strb	r2, [r3, #0]
	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
    81da:	2400      	movs	r4, #0
		system_gclk_chan_set_config(gclk_id, &gclk_conf);
    81dc:	4d60      	ldr	r5, [pc, #384]	; (8360 <system_clock_init+0x1b0>)
    81de:	b2e0      	uxtb	r0, r4
    81e0:	a901      	add	r1, sp, #4
    81e2:	47a8      	blx	r5
	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
    81e4:	3401      	adds	r4, #1
    81e6:	2c25      	cmp	r4, #37	; 0x25
    81e8:	d1f9      	bne.n	81de <system_clock_init+0x2e>
	config->external_clock      = SYSTEM_CLOCK_EXTERNAL_CRYSTAL;
    81ea:	a80c      	add	r0, sp, #48	; 0x30
    81ec:	2300      	movs	r3, #0
    81ee:	7003      	strb	r3, [r0, #0]
	config->frequency           = 32768UL;
    81f0:	2280      	movs	r2, #128	; 0x80
    81f2:	0212      	lsls	r2, r2, #8
    81f4:	6082      	str	r2, [r0, #8]
	config->enable_1khz_output  = false;
    81f6:	70c3      	strb	r3, [r0, #3]
	config->enable_32khz_output = true;
    81f8:	2201      	movs	r2, #1
    81fa:	7102      	strb	r2, [r0, #4]
	config->run_in_standby      = false;
    81fc:	7303      	strb	r3, [r0, #12]
	config->write_once          = false;
    81fe:	7383      	strb	r3, [r0, #14]
	struct system_clock_source_xosc32k_config xosc32k_conf;
	system_clock_source_xosc32k_get_config_defaults(&xosc32k_conf);

	xosc32k_conf.frequency           = 32768UL;
	xosc32k_conf.external_clock      = CONF_CLOCK_XOSC32K_EXTERNAL_CRYSTAL;
	xosc32k_conf.startup_time        = CONF_CLOCK_XOSC32K_STARTUP_TIME;
    8200:	2106      	movs	r1, #6
    8202:	7041      	strb	r1, [r0, #1]
	xosc32k_conf.auto_gain_control   = CONF_CLOCK_XOSC32K_AUTO_AMPLITUDE_CONTROL;
    8204:	7082      	strb	r2, [r0, #2]
	xosc32k_conf.enable_1khz_output  = CONF_CLOCK_XOSC32K_ENABLE_1KHZ_OUPUT;
	xosc32k_conf.enable_32khz_output = CONF_CLOCK_XOSC32K_ENABLE_32KHZ_OUTPUT;
	xosc32k_conf.on_demand           = false;
    8206:	7343      	strb	r3, [r0, #13]
	xosc32k_conf.run_in_standby      = CONF_CLOCK_XOSC32K_RUN_IN_STANDBY;

	system_clock_source_xosc32k_set_config(&xosc32k_conf);
    8208:	4b56      	ldr	r3, [pc, #344]	; (8364 <system_clock_init+0x1b4>)
    820a:	4798      	blx	r3
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_XOSC32K);
    820c:	2005      	movs	r0, #5
    820e:	4b56      	ldr	r3, [pc, #344]	; (8368 <system_clock_init+0x1b8>)
    8210:	4798      	blx	r3
	return ((SYSCTRL->PCLKSR.reg & mask) == mask);
    8212:	4951      	ldr	r1, [pc, #324]	; (8358 <system_clock_init+0x1a8>)
    8214:	2202      	movs	r2, #2
    8216:	68cb      	ldr	r3, [r1, #12]
	while(!system_clock_source_is_ready(SYSTEM_CLOCK_SOURCE_XOSC32K));
    8218:	421a      	tst	r2, r3
    821a:	d0fc      	beq.n	8216 <system_clock_init+0x66>
	if (CONF_CLOCK_XOSC32K_ON_DEMAND) {
		SYSCTRL->XOSC32K.bit.ONDEMAND = 1;
    821c:	494e      	ldr	r1, [pc, #312]	; (8358 <system_clock_init+0x1a8>)
    821e:	8a8b      	ldrh	r3, [r1, #20]
    8220:	2280      	movs	r2, #128	; 0x80
    8222:	4313      	orrs	r3, r2
    8224:	828b      	strh	r3, [r1, #20]


	/* OSCK32K */
#if CONF_CLOCK_OSC32K_ENABLE == true
	SYSCTRL->OSC32K.bit.CALIB =
			((*(uint32_t *)SYSCTRL_FUSES_OSC32K_ADDR >>
    8226:	4c51      	ldr	r4, [pc, #324]	; (836c <system_clock_init+0x1bc>)
			SYSCTRL_FUSES_OSC32K_Pos) & 0x7Ful);
    8228:	6823      	ldr	r3, [r4, #0]
    822a:	04db      	lsls	r3, r3, #19
	SYSCTRL->OSC32K.bit.CALIB =
    822c:	698a      	ldr	r2, [r1, #24]
    822e:	0e5b      	lsrs	r3, r3, #25
    8230:	041b      	lsls	r3, r3, #16
    8232:	484f      	ldr	r0, [pc, #316]	; (8370 <system_clock_init+0x1c0>)
    8234:	4002      	ands	r2, r0
    8236:	4313      	orrs	r3, r2
    8238:	618b      	str	r3, [r1, #24]
	config->enable_1khz_output  = true;
    823a:	a80a      	add	r0, sp, #40	; 0x28
    823c:	2301      	movs	r3, #1
    823e:	7043      	strb	r3, [r0, #1]
	config->enable_32khz_output = true;
    8240:	7083      	strb	r3, [r0, #2]
	config->on_demand           = true;
    8242:	7103      	strb	r3, [r0, #4]
	config->startup_time        = SYSTEM_OSC32K_STARTUP_130;
    8244:	2207      	movs	r2, #7
    8246:	7002      	strb	r2, [r0, #0]
	config->write_once          = false;
    8248:	2500      	movs	r5, #0
    824a:	7145      	strb	r5, [r0, #5]

	osc32k_conf.startup_time        = CONF_CLOCK_OSC32K_STARTUP_TIME;
	osc32k_conf.enable_1khz_output  = CONF_CLOCK_OSC32K_ENABLE_1KHZ_OUTPUT;
	osc32k_conf.enable_32khz_output = CONF_CLOCK_OSC32K_ENABLE_32KHZ_OUTPUT;
	osc32k_conf.on_demand           = CONF_CLOCK_OSC32K_ON_DEMAND;
	osc32k_conf.run_in_standby      = CONF_CLOCK_OSC32K_RUN_IN_STANDBY;
    824c:	70c3      	strb	r3, [r0, #3]

	system_clock_source_osc32k_set_config(&osc32k_conf);
    824e:	4b49      	ldr	r3, [pc, #292]	; (8374 <system_clock_init+0x1c4>)
    8250:	4798      	blx	r3
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_OSC32K);
    8252:	2004      	movs	r0, #4
    8254:	4b44      	ldr	r3, [pc, #272]	; (8368 <system_clock_init+0x1b8>)
    8256:	4798      	blx	r3
	config->quick_lock      = SYSTEM_CLOCK_DFLL_QUICK_LOCK_ENABLE;
    8258:	ab05      	add	r3, sp, #20
    825a:	2200      	movs	r2, #0
    825c:	805d      	strh	r5, [r3, #2]
	config->chill_cycle     = SYSTEM_CLOCK_DFLL_CHILL_CYCLE_ENABLE;
    825e:	809d      	strh	r5, [r3, #4]
	config->wakeup_lock     = SYSTEM_CLOCK_DFLL_WAKEUP_LOCK_KEEP;
    8260:	719a      	strb	r2, [r3, #6]
	config->stable_tracking = SYSTEM_CLOCK_DFLL_STABLE_TRACKING_TRACK_AFTER_LOCK;
    8262:	71da      	strb	r2, [r3, #7]
	config->fine_value      = 0xff / 4; /* Midpoint */
    8264:	213f      	movs	r1, #63	; 0x3f
    8266:	8159      	strh	r1, [r3, #10]
	/* DFLL Config (Open and Closed Loop) */
#if CONF_CLOCK_DFLL_ENABLE == true
	struct system_clock_source_dfll_config dfll_conf;
	system_clock_source_dfll_get_config_defaults(&dfll_conf);

	dfll_conf.loop_mode      = CONF_CLOCK_DFLL_LOOP_MODE;
    8268:	393b      	subs	r1, #59	; 0x3b
    826a:	7019      	strb	r1, [r3, #0]
	dfll_conf.on_demand      = false;
    826c:	705a      	strb	r2, [r3, #1]
	/* Using DFLL48M COARSE CAL value from NVM Software Calibration Area Mapping
	   in DFLL.COARSE helps to output a frequency close to 48 MHz.*/
#define NVM_DFLL_COARSE_POS    58 /* DFLL48M Coarse calibration value bit position.*/
#define NVM_DFLL_COARSE_SIZE   6  /* DFLL48M Coarse calibration value bit size.*/

	uint32_t coarse =( *((uint32_t *)(NVMCTRL_OTP4)
    826e:	6823      	ldr	r3, [r4, #0]
    8270:	0e9b      	lsrs	r3, r3, #26
			+ (NVM_DFLL_COARSE_POS / 32))
		>> (NVM_DFLL_COARSE_POS % 32))
		& ((1 << NVM_DFLL_COARSE_SIZE) - 1);
	/* In some revision chip, the coarse calibration value is not correct. */
	if (coarse == 0x3f) {
    8272:	2b3f      	cmp	r3, #63	; 0x3f
    8274:	d06d      	beq.n	8352 <system_clock_init+0x1a2>
		coarse = 0x1f;
	}
	dfll_conf.coarse_value = coarse;
    8276:	a805      	add	r0, sp, #20
    8278:	7203      	strb	r3, [r0, #8]
#  else
	dfll_conf.chill_cycle = SYSTEM_CLOCK_DFLL_CHILL_CYCLE_DISABLE;
#  endif

	if (CONF_CLOCK_DFLL_LOOP_MODE == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {
		dfll_conf.multiply_factor = CONF_CLOCK_DFLL_MULTIPLY_FACTOR;
    827a:	4b3f      	ldr	r3, [pc, #252]	; (8378 <system_clock_init+0x1c8>)
    827c:	8203      	strh	r3, [r0, #16]
	}

	dfll_conf.coarse_max_step = CONF_CLOCK_DFLL_MAX_COARSE_STEP_SIZE;
    827e:	2303      	movs	r3, #3
    8280:	4699      	mov	r9, r3
    8282:	7303      	strb	r3, [r0, #12]
	dfll_conf.fine_max_step   = CONF_CLOCK_DFLL_MAX_FINE_STEP_SIZE;
    8284:	231f      	movs	r3, #31
    8286:	81c3      	strh	r3, [r0, #14]
		dfll_conf.chill_cycle = SYSTEM_CLOCK_DFLL_CHILL_CYCLE_DISABLE;

		dfll_conf.multiply_factor = 48000;
	}

	system_clock_source_dfll_set_config(&dfll_conf);
    8288:	4b3c      	ldr	r3, [pc, #240]	; (837c <system_clock_init+0x1cc>)
    828a:	4798      	blx	r3
	config->run_in_standby  = false;
    828c:	a804      	add	r0, sp, #16
    828e:	2500      	movs	r5, #0
    8290:	7045      	strb	r5, [r0, #1]

	/* OSC8M */
	struct system_clock_source_osc8m_config osc8m_conf;
	system_clock_source_osc8m_get_config_defaults(&osc8m_conf);

	osc8m_conf.prescaler       = CONF_CLOCK_OSC8M_PRESCALER;
    8292:	7005      	strb	r5, [r0, #0]
	osc8m_conf.on_demand       = CONF_CLOCK_OSC8M_ON_DEMAND;
    8294:	7085      	strb	r5, [r0, #2]
	osc8m_conf.run_in_standby  = CONF_CLOCK_OSC8M_RUN_IN_STANDBY;

	system_clock_source_osc8m_set_config(&osc8m_conf);
    8296:	4b3a      	ldr	r3, [pc, #232]	; (8380 <system_clock_init+0x1d0>)
    8298:	4798      	blx	r3
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_OSC8M);
    829a:	2006      	movs	r0, #6
    829c:	4b32      	ldr	r3, [pc, #200]	; (8368 <system_clock_init+0x1b8>)
    829e:	469a      	mov	sl, r3
    82a0:	4798      	blx	r3


	/* GCLK */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	system_gclk_init();
    82a2:	4b38      	ldr	r3, [pc, #224]	; (8384 <system_clock_init+0x1d4>)
    82a4:	4798      	blx	r3
	config->high_when_disabled = false;
    82a6:	ac01      	add	r4, sp, #4
    82a8:	7065      	strb	r5, [r4, #1]
	config->run_in_standby     = false;
    82aa:	7225      	strb	r5, [r4, #8]
	config->output_enable      = false;
    82ac:	7265      	strb	r5, [r4, #9]

	/* Configure all GCLK generators except for the main generator, which
	 * is configured later after all other clock systems are set up */
	MREPEAT(GCLK_GEN_NUM, _CONF_CLOCK_GCLK_CONFIG_NONMAIN, ~);
    82ae:	2305      	movs	r3, #5
    82b0:	7023      	strb	r3, [r4, #0]
    82b2:	331b      	adds	r3, #27
    82b4:	4698      	mov	r8, r3
    82b6:	6063      	str	r3, [r4, #4]
    82b8:	0021      	movs	r1, r4
    82ba:	2001      	movs	r0, #1
    82bc:	4f32      	ldr	r7, [pc, #200]	; (8388 <system_clock_init+0x1d8>)
    82be:	47b8      	blx	r7
    82c0:	2001      	movs	r0, #1
    82c2:	4e32      	ldr	r6, [pc, #200]	; (838c <system_clock_init+0x1dc>)
    82c4:	47b0      	blx	r6
	config->high_when_disabled = false;
    82c6:	7065      	strb	r5, [r4, #1]
	config->output_enable      = false;
    82c8:	7265      	strb	r5, [r4, #9]
    82ca:	2304      	movs	r3, #4
    82cc:	7023      	strb	r3, [r4, #0]
    82ce:	4643      	mov	r3, r8
    82d0:	6063      	str	r3, [r4, #4]
    82d2:	3b1f      	subs	r3, #31
    82d4:	469b      	mov	fp, r3
    82d6:	7223      	strb	r3, [r4, #8]
    82d8:	0021      	movs	r1, r4
    82da:	2002      	movs	r0, #2
    82dc:	47b8      	blx	r7
    82de:	2002      	movs	r0, #2
    82e0:	47b0      	blx	r6
	config->high_when_disabled = false;
    82e2:	7065      	strb	r5, [r4, #1]
	config->run_in_standby     = false;
    82e4:	7225      	strb	r5, [r4, #8]
	config->output_enable      = false;
    82e6:	7265      	strb	r5, [r4, #9]
    82e8:	464b      	mov	r3, r9
    82ea:	7023      	strb	r3, [r4, #0]
    82ec:	4643      	mov	r3, r8
    82ee:	6063      	str	r3, [r4, #4]
    82f0:	0021      	movs	r1, r4
    82f2:	2004      	movs	r0, #4
    82f4:	47b8      	blx	r7
    82f6:	2004      	movs	r0, #4
    82f8:	47b0      	blx	r6
	/* Enable DFLL reference clock if in closed loop mode */
	if (CONF_CLOCK_DFLL_LOOP_MODE == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {
		struct system_gclk_chan_config dfll_gclk_chan_conf;

		system_gclk_chan_get_config_defaults(&dfll_gclk_chan_conf);
		dfll_gclk_chan_conf.source_generator = CONF_CLOCK_DFLL_SOURCE_GCLK_GENERATOR;
    82fa:	465b      	mov	r3, fp
    82fc:	7023      	strb	r3, [r4, #0]
		system_gclk_chan_set_config(SYSCTRL_GCLK_ID_DFLL48, &dfll_gclk_chan_conf);
    82fe:	0021      	movs	r1, r4
    8300:	2000      	movs	r0, #0
    8302:	4b17      	ldr	r3, [pc, #92]	; (8360 <system_clock_init+0x1b0>)
    8304:	4798      	blx	r3
		system_gclk_chan_enable(SYSCTRL_GCLK_ID_DFLL48);
    8306:	2000      	movs	r0, #0
    8308:	4b21      	ldr	r3, [pc, #132]	; (8390 <system_clock_init+0x1e0>)
    830a:	4798      	blx	r3
#endif


	/* DFLL Enable (Open and Closed Loop) */
#if CONF_CLOCK_DFLL_ENABLE == true
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_DFLL);
    830c:	2007      	movs	r0, #7
    830e:	47d0      	blx	sl
	return ((SYSCTRL->PCLKSR.reg & mask) == mask);
    8310:	4911      	ldr	r1, [pc, #68]	; (8358 <system_clock_init+0x1a8>)
    8312:	22d0      	movs	r2, #208	; 0xd0
    8314:	68cb      	ldr	r3, [r1, #12]
    8316:	4013      	ands	r3, r2
	while(!system_clock_source_is_ready(SYSTEM_CLOCK_SOURCE_DFLL));
    8318:	2bd0      	cmp	r3, #208	; 0xd0
    831a:	d1fb      	bne.n	8314 <system_clock_init+0x164>
	PM->CPUSEL.reg = (uint32_t)divider;
    831c:	4a1d      	ldr	r2, [pc, #116]	; (8394 <system_clock_init+0x1e4>)
    831e:	2300      	movs	r3, #0
    8320:	7213      	strb	r3, [r2, #8]
			PM->APBASEL.reg = (uint32_t)divider;
    8322:	7253      	strb	r3, [r2, #9]
			PM->APBBSEL.reg = (uint32_t)divider;
    8324:	7293      	strb	r3, [r2, #10]
			PM->APBCSEL.reg = (uint32_t)divider;
    8326:	72d3      	strb	r3, [r2, #11]
	config->division_factor    = 1;
    8328:	a901      	add	r1, sp, #4
    832a:	2201      	movs	r2, #1
    832c:	604a      	str	r2, [r1, #4]
	config->high_when_disabled = false;
    832e:	704b      	strb	r3, [r1, #1]
	config->run_in_standby     = false;
    8330:	720b      	strb	r3, [r1, #8]
	config->output_enable      = false;
    8332:	724b      	strb	r3, [r1, #9]
	system_apb_clock_set_divider(SYSTEM_CLOCK_APB_APBC, CONF_CLOCK_APBC_DIVIDER);

	/* GCLK 0 */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	/* Configure the main GCLK last as it might depend on other generators */
	_CONF_CLOCK_GCLK_CONFIG(0, ~);
    8334:	3307      	adds	r3, #7
    8336:	700b      	strb	r3, [r1, #0]
    8338:	2000      	movs	r0, #0
    833a:	4b13      	ldr	r3, [pc, #76]	; (8388 <system_clock_init+0x1d8>)
    833c:	4798      	blx	r3
    833e:	2000      	movs	r0, #0
    8340:	4b12      	ldr	r3, [pc, #72]	; (838c <system_clock_init+0x1dc>)
    8342:	4798      	blx	r3
#endif
}
    8344:	b011      	add	sp, #68	; 0x44
    8346:	bc3c      	pop	{r2, r3, r4, r5}
    8348:	4690      	mov	r8, r2
    834a:	4699      	mov	r9, r3
    834c:	46a2      	mov	sl, r4
    834e:	46ab      	mov	fp, r5
    8350:	bdf0      	pop	{r4, r5, r6, r7, pc}
		coarse = 0x1f;
    8352:	3b20      	subs	r3, #32
    8354:	e78f      	b.n	8276 <system_clock_init+0xc6>
    8356:	46c0      	nop			; (mov r8, r8)
    8358:	40000800 	.word	0x40000800
    835c:	41004000 	.word	0x41004000
    8360:	000085d1 	.word	0x000085d1
    8364:	00007fd1 	.word	0x00007fd1
    8368:	00008109 	.word	0x00008109
    836c:	00806024 	.word	0x00806024
    8370:	ff80ffff 	.word	0xff80ffff
    8374:	00007f55 	.word	0x00007f55
    8378:	ffffb71b 	.word	0xffffb71b
    837c:	00008089 	.word	0x00008089
    8380:	00007f19 	.word	0x00007f19
    8384:	00008399 	.word	0x00008399
    8388:	000083bd 	.word	0x000083bd
    838c:	00008475 	.word	0x00008475
    8390:	00008545 	.word	0x00008545
    8394:	40000400 	.word	0x40000400

00008398 <system_gclk_init>:
			PM->APBAMASK.reg |= mask;
    8398:	4a06      	ldr	r2, [pc, #24]	; (83b4 <system_gclk_init+0x1c>)
    839a:	6993      	ldr	r3, [r2, #24]
    839c:	2108      	movs	r1, #8
    839e:	430b      	orrs	r3, r1
    83a0:	6193      	str	r3, [r2, #24]
{
	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBA, PM_APBAMASK_GCLK);

	/* Software reset the module to ensure it is re-initialized correctly */
	GCLK->CTRL.reg = GCLK_CTRL_SWRST;
    83a2:	2201      	movs	r2, #1
    83a4:	4b04      	ldr	r3, [pc, #16]	; (83b8 <system_gclk_init+0x20>)
    83a6:	701a      	strb	r2, [r3, #0]
	while (GCLK->CTRL.reg & GCLK_CTRL_SWRST) {
    83a8:	0019      	movs	r1, r3
    83aa:	780b      	ldrb	r3, [r1, #0]
    83ac:	4213      	tst	r3, r2
    83ae:	d1fc      	bne.n	83aa <system_gclk_init+0x12>
		/* Wait for reset to complete */
	}
}
    83b0:	4770      	bx	lr
    83b2:	46c0      	nop			; (mov r8, r8)
    83b4:	40000400 	.word	0x40000400
    83b8:	40000c00 	.word	0x40000c00

000083bc <system_gclk_gen_set_config>:
 * \param[in] config     Configuration settings for the generator
 */
void system_gclk_gen_set_config(
		const uint8_t generator,
		struct system_gclk_gen_config *const config)
{
    83bc:	b570      	push	{r4, r5, r6, lr}
    83be:	0006      	movs	r6, r0
	/* Sanity check arguments */
	Assert(config);

	/* Cache new register configurations to minimize sync requirements. */
	uint32_t new_genctrl_config = (generator << GCLK_GENCTRL_ID_Pos);
    83c0:	0004      	movs	r4, r0
	uint32_t new_gendiv_config  = (generator << GCLK_GENDIV_ID_Pos);

	/* Select the requested source clock for the generator */
	new_genctrl_config |= config->source_clock << GCLK_GENCTRL_SRC_Pos;
    83c2:	780d      	ldrb	r5, [r1, #0]
    83c4:	022d      	lsls	r5, r5, #8
    83c6:	4305      	orrs	r5, r0

	/* Configure the clock to be either high or low when disabled */
	if (config->high_when_disabled) {
    83c8:	784b      	ldrb	r3, [r1, #1]
    83ca:	2b00      	cmp	r3, #0
    83cc:	d002      	beq.n	83d4 <system_gclk_gen_set_config+0x18>
		new_genctrl_config |= GCLK_GENCTRL_OOV;
    83ce:	2380      	movs	r3, #128	; 0x80
    83d0:	02db      	lsls	r3, r3, #11
    83d2:	431d      	orrs	r5, r3
	}

	/* Configure if the clock output to I/O pin should be enabled. */
	if (config->output_enable) {
    83d4:	7a4b      	ldrb	r3, [r1, #9]
    83d6:	2b00      	cmp	r3, #0
    83d8:	d002      	beq.n	83e0 <system_gclk_gen_set_config+0x24>
		new_genctrl_config |= GCLK_GENCTRL_OE;
    83da:	2380      	movs	r3, #128	; 0x80
    83dc:	031b      	lsls	r3, r3, #12
    83de:	431d      	orrs	r5, r3
	}

	/* Set division factor */
	if (config->division_factor > 1) {
    83e0:	6848      	ldr	r0, [r1, #4]
    83e2:	2801      	cmp	r0, #1
    83e4:	d910      	bls.n	8408 <system_gclk_gen_set_config+0x4c>
		/* Check if division is a power of two */
		if (((config->division_factor & (config->division_factor - 1)) == 0)) {
    83e6:	1e43      	subs	r3, r0, #1
    83e8:	4218      	tst	r0, r3
    83ea:	d134      	bne.n	8456 <system_gclk_gen_set_config+0x9a>
			 * register */

			uint32_t div2_count = 0;

			uint32_t mask;
			for (mask = (1UL << 1); mask < config->division_factor;
    83ec:	2802      	cmp	r0, #2
    83ee:	d930      	bls.n	8452 <system_gclk_gen_set_config+0x96>
    83f0:	2302      	movs	r3, #2
    83f2:	2200      	movs	r2, #0
						mask <<= 1) {
				div2_count++;
    83f4:	3201      	adds	r2, #1
						mask <<= 1) {
    83f6:	005b      	lsls	r3, r3, #1
			for (mask = (1UL << 1); mask < config->division_factor;
    83f8:	4298      	cmp	r0, r3
    83fa:	d8fb      	bhi.n	83f4 <system_gclk_gen_set_config+0x38>
			}

			/* Set binary divider power of 2 division factor */
			new_gendiv_config  |= div2_count << GCLK_GENDIV_DIV_Pos;
    83fc:	0212      	lsls	r2, r2, #8
    83fe:	4332      	orrs	r2, r6
    8400:	0014      	movs	r4, r2
			new_genctrl_config |= GCLK_GENCTRL_DIVSEL;
    8402:	2380      	movs	r3, #128	; 0x80
    8404:	035b      	lsls	r3, r3, #13
    8406:	431d      	orrs	r5, r3
		}

	}

	/* Enable or disable the clock in standby mode */
	if (config->run_in_standby) {
    8408:	7a0b      	ldrb	r3, [r1, #8]
    840a:	2b00      	cmp	r3, #0
    840c:	d002      	beq.n	8414 <system_gclk_gen_set_config+0x58>
		new_genctrl_config |= GCLK_GENCTRL_RUNSTDBY;
    840e:	2380      	movs	r3, #128	; 0x80
    8410:	039b      	lsls	r3, r3, #14
    8412:	431d      	orrs	r5, r3
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    8414:	4a13      	ldr	r2, [pc, #76]	; (8464 <system_gclk_gen_set_config+0xa8>)
    8416:	7853      	ldrb	r3, [r2, #1]
	}

	while (system_gclk_is_syncing()) {
    8418:	b25b      	sxtb	r3, r3
    841a:	2b00      	cmp	r3, #0
    841c:	dbfb      	blt.n	8416 <system_gclk_gen_set_config+0x5a>
	cpu_irq_enter_critical();
    841e:	4b12      	ldr	r3, [pc, #72]	; (8468 <system_gclk_gen_set_config+0xac>)
    8420:	4798      	blx	r3
	};

	system_interrupt_enter_critical_section();

	/* Select the correct generator */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
    8422:	4b12      	ldr	r3, [pc, #72]	; (846c <system_gclk_gen_set_config+0xb0>)
    8424:	701e      	strb	r6, [r3, #0]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    8426:	4a0f      	ldr	r2, [pc, #60]	; (8464 <system_gclk_gen_set_config+0xa8>)
    8428:	7853      	ldrb	r3, [r2, #1]

	/* Write the new generator configuration */
	while (system_gclk_is_syncing()) {
    842a:	b25b      	sxtb	r3, r3
    842c:	2b00      	cmp	r3, #0
    842e:	dbfb      	blt.n	8428 <system_gclk_gen_set_config+0x6c>
		/* Wait for synchronization */
	};
	GCLK->GENDIV.reg  = new_gendiv_config;
    8430:	4b0c      	ldr	r3, [pc, #48]	; (8464 <system_gclk_gen_set_config+0xa8>)
    8432:	609c      	str	r4, [r3, #8]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    8434:	001a      	movs	r2, r3
    8436:	7853      	ldrb	r3, [r2, #1]

	while (system_gclk_is_syncing()) {
    8438:	b25b      	sxtb	r3, r3
    843a:	2b00      	cmp	r3, #0
    843c:	dbfb      	blt.n	8436 <system_gclk_gen_set_config+0x7a>
		/* Wait for synchronization */
	};
	GCLK->GENCTRL.reg = new_genctrl_config | (GCLK->GENCTRL.reg & GCLK_GENCTRL_GENEN);
    843e:	4a09      	ldr	r2, [pc, #36]	; (8464 <system_gclk_gen_set_config+0xa8>)
    8440:	6853      	ldr	r3, [r2, #4]
    8442:	2180      	movs	r1, #128	; 0x80
    8444:	0249      	lsls	r1, r1, #9
    8446:	400b      	ands	r3, r1
    8448:	431d      	orrs	r5, r3
    844a:	6055      	str	r5, [r2, #4]
	cpu_irq_leave_critical();
    844c:	4b08      	ldr	r3, [pc, #32]	; (8470 <system_gclk_gen_set_config+0xb4>)
    844e:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    8450:	bd70      	pop	{r4, r5, r6, pc}
			for (mask = (1UL << 1); mask < config->division_factor;
    8452:	2200      	movs	r2, #0
    8454:	e7d2      	b.n	83fc <system_gclk_gen_set_config+0x40>
					(config->division_factor) << GCLK_GENDIV_DIV_Pos;
    8456:	0204      	lsls	r4, r0, #8
			new_gendiv_config  |=
    8458:	4334      	orrs	r4, r6
			new_genctrl_config |= GCLK_GENCTRL_IDC;
    845a:	2380      	movs	r3, #128	; 0x80
    845c:	029b      	lsls	r3, r3, #10
    845e:	431d      	orrs	r5, r3
    8460:	e7d2      	b.n	8408 <system_gclk_gen_set_config+0x4c>
    8462:	46c0      	nop			; (mov r8, r8)
    8464:	40000c00 	.word	0x40000c00
    8468:	000064f5 	.word	0x000064f5
    846c:	40000c08 	.word	0x40000c08
    8470:	00006535 	.word	0x00006535

00008474 <system_gclk_gen_enable>:
 *
 * \param[in] generator  Generic Clock Generator index to enable
 */
void system_gclk_gen_enable(
		const uint8_t generator)
{
    8474:	b510      	push	{r4, lr}
    8476:	0004      	movs	r4, r0
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    8478:	4a0b      	ldr	r2, [pc, #44]	; (84a8 <system_gclk_gen_enable+0x34>)
    847a:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
    847c:	b25b      	sxtb	r3, r3
    847e:	2b00      	cmp	r3, #0
    8480:	dbfb      	blt.n	847a <system_gclk_gen_enable+0x6>
	cpu_irq_enter_critical();
    8482:	4b0a      	ldr	r3, [pc, #40]	; (84ac <system_gclk_gen_enable+0x38>)
    8484:	4798      	blx	r3
	};

	system_interrupt_enter_critical_section();

	/* Select the requested generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    8486:	4b0a      	ldr	r3, [pc, #40]	; (84b0 <system_gclk_gen_enable+0x3c>)
    8488:	701c      	strb	r4, [r3, #0]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    848a:	4a07      	ldr	r2, [pc, #28]	; (84a8 <system_gclk_gen_enable+0x34>)
    848c:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
    848e:	b25b      	sxtb	r3, r3
    8490:	2b00      	cmp	r3, #0
    8492:	dbfb      	blt.n	848c <system_gclk_gen_enable+0x18>
		/* Wait for synchronization */
	};

	/* Enable generator */
	GCLK->GENCTRL.reg |= GCLK_GENCTRL_GENEN;
    8494:	4a04      	ldr	r2, [pc, #16]	; (84a8 <system_gclk_gen_enable+0x34>)
    8496:	6851      	ldr	r1, [r2, #4]
    8498:	2380      	movs	r3, #128	; 0x80
    849a:	025b      	lsls	r3, r3, #9
    849c:	430b      	orrs	r3, r1
    849e:	6053      	str	r3, [r2, #4]
	cpu_irq_leave_critical();
    84a0:	4b04      	ldr	r3, [pc, #16]	; (84b4 <system_gclk_gen_enable+0x40>)
    84a2:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    84a4:	bd10      	pop	{r4, pc}
    84a6:	46c0      	nop			; (mov r8, r8)
    84a8:	40000c00 	.word	0x40000c00
    84ac:	000064f5 	.word	0x000064f5
    84b0:	40000c04 	.word	0x40000c04
    84b4:	00006535 	.word	0x00006535

000084b8 <system_gclk_gen_get_hz>:
 *
 * \return The frequency of the generic clock generator, in Hz.
 */
uint32_t system_gclk_gen_get_hz(
		const uint8_t generator)
{
    84b8:	b570      	push	{r4, r5, r6, lr}
    84ba:	0004      	movs	r4, r0
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    84bc:	4a1a      	ldr	r2, [pc, #104]	; (8528 <system_gclk_gen_get_hz+0x70>)
    84be:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
    84c0:	b25b      	sxtb	r3, r3
    84c2:	2b00      	cmp	r3, #0
    84c4:	dbfb      	blt.n	84be <system_gclk_gen_get_hz+0x6>
	cpu_irq_enter_critical();
    84c6:	4b19      	ldr	r3, [pc, #100]	; (852c <system_gclk_gen_get_hz+0x74>)
    84c8:	4798      	blx	r3
	};

	system_interrupt_enter_critical_section();

	/* Select the appropriate generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    84ca:	4b19      	ldr	r3, [pc, #100]	; (8530 <system_gclk_gen_get_hz+0x78>)
    84cc:	701c      	strb	r4, [r3, #0]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    84ce:	4a16      	ldr	r2, [pc, #88]	; (8528 <system_gclk_gen_get_hz+0x70>)
    84d0:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
    84d2:	b25b      	sxtb	r3, r3
    84d4:	2b00      	cmp	r3, #0
    84d6:	dbfb      	blt.n	84d0 <system_gclk_gen_get_hz+0x18>
		/* Wait for synchronization */
	};

	/* Get the frequency of the source connected to the GCLK generator */
	uint32_t gen_input_hz = system_clock_source_get_hz(
			(enum system_clock_source)GCLK->GENCTRL.bit.SRC);
    84d8:	4e13      	ldr	r6, [pc, #76]	; (8528 <system_gclk_gen_get_hz+0x70>)
    84da:	6870      	ldr	r0, [r6, #4]
    84dc:	04c0      	lsls	r0, r0, #19
    84de:	0ec0      	lsrs	r0, r0, #27
	uint32_t gen_input_hz = system_clock_source_get_hz(
    84e0:	4b14      	ldr	r3, [pc, #80]	; (8534 <system_gclk_gen_get_hz+0x7c>)
    84e2:	4798      	blx	r3
    84e4:	0005      	movs	r5, r0

	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    84e6:	4b12      	ldr	r3, [pc, #72]	; (8530 <system_gclk_gen_get_hz+0x78>)
    84e8:	701c      	strb	r4, [r3, #0]

	uint8_t divsel = GCLK->GENCTRL.bit.DIVSEL;
    84ea:	6876      	ldr	r6, [r6, #4]
    84ec:	02f6      	lsls	r6, r6, #11
    84ee:	0ff6      	lsrs	r6, r6, #31

	/* Select the appropriate generator division register */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
    84f0:	4b11      	ldr	r3, [pc, #68]	; (8538 <system_gclk_gen_get_hz+0x80>)
    84f2:	701c      	strb	r4, [r3, #0]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    84f4:	4a0c      	ldr	r2, [pc, #48]	; (8528 <system_gclk_gen_get_hz+0x70>)
    84f6:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
    84f8:	b25b      	sxtb	r3, r3
    84fa:	2b00      	cmp	r3, #0
    84fc:	dbfb      	blt.n	84f6 <system_gclk_gen_get_hz+0x3e>
		/* Wait for synchronization */
	};

	uint32_t divider = GCLK->GENDIV.bit.DIV;
    84fe:	4b0a      	ldr	r3, [pc, #40]	; (8528 <system_gclk_gen_get_hz+0x70>)
    8500:	689c      	ldr	r4, [r3, #8]
    8502:	0224      	lsls	r4, r4, #8
    8504:	0c24      	lsrs	r4, r4, #16
	cpu_irq_leave_critical();
    8506:	4b0d      	ldr	r3, [pc, #52]	; (853c <system_gclk_gen_get_hz+0x84>)
    8508:	4798      	blx	r3

	system_interrupt_leave_critical_section();

	/* Check if the generator is using fractional or binary division */
	if (!divsel && divider > 1) {
    850a:	2e00      	cmp	r6, #0
    850c:	d107      	bne.n	851e <system_gclk_gen_get_hz+0x66>
    850e:	2c01      	cmp	r4, #1
    8510:	d907      	bls.n	8522 <system_gclk_gen_get_hz+0x6a>
		gen_input_hz /= divider;
    8512:	0021      	movs	r1, r4
    8514:	0028      	movs	r0, r5
    8516:	4b0a      	ldr	r3, [pc, #40]	; (8540 <system_gclk_gen_get_hz+0x88>)
    8518:	4798      	blx	r3
    851a:	0005      	movs	r5, r0
    851c:	e001      	b.n	8522 <system_gclk_gen_get_hz+0x6a>
	} else if (divsel) {
		gen_input_hz >>= (divider+1);
    851e:	3401      	adds	r4, #1
    8520:	40e5      	lsrs	r5, r4
	}

	return gen_input_hz;
}
    8522:	0028      	movs	r0, r5
    8524:	bd70      	pop	{r4, r5, r6, pc}
    8526:	46c0      	nop			; (mov r8, r8)
    8528:	40000c00 	.word	0x40000c00
    852c:	000064f5 	.word	0x000064f5
    8530:	40000c04 	.word	0x40000c04
    8534:	00007e85 	.word	0x00007e85
    8538:	40000c08 	.word	0x40000c08
    853c:	00006535 	.word	0x00006535
    8540:	00012469 	.word	0x00012469

00008544 <system_gclk_chan_enable>:
 *
 * \param[in] channel   Generic Clock channel to enable
 */
void system_gclk_chan_enable(
		const uint8_t channel)
{
    8544:	b510      	push	{r4, lr}
    8546:	0004      	movs	r4, r0
	cpu_irq_enter_critical();
    8548:	4b06      	ldr	r3, [pc, #24]	; (8564 <system_gclk_chan_enable+0x20>)
    854a:	4798      	blx	r3
	system_interrupt_enter_critical_section();

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    854c:	4b06      	ldr	r3, [pc, #24]	; (8568 <system_gclk_chan_enable+0x24>)
    854e:	701c      	strb	r4, [r3, #0]

	/* Enable the generic clock */
	GCLK->CLKCTRL.reg |= GCLK_CLKCTRL_CLKEN;
    8550:	4a06      	ldr	r2, [pc, #24]	; (856c <system_gclk_chan_enable+0x28>)
    8552:	8853      	ldrh	r3, [r2, #2]
    8554:	2180      	movs	r1, #128	; 0x80
    8556:	01c9      	lsls	r1, r1, #7
    8558:	430b      	orrs	r3, r1
    855a:	8053      	strh	r3, [r2, #2]
	cpu_irq_leave_critical();
    855c:	4b04      	ldr	r3, [pc, #16]	; (8570 <system_gclk_chan_enable+0x2c>)
    855e:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    8560:	bd10      	pop	{r4, pc}
    8562:	46c0      	nop			; (mov r8, r8)
    8564:	000064f5 	.word	0x000064f5
    8568:	40000c02 	.word	0x40000c02
    856c:	40000c00 	.word	0x40000c00
    8570:	00006535 	.word	0x00006535

00008574 <system_gclk_chan_disable>:
 *
 * \param[in] channel  Generic Clock channel to disable
 */
void system_gclk_chan_disable(
		const uint8_t channel)
{
    8574:	b510      	push	{r4, lr}
    8576:	0004      	movs	r4, r0
	cpu_irq_enter_critical();
    8578:	4b0f      	ldr	r3, [pc, #60]	; (85b8 <system_gclk_chan_disable+0x44>)
    857a:	4798      	blx	r3
	system_interrupt_enter_critical_section();

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    857c:	4b0f      	ldr	r3, [pc, #60]	; (85bc <system_gclk_chan_disable+0x48>)
    857e:	701c      	strb	r4, [r3, #0]

	/* Sanity check WRTLOCK */
	Assert(!GCLK->CLKCTRL.bit.WRTLOCK);

	/* Switch to known-working source so that the channel can be disabled */
	uint32_t prev_gen_id = GCLK->CLKCTRL.bit.GEN;
    8580:	4a0f      	ldr	r2, [pc, #60]	; (85c0 <system_gclk_chan_disable+0x4c>)
    8582:	8853      	ldrh	r3, [r2, #2]
    8584:	051b      	lsls	r3, r3, #20
    8586:	0f18      	lsrs	r0, r3, #28
	GCLK->CLKCTRL.bit.GEN = 0;
    8588:	8853      	ldrh	r3, [r2, #2]
    858a:	490e      	ldr	r1, [pc, #56]	; (85c4 <system_gclk_chan_disable+0x50>)
    858c:	400b      	ands	r3, r1
    858e:	8053      	strh	r3, [r2, #2]

	/* Disable the generic clock */
	GCLK->CLKCTRL.reg &= ~GCLK_CLKCTRL_CLKEN;
    8590:	8853      	ldrh	r3, [r2, #2]
    8592:	490d      	ldr	r1, [pc, #52]	; (85c8 <system_gclk_chan_disable+0x54>)
    8594:	400b      	ands	r3, r1
    8596:	8053      	strh	r3, [r2, #2]
	while (GCLK->CLKCTRL.reg & GCLK_CLKCTRL_CLKEN) {
    8598:	0011      	movs	r1, r2
    859a:	2280      	movs	r2, #128	; 0x80
    859c:	01d2      	lsls	r2, r2, #7
    859e:	884b      	ldrh	r3, [r1, #2]
    85a0:	4213      	tst	r3, r2
    85a2:	d1fc      	bne.n	859e <system_gclk_chan_disable+0x2a>
		/* Wait for clock to become disabled */
	}

	/* Restore previous configured clock generator */
	GCLK->CLKCTRL.bit.GEN = prev_gen_id;
    85a4:	4906      	ldr	r1, [pc, #24]	; (85c0 <system_gclk_chan_disable+0x4c>)
    85a6:	884a      	ldrh	r2, [r1, #2]
    85a8:	0203      	lsls	r3, r0, #8
    85aa:	4806      	ldr	r0, [pc, #24]	; (85c4 <system_gclk_chan_disable+0x50>)
    85ac:	4002      	ands	r2, r0
    85ae:	4313      	orrs	r3, r2
    85b0:	804b      	strh	r3, [r1, #2]
	cpu_irq_leave_critical();
    85b2:	4b06      	ldr	r3, [pc, #24]	; (85cc <system_gclk_chan_disable+0x58>)
    85b4:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    85b6:	bd10      	pop	{r4, pc}
    85b8:	000064f5 	.word	0x000064f5
    85bc:	40000c02 	.word	0x40000c02
    85c0:	40000c00 	.word	0x40000c00
    85c4:	fffff0ff 	.word	0xfffff0ff
    85c8:	ffffbfff 	.word	0xffffbfff
    85cc:	00006535 	.word	0x00006535

000085d0 <system_gclk_chan_set_config>:
{
    85d0:	b510      	push	{r4, lr}
	new_clkctrl_config |= config->source_generator << GCLK_CLKCTRL_GEN_Pos;
    85d2:	780c      	ldrb	r4, [r1, #0]
    85d4:	0224      	lsls	r4, r4, #8
    85d6:	4304      	orrs	r4, r0
	system_gclk_chan_disable(channel);
    85d8:	4b02      	ldr	r3, [pc, #8]	; (85e4 <system_gclk_chan_set_config+0x14>)
    85da:	4798      	blx	r3
	GCLK->CLKCTRL.reg = new_clkctrl_config;
    85dc:	b2a4      	uxth	r4, r4
    85de:	4b02      	ldr	r3, [pc, #8]	; (85e8 <system_gclk_chan_set_config+0x18>)
    85e0:	805c      	strh	r4, [r3, #2]
}
    85e2:	bd10      	pop	{r4, pc}
    85e4:	00008575 	.word	0x00008575
    85e8:	40000c00 	.word	0x40000c00

000085ec <system_gclk_chan_get_hz>:
 *
 * \return The frequency of the generic clock channel, in Hz.
 */
uint32_t system_gclk_chan_get_hz(
		const uint8_t channel)
{
    85ec:	b510      	push	{r4, lr}
    85ee:	0004      	movs	r4, r0
	cpu_irq_enter_critical();
    85f0:	4b06      	ldr	r3, [pc, #24]	; (860c <system_gclk_chan_get_hz+0x20>)
    85f2:	4798      	blx	r3
	uint8_t gen_id;

	system_interrupt_enter_critical_section();

	/* Select the requested generic clock channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    85f4:	4b06      	ldr	r3, [pc, #24]	; (8610 <system_gclk_chan_get_hz+0x24>)
    85f6:	701c      	strb	r4, [r3, #0]
	gen_id = GCLK->CLKCTRL.bit.GEN;
    85f8:	4b06      	ldr	r3, [pc, #24]	; (8614 <system_gclk_chan_get_hz+0x28>)
    85fa:	885c      	ldrh	r4, [r3, #2]
    85fc:	0524      	lsls	r4, r4, #20
    85fe:	0f24      	lsrs	r4, r4, #28
	cpu_irq_leave_critical();
    8600:	4b05      	ldr	r3, [pc, #20]	; (8618 <system_gclk_chan_get_hz+0x2c>)
    8602:	4798      	blx	r3

	system_interrupt_leave_critical_section();

	/* Return the clock speed of the associated GCLK generator */
	return system_gclk_gen_get_hz(gen_id);
    8604:	0020      	movs	r0, r4
    8606:	4b05      	ldr	r3, [pc, #20]	; (861c <system_gclk_chan_get_hz+0x30>)
    8608:	4798      	blx	r3
}
    860a:	bd10      	pop	{r4, pc}
    860c:	000064f5 	.word	0x000064f5
    8610:	40000c02 	.word	0x40000c02
    8614:	40000c00 	.word	0x40000c00
    8618:	00006535 	.word	0x00006535
    861c:	000084b9 	.word	0x000084b9

00008620 <_system_pinmux_config>:
 */
static void _system_pinmux_config(
		PortGroup *const port,
		const uint32_t pin_mask,
		const struct system_pinmux_config *const config)
{
    8620:	b530      	push	{r4, r5, lr}

	/* Track the configuration bits into a temporary variable before writing */
	uint32_t pin_cfg = 0;

	/* Enabled powersave mode, don't create configuration */
	if (!config->powersave) {
    8622:	78d3      	ldrb	r3, [r2, #3]
    8624:	2b00      	cmp	r3, #0
    8626:	d135      	bne.n	8694 <_system_pinmux_config+0x74>
		/* Enable the pin peripheral MUX flag if non-GPIO selected (pinmux will
		 * be written later) and store the new MUX mask */
		if (config->mux_position != SYSTEM_PINMUX_GPIO) {
    8628:	7813      	ldrb	r3, [r2, #0]
    862a:	2b80      	cmp	r3, #128	; 0x80
    862c:	d029      	beq.n	8682 <_system_pinmux_config+0x62>
			pin_cfg |= PORT_WRCONFIG_PMUXEN;
			pin_cfg |= (config->mux_position << PORT_WRCONFIG_PMUX_Pos);
    862e:	061b      	lsls	r3, r3, #24
    8630:	2480      	movs	r4, #128	; 0x80
    8632:	0264      	lsls	r4, r4, #9
    8634:	4323      	orrs	r3, r4
		}

		/* Check if the user has requested that the input buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_INPUT) ||
    8636:	7854      	ldrb	r4, [r2, #1]
    8638:	2502      	movs	r5, #2
    863a:	43ac      	bics	r4, r5
    863c:	d106      	bne.n	864c <_system_pinmux_config+0x2c>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Enable input buffer flag */
			pin_cfg |= PORT_WRCONFIG_INEN;

			/* Enable pull-up/pull-down control flag if requested */
			if (config->input_pull != SYSTEM_PINMUX_PIN_PULL_NONE) {
    863e:	7894      	ldrb	r4, [r2, #2]
    8640:	2c00      	cmp	r4, #0
    8642:	d120      	bne.n	8686 <_system_pinmux_config+0x66>
			pin_cfg |= PORT_WRCONFIG_INEN;
    8644:	2480      	movs	r4, #128	; 0x80
    8646:	02a4      	lsls	r4, r4, #10
    8648:	4323      	orrs	r3, r4
				pin_cfg |= PORT_WRCONFIG_PULLEN;
			}

			/* Clear the port DIR bits to disable the output buffer */
			port->DIRCLR.reg = pin_mask;
    864a:	6041      	str	r1, [r0, #4]
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    864c:	7854      	ldrb	r4, [r2, #1]
    864e:	3c01      	subs	r4, #1
    8650:	2c01      	cmp	r4, #1
    8652:	d91c      	bls.n	868e <_system_pinmux_config+0x6e>
		port->DIRCLR.reg = pin_mask;
	}

	/* The Write Configuration register (WRCONFIG) requires the
	 * pins to to grouped into two 16-bit half-words - split them out here */
	uint32_t lower_pin_mask = (pin_mask & 0xFFFF);
    8654:	040d      	lsls	r5, r1, #16
    8656:	0c2d      	lsrs	r5, r5, #16

	/* Configure the lower 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;
    8658:	24a0      	movs	r4, #160	; 0xa0
    865a:	05e4      	lsls	r4, r4, #23
    865c:	432c      	orrs	r4, r5
    865e:	431c      	orrs	r4, r3
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    8660:	6284      	str	r4, [r0, #40]	; 0x28
	uint32_t upper_pin_mask = (pin_mask >> 16);
    8662:	0c0d      	lsrs	r5, r1, #16

	/* Configure the upper 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
    8664:	24d0      	movs	r4, #208	; 0xd0
    8666:	0624      	lsls	r4, r4, #24
    8668:	432c      	orrs	r4, r5
    866a:	431c      	orrs	r4, r3
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    866c:	6284      	str	r4, [r0, #40]	; 0x28
			PORT_WRCONFIG_HWSEL;

	if(!config->powersave) {
    866e:	78d4      	ldrb	r4, [r2, #3]
    8670:	2c00      	cmp	r4, #0
    8672:	d122      	bne.n	86ba <_system_pinmux_config+0x9a>
		/* Set the pull-up state once the port pins are configured if one was
		 * requested and it does not violate the valid set of port
		 * configurations */
		if (pin_cfg & PORT_WRCONFIG_PULLEN) {
    8674:	035b      	lsls	r3, r3, #13
    8676:	d51c      	bpl.n	86b2 <_system_pinmux_config+0x92>
			/* Set the OUT register bits to enable the pull-up if requested,
			 * clear to enable pull-down */
			if (config->input_pull == SYSTEM_PINMUX_PIN_PULL_UP) {
    8678:	7893      	ldrb	r3, [r2, #2]
    867a:	2b01      	cmp	r3, #1
    867c:	d01e      	beq.n	86bc <_system_pinmux_config+0x9c>
				port->OUTSET.reg = pin_mask;
			} else {
				port->OUTCLR.reg = pin_mask;
    867e:	6141      	str	r1, [r0, #20]
    8680:	e017      	b.n	86b2 <_system_pinmux_config+0x92>
	uint32_t pin_cfg = 0;
    8682:	2300      	movs	r3, #0
    8684:	e7d7      	b.n	8636 <_system_pinmux_config+0x16>
				pin_cfg |= PORT_WRCONFIG_PULLEN;
    8686:	24c0      	movs	r4, #192	; 0xc0
    8688:	02e4      	lsls	r4, r4, #11
    868a:	4323      	orrs	r3, r4
    868c:	e7dd      	b.n	864a <_system_pinmux_config+0x2a>
			pin_cfg &= ~PORT_WRCONFIG_PULLEN;
    868e:	4c0d      	ldr	r4, [pc, #52]	; (86c4 <_system_pinmux_config+0xa4>)
    8690:	4023      	ands	r3, r4
    8692:	e7df      	b.n	8654 <_system_pinmux_config+0x34>
		port->DIRCLR.reg = pin_mask;
    8694:	6041      	str	r1, [r0, #4]
	uint32_t lower_pin_mask = (pin_mask & 0xFFFF);
    8696:	040c      	lsls	r4, r1, #16
    8698:	0c24      	lsrs	r4, r4, #16
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;
    869a:	23a0      	movs	r3, #160	; 0xa0
    869c:	05db      	lsls	r3, r3, #23
    869e:	4323      	orrs	r3, r4
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    86a0:	6283      	str	r3, [r0, #40]	; 0x28
	uint32_t upper_pin_mask = (pin_mask >> 16);
    86a2:	0c0c      	lsrs	r4, r1, #16
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
    86a4:	23d0      	movs	r3, #208	; 0xd0
    86a6:	061b      	lsls	r3, r3, #24
    86a8:	4323      	orrs	r3, r4
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    86aa:	6283      	str	r3, [r0, #40]	; 0x28
	if(!config->powersave) {
    86ac:	78d3      	ldrb	r3, [r2, #3]
    86ae:	2b00      	cmp	r3, #0
    86b0:	d103      	bne.n	86ba <_system_pinmux_config+0x9a>
			}
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    86b2:	7853      	ldrb	r3, [r2, #1]
    86b4:	3b01      	subs	r3, #1
    86b6:	2b01      	cmp	r3, #1
    86b8:	d902      	bls.n	86c0 <_system_pinmux_config+0xa0>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Set the port DIR bits to enable the output buffer */
			port->DIRSET.reg = pin_mask;
		}
	}
}
    86ba:	bd30      	pop	{r4, r5, pc}
				port->OUTSET.reg = pin_mask;
    86bc:	6181      	str	r1, [r0, #24]
    86be:	e7f8      	b.n	86b2 <_system_pinmux_config+0x92>
			port->DIRSET.reg = pin_mask;
    86c0:	6081      	str	r1, [r0, #8]
}
    86c2:	e7fa      	b.n	86ba <_system_pinmux_config+0x9a>
    86c4:	fffbffff 	.word	0xfffbffff

000086c8 <system_pinmux_pin_set_config>:
 * \param[in] config    Configuration settings for the pin
 */
void system_pinmux_pin_set_config(
		const uint8_t gpio_pin,
		const struct system_pinmux_config *const config)
{
    86c8:	b510      	push	{r4, lr}
    86ca:	000a      	movs	r2, r1
	if (port_index < PORT_INST_NUM) {
    86cc:	09c1      	lsrs	r1, r0, #7
		return NULL;
    86ce:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
    86d0:	2900      	cmp	r1, #0
    86d2:	d104      	bne.n	86de <system_pinmux_pin_set_config+0x16>
		return &(ports[port_index]->Group[group_index]);
    86d4:	0943      	lsrs	r3, r0, #5
    86d6:	01db      	lsls	r3, r3, #7
    86d8:	4905      	ldr	r1, [pc, #20]	; (86f0 <system_pinmux_pin_set_config+0x28>)
    86da:	468c      	mov	ip, r1
    86dc:	4463      	add	r3, ip
	PortGroup *const port = system_pinmux_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask = (1UL << (gpio_pin % 32));
    86de:	241f      	movs	r4, #31
    86e0:	4020      	ands	r0, r4
    86e2:	2101      	movs	r1, #1
    86e4:	4081      	lsls	r1, r0

	_system_pinmux_config(port, pin_mask, config);
    86e6:	0018      	movs	r0, r3
    86e8:	4b02      	ldr	r3, [pc, #8]	; (86f4 <system_pinmux_pin_set_config+0x2c>)
    86ea:	4798      	blx	r3
}
    86ec:	bd10      	pop	{r4, pc}
    86ee:	46c0      	nop			; (mov r8, r8)
    86f0:	41004400 	.word	0x41004400
    86f4:	00008621 	.word	0x00008621

000086f8 <_system_dummy_init>:
 */
void _system_dummy_init(void);
void _system_dummy_init(void)
{
	return;
}
    86f8:	4770      	bx	lr
    86fa:	Address 0x000086fa is out of bounds.


000086fc <system_init>:
 *  - Board hardware initialization (via the Board module)
 *  - Event system driver initialization (via the EVSYS module)
 *  - External Interrupt driver initialization (via the EXTINT module)
 */
void system_init(void)
{
    86fc:	b510      	push	{r4, lr}
	/* Configure GCLK and clock sources according to conf_clocks.h */
	system_clock_init();
    86fe:	4b05      	ldr	r3, [pc, #20]	; (8714 <system_init+0x18>)
    8700:	4798      	blx	r3

	/* Initialize board hardware */
	system_board_init();
    8702:	4b05      	ldr	r3, [pc, #20]	; (8718 <system_init+0x1c>)
    8704:	4798      	blx	r3

	/* Initialize EVSYS hardware */
	_system_events_init();
    8706:	4b05      	ldr	r3, [pc, #20]	; (871c <system_init+0x20>)
    8708:	4798      	blx	r3

	/* Initialize External hardware */
	_system_extint_init();
    870a:	4b05      	ldr	r3, [pc, #20]	; (8720 <system_init+0x24>)
    870c:	4798      	blx	r3
	
	/* Initialize DIVAS hardware */
	_system_divas_init();
    870e:	4b05      	ldr	r3, [pc, #20]	; (8724 <system_init+0x28>)
    8710:	4798      	blx	r3
}
    8712:	bd10      	pop	{r4, pc}
    8714:	000081b1 	.word	0x000081b1
    8718:	00006565 	.word	0x00006565
    871c:	000086f9 	.word	0x000086f9
    8720:	00006711 	.word	0x00006711
    8724:	000086f9 	.word	0x000086f9

00008728 <tc_register_callback>:
	/* Sanity check arguments */
	Assert(module);
	Assert(callback_func);

	/* Register callback function */
	module->callback[callback_type] = callback_func;
    8728:	1c93      	adds	r3, r2, #2
    872a:	009b      	lsls	r3, r3, #2
    872c:	5019      	str	r1, [r3, r0]

	/* Set the bit corresponding to the callback_type */
	if (callback_type == TC_CALLBACK_CC_CHANNEL0) {
    872e:	2a02      	cmp	r2, #2
    8730:	d009      	beq.n	8746 <tc_register_callback+0x1e>
		module->register_callback_mask |= TC_INTFLAG_MC(1);
	}
	else if (callback_type == TC_CALLBACK_CC_CHANNEL1) {
    8732:	2a03      	cmp	r2, #3
    8734:	d00c      	beq.n	8750 <tc_register_callback+0x28>
		module->register_callback_mask |= TC_INTFLAG_MC(2);
	}
	else {
		module->register_callback_mask |= (1 << callback_type);
    8736:	2301      	movs	r3, #1
    8738:	4093      	lsls	r3, r2
    873a:	001a      	movs	r2, r3
    873c:	7e03      	ldrb	r3, [r0, #24]
    873e:	4313      	orrs	r3, r2
    8740:	7603      	strb	r3, [r0, #24]
	}
	return STATUS_OK;
}
    8742:	2000      	movs	r0, #0
    8744:	4770      	bx	lr
		module->register_callback_mask |= TC_INTFLAG_MC(1);
    8746:	7e03      	ldrb	r3, [r0, #24]
    8748:	2210      	movs	r2, #16
    874a:	4313      	orrs	r3, r2
    874c:	7603      	strb	r3, [r0, #24]
    874e:	e7f8      	b.n	8742 <tc_register_callback+0x1a>
		module->register_callback_mask |= TC_INTFLAG_MC(2);
    8750:	7e03      	ldrb	r3, [r0, #24]
    8752:	2220      	movs	r2, #32
    8754:	4313      	orrs	r3, r2
    8756:	7603      	strb	r3, [r0, #24]
    8758:	e7f3      	b.n	8742 <tc_register_callback+0x1a>
    875a:	Address 0x0000875a is out of bounds.


0000875c <_tc_interrupt_handler>:
 * \param[in]  instance  ID of the TC instance calling the interrupt
 *                       handler
 */
void _tc_interrupt_handler(
		uint8_t instance)
{
    875c:	b570      	push	{r4, r5, r6, lr}
	/* Temporary variable */
	uint8_t interrupt_and_callback_status_mask;

	/* Get device instance from the look-up table */
	struct tc_module *module
    875e:	0080      	lsls	r0, r0, #2
    8760:	4b16      	ldr	r3, [pc, #88]	; (87bc <_tc_interrupt_handler+0x60>)
    8762:	58c4      	ldr	r4, [r0, r3]
			= (struct tc_module *)_tc_instances[instance];

	/* Read and mask interrupt flag register */
	interrupt_and_callback_status_mask = module->hw->COUNT8.INTFLAG.reg &
    8764:	6823      	ldr	r3, [r4, #0]
    8766:	7b9d      	ldrb	r5, [r3, #14]
    8768:	7e22      	ldrb	r2, [r4, #24]
    876a:	7e63      	ldrb	r3, [r4, #25]
    876c:	4013      	ands	r3, r2
    876e:	401d      	ands	r5, r3
			module->register_callback_mask &
			module->enable_callback_mask;

	/* Check if an Overflow interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_OVF) {
    8770:	07eb      	lsls	r3, r5, #31
    8772:	d406      	bmi.n	8782 <_tc_interrupt_handler+0x26>
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_OVF;
	}

	/* Check if an Error interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_ERR) {
    8774:	07ab      	lsls	r3, r5, #30
    8776:	d40b      	bmi.n	8790 <_tc_interrupt_handler+0x34>
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_ERR;
	}

	/* Check if an Match/Capture Channel 0 interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_MC(1)) {
    8778:	06eb      	lsls	r3, r5, #27
    877a:	d410      	bmi.n	879e <_tc_interrupt_handler+0x42>
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_MC(1);
	}

	/* Check if an Match/Capture Channel 1 interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_MC(2)) {
    877c:	06ab      	lsls	r3, r5, #26
    877e:	d415      	bmi.n	87ac <_tc_interrupt_handler+0x50>
		/* Invoke registered and enabled callback function */
		(module->callback[TC_CALLBACK_CC_CHANNEL1])(module);
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_MC(2);
	}
}
    8780:	bd70      	pop	{r4, r5, r6, pc}
		(module->callback[TC_CALLBACK_OVERFLOW])(module);
    8782:	0020      	movs	r0, r4
    8784:	68a3      	ldr	r3, [r4, #8]
    8786:	4798      	blx	r3
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_OVF;
    8788:	2301      	movs	r3, #1
    878a:	6822      	ldr	r2, [r4, #0]
    878c:	7393      	strb	r3, [r2, #14]
    878e:	e7f1      	b.n	8774 <_tc_interrupt_handler+0x18>
		(module->callback[TC_CALLBACK_ERROR])(module);
    8790:	0020      	movs	r0, r4
    8792:	68e3      	ldr	r3, [r4, #12]
    8794:	4798      	blx	r3
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_ERR;
    8796:	2302      	movs	r3, #2
    8798:	6822      	ldr	r2, [r4, #0]
    879a:	7393      	strb	r3, [r2, #14]
    879c:	e7ec      	b.n	8778 <_tc_interrupt_handler+0x1c>
		(module->callback[TC_CALLBACK_CC_CHANNEL0])(module);
    879e:	0020      	movs	r0, r4
    87a0:	6923      	ldr	r3, [r4, #16]
    87a2:	4798      	blx	r3
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_MC(1);
    87a4:	2310      	movs	r3, #16
    87a6:	6822      	ldr	r2, [r4, #0]
    87a8:	7393      	strb	r3, [r2, #14]
    87aa:	e7e7      	b.n	877c <_tc_interrupt_handler+0x20>
		(module->callback[TC_CALLBACK_CC_CHANNEL1])(module);
    87ac:	0020      	movs	r0, r4
    87ae:	6963      	ldr	r3, [r4, #20]
    87b0:	4798      	blx	r3
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_MC(2);
    87b2:	6823      	ldr	r3, [r4, #0]
    87b4:	2220      	movs	r2, #32
    87b6:	739a      	strb	r2, [r3, #14]
}
    87b8:	e7e2      	b.n	8780 <_tc_interrupt_handler+0x24>
    87ba:	46c0      	nop			; (mov r8, r8)
    87bc:	20001d98 	.word	0x20001d98

000087c0 <TC3_Handler>:
	MRECURSION(TC_INST_NUM, _TC_INTERRUPT_HANDLER, TC_INST_MAX_ID)
    87c0:	b510      	push	{r4, lr}
    87c2:	2000      	movs	r0, #0
    87c4:	4b01      	ldr	r3, [pc, #4]	; (87cc <TC3_Handler+0xc>)
    87c6:	4798      	blx	r3
    87c8:	bd10      	pop	{r4, pc}
    87ca:	46c0      	nop			; (mov r8, r8)
    87cc:	0000875d 	.word	0x0000875d

000087d0 <TC4_Handler>:
    87d0:	b510      	push	{r4, lr}
    87d2:	2001      	movs	r0, #1
    87d4:	4b01      	ldr	r3, [pc, #4]	; (87dc <TC4_Handler+0xc>)
    87d6:	4798      	blx	r3
    87d8:	bd10      	pop	{r4, pc}
    87da:	46c0      	nop			; (mov r8, r8)
    87dc:	0000875d 	.word	0x0000875d

000087e0 <TC5_Handler>:
    87e0:	b510      	push	{r4, lr}
    87e2:	2002      	movs	r0, #2
    87e4:	4b01      	ldr	r3, [pc, #4]	; (87ec <TC5_Handler+0xc>)
    87e6:	4798      	blx	r3
    87e8:	bd10      	pop	{r4, pc}
    87ea:	46c0      	nop			; (mov r8, r8)
    87ec:	0000875d 	.word	0x0000875d

000087f0 <_tc_get_inst_index>:
 *
 * \return Index of the given TC module instance.
 */
uint8_t _tc_get_inst_index(
		Tc *const hw)
{
    87f0:	b530      	push	{r4, r5, lr}
    87f2:	b085      	sub	sp, #20
	/* List of available TC modules. */
	Tc *const tc_modules[TC_INST_NUM] = TC_INSTS;
    87f4:	aa01      	add	r2, sp, #4
    87f6:	4b0b      	ldr	r3, [pc, #44]	; (8824 <_tc_get_inst_index+0x34>)
    87f8:	cb32      	ldmia	r3!, {r1, r4, r5}
    87fa:	c232      	stmia	r2!, {r1, r4, r5}

	/* Find index for TC instance. */
	for (uint32_t i = 0; i < TC_INST_NUM; i++) {
		if (hw == tc_modules[i]) {
    87fc:	9b01      	ldr	r3, [sp, #4]
    87fe:	4298      	cmp	r0, r3
    8800:	d00d      	beq.n	881e <_tc_get_inst_index+0x2e>
    8802:	9b02      	ldr	r3, [sp, #8]
    8804:	4298      	cmp	r0, r3
    8806:	d008      	beq.n	881a <_tc_get_inst_index+0x2a>
		}
	}

	/* Invalid data given. */
	Assert(false);
	return 0;
    8808:	2300      	movs	r3, #0
		if (hw == tc_modules[i]) {
    880a:	9a03      	ldr	r2, [sp, #12]
    880c:	4282      	cmp	r2, r0
    880e:	d002      	beq.n	8816 <_tc_get_inst_index+0x26>
}
    8810:	0018      	movs	r0, r3
    8812:	b005      	add	sp, #20
    8814:	bd30      	pop	{r4, r5, pc}
	for (uint32_t i = 0; i < TC_INST_NUM; i++) {
    8816:	3302      	adds	r3, #2
    8818:	e002      	b.n	8820 <_tc_get_inst_index+0x30>
    881a:	2301      	movs	r3, #1
    881c:	e000      	b.n	8820 <_tc_get_inst_index+0x30>
    881e:	2300      	movs	r3, #0
			return i;
    8820:	b2db      	uxtb	r3, r3
    8822:	e7f5      	b.n	8810 <_tc_get_inst_index+0x20>
    8824:	00015fcc 	.word	0x00015fcc

00008828 <tc_init>:
 */
enum status_code tc_init(
		struct tc_module *const module_inst,
		Tc *const hw,
		const struct tc_config *const config)
{
    8828:	b5f0      	push	{r4, r5, r6, r7, lr}
    882a:	b087      	sub	sp, #28
    882c:	0004      	movs	r4, r0
    882e:	000d      	movs	r5, r1
    8830:	0016      	movs	r6, r2
	uint8_t ctrlbset_tmp = 0;
	/* Temporary variable to hold all updates to the CTRLC
	 * register before they are written to it */
	uint8_t ctrlc_tmp = 0;
	/* Temporary variable to hold TC instance number */
	uint8_t instance = _tc_get_inst_index(hw);
    8832:	0008      	movs	r0, r1
    8834:	4b85      	ldr	r3, [pc, #532]	; (8a4c <tc_init+0x224>)
    8836:	4798      	blx	r3
    8838:	0007      	movs	r7, r0

	/* Array of GLCK ID for different TC instances */
	uint8_t inst_gclk_id[] = TC_INST_GCLK_ID;
    883a:	ab05      	add	r3, sp, #20
    883c:	221b      	movs	r2, #27
    883e:	701a      	strb	r2, [r3, #0]
    8840:	3201      	adds	r2, #1
    8842:	705a      	strb	r2, [r3, #1]
    8844:	709a      	strb	r2, [r3, #2]
	/* Array of PM APBC mask bit position for different TC instances */
	uint16_t inst_pm_apbmask[] = TC_INST_PM_APBCMASK;
    8846:	ab03      	add	r3, sp, #12
    8848:	2280      	movs	r2, #128	; 0x80
    884a:	0112      	lsls	r2, r2, #4
    884c:	801a      	strh	r2, [r3, #0]
    884e:	2280      	movs	r2, #128	; 0x80
    8850:	0152      	lsls	r2, r2, #5
    8852:	805a      	strh	r2, [r3, #2]
    8854:	2280      	movs	r2, #128	; 0x80
    8856:	0192      	lsls	r2, r2, #6
    8858:	809a      	strh	r2, [r3, #4]
	struct system_gclk_chan_config gclk_chan_config;

#if TC_ASYNC == true
	/* Initialize parameters */
	for (uint8_t i = 0; i < TC_CALLBACK_N; i++) {
		module_inst->callback[i]        = NULL;
    885a:	2300      	movs	r3, #0
    885c:	60a3      	str	r3, [r4, #8]
    885e:	60e3      	str	r3, [r4, #12]
    8860:	6123      	str	r3, [r4, #16]
    8862:	6163      	str	r3, [r4, #20]
	}
	module_inst->register_callback_mask     = 0x00;
    8864:	7623      	strb	r3, [r4, #24]
	module_inst->enable_callback_mask       = 0x00;
    8866:	7663      	strb	r3, [r4, #25]

	/* Register this instance for callbacks*/
	_tc_instances[instance] = module_inst;
    8868:	0082      	lsls	r2, r0, #2
    886a:	4b79      	ldr	r3, [pc, #484]	; (8a50 <tc_init+0x228>)
    886c:	50d4      	str	r4, [r2, r3]
#endif

	/* Associate the given device instance with the hardware module */
	module_inst->hw = hw;
    886e:	6025      	str	r5, [r4, #0]
#else
	/* Check if odd numbered TC modules are being configured in 32-bit
	 * counter size. Only even numbered counters are allowed to be
	 * configured in 32-bit counter size.
	 */
	if ((config->counter_size == TC_COUNTER_SIZE_32BIT) &&
    8870:	78b3      	ldrb	r3, [r6, #2]
    8872:	2b08      	cmp	r3, #8
    8874:	d006      	beq.n	8884 <tc_init+0x5c>
#endif

	/* Make the counter size variable in the module_inst struct reflect
	 * the counter size in the module
	 */
	module_inst->counter_size = config->counter_size;
    8876:	7123      	strb	r3, [r4, #4]

	if (hw->COUNT8.CTRLA.reg & TC_CTRLA_SWRST) {
    8878:	882b      	ldrh	r3, [r5, #0]
		/* We are in the middle of a reset. Abort. */
		return STATUS_BUSY;
    887a:	2005      	movs	r0, #5
	if (hw->COUNT8.CTRLA.reg & TC_CTRLA_SWRST) {
    887c:	07db      	lsls	r3, r3, #31
    887e:	d505      	bpl.n	888c <tc_init+0x64>
			return STATUS_OK;
	}

	Assert(false);
	return STATUS_ERR_INVALID_ARG;
}
    8880:	b007      	add	sp, #28
    8882:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return STATUS_ERR_INVALID_ARG;
    8884:	2017      	movs	r0, #23
	if ((config->counter_size == TC_COUNTER_SIZE_32BIT) &&
    8886:	07fa      	lsls	r2, r7, #31
    8888:	d5fa      	bpl.n	8880 <tc_init+0x58>
    888a:	e7f4      	b.n	8876 <tc_init+0x4e>
	if (hw->COUNT8.STATUS.reg & TC_STATUS_SLAVE) {
    888c:	7beb      	ldrb	r3, [r5, #15]
		return STATUS_ERR_DENIED;
    888e:	3017      	adds	r0, #23
	if (hw->COUNT8.STATUS.reg & TC_STATUS_SLAVE) {
    8890:	06db      	lsls	r3, r3, #27
    8892:	d4f5      	bmi.n	8880 <tc_init+0x58>
	if (hw->COUNT8.CTRLA.reg & TC_CTRLA_ENABLE) {
    8894:	882b      	ldrh	r3, [r5, #0]
    8896:	079b      	lsls	r3, r3, #30
    8898:	d4f2      	bmi.n	8880 <tc_init+0x58>
	if (config->pwm_channel[0].enabled) {
    889a:	7c33      	ldrb	r3, [r6, #16]
    889c:	2b00      	cmp	r3, #0
    889e:	d179      	bne.n	8994 <tc_init+0x16c>
	if (config->pwm_channel[1].enabled) {
    88a0:	7f33      	ldrb	r3, [r6, #28]
    88a2:	2b00      	cmp	r3, #0
    88a4:	d000      	beq.n	88a8 <tc_init+0x80>
    88a6:	e081      	b.n	89ac <tc_init+0x184>
			PM->APBCMASK.reg |= mask;
    88a8:	496a      	ldr	r1, [pc, #424]	; (8a54 <tc_init+0x22c>)
    88aa:	6a08      	ldr	r0, [r1, #32]
			inst_pm_apbmask[instance]);
    88ac:	007a      	lsls	r2, r7, #1
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC,
    88ae:	ab03      	add	r3, sp, #12
    88b0:	5ad3      	ldrh	r3, [r2, r3]
    88b2:	4303      	orrs	r3, r0
    88b4:	620b      	str	r3, [r1, #32]
	if ((config->counter_size == TC_COUNTER_SIZE_32BIT))
    88b6:	78b3      	ldrb	r3, [r6, #2]
    88b8:	2b08      	cmp	r3, #8
    88ba:	d100      	bne.n	88be <tc_init+0x96>
    88bc:	e086      	b.n	89cc <tc_init+0x1a4>
	gclk_chan_config.source_generator = config->clock_source;
    88be:	a901      	add	r1, sp, #4
    88c0:	7833      	ldrb	r3, [r6, #0]
    88c2:	700b      	strb	r3, [r1, #0]
	system_gclk_chan_set_config(inst_gclk_id[instance], &gclk_chan_config);
    88c4:	ab05      	add	r3, sp, #20
    88c6:	5ddf      	ldrb	r7, [r3, r7]
    88c8:	0038      	movs	r0, r7
    88ca:	4b63      	ldr	r3, [pc, #396]	; (8a58 <tc_init+0x230>)
    88cc:	4798      	blx	r3
	system_gclk_chan_enable(inst_gclk_id[instance]);
    88ce:	0038      	movs	r0, r7
    88d0:	4b62      	ldr	r3, [pc, #392]	; (8a5c <tc_init+0x234>)
    88d2:	4798      	blx	r3
	ctrla_tmp =
    88d4:	8931      	ldrh	r1, [r6, #8]
    88d6:	88b3      	ldrh	r3, [r6, #4]
    88d8:	430b      	orrs	r3, r1
			(uint32_t)config->wave_generation |
    88da:	78b1      	ldrb	r1, [r6, #2]
    88dc:	79b2      	ldrb	r2, [r6, #6]
    88de:	4311      	orrs	r1, r2
	ctrla_tmp =
    88e0:	4319      	orrs	r1, r3
	if (config->run_in_standby) {
    88e2:	7873      	ldrb	r3, [r6, #1]
    88e4:	2b00      	cmp	r3, #0
    88e6:	d002      	beq.n	88ee <tc_init+0xc6>
		ctrla_tmp |= TC_CTRLA_RUNSTDBY;
    88e8:	2380      	movs	r3, #128	; 0x80
    88ea:	011b      	lsls	r3, r3, #4
    88ec:	4319      	orrs	r1, r3
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    88ee:	6822      	ldr	r2, [r4, #0]

#if (SAML21) || (SAML22) || (SAMC20) || (SAMC21) || (SAMR30) || (SAMR34) || (SAMR35)
	return (tc_module->SYNCBUSY.reg);
#else
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
    88f0:	7bd3      	ldrb	r3, [r2, #15]
	while (tc_is_syncing(module_inst)) {
    88f2:	b25b      	sxtb	r3, r3
    88f4:	2b00      	cmp	r3, #0
    88f6:	dbfb      	blt.n	88f0 <tc_init+0xc8>
	hw->COUNT8.CTRLA.reg = ctrla_tmp;
    88f8:	8029      	strh	r1, [r5, #0]
	if (config->oneshot) {
    88fa:	7b71      	ldrb	r1, [r6, #13]
		ctrlbset_tmp = TC_CTRLBSET_ONESHOT;
    88fc:	1e4b      	subs	r3, r1, #1
    88fe:	4199      	sbcs	r1, r3
    8900:	0089      	lsls	r1, r1, #2
	if (config->count_direction) {
    8902:	7bb3      	ldrb	r3, [r6, #14]
    8904:	2b00      	cmp	r3, #0
    8906:	d001      	beq.n	890c <tc_init+0xe4>
		ctrlbset_tmp |= TC_CTRLBSET_DIR;
    8908:	2301      	movs	r3, #1
    890a:	4319      	orrs	r1, r3
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    890c:	6822      	ldr	r2, [r4, #0]
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
    890e:	7bd3      	ldrb	r3, [r2, #15]
	while (tc_is_syncing(module_inst)) {
    8910:	b25b      	sxtb	r3, r3
    8912:	2b00      	cmp	r3, #0
    8914:	dbfb      	blt.n	890e <tc_init+0xe6>
	hw->COUNT8.CTRLBCLR.reg = 0xFF;
    8916:	23ff      	movs	r3, #255	; 0xff
    8918:	712b      	strb	r3, [r5, #4]
	if (ctrlbset_tmp) {
    891a:	2900      	cmp	r1, #0
    891c:	d005      	beq.n	892a <tc_init+0x102>
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    891e:	6822      	ldr	r2, [r4, #0]
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
    8920:	7bd3      	ldrb	r3, [r2, #15]
		while (tc_is_syncing(module_inst)) {
    8922:	b25b      	sxtb	r3, r3
    8924:	2b00      	cmp	r3, #0
    8926:	dbfb      	blt.n	8920 <tc_init+0xf8>
		hw->COUNT8.CTRLBSET.reg = ctrlbset_tmp;
    8928:	7169      	strb	r1, [r5, #5]
	ctrlc_tmp = config->waveform_invert_output;
    892a:	7ab1      	ldrb	r1, [r6, #10]
		if (config->enable_capture_on_channel[i] == true) {
    892c:	7af3      	ldrb	r3, [r6, #11]
    892e:	2b00      	cmp	r3, #0
    8930:	d001      	beq.n	8936 <tc_init+0x10e>
			ctrlc_tmp |= (TC_CTRLC_CPTEN(1) << i);
    8932:	2310      	movs	r3, #16
    8934:	4319      	orrs	r1, r3
		if (config->enable_capture_on_channel[i] == true) {
    8936:	7b33      	ldrb	r3, [r6, #12]
    8938:	2b00      	cmp	r3, #0
    893a:	d001      	beq.n	8940 <tc_init+0x118>
			ctrlc_tmp |= (TC_CTRLC_CPTEN(1) << i);
    893c:	2320      	movs	r3, #32
    893e:	4319      	orrs	r1, r3
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    8940:	6822      	ldr	r2, [r4, #0]
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
    8942:	7bd3      	ldrb	r3, [r2, #15]
	while (tc_is_syncing(module_inst)) {
    8944:	b25b      	sxtb	r3, r3
    8946:	2b00      	cmp	r3, #0
    8948:	dbfb      	blt.n	8942 <tc_init+0x11a>
	hw->COUNT8.CTRLC.reg = ctrlc_tmp;
    894a:	71a9      	strb	r1, [r5, #6]
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    894c:	6822      	ldr	r2, [r4, #0]
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
    894e:	7bd3      	ldrb	r3, [r2, #15]
	while (tc_is_syncing(module_inst)) {
    8950:	b25b      	sxtb	r3, r3
    8952:	2b00      	cmp	r3, #0
    8954:	dbfb      	blt.n	894e <tc_init+0x126>
	switch (module_inst->counter_size) {
    8956:	7923      	ldrb	r3, [r4, #4]
    8958:	2b04      	cmp	r3, #4
    895a:	d03f      	beq.n	89dc <tc_init+0x1b4>
    895c:	2b08      	cmp	r3, #8
    895e:	d05e      	beq.n	8a1e <tc_init+0x1f6>
	return STATUS_ERR_INVALID_ARG;
    8960:	2017      	movs	r0, #23
	switch (module_inst->counter_size) {
    8962:	2b00      	cmp	r3, #0
    8964:	d000      	beq.n	8968 <tc_init+0x140>
    8966:	e78b      	b.n	8880 <tc_init+0x58>
    8968:	7bd3      	ldrb	r3, [r2, #15]
			while (tc_is_syncing(module_inst)) {
    896a:	b25b      	sxtb	r3, r3
    896c:	2b00      	cmp	r3, #0
    896e:	dbfb      	blt.n	8968 <tc_init+0x140>
				= config->counter_16_bit.value;
    8970:	8d33      	ldrh	r3, [r6, #40]	; 0x28
    8972:	822b      	strh	r3, [r5, #16]
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    8974:	6822      	ldr	r2, [r4, #0]
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
    8976:	7bd3      	ldrb	r3, [r2, #15]
			while (tc_is_syncing(module_inst)) {
    8978:	b25b      	sxtb	r3, r3
    897a:	2b00      	cmp	r3, #0
    897c:	dbfb      	blt.n	8976 <tc_init+0x14e>
					config->counter_16_bit.compare_capture_channel[0];
    897e:	8d73      	ldrh	r3, [r6, #42]	; 0x2a
			hw->COUNT16.CC[0].reg =
    8980:	832b      	strh	r3, [r5, #24]
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    8982:	6822      	ldr	r2, [r4, #0]
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
    8984:	7bd3      	ldrb	r3, [r2, #15]
			while (tc_is_syncing(module_inst)) {
    8986:	b25b      	sxtb	r3, r3
    8988:	2b00      	cmp	r3, #0
    898a:	dbfb      	blt.n	8984 <tc_init+0x15c>
					config->counter_16_bit.compare_capture_channel[1];
    898c:	8db3      	ldrh	r3, [r6, #44]	; 0x2c
			hw->COUNT16.CC[1].reg =
    898e:	836b      	strh	r3, [r5, #26]
			return STATUS_OK;
    8990:	2000      	movs	r0, #0
    8992:	e775      	b.n	8880 <tc_init+0x58>
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
    8994:	a902      	add	r1, sp, #8
    8996:	2301      	movs	r3, #1
    8998:	708b      	strb	r3, [r1, #2]
	config->powersave    = false;
    899a:	2200      	movs	r2, #0
    899c:	70ca      	strb	r2, [r1, #3]
		pin_config.mux_position = config->pwm_channel[0].pin_mux;
    899e:	7e32      	ldrb	r2, [r6, #24]
    89a0:	700a      	strb	r2, [r1, #0]
		pin_config.direction = SYSTEM_PINMUX_PIN_DIR_OUTPUT;
    89a2:	704b      	strb	r3, [r1, #1]
		system_pinmux_pin_set_config(
    89a4:	7d30      	ldrb	r0, [r6, #20]
    89a6:	4b2e      	ldr	r3, [pc, #184]	; (8a60 <tc_init+0x238>)
    89a8:	4798      	blx	r3
    89aa:	e779      	b.n	88a0 <tc_init+0x78>
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
    89ac:	a902      	add	r1, sp, #8
    89ae:	2301      	movs	r3, #1
    89b0:	708b      	strb	r3, [r1, #2]
	config->powersave    = false;
    89b2:	2200      	movs	r2, #0
    89b4:	70ca      	strb	r2, [r1, #3]
		pin_config.mux_position = config->pwm_channel[1].pin_mux;
    89b6:	3224      	adds	r2, #36	; 0x24
    89b8:	18b2      	adds	r2, r6, r2
    89ba:	7812      	ldrb	r2, [r2, #0]
    89bc:	700a      	strb	r2, [r1, #0]
		pin_config.direction = SYSTEM_PINMUX_PIN_DIR_OUTPUT;
    89be:	704b      	strb	r3, [r1, #1]
		system_pinmux_pin_set_config(
    89c0:	331f      	adds	r3, #31
    89c2:	18f3      	adds	r3, r6, r3
    89c4:	7818      	ldrb	r0, [r3, #0]
    89c6:	4b26      	ldr	r3, [pc, #152]	; (8a60 <tc_init+0x238>)
    89c8:	4798      	blx	r3
    89ca:	e76d      	b.n	88a8 <tc_init+0x80>
    89cc:	6a08      	ldr	r0, [r1, #32]
				inst_pm_apbmask[instance + 1]);
    89ce:	1c7a      	adds	r2, r7, #1
    89d0:	0052      	lsls	r2, r2, #1
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC,
    89d2:	ab03      	add	r3, sp, #12
    89d4:	5ad3      	ldrh	r3, [r2, r3]
    89d6:	4303      	orrs	r3, r0
    89d8:	620b      	str	r3, [r1, #32]
    89da:	e770      	b.n	88be <tc_init+0x96>
    89dc:	7bd3      	ldrb	r3, [r2, #15]
			while (tc_is_syncing(module_inst)) {
    89de:	b25b      	sxtb	r3, r3
    89e0:	2b00      	cmp	r3, #0
    89e2:	dbfb      	blt.n	89dc <tc_init+0x1b4>
					config->counter_8_bit.value;
    89e4:	2328      	movs	r3, #40	; 0x28
    89e6:	5cf3      	ldrb	r3, [r6, r3]
			hw->COUNT8.COUNT.reg =
    89e8:	742b      	strb	r3, [r5, #16]
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    89ea:	6822      	ldr	r2, [r4, #0]
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
    89ec:	7bd3      	ldrb	r3, [r2, #15]
			while (tc_is_syncing(module_inst)) {
    89ee:	b25b      	sxtb	r3, r3
    89f0:	2b00      	cmp	r3, #0
    89f2:	dbfb      	blt.n	89ec <tc_init+0x1c4>
					config->counter_8_bit.period;
    89f4:	2329      	movs	r3, #41	; 0x29
    89f6:	5cf3      	ldrb	r3, [r6, r3]
			hw->COUNT8.PER.reg =
    89f8:	752b      	strb	r3, [r5, #20]
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    89fa:	6822      	ldr	r2, [r4, #0]
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
    89fc:	7bd3      	ldrb	r3, [r2, #15]
			while (tc_is_syncing(module_inst)) {
    89fe:	b25b      	sxtb	r3, r3
    8a00:	2b00      	cmp	r3, #0
    8a02:	dbfb      	blt.n	89fc <tc_init+0x1d4>
					config->counter_8_bit.compare_capture_channel[0];
    8a04:	232a      	movs	r3, #42	; 0x2a
    8a06:	5cf3      	ldrb	r3, [r6, r3]
			hw->COUNT8.CC[0].reg =
    8a08:	762b      	strb	r3, [r5, #24]
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    8a0a:	6822      	ldr	r2, [r4, #0]
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
    8a0c:	7bd3      	ldrb	r3, [r2, #15]
			while (tc_is_syncing(module_inst)) {
    8a0e:	b25b      	sxtb	r3, r3
    8a10:	2b00      	cmp	r3, #0
    8a12:	dbfb      	blt.n	8a0c <tc_init+0x1e4>
					config->counter_8_bit.compare_capture_channel[1];
    8a14:	232b      	movs	r3, #43	; 0x2b
    8a16:	5cf3      	ldrb	r3, [r6, r3]
			hw->COUNT8.CC[1].reg =
    8a18:	766b      	strb	r3, [r5, #25]
			return STATUS_OK;
    8a1a:	2000      	movs	r0, #0
    8a1c:	e730      	b.n	8880 <tc_init+0x58>
    8a1e:	7bd3      	ldrb	r3, [r2, #15]
			while (tc_is_syncing(module_inst)) {
    8a20:	b25b      	sxtb	r3, r3
    8a22:	2b00      	cmp	r3, #0
    8a24:	dbfb      	blt.n	8a1e <tc_init+0x1f6>
				= config->counter_32_bit.value;
    8a26:	6ab3      	ldr	r3, [r6, #40]	; 0x28
    8a28:	612b      	str	r3, [r5, #16]
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    8a2a:	6822      	ldr	r2, [r4, #0]
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
    8a2c:	7bd3      	ldrb	r3, [r2, #15]
			while (tc_is_syncing(module_inst)) {
    8a2e:	b25b      	sxtb	r3, r3
    8a30:	2b00      	cmp	r3, #0
    8a32:	dbfb      	blt.n	8a2c <tc_init+0x204>
			hw->COUNT32.CC[0].reg =
    8a34:	6af3      	ldr	r3, [r6, #44]	; 0x2c
    8a36:	61ab      	str	r3, [r5, #24]
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    8a38:	6822      	ldr	r2, [r4, #0]
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
    8a3a:	7bd3      	ldrb	r3, [r2, #15]
			while (tc_is_syncing(module_inst)) {
    8a3c:	b25b      	sxtb	r3, r3
    8a3e:	2b00      	cmp	r3, #0
    8a40:	dbfb      	blt.n	8a3a <tc_init+0x212>
					config->counter_32_bit.compare_capture_channel[1];
    8a42:	6b33      	ldr	r3, [r6, #48]	; 0x30
			hw->COUNT32.CC[1].reg =
    8a44:	61eb      	str	r3, [r5, #28]
			return STATUS_OK;
    8a46:	2000      	movs	r0, #0
    8a48:	e71a      	b.n	8880 <tc_init+0x58>
    8a4a:	46c0      	nop			; (mov r8, r8)
    8a4c:	000087f1 	.word	0x000087f1
    8a50:	20001d98 	.word	0x20001d98
    8a54:	40000400 	.word	0x40000400
    8a58:	000085d1 	.word	0x000085d1
    8a5c:	00008545 	.word	0x00008545
    8a60:	000086c9 	.word	0x000086c9

00008a64 <tc_get_count_value>:
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	Tc *const tc_module = module_inst->hw;
    8a64:	6802      	ldr	r2, [r0, #0]
    8a66:	7bd3      	ldrb	r3, [r2, #15]

	while (tc_is_syncing(module_inst)) {
    8a68:	b25b      	sxtb	r3, r3
    8a6a:	2b00      	cmp	r3, #0
    8a6c:	dbfb      	blt.n	8a66 <tc_get_count_value+0x2>
		/* Wait for sync */
	}

	/* Read from based on the TC counter size */
	switch (module_inst->counter_size) {
    8a6e:	7903      	ldrb	r3, [r0, #4]
    8a70:	2b04      	cmp	r3, #4
    8a72:	d005      	beq.n	8a80 <tc_get_count_value+0x1c>
    8a74:	2b08      	cmp	r3, #8
    8a76:	d009      	beq.n	8a8c <tc_get_count_value+0x28>
		case TC_COUNTER_SIZE_32BIT:
			return tc_module->COUNT32.COUNT.reg;
	}

	Assert(false);
	return 0;
    8a78:	2000      	movs	r0, #0
	switch (module_inst->counter_size) {
    8a7a:	2b00      	cmp	r3, #0
    8a7c:	d003      	beq.n	8a86 <tc_get_count_value+0x22>
}
    8a7e:	4770      	bx	lr
			return (uint32_t)tc_module->COUNT8.COUNT.reg;
    8a80:	7c10      	ldrb	r0, [r2, #16]
    8a82:	b2c0      	uxtb	r0, r0
    8a84:	e7fb      	b.n	8a7e <tc_get_count_value+0x1a>
			return (uint32_t)tc_module->COUNT16.COUNT.reg;
    8a86:	8a10      	ldrh	r0, [r2, #16]
    8a88:	b280      	uxth	r0, r0
    8a8a:	e7f8      	b.n	8a7e <tc_get_count_value+0x1a>
			return tc_module->COUNT32.COUNT.reg;
    8a8c:	6910      	ldr	r0, [r2, #16]
    8a8e:	e7f6      	b.n	8a7e <tc_get_count_value+0x1a>

00008a90 <tc_set_compare_value>:
 */
enum status_code tc_set_compare_value(
		const struct tc_module *const module_inst,
		const enum tc_compare_capture_channel channel_index,
		const uint32_t compare)
{
    8a90:	b510      	push	{r4, lr}
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	Tc *const tc_module = module_inst->hw;
    8a92:	6804      	ldr	r4, [r0, #0]
    8a94:	7be3      	ldrb	r3, [r4, #15]

	while (tc_is_syncing(module_inst)) {
    8a96:	b25b      	sxtb	r3, r3
    8a98:	2b00      	cmp	r3, #0
    8a9a:	dbfb      	blt.n	8a94 <tc_set_compare_value+0x4>
		/* Wait for sync */
	}

	/* Read out based on the TC counter size */
	switch (module_inst->counter_size) {
    8a9c:	7903      	ldrb	r3, [r0, #4]
    8a9e:	2b04      	cmp	r3, #4
    8aa0:	d005      	beq.n	8aae <tc_set_compare_value+0x1e>
    8aa2:	2b08      	cmp	r3, #8
    8aa4:	d014      	beq.n	8ad0 <tc_set_compare_value+0x40>
						(uint32_t)compare;
				return STATUS_OK;
			}
	}

	return STATUS_ERR_INVALID_ARG;
    8aa6:	2017      	movs	r0, #23
	switch (module_inst->counter_size) {
    8aa8:	2b00      	cmp	r3, #0
    8aaa:	d008      	beq.n	8abe <tc_set_compare_value+0x2e>
}
    8aac:	bd10      	pop	{r4, pc}
	return STATUS_ERR_INVALID_ARG;
    8aae:	2017      	movs	r0, #23
			if (channel_index <
    8ab0:	2901      	cmp	r1, #1
    8ab2:	d8fb      	bhi.n	8aac <tc_set_compare_value+0x1c>
						(uint8_t)compare;
    8ab4:	b2d2      	uxtb	r2, r2
				tc_module->COUNT8.CC[channel_index].reg  =
    8ab6:	1861      	adds	r1, r4, r1
    8ab8:	760a      	strb	r2, [r1, #24]
				return STATUS_OK;
    8aba:	2000      	movs	r0, #0
    8abc:	e7f6      	b.n	8aac <tc_set_compare_value+0x1c>
	return STATUS_ERR_INVALID_ARG;
    8abe:	2017      	movs	r0, #23
			if (channel_index <
    8ac0:	2901      	cmp	r1, #1
    8ac2:	d8f3      	bhi.n	8aac <tc_set_compare_value+0x1c>
						(uint16_t)compare;
    8ac4:	b292      	uxth	r2, r2
				tc_module->COUNT16.CC[channel_index].reg =
    8ac6:	310c      	adds	r1, #12
    8ac8:	0049      	lsls	r1, r1, #1
    8aca:	530a      	strh	r2, [r1, r4]
				return STATUS_OK;
    8acc:	2000      	movs	r0, #0
    8ace:	e7ed      	b.n	8aac <tc_set_compare_value+0x1c>
	return STATUS_ERR_INVALID_ARG;
    8ad0:	2017      	movs	r0, #23
			if (channel_index <
    8ad2:	2901      	cmp	r1, #1
    8ad4:	d8ea      	bhi.n	8aac <tc_set_compare_value+0x1c>
				tc_module->COUNT32.CC[channel_index].reg =
    8ad6:	3106      	adds	r1, #6
    8ad8:	0089      	lsls	r1, r1, #2
    8ada:	510a      	str	r2, [r1, r4]
				return STATUS_OK;
    8adc:	2000      	movs	r0, #0
    8ade:	e7e5      	b.n	8aac <tc_set_compare_value+0x1c>

00008ae0 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
    8ae0:	e7fe      	b.n	8ae0 <Dummy_Handler>
    8ae2:	Address 0x00008ae2 is out of bounds.


00008ae4 <Reset_Handler>:
{
    8ae4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
        if (pSrc != pDest) {
    8ae6:	4a2a      	ldr	r2, [pc, #168]	; (8b90 <Reset_Handler+0xac>)
    8ae8:	4b2a      	ldr	r3, [pc, #168]	; (8b94 <Reset_Handler+0xb0>)
    8aea:	429a      	cmp	r2, r3
    8aec:	d011      	beq.n	8b12 <Reset_Handler+0x2e>
                for (; pDest < &_erelocate;) {
    8aee:	001a      	movs	r2, r3
    8af0:	4b29      	ldr	r3, [pc, #164]	; (8b98 <Reset_Handler+0xb4>)
    8af2:	429a      	cmp	r2, r3
    8af4:	d20d      	bcs.n	8b12 <Reset_Handler+0x2e>
    8af6:	4a29      	ldr	r2, [pc, #164]	; (8b9c <Reset_Handler+0xb8>)
    8af8:	3303      	adds	r3, #3
    8afa:	1a9b      	subs	r3, r3, r2
    8afc:	089b      	lsrs	r3, r3, #2
    8afe:	3301      	adds	r3, #1
    8b00:	009b      	lsls	r3, r3, #2
    8b02:	2200      	movs	r2, #0
                        *pDest++ = *pSrc++;
    8b04:	4823      	ldr	r0, [pc, #140]	; (8b94 <Reset_Handler+0xb0>)
    8b06:	4922      	ldr	r1, [pc, #136]	; (8b90 <Reset_Handler+0xac>)
    8b08:	588c      	ldr	r4, [r1, r2]
    8b0a:	5084      	str	r4, [r0, r2]
    8b0c:	3204      	adds	r2, #4
                for (; pDest < &_erelocate;) {
    8b0e:	429a      	cmp	r2, r3
    8b10:	d1fa      	bne.n	8b08 <Reset_Handler+0x24>
        for (pDest = &_szero; pDest < &_ezero;) {
    8b12:	4a23      	ldr	r2, [pc, #140]	; (8ba0 <Reset_Handler+0xbc>)
    8b14:	4b23      	ldr	r3, [pc, #140]	; (8ba4 <Reset_Handler+0xc0>)
    8b16:	429a      	cmp	r2, r3
    8b18:	d20a      	bcs.n	8b30 <Reset_Handler+0x4c>
    8b1a:	43d3      	mvns	r3, r2
    8b1c:	4921      	ldr	r1, [pc, #132]	; (8ba4 <Reset_Handler+0xc0>)
    8b1e:	185b      	adds	r3, r3, r1
    8b20:	2103      	movs	r1, #3
    8b22:	438b      	bics	r3, r1
    8b24:	3304      	adds	r3, #4
    8b26:	189b      	adds	r3, r3, r2
                *pDest++ = 0;
    8b28:	2100      	movs	r1, #0
    8b2a:	c202      	stmia	r2!, {r1}
        for (pDest = &_szero; pDest < &_ezero;) {
    8b2c:	4293      	cmp	r3, r2
    8b2e:	d1fc      	bne.n	8b2a <Reset_Handler+0x46>
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
    8b30:	4a1d      	ldr	r2, [pc, #116]	; (8ba8 <Reset_Handler+0xc4>)
    8b32:	21ff      	movs	r1, #255	; 0xff
    8b34:	4b1d      	ldr	r3, [pc, #116]	; (8bac <Reset_Handler+0xc8>)
    8b36:	438b      	bics	r3, r1
    8b38:	6093      	str	r3, [r2, #8]
        SBMATRIX->SFR[SBMATRIX_SLAVE_HMCRAMC0].reg = 2;
    8b3a:	39fd      	subs	r1, #253	; 0xfd
    8b3c:	2390      	movs	r3, #144	; 0x90
    8b3e:	005b      	lsls	r3, r3, #1
    8b40:	4a1b      	ldr	r2, [pc, #108]	; (8bb0 <Reset_Handler+0xcc>)
    8b42:	50d1      	str	r1, [r2, r3]
        USB->DEVICE.QOSCTRL.bit.CQOS = 2;
    8b44:	4a1b      	ldr	r2, [pc, #108]	; (8bb4 <Reset_Handler+0xd0>)
    8b46:	78d3      	ldrb	r3, [r2, #3]
    8b48:	2503      	movs	r5, #3
    8b4a:	43ab      	bics	r3, r5
    8b4c:	2402      	movs	r4, #2
    8b4e:	4323      	orrs	r3, r4
    8b50:	70d3      	strb	r3, [r2, #3]
        USB->DEVICE.QOSCTRL.bit.DQOS = 2;
    8b52:	78d3      	ldrb	r3, [r2, #3]
    8b54:	270c      	movs	r7, #12
    8b56:	43bb      	bics	r3, r7
    8b58:	2608      	movs	r6, #8
    8b5a:	4333      	orrs	r3, r6
    8b5c:	70d3      	strb	r3, [r2, #3]
        DMAC->QOSCTRL.bit.DQOS = 2;
    8b5e:	4b16      	ldr	r3, [pc, #88]	; (8bb8 <Reset_Handler+0xd4>)
    8b60:	7b98      	ldrb	r0, [r3, #14]
    8b62:	2230      	movs	r2, #48	; 0x30
    8b64:	4390      	bics	r0, r2
    8b66:	2220      	movs	r2, #32
    8b68:	4310      	orrs	r0, r2
    8b6a:	7398      	strb	r0, [r3, #14]
        DMAC->QOSCTRL.bit.FQOS = 2;
    8b6c:	7b99      	ldrb	r1, [r3, #14]
    8b6e:	43b9      	bics	r1, r7
    8b70:	4331      	orrs	r1, r6
    8b72:	7399      	strb	r1, [r3, #14]
        DMAC->QOSCTRL.bit.WRBQOS = 2;
    8b74:	7b9a      	ldrb	r2, [r3, #14]
    8b76:	43aa      	bics	r2, r5
    8b78:	4322      	orrs	r2, r4
    8b7a:	739a      	strb	r2, [r3, #14]
        NVMCTRL->CTRLB.bit.MANW = 1;
    8b7c:	4a0f      	ldr	r2, [pc, #60]	; (8bbc <Reset_Handler+0xd8>)
    8b7e:	6853      	ldr	r3, [r2, #4]
    8b80:	2180      	movs	r1, #128	; 0x80
    8b82:	430b      	orrs	r3, r1
    8b84:	6053      	str	r3, [r2, #4]
        __libc_init_array();
    8b86:	4b0e      	ldr	r3, [pc, #56]	; (8bc0 <Reset_Handler+0xdc>)
    8b88:	4798      	blx	r3
        main();
    8b8a:	4b0e      	ldr	r3, [pc, #56]	; (8bc4 <Reset_Handler+0xe0>)
    8b8c:	4798      	blx	r3
    8b8e:	e7fe      	b.n	8b8e <Reset_Handler+0xaa>
    8b90:	000168c0 	.word	0x000168c0
    8b94:	20000000 	.word	0x20000000
    8b98:	20000104 	.word	0x20000104
    8b9c:	20000004 	.word	0x20000004
    8ba0:	20000108 	.word	0x20000108
    8ba4:	2000291c 	.word	0x2000291c
    8ba8:	e000ed00 	.word	0xe000ed00
    8bac:	00000000 	.word	0x00000000
    8bb0:	41007000 	.word	0x41007000
    8bb4:	41005000 	.word	0x41005000
    8bb8:	41004800 	.word	0x41004800
    8bbc:	41004000 	.word	0x41004000
    8bc0:	00014c79 	.word	0x00014c79
    8bc4:	0000d111 	.word	0x0000d111

00008bc8 <_read>:
int __attribute__((weak))
_read (int file, char * ptr, int len); // Remove GCC compiler warning

int __attribute__((weak))
_read (int file, char * ptr, int len)
{
    8bc8:	b5f0      	push	{r4, r5, r6, r7, lr}
    8bca:	46c6      	mov	lr, r8
    8bcc:	b500      	push	{lr}
    8bce:	000c      	movs	r4, r1
    8bd0:	4690      	mov	r8, r2
	int nChars = 0;

	if (file != 0) {
    8bd2:	2800      	cmp	r0, #0
    8bd4:	d10f      	bne.n	8bf6 <_read+0x2e>
		return -1;
	}

	for (; len > 0; --len) {
    8bd6:	2a00      	cmp	r2, #0
    8bd8:	dd11      	ble.n	8bfe <_read+0x36>
    8bda:	188f      	adds	r7, r1, r2
		ptr_get(stdio_base, ptr);
    8bdc:	4e09      	ldr	r6, [pc, #36]	; (8c04 <_read+0x3c>)
    8bde:	4d0a      	ldr	r5, [pc, #40]	; (8c08 <_read+0x40>)
    8be0:	6830      	ldr	r0, [r6, #0]
    8be2:	0021      	movs	r1, r4
    8be4:	682b      	ldr	r3, [r5, #0]
    8be6:	4798      	blx	r3
		ptr++;
    8be8:	3401      	adds	r4, #1
	for (; len > 0; --len) {
    8bea:	42bc      	cmp	r4, r7
    8bec:	d1f8      	bne.n	8be0 <_read+0x18>
		nChars++;
	}
	return nChars;
}
    8bee:	4640      	mov	r0, r8
    8bf0:	bc04      	pop	{r2}
    8bf2:	4690      	mov	r8, r2
    8bf4:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return -1;
    8bf6:	2301      	movs	r3, #1
    8bf8:	425b      	negs	r3, r3
    8bfa:	4698      	mov	r8, r3
    8bfc:	e7f7      	b.n	8bee <_read+0x26>
	for (; len > 0; --len) {
    8bfe:	4680      	mov	r8, r0
    8c00:	e7f5      	b.n	8bee <_read+0x26>
    8c02:	46c0      	nop			; (mov r8, r8)
    8c04:	20001dac 	.word	0x20001dac
    8c08:	20001da4 	.word	0x20001da4

00008c0c <_write>:
int __attribute__((weak))
_write (int file, char * ptr, int len);

int __attribute__((weak))
_write (int file, char * ptr, int len)
{
    8c0c:	b5f0      	push	{r4, r5, r6, r7, lr}
    8c0e:	46c6      	mov	lr, r8
    8c10:	b500      	push	{lr}
    8c12:	000e      	movs	r6, r1
    8c14:	0015      	movs	r5, r2
	int nChars = 0;

	if ((file != 1) && (file != 2) && (file!=3)) {
    8c16:	3801      	subs	r0, #1
    8c18:	2802      	cmp	r0, #2
    8c1a:	d810      	bhi.n	8c3e <_write+0x32>
		return -1;
	}

	for (; len != 0; --len) {
    8c1c:	2a00      	cmp	r2, #0
    8c1e:	d011      	beq.n	8c44 <_write+0x38>
    8c20:	2400      	movs	r4, #0
		if (ptr_put(stdio_base, *ptr++) < 0) {
    8c22:	4b0c      	ldr	r3, [pc, #48]	; (8c54 <_write+0x48>)
    8c24:	4698      	mov	r8, r3
    8c26:	4f0c      	ldr	r7, [pc, #48]	; (8c58 <_write+0x4c>)
    8c28:	4643      	mov	r3, r8
    8c2a:	6818      	ldr	r0, [r3, #0]
    8c2c:	5d31      	ldrb	r1, [r6, r4]
    8c2e:	683b      	ldr	r3, [r7, #0]
    8c30:	4798      	blx	r3
    8c32:	2800      	cmp	r0, #0
    8c34:	db08      	blt.n	8c48 <_write+0x3c>
			return -1;
		}
		++nChars;
    8c36:	3401      	adds	r4, #1
	for (; len != 0; --len) {
    8c38:	42a5      	cmp	r5, r4
    8c3a:	d1f5      	bne.n	8c28 <_write+0x1c>
    8c3c:	e006      	b.n	8c4c <_write+0x40>
		return -1;
    8c3e:	2401      	movs	r4, #1
    8c40:	4264      	negs	r4, r4
    8c42:	e003      	b.n	8c4c <_write+0x40>
	for (; len != 0; --len) {
    8c44:	0014      	movs	r4, r2
    8c46:	e001      	b.n	8c4c <_write+0x40>
			return -1;
    8c48:	2401      	movs	r4, #1
    8c4a:	4264      	negs	r4, r4
	}
	return nChars;
}
    8c4c:	0020      	movs	r0, r4
    8c4e:	bc04      	pop	{r2}
    8c50:	4690      	mov	r8, r2
    8c52:	bdf0      	pop	{r4, r5, r6, r7, pc}
    8c54:	20001dac 	.word	0x20001dac
    8c58:	20001da8 	.word	0x20001da8

00008c5c <_sbrk>:
extern void _exit(int status);
extern void _kill(int pid, int sig);
extern int _getpid(void);

extern caddr_t _sbrk(int incr)
{
    8c5c:	0003      	movs	r3, r0
	static unsigned char *heap = NULL;
	unsigned char *prev_heap;

	if (heap == NULL) {
    8c5e:	4a06      	ldr	r2, [pc, #24]	; (8c78 <_sbrk+0x1c>)
    8c60:	6812      	ldr	r2, [r2, #0]
    8c62:	2a00      	cmp	r2, #0
    8c64:	d004      	beq.n	8c70 <_sbrk+0x14>
		heap = (unsigned char *)&_end;
	}
	prev_heap = heap;
    8c66:	4a04      	ldr	r2, [pc, #16]	; (8c78 <_sbrk+0x1c>)
    8c68:	6810      	ldr	r0, [r2, #0]

	heap += incr;
    8c6a:	18c3      	adds	r3, r0, r3
    8c6c:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap;
}
    8c6e:	4770      	bx	lr
		heap = (unsigned char *)&_end;
    8c70:	4902      	ldr	r1, [pc, #8]	; (8c7c <_sbrk+0x20>)
    8c72:	4a01      	ldr	r2, [pc, #4]	; (8c78 <_sbrk+0x1c>)
    8c74:	6011      	str	r1, [r2, #0]
    8c76:	e7f6      	b.n	8c66 <_sbrk+0xa>
    8c78:	20000178 	.word	0x20000178
    8c7c:	20003720 	.word	0x20003720

00008c80 <_close>:
}

extern int _close(int file)
{
	return -1;
}
    8c80:	2001      	movs	r0, #1
    8c82:	4240      	negs	r0, r0
    8c84:	4770      	bx	lr

00008c86 <_fstat>:

extern int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
    8c86:	2380      	movs	r3, #128	; 0x80
    8c88:	019b      	lsls	r3, r3, #6
    8c8a:	604b      	str	r3, [r1, #4]

	return 0;
}
    8c8c:	2000      	movs	r0, #0
    8c8e:	4770      	bx	lr

00008c90 <_isatty>:

extern int _isatty(int file)
{
	return 1;
}
    8c90:	2001      	movs	r0, #1
    8c92:	4770      	bx	lr

00008c94 <_lseek>:

extern int _lseek(int file, int ptr, int dir)
{
	return 0;
}
    8c94:	2000      	movs	r0, #0
    8c96:	4770      	bx	lr

00008c98 <_exit>:

extern void _exit(int status)
{
	asm("BKPT #0");
    8c98:	be00      	bkpt	0x0000
    8c9a:	e7fe      	b.n	8c9a <_exit+0x2>

00008c9c <_kill>:
}

extern void _kill(int pid, int sig)
{
	return;
}
    8c9c:	4770      	bx	lr

00008c9e <_getpid>:

extern int _getpid(void)
{
	return -1;
}
    8c9e:	2001      	movs	r0, #1
    8ca0:	4240      	negs	r0, r0
    8ca2:	4770      	bx	lr

00008ca4 <usart_serial_getchar>:
 * \param[out]    c       Destination for the read character.
 */
static inline void usart_serial_getchar(
		struct usart_module *const module,
		uint8_t *c)
{
    8ca4:	b570      	push	{r4, r5, r6, lr}
    8ca6:	b082      	sub	sp, #8
    8ca8:	0005      	movs	r5, r0
    8caa:	000e      	movs	r6, r1
	uint16_t temp = 0;
    8cac:	2200      	movs	r2, #0
    8cae:	466b      	mov	r3, sp
    8cb0:	80da      	strh	r2, [r3, #6]

	while(STATUS_OK != usart_read_wait(module, &temp));
    8cb2:	4c06      	ldr	r4, [pc, #24]	; (8ccc <usart_serial_getchar+0x28>)
    8cb4:	466b      	mov	r3, sp
    8cb6:	1d99      	adds	r1, r3, #6
    8cb8:	0028      	movs	r0, r5
    8cba:	47a0      	blx	r4
    8cbc:	2800      	cmp	r0, #0
    8cbe:	d1f9      	bne.n	8cb4 <usart_serial_getchar+0x10>

	*c = temp;
    8cc0:	466b      	mov	r3, sp
    8cc2:	3306      	adds	r3, #6
    8cc4:	881b      	ldrh	r3, [r3, #0]
    8cc6:	7033      	strb	r3, [r6, #0]
}
    8cc8:	b002      	add	sp, #8
    8cca:	bd70      	pop	{r4, r5, r6, pc}
    8ccc:	00007bef 	.word	0x00007bef

00008cd0 <usart_serial_putchar>:
{
    8cd0:	b570      	push	{r4, r5, r6, lr}
    8cd2:	0005      	movs	r5, r0
	while(STATUS_OK !=usart_write_wait(module, c));
    8cd4:	b28c      	uxth	r4, r1
    8cd6:	4e03      	ldr	r6, [pc, #12]	; (8ce4 <usart_serial_putchar+0x14>)
    8cd8:	0021      	movs	r1, r4
    8cda:	0028      	movs	r0, r5
    8cdc:	47b0      	blx	r6
    8cde:	2800      	cmp	r0, #0
    8ce0:	d1fa      	bne.n	8cd8 <usart_serial_putchar+0x8>
}
    8ce2:	bd70      	pop	{r4, r5, r6, pc}
    8ce4:	00007bc9 	.word	0x00007bc9

00008ce8 <USART_HOST_ISR_VECT>:
#if SAMD || SAMR21 || SAML21 || SAMR30 || SAMR34 || SAMR35
void USART_HOST_ISR_VECT(uint8_t instance)
#else
USART_HOST_ISR_VECT()
#endif
{
    8ce8:	b510      	push	{r4, lr}
    8cea:	b082      	sub	sp, #8
static inline enum status_code usart_serial_read_packet(
		struct usart_module *const module,
		uint8_t *rx_data,
		uint16_t length)
{
	return usart_read_buffer_wait(module, rx_data, length);
    8cec:	466b      	mov	r3, sp
    8cee:	1ddc      	adds	r4, r3, #7
    8cf0:	2201      	movs	r2, #1
    8cf2:	0021      	movs	r1, r4
    8cf4:	480f      	ldr	r0, [pc, #60]	; (8d34 <USART_HOST_ISR_VECT+0x4c>)
    8cf6:	4b10      	ldr	r3, [pc, #64]	; (8d38 <USART_HOST_ISR_VECT+0x50>)
    8cf8:	4798      	blx	r3
  __ASM volatile ("cpsid i" : : : "memory");
    8cfa:	b672      	cpsid	i
  __ASM volatile ("dmb 0xF":::"memory");
    8cfc:	f3bf 8f5f 	dmb	sy
#else
    usart_serial_read_packet(USART_HOST, &temp, 1);
#endif

	/* Introducing critical section to avoid buffer corruption. */
	cpu_irq_disable();
    8d00:	2200      	movs	r2, #0
    8d02:	4b0e      	ldr	r3, [pc, #56]	; (8d3c <USART_HOST_ISR_VECT+0x54>)
    8d04:	701a      	strb	r2, [r3, #0]

	/* The number of data in the receive buffer is incremented and the
	 * buffer is updated. */

	serial_rx_buf[serial_rx_buf_tail] = temp;
    8d06:	4b0e      	ldr	r3, [pc, #56]	; (8d40 <USART_HOST_ISR_VECT+0x58>)
    8d08:	781b      	ldrb	r3, [r3, #0]
    8d0a:	7821      	ldrb	r1, [r4, #0]
    8d0c:	4a0d      	ldr	r2, [pc, #52]	; (8d44 <USART_HOST_ISR_VECT+0x5c>)
    8d0e:	54d1      	strb	r1, [r2, r3]

	if ((SERIAL_RX_BUF_SIZE_HOST - 1) == serial_rx_buf_tail) {
    8d10:	2b9b      	cmp	r3, #155	; 0x9b
    8d12:	d00a      	beq.n	8d2a <USART_HOST_ISR_VECT+0x42>
		/* Reached the end of buffer, revert back to beginning of
		 * buffer. */
		serial_rx_buf_tail = 0x00;
	} else {
		serial_rx_buf_tail++;
    8d14:	3301      	adds	r3, #1
    8d16:	4a0a      	ldr	r2, [pc, #40]	; (8d40 <USART_HOST_ISR_VECT+0x58>)
    8d18:	7013      	strb	r3, [r2, #0]
	}

	cpu_irq_enable();
    8d1a:	2201      	movs	r2, #1
    8d1c:	4b07      	ldr	r3, [pc, #28]	; (8d3c <USART_HOST_ISR_VECT+0x54>)
    8d1e:	701a      	strb	r2, [r3, #0]
    8d20:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
    8d24:	b662      	cpsie	i
}
    8d26:	b002      	add	sp, #8
    8d28:	bd10      	pop	{r4, pc}
		serial_rx_buf_tail = 0x00;
    8d2a:	2200      	movs	r2, #0
    8d2c:	4b04      	ldr	r3, [pc, #16]	; (8d40 <USART_HOST_ISR_VECT+0x58>)
    8d2e:	701a      	strb	r2, [r3, #0]
    8d30:	e7f3      	b.n	8d1a <USART_HOST_ISR_VECT+0x32>
    8d32:	46c0      	nop			; (mov r8, r8)
    8d34:	2000017c 	.word	0x2000017c
    8d38:	00007c59 	.word	0x00007c59
    8d3c:	20000008 	.word	0x20000008
    8d40:	2000024c 	.word	0x2000024c
    8d44:	200001b0 	.word	0x200001b0

00008d48 <sio2host_init>:
{
    8d48:	b5f0      	push	{r4, r5, r6, r7, lr}
    8d4a:	b091      	sub	sp, #68	; 0x44
{
	/* Sanity check arguments */
	Assert(config);

	/* Set default config in the config struct */
	config->data_order       = USART_DATAORDER_LSB;
    8d4c:	2380      	movs	r3, #128	; 0x80
    8d4e:	05db      	lsls	r3, r3, #23
    8d50:	9300      	str	r3, [sp, #0]
	config->transfer_mode    = USART_TRANSFER_ASYNCHRONOUSLY;
    8d52:	2300      	movs	r3, #0
    8d54:	9301      	str	r3, [sp, #4]
	config->parity           = USART_PARITY_NONE;
    8d56:	22ff      	movs	r2, #255	; 0xff
    8d58:	4669      	mov	r1, sp
    8d5a:	810a      	strh	r2, [r1, #8]
	config->stopbits         = USART_STOPBITS_1;
    8d5c:	2200      	movs	r2, #0
    8d5e:	728b      	strb	r3, [r1, #10]
	config->character_size   = USART_CHARACTER_SIZE_8BIT;
    8d60:	72cb      	strb	r3, [r1, #11]
	config->baudrate         = 9600;
	config->receiver_enable  = true;
    8d62:	2401      	movs	r4, #1
    8d64:	2124      	movs	r1, #36	; 0x24
    8d66:	4668      	mov	r0, sp
    8d68:	5444      	strb	r4, [r0, r1]
	config->transmitter_enable = true;
    8d6a:	3101      	adds	r1, #1
    8d6c:	5444      	strb	r4, [r0, r1]
	config->clock_polarity_inverted = false;
    8d6e:	3101      	adds	r1, #1
    8d70:	5443      	strb	r3, [r0, r1]
	config->use_external_clock = false;
    8d72:	3101      	adds	r1, #1
    8d74:	5443      	strb	r3, [r0, r1]
	config->ext_clock_freq   = 0;
    8d76:	930a      	str	r3, [sp, #40]	; 0x28
	config->mux_setting      = USART_RX_1_TX_2_XCK_3;
	config->run_in_standby   = false;
    8d78:	3105      	adds	r1, #5
    8d7a:	5443      	strb	r3, [r0, r1]
	config->generator_source = GCLK_GENERATOR_0;
    8d7c:	3101      	adds	r1, #1
    8d7e:	5443      	strb	r3, [r0, r1]
	config->pinmux_pad0      = PINMUX_DEFAULT;
	config->pinmux_pad1      = PINMUX_DEFAULT;
	config->pinmux_pad2      = PINMUX_DEFAULT;
	config->pinmux_pad3      = PINMUX_DEFAULT;
#ifdef FEATURE_USART_OVER_SAMPLE
	config->sample_adjustment     = USART_SAMPLE_ADJUSTMENT_7_8_9;
    8d80:	9305      	str	r3, [sp, #20]
	config->sample_rate           = USART_SAMPLE_RATE_16X_ARITHMETIC;
    8d82:	8203      	strh	r3, [r0, #16]
#endif
#ifdef FEATURE_USART_LIN_SLAVE
	config->lin_slave_enable      = false;
    8d84:	76c3      	strb	r3, [r0, #27]
	config->lin_header_delay = LIN_MASTER_HEADER_DELAY_0;
	config->lin_break_length = LIN_MASTER_BREAK_LENGTH_13_BIT;
#endif

#ifdef FEATURE_USART_IMMEDIATE_BUFFER_OVERFLOW_NOTIFICATION
	config->immediate_buffer_overflow_notification  = false;
    8d86:	7602      	strb	r2, [r0, #24]
#endif
#ifdef FEATURE_USART_START_FRAME_DECTION
	config->start_frame_detection_enable            = false;
    8d88:	7702      	strb	r2, [r0, #28]
#endif
#ifdef FEATURE_USART_IRDA
	config->encoding_format_enable                  = false;
    8d8a:	7642      	strb	r2, [r0, #25]
	config->receive_pulse_length                    = 19;
    8d8c:	2313      	movs	r3, #19
    8d8e:	7683      	strb	r3, [r0, #26]
	config->iso7816_config.inhibit_nack             = ISO7816_INHIBIT_NACK_DISABLE;
	config->iso7816_config.successive_recv_nack     = ISO7816_SUCCESSIVE_RECV_NACK_DISABLE;
	config->iso7816_config.max_iterations           = 7;
#endif
#ifdef FEATURE_USART_COLLISION_DECTION
	config->collision_detection_enable              = false;
    8d90:	7742      	strb	r2, [r0, #29]
	host_uart_config.mux_setting = HOST_SERCOM_MUX_SETTING;
    8d92:	2380      	movs	r3, #128	; 0x80
    8d94:	035b      	lsls	r3, r3, #13
    8d96:	9303      	str	r3, [sp, #12]
	host_uart_config.pinmux_pad0 = HOST_SERCOM_PINMUX_PAD0;
    8d98:	4b2f      	ldr	r3, [pc, #188]	; (8e58 <sio2host_init+0x110>)
    8d9a:	930c      	str	r3, [sp, #48]	; 0x30
	host_uart_config.pinmux_pad1 = HOST_SERCOM_PINMUX_PAD1;
    8d9c:	4b2f      	ldr	r3, [pc, #188]	; (8e5c <sio2host_init+0x114>)
    8d9e:	930d      	str	r3, [sp, #52]	; 0x34
	host_uart_config.pinmux_pad2 = HOST_SERCOM_PINMUX_PAD2;
    8da0:	2301      	movs	r3, #1
    8da2:	425b      	negs	r3, r3
    8da4:	930e      	str	r3, [sp, #56]	; 0x38
	host_uart_config.pinmux_pad3 = HOST_SERCOM_PINMUX_PAD3;
    8da6:	930f      	str	r3, [sp, #60]	; 0x3c
	host_uart_config.baudrate    = USART_HOST_BAUDRATE;
    8da8:	2396      	movs	r3, #150	; 0x96
    8daa:	021b      	lsls	r3, r3, #8
    8dac:	9308      	str	r3, [sp, #32]
static inline void stdio_serial_init(
		struct usart_module *const module,
		usart_inst_t const hw,
		const struct usart_config *const config)
{
	stdio_base = (void *)module;
    8dae:	4d2c      	ldr	r5, [pc, #176]	; (8e60 <sio2host_init+0x118>)
    8db0:	4b2c      	ldr	r3, [pc, #176]	; (8e64 <sio2host_init+0x11c>)
    8db2:	601d      	str	r5, [r3, #0]
	ptr_put = (int (*)(void volatile*,char))&usart_serial_putchar;
    8db4:	4a2c      	ldr	r2, [pc, #176]	; (8e68 <sio2host_init+0x120>)
    8db6:	4b2d      	ldr	r3, [pc, #180]	; (8e6c <sio2host_init+0x124>)
    8db8:	601a      	str	r2, [r3, #0]
	ptr_get = (void (*)(void volatile*,char*))&usart_serial_getchar;
    8dba:	4a2d      	ldr	r2, [pc, #180]	; (8e70 <sio2host_init+0x128>)
    8dbc:	4b2d      	ldr	r3, [pc, #180]	; (8e74 <sio2host_init+0x12c>)
    8dbe:	601a      	str	r2, [r3, #0]
	if (usart_init(module, hw, config) == STATUS_OK) {
    8dc0:	466a      	mov	r2, sp
    8dc2:	492d      	ldr	r1, [pc, #180]	; (8e78 <sio2host_init+0x130>)
    8dc4:	0028      	movs	r0, r5
    8dc6:	4b2d      	ldr	r3, [pc, #180]	; (8e7c <sio2host_init+0x134>)
    8dc8:	4798      	blx	r3

	usart_serial_init(module, hw, config);
# if defined(__GNUC__)
	// Specify that stdout and stdin should not be buffered.
	setbuf(stdout, NULL);
    8dca:	4f2d      	ldr	r7, [pc, #180]	; (8e80 <sio2host_init+0x138>)
    8dcc:	683b      	ldr	r3, [r7, #0]
    8dce:	6898      	ldr	r0, [r3, #8]
    8dd0:	2100      	movs	r1, #0
    8dd2:	4e2c      	ldr	r6, [pc, #176]	; (8e84 <sio2host_init+0x13c>)
    8dd4:	47b0      	blx	r6
	setbuf(stdin, NULL);
    8dd6:	683b      	ldr	r3, [r7, #0]
    8dd8:	6858      	ldr	r0, [r3, #4]
    8dda:	2100      	movs	r1, #0
    8ddc:	47b0      	blx	r6
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
    8dde:	682e      	ldr	r6, [r5, #0]

#if USART_CALLBACK_MODE == true
	/* Enable Global interrupt for module */
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
    8de0:	0030      	movs	r0, r6
    8de2:	4b29      	ldr	r3, [pc, #164]	; (8e88 <sio2host_init+0x140>)
    8de4:	4798      	blx	r3
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
    8de6:	231f      	movs	r3, #31
    8de8:	4018      	ands	r0, r3
    8dea:	4084      	lsls	r4, r0
    8dec:	4b27      	ldr	r3, [pc, #156]	; (8e8c <sio2host_init+0x144>)
    8dee:	601c      	str	r4, [r3, #0]
	SercomUsart *const usart_hw = &(module->hw->USART);
    8df0:	682a      	ldr	r2, [r5, #0]
	return (usart_hw->SYNCBUSY.reg);
    8df2:	69d3      	ldr	r3, [r2, #28]
	while (usart_is_syncing(module)) {
    8df4:	2b00      	cmp	r3, #0
    8df6:	d1fc      	bne.n	8df2 <sio2host_init+0xaa>

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);

	/* Enable USART module */
	usart_hw->CTRLA.reg |= SERCOM_USART_CTRLA_ENABLE;
    8df8:	6833      	ldr	r3, [r6, #0]
    8dfa:	2202      	movs	r2, #2
    8dfc:	4313      	orrs	r3, r2
    8dfe:	6033      	str	r3, [r6, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
    8e00:	4b17      	ldr	r3, [pc, #92]	; (8e60 <sio2host_init+0x118>)
    8e02:	681b      	ldr	r3, [r3, #0]
	return (usart_hw->SYNCBUSY.reg);
    8e04:	69da      	ldr	r2, [r3, #28]
	while (usart_is_syncing(module)) {
    8e06:	2a00      	cmp	r2, #0
    8e08:	d1fc      	bne.n	8e04 <sio2host_init+0xbc>
			module->receiver_enabled = true;
			break;

		case USART_TRANSCEIVER_TX:
			/* Enable TX */
			usart_hw->CTRLB.reg |= SERCOM_USART_CTRLB_TXEN;
    8e0a:	6859      	ldr	r1, [r3, #4]
    8e0c:	2280      	movs	r2, #128	; 0x80
    8e0e:	0252      	lsls	r2, r2, #9
    8e10:	430a      	orrs	r2, r1
    8e12:	605a      	str	r2, [r3, #4]
			module->transmitter_enabled = true;
    8e14:	2101      	movs	r1, #1
    8e16:	4a12      	ldr	r2, [pc, #72]	; (8e60 <sio2host_init+0x118>)
    8e18:	71d1      	strb	r1, [r2, #7]
	return (usart_hw->SYNCBUSY.reg);
    8e1a:	69da      	ldr	r2, [r3, #28]
	while (usart_is_syncing(module)) {
    8e1c:	2a00      	cmp	r2, #0
    8e1e:	d1fc      	bne.n	8e1a <sio2host_init+0xd2>
	return (usart_hw->SYNCBUSY.reg);
    8e20:	69da      	ldr	r2, [r3, #28]
	while (usart_is_syncing(module)) {
    8e22:	2a00      	cmp	r2, #0
    8e24:	d1fc      	bne.n	8e20 <sio2host_init+0xd8>
			usart_hw->CTRLB.reg |= SERCOM_USART_CTRLB_RXEN;
    8e26:	6859      	ldr	r1, [r3, #4]
    8e28:	2280      	movs	r2, #128	; 0x80
    8e2a:	0292      	lsls	r2, r2, #10
    8e2c:	430a      	orrs	r2, r1
    8e2e:	605a      	str	r2, [r3, #4]
			module->receiver_enabled = true;
    8e30:	2101      	movs	r1, #1
    8e32:	4a0b      	ldr	r2, [pc, #44]	; (8e60 <sio2host_init+0x118>)
    8e34:	7191      	strb	r1, [r2, #6]
	return (usart_hw->SYNCBUSY.reg);
    8e36:	69da      	ldr	r2, [r3, #28]
	while (usart_is_syncing(module)) {
    8e38:	2a00      	cmp	r2, #0
    8e3a:	d1fc      	bne.n	8e36 <sio2host_init+0xee>
	USART_HOST_RX_ISR_ENABLE();
    8e3c:	4914      	ldr	r1, [pc, #80]	; (8e90 <sio2host_init+0x148>)
    8e3e:	2000      	movs	r0, #0
    8e40:	4b14      	ldr	r3, [pc, #80]	; (8e94 <sio2host_init+0x14c>)
    8e42:	4798      	blx	r3
    8e44:	2204      	movs	r2, #4
    8e46:	4b0c      	ldr	r3, [pc, #48]	; (8e78 <sio2host_init+0x130>)
    8e48:	759a      	strb	r2, [r3, #22]
    8e4a:	32fd      	adds	r2, #253	; 0xfd
    8e4c:	32ff      	adds	r2, #255	; 0xff
    8e4e:	4b0f      	ldr	r3, [pc, #60]	; (8e8c <sio2host_init+0x144>)
    8e50:	601a      	str	r2, [r3, #0]
}
    8e52:	b011      	add	sp, #68	; 0x44
    8e54:	bdf0      	pop	{r4, r5, r6, r7, pc}
    8e56:	46c0      	nop			; (mov r8, r8)
    8e58:	00040003 	.word	0x00040003
    8e5c:	00050003 	.word	0x00050003
    8e60:	2000017c 	.word	0x2000017c
    8e64:	20001dac 	.word	0x20001dac
    8e68:	00008cd1 	.word	0x00008cd1
    8e6c:	20001da8 	.word	0x20001da8
    8e70:	00008ca5 	.word	0x00008ca5
    8e74:	20001da4 	.word	0x20001da4
    8e78:	42000800 	.word	0x42000800
    8e7c:	0000788d 	.word	0x0000788d
    8e80:	200000a0 	.word	0x200000a0
    8e84:	0001536d 	.word	0x0001536d
    8e88:	00007445 	.word	0x00007445
    8e8c:	e000e100 	.word	0xe000e100
    8e90:	00008ce9 	.word	0x00008ce9
    8e94:	00007409 	.word	0x00007409

00008e98 <CompareData>:
     Otherwise it is the start address of the buffer that contains the data to compare with
    \param numberOfBytes The number of bytes to compare
    \note offset+numberOfBytes must be <= D_NV_SECTOR_SIZE (meaning sector crossing is not permitted)
*/
static bool CompareData(uint8_t sector, uint16_t offset, uint8_t *pBuffer, D_Nv_Size_t numberOfBytes)
{
    8e98:	b5f0      	push	{r4, r5, r6, r7, lr}
    8e9a:	46c6      	mov	lr, r8
    8e9c:	b500      	push	{lr}
    8e9e:	b084      	sub	sp, #16
    8ea0:	0014      	movs	r4, r2
    8ea2:	001f      	movs	r7, r3
  uint32_t address = D_NV_MEMORY_START + (uint32_t)(sector - D_NV_FIRST_SECTOR) * D_NV_SECTOR_SIZE + offset;
    8ea4:	4b29      	ldr	r3, [pc, #164]	; (8f4c <CompareData+0xb4>)
    8ea6:	18cb      	adds	r3, r1, r3
    8ea8:	0340      	lsls	r0, r0, #13
    8eaa:	181d      	adds	r5, r3, r0
  uint8_t  buffer[16U];

  assert(numberOfBytes);
    8eac:	2f00      	cmp	r7, #0
    8eae:	d01a      	beq.n	8ee6 <CompareData+0x4e>
  assert(address <= D_NV_MEMORY_END);
    8eb0:	4b27      	ldr	r3, [pc, #156]	; (8f50 <CompareData+0xb8>)
    8eb2:	1e5a      	subs	r2, r3, #1
    8eb4:	4295      	cmp	r5, r2
    8eb6:	d81c      	bhi.n	8ef2 <CompareData+0x5a>
  assert((address + numberOfBytes) <= (D_NV_MEMORY_END + 1U));
    8eb8:	197a      	adds	r2, r7, r5
    8eba:	4293      	cmp	r3, r2
    8ebc:	d31f      	bcc.n	8efe <CompareData+0x66>
  assert((offset + numberOfBytes) <= D_NV_SECTOR_SIZE);
    8ebe:	19c9      	adds	r1, r1, r7
    8ec0:	2380      	movs	r3, #128	; 0x80
    8ec2:	019b      	lsls	r3, r3, #6
    8ec4:	4299      	cmp	r1, r3
    8ec6:	d820      	bhi.n	8f0a <CompareData+0x72>

  while(numberOfBytes)
  {
    uint16_t bytesToRead = MIN(sizeof(buffer), numberOfBytes);

    memcpy(buffer, (uint8_t FLASH_PTR *)address, bytesToRead);
    8ec8:	4b22      	ldr	r3, [pc, #136]	; (8f54 <CompareData+0xbc>)
    8eca:	4698      	mov	r8, r3
    uint16_t bytesToRead = MIN(sizeof(buffer), numberOfBytes);
    8ecc:	1c3e      	adds	r6, r7, #0
    8ece:	2f10      	cmp	r7, #16
    8ed0:	d900      	bls.n	8ed4 <CompareData+0x3c>
    8ed2:	2610      	movs	r6, #16
    8ed4:	b2b6      	uxth	r6, r6
    memcpy(buffer, (uint8_t FLASH_PTR *)address, bytesToRead);
    8ed6:	0032      	movs	r2, r6
    8ed8:	0029      	movs	r1, r5
    8eda:	4668      	mov	r0, sp
    8edc:	47c0      	blx	r8
    for (uint8_t i = 0U; i < bytesToRead; i++)
    8ede:	2e00      	cmp	r6, #0
    8ee0:	d028      	beq.n	8f34 <CompareData+0x9c>
    8ee2:	2300      	movs	r3, #0
    8ee4:	e01f      	b.n	8f26 <CompareData+0x8e>
  assert(numberOfBytes);
    8ee6:	4b1c      	ldr	r3, [pc, #112]	; (8f58 <CompareData+0xc0>)
    8ee8:	4a1c      	ldr	r2, [pc, #112]	; (8f5c <CompareData+0xc4>)
    8eea:	21d9      	movs	r1, #217	; 0xd9
    8eec:	481c      	ldr	r0, [pc, #112]	; (8f60 <CompareData+0xc8>)
    8eee:	4c1d      	ldr	r4, [pc, #116]	; (8f64 <CompareData+0xcc>)
    8ef0:	47a0      	blx	r4
  assert(address <= D_NV_MEMORY_END);
    8ef2:	4b1d      	ldr	r3, [pc, #116]	; (8f68 <CompareData+0xd0>)
    8ef4:	4a19      	ldr	r2, [pc, #100]	; (8f5c <CompareData+0xc4>)
    8ef6:	21da      	movs	r1, #218	; 0xda
    8ef8:	4819      	ldr	r0, [pc, #100]	; (8f60 <CompareData+0xc8>)
    8efa:	4c1a      	ldr	r4, [pc, #104]	; (8f64 <CompareData+0xcc>)
    8efc:	47a0      	blx	r4
  assert((address + numberOfBytes) <= (D_NV_MEMORY_END + 1U));
    8efe:	4b1b      	ldr	r3, [pc, #108]	; (8f6c <CompareData+0xd4>)
    8f00:	4a16      	ldr	r2, [pc, #88]	; (8f5c <CompareData+0xc4>)
    8f02:	21db      	movs	r1, #219	; 0xdb
    8f04:	4816      	ldr	r0, [pc, #88]	; (8f60 <CompareData+0xc8>)
    8f06:	4c17      	ldr	r4, [pc, #92]	; (8f64 <CompareData+0xcc>)
    8f08:	47a0      	blx	r4
  assert((offset + numberOfBytes) <= D_NV_SECTOR_SIZE);
    8f0a:	4b19      	ldr	r3, [pc, #100]	; (8f70 <CompareData+0xd8>)
    8f0c:	4a13      	ldr	r2, [pc, #76]	; (8f5c <CompareData+0xc4>)
    8f0e:	21dc      	movs	r1, #220	; 0xdc
    8f10:	4813      	ldr	r0, [pc, #76]	; (8f60 <CompareData+0xc8>)
    8f12:	4c14      	ldr	r4, [pc, #80]	; (8f64 <CompareData+0xcc>)
    8f14:	47a0      	blx	r4
      if (buffer[i] != ((pBuffer != NULL) ? *(pBuffer++) : 0xFF))
    8f16:	21ff      	movs	r1, #255	; 0xff
    8f18:	4291      	cmp	r1, r2
    8f1a:	d112      	bne.n	8f42 <CompareData+0xaa>
    for (uint8_t i = 0U; i < bytesToRead; i++)
    8f1c:	3301      	adds	r3, #1
    8f1e:	b2db      	uxtb	r3, r3
    8f20:	b29a      	uxth	r2, r3
    8f22:	4296      	cmp	r6, r2
    8f24:	d906      	bls.n	8f34 <CompareData+0x9c>
      if (buffer[i] != ((pBuffer != NULL) ? *(pBuffer++) : 0xFF))
    8f26:	466a      	mov	r2, sp
    8f28:	5cd2      	ldrb	r2, [r2, r3]
    8f2a:	2c00      	cmp	r4, #0
    8f2c:	d0f3      	beq.n	8f16 <CompareData+0x7e>
    8f2e:	7821      	ldrb	r1, [r4, #0]
    8f30:	3401      	adds	r4, #1
    8f32:	e7f1      	b.n	8f18 <CompareData+0x80>
        return false;

    numberOfBytes -= bytesToRead;
    8f34:	1bbf      	subs	r7, r7, r6
    8f36:	b2bf      	uxth	r7, r7
    address += bytesToRead;
    8f38:	19ad      	adds	r5, r5, r6
  while(numberOfBytes)
    8f3a:	2f00      	cmp	r7, #0
    8f3c:	d1c6      	bne.n	8ecc <CompareData+0x34>
  }

  return true;
    8f3e:	2001      	movs	r0, #1
    8f40:	e000      	b.n	8f44 <CompareData+0xac>
        return false;
    8f42:	2000      	movs	r0, #0
}
    8f44:	b004      	add	sp, #16
    8f46:	bc04      	pop	{r2}
    8f48:	4690      	mov	r8, r2
    8f4a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    8f4c:	00002100 	.word	0x00002100
    8f50:	00006100 	.word	0x00006100
    8f54:	00014cdf 	.word	0x00014cdf
    8f58:	00015fd8 	.word	0x00015fd8
    8f5c:	0001615c 	.word	0x0001615c
    8f60:	00015fe8 	.word	0x00015fe8
    8f64:	00014c1d 	.word	0x00014c1d
    8f68:	00016028 	.word	0x00016028
    8f6c:	00016044 	.word	0x00016044
    8f70:	00016078 	.word	0x00016078

00008f74 <D_Nv_Init>:
{
    8f74:	b510      	push	{r4, lr}
  assert ((D_NV_MEMORY_START % NVMCTRL_ROW_SIZE) == 0U);
    8f76:	4a0b      	ldr	r2, [pc, #44]	; (8fa4 <D_Nv_Init+0x30>)
    8f78:	23ff      	movs	r3, #255	; 0xff
    8f7a:	421a      	tst	r2, r3
    8f7c:	d106      	bne.n	8f8c <D_Nv_Init+0x18>
  assert((D_NV_MEMORY_END - D_NV_MEMORY_START + 1U) == D_NV_MEMORY_SIZE);
    8f7e:	4b0a      	ldr	r3, [pc, #40]	; (8fa8 <D_Nv_Init+0x34>)
    8f80:	490a      	ldr	r1, [pc, #40]	; (8fac <D_Nv_Init+0x38>)
    8f82:	468c      	mov	ip, r1
    8f84:	4463      	add	r3, ip
    8f86:	4293      	cmp	r3, r2
    8f88:	d106      	bne.n	8f98 <D_Nv_Init+0x24>
}
    8f8a:	bd10      	pop	{r4, pc}
  assert ((D_NV_MEMORY_START % NVMCTRL_ROW_SIZE) == 0U);
    8f8c:	4b08      	ldr	r3, [pc, #32]	; (8fb0 <D_Nv_Init+0x3c>)
    8f8e:	4a09      	ldr	r2, [pc, #36]	; (8fb4 <D_Nv_Init+0x40>)
    8f90:	2159      	movs	r1, #89	; 0x59
    8f92:	4809      	ldr	r0, [pc, #36]	; (8fb8 <D_Nv_Init+0x44>)
    8f94:	4c09      	ldr	r4, [pc, #36]	; (8fbc <D_Nv_Init+0x48>)
    8f96:	47a0      	blx	r4
  assert((D_NV_MEMORY_END - D_NV_MEMORY_START + 1U) == D_NV_MEMORY_SIZE);
    8f98:	4b09      	ldr	r3, [pc, #36]	; (8fc0 <D_Nv_Init+0x4c>)
    8f9a:	4a06      	ldr	r2, [pc, #24]	; (8fb4 <D_Nv_Init+0x40>)
    8f9c:	215d      	movs	r1, #93	; 0x5d
    8f9e:	4806      	ldr	r0, [pc, #24]	; (8fb8 <D_Nv_Init+0x44>)
    8fa0:	4c06      	ldr	r4, [pc, #24]	; (8fbc <D_Nv_Init+0x48>)
    8fa2:	47a0      	blx	r4
    8fa4:	00002100 	.word	0x00002100
    8fa8:	00006100 	.word	0x00006100
    8fac:	ffffc000 	.word	0xffffc000
    8fb0:	000160a8 	.word	0x000160a8
    8fb4:	00016118 	.word	0x00016118
    8fb8:	00015fe8 	.word	0x00015fe8
    8fbc:	00014c1d 	.word	0x00014c1d
    8fc0:	000160d8 	.word	0x000160d8

00008fc4 <D_Nv_Read_Impl>:
{
    8fc4:	b570      	push	{r4, r5, r6, lr}
    8fc6:	0015      	movs	r5, r2
  uint32_t address = D_NV_MEMORY_START + (uint32_t)(sector - D_NV_FIRST_SECTOR) * D_NV_SECTOR_SIZE + offset;
    8fc8:	0344      	lsls	r4, r0, #13
    8fca:	4813      	ldr	r0, [pc, #76]	; (9018 <D_Nv_Read_Impl+0x54>)
    8fcc:	1808      	adds	r0, r1, r0
    8fce:	1824      	adds	r4, r4, r0
  assert(address <= D_NV_MEMORY_END);
    8fd0:	4a12      	ldr	r2, [pc, #72]	; (901c <D_Nv_Read_Impl+0x58>)
    8fd2:	1e50      	subs	r0, r2, #1
    8fd4:	4284      	cmp	r4, r0
    8fd6:	d80d      	bhi.n	8ff4 <D_Nv_Read_Impl+0x30>
  assert((address + numberOfBytes) <= (D_NV_MEMORY_END + 1U));
    8fd8:	18e0      	adds	r0, r4, r3
    8fda:	4282      	cmp	r2, r0
    8fdc:	d310      	bcc.n	9000 <D_Nv_Read_Impl+0x3c>
  assert((offset + numberOfBytes) <= D_NV_SECTOR_SIZE);
    8fde:	18c9      	adds	r1, r1, r3
    8fe0:	2280      	movs	r2, #128	; 0x80
    8fe2:	0192      	lsls	r2, r2, #6
    8fe4:	4291      	cmp	r1, r2
    8fe6:	d811      	bhi.n	900c <D_Nv_Read_Impl+0x48>
  memcpy(pBuffer, (uint8_t FLASH_PTR *)address, numberOfBytes);
    8fe8:	001a      	movs	r2, r3
    8fea:	0021      	movs	r1, r4
    8fec:	0028      	movs	r0, r5
    8fee:	4b0c      	ldr	r3, [pc, #48]	; (9020 <D_Nv_Read_Impl+0x5c>)
    8ff0:	4798      	blx	r3
}
    8ff2:	bd70      	pop	{r4, r5, r6, pc}
  assert(address <= D_NV_MEMORY_END);
    8ff4:	4b0b      	ldr	r3, [pc, #44]	; (9024 <D_Nv_Read_Impl+0x60>)
    8ff6:	4a0c      	ldr	r2, [pc, #48]	; (9028 <D_Nv_Read_Impl+0x64>)
    8ff8:	2172      	movs	r1, #114	; 0x72
    8ffa:	480c      	ldr	r0, [pc, #48]	; (902c <D_Nv_Read_Impl+0x68>)
    8ffc:	4c0c      	ldr	r4, [pc, #48]	; (9030 <D_Nv_Read_Impl+0x6c>)
    8ffe:	47a0      	blx	r4
  assert((address + numberOfBytes) <= (D_NV_MEMORY_END + 1U));
    9000:	4b0c      	ldr	r3, [pc, #48]	; (9034 <D_Nv_Read_Impl+0x70>)
    9002:	4a09      	ldr	r2, [pc, #36]	; (9028 <D_Nv_Read_Impl+0x64>)
    9004:	2173      	movs	r1, #115	; 0x73
    9006:	4809      	ldr	r0, [pc, #36]	; (902c <D_Nv_Read_Impl+0x68>)
    9008:	4c09      	ldr	r4, [pc, #36]	; (9030 <D_Nv_Read_Impl+0x6c>)
    900a:	47a0      	blx	r4
  assert((offset + numberOfBytes) <= D_NV_SECTOR_SIZE);
    900c:	4b0a      	ldr	r3, [pc, #40]	; (9038 <D_Nv_Read_Impl+0x74>)
    900e:	4a06      	ldr	r2, [pc, #24]	; (9028 <D_Nv_Read_Impl+0x64>)
    9010:	2174      	movs	r1, #116	; 0x74
    9012:	4806      	ldr	r0, [pc, #24]	; (902c <D_Nv_Read_Impl+0x68>)
    9014:	4c06      	ldr	r4, [pc, #24]	; (9030 <D_Nv_Read_Impl+0x6c>)
    9016:	47a0      	blx	r4
    9018:	00002100 	.word	0x00002100
    901c:	00006100 	.word	0x00006100
    9020:	00014cdf 	.word	0x00014cdf
    9024:	00016028 	.word	0x00016028
    9028:	00016124 	.word	0x00016124
    902c:	00015fe8 	.word	0x00015fe8
    9030:	00014c1d 	.word	0x00014c1d
    9034:	00016044 	.word	0x00016044
    9038:	00016078 	.word	0x00016078

0000903c <D_Nv_Write_Impl>:
{
    903c:	b5f0      	push	{r4, r5, r6, r7, lr}
    903e:	46de      	mov	lr, fp
    9040:	4657      	mov	r7, sl
    9042:	464e      	mov	r6, r9
    9044:	4645      	mov	r5, r8
    9046:	b5e0      	push	{r5, r6, r7, lr}
    9048:	b093      	sub	sp, #76	; 0x4c
    904a:	9201      	str	r2, [sp, #4]
    904c:	469a      	mov	sl, r3
  uint32_t  address = D_NV_MEMORY_START + (uint32_t)(sector - D_NV_FIRST_SECTOR) * D_NV_SECTOR_SIZE + offset;
    904e:	4c46      	ldr	r4, [pc, #280]	; (9168 <D_Nv_Write_Impl+0x12c>)
    9050:	190c      	adds	r4, r1, r4
    9052:	0340      	lsls	r0, r0, #13
    9054:	1825      	adds	r5, r4, r0
  assert(numberOfBytes);
    9056:	2b00      	cmp	r3, #0
    9058:	d047      	beq.n	90ea <D_Nv_Write_Impl+0xae>
  assert(address <= D_NV_MEMORY_END);
    905a:	4b44      	ldr	r3, [pc, #272]	; (916c <D_Nv_Write_Impl+0x130>)
    905c:	1e5a      	subs	r2, r3, #1
    905e:	4295      	cmp	r5, r2
    9060:	d849      	bhi.n	90f6 <D_Nv_Write_Impl+0xba>
  assert((address + numberOfBytes) <= (D_NV_MEMORY_END + 1U));
    9062:	4652      	mov	r2, sl
    9064:	1952      	adds	r2, r2, r5
    9066:	4293      	cmp	r3, r2
    9068:	d34b      	bcc.n	9102 <D_Nv_Write_Impl+0xc6>
  assert((offset + numberOfBytes) <= D_NV_SECTOR_SIZE);
    906a:	46d3      	mov	fp, sl
    906c:	4451      	add	r1, sl
    906e:	2380      	movs	r3, #128	; 0x80
    9070:	019b      	lsls	r3, r3, #6
    9072:	4299      	cmp	r1, r3
    9074:	d84b      	bhi.n	910e <D_Nv_Write_Impl+0xd2>
  if (s_pfSystemCheckCallback != NULL)
    9076:	4b3e      	ldr	r3, [pc, #248]	; (9170 <D_Nv_Write_Impl+0x134>)
    9078:	681b      	ldr	r3, [r3, #0]
    907a:	2b00      	cmp	r3, #0
    907c:	d000      	beq.n	9080 <D_Nv_Write_Impl+0x44>
    s_pfSystemCheckCallback();
    907e:	4798      	blx	r3
  pageOffset = address % NVMCTRL_PAGE_SIZE;
    9080:	273f      	movs	r7, #63	; 0x3f
    9082:	402f      	ands	r7, r5
  pageStart = address - pageOffset;
    9084:	1bec      	subs	r4, r5, r7
  numberOfPageBytes = MIN((NVMCTRL_PAGE_SIZE - pageOffset), numberOfBytes);
    9086:	2640      	movs	r6, #64	; 0x40
    9088:	1bf6      	subs	r6, r6, r7
    908a:	455e      	cmp	r6, fp
    908c:	dd00      	ble.n	9090 <D_Nv_Write_Impl+0x54>
    908e:	4656      	mov	r6, sl
    9090:	b2b3      	uxth	r3, r6
    9092:	469b      	mov	fp, r3
  memset (page_buf, 0xFF, NVMCTRL_PAGE_SIZE);
    9094:	2240      	movs	r2, #64	; 0x40
    9096:	21ff      	movs	r1, #255	; 0xff
    9098:	a802      	add	r0, sp, #8
    909a:	4b36      	ldr	r3, [pc, #216]	; (9174 <D_Nv_Write_Impl+0x138>)
    909c:	4798      	blx	r3
  memcpy (&page_buf[pageOffset], pBuffer, numberOfPageBytes);
    909e:	003b      	movs	r3, r7
    90a0:	aa02      	add	r2, sp, #8
    90a2:	4694      	mov	ip, r2
    90a4:	4463      	add	r3, ip
    90a6:	9300      	str	r3, [sp, #0]
    90a8:	0436      	lsls	r6, r6, #16
    90aa:	0c37      	lsrs	r7, r6, #16
    90ac:	003a      	movs	r2, r7
    90ae:	9901      	ldr	r1, [sp, #4]
    90b0:	0018      	movs	r0, r3
    90b2:	4b31      	ldr	r3, [pc, #196]	; (9178 <D_Nv_Write_Impl+0x13c>)
    90b4:	4798      	blx	r3
	cpu_irq_enter_critical();
    90b6:	4b31      	ldr	r3, [pc, #196]	; (917c <D_Nv_Write_Impl+0x140>)
    90b8:	4798      	blx	r3
    error_code = nvm_write_buffer(pageStart, page_buf, NVMCTRL_PAGE_SIZE);
    90ba:	4e31      	ldr	r6, [pc, #196]	; (9180 <D_Nv_Write_Impl+0x144>)
    90bc:	2240      	movs	r2, #64	; 0x40
    90be:	a902      	add	r1, sp, #8
    90c0:	0020      	movs	r0, r4
    90c2:	47b0      	blx	r6
  } while (error_code == STATUS_BUSY);
    90c4:	2805      	cmp	r0, #5
    90c6:	d0f9      	beq.n	90bc <D_Nv_Write_Impl+0x80>
	cpu_irq_leave_critical();
    90c8:	4b2e      	ldr	r3, [pc, #184]	; (9184 <D_Nv_Write_Impl+0x148>)
    90ca:	4798      	blx	r3
  numberOfBytes -= numberOfPageBytes;
    90cc:	4653      	mov	r3, sl
    90ce:	465a      	mov	r2, fp
    90d0:	1a9e      	subs	r6, r3, r2
    90d2:	b2b6      	uxth	r6, r6
  address += numberOfPageBytes;
    90d4:	19ec      	adds	r4, r5, r7
  pBuffer += numberOfPageBytes;
    90d6:	9b01      	ldr	r3, [sp, #4]
    90d8:	4699      	mov	r9, r3
    90da:	44b9      	add	r9, r7
  while (0U < numberOfBytes)
    90dc:	2e00      	cmp	r6, #0
    90de:	d03b      	beq.n	9158 <D_Nv_Write_Impl+0x11c>
    memset (page_buf, 0xFF, NVMCTRL_PAGE_SIZE);
    90e0:	4b24      	ldr	r3, [pc, #144]	; (9174 <D_Nv_Write_Impl+0x138>)
    90e2:	469b      	mov	fp, r3
    memcpy (&page_buf[pageOffset], pBuffer, numberOfPageBytes);
    90e4:	4b24      	ldr	r3, [pc, #144]	; (9178 <D_Nv_Write_Impl+0x13c>)
    90e6:	4698      	mov	r8, r3
    90e8:	e031      	b.n	914e <D_Nv_Write_Impl+0x112>
  assert(numberOfBytes);
    90ea:	4b27      	ldr	r3, [pc, #156]	; (9188 <D_Nv_Write_Impl+0x14c>)
    90ec:	4a27      	ldr	r2, [pc, #156]	; (918c <D_Nv_Write_Impl+0x150>)
    90ee:	218a      	movs	r1, #138	; 0x8a
    90f0:	4827      	ldr	r0, [pc, #156]	; (9190 <D_Nv_Write_Impl+0x154>)
    90f2:	4c28      	ldr	r4, [pc, #160]	; (9194 <D_Nv_Write_Impl+0x158>)
    90f4:	47a0      	blx	r4
  assert(address <= D_NV_MEMORY_END);
    90f6:	4b28      	ldr	r3, [pc, #160]	; (9198 <D_Nv_Write_Impl+0x15c>)
    90f8:	4a24      	ldr	r2, [pc, #144]	; (918c <D_Nv_Write_Impl+0x150>)
    90fa:	218b      	movs	r1, #139	; 0x8b
    90fc:	4824      	ldr	r0, [pc, #144]	; (9190 <D_Nv_Write_Impl+0x154>)
    90fe:	4c25      	ldr	r4, [pc, #148]	; (9194 <D_Nv_Write_Impl+0x158>)
    9100:	47a0      	blx	r4
  assert((address + numberOfBytes) <= (D_NV_MEMORY_END + 1U));
    9102:	4b26      	ldr	r3, [pc, #152]	; (919c <D_Nv_Write_Impl+0x160>)
    9104:	4a21      	ldr	r2, [pc, #132]	; (918c <D_Nv_Write_Impl+0x150>)
    9106:	218c      	movs	r1, #140	; 0x8c
    9108:	4821      	ldr	r0, [pc, #132]	; (9190 <D_Nv_Write_Impl+0x154>)
    910a:	4c22      	ldr	r4, [pc, #136]	; (9194 <D_Nv_Write_Impl+0x158>)
    910c:	47a0      	blx	r4
  assert((offset + numberOfBytes) <= D_NV_SECTOR_SIZE);
    910e:	4b24      	ldr	r3, [pc, #144]	; (91a0 <D_Nv_Write_Impl+0x164>)
    9110:	4a1e      	ldr	r2, [pc, #120]	; (918c <D_Nv_Write_Impl+0x150>)
    9112:	218d      	movs	r1, #141	; 0x8d
    9114:	481e      	ldr	r0, [pc, #120]	; (9190 <D_Nv_Write_Impl+0x154>)
    9116:	4c1f      	ldr	r4, [pc, #124]	; (9194 <D_Nv_Write_Impl+0x158>)
    9118:	47a0      	blx	r4
    numberOfPageBytes = MIN(NVMCTRL_PAGE_SIZE, numberOfBytes);
    911a:	b29f      	uxth	r7, r3
    memset (page_buf, 0xFF, NVMCTRL_PAGE_SIZE);
    911c:	2240      	movs	r2, #64	; 0x40
    911e:	21ff      	movs	r1, #255	; 0xff
    9120:	a802      	add	r0, sp, #8
    9122:	47d8      	blx	fp
    memcpy (&page_buf[pageOffset], pBuffer, numberOfPageBytes);
    9124:	003a      	movs	r2, r7
    9126:	4649      	mov	r1, r9
    9128:	9800      	ldr	r0, [sp, #0]
    912a:	47c0      	blx	r8
	cpu_irq_enter_critical();
    912c:	4b13      	ldr	r3, [pc, #76]	; (917c <D_Nv_Write_Impl+0x140>)
    912e:	4798      	blx	r3
      error_code = nvm_write_buffer(address, page_buf, NVMCTRL_PAGE_SIZE);
    9130:	4d13      	ldr	r5, [pc, #76]	; (9180 <D_Nv_Write_Impl+0x144>)
    9132:	2240      	movs	r2, #64	; 0x40
    9134:	a902      	add	r1, sp, #8
    9136:	0020      	movs	r0, r4
    9138:	47a8      	blx	r5
    } while (error_code == STATUS_BUSY);
    913a:	2805      	cmp	r0, #5
    913c:	d0f9      	beq.n	9132 <D_Nv_Write_Impl+0xf6>
	cpu_irq_leave_critical();
    913e:	4b11      	ldr	r3, [pc, #68]	; (9184 <D_Nv_Write_Impl+0x148>)
    9140:	4798      	blx	r3
    numberOfBytes -= numberOfPageBytes;
    9142:	1bf6      	subs	r6, r6, r7
    9144:	b2b6      	uxth	r6, r6
    address += numberOfPageBytes;
    9146:	19e4      	adds	r4, r4, r7
    pBuffer += numberOfPageBytes;
    9148:	44b9      	add	r9, r7
  while (0U < numberOfBytes)
    914a:	2e00      	cmp	r6, #0
    914c:	d004      	beq.n	9158 <D_Nv_Write_Impl+0x11c>
    numberOfPageBytes = MIN(NVMCTRL_PAGE_SIZE, numberOfBytes);
    914e:	1c33      	adds	r3, r6, #0
    9150:	2e40      	cmp	r6, #64	; 0x40
    9152:	d9e2      	bls.n	911a <D_Nv_Write_Impl+0xde>
    9154:	2340      	movs	r3, #64	; 0x40
    9156:	e7e0      	b.n	911a <D_Nv_Write_Impl+0xde>
}
    9158:	b013      	add	sp, #76	; 0x4c
    915a:	bc3c      	pop	{r2, r3, r4, r5}
    915c:	4690      	mov	r8, r2
    915e:	4699      	mov	r9, r3
    9160:	46a2      	mov	sl, r4
    9162:	46ab      	mov	fp, r5
    9164:	bdf0      	pop	{r4, r5, r6, r7, pc}
    9166:	46c0      	nop			; (mov r8, r8)
    9168:	00002100 	.word	0x00002100
    916c:	00006100 	.word	0x00006100
    9170:	20000250 	.word	0x20000250
    9174:	00014cf1 	.word	0x00014cf1
    9178:	00014cdf 	.word	0x00014cdf
    917c:	000064f5 	.word	0x000064f5
    9180:	00006931 	.word	0x00006931
    9184:	00006535 	.word	0x00006535
    9188:	00015fd8 	.word	0x00015fd8
    918c:	00016134 	.word	0x00016134
    9190:	00015fe8 	.word	0x00015fe8
    9194:	00014c1d 	.word	0x00014c1d
    9198:	00016028 	.word	0x00016028
    919c:	00016044 	.word	0x00016044
    91a0:	00016078 	.word	0x00016078

000091a4 <D_Nv_EraseSector_Impl>:
{
    91a4:	b570      	push	{r4, r5, r6, lr}
  uint32_t address = D_NV_MEMORY_START + (uint32_t)(sector - D_NV_FIRST_SECTOR) * D_NV_SECTOR_SIZE;
    91a6:	0344      	lsls	r4, r0, #13
    91a8:	480c      	ldr	r0, [pc, #48]	; (91dc <D_Nv_EraseSector_Impl+0x38>)
    91aa:	1824      	adds	r4, r4, r0
  address &= ~(NVMCTRL_ROW_SIZE - 1);
    91ac:	23ff      	movs	r3, #255	; 0xff
    91ae:	439c      	bics	r4, r3
  assert(address <= D_NV_MEMORY_END);
    91b0:	4b0b      	ldr	r3, [pc, #44]	; (91e0 <D_Nv_EraseSector_Impl+0x3c>)
    91b2:	3b01      	subs	r3, #1
    91b4:	2280      	movs	r2, #128	; 0x80
    91b6:	0192      	lsls	r2, r2, #6
    91b8:	18a6      	adds	r6, r4, r2
    91ba:	429c      	cmp	r4, r3
    91bc:	d807      	bhi.n	91ce <D_Nv_EraseSector_Impl+0x2a>
    nvm_erase_row (address);
    91be:	4d09      	ldr	r5, [pc, #36]	; (91e4 <D_Nv_EraseSector_Impl+0x40>)
    91c0:	0020      	movs	r0, r4
    91c2:	47a8      	blx	r5
    address += NVMCTRL_ROW_SIZE;
    91c4:	3401      	adds	r4, #1
    91c6:	34ff      	adds	r4, #255	; 0xff
  for (uint8_t i = 0U; i < (D_NV_SECTOR_SIZE / NVMCTRL_ROW_SIZE); i++)
    91c8:	42b4      	cmp	r4, r6
    91ca:	d1f9      	bne.n	91c0 <D_Nv_EraseSector_Impl+0x1c>
}
    91cc:	bd70      	pop	{r4, r5, r6, pc}
  assert(address <= D_NV_MEMORY_END);
    91ce:	4b06      	ldr	r3, [pc, #24]	; (91e8 <D_Nv_EraseSector_Impl+0x44>)
    91d0:	4a06      	ldr	r2, [pc, #24]	; (91ec <D_Nv_EraseSector_Impl+0x48>)
    91d2:	21c2      	movs	r1, #194	; 0xc2
    91d4:	4806      	ldr	r0, [pc, #24]	; (91f0 <D_Nv_EraseSector_Impl+0x4c>)
    91d6:	4c07      	ldr	r4, [pc, #28]	; (91f4 <D_Nv_EraseSector_Impl+0x50>)
    91d8:	47a0      	blx	r4
    91da:	46c0      	nop			; (mov r8, r8)
    91dc:	00002100 	.word	0x00002100
    91e0:	00006100 	.word	0x00006100
    91e4:	000069d9 	.word	0x000069d9
    91e8:	00016028 	.word	0x00016028
    91ec:	00016144 	.word	0x00016144
    91f0:	00015fe8 	.word	0x00015fe8
    91f4:	00014c1d 	.word	0x00014c1d

000091f8 <D_Nv_IsEmpty_Impl>:
    \param numberOfBytes The number of bytes to check
    \returns true if the range is empty, FALSE otherwise.
    \note Sector crossing is not permitted
*/
bool D_Nv_IsEmpty(uint8_t sector, uint16_t offset, D_Nv_Size_t numberOfBytes)
{
    91f8:	b510      	push	{r4, lr}
    91fa:	0013      	movs	r3, r2
  return CompareData(sector, offset, NULL, numberOfBytes);
    91fc:	2200      	movs	r2, #0
    91fe:	4c01      	ldr	r4, [pc, #4]	; (9204 <D_Nv_IsEmpty_Impl+0xc>)
    9200:	47a0      	blx	r4
}
    9202:	bd10      	pop	{r4, pc}
    9204:	00008e99 	.word	0x00008e99

00009208 <D_Nv_IsEqual_Impl>:
    \param[in] pBuffer The start address of the buffer that contains the data to compare with
    \param numberOfBytes The number of bytes to compare
    \note offset+numberOfBytes must be <= D_NV_SECTOR_SIZE (meaning sector crossing is not permitted)
*/
bool D_Nv_IsEqual(uint8_t sector, uint16_t offset, uint8_t *pBuffer, D_Nv_Size_t numberOfBytes)
{
    9208:	b510      	push	{r4, lr}
  return CompareData(sector, offset, pBuffer, numberOfBytes);
    920a:	4c01      	ldr	r4, [pc, #4]	; (9210 <D_Nv_IsEqual_Impl+0x8>)
    920c:	47a0      	blx	r4
}
    920e:	bd10      	pop	{r4, pc}
    9210:	00008e99 	.word	0x00008e99

00009214 <PowerSupplyTooLow>:
/** Check the power supply.
    \returns TRUE if the power supply is too low, FALSE when the the power
             supply is OK or when there is no callback installed.
*/
static bool PowerSupplyTooLow()
{
    9214:	b510      	push	{r4, lr}
    bool result = false;
    if ( s_powerSupplyCheckingFunction != NULL )
    9216:	4b05      	ldr	r3, [pc, #20]	; (922c <PowerSupplyTooLow+0x18>)
    9218:	681b      	ldr	r3, [r3, #0]
    921a:	2b00      	cmp	r3, #0
    921c:	d004      	beq.n	9228 <PowerSupplyTooLow+0x14>
    {
        if ( !s_powerSupplyCheckingFunction() )
    921e:	4798      	blx	r3
    9220:	2301      	movs	r3, #1
    9222:	4058      	eors	r0, r3
    9224:	b2c0      	uxtb	r0, r0
        {
            result = true;
        }
    }
    return result;
}
    9226:	bd10      	pop	{r4, pc}
    bool result = false;
    9228:	2000      	movs	r0, #0
    922a:	e7fc      	b.n	9226 <PowerSupplyTooLow+0x12>
    922c:	200003cc 	.word	0x200003cc

00009230 <UpdateSectorHead>:
*/

static void UpdateSectorHead(uint16_t increment, ItemAlignment_t itemAlignment )
{
    // Adjust the sector head according to the increment and alignment given
    switch(itemAlignment)
    9230:	2901      	cmp	r1, #1
    9232:	d009      	beq.n	9248 <UpdateSectorHead+0x18>
    9234:	2900      	cmp	r1, #0
    9236:	d002      	beq.n	923e <UpdateSectorHead+0xe>
    9238:	2902      	cmp	r1, #2
    923a:	d00d      	beq.n	9258 <UpdateSectorHead+0x28>
           s_sectorHead = (s_sectorHead + increment + 0x003Fu) & 0xFFC0u;
           break;
        default:
           break;
    }
}
    923c:	4770      	bx	lr
           s_sectorHead = (s_sectorHead + increment);
    923e:	4b0a      	ldr	r3, [pc, #40]	; (9268 <UpdateSectorHead+0x38>)
    9240:	881a      	ldrh	r2, [r3, #0]
    9242:	1880      	adds	r0, r0, r2
    9244:	8018      	strh	r0, [r3, #0]
           break;
    9246:	e7f9      	b.n	923c <UpdateSectorHead+0xc>
           s_sectorHead = (s_sectorHead + increment + 0x000Fu) & 0xFFF0u;
    9248:	4a07      	ldr	r2, [pc, #28]	; (9268 <UpdateSectorHead+0x38>)
    924a:	8813      	ldrh	r3, [r2, #0]
    924c:	330f      	adds	r3, #15
    924e:	18c0      	adds	r0, r0, r3
    9250:	230f      	movs	r3, #15
    9252:	4398      	bics	r0, r3
    9254:	8010      	strh	r0, [r2, #0]
           break;
    9256:	e7f1      	b.n	923c <UpdateSectorHead+0xc>
           s_sectorHead = (s_sectorHead + increment + 0x003Fu) & 0xFFC0u;
    9258:	4a03      	ldr	r2, [pc, #12]	; (9268 <UpdateSectorHead+0x38>)
    925a:	8813      	ldrh	r3, [r2, #0]
    925c:	333f      	adds	r3, #63	; 0x3f
    925e:	18c0      	adds	r0, r0, r3
    9260:	233f      	movs	r3, #63	; 0x3f
    9262:	4398      	bics	r0, r3
    9264:	8010      	strh	r0, [r2, #0]
}
    9266:	e7e9      	b.n	923c <UpdateSectorHead+0xc>
    9268:	200003d2 	.word	0x200003d2

0000926c <ComputeCrc>:
    // item not found
    return 0x0000u;
}

static uint16_t ComputeCrc(uint8_t* pData, uint16_t length, uint16_t crc)
{
    926c:	b530      	push	{r4, r5, lr}
    for ( /* empty */ ; length != 0u; length-- )
    926e:	2900      	cmp	r1, #0
    9270:	d019      	beq.n	92a6 <ComputeCrc+0x3a>
    {
        uint8_t x;
        uint8_t data;

        if (pData == NULL)
            data = 0xFF;
    9272:	24ff      	movs	r4, #255	; 0xff
    9274:	e013      	b.n	929e <ComputeCrc+0x32>
    9276:	0023      	movs	r3, r4
        else
            data = *pData;

        x = (uint8_t) ((crc >> 8) ^ data);
    9278:	0a15      	lsrs	r5, r2, #8
    927a:	406b      	eors	r3, r5
        x = x ^ (x >> 4);
    927c:	091d      	lsrs	r5, r3, #4
    927e:	406b      	eors	r3, r5
        crc = (crc << 8) ^ ((uint16_t) x << 12) ^ ((uint16_t) x << 5) ^ (uint16_t) x;
    9280:	0212      	lsls	r2, r2, #8
    9282:	405a      	eors	r2, r3
    9284:	031d      	lsls	r5, r3, #12
    9286:	406a      	eors	r2, r5
    9288:	015b      	lsls	r3, r3, #5
    928a:	405a      	eors	r2, r3
    928c:	b292      	uxth	r2, r2

        if ( pData != NULL )
          pData++;
    928e:	0003      	movs	r3, r0
    9290:	1e5d      	subs	r5, r3, #1
    9292:	41ab      	sbcs	r3, r5
    9294:	18c0      	adds	r0, r0, r3
    for ( /* empty */ ; length != 0u; length-- )
    9296:	3901      	subs	r1, #1
    9298:	b289      	uxth	r1, r1
    929a:	2900      	cmp	r1, #0
    929c:	d003      	beq.n	92a6 <ComputeCrc+0x3a>
        if (pData == NULL)
    929e:	2800      	cmp	r0, #0
    92a0:	d0e9      	beq.n	9276 <ComputeCrc+0xa>
            data = *pData;
    92a2:	7803      	ldrb	r3, [r0, #0]
    92a4:	e7e8      	b.n	9278 <ComputeCrc+0xc>
    }

    return crc;
}
    92a6:	0010      	movs	r0, r2
    92a8:	bd30      	pop	{r4, r5, pc}
    92aa:	Address 0x000092aa is out of bounds.


000092ac <GatherData>:
       be copied to the flash memory \ref s_sectorHead in sector \ref s_sector.

*/

static bool GatherData(uint8_t sourceSector, uint16_t lastBlockPointer, uint16_t offset, uint16_t length, void* pData)
{
    92ac:	b5f0      	push	{r4, r5, r6, r7, lr}
    92ae:	46de      	mov	lr, fp
    92b0:	4657      	mov	r7, sl
    92b2:	b580      	push	{r7, lr}
    92b4:	b089      	sub	sp, #36	; 0x24
    92b6:	9001      	str	r0, [sp, #4]
    92b8:	9102      	str	r1, [sp, #8]
    92ba:	4693      	mov	fp, r2
    uint16_t blockStart;
    uint16_t blockEnd;
    uint16_t count;

    // prepare the correct pointer
    if ( pData != NULL )
    92bc:	9a10      	ldr	r2, [sp, #64]	; 0x40
    92be:	2a00      	cmp	r2, #0
    92c0:	d00d      	beq.n	92de <GatherData+0x32>
    {
        pDestination = (uint8_t*) pData + length;
    92c2:	4692      	mov	sl, r2
    92c4:	449a      	add	sl, r3

    // [readStart, readEnd> is the range of data that can be read during the current
    // pass over the blocks (the range includes readStart, but not readEnd).
    // it is initialized with the requested range
    uint16_t readStart = offset;
    uint16_t readEnd = offset + length;
    92c6:	445b      	add	r3, fp
    92c8:	b29d      	uxth	r5, r3

    // continue until we have all the data that was requested
    while ( readStart != readEnd )
    92ca:	465e      	mov	r6, fp
    92cc:	9c02      	ldr	r4, [sp, #8]
            sourcePointer -= count;
            pDestination -= count;
            D_Nv_Read(sourceSector, sourcePointer, (uint8_t*)pDestination, count);
        }
    }
    return true;
    92ce:	2001      	movs	r0, #1
    while ( readStart != readEnd )
    92d0:	45ab      	cmp	fp, r5
    92d2:	d03e      	beq.n	9352 <GatherData+0xa6>
            D_Nv_Read(sourceSector, currentBlockPointer, (uint8_t*) &blockHeader, BLOCK_HEADER_SIZE);
    92d4:	4f22      	ldr	r7, [pc, #136]	; (9360 <GatherData+0xb4>)
            if ( currentBlockPointer == 0x0000u )
    92d6:	2c00      	cmp	r4, #0
    92d8:	d108      	bne.n	92ec <GatherData+0x40>
                return false;
    92da:	2000      	movs	r0, #0
    92dc:	e039      	b.n	9352 <GatherData+0xa6>
    uint8_t* pDestination = NULL;
    92de:	2200      	movs	r2, #0
    92e0:	4692      	mov	sl, r2
    92e2:	e7f0      	b.n	92c6 <GatherData+0x1a>
            currentBlockPointer = blockHeader.previousBlock;
    92e4:	ab04      	add	r3, sp, #16
    92e6:	895c      	ldrh	r4, [r3, #10]
            if ( currentBlockPointer == 0x0000u )
    92e8:	2c00      	cmp	r4, #0
    92ea:	d031      	beq.n	9350 <GatherData+0xa4>
            D_Nv_Read(sourceSector, currentBlockPointer, (uint8_t*) &blockHeader, BLOCK_HEADER_SIZE);
    92ec:	2310      	movs	r3, #16
    92ee:	aa04      	add	r2, sp, #16
    92f0:	0021      	movs	r1, r4
    92f2:	9801      	ldr	r0, [sp, #4]
    92f4:	47b8      	blx	r7
            blockStart = blockHeader.blockOffset;
    92f6:	ab04      	add	r3, sp, #16
    92f8:	889a      	ldrh	r2, [r3, #4]
            if ( (readEnd <= blockStart) || (readStart >= blockEnd) )
    92fa:	42aa      	cmp	r2, r5
    92fc:	d2f2      	bcs.n	92e4 <GatherData+0x38>
            blockEnd = blockHeader.blockOffset + blockHeader.blockLength;
    92fe:	88db      	ldrh	r3, [r3, #6]
    9300:	18d3      	adds	r3, r2, r3
    9302:	b29b      	uxth	r3, r3
            if ( (readEnd <= blockStart) || (readStart >= blockEnd) )
    9304:	42b3      	cmp	r3, r6
    9306:	d9ed      	bls.n	92e4 <GatherData+0x38>
            else if ( readEnd > blockEnd )
    9308:	42ab      	cmp	r3, r5
    930a:	d201      	bcs.n	9310 <GatherData+0x64>
                readStart = blockEnd;
    930c:	001e      	movs	r6, r3
    930e:	e7e9      	b.n	92e4 <GatherData+0x38>
        uint16_t sourcePointer = (currentBlockPointer + BLOCK_HEADER_SIZE) + (readEnd - blockStart);
    9310:	1aa9      	subs	r1, r5, r2
    9312:	b289      	uxth	r1, r1
        if ( readStart < blockStart )
    9314:	42b2      	cmp	r2, r6
    9316:	d915      	bls.n	9344 <GatherData+0x98>
            currentBlockPointer = blockHeader.previousBlock;
    9318:	ab04      	add	r3, sp, #16
    931a:	895b      	ldrh	r3, [r3, #10]
    931c:	9303      	str	r3, [sp, #12]
            count = readEnd - blockStart;
    931e:	000b      	movs	r3, r1
        readEnd -= count;
    9320:	1aed      	subs	r5, r5, r3
    9322:	b2ad      	uxth	r5, r5
        if ( pDestination != NULL)
    9324:	4652      	mov	r2, sl
    9326:	2a00      	cmp	r2, #0
    9328:	d008      	beq.n	933c <GatherData+0x90>
        uint16_t sourcePointer = (currentBlockPointer + BLOCK_HEADER_SIZE) + (readEnd - blockStart);
    932a:	3410      	adds	r4, #16
    932c:	1909      	adds	r1, r1, r4
            pDestination -= count;
    932e:	1ad2      	subs	r2, r2, r3
    9330:	4692      	mov	sl, r2
            sourcePointer -= count;
    9332:	1ac9      	subs	r1, r1, r3
            D_Nv_Read(sourceSector, sourcePointer, (uint8_t*)pDestination, count);
    9334:	b289      	uxth	r1, r1
    9336:	9801      	ldr	r0, [sp, #4]
    9338:	4c09      	ldr	r4, [pc, #36]	; (9360 <GatherData+0xb4>)
    933a:	47a0      	blx	r4
    while ( readStart != readEnd )
    933c:	42ae      	cmp	r6, r5
    933e:	d00d      	beq.n	935c <GatherData+0xb0>
    9340:	9c03      	ldr	r4, [sp, #12]
    9342:	e7c8      	b.n	92d6 <GatherData+0x2a>
            count = readEnd - readStart;
    9344:	1bab      	subs	r3, r5, r6
    9346:	b29b      	uxth	r3, r3
            readStart = offset;
    9348:	465e      	mov	r6, fp
            currentBlockPointer = lastBlockPointer;
    934a:	9a02      	ldr	r2, [sp, #8]
    934c:	9203      	str	r2, [sp, #12]
    934e:	e7e7      	b.n	9320 <GatherData+0x74>
                return false;
    9350:	2000      	movs	r0, #0
}
    9352:	b009      	add	sp, #36	; 0x24
    9354:	bc0c      	pop	{r2, r3}
    9356:	4692      	mov	sl, r2
    9358:	469b      	mov	fp, r3
    935a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return true;
    935c:	2001      	movs	r0, #1
    935e:	e7f8      	b.n	9352 <GatherData+0xa6>
    9360:	00008fc5 	.word	0x00008fc5

00009364 <ComputeDataCrc>:
{
    9364:	b5f0      	push	{r4, r5, r6, r7, lr}
    9366:	46de      	mov	lr, fp
    9368:	4647      	mov	r7, r8
    936a:	b580      	push	{r7, lr}
    936c:	b087      	sub	sp, #28
    936e:	9004      	str	r0, [sp, #16]
    9370:	9105      	str	r1, [sp, #20]
    length = pBlockHeader->blockLength;
    9372:	7995      	ldrb	r5, [r2, #6]
    9374:	79d3      	ldrb	r3, [r2, #7]
    9376:	021b      	lsls	r3, r3, #8
    9378:	431d      	orrs	r5, r3
    offset = pBlockHeader->blockOffset;
    937a:	7917      	ldrb	r7, [r2, #4]
    937c:	7953      	ldrb	r3, [r2, #5]
    937e:	021b      	lsls	r3, r3, #8
    9380:	431f      	orrs	r7, r3
    for(int8_t i= (length/sizeof(dataBlock)); i>=0; i--)
    9382:	0a2c      	lsrs	r4, r5, #8
    9384:	b264      	sxtb	r4, r4
    9386:	2c00      	cmp	r4, #0
    9388:	db2f      	blt.n	93ea <ComputeDataCrc+0x86>
    938a:	4b1c      	ldr	r3, [pc, #112]	; (93fc <ComputeDataCrc+0x98>)
    938c:	9303      	str	r3, [sp, #12]
            crc = ComputeCrc(((uint8_t*) &dataBlock), dataLength, crc);
    938e:	4b1c      	ldr	r3, [pc, #112]	; (9400 <ComputeDataCrc+0x9c>)
    9390:	4698      	mov	r8, r3
    9392:	e011      	b.n	93b8 <ComputeDataCrc+0x54>
        if (dataLength == 0)
    9394:	2d00      	cmp	r5, #0
    9396:	d02a      	beq.n	93ee <ComputeDataCrc+0x8a>
        if (GatherData(sourceSector, blockPointer, offset, dataLength, dataBlock))
    9398:	4b1a      	ldr	r3, [pc, #104]	; (9404 <ComputeDataCrc+0xa0>)
    939a:	9300      	str	r3, [sp, #0]
    939c:	002b      	movs	r3, r5
    939e:	003a      	movs	r2, r7
    93a0:	9905      	ldr	r1, [sp, #20]
    93a2:	9804      	ldr	r0, [sp, #16]
    93a4:	4e18      	ldr	r6, [pc, #96]	; (9408 <ComputeDataCrc+0xa4>)
    93a6:	47b0      	blx	r6
    93a8:	2800      	cmp	r0, #0
    93aa:	d020      	beq.n	93ee <ComputeDataCrc+0x8a>
    93ac:	0029      	movs	r1, r5
    93ae:	e015      	b.n	93dc <ComputeDataCrc+0x78>
    93b0:	3c01      	subs	r4, #1
    93b2:	b264      	sxtb	r4, r4
    for(int8_t i= (length/sizeof(dataBlock)); i>=0; i--)
    93b4:	1c63      	adds	r3, r4, #1
    93b6:	d01a      	beq.n	93ee <ComputeDataCrc+0x8a>
        if (i)
    93b8:	2c00      	cmp	r4, #0
    93ba:	d0eb      	beq.n	9394 <ComputeDataCrc+0x30>
            length = length - sizeof(dataBlock);
    93bc:	3d01      	subs	r5, #1
    93be:	3dff      	subs	r5, #255	; 0xff
    93c0:	b2ad      	uxth	r5, r5
        if (GatherData(sourceSector, blockPointer, offset, dataLength, dataBlock))
    93c2:	4b10      	ldr	r3, [pc, #64]	; (9404 <ComputeDataCrc+0xa0>)
    93c4:	9300      	str	r3, [sp, #0]
    93c6:	2380      	movs	r3, #128	; 0x80
    93c8:	005b      	lsls	r3, r3, #1
    93ca:	003a      	movs	r2, r7
    93cc:	9905      	ldr	r1, [sp, #20]
    93ce:	9804      	ldr	r0, [sp, #16]
    93d0:	4e0d      	ldr	r6, [pc, #52]	; (9408 <ComputeDataCrc+0xa4>)
    93d2:	47b0      	blx	r6
    93d4:	2800      	cmp	r0, #0
    93d6:	d0eb      	beq.n	93b0 <ComputeDataCrc+0x4c>
            dataLength = sizeof(dataBlock);
    93d8:	2180      	movs	r1, #128	; 0x80
    93da:	0049      	lsls	r1, r1, #1
            offset = offset+dataLength;
    93dc:	187f      	adds	r7, r7, r1
    93de:	b2bf      	uxth	r7, r7
            crc = ComputeCrc(((uint8_t*) &dataBlock), dataLength, crc);
    93e0:	9a03      	ldr	r2, [sp, #12]
    93e2:	4808      	ldr	r0, [pc, #32]	; (9404 <ComputeDataCrc+0xa0>)
    93e4:	47c0      	blx	r8
    93e6:	9003      	str	r0, [sp, #12]
    93e8:	e7e2      	b.n	93b0 <ComputeDataCrc+0x4c>
    uint16_t crc = 0xFFFFu;
    93ea:	4b04      	ldr	r3, [pc, #16]	; (93fc <ComputeDataCrc+0x98>)
    93ec:	9303      	str	r3, [sp, #12]
}
    93ee:	9803      	ldr	r0, [sp, #12]
    93f0:	b007      	add	sp, #28
    93f2:	bc0c      	pop	{r2, r3}
    93f4:	4690      	mov	r8, r2
    93f6:	469b      	mov	fp, r3
    93f8:	bdf0      	pop	{r4, r5, r6, r7, pc}
    93fa:	46c0      	nop			; (mov r8, r8)
    93fc:	0000ffff 	.word	0x0000ffff
    9400:	0000926d 	.word	0x0000926d
    9404:	20000284 	.word	0x20000284
    9408:	000092ad 	.word	0x000092ad

0000940c <FindItemCache>:
{
    940c:	b570      	push	{r4, r5, r6, lr}
    for ( uint8_t cacheIndex = 0u; cacheIndex < s_itemCount; cacheIndex++ )
    940e:	4b16      	ldr	r3, [pc, #88]	; (9468 <FindItemCache+0x5c>)
    9410:	781c      	ldrb	r4, [r3, #0]
    9412:	2c00      	cmp	r4, #0
    9414:	d026      	beq.n	9464 <FindItemCache+0x58>
        if ( cache->id == id )
    9416:	4b15      	ldr	r3, [pc, #84]	; (946c <FindItemCache+0x60>)
    9418:	881b      	ldrh	r3, [r3, #0]
    941a:	4283      	cmp	r3, r0
    941c:	d016      	beq.n	944c <FindItemCache+0x40>
    941e:	2301      	movs	r3, #1
    9420:	4e12      	ldr	r6, [pc, #72]	; (946c <FindItemCache+0x60>)
    for ( uint8_t cacheIndex = 0u; cacheIndex < s_itemCount; cacheIndex++ )
    9422:	b2da      	uxtb	r2, r3
    9424:	4294      	cmp	r4, r2
    9426:	d91b      	bls.n	9460 <FindItemCache+0x54>
        Item_t *cache = &s_itemCache[cacheIndex];
    9428:	001d      	movs	r5, r3
        if ( cache->id == id )
    942a:	1c59      	adds	r1, r3, #1
    942c:	009a      	lsls	r2, r3, #2
    942e:	5ab2      	ldrh	r2, [r6, r2]
    9430:	4282      	cmp	r2, r0
    9432:	d001      	beq.n	9438 <FindItemCache+0x2c>
    9434:	000b      	movs	r3, r1
    9436:	e7f4      	b.n	9422 <FindItemCache+0x16>
        Item_t *cache = &s_itemCache[cacheIndex];
    9438:	009b      	lsls	r3, r3, #2
    943a:	480c      	ldr	r0, [pc, #48]	; (946c <FindItemCache+0x60>)
    943c:	18c0      	adds	r0, r0, r3
            assert(cache->lastBlock != 0x0000);
    943e:	00ad      	lsls	r5, r5, #2
    9440:	4b0a      	ldr	r3, [pc, #40]	; (946c <FindItemCache+0x60>)
    9442:	195d      	adds	r5, r3, r5
    9444:	886b      	ldrh	r3, [r5, #2]
    9446:	2b00      	cmp	r3, #0
    9448:	d003      	beq.n	9452 <FindItemCache+0x46>
}
    944a:	bd70      	pop	{r4, r5, r6, pc}
        Item_t *cache = &s_itemCache[cacheIndex];
    944c:	4807      	ldr	r0, [pc, #28]	; (946c <FindItemCache+0x60>)
    944e:	2500      	movs	r5, #0
    9450:	e7f5      	b.n	943e <FindItemCache+0x32>
            assert(cache->lastBlock != 0x0000);
    9452:	4b07      	ldr	r3, [pc, #28]	; (9470 <FindItemCache+0x64>)
    9454:	4a07      	ldr	r2, [pc, #28]	; (9474 <FindItemCache+0x68>)
    9456:	218c      	movs	r1, #140	; 0x8c
    9458:	31ff      	adds	r1, #255	; 0xff
    945a:	4807      	ldr	r0, [pc, #28]	; (9478 <FindItemCache+0x6c>)
    945c:	4c07      	ldr	r4, [pc, #28]	; (947c <FindItemCache+0x70>)
    945e:	47a0      	blx	r4
    return NULL;
    9460:	2000      	movs	r0, #0
    9462:	e7f2      	b.n	944a <FindItemCache+0x3e>
    9464:	2000      	movs	r0, #0
    9466:	e7f0      	b.n	944a <FindItemCache+0x3e>
    9468:	200003c8 	.word	0x200003c8
    946c:	200003a0 	.word	0x200003a0
    9470:	000161d8 	.word	0x000161d8
    9474:	000162c0 	.word	0x000162c0
    9478:	000161f4 	.word	0x000161f4
    947c:	00014c1d 	.word	0x00014c1d

00009480 <FindItem>:
{
    9480:	b510      	push	{r4, lr}
    Item_t *cache = FindItemCache(id);
    9482:	4b05      	ldr	r3, [pc, #20]	; (9498 <FindItem+0x18>)
    9484:	4798      	blx	r3
    if (cache)
    9486:	2800      	cmp	r0, #0
    9488:	d004      	beq.n	9494 <FindItem+0x14>
        return cache->lastBlock;
    948a:	7883      	ldrb	r3, [r0, #2]
    948c:	78c0      	ldrb	r0, [r0, #3]
    948e:	0200      	lsls	r0, r0, #8
    9490:	4318      	orrs	r0, r3
}
    9492:	bd10      	pop	{r4, pc}
    return 0x0000u;
    9494:	2000      	movs	r0, #0
    9496:	e7fc      	b.n	9492 <FindItem+0x12>
    9498:	0000940d 	.word	0x0000940d

0000949c <CreateItemCache>:
{
    949c:	b510      	push	{r4, lr}
    949e:	0004      	movs	r4, r0
    assert(FindItemCache(id) == NULL);
    94a0:	4b0e      	ldr	r3, [pc, #56]	; (94dc <CreateItemCache+0x40>)
    94a2:	4798      	blx	r3
    94a4:	2800      	cmp	r0, #0
    94a6:	d10b      	bne.n	94c0 <CreateItemCache+0x24>
    assert(s_itemCount < MAX_ITEM_COUNT);
    94a8:	4b0d      	ldr	r3, [pc, #52]	; (94e0 <CreateItemCache+0x44>)
    94aa:	781b      	ldrb	r3, [r3, #0]
    94ac:	2b09      	cmp	r3, #9
    94ae:	d80e      	bhi.n	94ce <CreateItemCache+0x32>
    Item_t *cache = &s_itemCache[s_itemCount++];
    94b0:	1c59      	adds	r1, r3, #1
    94b2:	4a0b      	ldr	r2, [pc, #44]	; (94e0 <CreateItemCache+0x44>)
    94b4:	7011      	strb	r1, [r2, #0]
    cache->id = id;
    94b6:	480b      	ldr	r0, [pc, #44]	; (94e4 <CreateItemCache+0x48>)
    94b8:	009b      	lsls	r3, r3, #2
    94ba:	521c      	strh	r4, [r3, r0]
    Item_t *cache = &s_itemCache[s_itemCount++];
    94bc:	18c0      	adds	r0, r0, r3
}
    94be:	bd10      	pop	{r4, pc}
    assert(FindItemCache(id) == NULL);
    94c0:	4b09      	ldr	r3, [pc, #36]	; (94e8 <CreateItemCache+0x4c>)
    94c2:	4a0a      	ldr	r2, [pc, #40]	; (94ec <CreateItemCache+0x50>)
    94c4:	21cc      	movs	r1, #204	; 0xcc
    94c6:	0049      	lsls	r1, r1, #1
    94c8:	4809      	ldr	r0, [pc, #36]	; (94f0 <CreateItemCache+0x54>)
    94ca:	4c0a      	ldr	r4, [pc, #40]	; (94f4 <CreateItemCache+0x58>)
    94cc:	47a0      	blx	r4
    assert(s_itemCount < MAX_ITEM_COUNT);
    94ce:	4b0a      	ldr	r3, [pc, #40]	; (94f8 <CreateItemCache+0x5c>)
    94d0:	4a06      	ldr	r2, [pc, #24]	; (94ec <CreateItemCache+0x50>)
    94d2:	219a      	movs	r1, #154	; 0x9a
    94d4:	31ff      	adds	r1, #255	; 0xff
    94d6:	4806      	ldr	r0, [pc, #24]	; (94f0 <CreateItemCache+0x54>)
    94d8:	4c06      	ldr	r4, [pc, #24]	; (94f4 <CreateItemCache+0x58>)
    94da:	47a0      	blx	r4
    94dc:	0000940d 	.word	0x0000940d
    94e0:	200003c8 	.word	0x200003c8
    94e4:	200003a0 	.word	0x200003a0
    94e8:	00016180 	.word	0x00016180
    94ec:	000162d0 	.word	0x000162d0
    94f0:	000161f4 	.word	0x000161f4
    94f4:	00014c1d 	.word	0x00014c1d
    94f8:	0001619c 	.word	0x0001619c

000094fc <DeleteItemCache>:
{
    94fc:	b510      	push	{r4, lr}
    assert(FindItemCache(id) != NULL);
    94fe:	4b0b      	ldr	r3, [pc, #44]	; (952c <DeleteItemCache+0x30>)
    9500:	4798      	blx	r3
    9502:	2800      	cmp	r0, #0
    9504:	d00b      	beq.n	951e <DeleteItemCache+0x22>
    *cache = s_itemCache[--s_itemCount];
    9506:	4b0a      	ldr	r3, [pc, #40]	; (9530 <DeleteItemCache+0x34>)
    9508:	7819      	ldrb	r1, [r3, #0]
    950a:	3901      	subs	r1, #1
    950c:	b2c9      	uxtb	r1, r1
    950e:	7019      	strb	r1, [r3, #0]
    9510:	0089      	lsls	r1, r1, #2
    9512:	4b08      	ldr	r3, [pc, #32]	; (9534 <DeleteItemCache+0x38>)
    9514:	1859      	adds	r1, r3, r1
    9516:	2204      	movs	r2, #4
    9518:	4b07      	ldr	r3, [pc, #28]	; (9538 <DeleteItemCache+0x3c>)
    951a:	4798      	blx	r3
}
    951c:	bd10      	pop	{r4, pc}
    assert(FindItemCache(id) != NULL);
    951e:	4b07      	ldr	r3, [pc, #28]	; (953c <DeleteItemCache+0x40>)
    9520:	4a07      	ldr	r2, [pc, #28]	; (9540 <DeleteItemCache+0x44>)
    9522:	21d3      	movs	r1, #211	; 0xd3
    9524:	0049      	lsls	r1, r1, #1
    9526:	4807      	ldr	r0, [pc, #28]	; (9544 <DeleteItemCache+0x48>)
    9528:	4c07      	ldr	r4, [pc, #28]	; (9548 <DeleteItemCache+0x4c>)
    952a:	47a0      	blx	r4
    952c:	0000940d 	.word	0x0000940d
    9530:	200003c8 	.word	0x200003c8
    9534:	200003a0 	.word	0x200003a0
    9538:	00014cdf 	.word	0x00014cdf
    953c:	000161bc 	.word	0x000161bc
    9540:	000162e0 	.word	0x000162e0
    9544:	000161f4 	.word	0x000161f4
    9548:	00014c1d 	.word	0x00014c1d

0000954c <eraseSectorTimerFired>:
{
    954c:	b510      	push	{r4, lr}
    if (!PowerSupplyTooLow())
    954e:	4b05      	ldr	r3, [pc, #20]	; (9564 <eraseSectorTimerFired+0x18>)
    9550:	4798      	blx	r3
    9552:	2800      	cmp	r0, #0
    9554:	d000      	beq.n	9558 <eraseSectorTimerFired+0xc>
}
    9556:	bd10      	pop	{r4, pc}
        D_Nv_EraseSector(s_sectorToErase);
    9558:	4b03      	ldr	r3, [pc, #12]	; (9568 <eraseSectorTimerFired+0x1c>)
    955a:	7818      	ldrb	r0, [r3, #0]
    955c:	4b03      	ldr	r3, [pc, #12]	; (956c <eraseSectorTimerFired+0x20>)
    955e:	4798      	blx	r3
}
    9560:	e7f9      	b.n	9556 <eraseSectorTimerFired+0xa>
    9562:	46c0      	nop			; (mov r8, r8)
    9564:	00009215 	.word	0x00009215
    9568:	20000009 	.word	0x20000009
    956c:	000091a5 	.word	0x000091a5

00009570 <EraseSector>:

static bool EraseSector(void)
{
    9570:	b510      	push	{r4, lr}
    // Erase the sector
    D_Nv_EraseSector(s_sector);
    9572:	4c08      	ldr	r4, [pc, #32]	; (9594 <EraseSector+0x24>)
    9574:	7820      	ldrb	r0, [r4, #0]
    9576:	4b08      	ldr	r3, [pc, #32]	; (9598 <EraseSector+0x28>)
    9578:	4798      	blx	r3
    // check if the erase succeeded
    if ( !D_Nv_IsEmpty(s_sector, 0u, SECTOR_SIZE) )
    957a:	7820      	ldrb	r0, [r4, #0]
    957c:	2280      	movs	r2, #128	; 0x80
    957e:	0192      	lsls	r2, r2, #6
    9580:	2100      	movs	r1, #0
    9582:	4b06      	ldr	r3, [pc, #24]	; (959c <EraseSector+0x2c>)
    9584:	4798      	blx	r3
    9586:	2800      	cmp	r0, #0
    9588:	d003      	beq.n	9592 <EraseSector+0x22>
    {
        return false;
    }
    s_sectorHead =  ITEMS_AREA_START_ADDRESS;
    958a:	2280      	movs	r2, #128	; 0x80
    958c:	0052      	lsls	r2, r2, #1
    958e:	4b04      	ldr	r3, [pc, #16]	; (95a0 <EraseSector+0x30>)
    9590:	801a      	strh	r2, [r3, #0]

    return true;
}
    9592:	bd10      	pop	{r4, pc}
    9594:	200003d0 	.word	0x200003d0
    9598:	000091a5 	.word	0x000091a5
    959c:	000091f9 	.word	0x000091f9
    95a0:	200003d2 	.word	0x200003d2

000095a4 <WriteAndCheck>:
{
    95a4:	b5f0      	push	{r4, r5, r6, r7, lr}
    95a6:	b083      	sub	sp, #12
    95a8:	9001      	str	r0, [sp, #4]
    95aa:	000d      	movs	r5, r1
    95ac:	0016      	movs	r6, r2
    D_Nv_Write(s_sector, offset, pData, length);
    95ae:	4f07      	ldr	r7, [pc, #28]	; (95cc <WriteAndCheck+0x28>)
    95b0:	7838      	ldrb	r0, [r7, #0]
    95b2:	0013      	movs	r3, r2
    95b4:	000a      	movs	r2, r1
    95b6:	9901      	ldr	r1, [sp, #4]
    95b8:	4c05      	ldr	r4, [pc, #20]	; (95d0 <WriteAndCheck+0x2c>)
    95ba:	47a0      	blx	r4
    return D_Nv_IsEqual(s_sector, offset, pData, length);
    95bc:	7838      	ldrb	r0, [r7, #0]
    95be:	0033      	movs	r3, r6
    95c0:	002a      	movs	r2, r5
    95c2:	9901      	ldr	r1, [sp, #4]
    95c4:	4c03      	ldr	r4, [pc, #12]	; (95d4 <WriteAndCheck+0x30>)
    95c6:	47a0      	blx	r4
}
    95c8:	b003      	add	sp, #12
    95ca:	bdf0      	pop	{r4, r5, r6, r7, pc}
    95cc:	200003d0 	.word	0x200003d0
    95d0:	0000903d 	.word	0x0000903d
    95d4:	00009209 	.word	0x00009209

000095d8 <WriteSectorHeader>:

static bool WriteSectorHeader(uint32_t sequenceNumber)
{
    95d8:	b510      	push	{r4, lr}
    95da:	b086      	sub	sp, #24
    // write sector header
    SectorHeader_t sectorHeader;
    sectorHeader.signature[0] = (uint8_t) 'A';
    95dc:	ac01      	add	r4, sp, #4
    95de:	2341      	movs	r3, #65	; 0x41
    95e0:	70a3      	strb	r3, [r4, #2]
    sectorHeader.signature[1] = (uint8_t) 'T';
    95e2:	3313      	adds	r3, #19
    95e4:	70e3      	strb	r3, [r4, #3]
    sectorHeader.signature[2] = (uint8_t) 'S';
    95e6:	3b01      	subs	r3, #1
    95e8:	7123      	strb	r3, [r4, #4]
    sectorHeader.signature[3] = (uint8_t) 'N';
    95ea:	3b05      	subs	r3, #5
    95ec:	7163      	strb	r3, [r4, #5]
    sectorHeader.signature[4] = (uint8_t) 'v';
    95ee:	3328      	adds	r3, #40	; 0x28
    95f0:	71a3      	strb	r3, [r4, #6]
    sectorHeader.signature[5] = (uint8_t) '2';
    95f2:	3b44      	subs	r3, #68	; 0x44
    95f4:	71e3      	strb	r3, [r4, #7]
    sectorHeader.sequenceNumber = sequenceNumber;
    95f6:	9003      	str	r0, [sp, #12]
    sectorHeader.sequenceParity = sequenceNumber ^ 0xFFFFFFFFuL;
    95f8:	43c0      	mvns	r0, r0
    95fa:	9004      	str	r0, [sp, #16]
    sectorHeader.nextPageAddressAfterCompact = s_nextPageAddressAfterCompact;
    95fc:	4b08      	ldr	r3, [pc, #32]	; (9620 <WriteSectorHeader+0x48>)
    95fe:	881b      	ldrh	r3, [r3, #0]
    9600:	8223      	strh	r3, [r4, #16]
    return ComputeCrc(((uint8_t*) pSectorHeader) + sizeof(pSectorHeader->headerCrc), (sizeof(SectorHeader_t)- sizeof(pSectorHeader->headerCrc)), 0xFFFFu); // skip headerCrc field
    9602:	4a08      	ldr	r2, [pc, #32]	; (9624 <WriteSectorHeader+0x4c>)
    9604:	2110      	movs	r1, #16
    9606:	466b      	mov	r3, sp
    9608:	1d98      	adds	r0, r3, #6
    960a:	4b07      	ldr	r3, [pc, #28]	; (9628 <WriteSectorHeader+0x50>)
    960c:	4798      	blx	r3
    sectorHeader.headerCrc = ComputeSectorHeaderCrc(&sectorHeader);
    960e:	8020      	strh	r0, [r4, #0]
    if ( !WriteAndCheck(0u, (uint8_t*) &sectorHeader, SECTOR_HEADER_SIZE) )
    9610:	2212      	movs	r2, #18
    9612:	0021      	movs	r1, r4
    9614:	2000      	movs	r0, #0
    9616:	4b05      	ldr	r3, [pc, #20]	; (962c <WriteSectorHeader+0x54>)
    9618:	4798      	blx	r3
    {
        return false;
    }
    return true;
}
    961a:	b006      	add	sp, #24
    961c:	bd10      	pop	{r4, pc}
    961e:	46c0      	nop			; (mov r8, r8)
    9620:	200003ca 	.word	0x200003ca
    9624:	0000ffff 	.word	0x0000ffff
    9628:	0000926d 	.word	0x0000926d
    962c:	000095a5 	.word	0x000095a5

00009630 <SmartCompacting>:
 * without following any alignements as normal item updates.Items are filled into
  256 byte buffer(= row size), committed in shot which takes 4 page writs maximum
 */

static bool SmartCompacting(uint8_t* compactBlock, uint16_t curItemLength)
{
    9630:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    9632:	0004      	movs	r4, r0
    9634:	000d      	movs	r5, r1
    //manupulate the current compact length
    currentCompactLength += curItemLength;
    9636:	4a21      	ldr	r2, [pc, #132]	; (96bc <SmartCompacting+0x8c>)
    9638:	8813      	ldrh	r3, [r2, #0]
    963a:	18cb      	adds	r3, r1, r3
    963c:	b29b      	uxth	r3, r3
    963e:	8013      	strh	r3, [r2, #0]

    // if the complete buffer cannot be filled with the current item
    if ( currentCompactLength < ROW_SIZE)
    9640:	2bff      	cmp	r3, #255	; 0xff
    9642:	d92e      	bls.n	96a2 <SmartCompacting+0x72>
    else  //(currentCompactLength >= ROW_SIZE) cases
    {
        uint16_t dataBlockOffset = 0;


        memcpy(compactBlock + compactBlockOffset, dataBlock, (ROW_SIZE - compactBlockOffset));
    9644:	4b1e      	ldr	r3, [pc, #120]	; (96c0 <SmartCompacting+0x90>)
    9646:	881a      	ldrh	r2, [r3, #0]
    9648:	1880      	adds	r0, r0, r2
    964a:	2580      	movs	r5, #128	; 0x80
    964c:	006d      	lsls	r5, r5, #1
    964e:	1aaa      	subs	r2, r5, r2
    9650:	491c      	ldr	r1, [pc, #112]	; (96c4 <SmartCompacting+0x94>)
    9652:	4b1d      	ldr	r3, [pc, #116]	; (96c8 <SmartCompacting+0x98>)
    9654:	4798      	blx	r3
        if ( !WriteAndCheck(s_sectorHead, compactBlock, ROW_SIZE ))
    9656:	4b1d      	ldr	r3, [pc, #116]	; (96cc <SmartCompacting+0x9c>)
    9658:	8818      	ldrh	r0, [r3, #0]
    965a:	002a      	movs	r2, r5
    965c:	0021      	movs	r1, r4
    965e:	4b1c      	ldr	r3, [pc, #112]	; (96d0 <SmartCompacting+0xa0>)
    9660:	4798      	blx	r3
    9662:	1e05      	subs	r5, r0, #0
    9664:	d027      	beq.n	96b6 <SmartCompacting+0x86>
        {
            return false;
        }
        UpdateSectorHead(ROW_SIZE, ITEM_NO_ALIGNMENT);
    9666:	2100      	movs	r1, #0
    9668:	2080      	movs	r0, #128	; 0x80
    966a:	0040      	lsls	r0, r0, #1
    966c:	4b19      	ldr	r3, [pc, #100]	; (96d4 <SmartCompacting+0xa4>)
    966e:	4798      	blx	r3
        dataBlockOffset += (ROW_SIZE - compactBlockOffset);
    9670:	4b13      	ldr	r3, [pc, #76]	; (96c0 <SmartCompacting+0x90>)
    9672:	8818      	ldrh	r0, [r3, #0]
        compactBlockOffset = 0;
    9674:	2200      	movs	r2, #0
    9676:	801a      	strh	r2, [r3, #0]
        currentCompactLength -= ROW_SIZE;
    9678:	4b10      	ldr	r3, [pc, #64]	; (96bc <SmartCompacting+0x8c>)
    967a:	881e      	ldrh	r6, [r3, #0]
    967c:	3e01      	subs	r6, #1
    967e:	3eff      	subs	r6, #255	; 0xff
    9680:	b2b6      	uxth	r6, r6
    9682:	801e      	strh	r6, [r3, #0]
        if (currentCompactLength)
    9684:	2e00      	cmp	r6, #0
    9686:	d016      	beq.n	96b6 <SmartCompacting+0x86>
        dataBlockOffset += (ROW_SIZE - compactBlockOffset);
    9688:	2180      	movs	r1, #128	; 0x80
    968a:	0049      	lsls	r1, r1, #1
    968c:	1a09      	subs	r1, r1, r0
        {
            memcpy(compactBlock, dataBlock + dataBlockOffset, currentCompactLength);
    968e:	b289      	uxth	r1, r1
    9690:	4b0c      	ldr	r3, [pc, #48]	; (96c4 <SmartCompacting+0x94>)
    9692:	1859      	adds	r1, r3, r1
    9694:	0032      	movs	r2, r6
    9696:	0020      	movs	r0, r4
    9698:	4b0b      	ldr	r3, [pc, #44]	; (96c8 <SmartCompacting+0x98>)
    969a:	4798      	blx	r3
            compactBlockOffset = currentCompactLength;
    969c:	4b08      	ldr	r3, [pc, #32]	; (96c0 <SmartCompacting+0x90>)
    969e:	801e      	strh	r6, [r3, #0]
    96a0:	e009      	b.n	96b6 <SmartCompacting+0x86>
        memcpy(compactBlock + compactBlockOffset, dataBlock, curItemLength);
    96a2:	4e07      	ldr	r6, [pc, #28]	; (96c0 <SmartCompacting+0x90>)
    96a4:	8837      	ldrh	r7, [r6, #0]
    96a6:	19c0      	adds	r0, r0, r7
    96a8:	000a      	movs	r2, r1
    96aa:	4906      	ldr	r1, [pc, #24]	; (96c4 <SmartCompacting+0x94>)
    96ac:	4b06      	ldr	r3, [pc, #24]	; (96c8 <SmartCompacting+0x98>)
    96ae:	4798      	blx	r3
        compactBlockOffset += curItemLength;
    96b0:	19ed      	adds	r5, r5, r7
    96b2:	8035      	strh	r5, [r6, #0]
        return true;
    96b4:	2501      	movs	r5, #1
        }
    }

    return true;

}
    96b6:	0028      	movs	r0, r5
    96b8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    96ba:	46c0      	nop			; (mov r8, r8)
    96bc:	20000280 	.word	0x20000280
    96c0:	20000254 	.word	0x20000254
    96c4:	20000284 	.word	0x20000284
    96c8:	00014cdf 	.word	0x00014cdf
    96cc:	200003d2 	.word	0x200003d2
    96d0:	000095a5 	.word	0x000095a5
    96d4:	00009231 	.word	0x00009231

000096d8 <CompactSector>:
 * This is because the itemCache, sector head and sector selector will
 * be messed up.
 */

static bool CompactSector(void)
{
    96d8:	b5f0      	push	{r4, r5, r6, r7, lr}
    96da:	46de      	mov	lr, fp
    96dc:	4657      	mov	r7, sl
    96de:	464e      	mov	r6, r9
    96e0:	4645      	mov	r5, r8
    96e2:	b5e0      	push	{r5, r6, r7, lr}
    96e4:	b0d5      	sub	sp, #340	; 0x154
    PRINTA(("CompactSector(s=%X)", s_sector));
#endif
    uint8_t compactBlock[ROW_SIZE];

    // stop timer for preemptive compact sector as this will not be needed any more
    SYS_TimerStop(&compactSectorTimer);
    96e6:	487b      	ldr	r0, [pc, #492]	; (98d4 <CompactSector+0x1fc>)
    96e8:	4b7b      	ldr	r3, [pc, #492]	; (98d8 <CompactSector+0x200>)
    96ea:	4798      	blx	r3

    // stop the compact item as a compact sector will compact all items
    s_compactItemId = 0u;
    96ec:	2300      	movs	r3, #0
    96ee:	4a7b      	ldr	r2, [pc, #492]	; (98dc <CompactSector+0x204>)
    96f0:	8013      	strh	r3, [r2, #0]
    s_compactItemLength = 0u;
    96f2:	4a7b      	ldr	r2, [pc, #492]	; (98e0 <CompactSector+0x208>)
    96f4:	8013      	strh	r3, [r2, #0]

    compactBlockOffset = 0;
    96f6:	4a7b      	ldr	r2, [pc, #492]	; (98e4 <CompactSector+0x20c>)
    96f8:	8013      	strh	r3, [r2, #0]
    currentCompactLength = 0;
    96fa:	4a7b      	ldr	r2, [pc, #492]	; (98e8 <CompactSector+0x210>)
    96fc:	8013      	strh	r3, [r2, #0]

    uint8_t sourceSector = s_sector;
    96fe:	4b7b      	ldr	r3, [pc, #492]	; (98ec <CompactSector+0x214>)
    9700:	781b      	ldrb	r3, [r3, #0]
    9702:	001f      	movs	r7, r3
    9704:	9303      	str	r3, [sp, #12]

    // get the sector header for the source sector
    SectorHeader_t sectorHeader;
    D_Nv_Read(sourceSector, 0u, (uint8_t*) &sectorHeader, SECTOR_HEADER_SIZE);
    9706:	2312      	movs	r3, #18
    9708:	aa0f      	add	r2, sp, #60	; 0x3c
    970a:	2100      	movs	r1, #0
    970c:	0038      	movs	r0, r7
    970e:	4c78      	ldr	r4, [pc, #480]	; (98f0 <CompactSector+0x218>)
    9710:	47a0      	blx	r4

    uint32_t nextSequenceNumber = sectorHeader.sequenceNumber - 1uL;
    9712:	9b11      	ldr	r3, [sp, #68]	; 0x44
    9714:	9309      	str	r3, [sp, #36]	; 0x24

    // find and prepare a destination sector
    do
    {
        s_sector++;
    9716:	4c75      	ldr	r4, [pc, #468]	; (98ec <CompactSector+0x214>)
        if ( s_sector >= (FIRST_SECTOR + SECTOR_COUNT) )
        {
            s_sector = FIRST_SECTOR;
    9718:	0025      	movs	r5, r4
        s_sector++;
    971a:	0026      	movs	r6, r4
    971c:	e008      	b.n	9730 <CompactSector+0x58>
    971e:	7033      	strb	r3, [r6, #0]
        }

        if ( s_sector == sourceSector )
    9720:	4b72      	ldr	r3, [pc, #456]	; (98ec <CompactSector+0x214>)
    9722:	781b      	ldrb	r3, [r3, #0]
    9724:	42bb      	cmp	r3, r7
    9726:	d00b      	beq.n	9740 <CompactSector+0x68>
        {
            // all sector failed to initialize
            assert(false);
        }
    }
    while ( !EraseSector());
    9728:	4b72      	ldr	r3, [pc, #456]	; (98f4 <CompactSector+0x21c>)
    972a:	4798      	blx	r3
    972c:	2800      	cmp	r0, #0
    972e:	d10d      	bne.n	974c <CompactSector+0x74>
        s_sector++;
    9730:	7823      	ldrb	r3, [r4, #0]
    9732:	3301      	adds	r3, #1
    9734:	b2db      	uxtb	r3, r3
        if ( s_sector >= (FIRST_SECTOR + SECTOR_COUNT) )
    9736:	2b01      	cmp	r3, #1
    9738:	d9f1      	bls.n	971e <CompactSector+0x46>
            s_sector = FIRST_SECTOR;
    973a:	2300      	movs	r3, #0
    973c:	702b      	strb	r3, [r5, #0]
    973e:	e7ef      	b.n	9720 <CompactSector+0x48>
            assert(false);
    9740:	4b6d      	ldr	r3, [pc, #436]	; (98f8 <CompactSector+0x220>)
    9742:	4a6e      	ldr	r2, [pc, #440]	; (98fc <CompactSector+0x224>)
    9744:	496e      	ldr	r1, [pc, #440]	; (9900 <CompactSector+0x228>)
    9746:	486f      	ldr	r0, [pc, #444]	; (9904 <CompactSector+0x22c>)
    9748:	4c6f      	ldr	r4, [pc, #444]	; (9908 <CompactSector+0x230>)
    974a:	47a0      	blx	r4

    // Traverse the item cache, writing all items to the new sector
    for (uint8_t cacheIndex = 0; cacheIndex < s_itemCount; cacheIndex++) {
    974c:	4b6f      	ldr	r3, [pc, #444]	; (990c <CompactSector+0x234>)
    974e:	781b      	ldrb	r3, [r3, #0]
    9750:	2b00      	cmp	r3, #0
    9752:	d06a      	beq.n	982a <CompactSector+0x152>
    9754:	2300      	movs	r3, #0
    9756:	9306      	str	r3, [sp, #24]

        blockHeader.dataCrc =  ComputeDataCrc(sourceSector, lastBlockPointer, &blockHeader);

        blockHeader.headerCrc = ComputeHeaderCrc(&blockHeader);

        memset(dataBlock, 0xFF, sizeof(dataBlock));
    9758:	3301      	adds	r3, #1
    975a:	33ff      	adds	r3, #255	; 0xff
    975c:	4699      	mov	r9, r3
            uint16_t bytesToGather;
            uint16_t inDataOffset = 0;

            do
            {
              bytesToGather =  (currLength > ROW_SIZE) ? ROW_SIZE : currLength; 
    975e:	466a      	mov	r2, sp
    9760:	82d3      	strh	r3, [r2, #22]
            if (!GatherData(sourceSector, lastBlockPointer, 0u, blockHeader.itemLength, (dataBlock + BLOCK_HEADER_SIZE )))
    9762:	4b6b      	ldr	r3, [pc, #428]	; (9910 <CompactSector+0x238>)
    9764:	3310      	adds	r3, #16
    9766:	9308      	str	r3, [sp, #32]
        Item_t *cache = &s_itemCache[cacheIndex];
    9768:	9b06      	ldr	r3, [sp, #24]
    976a:	9307      	str	r3, [sp, #28]
        uint16_t lastBlockPointer = cache->lastBlock;
    976c:	009f      	lsls	r7, r3, #2
    976e:	4b69      	ldr	r3, [pc, #420]	; (9914 <CompactSector+0x23c>)
    9770:	469c      	mov	ip, r3
    9772:	4467      	add	r7, ip
    9774:	887b      	ldrh	r3, [r7, #2]
    9776:	001d      	movs	r5, r3
    9778:	9304      	str	r3, [sp, #16]
        D_Nv_Read(sourceSector, lastBlockPointer, (uint8_t*) &blockHeader, BLOCK_HEADER_SIZE);
    977a:	2310      	movs	r3, #16
    977c:	aa0b      	add	r2, sp, #44	; 0x2c
    977e:	0029      	movs	r1, r5
    9780:	9803      	ldr	r0, [sp, #12]
    9782:	4680      	mov	r8, r0
    9784:	4c5a      	ldr	r4, [pc, #360]	; (98f0 <CompactSector+0x218>)
    9786:	47a0      	blx	r4
        blockHeader.blockOffset = 0x0000u;
    9788:	ae0b      	add	r6, sp, #44	; 0x2c
    978a:	2300      	movs	r3, #0
    978c:	80b3      	strh	r3, [r6, #4]
        blockHeader.blockLength = blockHeader.itemLength;
    978e:	8934      	ldrh	r4, [r6, #8]
    9790:	80f4      	strh	r4, [r6, #6]
        blockHeader.previousBlock = 0x0000u;
    9792:	8173      	strh	r3, [r6, #10]
        blockHeader.writeCount = 0u;
    9794:	81b3      	strh	r3, [r6, #12]
        uint16_t currLength = BLOCK_HEADER_SIZE + blockHeader.itemLength;
    9796:	3410      	adds	r4, #16
    9798:	b2a4      	uxth	r4, r4
        blockHeader.dataCrc =  ComputeDataCrc(sourceSector, lastBlockPointer, &blockHeader);
    979a:	0032      	movs	r2, r6
    979c:	0029      	movs	r1, r5
    979e:	4640      	mov	r0, r8
    97a0:	4b5d      	ldr	r3, [pc, #372]	; (9918 <CompactSector+0x240>)
    97a2:	4798      	blx	r3
    97a4:	8030      	strh	r0, [r6, #0]
    return ComputeCrc(((uint8_t*) pBlockHeader), (sizeof(BlockHeader_t) - sizeof(pBlockHeader->headerCrc)), 0xFFFFu); // skip headerCrc field
    97a6:	4a5d      	ldr	r2, [pc, #372]	; (991c <CompactSector+0x244>)
    97a8:	210e      	movs	r1, #14
    97aa:	a80b      	add	r0, sp, #44	; 0x2c
    97ac:	4b5c      	ldr	r3, [pc, #368]	; (9920 <CompactSector+0x248>)
    97ae:	4798      	blx	r3
        blockHeader.headerCrc = ComputeHeaderCrc(&blockHeader);
    97b0:	81f0      	strh	r0, [r6, #14]
        memset(dataBlock, 0xFF, sizeof(dataBlock));
    97b2:	4d57      	ldr	r5, [pc, #348]	; (9910 <CompactSector+0x238>)
    97b4:	464a      	mov	r2, r9
    97b6:	21ff      	movs	r1, #255	; 0xff
    97b8:	0028      	movs	r0, r5
    97ba:	4b5a      	ldr	r3, [pc, #360]	; (9924 <CompactSector+0x24c>)
    97bc:	4798      	blx	r3
        memcpy(dataBlock, &blockHeader, BLOCK_HEADER_SIZE);
    97be:	002b      	movs	r3, r5
    97c0:	ce07      	ldmia	r6!, {r0, r1, r2}
    97c2:	c307      	stmia	r3!, {r0, r1, r2}
    97c4:	6832      	ldr	r2, [r6, #0]
    97c6:	601a      	str	r2, [r3, #0]
        cache->lastBlock = s_sectorHead  + compactBlockOffset;
    97c8:	4b57      	ldr	r3, [pc, #348]	; (9928 <CompactSector+0x250>)
    97ca:	881b      	ldrh	r3, [r3, #0]
    97cc:	4a45      	ldr	r2, [pc, #276]	; (98e4 <CompactSector+0x20c>)
    97ce:	8812      	ldrh	r2, [r2, #0]
    97d0:	189b      	adds	r3, r3, r2
    97d2:	807b      	strh	r3, [r7, #2]
        if (currLength <= ROW_SIZE)
    97d4:	454c      	cmp	r4, r9
    97d6:	d904      	bls.n	97e2 <CompactSector+0x10a>
    97d8:	2600      	movs	r6, #0
    97da:	2310      	movs	r3, #16
              
              if (!GatherData(sourceSector, lastBlockPointer, inDataOffset, (bytesToGather - dataBlockOffset) , (dataBlock + dataBlockOffset)))
    97dc:	4a4c      	ldr	r2, [pc, #304]	; (9910 <CompactSector+0x238>)
    97de:	4690      	mov	r8, r2
    97e0:	e068      	b.n	98b4 <CompactSector+0x1dc>
            if (!GatherData(sourceSector, lastBlockPointer, 0u, blockHeader.itemLength, (dataBlock + BLOCK_HEADER_SIZE )))
    97e2:	ab0b      	add	r3, sp, #44	; 0x2c
    97e4:	891b      	ldrh	r3, [r3, #8]
    97e6:	9a08      	ldr	r2, [sp, #32]
    97e8:	9200      	str	r2, [sp, #0]
    97ea:	2200      	movs	r2, #0
    97ec:	9904      	ldr	r1, [sp, #16]
    97ee:	9803      	ldr	r0, [sp, #12]
    97f0:	4e4e      	ldr	r6, [pc, #312]	; (992c <CompactSector+0x254>)
    97f2:	47b0      	blx	r6
    97f4:	2800      	cmp	r0, #0
    97f6:	d063      	beq.n	98c0 <CompactSector+0x1e8>
            cache->lastBlock = s_sectorHead  + compactBlockOffset;
    97f8:	9b07      	ldr	r3, [sp, #28]
    97fa:	009d      	lsls	r5, r3, #2
    97fc:	4b45      	ldr	r3, [pc, #276]	; (9914 <CompactSector+0x23c>)
    97fe:	195d      	adds	r5, r3, r5
    9800:	4b49      	ldr	r3, [pc, #292]	; (9928 <CompactSector+0x250>)
    9802:	881b      	ldrh	r3, [r3, #0]
    9804:	4a37      	ldr	r2, [pc, #220]	; (98e4 <CompactSector+0x20c>)
    9806:	8812      	ldrh	r2, [r2, #0]
    9808:	189b      	adds	r3, r3, r2
    980a:	806b      	strh	r3, [r5, #2]
            if (!SmartCompacting(compactBlock, currLength))
    980c:	0021      	movs	r1, r4
    980e:	a814      	add	r0, sp, #80	; 0x50
    9810:	4b47      	ldr	r3, [pc, #284]	; (9930 <CompactSector+0x258>)
    9812:	4798      	blx	r3
    9814:	2800      	cmp	r0, #0
    9816:	d053      	beq.n	98c0 <CompactSector+0x1e8>
    for (uint8_t cacheIndex = 0; cacheIndex < s_itemCount; cacheIndex++) {
    9818:	9b06      	ldr	r3, [sp, #24]
    981a:	3301      	adds	r3, #1
    981c:	b2db      	uxtb	r3, r3
    981e:	001a      	movs	r2, r3
    9820:	9306      	str	r3, [sp, #24]
    9822:	4b3a      	ldr	r3, [pc, #232]	; (990c <CompactSector+0x234>)
    9824:	781b      	ldrb	r3, [r3, #0]
    9826:	4293      	cmp	r3, r2
    9828:	d89e      	bhi.n	9768 <CompactSector+0x90>

            } while(currLength > 0);
        }
    }
    // if some uncommitted data avaialble, committ it
    if ( currentCompactLength)
    982a:	4b2f      	ldr	r3, [pc, #188]	; (98e8 <CompactSector+0x210>)
    982c:	881a      	ldrh	r2, [r3, #0]
    982e:	2a00      	cmp	r2, #0
    9830:	d006      	beq.n	9840 <CompactSector+0x168>
    {
        if ( !WriteAndCheck(s_sectorHead, compactBlock, currentCompactLength) )
    9832:	4b3d      	ldr	r3, [pc, #244]	; (9928 <CompactSector+0x250>)
    9834:	8818      	ldrh	r0, [r3, #0]
    9836:	a914      	add	r1, sp, #80	; 0x50
    9838:	4b3e      	ldr	r3, [pc, #248]	; (9934 <CompactSector+0x25c>)
    983a:	4798      	blx	r3
    983c:	1e04      	subs	r4, r0, #0
    983e:	d040      	beq.n	98c2 <CompactSector+0x1ea>
        {
            return false;
        }
    }
    // Just update sector header as per the the length of the data committed, no alignments
    UpdateSectorHead(currentCompactLength, ITEM_NO_ALIGNMENT);
    9840:	4b29      	ldr	r3, [pc, #164]	; (98e8 <CompactSector+0x210>)
    9842:	8818      	ldrh	r0, [r3, #0]
    9844:	2100      	movs	r1, #0
    9846:	4b3c      	ldr	r3, [pc, #240]	; (9938 <CompactSector+0x260>)
    9848:	4798      	blx	r3

    s_nextPageAddressAfterCompact = s_sectorHead;
    984a:	4b37      	ldr	r3, [pc, #220]	; (9928 <CompactSector+0x250>)
    984c:	881a      	ldrh	r2, [r3, #0]
    984e:	4b3b      	ldr	r3, [pc, #236]	; (993c <CompactSector+0x264>)
    9850:	801a      	strh	r2, [r3, #0]
    uint32_t nextSequenceNumber = sectorHeader.sequenceNumber - 1uL;
    9852:	9809      	ldr	r0, [sp, #36]	; 0x24
    9854:	3801      	subs	r0, #1
    //SYS_PostEvent(BC_EVENT_UPGRADE_STRUCT_CHANGED_ITEMS, 0U);

    // update nextPageAddressAfterCompact in the sector header
    // All items moved, so now we just need to Write the Sector Header with 
    // nextPageAddressAfterCompact at the end of compact sector operation
    if ( !WriteSectorHeader(nextSequenceNumber))
    9856:	4b3a      	ldr	r3, [pc, #232]	; (9940 <CompactSector+0x268>)
    9858:	4798      	blx	r3
    985a:	1e04      	subs	r4, r0, #0
    985c:	d031      	beq.n	98c2 <CompactSector+0x1ea>
    {
        return false;
    }
    // Done with compact sector opration, Set the Sector Head to next page address for normal item update 
    UpdateSectorHead(0, ITEM_64BYTE_ALIGNMENT);
    985e:	2102      	movs	r1, #2
    9860:	2000      	movs	r0, #0
    9862:	4b35      	ldr	r3, [pc, #212]	; (9938 <CompactSector+0x260>)
    9864:	4798      	blx	r3

    // schedule an erase of the source sector,Restart the timer if it is already running.
    s_sectorToErase = sourceSector;
    9866:	4b37      	ldr	r3, [pc, #220]	; (9944 <CompactSector+0x26c>)
    9868:	466a      	mov	r2, sp
    986a:	7b12      	ldrb	r2, [r2, #12]
    986c:	701a      	strb	r2, [r3, #0]
    SYS_TimerStop(&eraseSectorTimer);
    986e:	4d36      	ldr	r5, [pc, #216]	; (9948 <CompactSector+0x270>)
    9870:	0028      	movs	r0, r5
    9872:	4b19      	ldr	r3, [pc, #100]	; (98d8 <CompactSector+0x200>)
    9874:	4798      	blx	r3
    SYS_TimerStart(&eraseSectorTimer);
    9876:	0028      	movs	r0, r5
    9878:	4b34      	ldr	r3, [pc, #208]	; (994c <CompactSector+0x274>)
    987a:	4798      	blx	r3

    return true;
    987c:	e021      	b.n	98c2 <CompactSector+0x1ea>
              bytesToGather =  (currLength > ROW_SIZE) ? ROW_SIZE : currLength; 
    987e:	b2ad      	uxth	r5, r5
              if (!GatherData(sourceSector, lastBlockPointer, inDataOffset, (bytesToGather - dataBlockOffset) , (dataBlock + dataBlockOffset)))
    9880:	1aef      	subs	r7, r5, r3
    9882:	b2ba      	uxth	r2, r7
    9884:	4693      	mov	fp, r2
    9886:	4443      	add	r3, r8
    9888:	9300      	str	r3, [sp, #0]
    988a:	0013      	movs	r3, r2
    988c:	0032      	movs	r2, r6
    988e:	9904      	ldr	r1, [sp, #16]
    9890:	9803      	ldr	r0, [sp, #12]
    9892:	4f26      	ldr	r7, [pc, #152]	; (992c <CompactSector+0x254>)
    9894:	47b8      	blx	r7
    9896:	2800      	cmp	r0, #0
    9898:	d012      	beq.n	98c0 <CompactSector+0x1e8>
              if (!SmartCompacting(compactBlock, bytesToGather))
    989a:	0029      	movs	r1, r5
    989c:	a814      	add	r0, sp, #80	; 0x50
    989e:	4b24      	ldr	r3, [pc, #144]	; (9930 <CompactSector+0x258>)
    98a0:	4798      	blx	r3
    98a2:	2800      	cmp	r0, #0
    98a4:	d00c      	beq.n	98c0 <CompactSector+0x1e8>
              currLength -= bytesToGather;
    98a6:	1b64      	subs	r4, r4, r5
    98a8:	b2a4      	uxth	r4, r4
              inDataOffset += (bytesToGather - dataBlockOffset);
    98aa:	445e      	add	r6, fp
    98ac:	b2b6      	uxth	r6, r6
              dataBlockOffset = 0;
    98ae:	2300      	movs	r3, #0
            } while(currLength > 0);
    98b0:	2c00      	cmp	r4, #0
    98b2:	d0b1      	beq.n	9818 <CompactSector+0x140>
              bytesToGather =  (currLength > ROW_SIZE) ? ROW_SIZE : currLength; 
    98b4:	1c25      	adds	r5, r4, #0
    98b6:	454c      	cmp	r4, r9
    98b8:	d9e1      	bls.n	987e <CompactSector+0x1a6>
    98ba:	466a      	mov	r2, sp
    98bc:	8ad5      	ldrh	r5, [r2, #22]
    98be:	e7de      	b.n	987e <CompactSector+0x1a6>
                return false;
    98c0:	2400      	movs	r4, #0
}
    98c2:	0020      	movs	r0, r4
    98c4:	b055      	add	sp, #340	; 0x154
    98c6:	bc3c      	pop	{r2, r3, r4, r5}
    98c8:	4690      	mov	r8, r2
    98ca:	4699      	mov	r9, r3
    98cc:	46a2      	mov	sl, r4
    98ce:	46ab      	mov	fp, r5
    98d0:	bdf0      	pop	{r4, r5, r6, r7, pc}
    98d2:	46c0      	nop			; (mov r8, r8)
    98d4:	2000026c 	.word	0x2000026c
    98d8:	0000bf59 	.word	0x0000bf59
    98dc:	20000398 	.word	0x20000398
    98e0:	2000039a 	.word	0x2000039a
    98e4:	20000254 	.word	0x20000254
    98e8:	20000280 	.word	0x20000280
    98ec:	200003d0 	.word	0x200003d0
    98f0:	00008fc5 	.word	0x00008fc5
    98f4:	00009571 	.word	0x00009571
    98f8:	00016178 	.word	0x00016178
    98fc:	000162fc 	.word	0x000162fc
    9900:	000003d5 	.word	0x000003d5
    9904:	000161f4 	.word	0x000161f4
    9908:	00014c1d 	.word	0x00014c1d
    990c:	200003c8 	.word	0x200003c8
    9910:	20000284 	.word	0x20000284
    9914:	200003a0 	.word	0x200003a0
    9918:	00009365 	.word	0x00009365
    991c:	0000ffff 	.word	0x0000ffff
    9920:	0000926d 	.word	0x0000926d
    9924:	00014cf1 	.word	0x00014cf1
    9928:	200003d2 	.word	0x200003d2
    992c:	000092ad 	.word	0x000092ad
    9930:	00009631 	.word	0x00009631
    9934:	000095a5 	.word	0x000095a5
    9938:	00009231 	.word	0x00009231
    993c:	200003ca 	.word	0x200003ca
    9940:	000095d9 	.word	0x000095d9
    9944:	20000009 	.word	0x20000009
    9948:	20000384 	.word	0x20000384
    994c:	0000bfc5 	.word	0x0000bfc5

00009950 <compactSectorTimerFired>:
{
    9950:	b510      	push	{r4, lr}
    if (!PowerSupplyTooLow()) {
    9952:	4b07      	ldr	r3, [pc, #28]	; (9970 <compactSectorTimerFired+0x20>)
    9954:	4798      	blx	r3
    9956:	2800      	cmp	r0, #0
    9958:	d000      	beq.n	995c <compactSectorTimerFired+0xc>
}
    995a:	bd10      	pop	{r4, pc}
      status = CompactSector();
    995c:	4b05      	ldr	r3, [pc, #20]	; (9974 <compactSectorTimerFired+0x24>)
    995e:	4798      	blx	r3
      assert(false);
    9960:	4b05      	ldr	r3, [pc, #20]	; (9978 <compactSectorTimerFired+0x28>)
    9962:	4a06      	ldr	r2, [pc, #24]	; (997c <compactSectorTimerFired+0x2c>)
    9964:	212c      	movs	r1, #44	; 0x2c
    9966:	31ff      	adds	r1, #255	; 0xff
    9968:	4805      	ldr	r0, [pc, #20]	; (9980 <compactSectorTimerFired+0x30>)
    996a:	4c06      	ldr	r4, [pc, #24]	; (9984 <compactSectorTimerFired+0x34>)
    996c:	47a0      	blx	r4
    996e:	46c0      	nop			; (mov r8, r8)
    9970:	00009215 	.word	0x00009215
    9974:	000096d9 	.word	0x000096d9
    9978:	00016178 	.word	0x00016178
    997c:	000162a8 	.word	0x000162a8
    9980:	000161f4 	.word	0x000161f4
    9984:	00014c1d 	.word	0x00014c1d

00009988 <CompactSectorIfNeeded>:

static void CompactSectorIfNeeded(uint16_t immediateThreshold)
{
    9988:	b510      	push	{r4, lr}
    uint16_t freeSpace = SECTOR_SIZE - s_sectorHead;
    998a:	4b12      	ldr	r3, [pc, #72]	; (99d4 <CompactSectorIfNeeded+0x4c>)
    998c:	881a      	ldrh	r2, [r3, #0]
    998e:	2380      	movs	r3, #128	; 0x80
    9990:	019b      	lsls	r3, r3, #6
    9992:	1a9b      	subs	r3, r3, r2
    9994:	b29b      	uxth	r3, r3

    if ( freeSpace < immediateThreshold )
    9996:	4283      	cmp	r3, r0
    9998:	d303      	bcc.n	99a2 <CompactSectorIfNeeded+0x1a>
        {
            assert(false);
        }
        return;
    }
    if ( freeSpace < PREEMPTIVE_COMPACT_SECTOR_THRESHOLD )
    999a:	4a0f      	ldr	r2, [pc, #60]	; (99d8 <CompactSectorIfNeeded+0x50>)
    999c:	4293      	cmp	r3, r2
    999e:	d90a      	bls.n	99b6 <CompactSectorIfNeeded+0x2e>
        compactSectorTimer.mode = SYS_TIMER_INTERVAL_MODE;
        //TODO: check timer to be started or not
        //SYS_StartTimer(&compactSectorTimer);
        }
    }
}
    99a0:	bd10      	pop	{r4, pc}
        if ( !CompactSector() )
    99a2:	4b0e      	ldr	r3, [pc, #56]	; (99dc <CompactSectorIfNeeded+0x54>)
    99a4:	4798      	blx	r3
    99a6:	2800      	cmp	r0, #0
    99a8:	d1fa      	bne.n	99a0 <CompactSectorIfNeeded+0x18>
            assert(false);
    99aa:	4b0d      	ldr	r3, [pc, #52]	; (99e0 <CompactSectorIfNeeded+0x58>)
    99ac:	4a0d      	ldr	r2, [pc, #52]	; (99e4 <CompactSectorIfNeeded+0x5c>)
    99ae:	490e      	ldr	r1, [pc, #56]	; (99e8 <CompactSectorIfNeeded+0x60>)
    99b0:	480e      	ldr	r0, [pc, #56]	; (99ec <CompactSectorIfNeeded+0x64>)
    99b2:	4c0f      	ldr	r4, [pc, #60]	; (99f0 <CompactSectorIfNeeded+0x68>)
    99b4:	47a0      	blx	r4
        if (!SYS_TimerStarted(&compactSectorTimer))
    99b6:	480f      	ldr	r0, [pc, #60]	; (99f4 <CompactSectorIfNeeded+0x6c>)
    99b8:	4b0f      	ldr	r3, [pc, #60]	; (99f8 <CompactSectorIfNeeded+0x70>)
    99ba:	4798      	blx	r3
    99bc:	2800      	cmp	r0, #0
    99be:	d1ef      	bne.n	99a0 <CompactSectorIfNeeded+0x18>
        compactSectorTimer.handler = compactSectorTimerFired;
    99c0:	4b0c      	ldr	r3, [pc, #48]	; (99f4 <CompactSectorIfNeeded+0x6c>)
    99c2:	4a0e      	ldr	r2, [pc, #56]	; (99fc <CompactSectorIfNeeded+0x74>)
    99c4:	611a      	str	r2, [r3, #16]
        compactSectorTimer.timeout = COMPACT_SECTOR_DELAY_MS;
    99c6:	4a0e      	ldr	r2, [pc, #56]	; (9a00 <CompactSectorIfNeeded+0x78>)
    99c8:	605a      	str	r2, [r3, #4]
        compactSectorTimer.interval = COMPACT_SECTOR_DELAY_MS;
    99ca:	609a      	str	r2, [r3, #8]
        compactSectorTimer.mode = SYS_TIMER_INTERVAL_MODE;
    99cc:	2200      	movs	r2, #0
    99ce:	731a      	strb	r2, [r3, #12]
    99d0:	e7e6      	b.n	99a0 <CompactSectorIfNeeded+0x18>
    99d2:	46c0      	nop			; (mov r8, r8)
    99d4:	200003d2 	.word	0x200003d2
    99d8:	0000080f 	.word	0x0000080f
    99dc:	000096d9 	.word	0x000096d9
    99e0:	00016178 	.word	0x00016178
    99e4:	0001630c 	.word	0x0001630c
    99e8:	0000044e 	.word	0x0000044e
    99ec:	000161f4 	.word	0x000161f4
    99f0:	00014c1d 	.word	0x00014c1d
    99f4:	2000026c 	.word	0x2000026c
    99f8:	0000bf99 	.word	0x0000bf99
    99fc:	00009951 	.word	0x00009951
    9a00:	00002710 	.word	0x00002710

00009a04 <CompactItem>:

static S_Nv_ReturnValue_t CompactItem(void)
{
    9a04:	b5f0      	push	{r4, r5, r6, r7, lr}
    9a06:	46de      	mov	lr, fp
    9a08:	4657      	mov	r7, sl
    9a0a:	464e      	mov	r6, r9
    9a0c:	4645      	mov	r5, r8
    9a0e:	b5e0      	push	{r5, r6, r7, lr}
    9a10:	b08b      	sub	sp, #44	; 0x2c
#if defined(ENABLE_NV_COMPACT_LOGGING)
    PRINTA(("CompactItem(id=%X)", s_compactItemId));
#endif

    if ( PowerSupplyTooLow() )
    9a12:	4b77      	ldr	r3, [pc, #476]	; (9bf0 <CompactItem+0x1ec>)
    9a14:	4798      	blx	r3
    {
        return S_Nv_ReturnValue_PowerSupplyTooLow;
    9a16:	2305      	movs	r3, #5
    if ( PowerSupplyTooLow() )
    9a18:	2800      	cmp	r0, #0
    9a1a:	d007      	beq.n	9a2c <CompactItem+0x28>
    s_compactItemLength = 0u;

    cache->lastBlock = lastBlock;

    return S_Nv_ReturnValue_Ok;
}
    9a1c:	0018      	movs	r0, r3
    9a1e:	b00b      	add	sp, #44	; 0x2c
    9a20:	bc3c      	pop	{r2, r3, r4, r5}
    9a22:	4690      	mov	r8, r2
    9a24:	4699      	mov	r9, r3
    9a26:	46a2      	mov	sl, r4
    9a28:	46ab      	mov	fp, r5
    9a2a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if ( (s_compactItemLength == 0u) && ( s_compactItemId == 0u ) )
    9a2c:	4b71      	ldr	r3, [pc, #452]	; (9bf4 <CompactItem+0x1f0>)
    9a2e:	8818      	ldrh	r0, [r3, #0]
    9a30:	2800      	cmp	r0, #0
    9a32:	d146      	bne.n	9ac2 <CompactItem+0xbe>
    9a34:	4b70      	ldr	r3, [pc, #448]	; (9bf8 <CompactItem+0x1f4>)
    9a36:	881b      	ldrh	r3, [r3, #0]
    9a38:	2b00      	cmp	r3, #0
    9a3a:	d100      	bne.n	9a3e <CompactItem+0x3a>
    9a3c:	e0d0      	b.n	9be0 <CompactItem+0x1dc>
    Item_t *cache = FindItemCache(s_compactItemId);
    9a3e:	4b6e      	ldr	r3, [pc, #440]	; (9bf8 <CompactItem+0x1f4>)
    9a40:	8818      	ldrh	r0, [r3, #0]
    9a42:	4b6e      	ldr	r3, [pc, #440]	; (9bfc <CompactItem+0x1f8>)
    9a44:	4798      	blx	r3
    9a46:	4683      	mov	fp, r0
    if ( cache == NULL )
    9a48:	2800      	cmp	r0, #0
    9a4a:	d100      	bne.n	9a4e <CompactItem+0x4a>
    9a4c:	e0ca      	b.n	9be4 <CompactItem+0x1e0>
    uint16_t blockPointer = cache->lastBlock;
    9a4e:	7882      	ldrb	r2, [r0, #2]
    9a50:	78c3      	ldrb	r3, [r0, #3]
    9a52:	021b      	lsls	r3, r3, #8
    9a54:	4313      	orrs	r3, r2
    9a56:	0019      	movs	r1, r3
    9a58:	9303      	str	r3, [sp, #12]
    D_Nv_Read(s_sector, blockPointer, (uint8_t*) &blockHeader, BLOCK_HEADER_SIZE);
    9a5a:	4b69      	ldr	r3, [pc, #420]	; (9c00 <CompactItem+0x1fc>)
    9a5c:	7818      	ldrb	r0, [r3, #0]
    9a5e:	2310      	movs	r3, #16
    9a60:	aa06      	add	r2, sp, #24
    9a62:	4c68      	ldr	r4, [pc, #416]	; (9c04 <CompactItem+0x200>)
    9a64:	47a0      	blx	r4
    if (s_compactItemLength == 0)
    9a66:	4b63      	ldr	r3, [pc, #396]	; (9bf4 <CompactItem+0x1f0>)
    9a68:	881a      	ldrh	r2, [r3, #0]
    9a6a:	2a00      	cmp	r2, #0
    9a6c:	d02e      	beq.n	9acc <CompactItem+0xc8>
    uint16_t lastBlock = s_sectorHead;
    9a6e:	4b66      	ldr	r3, [pc, #408]	; (9c08 <CompactItem+0x204>)
    9a70:	881b      	ldrh	r3, [r3, #0]
    9a72:	9305      	str	r3, [sp, #20]
    uint16_t bytesToGather = blockHeader.itemLength;
    9a74:	ab06      	add	r3, sp, #24
    9a76:	891b      	ldrh	r3, [r3, #8]
        blockHeader.itemLength = s_compactItemLength;
    9a78:	a906      	add	r1, sp, #24
    9a7a:	810a      	strh	r2, [r1, #8]
    9a7c:	1c19      	adds	r1, r3, #0
    9a7e:	4293      	cmp	r3, r2
    9a80:	d900      	bls.n	9a84 <CompactItem+0x80>
    9a82:	1c11      	adds	r1, r2, #0
    9a84:	b28b      	uxth	r3, r1
    blockHeader.blockOffset = 0u;
    9a86:	aa06      	add	r2, sp, #24
    9a88:	2100      	movs	r1, #0
    9a8a:	8091      	strh	r1, [r2, #4]
    blockHeader.blockLength = blockHeader.itemLength;
    9a8c:	8910      	ldrh	r0, [r2, #8]
    9a8e:	80d0      	strh	r0, [r2, #6]
    blockHeader.previousBlock = 0x0000u;
    9a90:	8151      	strh	r1, [r2, #10]
    blockHeader.writeCount = 0u;
    9a92:	8191      	strh	r1, [r2, #12]
    uint16_t currLength = BLOCK_HEADER_SIZE + bytesToGather;
    9a94:	001c      	movs	r4, r3
    9a96:	3410      	adds	r4, #16
    9a98:	b2a4      	uxth	r4, r4
    memcpy(dataBlock, &blockHeader, BLOCK_HEADER_SIZE);
    9a9a:	495c      	ldr	r1, [pc, #368]	; (9c0c <CompactItem+0x208>)
    9a9c:	ca61      	ldmia	r2!, {r0, r5, r6}
    9a9e:	c161      	stmia	r1!, {r0, r5, r6}
    9aa0:	6812      	ldr	r2, [r2, #0]
    9aa2:	600a      	str	r2, [r1, #0]
    if (currLength <= ROW_SIZE)
    9aa4:	2280      	movs	r2, #128	; 0x80
    9aa6:	0052      	lsls	r2, r2, #1
    9aa8:	4294      	cmp	r4, r2
    9aaa:	d939      	bls.n	9b20 <CompactItem+0x11c>
    9aac:	2600      	movs	r6, #0
    9aae:	2310      	movs	r3, #16
            bytesToGatherAndCommit = (currLength > ROW_SIZE) ? ROW_SIZE : currLength;
    9ab0:	2280      	movs	r2, #128	; 0x80
    9ab2:	0052      	lsls	r2, r2, #1
    9ab4:	4691      	mov	r9, r2
    9ab6:	4669      	mov	r1, sp
    9ab8:	824a      	strh	r2, [r1, #18]
            if (!GatherData(s_sector, blockPointer, inDataOffset, bytesToGatherAndCommit - dataBlockOffset , (dataBlock + dataBlockOffset)))
    9aba:	4a51      	ldr	r2, [pc, #324]	; (9c00 <CompactItem+0x1fc>)
    9abc:	4692      	mov	sl, r2
    9abe:	001a      	movs	r2, r3
    9ac0:	e088      	b.n	9bd4 <CompactItem+0x1d0>
        CompactSectorIfNeeded(s_compactItemLength + BLOCK_HEADER_SIZE);
    9ac2:	3010      	adds	r0, #16
    9ac4:	b280      	uxth	r0, r0
    9ac6:	4b52      	ldr	r3, [pc, #328]	; (9c10 <CompactItem+0x20c>)
    9ac8:	4798      	blx	r3
    9aca:	e7b8      	b.n	9a3e <CompactItem+0x3a>
        CompactSectorIfNeeded(blockHeader.itemLength + BLOCK_HEADER_SIZE);
    9acc:	ab06      	add	r3, sp, #24
    9ace:	8918      	ldrh	r0, [r3, #8]
    9ad0:	3010      	adds	r0, #16
    9ad2:	b280      	uxth	r0, r0
    9ad4:	4b4e      	ldr	r3, [pc, #312]	; (9c10 <CompactItem+0x20c>)
    9ad6:	4798      	blx	r3
        cache = FindItemCache(s_compactItemId);
    9ad8:	4b47      	ldr	r3, [pc, #284]	; (9bf8 <CompactItem+0x1f4>)
    9ada:	8818      	ldrh	r0, [r3, #0]
    9adc:	4b47      	ldr	r3, [pc, #284]	; (9bfc <CompactItem+0x1f8>)
    9ade:	4798      	blx	r3
    9ae0:	4683      	mov	fp, r0
        assert(cache != NULL);
    9ae2:	2800      	cmp	r0, #0
    9ae4:	d015      	beq.n	9b12 <CompactItem+0x10e>
        blockPointer = cache->lastBlock;
    9ae6:	7882      	ldrb	r2, [r0, #2]
    9ae8:	78c3      	ldrb	r3, [r0, #3]
    9aea:	021b      	lsls	r3, r3, #8
    9aec:	4313      	orrs	r3, r2
    9aee:	0019      	movs	r1, r3
    9af0:	9303      	str	r3, [sp, #12]
        D_Nv_Read(s_sector, blockPointer, (uint8_t*) &blockHeader, BLOCK_HEADER_SIZE);
    9af2:	ac06      	add	r4, sp, #24
    9af4:	4b42      	ldr	r3, [pc, #264]	; (9c00 <CompactItem+0x1fc>)
    9af6:	7818      	ldrb	r0, [r3, #0]
    9af8:	2310      	movs	r3, #16
    9afa:	0022      	movs	r2, r4
    9afc:	4d41      	ldr	r5, [pc, #260]	; (9c04 <CompactItem+0x200>)
    9afe:	47a8      	blx	r5
    uint16_t lastBlock = s_sectorHead;
    9b00:	4b41      	ldr	r3, [pc, #260]	; (9c08 <CompactItem+0x204>)
    9b02:	881b      	ldrh	r3, [r3, #0]
    9b04:	9305      	str	r3, [sp, #20]
    uint16_t bytesToGather = blockHeader.itemLength;
    9b06:	8923      	ldrh	r3, [r4, #8]
    if ( s_compactItemLength != 0u )
    9b08:	4a3a      	ldr	r2, [pc, #232]	; (9bf4 <CompactItem+0x1f0>)
    9b0a:	8812      	ldrh	r2, [r2, #0]
    9b0c:	2a00      	cmp	r2, #0
    9b0e:	d0ba      	beq.n	9a86 <CompactItem+0x82>
    9b10:	e7b2      	b.n	9a78 <CompactItem+0x74>
        assert(cache != NULL);
    9b12:	4b40      	ldr	r3, [pc, #256]	; (9c14 <CompactItem+0x210>)
    9b14:	4a40      	ldr	r2, [pc, #256]	; (9c18 <CompactItem+0x214>)
    9b16:	2191      	movs	r1, #145	; 0x91
    9b18:	00c9      	lsls	r1, r1, #3
    9b1a:	4840      	ldr	r0, [pc, #256]	; (9c1c <CompactItem+0x218>)
    9b1c:	4c40      	ldr	r4, [pc, #256]	; (9c20 <CompactItem+0x21c>)
    9b1e:	47a0      	blx	r4
        if (!GatherData(s_sector, blockPointer, 0u, bytesToGather, (dataBlock + BLOCK_HEADER_SIZE )))
    9b20:	4a37      	ldr	r2, [pc, #220]	; (9c00 <CompactItem+0x1fc>)
    9b22:	7810      	ldrb	r0, [r2, #0]
    9b24:	4a39      	ldr	r2, [pc, #228]	; (9c0c <CompactItem+0x208>)
    9b26:	3210      	adds	r2, #16
    9b28:	9200      	str	r2, [sp, #0]
    9b2a:	2200      	movs	r2, #0
    9b2c:	9903      	ldr	r1, [sp, #12]
    9b2e:	4c3d      	ldr	r4, [pc, #244]	; (9c24 <CompactItem+0x220>)
    9b30:	47a0      	blx	r4
            return S_Nv_ReturnValue_Failure;
    9b32:	2301      	movs	r3, #1
        if (!GatherData(s_sector, blockPointer, 0u, bytesToGather, (dataBlock + BLOCK_HEADER_SIZE )))
    9b34:	2800      	cmp	r0, #0
    9b36:	d100      	bne.n	9b3a <CompactItem+0x136>
    9b38:	e770      	b.n	9a1c <CompactItem+0x18>
        memcpy(dataBlock, &blockHeader, BLOCK_HEADER_SIZE);
    9b3a:	4934      	ldr	r1, [pc, #208]	; (9c0c <CompactItem+0x208>)
    9b3c:	ab06      	add	r3, sp, #24
    9b3e:	000a      	movs	r2, r1
    9b40:	0018      	movs	r0, r3
    9b42:	c870      	ldmia	r0!, {r4, r5, r6}
    9b44:	c270      	stmia	r2!, {r4, r5, r6}
    9b46:	6800      	ldr	r0, [r0, #0]
    9b48:	6010      	str	r0, [r2, #0]
        if ( !WriteAndCheck(s_sectorHead, dataBlock, blockHeader.blockLength + BLOCK_HEADER_SIZE) )
    9b4a:	88da      	ldrh	r2, [r3, #6]
    9b4c:	3210      	adds	r2, #16
    9b4e:	b292      	uxth	r2, r2
    9b50:	4b2d      	ldr	r3, [pc, #180]	; (9c08 <CompactItem+0x204>)
    9b52:	8818      	ldrh	r0, [r3, #0]
    9b54:	4b34      	ldr	r3, [pc, #208]	; (9c28 <CompactItem+0x224>)
    9b56:	4798      	blx	r3
            return false;
    9b58:	2300      	movs	r3, #0
        if ( !WriteAndCheck(s_sectorHead, dataBlock, blockHeader.blockLength + BLOCK_HEADER_SIZE) )
    9b5a:	2800      	cmp	r0, #0
    9b5c:	d100      	bne.n	9b60 <CompactItem+0x15c>
    9b5e:	e75d      	b.n	9a1c <CompactItem+0x18>
        UpdateSectorHead((BLOCK_HEADER_SIZE + blockHeader.blockLength), ITEM_64BYTE_ALIGNMENT);
    9b60:	ab06      	add	r3, sp, #24
    9b62:	88d8      	ldrh	r0, [r3, #6]
    9b64:	3010      	adds	r0, #16
    9b66:	b280      	uxth	r0, r0
    9b68:	2102      	movs	r1, #2
    9b6a:	4b30      	ldr	r3, [pc, #192]	; (9c2c <CompactItem+0x228>)
    9b6c:	4798      	blx	r3
    s_compactItemId = 0u;
    9b6e:	2300      	movs	r3, #0
    9b70:	4a21      	ldr	r2, [pc, #132]	; (9bf8 <CompactItem+0x1f4>)
    9b72:	8013      	strh	r3, [r2, #0]
    s_compactItemLength = 0u;
    9b74:	4a1f      	ldr	r2, [pc, #124]	; (9bf4 <CompactItem+0x1f0>)
    9b76:	8013      	strh	r3, [r2, #0]
    cache->lastBlock = lastBlock;
    9b78:	465b      	mov	r3, fp
    9b7a:	9905      	ldr	r1, [sp, #20]
    9b7c:	7099      	strb	r1, [r3, #2]
    9b7e:	0a0b      	lsrs	r3, r1, #8
    9b80:	465a      	mov	r2, fp
    9b82:	70d3      	strb	r3, [r2, #3]
    return S_Nv_ReturnValue_Ok;
    9b84:	2300      	movs	r3, #0
    9b86:	e749      	b.n	9a1c <CompactItem+0x18>
            bytesToGatherAndCommit = (currLength > ROW_SIZE) ? ROW_SIZE : currLength;
    9b88:	b2ad      	uxth	r5, r5
            if (!GatherData(s_sector, blockPointer, inDataOffset, bytesToGatherAndCommit - dataBlockOffset , (dataBlock + dataBlockOffset)))
    9b8a:	1aaf      	subs	r7, r5, r2
    9b8c:	b2bb      	uxth	r3, r7
    9b8e:	0019      	movs	r1, r3
    9b90:	4653      	mov	r3, sl
    9b92:	7818      	ldrb	r0, [r3, #0]
    9b94:	4b1d      	ldr	r3, [pc, #116]	; (9c0c <CompactItem+0x208>)
    9b96:	189b      	adds	r3, r3, r2
    9b98:	9300      	str	r3, [sp, #0]
    9b9a:	9102      	str	r1, [sp, #8]
    9b9c:	000b      	movs	r3, r1
    9b9e:	0032      	movs	r2, r6
    9ba0:	9903      	ldr	r1, [sp, #12]
    9ba2:	4f20      	ldr	r7, [pc, #128]	; (9c24 <CompactItem+0x220>)
    9ba4:	47b8      	blx	r7
    9ba6:	2800      	cmp	r0, #0
    9ba8:	d01e      	beq.n	9be8 <CompactItem+0x1e4>
            if ( !WriteAndCheck(s_sectorHead, dataBlock, bytesToGatherAndCommit) )
    9baa:	4b17      	ldr	r3, [pc, #92]	; (9c08 <CompactItem+0x204>)
    9bac:	8818      	ldrh	r0, [r3, #0]
    9bae:	002a      	movs	r2, r5
    9bb0:	4916      	ldr	r1, [pc, #88]	; (9c0c <CompactItem+0x208>)
    9bb2:	4b1d      	ldr	r3, [pc, #116]	; (9c28 <CompactItem+0x224>)
    9bb4:	4798      	blx	r3
    9bb6:	2800      	cmp	r0, #0
    9bb8:	d018      	beq.n	9bec <CompactItem+0x1e8>
            UpdateSectorHead(bytesToGatherAndCommit, ITEM_64BYTE_ALIGNMENT);
    9bba:	2102      	movs	r1, #2
    9bbc:	0028      	movs	r0, r5
    9bbe:	4b1b      	ldr	r3, [pc, #108]	; (9c2c <CompactItem+0x228>)
    9bc0:	4798      	blx	r3
            currLength -= bytesToGatherAndCommit;
    9bc2:	1b64      	subs	r4, r4, r5
    9bc4:	b2a4      	uxth	r4, r4
            inDataOffset += (bytesToGatherAndCommit - dataBlockOffset);
    9bc6:	9902      	ldr	r1, [sp, #8]
    9bc8:	468c      	mov	ip, r1
    9bca:	4466      	add	r6, ip
    9bcc:	b2b6      	uxth	r6, r6
            dataBlockOffset = 0;
    9bce:	2200      	movs	r2, #0
        } while(currLength > 0);
    9bd0:	2c00      	cmp	r4, #0
    9bd2:	d0cc      	beq.n	9b6e <CompactItem+0x16a>
            bytesToGatherAndCommit = (currLength > ROW_SIZE) ? ROW_SIZE : currLength;
    9bd4:	1c25      	adds	r5, r4, #0
    9bd6:	454c      	cmp	r4, r9
    9bd8:	d9d6      	bls.n	9b88 <CompactItem+0x184>
    9bda:	466b      	mov	r3, sp
    9bdc:	8a5d      	ldrh	r5, [r3, #18]
    9bde:	e7d3      	b.n	9b88 <CompactItem+0x184>
        return S_Nv_ReturnValue_Ok;
    9be0:	2300      	movs	r3, #0
    9be2:	e71b      	b.n	9a1c <CompactItem+0x18>
        return S_Nv_ReturnValue_Ok;
    9be4:	2300      	movs	r3, #0
    9be6:	e719      	b.n	9a1c <CompactItem+0x18>
                return S_Nv_ReturnValue_Failure;
    9be8:	2301      	movs	r3, #1
    9bea:	e717      	b.n	9a1c <CompactItem+0x18>
                return false;
    9bec:	2300      	movs	r3, #0
    9bee:	e715      	b.n	9a1c <CompactItem+0x18>
    9bf0:	00009215 	.word	0x00009215
    9bf4:	2000039a 	.word	0x2000039a
    9bf8:	20000398 	.word	0x20000398
    9bfc:	0000940d 	.word	0x0000940d
    9c00:	200003d0 	.word	0x200003d0
    9c04:	00008fc5 	.word	0x00008fc5
    9c08:	200003d2 	.word	0x200003d2
    9c0c:	20000284 	.word	0x20000284
    9c10:	00009989 	.word	0x00009989
    9c14:	00016168 	.word	0x00016168
    9c18:	00016324 	.word	0x00016324
    9c1c:	000161f4 	.word	0x000161f4
    9c20:	00014c1d 	.word	0x00014c1d
    9c24:	000092ad 	.word	0x000092ad
    9c28:	000095a5 	.word	0x000095a5
    9c2c:	00009231 	.word	0x00009231

00009c30 <compactItemTimerFired>:
{
    9c30:	b510      	push	{r4, lr}
    (void)CompactItem();
    9c32:	4b01      	ldr	r3, [pc, #4]	; (9c38 <compactItemTimerFired+0x8>)
    9c34:	4798      	blx	r3
}
    9c36:	bd10      	pop	{r4, pc}
    9c38:	00009a05 	.word	0x00009a05

00009c3c <WriteDataBlockAndHeader>:
{
    9c3c:	b5f0      	push	{r4, r5, r6, r7, lr}
    9c3e:	46de      	mov	lr, fp
    9c40:	4657      	mov	r7, sl
    9c42:	464e      	mov	r6, r9
    9c44:	4645      	mov	r5, r8
    9c46:	b5e0      	push	{r5, r6, r7, lr}
    9c48:	b083      	sub	sp, #12
    9c4a:	0004      	movs	r4, r0
    9c4c:	468a      	mov	sl, r1
    memset(dataBlock, 0xFF, sizeof(dataBlock));
    9c4e:	4d46      	ldr	r5, [pc, #280]	; (9d68 <WriteDataBlockAndHeader+0x12c>)
    9c50:	2280      	movs	r2, #128	; 0x80
    9c52:	0052      	lsls	r2, r2, #1
    9c54:	21ff      	movs	r1, #255	; 0xff
    9c56:	0028      	movs	r0, r5
    9c58:	4b44      	ldr	r3, [pc, #272]	; (9d6c <WriteDataBlockAndHeader+0x130>)
    9c5a:	4798      	blx	r3
    pBlockHeader->dataCrc = ComputeCrc(pData, pBlockHeader->blockLength, 0xFFFF);
    9c5c:	4e44      	ldr	r6, [pc, #272]	; (9d70 <WriteDataBlockAndHeader+0x134>)
    9c5e:	79a3      	ldrb	r3, [r4, #6]
    9c60:	79e1      	ldrb	r1, [r4, #7]
    9c62:	0209      	lsls	r1, r1, #8
    9c64:	4319      	orrs	r1, r3
    9c66:	0032      	movs	r2, r6
    9c68:	4650      	mov	r0, sl
    9c6a:	4f42      	ldr	r7, [pc, #264]	; (9d74 <WriteDataBlockAndHeader+0x138>)
    9c6c:	47b8      	blx	r7
    9c6e:	7020      	strb	r0, [r4, #0]
    9c70:	0a00      	lsrs	r0, r0, #8
    9c72:	7060      	strb	r0, [r4, #1]
    return ComputeCrc(((uint8_t*) pBlockHeader), (sizeof(BlockHeader_t) - sizeof(pBlockHeader->headerCrc)), 0xFFFFu); // skip headerCrc field
    9c74:	0032      	movs	r2, r6
    9c76:	210e      	movs	r1, #14
    9c78:	0020      	movs	r0, r4
    9c7a:	47b8      	blx	r7
    pBlockHeader->headerCrc = ComputeHeaderCrc(pBlockHeader);
    9c7c:	73a0      	strb	r0, [r4, #14]
    9c7e:	0a00      	lsrs	r0, r0, #8
    9c80:	73e0      	strb	r0, [r4, #15]
    memcpy(dataBlock, pBlockHeader, BLOCK_HEADER_SIZE);
    9c82:	2210      	movs	r2, #16
    9c84:	0021      	movs	r1, r4
    9c86:	0028      	movs	r0, r5
    9c88:	4b3b      	ldr	r3, [pc, #236]	; (9d78 <WriteDataBlockAndHeader+0x13c>)
    9c8a:	4798      	blx	r3
    currentLength = pBlockHeader->blockLength + BLOCK_HEADER_SIZE;
    9c8c:	79a3      	ldrb	r3, [r4, #6]
    9c8e:	79e2      	ldrb	r2, [r4, #7]
    9c90:	0212      	lsls	r2, r2, #8
    9c92:	431a      	orrs	r2, r3
    9c94:	0015      	movs	r5, r2
    9c96:	3510      	adds	r5, #16
    9c98:	b2ad      	uxth	r5, r5
    if (pData != NULL )
    9c9a:	4653      	mov	r3, sl
    9c9c:	2b00      	cmp	r3, #0
    9c9e:	d012      	beq.n	9cc6 <WriteDataBlockAndHeader+0x8a>
        if(currentLength <= ROW_SIZE)
    9ca0:	2380      	movs	r3, #128	; 0x80
    9ca2:	005b      	lsls	r3, r3, #1
    9ca4:	429d      	cmp	r5, r3
    9ca6:	d909      	bls.n	9cbc <WriteDataBlockAndHeader+0x80>
    9ca8:	2600      	movs	r6, #0
    9caa:	2710      	movs	r7, #16
                bytesToCommit = (currentLength > ROW_SIZE) ? ROW_SIZE : currentLength;
    9cac:	2380      	movs	r3, #128	; 0x80
    9cae:	005b      	lsls	r3, r3, #1
    9cb0:	469b      	mov	fp, r3
    9cb2:	466a      	mov	r2, sp
    9cb4:	80d3      	strh	r3, [r2, #6]
                memcpy(dataBlock + dataBlockOffset, pData + inDataOffset, bytesToCommit - dataBlockOffset);
    9cb6:	4b2c      	ldr	r3, [pc, #176]	; (9d68 <WriteDataBlockAndHeader+0x12c>)
    9cb8:	4699      	mov	r9, r3
    9cba:	e045      	b.n	9d48 <WriteDataBlockAndHeader+0x10c>
            memcpy(dataBlock + BLOCK_HEADER_SIZE , pData, pBlockHeader->blockLength);
    9cbc:	4651      	mov	r1, sl
    9cbe:	482a      	ldr	r0, [pc, #168]	; (9d68 <WriteDataBlockAndHeader+0x12c>)
    9cc0:	3010      	adds	r0, #16
    9cc2:	4b2d      	ldr	r3, [pc, #180]	; (9d78 <WriteDataBlockAndHeader+0x13c>)
    9cc4:	4798      	blx	r3
    if ( !WriteAndCheck(s_sectorHead, dataBlock, MIN((BLOCK_HEADER_SIZE + pBlockHeader->blockLength), ROW_SIZE)) )
    9cc6:	79a3      	ldrb	r3, [r4, #6]
    9cc8:	79e2      	ldrb	r2, [r4, #7]
    9cca:	0212      	lsls	r2, r2, #8
    9ccc:	431a      	orrs	r2, r3
    9cce:	3210      	adds	r2, #16
    9cd0:	2380      	movs	r3, #128	; 0x80
    9cd2:	005b      	lsls	r3, r3, #1
    9cd4:	429a      	cmp	r2, r3
    9cd6:	dd00      	ble.n	9cda <WriteDataBlockAndHeader+0x9e>
    9cd8:	001a      	movs	r2, r3
    9cda:	b292      	uxth	r2, r2
    9cdc:	4b27      	ldr	r3, [pc, #156]	; (9d7c <WriteDataBlockAndHeader+0x140>)
    9cde:	8818      	ldrh	r0, [r3, #0]
    9ce0:	4921      	ldr	r1, [pc, #132]	; (9d68 <WriteDataBlockAndHeader+0x12c>)
    9ce2:	4b27      	ldr	r3, [pc, #156]	; (9d80 <WriteDataBlockAndHeader+0x144>)
    9ce4:	4798      	blx	r3
    9ce6:	4680      	mov	r8, r0
    9ce8:	2800      	cmp	r0, #0
    9cea:	d033      	beq.n	9d54 <WriteDataBlockAndHeader+0x118>
    UpdateSectorHead((pBlockHeader->blockLength + BLOCK_HEADER_SIZE), ITEM_64BYTE_ALIGNMENT );
    9cec:	79a3      	ldrb	r3, [r4, #6]
    9cee:	79e0      	ldrb	r0, [r4, #7]
    9cf0:	0200      	lsls	r0, r0, #8
    9cf2:	4318      	orrs	r0, r3
    9cf4:	3010      	adds	r0, #16
    9cf6:	b280      	uxth	r0, r0
    9cf8:	2102      	movs	r1, #2
    9cfa:	4b22      	ldr	r3, [pc, #136]	; (9d84 <WriteDataBlockAndHeader+0x148>)
    9cfc:	4798      	blx	r3
}
    9cfe:	4640      	mov	r0, r8
    9d00:	b003      	add	sp, #12
    9d02:	bc3c      	pop	{r2, r3, r4, r5}
    9d04:	4690      	mov	r8, r2
    9d06:	4699      	mov	r9, r3
    9d08:	46a2      	mov	sl, r4
    9d0a:	46ab      	mov	fp, r5
    9d0c:	bdf0      	pop	{r4, r5, r6, r7, pc}
                bytesToCommit = (currentLength > ROW_SIZE) ? ROW_SIZE : currentLength;
    9d0e:	b2a4      	uxth	r4, r4
                memcpy(dataBlock + dataBlockOffset, pData + inDataOffset, bytesToCommit - dataBlockOffset);
    9d10:	464b      	mov	r3, r9
    9d12:	19d8      	adds	r0, r3, r7
    9d14:	1be2      	subs	r2, r4, r7
    9d16:	4653      	mov	r3, sl
    9d18:	1999      	adds	r1, r3, r6
    9d1a:	4b17      	ldr	r3, [pc, #92]	; (9d78 <WriteDataBlockAndHeader+0x13c>)
    9d1c:	4798      	blx	r3
                if ( !WriteAndCheck(s_sectorHead, dataBlock, bytesToCommit))
    9d1e:	4b17      	ldr	r3, [pc, #92]	; (9d7c <WriteDataBlockAndHeader+0x140>)
    9d20:	8818      	ldrh	r0, [r3, #0]
    9d22:	0022      	movs	r2, r4
    9d24:	4649      	mov	r1, r9
    9d26:	4b16      	ldr	r3, [pc, #88]	; (9d80 <WriteDataBlockAndHeader+0x144>)
    9d28:	4798      	blx	r3
    9d2a:	4680      	mov	r8, r0
    9d2c:	2800      	cmp	r0, #0
    9d2e:	d0e6      	beq.n	9cfe <WriteDataBlockAndHeader+0xc2>
                UpdateSectorHead(bytesToCommit, ITEM_64BYTE_ALIGNMENT);
    9d30:	2102      	movs	r1, #2
    9d32:	0020      	movs	r0, r4
    9d34:	4b13      	ldr	r3, [pc, #76]	; (9d84 <WriteDataBlockAndHeader+0x148>)
    9d36:	4798      	blx	r3
                currentLength -= bytesToCommit;
    9d38:	1b2d      	subs	r5, r5, r4
    9d3a:	b2ad      	uxth	r5, r5
                inDataOffset += (bytesToCommit - dataBlockOffset);
    9d3c:	1be4      	subs	r4, r4, r7
    9d3e:	1936      	adds	r6, r6, r4
    9d40:	b2b6      	uxth	r6, r6
                dataBlockOffset = 0;
    9d42:	2700      	movs	r7, #0
            } while(currentLength > 0);
    9d44:	2d00      	cmp	r5, #0
    9d46:	d0da      	beq.n	9cfe <WriteDataBlockAndHeader+0xc2>
                bytesToCommit = (currentLength > ROW_SIZE) ? ROW_SIZE : currentLength;
    9d48:	1c2c      	adds	r4, r5, #0
    9d4a:	455d      	cmp	r5, fp
    9d4c:	d9df      	bls.n	9d0e <WriteDataBlockAndHeader+0xd2>
    9d4e:	466b      	mov	r3, sp
    9d50:	88dc      	ldrh	r4, [r3, #6]
    9d52:	e7dc      	b.n	9d0e <WriteDataBlockAndHeader+0xd2>
        UpdateSectorHead((pBlockHeader->blockLength + BLOCK_HEADER_SIZE), ITEM_64BYTE_ALIGNMENT);
    9d54:	79a3      	ldrb	r3, [r4, #6]
    9d56:	79e0      	ldrb	r0, [r4, #7]
    9d58:	0200      	lsls	r0, r0, #8
    9d5a:	4318      	orrs	r0, r3
    9d5c:	3010      	adds	r0, #16
    9d5e:	b280      	uxth	r0, r0
    9d60:	2102      	movs	r1, #2
    9d62:	4b08      	ldr	r3, [pc, #32]	; (9d84 <WriteDataBlockAndHeader+0x148>)
    9d64:	4798      	blx	r3
        return false;
    9d66:	e7ca      	b.n	9cfe <WriteDataBlockAndHeader+0xc2>
    9d68:	20000284 	.word	0x20000284
    9d6c:	00014cf1 	.word	0x00014cf1
    9d70:	0000ffff 	.word	0x0000ffff
    9d74:	0000926d 	.word	0x0000926d
    9d78:	00014cdf 	.word	0x00014cdf
    9d7c:	200003d2 	.word	0x200003d2
    9d80:	000095a5 	.word	0x000095a5
    9d84:	00009231 	.word	0x00009231

00009d88 <S_Nv_EarlyInit>:
/***************************************************************************************************
* EXPORTED FUNCTIONS
***************************************************************************************************/

void S_Nv_EarlyInit(void)
{
    9d88:	b5f0      	push	{r4, r5, r6, r7, lr}
    9d8a:	46ce      	mov	lr, r9
    9d8c:	4647      	mov	r7, r8
    9d8e:	b580      	push	{r7, lr}
    9d90:	b091      	sub	sp, #68	; 0x44
    SnvRevisioin_t revisionNumber;
    s_itemCount = 0u;
    9d92:	2200      	movs	r2, #0
    9d94:	4bb3      	ldr	r3, [pc, #716]	; (a064 <S_Nv_EarlyInit+0x2dc>)
    9d96:	701a      	strb	r2, [r3, #0]
    SectorHeader_t sectorHeader;

    uint8_t lastSector = 0xFFu;
    uint32_t lastSectorSequence = 0xFFFFFFFFuL;

    for ( uint8_t sector = FIRST_SECTOR; sector < (FIRST_SECTOR + SECTOR_COUNT); sector++ )
    9d98:	2400      	movs	r4, #0
    uint32_t lastSectorSequence = 0xFFFFFFFFuL;
    9d9a:	2301      	movs	r3, #1
    9d9c:	425b      	negs	r3, r3
    9d9e:	4699      	mov	r9, r3
    uint8_t lastSector = 0xFFu;
    9da0:	27ff      	movs	r7, #255	; 0xff
    {
        D_Nv_Read(sector, 0u, (uint8_t*) &sectorHeader, SECTOR_HEADER_SIZE);
    9da2:	4eb1      	ldr	r6, [pc, #708]	; (a068 <S_Nv_EarlyInit+0x2e0>)
    9da4:	2312      	movs	r3, #18
    9da6:	aa0b      	add	r2, sp, #44	; 0x2c
    9da8:	2100      	movs	r1, #0
    9daa:	0020      	movs	r0, r4
    9dac:	47b0      	blx	r6
        if (((sectorHeader.sequenceNumber ^ sectorHeader.sequenceParity) == 0xFFFFFFFFuL) &&
    9dae:	9d0d      	ldr	r5, [sp, #52]	; 0x34
    9db0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    9db2:	9301      	str	r3, [sp, #4]
    9db4:	406b      	eors	r3, r5
    9db6:	3301      	adds	r3, #1
    9db8:	d01d      	beq.n	9df6 <S_Nv_EarlyInit+0x6e>
    for ( uint8_t sector = FIRST_SECTOR; sector < (FIRST_SECTOR + SECTOR_COUNT); sector++ )
    9dba:	3401      	adds	r4, #1
    9dbc:	b2e4      	uxtb	r4, r4
    9dbe:	2c02      	cmp	r4, #2
    9dc0:	d1f0      	bne.n	9da4 <S_Nv_EarlyInit+0x1c>
                lastSectorSequence = sectorHeader.sequenceNumber;
            }
        }
    }

    if ( lastSector == 0xFFu )
    9dc2:	2fff      	cmp	r7, #255	; 0xff
    9dc4:	d057      	beq.n	9e76 <S_Nv_EarlyInit+0xee>
        s_itemCount = 0u;
    }
    else
    {
        // load active sector
        s_sector = lastSector;
    9dc6:	4ba9      	ldr	r3, [pc, #676]	; (a06c <S_Nv_EarlyInit+0x2e4>)
    9dc8:	701f      	strb	r7, [r3, #0]
    if (SNV_REV_1 == revisionNumber)
    9dca:	4643      	mov	r3, r8
    9dcc:	2b01      	cmp	r3, #1
    9dce:	d100      	bne.n	9dd2 <S_Nv_EarlyInit+0x4a>
    9dd0:	e07b      	b.n	9eca <S_Nv_EarlyInit+0x142>
    else if (SNV_REV_2 == revisionNumber)
    9dd2:	4643      	mov	r3, r8
    9dd4:	2b02      	cmp	r3, #2
    9dd6:	d16a      	bne.n	9eae <S_Nv_EarlyInit+0x126>
        s_sectorHead = ITEMS_AREA_START_ADDRESS;
    9dd8:	2280      	movs	r2, #128	; 0x80
    9dda:	0052      	lsls	r2, r2, #1
    9ddc:	4ba4      	ldr	r3, [pc, #656]	; (a070 <S_Nv_EarlyInit+0x2e8>)
    9dde:	801a      	strh	r2, [r3, #0]
        D_Nv_Read(s_sector, 0, (uint8_t*) &sectorHeader, sizeof(SectorHeader_t));
    9de0:	2312      	movs	r3, #18
    9de2:	aa06      	add	r2, sp, #24
    9de4:	2100      	movs	r1, #0
    9de6:	0038      	movs	r0, r7
    9de8:	4c9f      	ldr	r4, [pc, #636]	; (a068 <S_Nv_EarlyInit+0x2e0>)
    9dea:	47a0      	blx	r4
        while ( s_sectorHead < SECTOR_SIZE )
    9dec:	4da0      	ldr	r5, [pc, #640]	; (a070 <S_Nv_EarlyInit+0x2e8>)
                UpdateSectorHead(0, itemAlignment);
    9dee:	4ba1      	ldr	r3, [pc, #644]	; (a074 <S_Nv_EarlyInit+0x2ec>)
    9df0:	4698      	mov	r8, r3
            D_Nv_Read(s_sector, s_sectorHead, (uint8_t*) &blockHeader, BLOCK_HEADER_SIZE);
    9df2:	002e      	movs	r6, r5
    9df4:	e10f      	b.n	a016 <S_Nv_EarlyInit+0x28e>
        if (((sectorHeader.sequenceNumber ^ sectorHeader.sequenceParity) == 0xFFFFFFFFuL) &&
    9df6:	ab02      	add	r3, sp, #8
    9df8:	2226      	movs	r2, #38	; 0x26
    9dfa:	189b      	adds	r3, r3, r2
    9dfc:	781b      	ldrb	r3, [r3, #0]
    9dfe:	2b41      	cmp	r3, #65	; 0x41
    9e00:	d1db      	bne.n	9dba <S_Nv_EarlyInit+0x32>
            (sectorHeader.signature[0] == (uint8_t) 'A') &&
    9e02:	ab02      	add	r3, sp, #8
    9e04:	3201      	adds	r2, #1
    9e06:	189b      	adds	r3, r3, r2
    9e08:	781b      	ldrb	r3, [r3, #0]
    9e0a:	2b54      	cmp	r3, #84	; 0x54
    9e0c:	d1d5      	bne.n	9dba <S_Nv_EarlyInit+0x32>
            (sectorHeader.signature[1] == (uint8_t) 'T') &&
    9e0e:	ab02      	add	r3, sp, #8
    9e10:	3201      	adds	r2, #1
    9e12:	189b      	adds	r3, r3, r2
    9e14:	781b      	ldrb	r3, [r3, #0]
    9e16:	2b53      	cmp	r3, #83	; 0x53
    9e18:	d1cf      	bne.n	9dba <S_Nv_EarlyInit+0x32>
            (sectorHeader.signature[2] == (uint8_t) 'S') &&
    9e1a:	ab02      	add	r3, sp, #8
    9e1c:	3201      	adds	r2, #1
    9e1e:	189b      	adds	r3, r3, r2
    9e20:	781b      	ldrb	r3, [r3, #0]
    9e22:	2b4e      	cmp	r3, #78	; 0x4e
    9e24:	d1c9      	bne.n	9dba <S_Nv_EarlyInit+0x32>
            (sectorHeader.signature[3] == (uint8_t) 'N') &&
    9e26:	ab02      	add	r3, sp, #8
    9e28:	3201      	adds	r2, #1
    9e2a:	189b      	adds	r3, r3, r2
    9e2c:	781b      	ldrb	r3, [r3, #0]
    9e2e:	2b76      	cmp	r3, #118	; 0x76
    9e30:	d1c3      	bne.n	9dba <S_Nv_EarlyInit+0x32>
            if ( sectorHeader.signature[5] == (uint8_t) '1')
    9e32:	ab02      	add	r3, sp, #8
    9e34:	3201      	adds	r2, #1
    9e36:	189b      	adds	r3, r3, r2
    9e38:	781b      	ldrb	r3, [r3, #0]
    9e3a:	2b31      	cmp	r3, #49	; 0x31
    9e3c:	d106      	bne.n	9e4c <S_Nv_EarlyInit+0xc4>
                if (pSectorHeaderSnv1->isActive == 0x0000u)
    9e3e:	ab02      	add	r3, sp, #8
    9e40:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
    9e42:	2b00      	cmp	r3, #0
    9e44:	d1b9      	bne.n	9dba <S_Nv_EarlyInit+0x32>
                    revisionNumber = SNV_REV_1;
    9e46:	2301      	movs	r3, #1
    9e48:	4698      	mov	r8, r3
    9e4a:	e00f      	b.n	9e6c <S_Nv_EarlyInit+0xe4>
            else if (sectorHeader.signature[5] == (uint8_t) '2')
    9e4c:	2b32      	cmp	r3, #50	; 0x32
    9e4e:	d1b4      	bne.n	9dba <S_Nv_EarlyInit+0x32>
    return ComputeCrc(((uint8_t*) pSectorHeader) + sizeof(pSectorHeader->headerCrc), (sizeof(SectorHeader_t)- sizeof(pSectorHeader->headerCrc)), 0xFFFFu); // skip headerCrc field
    9e50:	4a89      	ldr	r2, [pc, #548]	; (a078 <S_Nv_EarlyInit+0x2f0>)
    9e52:	2110      	movs	r1, #16
    9e54:	2026      	movs	r0, #38	; 0x26
    9e56:	ab02      	add	r3, sp, #8
    9e58:	469c      	mov	ip, r3
    9e5a:	4460      	add	r0, ip
    9e5c:	4b87      	ldr	r3, [pc, #540]	; (a07c <S_Nv_EarlyInit+0x2f4>)
    9e5e:	4798      	blx	r3
              if (headerCrc == sectorHeader.headerCrc)
    9e60:	ab02      	add	r3, sp, #8
    9e62:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
    9e64:	4283      	cmp	r3, r0
    9e66:	d1a8      	bne.n	9dba <S_Nv_EarlyInit+0x32>
                  revisionNumber = SNV_REV_2;
    9e68:	2302      	movs	r3, #2
    9e6a:	4698      	mov	r8, r3
            if ( sectorHeader.sequenceNumber < lastSectorSequence )
    9e6c:	454d      	cmp	r5, r9
    9e6e:	d2a4      	bcs.n	9dba <S_Nv_EarlyInit+0x32>
                lastSectorSequence = sectorHeader.sequenceNumber;
    9e70:	46a9      	mov	r9, r5
            if ( sectorHeader.sequenceNumber < lastSectorSequence )
    9e72:	0027      	movs	r7, r4
    9e74:	e7a1      	b.n	9dba <S_Nv_EarlyInit+0x32>
        s_sector = FIRST_SECTOR;
    9e76:	2200      	movs	r2, #0
    9e78:	4b7c      	ldr	r3, [pc, #496]	; (a06c <S_Nv_EarlyInit+0x2e4>)
    9e7a:	701a      	strb	r2, [r3, #0]
            if ( EraseSector())
    9e7c:	4c80      	ldr	r4, [pc, #512]	; (a080 <S_Nv_EarlyInit+0x2f8>)
                s_nextPageAddressAfterCompact = 0xFFFFu;
    9e7e:	4e81      	ldr	r6, [pc, #516]	; (a084 <S_Nv_EarlyInit+0x2fc>)
                if ( WriteSectorHeader(INITIAL_SECTOR_SEQUENCE_NUMBER))
    9e80:	4d81      	ldr	r5, [pc, #516]	; (a088 <S_Nv_EarlyInit+0x300>)
    9e82:	e006      	b.n	9e92 <S_Nv_EarlyInit+0x10a>
            s_sector++;
    9e84:	4a79      	ldr	r2, [pc, #484]	; (a06c <S_Nv_EarlyInit+0x2e4>)
    9e86:	7813      	ldrb	r3, [r2, #0]
    9e88:	3301      	adds	r3, #1
    9e8a:	b2db      	uxtb	r3, r3
    9e8c:	7013      	strb	r3, [r2, #0]
            if ( s_sector >= (FIRST_SECTOR + SECTOR_COUNT) )
    9e8e:	2b01      	cmp	r3, #1
    9e90:	d815      	bhi.n	9ebe <S_Nv_EarlyInit+0x136>
            if ( EraseSector())
    9e92:	47a0      	blx	r4
    9e94:	2800      	cmp	r0, #0
    9e96:	d0f5      	beq.n	9e84 <S_Nv_EarlyInit+0xfc>
                s_nextPageAddressAfterCompact = 0xFFFFu;
    9e98:	2301      	movs	r3, #1
    9e9a:	425b      	negs	r3, r3
    9e9c:	8033      	strh	r3, [r6, #0]
                if ( WriteSectorHeader(INITIAL_SECTOR_SEQUENCE_NUMBER))
    9e9e:	2002      	movs	r0, #2
    9ea0:	4240      	negs	r0, r0
    9ea2:	47a8      	blx	r5
    9ea4:	2800      	cmp	r0, #0
    9ea6:	d0ed      	beq.n	9e84 <S_Nv_EarlyInit+0xfc>
        s_itemCount = 0u;
    9ea8:	2200      	movs	r2, #0
    9eaa:	4b6e      	ldr	r3, [pc, #440]	; (a064 <S_Nv_EarlyInit+0x2dc>)
    9eac:	701a      	strb	r2, [r3, #0]

        LoadSector(revisionNumber);
    }
    s_earlyInitDone = true;
    9eae:	2201      	movs	r2, #1
    9eb0:	4b76      	ldr	r3, [pc, #472]	; (a08c <S_Nv_EarlyInit+0x304>)
    9eb2:	701a      	strb	r2, [r3, #0]
}
    9eb4:	b011      	add	sp, #68	; 0x44
    9eb6:	bc0c      	pop	{r2, r3}
    9eb8:	4690      	mov	r8, r2
    9eba:	4699      	mov	r9, r3
    9ebc:	bdf0      	pop	{r4, r5, r6, r7, pc}
                assert(false);
    9ebe:	4b74      	ldr	r3, [pc, #464]	; (a090 <S_Nv_EarlyInit+0x308>)
    9ec0:	4a74      	ldr	r2, [pc, #464]	; (a094 <S_Nv_EarlyInit+0x30c>)
    9ec2:	4975      	ldr	r1, [pc, #468]	; (a098 <S_Nv_EarlyInit+0x310>)
    9ec4:	4875      	ldr	r0, [pc, #468]	; (a09c <S_Nv_EarlyInit+0x314>)
    9ec6:	4c76      	ldr	r4, [pc, #472]	; (a0a0 <S_Nv_EarlyInit+0x318>)
    9ec8:	47a0      	blx	r4
        s_sectorHead = sizeof(SectorHeaderSnv1_t);
    9eca:	2210      	movs	r2, #16
    9ecc:	4b68      	ldr	r3, [pc, #416]	; (a070 <S_Nv_EarlyInit+0x2e8>)
    9ece:	801a      	strh	r2, [r3, #0]
    9ed0:	2110      	movs	r1, #16
            D_Nv_Read(s_sector, s_sectorHead, (uint8_t*) &blockHeader, BLOCK_HEADER_SIZE);
    9ed2:	4e66      	ldr	r6, [pc, #408]	; (a06c <S_Nv_EarlyInit+0x2e4>)
    9ed4:	4d64      	ldr	r5, [pc, #400]	; (a068 <S_Nv_EarlyInit+0x2e0>)
    return ComputeCrc(((uint8_t*) pBlockHeader) + sizeof(pBlockHeader->isActive), sizeof(BlockHeaderSNv1_t) - (sizeof(pBlockHeader->isActive)  + sizeof(pBlockHeader->headerCrc)), 0xFFFF); // skip is Active and headerCrc fields
    9ed6:	4f69      	ldr	r7, [pc, #420]	; (a07c <S_Nv_EarlyInit+0x2f4>)
    9ed8:	e072      	b.n	9fc0 <S_Nv_EarlyInit+0x238>
            else if ( blockHeader.isActive != 0x0000u )
    9eda:	ab06      	add	r3, sp, #24
    9edc:	881b      	ldrh	r3, [r3, #0]
    9ede:	2b00      	cmp	r3, #0
    9ee0:	d007      	beq.n	9ef2 <S_Nv_EarlyInit+0x16a>
                UpdateSectorHead((BLOCK_HEADER_SIZE + blockHeader.blockLength), ITEM_16BYTE_ALIGNMENT);
    9ee2:	ab06      	add	r3, sp, #24
    9ee4:	88d8      	ldrh	r0, [r3, #6]
    9ee6:	3010      	adds	r0, #16
    9ee8:	b280      	uxth	r0, r0
    9eea:	2101      	movs	r1, #1
    9eec:	4b61      	ldr	r3, [pc, #388]	; (a074 <S_Nv_EarlyInit+0x2ec>)
    9eee:	4798      	blx	r3
    9ef0:	e061      	b.n	9fb6 <S_Nv_EarlyInit+0x22e>
                uint16_t id = blockHeader.id;
    9ef2:	ab06      	add	r3, sp, #24
    9ef4:	885c      	ldrh	r4, [r3, #2]
                Item_t *cache = FindItemCache(id);
    9ef6:	0020      	movs	r0, r4
    9ef8:	4b6a      	ldr	r3, [pc, #424]	; (a0a4 <S_Nv_EarlyInit+0x31c>)
    9efa:	4798      	blx	r3
                if (cache == NULL)
    9efc:	2800      	cmp	r0, #0
    9efe:	d010      	beq.n	9f22 <S_Nv_EarlyInit+0x19a>
                cache->lastBlock = s_sectorHead;
    9f00:	4b5b      	ldr	r3, [pc, #364]	; (a070 <S_Nv_EarlyInit+0x2e8>)
    9f02:	781a      	ldrb	r2, [r3, #0]
    9f04:	7082      	strb	r2, [r0, #2]
    9f06:	785b      	ldrb	r3, [r3, #1]
    9f08:	70c3      	strb	r3, [r0, #3]
                if ( blockHeader.itemLength == 0u )
    9f0a:	ab06      	add	r3, sp, #24
    9f0c:	891b      	ldrh	r3, [r3, #8]
    9f0e:	2b00      	cmp	r3, #0
    9f10:	d00b      	beq.n	9f2a <S_Nv_EarlyInit+0x1a2>
                UpdateSectorHead((BLOCK_HEADER_SIZE + blockHeader.blockLength), ITEM_16BYTE_ALIGNMENT);
    9f12:	ab06      	add	r3, sp, #24
    9f14:	88d8      	ldrh	r0, [r3, #6]
    9f16:	3010      	adds	r0, #16
    9f18:	b280      	uxth	r0, r0
    9f1a:	2101      	movs	r1, #1
    9f1c:	4b55      	ldr	r3, [pc, #340]	; (a074 <S_Nv_EarlyInit+0x2ec>)
    9f1e:	4798      	blx	r3
    9f20:	e049      	b.n	9fb6 <S_Nv_EarlyInit+0x22e>
                    cache = CreateItemCache(id);
    9f22:	0020      	movs	r0, r4
    9f24:	4b60      	ldr	r3, [pc, #384]	; (a0a8 <S_Nv_EarlyInit+0x320>)
    9f26:	4798      	blx	r3
    9f28:	e7ea      	b.n	9f00 <S_Nv_EarlyInit+0x178>
                    DeleteItemCache(id);
    9f2a:	0020      	movs	r0, r4
    9f2c:	4b5f      	ldr	r3, [pc, #380]	; (a0ac <S_Nv_EarlyInit+0x324>)
    9f2e:	4798      	blx	r3
    9f30:	e7ef      	b.n	9f12 <S_Nv_EarlyInit+0x18a>
                uint16_t crc = ComputeDataCrc(s_sector, s_sectorHead, &blockHeader);
    9f32:	4b4f      	ldr	r3, [pc, #316]	; (a070 <S_Nv_EarlyInit+0x2e8>)
    9f34:	8819      	ldrh	r1, [r3, #0]
    9f36:	4b4d      	ldr	r3, [pc, #308]	; (a06c <S_Nv_EarlyInit+0x2e4>)
    9f38:	7818      	ldrb	r0, [r3, #0]
    9f3a:	aa02      	add	r2, sp, #8
    9f3c:	4b5c      	ldr	r3, [pc, #368]	; (a0b0 <S_Nv_EarlyInit+0x328>)
    9f3e:	4798      	blx	r3
                if (crc != blockHeader.dataCrc)
    9f40:	ab02      	add	r3, sp, #8
    9f42:	881b      	ldrh	r3, [r3, #0]
    9f44:	4283      	cmp	r3, r0
    9f46:	d007      	beq.n	9f58 <S_Nv_EarlyInit+0x1d0>
                    UpdateSectorHead((BLOCK_HEADER_SIZE + blockHeader.blockLength), itemAlignment);
    9f48:	ab02      	add	r3, sp, #8
    9f4a:	88d8      	ldrh	r0, [r3, #6]
    9f4c:	3010      	adds	r0, #16
    9f4e:	b280      	uxth	r0, r0
    9f50:	0021      	movs	r1, r4
    9f52:	4b48      	ldr	r3, [pc, #288]	; (a074 <S_Nv_EarlyInit+0x2ec>)
    9f54:	4798      	blx	r3
    9f56:	e05e      	b.n	a016 <S_Nv_EarlyInit+0x28e>
                    uint16_t id = blockHeader.id;
    9f58:	ab02      	add	r3, sp, #8
    9f5a:	885f      	ldrh	r7, [r3, #2]
                    Item_t *cache = FindItemCache(id);
    9f5c:	0038      	movs	r0, r7
    9f5e:	4b51      	ldr	r3, [pc, #324]	; (a0a4 <S_Nv_EarlyInit+0x31c>)
    9f60:	4798      	blx	r3
                    if (cache == NULL)
    9f62:	2800      	cmp	r0, #0
    9f64:	d010      	beq.n	9f88 <S_Nv_EarlyInit+0x200>
                    cache->lastBlock = s_sectorHead;
    9f66:	4b42      	ldr	r3, [pc, #264]	; (a070 <S_Nv_EarlyInit+0x2e8>)
    9f68:	781a      	ldrb	r2, [r3, #0]
    9f6a:	7082      	strb	r2, [r0, #2]
    9f6c:	785b      	ldrb	r3, [r3, #1]
    9f6e:	70c3      	strb	r3, [r0, #3]
                    if ( blockHeader.itemLength == 0u )
    9f70:	ab02      	add	r3, sp, #8
    9f72:	891b      	ldrh	r3, [r3, #8]
    9f74:	2b00      	cmp	r3, #0
    9f76:	d00b      	beq.n	9f90 <S_Nv_EarlyInit+0x208>
                    UpdateSectorHead((BLOCK_HEADER_SIZE + blockHeader.blockLength), itemAlignment);
    9f78:	ab02      	add	r3, sp, #8
    9f7a:	88d8      	ldrh	r0, [r3, #6]
    9f7c:	3010      	adds	r0, #16
    9f7e:	b280      	uxth	r0, r0
    9f80:	0021      	movs	r1, r4
    9f82:	4b3c      	ldr	r3, [pc, #240]	; (a074 <S_Nv_EarlyInit+0x2ec>)
    9f84:	4798      	blx	r3
    9f86:	e046      	b.n	a016 <S_Nv_EarlyInit+0x28e>
                        cache = CreateItemCache(id);
    9f88:	0038      	movs	r0, r7
    9f8a:	4b47      	ldr	r3, [pc, #284]	; (a0a8 <S_Nv_EarlyInit+0x320>)
    9f8c:	4798      	blx	r3
    9f8e:	e7ea      	b.n	9f66 <S_Nv_EarlyInit+0x1de>
                        DeleteItemCache(id);
    9f90:	0038      	movs	r0, r7
    9f92:	4b46      	ldr	r3, [pc, #280]	; (a0ac <S_Nv_EarlyInit+0x324>)
    9f94:	4798      	blx	r3
    9f96:	e7ef      	b.n	9f78 <S_Nv_EarlyInit+0x1f0>
            else if ( blockHeader.headerCrc != ComputeHeaderCrcSnv1(&blockHeader) )
    9f98:	ab06      	add	r3, sp, #24
    9f9a:	89dc      	ldrh	r4, [r3, #14]
    return ComputeCrc(((uint8_t*) pBlockHeader) + sizeof(pBlockHeader->isActive), sizeof(BlockHeaderSNv1_t) - (sizeof(pBlockHeader->isActive)  + sizeof(pBlockHeader->headerCrc)), 0xFFFF); // skip is Active and headerCrc fields
    9f9c:	4a36      	ldr	r2, [pc, #216]	; (a078 <S_Nv_EarlyInit+0x2f0>)
    9f9e:	210c      	movs	r1, #12
    9fa0:	2012      	movs	r0, #18
    9fa2:	ab02      	add	r3, sp, #8
    9fa4:	469c      	mov	ip, r3
    9fa6:	4460      	add	r0, ip
    9fa8:	47b8      	blx	r7
            else if ( blockHeader.headerCrc != ComputeHeaderCrcSnv1(&blockHeader) )
    9faa:	4284      	cmp	r4, r0
    9fac:	d095      	beq.n	9eda <S_Nv_EarlyInit+0x152>
                UpdateSectorHead(BLOCK_HEADER_SIZE, ITEM_16BYTE_ALIGNMENT);
    9fae:	2101      	movs	r1, #1
    9fb0:	2010      	movs	r0, #16
    9fb2:	4b30      	ldr	r3, [pc, #192]	; (a074 <S_Nv_EarlyInit+0x2ec>)
    9fb4:	4798      	blx	r3
        while ( s_sectorHead < SECTOR_SIZE )
    9fb6:	4b2e      	ldr	r3, [pc, #184]	; (a070 <S_Nv_EarlyInit+0x2e8>)
    9fb8:	8819      	ldrh	r1, [r3, #0]
    9fba:	4b3e      	ldr	r3, [pc, #248]	; (a0b4 <S_Nv_EarlyInit+0x32c>)
    9fbc:	4299      	cmp	r1, r3
    9fbe:	d812      	bhi.n	9fe6 <S_Nv_EarlyInit+0x25e>
            D_Nv_Read(s_sector, s_sectorHead, (uint8_t*) &blockHeader, BLOCK_HEADER_SIZE);
    9fc0:	ac06      	add	r4, sp, #24
    9fc2:	7830      	ldrb	r0, [r6, #0]
    9fc4:	2310      	movs	r3, #16
    9fc6:	0022      	movs	r2, r4
    9fc8:	47a8      	blx	r5
        if ( pData[i] != 0xFFu )
    9fca:	7823      	ldrb	r3, [r4, #0]
    9fcc:	2bff      	cmp	r3, #255	; 0xff
    9fce:	d1e3      	bne.n	9f98 <S_Nv_EarlyInit+0x210>
    9fd0:	ab06      	add	r3, sp, #24
    9fd2:	211f      	movs	r1, #31
    9fd4:	aa02      	add	r2, sp, #8
    9fd6:	4694      	mov	ip, r2
    9fd8:	4461      	add	r1, ip
    9fda:	785a      	ldrb	r2, [r3, #1]
    9fdc:	2aff      	cmp	r2, #255	; 0xff
    9fde:	d1db      	bne.n	9f98 <S_Nv_EarlyInit+0x210>
    9fe0:	3301      	adds	r3, #1
    for ( uint16_t i = 0u; i < length; i++ )
    9fe2:	428b      	cmp	r3, r1
    9fe4:	d1f9      	bne.n	9fda <S_Nv_EarlyInit+0x252>
        if ( !CompactSector() )
    9fe6:	4b34      	ldr	r3, [pc, #208]	; (a0b8 <S_Nv_EarlyInit+0x330>)
    9fe8:	4798      	blx	r3
    9fea:	2800      	cmp	r0, #0
    9fec:	d000      	beq.n	9ff0 <S_Nv_EarlyInit+0x268>
    9fee:	e75e      	b.n	9eae <S_Nv_EarlyInit+0x126>
            assert(false);
    9ff0:	4b27      	ldr	r3, [pc, #156]	; (a090 <S_Nv_EarlyInit+0x308>)
    9ff2:	4a32      	ldr	r2, [pc, #200]	; (a0bc <S_Nv_EarlyInit+0x334>)
    9ff4:	4932      	ldr	r1, [pc, #200]	; (a0c0 <S_Nv_EarlyInit+0x338>)
    9ff6:	4829      	ldr	r0, [pc, #164]	; (a09c <S_Nv_EarlyInit+0x314>)
    9ff8:	4c29      	ldr	r4, [pc, #164]	; (a0a0 <S_Nv_EarlyInit+0x318>)
    9ffa:	47a0      	blx	r4
            else if ( blockHeader.headerCrc != ComputeHeaderCrc(&blockHeader) )
    9ffc:	ab02      	add	r3, sp, #8
    9ffe:	89df      	ldrh	r7, [r3, #14]
    return ComputeCrc(((uint8_t*) pBlockHeader), (sizeof(BlockHeader_t) - sizeof(pBlockHeader->headerCrc)), 0xFFFFu); // skip headerCrc field
    a000:	4a1d      	ldr	r2, [pc, #116]	; (a078 <S_Nv_EarlyInit+0x2f0>)
    a002:	210e      	movs	r1, #14
    a004:	0018      	movs	r0, r3
    a006:	4b1d      	ldr	r3, [pc, #116]	; (a07c <S_Nv_EarlyInit+0x2f4>)
    a008:	4798      	blx	r3
            else if ( blockHeader.headerCrc != ComputeHeaderCrc(&blockHeader) )
    a00a:	4287      	cmp	r7, r0
    a00c:	d091      	beq.n	9f32 <S_Nv_EarlyInit+0x1aa>
                UpdateSectorHead(BLOCK_HEADER_SIZE, itemAlignment);
    a00e:	0021      	movs	r1, r4
    a010:	2010      	movs	r0, #16
    a012:	4b18      	ldr	r3, [pc, #96]	; (a074 <S_Nv_EarlyInit+0x2ec>)
    a014:	4798      	blx	r3
        while ( s_sectorHead < SECTOR_SIZE )
    a016:	882b      	ldrh	r3, [r5, #0]
    a018:	4a26      	ldr	r2, [pc, #152]	; (a0b4 <S_Nv_EarlyInit+0x32c>)
    a01a:	4293      	cmp	r3, r2
    a01c:	d900      	bls.n	a020 <S_Nv_EarlyInit+0x298>
    a01e:	e746      	b.n	9eae <S_Nv_EarlyInit+0x126>
            if ((sectorHeader.nextPageAddressAfterCompact != 0xFFFFu)  && (s_sectorHead < sectorHeader.nextPageAddressAfterCompact))
    a020:	aa06      	add	r2, sp, #24
    a022:	8a12      	ldrh	r2, [r2, #16]
    a024:	4914      	ldr	r1, [pc, #80]	; (a078 <S_Nv_EarlyInit+0x2f0>)
    a026:	428a      	cmp	r2, r1
    a028:	d002      	beq.n	a030 <S_Nv_EarlyInit+0x2a8>
                itemAlignment = ITEM_NO_ALIGNMENT;
    a02a:	2400      	movs	r4, #0
            if ((sectorHeader.nextPageAddressAfterCompact != 0xFFFFu)  && (s_sectorHead < sectorHeader.nextPageAddressAfterCompact))
    a02c:	429a      	cmp	r2, r3
    a02e:	d803      	bhi.n	a038 <S_Nv_EarlyInit+0x2b0>
                UpdateSectorHead(0, itemAlignment);
    a030:	2102      	movs	r1, #2
    a032:	2000      	movs	r0, #0
    a034:	47c0      	blx	r8
                itemAlignment = ITEM_64BYTE_ALIGNMENT;
    a036:	2402      	movs	r4, #2
            D_Nv_Read(s_sector, s_sectorHead, (uint8_t*) &blockHeader, BLOCK_HEADER_SIZE);
    a038:	8831      	ldrh	r1, [r6, #0]
    a03a:	4b0c      	ldr	r3, [pc, #48]	; (a06c <S_Nv_EarlyInit+0x2e4>)
    a03c:	7818      	ldrb	r0, [r3, #0]
    a03e:	2310      	movs	r3, #16
    a040:	aa02      	add	r2, sp, #8
    a042:	4f09      	ldr	r7, [pc, #36]	; (a068 <S_Nv_EarlyInit+0x2e0>)
    a044:	47b8      	blx	r7
        if ( pData[i] != 0xFFu )
    a046:	ab02      	add	r3, sp, #8
    a048:	781b      	ldrb	r3, [r3, #0]
    a04a:	2bff      	cmp	r3, #255	; 0xff
    a04c:	d1d6      	bne.n	9ffc <S_Nv_EarlyInit+0x274>
    a04e:	ab02      	add	r3, sp, #8
    a050:	210f      	movs	r1, #15
    a052:	469c      	mov	ip, r3
    a054:	4461      	add	r1, ip
    a056:	785a      	ldrb	r2, [r3, #1]
    a058:	2aff      	cmp	r2, #255	; 0xff
    a05a:	d1cf      	bne.n	9ffc <S_Nv_EarlyInit+0x274>
    a05c:	3301      	adds	r3, #1
    for ( uint16_t i = 0u; i < length; i++ )
    a05e:	428b      	cmp	r3, r1
    a060:	d1f9      	bne.n	a056 <S_Nv_EarlyInit+0x2ce>
    a062:	e724      	b.n	9eae <S_Nv_EarlyInit+0x126>
    a064:	200003c8 	.word	0x200003c8
    a068:	00008fc5 	.word	0x00008fc5
    a06c:	200003d0 	.word	0x200003d0
    a070:	200003d2 	.word	0x200003d2
    a074:	00009231 	.word	0x00009231
    a078:	0000ffff 	.word	0x0000ffff
    a07c:	0000926d 	.word	0x0000926d
    a080:	00009571 	.word	0x00009571
    a084:	200003ca 	.word	0x200003ca
    a088:	000095d9 	.word	0x000095d9
    a08c:	2000039c 	.word	0x2000039c
    a090:	00016178 	.word	0x00016178
    a094:	00016330 	.word	0x00016330
    a098:	0000052b 	.word	0x0000052b
    a09c:	000161f4 	.word	0x000161f4
    a0a0:	00014c1d 	.word	0x00014c1d
    a0a4:	0000940d 	.word	0x0000940d
    a0a8:	0000949d 	.word	0x0000949d
    a0ac:	000094fd 	.word	0x000094fd
    a0b0:	00009365 	.word	0x00009365
    a0b4:	00001fff 	.word	0x00001fff
    a0b8:	000096d9 	.word	0x000096d9
    a0bc:	000162f0 	.word	0x000162f0
    a0c0:	00000336 	.word	0x00000336

0000a0c4 <S_Nv_Init>:


void S_Nv_Init(void)
{
    a0c4:	b510      	push	{r4, lr}
    if (!s_earlyInitDone)
    a0c6:	4b08      	ldr	r3, [pc, #32]	; (a0e8 <S_Nv_Init+0x24>)
    a0c8:	781b      	ldrb	r3, [r3, #0]
    a0ca:	2b00      	cmp	r3, #0
    a0cc:	d008      	beq.n	a0e0 <S_Nv_Init+0x1c>
    {
        S_Nv_EarlyInit();
    }

    eraseSectorTimer.handler = eraseSectorTimerFired;
    a0ce:	4b07      	ldr	r3, [pc, #28]	; (a0ec <S_Nv_Init+0x28>)
    a0d0:	4a07      	ldr	r2, [pc, #28]	; (a0f0 <S_Nv_Init+0x2c>)
    a0d2:	611a      	str	r2, [r3, #16]
    eraseSectorTimer.timeout = ERASE_SECTOR_DELAY_MS;
    a0d4:	4a07      	ldr	r2, [pc, #28]	; (a0f4 <S_Nv_Init+0x30>)
    a0d6:	605a      	str	r2, [r3, #4]
    eraseSectorTimer.interval = ERASE_SECTOR_DELAY_MS;
    a0d8:	609a      	str	r2, [r3, #8]
    eraseSectorTimer.mode = SYS_TIMER_INTERVAL_MODE;
    a0da:	2200      	movs	r2, #0
    a0dc:	731a      	strb	r2, [r3, #12]
}
    a0de:	bd10      	pop	{r4, pc}
        S_Nv_EarlyInit();
    a0e0:	4b05      	ldr	r3, [pc, #20]	; (a0f8 <S_Nv_Init+0x34>)
    a0e2:	4798      	blx	r3
    a0e4:	e7f3      	b.n	a0ce <S_Nv_Init+0xa>
    a0e6:	46c0      	nop			; (mov r8, r8)
    a0e8:	2000039c 	.word	0x2000039c
    a0ec:	20000384 	.word	0x20000384
    a0f0:	0000954d 	.word	0x0000954d
    a0f4:	00001b58 	.word	0x00001b58
    a0f8:	00009d89 	.word	0x00009d89

0000a0fc <S_Nv_Write_Impl>:
#if defined(S_XNV_LOGGING)
static S_Nv_ReturnValue_t S_Nv_Write_Original(S_Nv_ItemId_t id, uint16_t offset, uint16_t dataLength, void* pData)
#else
S_Nv_ReturnValue_t S_Nv_Write_Impl(S_Nv_ItemId_t id, uint16_t offset, uint16_t dataLength, void* pData)
#endif
{
    a0fc:	b5f0      	push	{r4, r5, r6, r7, lr}
    a0fe:	46ce      	mov	lr, r9
    a100:	4647      	mov	r7, r8
    a102:	b580      	push	{r7, lr}
    a104:	b087      	sub	sp, #28
    a106:	0004      	movs	r4, r0
    a108:	9101      	str	r1, [sp, #4]
    a10a:	0015      	movs	r5, r2
    a10c:	001f      	movs	r7, r3
    assert((id != 0u) && (pData != NULL));
    a10e:	2800      	cmp	r0, #0
    a110:	d00c      	beq.n	a12c <S_Nv_Write_Impl+0x30>
    a112:	2b00      	cmp	r3, #0
    a114:	d00a      	beq.n	a12c <S_Nv_Write_Impl+0x30>

    if ( PowerSupplyTooLow() )
    a116:	4b35      	ldr	r3, [pc, #212]	; (a1ec <S_Nv_Write_Impl+0xf0>)
    a118:	4798      	blx	r3
    {
        return S_Nv_ReturnValue_PowerSupplyTooLow;
    a11a:	2305      	movs	r3, #5
    if ( PowerSupplyTooLow() )
    a11c:	2800      	cmp	r0, #0
    a11e:	d00b      	beq.n	a138 <S_Nv_Write_Impl+0x3c>
        //SYS_StartTimer(&compactItemTimer);
        }
    }

    return S_Nv_ReturnValue_Ok;
}
    a120:	0018      	movs	r0, r3
    a122:	b007      	add	sp, #28
    a124:	bc0c      	pop	{r2, r3}
    a126:	4690      	mov	r8, r2
    a128:	4699      	mov	r9, r3
    a12a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    assert((id != 0u) && (pData != NULL));
    a12c:	4b30      	ldr	r3, [pc, #192]	; (a1f0 <S_Nv_Write_Impl+0xf4>)
    a12e:	4a31      	ldr	r2, [pc, #196]	; (a1f4 <S_Nv_Write_Impl+0xf8>)
    a130:	4931      	ldr	r1, [pc, #196]	; (a1f8 <S_Nv_Write_Impl+0xfc>)
    a132:	4832      	ldr	r0, [pc, #200]	; (a1fc <S_Nv_Write_Impl+0x100>)
    a134:	4c32      	ldr	r4, [pc, #200]	; (a200 <S_Nv_Write_Impl+0x104>)
    a136:	47a0      	blx	r4
    CompactSectorIfNeeded(BLOCK_HEADER_SIZE + dataLength);
    a138:	0028      	movs	r0, r5
    a13a:	3010      	adds	r0, #16
    a13c:	b280      	uxth	r0, r0
    a13e:	4b31      	ldr	r3, [pc, #196]	; (a204 <S_Nv_Write_Impl+0x108>)
    a140:	4798      	blx	r3
    Item_t *cache = FindItemCache(id);
    a142:	0020      	movs	r0, r4
    a144:	4b30      	ldr	r3, [pc, #192]	; (a208 <S_Nv_Write_Impl+0x10c>)
    a146:	4798      	blx	r3
    a148:	0006      	movs	r6, r0
        return S_Nv_ReturnValue_DoesNotExist;
    a14a:	2303      	movs	r3, #3
    if ( cache == NULL )
    a14c:	2800      	cmp	r0, #0
    a14e:	d0e7      	beq.n	a120 <S_Nv_Write_Impl+0x24>
    uint16_t blockPointer = cache->lastBlock;
    a150:	7883      	ldrb	r3, [r0, #2]
    a152:	78c4      	ldrb	r4, [r0, #3]
    a154:	0224      	lsls	r4, r4, #8
    a156:	431c      	orrs	r4, r3
    a158:	46a0      	mov	r8, r4
    D_Nv_Read(s_sector, blockPointer, (uint8_t*) &blockHeader, BLOCK_HEADER_SIZE);
    a15a:	4b2c      	ldr	r3, [pc, #176]	; (a20c <S_Nv_Write_Impl+0x110>)
    a15c:	7818      	ldrb	r0, [r3, #0]
    a15e:	2310      	movs	r3, #16
    a160:	aa02      	add	r2, sp, #8
    a162:	0021      	movs	r1, r4
    a164:	4c2a      	ldr	r4, [pc, #168]	; (a210 <S_Nv_Write_Impl+0x114>)
    a166:	47a0      	blx	r4
    if ( ((uint32_t) offset + (uint32_t) dataLength) > (uint32_t) blockHeader.itemLength )
    a168:	ab02      	add	r3, sp, #8
    a16a:	8919      	ldrh	r1, [r3, #8]
    a16c:	9b01      	ldr	r3, [sp, #4]
    a16e:	195a      	adds	r2, r3, r5
        return S_Nv_ReturnValue_BeyondEnd;
    a170:	2304      	movs	r3, #4
    if ( ((uint32_t) offset + (uint32_t) dataLength) > (uint32_t) blockHeader.itemLength )
    a172:	428a      	cmp	r2, r1
    a174:	d8d4      	bhi.n	a120 <S_Nv_Write_Impl+0x24>
    blockHeader.blockOffset = offset;
    a176:	ab02      	add	r3, sp, #8
    a178:	466a      	mov	r2, sp
    a17a:	8892      	ldrh	r2, [r2, #4]
    a17c:	809a      	strh	r2, [r3, #4]
    blockHeader.blockLength = dataLength;
    a17e:	80dd      	strh	r5, [r3, #6]
    blockHeader.previousBlock = blockPointer;
    a180:	4642      	mov	r2, r8
    a182:	815a      	strh	r2, [r3, #10]
    if ( blockHeader.blockLength == blockHeader.itemLength )
    a184:	428d      	cmp	r5, r1
    a186:	d02c      	beq.n	a1e2 <S_Nv_Write_Impl+0xe6>
        blockHeader.writeCount++;
    a188:	ab02      	add	r3, sp, #8
    a18a:	899b      	ldrh	r3, [r3, #12]
    a18c:	3301      	adds	r3, #1
    a18e:	aa02      	add	r2, sp, #8
    a190:	8193      	strh	r3, [r2, #12]
    uint16_t newBlockPointer = s_sectorHead;
    a192:	4b20      	ldr	r3, [pc, #128]	; (a214 <S_Nv_Write_Impl+0x118>)
    a194:	881c      	ldrh	r4, [r3, #0]
    if ( !WriteDataBlockAndHeader(&blockHeader, (uint8_t*) pData) )
    a196:	0039      	movs	r1, r7
    a198:	a802      	add	r0, sp, #8
    a19a:	4b1f      	ldr	r3, [pc, #124]	; (a218 <S_Nv_Write_Impl+0x11c>)
    a19c:	4798      	blx	r3
        return S_Nv_ReturnValue_Failure;
    a19e:	2301      	movs	r3, #1
    if ( !WriteDataBlockAndHeader(&blockHeader, (uint8_t*) pData) )
    a1a0:	2800      	cmp	r0, #0
    a1a2:	d0bd      	beq.n	a120 <S_Nv_Write_Impl+0x24>
    cache->lastBlock = newBlockPointer;
    a1a4:	70b4      	strb	r4, [r6, #2]
    a1a6:	0a24      	lsrs	r4, r4, #8
    a1a8:	70f4      	strb	r4, [r6, #3]
    if ( blockHeader.writeCount > COMPACT_ITEM_THRESHOLD )
    a1aa:	ab02      	add	r3, sp, #8
    a1ac:	899a      	ldrh	r2, [r3, #12]
    return S_Nv_ReturnValue_Ok;
    a1ae:	2300      	movs	r3, #0
    if ( blockHeader.writeCount > COMPACT_ITEM_THRESHOLD )
    a1b0:	2a64      	cmp	r2, #100	; 0x64
    a1b2:	d9b5      	bls.n	a120 <S_Nv_Write_Impl+0x24>
        s_compactItemId = blockHeader.id;
    a1b4:	ab02      	add	r3, sp, #8
    a1b6:	885a      	ldrh	r2, [r3, #2]
    a1b8:	4b18      	ldr	r3, [pc, #96]	; (a21c <S_Nv_Write_Impl+0x120>)
    a1ba:	801a      	strh	r2, [r3, #0]
        s_compactItemLength = 0u;           // no need to resize this item here
    a1bc:	2200      	movs	r2, #0
    a1be:	4b18      	ldr	r3, [pc, #96]	; (a220 <S_Nv_Write_Impl+0x124>)
    a1c0:	801a      	strh	r2, [r3, #0]
        if (!SYS_TimerStarted(&compactItemTimer))
    a1c2:	4818      	ldr	r0, [pc, #96]	; (a224 <S_Nv_Write_Impl+0x128>)
    a1c4:	4b18      	ldr	r3, [pc, #96]	; (a228 <S_Nv_Write_Impl+0x12c>)
    a1c6:	4798      	blx	r3
    return S_Nv_ReturnValue_Ok;
    a1c8:	2300      	movs	r3, #0
        if (!SYS_TimerStarted(&compactItemTimer))
    a1ca:	2800      	cmp	r0, #0
    a1cc:	d1a8      	bne.n	a120 <S_Nv_Write_Impl+0x24>
        compactItemTimer.handler = compactItemTimerFired;
    a1ce:	4b15      	ldr	r3, [pc, #84]	; (a224 <S_Nv_Write_Impl+0x128>)
    a1d0:	4a16      	ldr	r2, [pc, #88]	; (a22c <S_Nv_Write_Impl+0x130>)
    a1d2:	611a      	str	r2, [r3, #16]
        compactItemTimer.timeout = COMPACT_ITEM_DELAY_MS;
    a1d4:	4a16      	ldr	r2, [pc, #88]	; (a230 <S_Nv_Write_Impl+0x134>)
    a1d6:	605a      	str	r2, [r3, #4]
        compactItemTimer.interval = COMPACT_ITEM_DELAY_MS;
    a1d8:	609a      	str	r2, [r3, #8]
        compactItemTimer.mode = SYS_TIMER_INTERVAL_MODE;
    a1da:	2200      	movs	r2, #0
    a1dc:	731a      	strb	r2, [r3, #12]
    return S_Nv_ReturnValue_Ok;
    a1de:	2300      	movs	r3, #0
    a1e0:	e79e      	b.n	a120 <S_Nv_Write_Impl+0x24>
        blockHeader.writeCount = 0u;
    a1e2:	2300      	movs	r3, #0
    a1e4:	aa02      	add	r2, sp, #8
    a1e6:	8193      	strh	r3, [r2, #12]
    a1e8:	e7d3      	b.n	a192 <S_Nv_Write_Impl+0x96>
    a1ea:	46c0      	nop			; (mov r8, r8)
    a1ec:	00009215 	.word	0x00009215
    a1f0:	00016288 	.word	0x00016288
    a1f4:	00016354 	.word	0x00016354
    a1f8:	00000596 	.word	0x00000596
    a1fc:	000161f4 	.word	0x000161f4
    a200:	00014c1d 	.word	0x00014c1d
    a204:	00009989 	.word	0x00009989
    a208:	0000940d 	.word	0x0000940d
    a20c:	200003d0 	.word	0x200003d0
    a210:	00008fc5 	.word	0x00008fc5
    a214:	200003d2 	.word	0x200003d2
    a218:	00009c3d 	.word	0x00009c3d
    a21c:	20000398 	.word	0x20000398
    a220:	2000039a 	.word	0x2000039a
    a224:	20000258 	.word	0x20000258
    a228:	0000bf99 	.word	0x0000bf99
    a22c:	00009c31 	.word	0x00009c31
    a230:	00000bb8 	.word	0x00000bb8

0000a234 <S_Nv_Read_Impl>:
#if defined(S_XNV_LOGGING)
static S_Nv_ReturnValue_t S_Nv_Read_Original(S_Nv_ItemId_t id, uint16_t offset, uint16_t dataLength, void* pData)
#else
S_Nv_ReturnValue_t S_Nv_Read_Impl(S_Nv_ItemId_t id, uint16_t offset, uint16_t dataLength, void* pData)
#endif
{
    a234:	b5f0      	push	{r4, r5, r6, r7, lr}
    a236:	b083      	sub	sp, #12
    a238:	000c      	movs	r4, r1
    a23a:	0015      	movs	r5, r2
    a23c:	001e      	movs	r6, r3
    assert((id != 0u) && (pData != NULL));
    a23e:	2800      	cmp	r0, #0
    a240:	d009      	beq.n	a256 <S_Nv_Read_Impl+0x22>
    a242:	2b00      	cmp	r3, #0
    a244:	d007      	beq.n	a256 <S_Nv_Read_Impl+0x22>

    // get the pointer to the last written block for the item
    uint16_t lastBlockPointer = FindItem(id);
    a246:	4b10      	ldr	r3, [pc, #64]	; (a288 <S_Nv_Read_Impl+0x54>)
    a248:	4798      	blx	r3
    if ( lastBlockPointer == 0x0000u )
    {
        // item does not exist
        return S_Nv_ReturnValue_DoesNotExist;
    a24a:	2303      	movs	r3, #3
    if ( lastBlockPointer == 0x0000u )
    a24c:	2800      	cmp	r0, #0
    a24e:	d108      	bne.n	a262 <S_Nv_Read_Impl+0x2e>
    {
        return S_Nv_ReturnValue_BeyondEnd;
    }

    return S_Nv_ReturnValue_Ok;
}
    a250:	0018      	movs	r0, r3
    a252:	b003      	add	sp, #12
    a254:	bdf0      	pop	{r4, r5, r6, r7, pc}
    assert((id != 0u) && (pData != NULL));
    a256:	4b0d      	ldr	r3, [pc, #52]	; (a28c <S_Nv_Read_Impl+0x58>)
    a258:	4a0d      	ldr	r2, [pc, #52]	; (a290 <S_Nv_Read_Impl+0x5c>)
    a25a:	490e      	ldr	r1, [pc, #56]	; (a294 <S_Nv_Read_Impl+0x60>)
    a25c:	480e      	ldr	r0, [pc, #56]	; (a298 <S_Nv_Read_Impl+0x64>)
    a25e:	4c0f      	ldr	r4, [pc, #60]	; (a29c <S_Nv_Read_Impl+0x68>)
    a260:	47a0      	blx	r4
    if ( ((uint32_t) offset + (uint32_t) dataLength) >= 0x10000uL )
    a262:	1962      	adds	r2, r4, r5
    a264:	490e      	ldr	r1, [pc, #56]	; (a2a0 <S_Nv_Read_Impl+0x6c>)
        return S_Nv_ReturnValue_BeyondEnd;
    a266:	3301      	adds	r3, #1
    if ( ((uint32_t) offset + (uint32_t) dataLength) >= 0x10000uL )
    a268:	428a      	cmp	r2, r1
    a26a:	d8f1      	bhi.n	a250 <S_Nv_Read_Impl+0x1c>
    if ( !GatherData(s_sector, lastBlockPointer, offset, dataLength, pData ))
    a26c:	4b0d      	ldr	r3, [pc, #52]	; (a2a4 <S_Nv_Read_Impl+0x70>)
    a26e:	781f      	ldrb	r7, [r3, #0]
    a270:	9600      	str	r6, [sp, #0]
    a272:	002b      	movs	r3, r5
    a274:	0022      	movs	r2, r4
    a276:	0001      	movs	r1, r0
    a278:	0038      	movs	r0, r7
    a27a:	4c0b      	ldr	r4, [pc, #44]	; (a2a8 <S_Nv_Read_Impl+0x74>)
    a27c:	47a0      	blx	r4
    return S_Nv_ReturnValue_Ok;
    a27e:	4243      	negs	r3, r0
    a280:	4143      	adcs	r3, r0
    a282:	009b      	lsls	r3, r3, #2
    a284:	e7e4      	b.n	a250 <S_Nv_Read_Impl+0x1c>
    a286:	46c0      	nop			; (mov r8, r8)
    a288:	00009481 	.word	0x00009481
    a28c:	00016288 	.word	0x00016288
    a290:	00016364 	.word	0x00016364
    a294:	000005ee 	.word	0x000005ee
    a298:	000161f4 	.word	0x000161f4
    a29c:	00014c1d 	.word	0x00014c1d
    a2a0:	0000ffff 	.word	0x0000ffff
    a2a4:	200003d0 	.word	0x200003d0
    a2a8:	000092ad 	.word	0x000092ad

0000a2ac <S_Nv_ItemLength_Impl>:

/** Interface function, see \ref S_Nv_ItemLength. */
uint16_t S_Nv_ItemLength_Impl(S_Nv_ItemId_t id)
{
    a2ac:	b510      	push	{r4, lr}
    a2ae:	b084      	sub	sp, #16
    assert(id != 0u);
    a2b0:	2800      	cmp	r0, #0
    a2b2:	d005      	beq.n	a2c0 <S_Nv_ItemLength_Impl+0x14>

    uint16_t blockPointer = FindItem(id);
    a2b4:	4b0a      	ldr	r3, [pc, #40]	; (a2e0 <S_Nv_ItemLength_Impl+0x34>)
    a2b6:	4798      	blx	r3
    a2b8:	1e01      	subs	r1, r0, #0
    if ( blockPointer == 0x0000u )
    a2ba:	d107      	bne.n	a2cc <S_Nv_ItemLength_Impl+0x20>

    // read last written item block header
    BlockHeader_t blockHeader;
    D_Nv_Read(s_sector, blockPointer, (uint8_t*) &blockHeader, BLOCK_HEADER_SIZE);
    return blockHeader.itemLength;
}
    a2bc:	b004      	add	sp, #16
    a2be:	bd10      	pop	{r4, pc}
    assert(id != 0u);
    a2c0:	4b08      	ldr	r3, [pc, #32]	; (a2e4 <S_Nv_ItemLength_Impl+0x38>)
    a2c2:	4a09      	ldr	r2, [pc, #36]	; (a2e8 <S_Nv_ItemLength_Impl+0x3c>)
    a2c4:	4909      	ldr	r1, [pc, #36]	; (a2ec <S_Nv_ItemLength_Impl+0x40>)
    a2c6:	480a      	ldr	r0, [pc, #40]	; (a2f0 <S_Nv_ItemLength_Impl+0x44>)
    a2c8:	4c0a      	ldr	r4, [pc, #40]	; (a2f4 <S_Nv_ItemLength_Impl+0x48>)
    a2ca:	47a0      	blx	r4
    D_Nv_Read(s_sector, blockPointer, (uint8_t*) &blockHeader, BLOCK_HEADER_SIZE);
    a2cc:	4b0a      	ldr	r3, [pc, #40]	; (a2f8 <S_Nv_ItemLength_Impl+0x4c>)
    a2ce:	7818      	ldrb	r0, [r3, #0]
    a2d0:	2310      	movs	r3, #16
    a2d2:	466a      	mov	r2, sp
    a2d4:	4c09      	ldr	r4, [pc, #36]	; (a2fc <S_Nv_ItemLength_Impl+0x50>)
    a2d6:	47a0      	blx	r4
    return blockHeader.itemLength;
    a2d8:	466b      	mov	r3, sp
    a2da:	8918      	ldrh	r0, [r3, #8]
    a2dc:	e7ee      	b.n	a2bc <S_Nv_ItemLength_Impl+0x10>
    a2de:	46c0      	nop			; (mov r8, r8)
    a2e0:	00009481 	.word	0x00009481
    a2e4:	0001627c 	.word	0x0001627c
    a2e8:	00016374 	.word	0x00016374
    a2ec:	0000060b 	.word	0x0000060b
    a2f0:	000161f4 	.word	0x000161f4
    a2f4:	00014c1d 	.word	0x00014c1d
    a2f8:	200003d0 	.word	0x200003d0
    a2fc:	00008fc5 	.word	0x00008fc5

0000a300 <S_Nv_ItemInit_Impl>:
{
    a300:	b5f0      	push	{r4, r5, r6, r7, lr}
    a302:	b085      	sub	sp, #20
    a304:	0004      	movs	r4, r0
    a306:	000e      	movs	r6, r1
    a308:	0015      	movs	r5, r2
    assert((id != 0u) && (id < 0xF000u) && (itemLength <= MAX_ITEM_LENGTH));
    a30a:	1e43      	subs	r3, r0, #1
    a30c:	b29b      	uxth	r3, r3
    a30e:	4a2e      	ldr	r2, [pc, #184]	; (a3c8 <S_Nv_ItemInit_Impl+0xc8>)
    a310:	4293      	cmp	r3, r2
    a312:	d81e      	bhi.n	a352 <S_Nv_ItemInit_Impl+0x52>
    a314:	2380      	movs	r3, #128	; 0x80
    a316:	011b      	lsls	r3, r3, #4
    a318:	4299      	cmp	r1, r3
    a31a:	d81a      	bhi.n	a352 <S_Nv_ItemInit_Impl+0x52>
    if ( FindItem(id) != 0x0000u )
    a31c:	4b2b      	ldr	r3, [pc, #172]	; (a3cc <S_Nv_ItemInit_Impl+0xcc>)
    a31e:	4798      	blx	r3
    a320:	2800      	cmp	r0, #0
    a322:	d01d      	beq.n	a360 <S_Nv_ItemInit_Impl+0x60>
        uint16_t oldItemLength = S_Nv_ItemLength(id);
    a324:	0020      	movs	r0, r4
    a326:	4b2a      	ldr	r3, [pc, #168]	; (a3d0 <S_Nv_ItemInit_Impl+0xd0>)
    a328:	4798      	blx	r3
        if ( oldItemLength != itemLength )
    a32a:	4286      	cmp	r6, r0
    a32c:	d007      	beq.n	a33e <S_Nv_ItemInit_Impl+0x3e>
            s_compactItemId = id;
    a32e:	4b29      	ldr	r3, [pc, #164]	; (a3d4 <S_Nv_ItemInit_Impl+0xd4>)
    a330:	801c      	strh	r4, [r3, #0]
            s_compactItemLength = itemLength;
    a332:	4b29      	ldr	r3, [pc, #164]	; (a3d8 <S_Nv_ItemInit_Impl+0xd8>)
    a334:	801e      	strh	r6, [r3, #0]
            S_Nv_ReturnValue_t resizeResult = CompactItem();
    a336:	4b29      	ldr	r3, [pc, #164]	; (a3dc <S_Nv_ItemInit_Impl+0xdc>)
    a338:	4798      	blx	r3
    a33a:	1e03      	subs	r3, r0, #0
            if ( resizeResult != S_Nv_ReturnValue_Ok )
    a33c:	d115      	bne.n	a36a <S_Nv_ItemInit_Impl+0x6a>
        if (pDefaultData != NULL)
    a33e:	2d00      	cmp	r5, #0
    a340:	d040      	beq.n	a3c4 <S_Nv_ItemInit_Impl+0xc4>
            return S_Nv_Read(id, 0u, itemLength, pDefaultData);
    a342:	002b      	movs	r3, r5
    a344:	0032      	movs	r2, r6
    a346:	2100      	movs	r1, #0
    a348:	0020      	movs	r0, r4
    a34a:	4c25      	ldr	r4, [pc, #148]	; (a3e0 <S_Nv_ItemInit_Impl+0xe0>)
    a34c:	47a0      	blx	r4
    a34e:	0003      	movs	r3, r0
    a350:	e00b      	b.n	a36a <S_Nv_ItemInit_Impl+0x6a>
    assert((id != 0u) && (id < 0xF000u) && (itemLength <= MAX_ITEM_LENGTH));
    a352:	4b24      	ldr	r3, [pc, #144]	; (a3e4 <S_Nv_ItemInit_Impl+0xe4>)
    a354:	4a24      	ldr	r2, [pc, #144]	; (a3e8 <S_Nv_ItemInit_Impl+0xe8>)
    a356:	21aa      	movs	r1, #170	; 0xaa
    a358:	00c9      	lsls	r1, r1, #3
    a35a:	4824      	ldr	r0, [pc, #144]	; (a3ec <S_Nv_ItemInit_Impl+0xec>)
    a35c:	4c24      	ldr	r4, [pc, #144]	; (a3f0 <S_Nv_ItemInit_Impl+0xf0>)
    a35e:	47a0      	blx	r4
    if ( PowerSupplyTooLow() )
    a360:	4b24      	ldr	r3, [pc, #144]	; (a3f4 <S_Nv_ItemInit_Impl+0xf4>)
    a362:	4798      	blx	r3
        return S_Nv_ReturnValue_PowerSupplyTooLow;
    a364:	2305      	movs	r3, #5
    if ( PowerSupplyTooLow() )
    a366:	2800      	cmp	r0, #0
    a368:	d002      	beq.n	a370 <S_Nv_ItemInit_Impl+0x70>
}
    a36a:	0018      	movs	r0, r3
    a36c:	b005      	add	sp, #20
    a36e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    CompactSectorIfNeeded(BLOCK_HEADER_SIZE + itemLength);
    a370:	0030      	movs	r0, r6
    a372:	3010      	adds	r0, #16
    a374:	b280      	uxth	r0, r0
    a376:	4b20      	ldr	r3, [pc, #128]	; (a3f8 <S_Nv_ItemInit_Impl+0xf8>)
    a378:	4798      	blx	r3
    assert(s_itemCount < MAX_ITEM_COUNT);
    a37a:	4b20      	ldr	r3, [pc, #128]	; (a3fc <S_Nv_ItemInit_Impl+0xfc>)
    a37c:	781b      	ldrb	r3, [r3, #0]
    a37e:	2b09      	cmp	r3, #9
    a380:	d819      	bhi.n	a3b6 <S_Nv_ItemInit_Impl+0xb6>
    uint16_t newItemPointer = s_sectorHead;
    a382:	4b1f      	ldr	r3, [pc, #124]	; (a400 <S_Nv_ItemInit_Impl+0x100>)
    a384:	881f      	ldrh	r7, [r3, #0]
    blockHeader.id = newItemId;
    a386:	466b      	mov	r3, sp
    a388:	805c      	strh	r4, [r3, #2]
    blockHeader.blockOffset = 0x0000u;
    a38a:	2300      	movs	r3, #0
    a38c:	466a      	mov	r2, sp
    a38e:	8093      	strh	r3, [r2, #4]
    blockHeader.blockLength = itemLength;
    a390:	80d6      	strh	r6, [r2, #6]
    blockHeader.itemLength = itemLength;
    a392:	8116      	strh	r6, [r2, #8]
    blockHeader.previousBlock = 0x0000u;
    a394:	8153      	strh	r3, [r2, #10]
    blockHeader.writeCount = 0u;
    a396:	8193      	strh	r3, [r2, #12]
    if ( !WriteDataBlockAndHeader(&blockHeader, (uint8_t*) pDefaultData) )
    a398:	0029      	movs	r1, r5
    a39a:	4668      	mov	r0, sp
    a39c:	4b19      	ldr	r3, [pc, #100]	; (a404 <S_Nv_ItemInit_Impl+0x104>)
    a39e:	4798      	blx	r3
        return S_Nv_ReturnValue_Failure;
    a3a0:	2301      	movs	r3, #1
    if ( !WriteDataBlockAndHeader(&blockHeader, (uint8_t*) pDefaultData) )
    a3a2:	2800      	cmp	r0, #0
    a3a4:	d0e1      	beq.n	a36a <S_Nv_ItemInit_Impl+0x6a>
    Item_t *newItemCache = CreateItemCache(newItemId);
    a3a6:	0020      	movs	r0, r4
    a3a8:	4b17      	ldr	r3, [pc, #92]	; (a408 <S_Nv_ItemInit_Impl+0x108>)
    a3aa:	4798      	blx	r3
    newItemCache->lastBlock = newItemPointer;
    a3ac:	7087      	strb	r7, [r0, #2]
    a3ae:	0a3f      	lsrs	r7, r7, #8
    a3b0:	70c7      	strb	r7, [r0, #3]
    return S_Nv_ReturnValue_DidNotExist;
    a3b2:	2302      	movs	r3, #2
    a3b4:	e7d9      	b.n	a36a <S_Nv_ItemInit_Impl+0x6a>
    assert(s_itemCount < MAX_ITEM_COUNT);
    a3b6:	4b15      	ldr	r3, [pc, #84]	; (a40c <S_Nv_ItemInit_Impl+0x10c>)
    a3b8:	4a0b      	ldr	r2, [pc, #44]	; (a3e8 <S_Nv_ItemInit_Impl+0xe8>)
    a3ba:	21af      	movs	r1, #175	; 0xaf
    a3bc:	00c9      	lsls	r1, r1, #3
    a3be:	480b      	ldr	r0, [pc, #44]	; (a3ec <S_Nv_ItemInit_Impl+0xec>)
    a3c0:	4c0b      	ldr	r4, [pc, #44]	; (a3f0 <S_Nv_ItemInit_Impl+0xf0>)
    a3c2:	47a0      	blx	r4
            return S_Nv_ReturnValue_Ok;
    a3c4:	2300      	movs	r3, #0
    a3c6:	e7d0      	b.n	a36a <S_Nv_ItemInit_Impl+0x6a>
    a3c8:	0000effe 	.word	0x0000effe
    a3cc:	00009481 	.word	0x00009481
    a3d0:	0000a2ad 	.word	0x0000a2ad
    a3d4:	20000398 	.word	0x20000398
    a3d8:	2000039a 	.word	0x2000039a
    a3dc:	00009a05 	.word	0x00009a05
    a3e0:	0000a235 	.word	0x0000a235
    a3e4:	0001623c 	.word	0x0001623c
    a3e8:	00016340 	.word	0x00016340
    a3ec:	000161f4 	.word	0x000161f4
    a3f0:	00014c1d 	.word	0x00014c1d
    a3f4:	00009215 	.word	0x00009215
    a3f8:	00009989 	.word	0x00009989
    a3fc:	200003c8 	.word	0x200003c8
    a400:	200003d2 	.word	0x200003d2
    a404:	00009c3d 	.word	0x00009c3d
    a408:	0000949d 	.word	0x0000949d
    a40c:	0001619c 	.word	0x0001619c

0000a410 <S_Nv_IsItemAvailable_Impl>:
/** Interface function, see \ref S_Nv_IsItemAvailable.
 *
 * Important: This will check whether the item is found in the storage area
 */
bool S_Nv_IsItemAvailable_Impl(S_Nv_ItemId_t id)
{
    a410:	b510      	push	{r4, lr}
  return ( FindItem(id) != 0x0000u );
    a412:	4b03      	ldr	r3, [pc, #12]	; (a420 <S_Nv_IsItemAvailable_Impl+0x10>)
    a414:	4798      	blx	r3
    a416:	1e43      	subs	r3, r0, #1
    a418:	4198      	sbcs	r0, r3
    a41a:	b2c0      	uxtb	r0, r0
}
    a41c:	bd10      	pop	{r4, pc}
    a41e:	46c0      	nop			; (mov r8, r8)
    a420:	00009481 	.word	0x00009481

0000a424 <pdsInitItemMask>:
\param[in] itemMask - itemMask to be initialized

\return true itemMask is initialized, false otherwise
******************************************************************************/
static bool pdsInitItemMask(S_Nv_ItemId_t memoryId, uint8_t *itemMask)
{
    a424:	b5f0      	push	{r4, r5, r6, r7, lr}
    a426:	46d6      	mov	lr, sl
    a428:	4647      	mov	r7, r8
    a42a:	b580      	push	{r7, lr}
    a42c:	b087      	sub	sp, #28
    a42e:	000f      	movs	r7, r1
  if (PDS_ALL_EXISTENT_MEMORY == memoryId)
    a430:	4b24      	ldr	r3, [pc, #144]	; (a4c4 <pdsInitItemMask+0xa0>)
    a432:	4298      	cmp	r0, r3
    a434:	d012      	beq.n	a45c <pdsInitItemMask+0x38>
  {
    memset(itemMask, 0xFFU, PDS_ITEM_MASK_SIZE);
    itemMask[0] &= 0xFEU;
  }
  else if (PDS_DIRECTORY_MASK & memoryId)
    a436:	0443      	lsls	r3, r0, #17
    a438:	d41c      	bmi.n	a474 <pdsInitItemMask+0x50>
    else
      return false;
  }
  else
  {
    itemMask[memoryId / 8] |= 1 << (memoryId % 8);
    a43a:	08c3      	lsrs	r3, r0, #3
    a43c:	18cf      	adds	r7, r1, r3
    a43e:	2307      	movs	r3, #7
    a440:	4018      	ands	r0, r3
    a442:	3b06      	subs	r3, #6
    a444:	4083      	lsls	r3, r0
    a446:	783a      	ldrb	r2, [r7, #0]
    a448:	4313      	orrs	r3, r2
    a44a:	703b      	strb	r3, [r7, #0]
  }

  return true;
    a44c:	2301      	movs	r3, #1
    a44e:	9301      	str	r3, [sp, #4]
}
    a450:	9801      	ldr	r0, [sp, #4]
    a452:	b007      	add	sp, #28
    a454:	bc0c      	pop	{r2, r3}
    a456:	4690      	mov	r8, r2
    a458:	469a      	mov	sl, r3
    a45a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    memset(itemMask, 0xFFU, PDS_ITEM_MASK_SIZE);
    a45c:	2202      	movs	r2, #2
    a45e:	21ff      	movs	r1, #255	; 0xff
    a460:	0038      	movs	r0, r7
    a462:	4b19      	ldr	r3, [pc, #100]	; (a4c8 <pdsInitItemMask+0xa4>)
    a464:	4798      	blx	r3
    itemMask[0] &= 0xFEU;
    a466:	783b      	ldrb	r3, [r7, #0]
    a468:	2201      	movs	r2, #1
    a46a:	4393      	bics	r3, r2
    a46c:	703b      	strb	r3, [r7, #0]
  return true;
    a46e:	2301      	movs	r3, #1
    a470:	9301      	str	r3, [sp, #4]
    a472:	e7ed      	b.n	a450 <pdsInitItemMask+0x2c>
    if (pdsGetDirDescr(memoryId, &dirDescr))
    a474:	a904      	add	r1, sp, #16
    a476:	4b15      	ldr	r3, [pc, #84]	; (a4cc <pdsInitItemMask+0xa8>)
    a478:	4798      	blx	r3
    a47a:	9001      	str	r0, [sp, #4]
    a47c:	2800      	cmp	r0, #0
    a47e:	d0e7      	beq.n	a450 <pdsInitItemMask+0x2c>
      for (uint8_t index=0U; index < dirDescr.filesCount; index++)
    a480:	ab04      	add	r3, sp, #16
    a482:	889b      	ldrh	r3, [r3, #4]
    a484:	4698      	mov	r8, r3
    a486:	2b00      	cmp	r3, #0
    a488:	d0e2      	beq.n	a450 <pdsInitItemMask+0x2c>
    a48a:	2400      	movs	r4, #0
        memcpy(&memId, (void const FLASH_PTR*)(dirDescr.list + index), sizeof(uint16_t));
    a48c:	ab02      	add	r3, sp, #8
    a48e:	1d9d      	adds	r5, r3, #6
    a490:	4b0f      	ldr	r3, [pc, #60]	; (a4d0 <pdsInitItemMask+0xac>)
    a492:	469a      	mov	sl, r3
        itemMask[memId / 8U] |= 1U << (memId % 8U);
    a494:	2607      	movs	r6, #7
        memcpy(&memId, (void const FLASH_PTR*)(dirDescr.list + index), sizeof(uint16_t));
    a496:	0061      	lsls	r1, r4, #1
    a498:	9b04      	ldr	r3, [sp, #16]
    a49a:	469c      	mov	ip, r3
    a49c:	4461      	add	r1, ip
    a49e:	2202      	movs	r2, #2
    a4a0:	0028      	movs	r0, r5
    a4a2:	47d0      	blx	sl
        itemMask[memId / 8U] |= 1U << (memId % 8U);
    a4a4:	8829      	ldrh	r1, [r5, #0]
    a4a6:	08ca      	lsrs	r2, r1, #3
    a4a8:	18ba      	adds	r2, r7, r2
    a4aa:	4031      	ands	r1, r6
    a4ac:	2301      	movs	r3, #1
    a4ae:	408b      	lsls	r3, r1
    a4b0:	7811      	ldrb	r1, [r2, #0]
    a4b2:	430b      	orrs	r3, r1
    a4b4:	7013      	strb	r3, [r2, #0]
      for (uint8_t index=0U; index < dirDescr.filesCount; index++)
    a4b6:	3401      	adds	r4, #1
    a4b8:	b2e4      	uxtb	r4, r4
    a4ba:	b2a3      	uxth	r3, r4
    a4bc:	4543      	cmp	r3, r8
    a4be:	d3ea      	bcc.n	a496 <pdsInitItemMask+0x72>
    a4c0:	e7c6      	b.n	a450 <pdsInitItemMask+0x2c>
    a4c2:	46c0      	nop			; (mov r8, r8)
    a4c4:	00004002 	.word	0x00004002
    a4c8:	00014cf1 	.word	0x00014cf1
    a4cc:	0000abb5 	.word	0x0000abb5
    a4d0:	00014cdf 	.word	0x00014cdf

0000a4d4 <PDS_Restore>:
{
    a4d4:	b5f0      	push	{r4, r5, r6, r7, lr}
    a4d6:	b089      	sub	sp, #36	; 0x24
  uint8_t itemsToRestore[PDS_ITEM_MASK_SIZE] = {0U};
    a4d8:	a907      	add	r1, sp, #28
    a4da:	2300      	movs	r3, #0
    a4dc:	800b      	strh	r3, [r1, #0]
  if (!pdsInitItemMask(memoryId, itemsToRestore))
    a4de:	4b2b      	ldr	r3, [pc, #172]	; (a58c <PDS_Restore+0xb8>)
    a4e0:	4798      	blx	r3
    a4e2:	9001      	str	r0, [sp, #4]
    a4e4:	2600      	movs	r6, #0
    a4e6:	2800      	cmp	r0, #0
    a4e8:	d148      	bne.n	a57c <PDS_Restore+0xa8>
    a4ea:	e041      	b.n	a570 <PDS_Restore+0x9c>
    assert((0U != itemDescr.itemSize) && (NULL != itemDescr.itemData));
    a4ec:	4b28      	ldr	r3, [pc, #160]	; (a590 <PDS_Restore+0xbc>)
    a4ee:	4a29      	ldr	r2, [pc, #164]	; (a594 <PDS_Restore+0xc0>)
    a4f0:	21ab      	movs	r1, #171	; 0xab
    a4f2:	0049      	lsls	r1, r1, #1
    a4f4:	4828      	ldr	r0, [pc, #160]	; (a598 <PDS_Restore+0xc4>)
    a4f6:	4c29      	ldr	r4, [pc, #164]	; (a59c <PDS_Restore+0xc8>)
    a4f8:	47a0      	blx	r4
      assert((S_Nv_ReturnValue_DidNotExist == ret) || (S_Nv_ReturnValue_Ok == ret));
    a4fa:	4b29      	ldr	r3, [pc, #164]	; (a5a0 <PDS_Restore+0xcc>)
    a4fc:	4a25      	ldr	r2, [pc, #148]	; (a594 <PDS_Restore+0xc0>)
    a4fe:	2168      	movs	r1, #104	; 0x68
    a500:	31ff      	adds	r1, #255	; 0xff
    a502:	4825      	ldr	r0, [pc, #148]	; (a598 <PDS_Restore+0xc4>)
    a504:	4c25      	ldr	r4, [pc, #148]	; (a59c <PDS_Restore+0xc8>)
    a506:	47a0      	blx	r4
    a508:	3701      	adds	r7, #1
    a50a:	3501      	adds	r5, #1
    a50c:	b2ad      	uxth	r5, r5
    for (j = 0U; j < 8U; j++)
    a50e:	2f08      	cmp	r7, #8
    a510:	d031      	beq.n	a576 <PDS_Restore+0xa2>
      if (itemsToRestore[i] & (1U << j))
    a512:	ab07      	add	r3, sp, #28
    a514:	5cf3      	ldrb	r3, [r6, r3]
    a516:	40fb      	lsrs	r3, r7
    a518:	07db      	lsls	r3, r3, #31
    a51a:	d5f5      	bpl.n	a508 <PDS_Restore+0x34>
  if (pdsGetItemDescr(id, &itemDescr))
    a51c:	a903      	add	r1, sp, #12
    a51e:	0028      	movs	r0, r5
    a520:	4b20      	ldr	r3, [pc, #128]	; (a5a4 <PDS_Restore+0xd0>)
    a522:	4798      	blx	r3
    a524:	2800      	cmp	r0, #0
    a526:	d021      	beq.n	a56c <PDS_Restore+0x98>
    assert((0U != itemDescr.itemSize) && (NULL != itemDescr.itemData));
    a528:	ab03      	add	r3, sp, #12
    a52a:	885b      	ldrh	r3, [r3, #2]
    a52c:	2b00      	cmp	r3, #0
    a52e:	d0dd      	beq.n	a4ec <PDS_Restore+0x18>
    a530:	9b04      	ldr	r3, [sp, #16]
    a532:	2b00      	cmp	r3, #0
    a534:	d0da      	beq.n	a4ec <PDS_Restore+0x18>
    if (itemDescr.filler)
    a536:	9b05      	ldr	r3, [sp, #20]
    a538:	2b00      	cmp	r3, #0
    a53a:	d000      	beq.n	a53e <PDS_Restore+0x6a>
      itemDescr.filler();
    a53c:	4798      	blx	r3
      oldSize = S_Nv_ItemLength(id);
    a53e:	0028      	movs	r0, r5
    a540:	4b19      	ldr	r3, [pc, #100]	; (a5a8 <PDS_Restore+0xd4>)
    a542:	4798      	blx	r3
    a544:	0004      	movs	r4, r0
      S_Nv_ReturnValue_t ret = S_Nv_ItemInit(id, itemDescr.itemSize, itemDescr.itemData);
    a546:	ab03      	add	r3, sp, #12
    a548:	9a04      	ldr	r2, [sp, #16]
    a54a:	8859      	ldrh	r1, [r3, #2]
    a54c:	0028      	movs	r0, r5
    a54e:	4b17      	ldr	r3, [pc, #92]	; (a5ac <PDS_Restore+0xd8>)
    a550:	4798      	blx	r3
      assert((S_Nv_ReturnValue_DidNotExist == ret) || (S_Nv_ReturnValue_Ok == ret));
    a552:	2802      	cmp	r0, #2
    a554:	d016      	beq.n	a584 <PDS_Restore+0xb0>
    a556:	2800      	cmp	r0, #0
    a558:	d1cf      	bne.n	a4fa <PDS_Restore+0x26>
        if (!pdsUpdateMemory(id, itemDescr.itemData, itemDescr.itemSize, oldSize))
    a55a:	ab03      	add	r3, sp, #12
    a55c:	885a      	ldrh	r2, [r3, #2]
    a55e:	9904      	ldr	r1, [sp, #16]
    a560:	0023      	movs	r3, r4
    a562:	0028      	movs	r0, r5
    a564:	4c12      	ldr	r4, [pc, #72]	; (a5b0 <PDS_Restore+0xdc>)
    a566:	47a0      	blx	r4
    a568:	2800      	cmp	r0, #0
    a56a:	d1cd      	bne.n	a508 <PDS_Restore+0x34>
          return false;
    a56c:	2300      	movs	r3, #0
    a56e:	9301      	str	r3, [sp, #4]
}
    a570:	9801      	ldr	r0, [sp, #4]
    a572:	b009      	add	sp, #36	; 0x24
    a574:	bdf0      	pop	{r4, r5, r6, r7, pc}
    a576:	3601      	adds	r6, #1
  for (i = 0U; i < PDS_ITEM_MASK_SIZE; i++)
    a578:	2e02      	cmp	r6, #2
    a57a:	d0f9      	beq.n	a570 <PDS_Restore+0x9c>
    a57c:	00f5      	lsls	r5, r6, #3
    a57e:	b2ad      	uxth	r5, r5
{
    a580:	2700      	movs	r7, #0
    a582:	e7c6      	b.n	a512 <PDS_Restore+0x3e>
          return false;
    a584:	2300      	movs	r3, #0
    a586:	9301      	str	r3, [sp, #4]
    a588:	e7f2      	b.n	a570 <PDS_Restore+0x9c>
    a58a:	46c0      	nop			; (mov r8, r8)
    a58c:	0000a425 	.word	0x0000a425
    a590:	0001638c 	.word	0x0001638c
    a594:	00016484 	.word	0x00016484
    a598:	000163c8 	.word	0x000163c8
    a59c:	00014c1d 	.word	0x00014c1d
    a5a0:	00016414 	.word	0x00016414
    a5a4:	0000a909 	.word	0x0000a909
    a5a8:	0000a2ad 	.word	0x0000a2ad
    a5ac:	0000a301 	.word	0x0000a301
    a5b0:	0000a969 	.word	0x0000a969

0000a5b4 <PDS_Store>:
{
    a5b4:	b510      	push	{r4, lr}
  if (!pdsInitItemMask(memoryId, itemsToStore))
    a5b6:	4905      	ldr	r1, [pc, #20]	; (a5cc <PDS_Store+0x18>)
    a5b8:	4b05      	ldr	r3, [pc, #20]	; (a5d0 <PDS_Store+0x1c>)
    a5ba:	4798      	blx	r3
    a5bc:	1e04      	subs	r4, r0, #0
    a5be:	d101      	bne.n	a5c4 <PDS_Store+0x10>
}
    a5c0:	0020      	movs	r0, r4
    a5c2:	bd10      	pop	{r4, pc}
  pdsPostTask(PDS_STORE_ITEM_TASK_ID);
    a5c4:	2000      	movs	r0, #0
    a5c6:	4b03      	ldr	r3, [pc, #12]	; (a5d4 <PDS_Store+0x20>)
    a5c8:	4798      	blx	r3
  return true;
    a5ca:	e7f9      	b.n	a5c0 <PDS_Store+0xc>
    a5cc:	200003d8 	.word	0x200003d8
    a5d0:	0000a425 	.word	0x0000a425
    a5d4:	0000a841 	.word	0x0000a841

0000a5d8 <pdsStoreItemTaskHandler>:
{
    a5d8:	b5f0      	push	{r4, r5, r6, r7, lr}
    a5da:	46de      	mov	lr, fp
    a5dc:	4657      	mov	r7, sl
    a5de:	464e      	mov	r6, r9
    a5e0:	4645      	mov	r5, r8
    a5e2:	b5e0      	push	{r5, r6, r7, lr}
    a5e4:	b089      	sub	sp, #36	; 0x24
  for (i = 0U, byte_index = i_found + 1; i < PDS_ITEM_MASK_SIZE; i++, byte_index++)
    a5e6:	4b51      	ldr	r3, [pc, #324]	; (a72c <pdsStoreItemTaskHandler+0x154>)
    a5e8:	7818      	ldrb	r0, [r3, #0]
    a5ea:	3001      	adds	r0, #1
    a5ec:	b2c0      	uxtb	r0, r0
    for (j = 0U, bit_index = j_found + 1; j < 8U; j++, bit_index++) {
    a5ee:	4b50      	ldr	r3, [pc, #320]	; (a730 <pdsStoreItemTaskHandler+0x158>)
    a5f0:	781b      	ldrb	r3, [r3, #0]
    a5f2:	3301      	adds	r3, #1
      bit_index %= 8;
    a5f4:	2207      	movs	r2, #7
    a5f6:	4013      	ands	r3, r2
    a5f8:	4698      	mov	r8, r3
    a5fa:	2301      	movs	r3, #1
    a5fc:	4642      	mov	r2, r8
    a5fe:	4093      	lsls	r3, r2
    a600:	469a      	mov	sl, r3
    for (j = 0U, bit_index = j_found + 1; j < 8U; j++, bit_index++) {
    a602:	2302      	movs	r3, #2
    a604:	469c      	mov	ip, r3
    byte_index %= PDS_ITEM_MASK_SIZE;
    a606:	2401      	movs	r4, #1
      if (itemsToStore[byte_index] & (1U << bit_index))
    a608:	4b4a      	ldr	r3, [pc, #296]	; (a734 <pdsStoreItemTaskHandler+0x15c>)
    a60a:	469b      	mov	fp, r3
    a60c:	4643      	mov	r3, r8
    a60e:	3301      	adds	r3, #1
    a610:	9302      	str	r3, [sp, #8]
    a612:	2507      	movs	r5, #7
    a614:	4667      	mov	r7, ip
    a616:	e035      	b.n	a684 <pdsStoreItemTaskHandler+0xac>
    a618:	464f      	mov	r7, r9
        itemsToStore[byte_index] &= ~(1U << bit_index);
    a61a:	2201      	movs	r2, #1
    a61c:	9901      	ldr	r1, [sp, #4]
    a61e:	408a      	lsls	r2, r1
    a620:	4397      	bics	r7, r2
    a622:	4944      	ldr	r1, [pc, #272]	; (a734 <pdsStoreItemTaskHandler+0x15c>)
    a624:	9c03      	ldr	r4, [sp, #12]
    a626:	550f      	strb	r7, [r1, r4]
        i_found = byte_index;
    a628:	4a40      	ldr	r2, [pc, #256]	; (a72c <pdsStoreItemTaskHandler+0x154>)
    a62a:	7010      	strb	r0, [r2, #0]
        j_found = bit_index;
    a62c:	4a40      	ldr	r2, [pc, #256]	; (a730 <pdsStoreItemTaskHandler+0x158>)
    a62e:	7013      	strb	r3, [r2, #0]
  if (!S_Nv_IsItemAvailable(((S_Nv_ItemId_t)byte_index << 3U) + bit_index))
    a630:	00c0      	lsls	r0, r0, #3
    a632:	18c4      	adds	r4, r0, r3
    a634:	0020      	movs	r0, r4
    a636:	4b40      	ldr	r3, [pc, #256]	; (a738 <pdsStoreItemTaskHandler+0x160>)
    a638:	4798      	blx	r3
    a63a:	2800      	cmp	r0, #0
    a63c:	d13a      	bne.n	a6b4 <pdsStoreItemTaskHandler+0xdc>
    if(pdsGetItemDescr(((S_Nv_ItemId_t)byte_index << 3U) + bit_index, &itemDescr))
    a63e:	a904      	add	r1, sp, #16
    a640:	0020      	movs	r0, r4
    a642:	4b3e      	ldr	r3, [pc, #248]	; (a73c <pdsStoreItemTaskHandler+0x164>)
    a644:	4798      	blx	r3
    a646:	2800      	cmp	r0, #0
    a648:	d04e      	beq.n	a6e8 <pdsStoreItemTaskHandler+0x110>
      if (itemDescr.filler)
    a64a:	9b06      	ldr	r3, [sp, #24]
    a64c:	2b00      	cmp	r3, #0
    a64e:	d000      	beq.n	a652 <pdsStoreItemTaskHandler+0x7a>
        itemDescr.filler();
    a650:	4798      	blx	r3
      ret = S_Nv_ItemInit(((S_Nv_ItemId_t)byte_index << 3U) + bit_index, itemDescr.itemSize, itemDescr.itemData);
    a652:	9a05      	ldr	r2, [sp, #20]
    a654:	ab04      	add	r3, sp, #16
    a656:	8859      	ldrh	r1, [r3, #2]
    a658:	0020      	movs	r0, r4
    a65a:	4b39      	ldr	r3, [pc, #228]	; (a740 <pdsStoreItemTaskHandler+0x168>)
    a65c:	4798      	blx	r3
      assert((S_Nv_ReturnValue_DidNotExist == ret) || (S_Nv_ReturnValue_Ok == ret));
    a65e:	23fd      	movs	r3, #253	; 0xfd
    a660:	4218      	tst	r0, r3
    a662:	d041      	beq.n	a6e8 <pdsStoreItemTaskHandler+0x110>
    a664:	4b37      	ldr	r3, [pc, #220]	; (a744 <pdsStoreItemTaskHandler+0x16c>)
    a666:	4a38      	ldr	r2, [pc, #224]	; (a748 <pdsStoreItemTaskHandler+0x170>)
    a668:	21eb      	movs	r1, #235	; 0xeb
    a66a:	4838      	ldr	r0, [pc, #224]	; (a74c <pdsStoreItemTaskHandler+0x174>)
    a66c:	4c38      	ldr	r4, [pc, #224]	; (a750 <pdsStoreItemTaskHandler+0x178>)
    a66e:	47a0      	blx	r4
    a670:	464f      	mov	r7, r9
      if (itemsToStore[byte_index] & (1U << bit_index))
    a672:	4643      	mov	r3, r8
    a674:	9301      	str	r3, [sp, #4]
    a676:	e7d0      	b.n	a61a <pdsStoreItemTaskHandler+0x42>
  for (i = 0U, byte_index = i_found + 1; i < PDS_ITEM_MASK_SIZE; i++, byte_index++)
    a678:	3001      	adds	r0, #1
    a67a:	b2c0      	uxtb	r0, r0
    a67c:	3f01      	subs	r7, #1
    a67e:	b2ff      	uxtb	r7, r7
    a680:	2f00      	cmp	r7, #0
    a682:	d0d5      	beq.n	a630 <pdsStoreItemTaskHandler+0x58>
    byte_index %= PDS_ITEM_MASK_SIZE;
    a684:	4020      	ands	r0, r4
      if (itemsToStore[byte_index] & (1U << bit_index))
    a686:	9003      	str	r0, [sp, #12]
    a688:	465b      	mov	r3, fp
    a68a:	5c1b      	ldrb	r3, [r3, r0]
    a68c:	4699      	mov	r9, r3
    a68e:	001e      	movs	r6, r3
    a690:	4653      	mov	r3, sl
    a692:	4233      	tst	r3, r6
    a694:	d1ec      	bne.n	a670 <pdsStoreItemTaskHandler+0x98>
    a696:	9b02      	ldr	r3, [sp, #8]
    a698:	002a      	movs	r2, r5
      bit_index %= 8;
    a69a:	402b      	ands	r3, r5
      if (itemsToStore[byte_index] & (1U << bit_index))
    a69c:	9301      	str	r3, [sp, #4]
    a69e:	0031      	movs	r1, r6
    a6a0:	40d9      	lsrs	r1, r3
    a6a2:	420c      	tst	r4, r1
    a6a4:	d1b8      	bne.n	a618 <pdsStoreItemTaskHandler+0x40>
    for (j = 0U, bit_index = j_found + 1; j < 8U; j++, bit_index++) {
    a6a6:	3301      	adds	r3, #1
    a6a8:	b2db      	uxtb	r3, r3
    a6aa:	3a01      	subs	r2, #1
    a6ac:	b2d2      	uxtb	r2, r2
    a6ae:	2a00      	cmp	r2, #0
    a6b0:	d1f3      	bne.n	a69a <pdsStoreItemTaskHandler+0xc2>
    a6b2:	e7e1      	b.n	a678 <pdsStoreItemTaskHandler+0xa0>
  if (pdsGetItemDescr(id, &itemDescr))
    a6b4:	a904      	add	r1, sp, #16
    a6b6:	0020      	movs	r0, r4
    a6b8:	4b20      	ldr	r3, [pc, #128]	; (a73c <pdsStoreItemTaskHandler+0x164>)
    a6ba:	4798      	blx	r3
    a6bc:	2800      	cmp	r0, #0
    a6be:	d013      	beq.n	a6e8 <pdsStoreItemTaskHandler+0x110>
    assert((0U != itemDescr.itemSize) && (NULL != itemDescr.itemData));
    a6c0:	ab04      	add	r3, sp, #16
    a6c2:	885b      	ldrh	r3, [r3, #2]
    a6c4:	2b00      	cmp	r3, #0
    a6c6:	d01e      	beq.n	a706 <pdsStoreItemTaskHandler+0x12e>
    a6c8:	9b05      	ldr	r3, [sp, #20]
    a6ca:	2b00      	cmp	r3, #0
    a6cc:	d01b      	beq.n	a706 <pdsStoreItemTaskHandler+0x12e>
    if (itemDescr.filler)
    a6ce:	9b06      	ldr	r3, [sp, #24]
    a6d0:	2b00      	cmp	r3, #0
    a6d2:	d000      	beq.n	a6d6 <pdsStoreItemTaskHandler+0xfe>
      itemDescr.filler();
    a6d4:	4798      	blx	r3
      ret = S_Nv_Write(id, 0U, itemDescr.itemSize, itemDescr.itemData);
    a6d6:	9b05      	ldr	r3, [sp, #20]
    a6d8:	aa04      	add	r2, sp, #16
    a6da:	8852      	ldrh	r2, [r2, #2]
    a6dc:	2100      	movs	r1, #0
    a6de:	0020      	movs	r0, r4
    a6e0:	4c1c      	ldr	r4, [pc, #112]	; (a754 <pdsStoreItemTaskHandler+0x17c>)
    a6e2:	47a0      	blx	r4
      assert(ret == S_Nv_ReturnValue_Ok);
    a6e4:	2800      	cmp	r0, #0
    a6e6:	d115      	bne.n	a714 <pdsStoreItemTaskHandler+0x13c>
    if (itemsToStore[i])
    a6e8:	4b12      	ldr	r3, [pc, #72]	; (a734 <pdsStoreItemTaskHandler+0x15c>)
    a6ea:	781b      	ldrb	r3, [r3, #0]
    a6ec:	2b00      	cmp	r3, #0
    a6ee:	d118      	bne.n	a722 <pdsStoreItemTaskHandler+0x14a>
    a6f0:	4b10      	ldr	r3, [pc, #64]	; (a734 <pdsStoreItemTaskHandler+0x15c>)
    a6f2:	785b      	ldrb	r3, [r3, #1]
    a6f4:	2b00      	cmp	r3, #0
    a6f6:	d114      	bne.n	a722 <pdsStoreItemTaskHandler+0x14a>
}
    a6f8:	b009      	add	sp, #36	; 0x24
    a6fa:	bc3c      	pop	{r2, r3, r4, r5}
    a6fc:	4690      	mov	r8, r2
    a6fe:	4699      	mov	r9, r3
    a700:	46a2      	mov	sl, r4
    a702:	46ab      	mov	fp, r5
    a704:	bdf0      	pop	{r4, r5, r6, r7, pc}
    assert((0U != itemDescr.itemSize) && (NULL != itemDescr.itemData));
    a706:	4b14      	ldr	r3, [pc, #80]	; (a758 <pdsStoreItemTaskHandler+0x180>)
    a708:	4a14      	ldr	r2, [pc, #80]	; (a75c <pdsStoreItemTaskHandler+0x184>)
    a70a:	219a      	movs	r1, #154	; 0x9a
    a70c:	0049      	lsls	r1, r1, #1
    a70e:	480f      	ldr	r0, [pc, #60]	; (a74c <pdsStoreItemTaskHandler+0x174>)
    a710:	4c0f      	ldr	r4, [pc, #60]	; (a750 <pdsStoreItemTaskHandler+0x178>)
    a712:	47a0      	blx	r4
      assert(ret == S_Nv_ReturnValue_Ok);
    a714:	4b12      	ldr	r3, [pc, #72]	; (a760 <pdsStoreItemTaskHandler+0x188>)
    a716:	4a11      	ldr	r2, [pc, #68]	; (a75c <pdsStoreItemTaskHandler+0x184>)
    a718:	21a1      	movs	r1, #161	; 0xa1
    a71a:	0049      	lsls	r1, r1, #1
    a71c:	480b      	ldr	r0, [pc, #44]	; (a74c <pdsStoreItemTaskHandler+0x174>)
    a71e:	4c0c      	ldr	r4, [pc, #48]	; (a750 <pdsStoreItemTaskHandler+0x178>)
    a720:	47a0      	blx	r4
      pdsPostTask(PDS_STORE_ITEM_TASK_ID);
    a722:	2000      	movs	r0, #0
    a724:	4b0f      	ldr	r3, [pc, #60]	; (a764 <pdsStoreItemTaskHandler+0x18c>)
    a726:	4798      	blx	r3
}
    a728:	e7e6      	b.n	a6f8 <pdsStoreItemTaskHandler+0x120>
    a72a:	46c0      	nop			; (mov r8, r8)
    a72c:	200003d4 	.word	0x200003d4
    a730:	200003da 	.word	0x200003da
    a734:	200003d8 	.word	0x200003d8
    a738:	0000a411 	.word	0x0000a411
    a73c:	0000a909 	.word	0x0000a909
    a740:	0000a301 	.word	0x0000a301
    a744:	00016414 	.word	0x00016414
    a748:	0001645c 	.word	0x0001645c
    a74c:	000163c8 	.word	0x000163c8
    a750:	00014c1d 	.word	0x00014c1d
    a754:	0000a0fd 	.word	0x0000a0fd
    a758:	0001638c 	.word	0x0001638c
    a75c:	00016474 	.word	0x00016474
    a760:	00016494 	.word	0x00016494
    a764:	0000a841 	.word	0x0000a841

0000a768 <PDS_IsAbleToRestore>:
{
    a768:	b5f0      	push	{r4, r5, r6, r7, lr}
    a76a:	b085      	sub	sp, #20
  uint8_t itemsToBeAbleRestore[PDS_ITEM_MASK_SIZE] = {0U};
    a76c:	a903      	add	r1, sp, #12
    a76e:	2300      	movs	r3, #0
    a770:	800b      	strh	r3, [r1, #0]
  if (!pdsInitItemMask(memoryId, itemsToBeAbleRestore))
    a772:	4b11      	ldr	r3, [pc, #68]	; (a7b8 <PDS_IsAbleToRestore+0x50>)
    a774:	4798      	blx	r3
    a776:	9001      	str	r0, [sp, #4]
    a778:	2700      	movs	r7, #0
    a77a:	2800      	cmp	r0, #0
    a77c:	d116      	bne.n	a7ac <PDS_IsAbleToRestore+0x44>
}
    a77e:	9801      	ldr	r0, [sp, #4]
    a780:	b005      	add	sp, #20
    a782:	bdf0      	pop	{r4, r5, r6, r7, pc}
    a784:	3501      	adds	r5, #1
    a786:	3401      	adds	r4, #1
    a788:	b2a4      	uxth	r4, r4
    for (j = 0U; j < 8U; j++)
    a78a:	2d08      	cmp	r5, #8
    a78c:	d00b      	beq.n	a7a6 <PDS_IsAbleToRestore+0x3e>
      if (itemsToBeAbleRestore[i] & (1U << j))
    a78e:	ab03      	add	r3, sp, #12
    a790:	5ddb      	ldrb	r3, [r3, r7]
    a792:	40eb      	lsrs	r3, r5
    a794:	421e      	tst	r6, r3
    a796:	d0f5      	beq.n	a784 <PDS_IsAbleToRestore+0x1c>
      if (!S_Nv_IsItemAvailable(((S_Nv_ItemId_t)i << 3U) + j))
    a798:	0020      	movs	r0, r4
    a79a:	4b08      	ldr	r3, [pc, #32]	; (a7bc <PDS_IsAbleToRestore+0x54>)
    a79c:	4798      	blx	r3
    a79e:	2800      	cmp	r0, #0
    a7a0:	d1f0      	bne.n	a784 <PDS_IsAbleToRestore+0x1c>
          return false;
    a7a2:	9001      	str	r0, [sp, #4]
    a7a4:	e7eb      	b.n	a77e <PDS_IsAbleToRestore+0x16>
    a7a6:	3701      	adds	r7, #1
  for (i = 0U; i < PDS_ITEM_MASK_SIZE; i++)
    a7a8:	2f02      	cmp	r7, #2
    a7aa:	d0e8      	beq.n	a77e <PDS_IsAbleToRestore+0x16>
    a7ac:	00fc      	lsls	r4, r7, #3
    a7ae:	b2a4      	uxth	r4, r4
{
    a7b0:	2500      	movs	r5, #0
      if (itemsToBeAbleRestore[i] & (1U << j))
    a7b2:	2601      	movs	r6, #1
    a7b4:	e7eb      	b.n	a78e <PDS_IsAbleToRestore+0x26>
    a7b6:	46c0      	nop			; (mov r8, r8)
    a7b8:	0000a425 	.word	0x0000a425
    a7bc:	0000a411 	.word	0x0000a411

0000a7c0 <PDS_Init>:
\brief Persistent Data Server initialization routine.
******************************************************************************/


void PDS_Init (void)
{
    a7c0:	b510      	push	{r4, lr}
  D_Nv_Init();
    a7c2:	4b02      	ldr	r3, [pc, #8]	; (a7cc <PDS_Init+0xc>)
    a7c4:	4798      	blx	r3
  S_Nv_Init();
    a7c6:	4b02      	ldr	r3, [pc, #8]	; (a7d0 <PDS_Init+0x10>)
    a7c8:	4798      	blx	r3
}
    a7ca:	bd10      	pop	{r4, pc}
    a7cc:	00008f75 	.word	0x00008f75
    a7d0:	0000a0c5 	.word	0x0000a0c5

0000a7d4 <PDS_InitItems>:

/******************************************************************************
\brief PDS item initialization routine
******************************************************************************/
void PDS_InitItems(void)
{
    a7d4:	b570      	push	{r4, r5, r6, lr}
    a7d6:	b084      	sub	sp, #16
  S_Nv_ReturnValue_t ret;
  ItemIdToMemoryMapping_t itemDesc;

  for (S_Nv_ItemId_t i = 1U; i < PDS_ITEM_AMOUNT; i++)
    a7d8:	2401      	movs	r4, #1
  {
    if (pdsGetItemDescr(i, &itemDesc))
    a7da:	4e12      	ldr	r6, [pc, #72]	; (a824 <PDS_InitItems+0x50>)
        pdsSecureItemInit(i,itemDesc.itemSize);
      }
      else
#endif
      {
        ret = S_Nv_ItemInit(i, itemDesc.itemSize, NULL);
    a7dc:	4d12      	ldr	r5, [pc, #72]	; (a828 <PDS_InitItems+0x54>)
    a7de:	e009      	b.n	a7f4 <PDS_InitItems+0x20>
      assert(itemDesc.itemSize);
    a7e0:	4b12      	ldr	r3, [pc, #72]	; (a82c <PDS_InitItems+0x58>)
    a7e2:	4a13      	ldr	r2, [pc, #76]	; (a830 <PDS_InitItems+0x5c>)
    a7e4:	3150      	adds	r1, #80	; 0x50
    a7e6:	4813      	ldr	r0, [pc, #76]	; (a834 <PDS_InitItems+0x60>)
    a7e8:	4c13      	ldr	r4, [pc, #76]	; (a838 <PDS_InitItems+0x64>)
    a7ea:	47a0      	blx	r4
  for (S_Nv_ItemId_t i = 1U; i < PDS_ITEM_AMOUNT; i++)
    a7ec:	3401      	adds	r4, #1
    a7ee:	b2a4      	uxth	r4, r4
    a7f0:	2c0a      	cmp	r4, #10
    a7f2:	d014      	beq.n	a81e <PDS_InitItems+0x4a>
    if (pdsGetItemDescr(i, &itemDesc))
    a7f4:	4669      	mov	r1, sp
    a7f6:	0020      	movs	r0, r4
    a7f8:	47b0      	blx	r6
    a7fa:	2800      	cmp	r0, #0
    a7fc:	d0f6      	beq.n	a7ec <PDS_InitItems+0x18>
      assert(itemDesc.itemSize);
    a7fe:	466b      	mov	r3, sp
    a800:	8859      	ldrh	r1, [r3, #2]
    a802:	2900      	cmp	r1, #0
    a804:	d0ec      	beq.n	a7e0 <PDS_InitItems+0xc>
        ret = S_Nv_ItemInit(i, itemDesc.itemSize, NULL);
    a806:	2200      	movs	r2, #0
    a808:	0020      	movs	r0, r4
    a80a:	47a8      	blx	r5
        assert((S_Nv_ReturnValue_DidNotExist == ret) || (S_Nv_ReturnValue_Ok == ret));
    a80c:	23fd      	movs	r3, #253	; 0xfd
    a80e:	4218      	tst	r0, r3
    a810:	d0ec      	beq.n	a7ec <PDS_InitItems+0x18>
    a812:	4b0a      	ldr	r3, [pc, #40]	; (a83c <PDS_InitItems+0x68>)
    a814:	4a06      	ldr	r2, [pc, #24]	; (a830 <PDS_InitItems+0x5c>)
    a816:	215b      	movs	r1, #91	; 0x5b
    a818:	4806      	ldr	r0, [pc, #24]	; (a834 <PDS_InitItems+0x60>)
    a81a:	4c07      	ldr	r4, [pc, #28]	; (a838 <PDS_InitItems+0x64>)
    a81c:	47a0      	blx	r4
      }
    }
  }
}
    a81e:	b004      	add	sp, #16
    a820:	bd70      	pop	{r4, r5, r6, pc}
    a822:	46c0      	nop			; (mov r8, r8)
    a824:	0000a909 	.word	0x0000a909
    a828:	0000a301 	.word	0x0000a301
    a82c:	000164b0 	.word	0x000164b0
    a830:	00016508 	.word	0x00016508
    a834:	000164c4 	.word	0x000164c4
    a838:	00014c1d 	.word	0x00014c1d
    a83c:	00016414 	.word	0x00016414

0000a840 <pdsPostTask>:
\param[in] taskId - id of a task
******************************************************************************/

void pdsPostTask(PdsTaskId_t taskId)
{
  pendingTasks |= (1U << taskId);
    a840:	4a03      	ldr	r2, [pc, #12]	; (a850 <pdsPostTask+0x10>)
    a842:	2301      	movs	r3, #1
    a844:	4083      	lsls	r3, r0
    a846:	7811      	ldrb	r1, [r2, #0]
    a848:	430b      	orrs	r3, r1
    a84a:	7013      	strb	r3, [r2, #0]
//  SYS_PostTask(PDS_TASK_ID);
}
    a84c:	4770      	bx	lr
    a84e:	46c0      	nop			; (mov r8, r8)
    a850:	200003db 	.word	0x200003db

0000a854 <PDS_TaskHandler>:

/******************************************************************************
\brief General PDS task handler
******************************************************************************/
void PDS_TaskHandler(void)
{
    a854:	b570      	push	{r4, r5, r6, lr}
  if (pendingTasks)
    a856:	4b0d      	ldr	r3, [pc, #52]	; (a88c <PDS_TaskHandler+0x38>)
    a858:	781d      	ldrb	r5, [r3, #0]
    a85a:	2d00      	cmp	r5, #0
    a85c:	d012      	beq.n	a884 <PDS_TaskHandler+0x30>
  {
    uint8_t taskId = 0U;

    while (!(pendingTasks & (1U << taskId)))
    a85e:	0028      	movs	r0, r5
    a860:	07eb      	lsls	r3, r5, #31
    a862:	d410      	bmi.n	a886 <PDS_TaskHandler+0x32>
    a864:	2300      	movs	r3, #0
    a866:	2401      	movs	r4, #1
      taskId++;
    a868:	3301      	adds	r3, #1
    a86a:	b2db      	uxtb	r3, r3
    while (!(pendingTasks & (1U << taskId)))
    a86c:	0019      	movs	r1, r3
    a86e:	0002      	movs	r2, r0
    a870:	40da      	lsrs	r2, r3
    a872:	4214      	tst	r4, r2
    a874:	d0f8      	beq.n	a868 <PDS_TaskHandler+0x14>

    pendingTasks ^= (1U << taskId);
    a876:	2301      	movs	r3, #1
    a878:	408b      	lsls	r3, r1
    a87a:	405d      	eors	r5, r3
    a87c:	4b03      	ldr	r3, [pc, #12]	; (a88c <PDS_TaskHandler+0x38>)
    a87e:	701d      	strb	r5, [r3, #0]
    pdsTaskHandlers[taskId]();
    a880:	4b03      	ldr	r3, [pc, #12]	; (a890 <PDS_TaskHandler+0x3c>)
    a882:	4798      	blx	r3
   
  }
}
    a884:	bd70      	pop	{r4, r5, r6, pc}
    while (!(pendingTasks & (1U << taskId)))
    a886:	2100      	movs	r1, #0
    a888:	e7f5      	b.n	a876 <PDS_TaskHandler+0x22>
    a88a:	46c0      	nop			; (mov r8, r8)
    a88c:	200003db 	.word	0x200003db
    a890:	0000a5d9 	.word	0x0000a5d9

0000a894 <updateTable>:
\param[in] data    - pointer to data with table;
\param[in] size    - current item size;
\param[in] oldSize - last size of item
******************************************************************************/
static void updateTable(void *data, uint16_t size, uint16_t oldSize)
{
    a894:	b510      	push	{r4, lr}
	uint8_t *ptr = (uint8_t *)data;

	if (size > oldSize)
    a896:	4291      	cmp	r1, r2
    a898:	d800      	bhi.n	a89c <updateTable+0x8>
	memset(ptr + oldSize, 0U, size - oldSize);
}
    a89a:	bd10      	pop	{r4, pc}
	memset(ptr + oldSize, 0U, size - oldSize);
    a89c:	1a89      	subs	r1, r1, r2
    a89e:	1880      	adds	r0, r0, r2
    a8a0:	000a      	movs	r2, r1
    a8a2:	2100      	movs	r1, #0
    a8a4:	4b01      	ldr	r3, [pc, #4]	; (a8ac <updateTable+0x18>)
    a8a6:	4798      	blx	r3
}
    a8a8:	e7f7      	b.n	a89a <updateTable+0x6>
    a8aa:	46c0      	nop			; (mov r8, r8)
    a8ac:	00014cf1 	.word	0x00014cf1

0000a8b0 <fillGeneralInformation>:
{
    a8b0:	b570      	push	{r4, r5, r6, lr}
  memcpy(&genInfoMem.extendedAddress, myLongAddress, LONG_ADDR_LEN);
    a8b2:	4c10      	ldr	r4, [pc, #64]	; (a8f4 <fillGeneralInformation+0x44>)
    a8b4:	2208      	movs	r2, #8
    a8b6:	4910      	ldr	r1, [pc, #64]	; (a8f8 <fillGeneralInformation+0x48>)
    a8b8:	0020      	movs	r0, r4
    a8ba:	4b10      	ldr	r3, [pc, #64]	; (a8fc <fillGeneralInformation+0x4c>)
    a8bc:	4798      	blx	r3
  MiApp_Get(SHORT_ADDRESS, (uint8_t *)&genInfoMem.networkAddress);
    a8be:	0021      	movs	r1, r4
    a8c0:	310e      	adds	r1, #14
    a8c2:	2002      	movs	r0, #2
    a8c4:	4d0e      	ldr	r5, [pc, #56]	; (a900 <fillGeneralInformation+0x50>)
    a8c6:	47a8      	blx	r5
  MiApp_Get(PANID, (uint8_t *)&genInfoMem.panId );
    a8c8:	0021      	movs	r1, r4
    a8ca:	310c      	adds	r1, #12
    a8cc:	2001      	movs	r0, #1
    a8ce:	47a8      	blx	r5
  MiApp_Get(CHANNEL, (uint8_t *)&genInfoMem.logicalChannel );
    a8d0:	0021      	movs	r1, r4
    a8d2:	3110      	adds	r1, #16
    a8d4:	2000      	movs	r0, #0
    a8d6:	47a8      	blx	r5
  MiApp_Get(CHANNELMAP, (uint8_t *)&genInfoMem.channelMap );
    a8d8:	0021      	movs	r1, r4
    a8da:	3108      	adds	r1, #8
    a8dc:	2005      	movs	r0, #5
    a8de:	47a8      	blx	r5
  MiApp_Get(CAPABILITYINFO, (uint8_t *)&genInfoMem.capabilityInfo );
    a8e0:	0021      	movs	r1, r4
    a8e2:	3111      	adds	r1, #17
    a8e4:	2006      	movs	r0, #6
    a8e6:	47a8      	blx	r5
  genInfoMem.nwkSecurityLevel = defaultParamsRamOnly.securityLevel;
    a8e8:	2320      	movs	r3, #32
    a8ea:	4a06      	ldr	r2, [pc, #24]	; (a904 <fillGeneralInformation+0x54>)
    a8ec:	5cd3      	ldrb	r3, [r2, r3]
    a8ee:	74a3      	strb	r3, [r4, #18]
}
    a8f0:	bd70      	pop	{r4, r5, r6, pc}
    a8f2:	46c0      	nop			; (mov r8, r8)
    a8f4:	20001db0 	.word	0x20001db0
    a8f8:	20000094 	.word	0x20000094
    a8fc:	00014cdf 	.word	0x00014cdf
    a900:	0000daf1 	.word	0x0000daf1
    a904:	2000000c 	.word	0x2000000c

0000a908 <pdsGetItemDescr>:
\param[in] itemDescrToGet    - pointer to item descriptor to be loaded;

returns true if descriptor is found out for the given item ID, false - otherwise
******************************************************************************/
bool pdsGetItemDescr(S_Nv_ItemId_t itemId, ItemIdToMemoryMapping_t *itemDescrToGet )
{
    a908:	b5f0      	push	{r4, r5, r6, r7, lr}
    a90a:	b087      	sub	sp, #28
    a90c:	9101      	str	r1, [sp, #4]
  /* Calculate raw data size */
  for (uint8_t fileIdx = 0; fileIdx < PDS_ITEM_AMOUNT; fileIdx++)
  {
    ItemIdToMemoryMapping_t itemDescr;

    memcpy(&itemDescr, (void const *)itemDescrPtr, sizeof(ItemIdToMemoryMapping_t));
    a90e:	aa02      	add	r2, sp, #8
    a910:	4b11      	ldr	r3, [pc, #68]	; (a958 <pdsGetItemDescr+0x50>)
    a912:	0011      	movs	r1, r2
    a914:	cb70      	ldmia	r3!, {r4, r5, r6}
    a916:	c170      	stmia	r1!, {r4, r5, r6}
    a918:	681b      	ldr	r3, [r3, #0]
    a91a:	600b      	str	r3, [r1, #0]

    if(itemDescr.itemId == itemId)
    a91c:	8813      	ldrh	r3, [r2, #0]
    a91e:	4283      	cmp	r3, r0
    a920:	d012      	beq.n	a948 <pdsGetItemDescr+0x40>
    {
      memcpy(itemDescrToGet, &itemDescr, sizeof(ItemIdToMemoryMapping_t));
      return true;
    }
    itemDescrPtr++;
    a922:	4b0e      	ldr	r3, [pc, #56]	; (a95c <pdsGetItemDescr+0x54>)
    memcpy(&itemDescr, (void const *)itemDescrPtr, sizeof(ItemIdToMemoryMapping_t));
    a924:	aa02      	add	r2, sp, #8
  for (uint8_t fileIdx = 0; fileIdx < PDS_ITEM_AMOUNT; fileIdx++)
    a926:	490e      	ldr	r1, [pc, #56]	; (a960 <pdsGetItemDescr+0x58>)
    a928:	468c      	mov	ip, r1
    memcpy(&itemDescr, (void const *)itemDescrPtr, sizeof(ItemIdToMemoryMapping_t));
    a92a:	0011      	movs	r1, r2
    a92c:	001c      	movs	r4, r3
    a92e:	cce0      	ldmia	r4!, {r5, r6, r7}
    a930:	c1e0      	stmia	r1!, {r5, r6, r7}
    a932:	6824      	ldr	r4, [r4, #0]
    a934:	600c      	str	r4, [r1, #0]
    if(itemDescr.itemId == itemId)
    a936:	8811      	ldrh	r1, [r2, #0]
    a938:	4281      	cmp	r1, r0
    a93a:	d005      	beq.n	a948 <pdsGetItemDescr+0x40>
    itemDescrPtr++;
    a93c:	3310      	adds	r3, #16
  for (uint8_t fileIdx = 0; fileIdx < PDS_ITEM_AMOUNT; fileIdx++)
    a93e:	4563      	cmp	r3, ip
    a940:	d1f3      	bne.n	a92a <pdsGetItemDescr+0x22>

  }
  return false;
    a942:	2000      	movs	r0, #0
}
    a944:	b007      	add	sp, #28
    a946:	bdf0      	pop	{r4, r5, r6, r7, pc}
      memcpy(itemDescrToGet, &itemDescr, sizeof(ItemIdToMemoryMapping_t));
    a948:	2210      	movs	r2, #16
    a94a:	a902      	add	r1, sp, #8
    a94c:	9801      	ldr	r0, [sp, #4]
    a94e:	4b05      	ldr	r3, [pc, #20]	; (a964 <pdsGetItemDescr+0x5c>)
    a950:	4798      	blx	r3
      return true;
    a952:	2001      	movs	r0, #1
    a954:	e7f6      	b.n	a944 <pdsGetItemDescr+0x3c>
    a956:	46c0      	nop			; (mov r8, r8)
    a958:	00006100 	.word	0x00006100
    a95c:	00006110 	.word	0x00006110
    a960:	000061a0 	.word	0x000061a0
    a964:	00014cdf 	.word	0x00014cdf

0000a968 <pdsUpdateMemory>:
{
    a968:	b5f0      	push	{r4, r5, r6, r7, lr}
    a96a:	46ce      	mov	lr, r9
    a96c:	4647      	mov	r7, r8
    a96e:	b580      	push	{r7, lr}
    a970:	b085      	sub	sp, #20
    a972:	0007      	movs	r7, r0
    a974:	000e      	movs	r6, r1
    a976:	0015      	movs	r5, r2
    a978:	001c      	movs	r4, r3
  if (size == oldSize)
    a97a:	429a      	cmp	r2, r3
    a97c:	d017      	beq.n	a9ae <pdsUpdateMemory+0x46>
  if (pdsGetItemDescr(id, &mapItem))
    a97e:	4669      	mov	r1, sp
    a980:	4b78      	ldr	r3, [pc, #480]	; (ab64 <pdsUpdateMemory+0x1fc>)
    a982:	4798      	blx	r3
    a984:	2800      	cmp	r0, #0
    a986:	d100      	bne.n	a98a <pdsUpdateMemory+0x22>
    a988:	e0e6      	b.n	ab58 <pdsUpdateMemory+0x1f0>
    assert (mapItem.flags & SIZE_MODIFICATION_ALLOWED);
    a98a:	466b      	mov	r3, sp
    a98c:	7b1b      	ldrb	r3, [r3, #12]
    a98e:	07db      	lsls	r3, r3, #31
    a990:	d506      	bpl.n	a9a0 <pdsUpdateMemory+0x38>
  switch (id)
    a992:	2f09      	cmp	r7, #9
    a994:	d900      	bls.n	a998 <pdsUpdateMemory+0x30>
    a996:	e0d9      	b.n	ab4c <pdsUpdateMemory+0x1e4>
    a998:	00bf      	lsls	r7, r7, #2
    a99a:	4b73      	ldr	r3, [pc, #460]	; (ab68 <pdsUpdateMemory+0x200>)
    a99c:	59db      	ldr	r3, [r3, r7]
    a99e:	469f      	mov	pc, r3
    assert (mapItem.flags & SIZE_MODIFICATION_ALLOWED);
    a9a0:	4b72      	ldr	r3, [pc, #456]	; (ab6c <pdsUpdateMemory+0x204>)
    a9a2:	4a73      	ldr	r2, [pc, #460]	; (ab70 <pdsUpdateMemory+0x208>)
    a9a4:	21bc      	movs	r1, #188	; 0xbc
    a9a6:	31ff      	adds	r1, #255	; 0xff
    a9a8:	4872      	ldr	r0, [pc, #456]	; (ab74 <pdsUpdateMemory+0x20c>)
    a9aa:	4c73      	ldr	r4, [pc, #460]	; (ab78 <pdsUpdateMemory+0x210>)
    a9ac:	47a0      	blx	r4
  switch (id)
    a9ae:	2807      	cmp	r0, #7
    a9b0:	d063      	beq.n	aa7a <pdsUpdateMemory+0x112>
    a9b2:	d92b      	bls.n	aa0c <pdsUpdateMemory+0xa4>
    a9b4:	2808      	cmp	r0, #8
    a9b6:	d100      	bne.n	a9ba <pdsUpdateMemory+0x52>
    a9b8:	e088      	b.n	aacc <pdsUpdateMemory+0x164>
    a9ba:	2809      	cmp	r0, #9
    a9bc:	d000      	beq.n	a9c0 <pdsUpdateMemory+0x58>
    a9be:	e0c5      	b.n	ab4c <pdsUpdateMemory+0x1e4>
	if (size == oldSize)
    a9c0:	42a5      	cmp	r5, r4
    a9c2:	d100      	bne.n	a9c6 <pdsUpdateMemory+0x5e>
    a9c4:	e0c2      	b.n	ab4c <pdsUpdateMemory+0x1e4>
	updateTable(data, size, oldSize);
    a9c6:	0022      	movs	r2, r4
    a9c8:	0029      	movs	r1, r5
    a9ca:	0030      	movs	r0, r6
    a9cc:	4b6b      	ldr	r3, [pc, #428]	; (ab7c <pdsUpdateMemory+0x214>)
    a9ce:	4798      	blx	r3
	if (size > oldSize)
    a9d0:	42a5      	cmp	r5, r4
    a9d2:	d800      	bhi.n	a9d6 <pdsUpdateMemory+0x6e>
    a9d4:	e0ba      	b.n	ab4c <pdsUpdateMemory+0x1e4>
		uint8_t *ptr = (uint8_t *)data + oldSize; // points to added records;
    a9d6:	1933      	adds	r3, r6, r4
    a9d8:	1b29      	subs	r1, r5, r4
    a9da:	3901      	subs	r1, #1
    a9dc:	b289      	uxth	r1, r1
    a9de:	3101      	adds	r1, #1
    a9e0:	1859      	adds	r1, r3, r1
			entry->msb = 0;
    a9e2:	2200      	movs	r2, #0
    a9e4:	701a      	strb	r2, [r3, #0]
			entry++;
    a9e6:	3301      	adds	r3, #1
		while (oldSize < size)
    a9e8:	428b      	cmp	r3, r1
    a9ea:	d1fa      	bne.n	a9e2 <pdsUpdateMemory+0x7a>
		ret = S_Nv_Write(PDS_ROUTE_TABLE_HOP_ID, 0U, size, data);
    a9ec:	0033      	movs	r3, r6
    a9ee:	002a      	movs	r2, r5
    a9f0:	2100      	movs	r1, #0
    a9f2:	2009      	movs	r0, #9
    a9f4:	4c62      	ldr	r4, [pc, #392]	; (ab80 <pdsUpdateMemory+0x218>)
    a9f6:	47a0      	blx	r4
		assert(ret == S_Nv_ReturnValue_Ok);
    a9f8:	2800      	cmp	r0, #0
    a9fa:	d100      	bne.n	a9fe <pdsUpdateMemory+0x96>
    a9fc:	e0a6      	b.n	ab4c <pdsUpdateMemory+0x1e4>
    a9fe:	4b61      	ldr	r3, [pc, #388]	; (ab84 <pdsUpdateMemory+0x21c>)
    aa00:	4a61      	ldr	r2, [pc, #388]	; (ab88 <pdsUpdateMemory+0x220>)
    aa02:	216e      	movs	r1, #110	; 0x6e
    aa04:	31ff      	adds	r1, #255	; 0xff
    aa06:	485b      	ldr	r0, [pc, #364]	; (ab74 <pdsUpdateMemory+0x20c>)
    aa08:	4c5b      	ldr	r4, [pc, #364]	; (ab78 <pdsUpdateMemory+0x210>)
    aa0a:	47a0      	blx	r4
  switch (id)
    aa0c:	2801      	cmp	r0, #1
    aa0e:	d000      	beq.n	aa12 <pdsUpdateMemory+0xaa>
    aa10:	e09c      	b.n	ab4c <pdsUpdateMemory+0x1e4>
    if (0xFFU != ptr[i])
    aa12:	7833      	ldrb	r3, [r6, #0]
    aa14:	2bff      	cmp	r3, #255	; 0xff
    aa16:	d17b      	bne.n	ab10 <pdsUpdateMemory+0x1a8>
    aa18:	1c73      	adds	r3, r6, #1
    aa1a:	0031      	movs	r1, r6
    aa1c:	3118      	adds	r1, #24
    aa1e:	781a      	ldrb	r2, [r3, #0]
    aa20:	2aff      	cmp	r2, #255	; 0xff
    aa22:	d175      	bne.n	ab10 <pdsUpdateMemory+0x1a8>
    aa24:	3301      	adds	r3, #1
  for (uint8_t i = 0U; i < sizeof(MeshGeneralInfotMem_t); i++)
    aa26:	428b      	cmp	r3, r1
    aa28:	d1f9      	bne.n	aa1e <pdsUpdateMemory+0xb6>
    aa2a:	e08f      	b.n	ab4c <pdsUpdateMemory+0x1e4>
	updateTable(data, size, oldSize);
    aa2c:	0022      	movs	r2, r4
    aa2e:	0029      	movs	r1, r5
    aa30:	0030      	movs	r0, r6
    aa32:	4b52      	ldr	r3, [pc, #328]	; (ab7c <pdsUpdateMemory+0x214>)
    aa34:	4798      	blx	r3
	if (size > oldSize)
    aa36:	42a5      	cmp	r5, r4
    aa38:	d800      	bhi.n	aa3c <pdsUpdateMemory+0xd4>
    aa3a:	e087      	b.n	ab4c <pdsUpdateMemory+0x1e4>
		uint8_t *ptr = (uint8_t *)data + oldSize; // points to added records;
    aa3c:	1937      	adds	r7, r6, r4
			memset(entry->ieeeaddr, 0xFF, LONG_ADDR_LEN);
    aa3e:	4b53      	ldr	r3, [pc, #332]	; (ab8c <pdsUpdateMemory+0x224>)
    aa40:	4699      	mov	r9, r3
			entry->currentTimeOut = 0;
    aa42:	2300      	movs	r3, #0
    aa44:	4698      	mov	r8, r3
			memset(entry->ieeeaddr, 0xFF, LONG_ADDR_LEN);
    aa46:	2208      	movs	r2, #8
    aa48:	21ff      	movs	r1, #255	; 0xff
    aa4a:	0038      	movs	r0, r7
    aa4c:	47c8      	blx	r9
			entry->currentTimeOut = 0;
    aa4e:	4643      	mov	r3, r8
    aa50:	60bb      	str	r3, [r7, #8]
			entry++;
    aa52:	3710      	adds	r7, #16
			oldSize += sizeof(DeviceTable_t);
    aa54:	3410      	adds	r4, #16
    aa56:	b2a4      	uxth	r4, r4
		while (oldSize < size)
    aa58:	42a5      	cmp	r5, r4
    aa5a:	d8f4      	bhi.n	aa46 <pdsUpdateMemory+0xde>
		ret = S_Nv_Write(PDS_DEVICE_TABLE_NONSLEEP_ID, 0U, size, data);
    aa5c:	0033      	movs	r3, r6
    aa5e:	002a      	movs	r2, r5
    aa60:	2100      	movs	r1, #0
    aa62:	2006      	movs	r0, #6
    aa64:	4c46      	ldr	r4, [pc, #280]	; (ab80 <pdsUpdateMemory+0x218>)
    aa66:	47a0      	blx	r4
		assert(ret == S_Nv_ReturnValue_Ok);
    aa68:	2800      	cmp	r0, #0
    aa6a:	d06f      	beq.n	ab4c <pdsUpdateMemory+0x1e4>
    aa6c:	4b45      	ldr	r3, [pc, #276]	; (ab84 <pdsUpdateMemory+0x21c>)
    aa6e:	4a48      	ldr	r2, [pc, #288]	; (ab90 <pdsUpdateMemory+0x228>)
    aa70:	2184      	movs	r1, #132	; 0x84
    aa72:	0049      	lsls	r1, r1, #1
    aa74:	483f      	ldr	r0, [pc, #252]	; (ab74 <pdsUpdateMemory+0x20c>)
    aa76:	4c40      	ldr	r4, [pc, #256]	; (ab78 <pdsUpdateMemory+0x210>)
    aa78:	47a0      	blx	r4
	if (size == oldSize)
    aa7a:	42a5      	cmp	r5, r4
    aa7c:	d066      	beq.n	ab4c <pdsUpdateMemory+0x1e4>
	updateTable(data, size, oldSize);
    aa7e:	0022      	movs	r2, r4
    aa80:	0029      	movs	r1, r5
    aa82:	0030      	movs	r0, r6
    aa84:	4b3d      	ldr	r3, [pc, #244]	; (ab7c <pdsUpdateMemory+0x214>)
    aa86:	4798      	blx	r3
	if (size > oldSize)
    aa88:	42a5      	cmp	r5, r4
    aa8a:	d95f      	bls.n	ab4c <pdsUpdateMemory+0x1e4>
		uint8_t *ptr = (uint8_t *)data + oldSize; // points to added records;
    aa8c:	1937      	adds	r7, r6, r4
			memset(entry->ieeeaddr, 0xFF, LONG_ADDR_LEN);
    aa8e:	4b3f      	ldr	r3, [pc, #252]	; (ab8c <pdsUpdateMemory+0x224>)
    aa90:	4699      	mov	r9, r3
			entry->currentTimeOut = 0;
    aa92:	2300      	movs	r3, #0
    aa94:	4698      	mov	r8, r3
			memset(entry->ieeeaddr, 0xFF, LONG_ADDR_LEN);
    aa96:	2208      	movs	r2, #8
    aa98:	21ff      	movs	r1, #255	; 0xff
    aa9a:	0038      	movs	r0, r7
    aa9c:	47c8      	blx	r9
			entry->currentTimeOut = 0;
    aa9e:	4643      	mov	r3, r8
    aaa0:	60fb      	str	r3, [r7, #12]
			entry->actualTimeOut = 0;
    aaa2:	60bb      	str	r3, [r7, #8]
			entry++;
    aaa4:	3714      	adds	r7, #20
			oldSize += sizeof(SleepDeviceTable_t);
    aaa6:	3414      	adds	r4, #20
    aaa8:	b2a4      	uxth	r4, r4
		while (oldSize < size)
    aaaa:	42a5      	cmp	r5, r4
    aaac:	d8f3      	bhi.n	aa96 <pdsUpdateMemory+0x12e>
		ret = S_Nv_Write(PDS_DEVICE_TABLE_SLEEP_ID, 0U, size, data);
    aaae:	0033      	movs	r3, r6
    aab0:	002a      	movs	r2, r5
    aab2:	2100      	movs	r1, #0
    aab4:	2007      	movs	r0, #7
    aab6:	4c32      	ldr	r4, [pc, #200]	; (ab80 <pdsUpdateMemory+0x218>)
    aab8:	47a0      	blx	r4
		assert(ret == S_Nv_ReturnValue_Ok);
    aaba:	2800      	cmp	r0, #0
    aabc:	d046      	beq.n	ab4c <pdsUpdateMemory+0x1e4>
    aabe:	4b31      	ldr	r3, [pc, #196]	; (ab84 <pdsUpdateMemory+0x21c>)
    aac0:	4a34      	ldr	r2, [pc, #208]	; (ab94 <pdsUpdateMemory+0x22c>)
    aac2:	2195      	movs	r1, #149	; 0x95
    aac4:	0049      	lsls	r1, r1, #1
    aac6:	482b      	ldr	r0, [pc, #172]	; (ab74 <pdsUpdateMemory+0x20c>)
    aac8:	4c2b      	ldr	r4, [pc, #172]	; (ab78 <pdsUpdateMemory+0x210>)
    aaca:	47a0      	blx	r4
	if (size == oldSize)
    aacc:	42a5      	cmp	r5, r4
    aace:	d03d      	beq.n	ab4c <pdsUpdateMemory+0x1e4>
	updateTable(data, size, oldSize);
    aad0:	0022      	movs	r2, r4
    aad2:	0029      	movs	r1, r5
    aad4:	0030      	movs	r0, r6
    aad6:	4b29      	ldr	r3, [pc, #164]	; (ab7c <pdsUpdateMemory+0x214>)
    aad8:	4798      	blx	r3
	if (size > oldSize)
    aada:	42a5      	cmp	r5, r4
    aadc:	d936      	bls.n	ab4c <pdsUpdateMemory+0x1e4>
		uint8_t *ptr = (uint8_t *)data + oldSize; // points to added records;
    aade:	1933      	adds	r3, r6, r4
			entry->nextHopAddr = 0xFF;
    aae0:	21ff      	movs	r1, #255	; 0xff
    aae2:	7019      	strb	r1, [r3, #0]
			entry->score = 0;
    aae4:	2200      	movs	r2, #0
    aae6:	705a      	strb	r2, [r3, #1]
			entry++;
    aae8:	3302      	adds	r3, #2
			oldSize += sizeof(CoordRouteTable_t);
    aaea:	3402      	adds	r4, #2
    aaec:	b2a4      	uxth	r4, r4
		while (oldSize < size)
    aaee:	42a5      	cmp	r5, r4
    aaf0:	d8f7      	bhi.n	aae2 <pdsUpdateMemory+0x17a>
		ret = S_Nv_Write(PDS_ROUTE_TABLE_COORD_ID, 0U, size, data);
    aaf2:	0033      	movs	r3, r6
    aaf4:	002a      	movs	r2, r5
    aaf6:	2100      	movs	r1, #0
    aaf8:	2008      	movs	r0, #8
    aafa:	4c21      	ldr	r4, [pc, #132]	; (ab80 <pdsUpdateMemory+0x218>)
    aafc:	47a0      	blx	r4
		assert(ret == S_Nv_ReturnValue_Ok);
    aafe:	2800      	cmp	r0, #0
    ab00:	d024      	beq.n	ab4c <pdsUpdateMemory+0x1e4>
    ab02:	4b20      	ldr	r3, [pc, #128]	; (ab84 <pdsUpdateMemory+0x21c>)
    ab04:	4a24      	ldr	r2, [pc, #144]	; (ab98 <pdsUpdateMemory+0x230>)
    ab06:	21a6      	movs	r1, #166	; 0xa6
    ab08:	0049      	lsls	r1, r1, #1
    ab0a:	481a      	ldr	r0, [pc, #104]	; (ab74 <pdsUpdateMemory+0x20c>)
    ab0c:	4c1a      	ldr	r4, [pc, #104]	; (ab78 <pdsUpdateMemory+0x210>)
    ab0e:	47a0      	blx	r4
  memcpy(myLongAddress, &updateGenInfo->extendedAddress, LONG_ADDR_LEN);
    ab10:	2208      	movs	r2, #8
    ab12:	0031      	movs	r1, r6
    ab14:	4821      	ldr	r0, [pc, #132]	; (ab9c <pdsUpdateMemory+0x234>)
    ab16:	4b22      	ldr	r3, [pc, #136]	; (aba0 <pdsUpdateMemory+0x238>)
    ab18:	4798      	blx	r3
  MiApp_Set(SHORT_ADDRESS, (uint8_t *)&updateGenInfo->networkAddress);
    ab1a:	0031      	movs	r1, r6
    ab1c:	310e      	adds	r1, #14
    ab1e:	2002      	movs	r0, #2
    ab20:	4c20      	ldr	r4, [pc, #128]	; (aba4 <pdsUpdateMemory+0x23c>)
    ab22:	47a0      	blx	r4
  MiApp_Set(PANID, (uint8_t *)&updateGenInfo->panId );
    ab24:	0031      	movs	r1, r6
    ab26:	310c      	adds	r1, #12
    ab28:	2001      	movs	r0, #1
    ab2a:	47a0      	blx	r4
  MiApp_Set(CHANNEL, (uint8_t *)&updateGenInfo->logicalChannel );
    ab2c:	0031      	movs	r1, r6
    ab2e:	3110      	adds	r1, #16
    ab30:	2000      	movs	r0, #0
    ab32:	47a0      	blx	r4
  MiApp_Set(CHANNELMAP, (uint8_t *)&genInfoMem.channelMap );
    ab34:	4d1c      	ldr	r5, [pc, #112]	; (aba8 <pdsUpdateMemory+0x240>)
    ab36:	0029      	movs	r1, r5
    ab38:	2005      	movs	r0, #5
    ab3a:	47a0      	blx	r4
  MiApp_Set(CAPABILITYINFO, (uint8_t *)&genInfoMem.capabilityInfo );
    ab3c:	0029      	movs	r1, r5
    ab3e:	3109      	adds	r1, #9
    ab40:	2006      	movs	r0, #6
    ab42:	47a0      	blx	r4
  defaultParamsRamOnly.securityLevel = updateGenInfo->nwkSecurityLevel;
    ab44:	7cb1      	ldrb	r1, [r6, #18]
    ab46:	2320      	movs	r3, #32
    ab48:	4a18      	ldr	r2, [pc, #96]	; (abac <pdsUpdateMemory+0x244>)
    ab4a:	54d1      	strb	r1, [r2, r3]
}
    ab4c:	2001      	movs	r0, #1
    ab4e:	b005      	add	sp, #20
    ab50:	bc0c      	pop	{r2, r3}
    ab52:	4690      	mov	r8, r2
    ab54:	4699      	mov	r9, r3
    ab56:	bdf0      	pop	{r4, r5, r6, r7, pc}
  switch (id)
    ab58:	2f09      	cmp	r7, #9
    ab5a:	d8f7      	bhi.n	ab4c <pdsUpdateMemory+0x1e4>
    ab5c:	00bf      	lsls	r7, r7, #2
    ab5e:	4b14      	ldr	r3, [pc, #80]	; (abb0 <pdsUpdateMemory+0x248>)
    ab60:	59db      	ldr	r3, [r3, r7]
    ab62:	469f      	mov	pc, r3
    ab64:	0000a909 	.word	0x0000a909
    ab68:	00016518 	.word	0x00016518
    ab6c:	000165d0 	.word	0x000165d0
    ab70:	000165c0 	.word	0x000165c0
    ab74:	000165fc 	.word	0x000165fc
    ab78:	00014c1d 	.word	0x00014c1d
    ab7c:	0000a895 	.word	0x0000a895
    ab80:	0000a0fd 	.word	0x0000a0fd
    ab84:	00016494 	.word	0x00016494
    ab88:	000165ac 	.word	0x000165ac
    ab8c:	00014cf1 	.word	0x00014cf1
    ab90:	00016568 	.word	0x00016568
    ab94:	00016580 	.word	0x00016580
    ab98:	00016594 	.word	0x00016594
    ab9c:	20000094 	.word	0x20000094
    aba0:	00014cdf 	.word	0x00014cdf
    aba4:	0000d93d 	.word	0x0000d93d
    aba8:	20001db8 	.word	0x20001db8
    abac:	2000000c 	.word	0x2000000c
    abb0:	00016540 	.word	0x00016540

0000abb4 <pdsGetDirDescr>:
\param[in] dirDescrToGet    - pointer to dir descriptor to be loaded;

returns true if descriptor is found out for the given dir ID, false - otherwise
******************************************************************************/
bool pdsGetDirDescr(S_Nv_ItemId_t itemId, PDS_DirDescr_t *dirDescrToGet )
{
    abb4:	b570      	push	{r4, r5, r6, lr}
    abb6:	b082      	sub	sp, #8
    abb8:	000c      	movs	r4, r1
  /* Calculate raw data size */
  for (uint8_t fileIdx = 0; fileIdx < PDS_DIRECTORIES_AMOUNT; fileIdx++)
  {
    PDS_DirDescr_t dirDescr;

    memcpy(&dirDescr, (void const *)dirDescrPtr, sizeof(PDS_DirDescr_t));
    abba:	466b      	mov	r3, sp
    abbc:	4a08      	ldr	r2, [pc, #32]	; (abe0 <pdsGetDirDescr+0x2c>)
    abbe:	4669      	mov	r1, sp
    abc0:	ca60      	ldmia	r2!, {r5, r6}
    abc2:	c160      	stmia	r1!, {r5, r6}
    if(dirDescr.memoryId == itemId)
    abc4:	88da      	ldrh	r2, [r3, #6]
      memcpy(dirDescrToGet, &dirDescr, sizeof(PDS_DirDescr_t));
      return true;
    }
    dirDescrPtr++;
  }
  return false;
    abc6:	2300      	movs	r3, #0
    if(dirDescr.memoryId == itemId)
    abc8:	4282      	cmp	r2, r0
    abca:	d002      	beq.n	abd2 <pdsGetDirDescr+0x1e>
}
    abcc:	0018      	movs	r0, r3
    abce:	b002      	add	sp, #8
    abd0:	bd70      	pop	{r4, r5, r6, pc}
      memcpy(dirDescrToGet, &dirDescr, sizeof(PDS_DirDescr_t));
    abd2:	2208      	movs	r2, #8
    abd4:	4669      	mov	r1, sp
    abd6:	0020      	movs	r0, r4
    abd8:	4b02      	ldr	r3, [pc, #8]	; (abe4 <pdsGetDirDescr+0x30>)
    abda:	4798      	blx	r3
      return true;
    abdc:	2301      	movs	r3, #1
    abde:	e7f5      	b.n	abcc <pdsGetDirDescr+0x18>
    abe0:	00006190 	.word	0x00006190
    abe4:	00014cdf 	.word	0x00014cdf

0000abe8 <PHY_DataConf>:
 *      None
 *
 *****************************************************************************************/
void PHY_DataConf(uint8_t status)
{
	dataStatus = (miwi_status_t)status;
    abe8:	4b02      	ldr	r3, [pc, #8]	; (abf4 <PHY_DataConf+0xc>)
    abea:	7018      	strb	r0, [r3, #0]
	dataConfAvailable = true;
    abec:	2201      	movs	r2, #1
    abee:	4b02      	ldr	r3, [pc, #8]	; (abf8 <PHY_DataConf+0x10>)
    abf0:	701a      	strb	r2, [r3, #0]
}
    abf2:	4770      	bx	lr
    abf4:	20001e5c 	.word	0x20001e5c
    abf8:	200003dc 	.word	0x200003dc

0000abfc <MiMAC_SetAltAddress>:
{
    abfc:	b510      	push	{r4, lr}
	myNetworkAddress.v[0] = Address[0];
    abfe:	7802      	ldrb	r2, [r0, #0]
    ac00:	4b08      	ldr	r3, [pc, #32]	; (ac24 <MiMAC_SetAltAddress+0x28>)
    ac02:	701a      	strb	r2, [r3, #0]
	myNetworkAddress.v[1] = Address[1];
    ac04:	7842      	ldrb	r2, [r0, #1]
    ac06:	705a      	strb	r2, [r3, #1]
	MAC_PANID.v[0] = PanId[0];
    ac08:	780a      	ldrb	r2, [r1, #0]
    ac0a:	4c07      	ldr	r4, [pc, #28]	; (ac28 <MiMAC_SetAltAddress+0x2c>)
    ac0c:	7022      	strb	r2, [r4, #0]
	MAC_PANID.v[1] = PanId[1];
    ac0e:	784a      	ldrb	r2, [r1, #1]
    ac10:	7062      	strb	r2, [r4, #1]
	PHY_SetShortAddr(myNetworkAddress.Val);
    ac12:	8818      	ldrh	r0, [r3, #0]
    ac14:	4b05      	ldr	r3, [pc, #20]	; (ac2c <MiMAC_SetAltAddress+0x30>)
    ac16:	4798      	blx	r3
	PHY_SetPanId(MAC_PANID.Val);
    ac18:	8820      	ldrh	r0, [r4, #0]
    ac1a:	4b05      	ldr	r3, [pc, #20]	; (ac30 <MiMAC_SetAltAddress+0x34>)
    ac1c:	4798      	blx	r3
}
    ac1e:	2001      	movs	r0, #1
    ac20:	bd10      	pop	{r4, pc}
    ac22:	46c0      	nop			; (mov r8, r8)
    ac24:	20001e4c 	.word	0x20001e4c
    ac28:	20001e64 	.word	0x20001e64
    ac2c:	0000b5b1 	.word	0x0000b5b1
    ac30:	0000b591 	.word	0x0000b591

0000ac34 <MiMAC_PowerState>:
{
    ac34:	b510      	push	{r4, lr}
    switch (PowerState)
    ac36:	2800      	cmp	r0, #0
    ac38:	d003      	beq.n	ac42 <MiMAC_PowerState+0xe>
    ac3a:	28ff      	cmp	r0, #255	; 0xff
    ac3c:	d005      	beq.n	ac4a <MiMAC_PowerState+0x16>
            return false;
    ac3e:	2000      	movs	r0, #0
    ac40:	e002      	b.n	ac48 <MiMAC_PowerState+0x14>
			PHY_Sleep();
    ac42:	4b04      	ldr	r3, [pc, #16]	; (ac54 <MiMAC_PowerState+0x20>)
    ac44:	4798      	blx	r3
    return true;
    ac46:	2001      	movs	r0, #1
}
    ac48:	bd10      	pop	{r4, pc}
			PHY_Wakeup();
    ac4a:	4b03      	ldr	r3, [pc, #12]	; (ac58 <MiMAC_PowerState+0x24>)
    ac4c:	4798      	blx	r3
    return true;
    ac4e:	2001      	movs	r0, #1
            break;
    ac50:	e7fa      	b.n	ac48 <MiMAC_PowerState+0x14>
    ac52:	46c0      	nop			; (mov r8, r8)
    ac54:	0000b5dd 	.word	0x0000b5dd
    ac58:	0000b609 	.word	0x0000b609

0000ac5c <MiMAC_Set>:
{
    ac5c:	b510      	push	{r4, lr}
    switch(id)
    ac5e:	2800      	cmp	r0, #0
    ac60:	d109      	bne.n	ac76 <MiMAC_Set+0x1a>
         if(*value > 26) //TODO: this check is necessary here? as we may connect a sub-gig or a 2.4gig?
    ac62:	780b      	ldrb	r3, [r1, #0]
    ac64:	2b1a      	cmp	r3, #26
    ac66:	d807      	bhi.n	ac78 <MiMAC_Set+0x1c>
          MACCurrentChannel = *value;
    ac68:	4a04      	ldr	r2, [pc, #16]	; (ac7c <MiMAC_Set+0x20>)
    ac6a:	7013      	strb	r3, [r2, #0]
          PHY_SetChannel(MACCurrentChannel);
    ac6c:	0018      	movs	r0, r3
    ac6e:	4b04      	ldr	r3, [pc, #16]	; (ac80 <MiMAC_Set+0x24>)
    ac70:	4798      	blx	r3
          return true;
    ac72:	2001      	movs	r0, #1
    ac74:	e000      	b.n	ac78 <MiMAC_Set+0x1c>
    return false;
    ac76:	2000      	movs	r0, #0
}
    ac78:	bd10      	pop	{r4, pc}
    ac7a:	46c0      	nop			; (mov r8, r8)
    ac7c:	20001e66 	.word	0x20001e66
    ac80:	0000b635 	.word	0x0000b635

0000ac84 <MiMAC_Init>:
{
    ac84:	b530      	push	{r4, r5, lr}
    ac86:	b083      	sub	sp, #12
    ac88:	466c      	mov	r4, sp
    ac8a:	9000      	str	r0, [sp, #0]
    ac8c:	9101      	str	r1, [sp, #4]
	PHY_Init();
    ac8e:	4b0f      	ldr	r3, [pc, #60]	; (accc <MiMAC_Init+0x48>)
    ac90:	4798      	blx	r3
	MACInitParams = initValue;
    ac92:	4d0f      	ldr	r5, [pc, #60]	; (acd0 <MiMAC_Init+0x4c>)
    ac94:	002b      	movs	r3, r5
    ac96:	cc06      	ldmia	r4!, {r1, r2}
    ac98:	c306      	stmia	r3!, {r1, r2}
	uint16_t x =  PHY_RandomReq();
    ac9a:	4b0e      	ldr	r3, [pc, #56]	; (acd4 <MiMAC_Init+0x50>)
    ac9c:	4798      	blx	r3
    ac9e:	0004      	movs	r4, r0
	PHY_SetRxState(true);
    aca0:	2001      	movs	r0, #1
    aca2:	4b0d      	ldr	r3, [pc, #52]	; (acd8 <MiMAC_Init+0x54>)
    aca4:	4798      	blx	r3
	IEEESeqNum =   x & 0xff;
    aca6:	4b0d      	ldr	r3, [pc, #52]	; (acdc <MiMAC_Init+0x58>)
    aca8:	701c      	strb	r4, [r3, #0]
	PHY_SetIEEEAddr(MACInitParams.PAddress);
    acaa:	6868      	ldr	r0, [r5, #4]
    acac:	4b0c      	ldr	r3, [pc, #48]	; (ace0 <MiMAC_Init+0x5c>)
    acae:	4798      	blx	r3
		RxBuffer[i].PayloadLen = 0;
    acb0:	4b0c      	ldr	r3, [pc, #48]	; (ace4 <MiMAC_Init+0x60>)
    acb2:	2200      	movs	r2, #0
    acb4:	701a      	strb	r2, [r3, #0]
    acb6:	217f      	movs	r1, #127	; 0x7f
    acb8:	545a      	strb	r2, [r3, r1]
    acba:	317f      	adds	r1, #127	; 0x7f
    acbc:	545a      	strb	r2, [r3, r1]
    acbe:	217e      	movs	r1, #126	; 0x7e
    acc0:	31ff      	adds	r1, #255	; 0xff
    acc2:	545a      	strb	r2, [r3, r1]
}
    acc4:	2001      	movs	r0, #1
    acc6:	b003      	add	sp, #12
    acc8:	bd30      	pop	{r4, r5, pc}
    acca:	46c0      	nop			; (mov r8, r8)
    accc:	0000b529 	.word	0x0000b529
    acd0:	20001e54 	.word	0x20001e54
    acd4:	0000b4d9 	.word	0x0000b4d9
    acd8:	0000b57d 	.word	0x0000b57d
    acdc:	20001dc8 	.word	0x20001dc8
    ace0:	0000b671 	.word	0x0000b671
    ace4:	20001e80 	.word	0x20001e80

0000ace8 <MiMAC_SendPacket>:
{
    ace8:	b5f0      	push	{r4, r5, r6, r7, lr}
    acea:	46de      	mov	lr, fp
    acec:	4657      	mov	r7, sl
    acee:	464e      	mov	r6, r9
    acf0:	4645      	mov	r5, r8
    acf2:	b5e0      	push	{r5, r6, r7, lr}
    acf4:	b08b      	sub	sp, #44	; 0x2c
    acf6:	9003      	str	r0, [sp, #12]
    acf8:	000e      	movs	r6, r1
    acfa:	9104      	str	r1, [sp, #16]
    acfc:	1c11      	adds	r1, r2, #0
    acfe:	0014      	movs	r4, r2
    ad00:	0a24      	lsrs	r4, r4, #8
    ad02:	9205      	str	r2, [sp, #20]
    ad04:	9301      	str	r3, [sp, #4]
    ad06:	aa14      	add	r2, sp, #80	; 0x50
    ad08:	7815      	ldrb	r5, [r2, #0]
    ad0a:	aa15      	add	r2, sp, #84	; 0x54
    ad0c:	7813      	ldrb	r3, [r2, #0]
    ad0e:	9302      	str	r3, [sp, #8]
    ad10:	b2c3      	uxtb	r3, r0
    ad12:	4698      	mov	r8, r3
    ad14:	0698      	lsls	r0, r3, #26
    ad16:	0fc3      	lsrs	r3, r0, #31
    ad18:	4699      	mov	r9, r3
    ad1a:	b2c9      	uxtb	r1, r1
    ad1c:	b2e2      	uxtb	r2, r4
    if (transParam.flags.bits.broadcast)
    ad1e:	4643      	mov	r3, r8
    ad20:	075b      	lsls	r3, r3, #29
    ad22:	d500      	bpl.n	ad26 <MiMAC_SendPacket+0x3e>
        transParam.altDestAddr = true;
    ad24:	2101      	movs	r1, #1
    if (transParam.flags.bits.packetType == PACKET_TYPE_COMMAND)
    ad26:	2303      	movs	r3, #3
    ad28:	4644      	mov	r4, r8
    ad2a:	4023      	ands	r3, r4
    ad2c:	2b01      	cmp	r3, #1
    ad2e:	d037      	beq.n	ada0 <MiMAC_SendPacket+0xb8>
    } else if (transParam.flags.bits.packetType == PACKET_TYPE_DATA)
    ad30:	425c      	negs	r4, r3
    ad32:	415c      	adcs	r4, r3
        frameControl = 0x03;
    ad34:	b2e0      	uxtb	r0, r4
    ad36:	4682      	mov	sl, r0
    if ((transParam.DestPANID.Val == MAC_PANID.Val) && (MAC_PANID.Val != 0xFFFF)) // this is intraPAN
    ad38:	ac03      	add	r4, sp, #12
    ad3a:	8964      	ldrh	r4, [r4, #10]
    ad3c:	4f7b      	ldr	r7, [pc, #492]	; (af2c <MiMAC_SendPacket+0x244>)
    ad3e:	883f      	ldrh	r7, [r7, #0]
    ad40:	42a7      	cmp	r7, r4
    ad42:	d030      	beq.n	ada6 <MiMAC_SendPacket+0xbe>
        IntraPAN = false;
    ad44:	2000      	movs	r0, #0
    ad46:	4684      	mov	ip, r0
        headerLength = 7;
    ad48:	3007      	adds	r0, #7
    ad4a:	4683      	mov	fp, r0
        headerLength += 8;
    ad4c:	465c      	mov	r4, fp
    ad4e:	3408      	adds	r4, #8
    if (transParam.altDestAddr)
    ad50:	2900      	cmp	r1, #0
    ad52:	d000      	beq.n	ad56 <MiMAC_SendPacket+0x6e>
        headerLength += 2;
    ad54:	3c06      	subs	r4, #6
    if (transParam.altSrcAddr)
    ad56:	2a00      	cmp	r2, #0
    ad58:	d036      	beq.n	adc8 <MiMAC_SendPacket+0xe0>
        headerLength += 2;
    ad5a:	3402      	adds	r4, #2
    ad5c:	b2e4      	uxtb	r4, r4
    if (transParam.flags.bits.ackReq && transParam.flags.bits.broadcast == false)
    ad5e:	2724      	movs	r7, #36	; 0x24
    ad60:	46bb      	mov	fp, r7
    ad62:	4647      	mov	r7, r8
    ad64:	4658      	mov	r0, fp
    ad66:	4007      	ands	r7, r0
    ad68:	2f20      	cmp	r7, #32
    ad6a:	d030      	beq.n	adce <MiMAC_SendPacket+0xe6>
    if (transParam.flags.bits.packetType == PACKET_TYPE_RESERVE)
    ad6c:	2b03      	cmp	r3, #3
    ad6e:	d032      	beq.n	add6 <MiMAC_SendPacket+0xee>
		packet[loc++] = MACPayloadLen+headerLength;
    ad70:	4b6f      	ldr	r3, [pc, #444]	; (af30 <MiMAC_SendPacket+0x248>)
    ad72:	1964      	adds	r4, r4, r5
    ad74:	701c      	strb	r4, [r3, #0]
	packet[loc++] = frameControl;
    ad76:	4650      	mov	r0, sl
    ad78:	7058      	strb	r0, [r3, #1]
    if (transParam.flags.bits.packetType == PACKET_TYPE_RESERVE)
    ad7a:	ac03      	add	r4, sp, #12
    ad7c:	464b      	mov	r3, r9
    ad7e:	015b      	lsls	r3, r3, #5
    ad80:	7820      	ldrb	r0, [r4, #0]
    ad82:	2720      	movs	r7, #32
    ad84:	43b8      	bics	r0, r7
    ad86:	4318      	orrs	r0, r3
    ad88:	7020      	strb	r0, [r4, #0]
    ad8a:	43c4      	mvns	r4, r0
    ad8c:	07a3      	lsls	r3, r4, #30
    ad8e:	d029      	beq.n	ade4 <MiMAC_SendPacket+0xfc>
        if (transParam.altDestAddr && transParam.altSrcAddr)
    ad90:	2900      	cmp	r1, #0
    ad92:	d048      	beq.n	ae26 <MiMAC_SendPacket+0x13e>
    ad94:	2a00      	cmp	r2, #0
    ad96:	d02f      	beq.n	adf8 <MiMAC_SendPacket+0x110>
			packet[loc++] = 0x88;
    ad98:	2488      	movs	r4, #136	; 0x88
    ad9a:	4965      	ldr	r1, [pc, #404]	; (af30 <MiMAC_SendPacket+0x248>)
    ad9c:	708c      	strb	r4, [r1, #2]
    ad9e:	e02e      	b.n	adfe <MiMAC_SendPacket+0x116>
        frameControl = 0x03;
    ada0:	2003      	movs	r0, #3
    ada2:	4682      	mov	sl, r0
    ada4:	e7c8      	b.n	ad38 <MiMAC_SendPacket+0x50>
    if ((transParam.DestPANID.Val == MAC_PANID.Val) && (MAC_PANID.Val != 0xFFFF)) // this is intraPAN
    ada6:	4863      	ldr	r0, [pc, #396]	; (af34 <MiMAC_SendPacket+0x24c>)
    ada8:	4284      	cmp	r4, r0
    adaa:	d008      	beq.n	adbe <MiMAC_SendPacket+0xd6>
        frameControl |= 0x40;
    adac:	2440      	movs	r4, #64	; 0x40
    adae:	4650      	mov	r0, sl
    adb0:	4320      	orrs	r0, r4
    adb2:	4682      	mov	sl, r0
        IntraPAN = true;
    adb4:	2001      	movs	r0, #1
    adb6:	4684      	mov	ip, r0
        headerLength = 5;
    adb8:	3004      	adds	r0, #4
    adba:	4683      	mov	fp, r0
        IntraPAN = true;
    adbc:	e7c6      	b.n	ad4c <MiMAC_SendPacket+0x64>
        IntraPAN = false;
    adbe:	2000      	movs	r0, #0
    adc0:	4684      	mov	ip, r0
        headerLength = 7;
    adc2:	3007      	adds	r0, #7
    adc4:	4683      	mov	fp, r0
    adc6:	e7c1      	b.n	ad4c <MiMAC_SendPacket+0x64>
        headerLength += 8;
    adc8:	3408      	adds	r4, #8
    adca:	b2e4      	uxtb	r4, r4
    adcc:	e7c7      	b.n	ad5e <MiMAC_SendPacket+0x76>
        frameControl |= 0x20;
    adce:	4650      	mov	r0, sl
    add0:	4338      	orrs	r0, r7
    add2:	4682      	mov	sl, r0
    add4:	e7ca      	b.n	ad6c <MiMAC_SendPacket+0x84>
        transParam.altSrcAddr = true;
    add6:	2201      	movs	r2, #1
        transParam.flags.bits.ackReq = false;
    add8:	2300      	movs	r3, #0
    adda:	4699      	mov	r9, r3
        IntraPAN = false;
    addc:	469c      	mov	ip, r3
        frameControl = 0x00;
    adde:	469a      	mov	sl, r3
        headerLength = 7;
    ade0:	2407      	movs	r4, #7
    ade2:	e7c5      	b.n	ad70 <MiMAC_SendPacket+0x88>
		packet[loc++] = 0x80;
    ade4:	4952      	ldr	r1, [pc, #328]	; (af30 <MiMAC_SendPacket+0x248>)
    ade6:	2080      	movs	r0, #128	; 0x80
    ade8:	7088      	strb	r0, [r1, #2]
		packet[loc++] = IEEESeqNum++;
    adea:	4c53      	ldr	r4, [pc, #332]	; (af38 <MiMAC_SendPacket+0x250>)
    adec:	7820      	ldrb	r0, [r4, #0]
    adee:	1c46      	adds	r6, r0, #1
    adf0:	7026      	strb	r6, [r4, #0]
    adf2:	70c8      	strb	r0, [r1, #3]
    adf4:	2104      	movs	r1, #4
    adf6:	e02c      	b.n	ae52 <MiMAC_SendPacket+0x16a>
			packet[loc++] = 0xC8;
    adf8:	24c8      	movs	r4, #200	; 0xc8
    adfa:	494d      	ldr	r1, [pc, #308]	; (af30 <MiMAC_SendPacket+0x248>)
    adfc:	708c      	strb	r4, [r1, #2]
		packet[loc++] = IEEESeqNum++;
    adfe:	4c4e      	ldr	r4, [pc, #312]	; (af38 <MiMAC_SendPacket+0x250>)
    ae00:	7821      	ldrb	r1, [r4, #0]
    ae02:	1c4b      	adds	r3, r1, #1
    ae04:	7023      	strb	r3, [r4, #0]
    ae06:	4c4a      	ldr	r4, [pc, #296]	; (af30 <MiMAC_SendPacket+0x248>)
    ae08:	70e1      	strb	r1, [r4, #3]
		packet[loc++] = transParam.DestPANID.v[0];
    ae0a:	a903      	add	r1, sp, #12
    ae0c:	7a8b      	ldrb	r3, [r1, #10]
    ae0e:	7123      	strb	r3, [r4, #4]
		packet[loc++] = transParam.DestPANID.v[1];
    ae10:	7ac9      	ldrb	r1, [r1, #11]
    ae12:	7161      	strb	r1, [r4, #5]
        if (transParam.flags.bits.broadcast)
    ae14:	0743      	lsls	r3, r0, #29
    ae16:	d417      	bmi.n	ae48 <MiMAC_SendPacket+0x160>
				packet[loc++] = transParam.DestAddress[0];
    ae18:	7830      	ldrb	r0, [r6, #0]
    ae1a:	4945      	ldr	r1, [pc, #276]	; (af30 <MiMAC_SendPacket+0x248>)
    ae1c:	7188      	strb	r0, [r1, #6]
				packet[loc++] = transParam.DestAddress[1];
    ae1e:	7870      	ldrb	r0, [r6, #1]
    ae20:	71c8      	strb	r0, [r1, #7]
    ae22:	2108      	movs	r1, #8
    ae24:	e015      	b.n	ae52 <MiMAC_SendPacket+0x16a>
        } else if (transParam.altDestAddr == 0 && transParam.altSrcAddr == 1)
    ae26:	2a00      	cmp	r2, #0
    ae28:	d063      	beq.n	aef2 <MiMAC_SendPacket+0x20a>
			packet[loc++] = 0x8C;
    ae2a:	4c41      	ldr	r4, [pc, #260]	; (af30 <MiMAC_SendPacket+0x248>)
    ae2c:	218c      	movs	r1, #140	; 0x8c
    ae2e:	70a1      	strb	r1, [r4, #2]
		packet[loc++] = IEEESeqNum++;
    ae30:	4b41      	ldr	r3, [pc, #260]	; (af38 <MiMAC_SendPacket+0x250>)
    ae32:	7819      	ldrb	r1, [r3, #0]
    ae34:	1c4f      	adds	r7, r1, #1
    ae36:	701f      	strb	r7, [r3, #0]
    ae38:	70e1      	strb	r1, [r4, #3]
		packet[loc++] = transParam.DestPANID.v[0];
    ae3a:	a903      	add	r1, sp, #12
    ae3c:	7a8b      	ldrb	r3, [r1, #10]
    ae3e:	7123      	strb	r3, [r4, #4]
		packet[loc++] = transParam.DestPANID.v[1];
    ae40:	7ac9      	ldrb	r1, [r1, #11]
    ae42:	7161      	strb	r1, [r4, #5]
        if (transParam.flags.bits.broadcast)
    ae44:	0743      	lsls	r3, r0, #29
    ae46:	d567      	bpl.n	af18 <MiMAC_SendPacket+0x230>
			packet[loc++] = 0xFF;
    ae48:	4939      	ldr	r1, [pc, #228]	; (af30 <MiMAC_SendPacket+0x248>)
    ae4a:	20ff      	movs	r0, #255	; 0xff
    ae4c:	7188      	strb	r0, [r1, #6]
			packet[loc++] = 0xFF;
    ae4e:	71c8      	strb	r0, [r1, #7]
    ae50:	2108      	movs	r1, #8
    if (IntraPAN == false)
    ae52:	4663      	mov	r3, ip
    ae54:	2b00      	cmp	r3, #0
    ae56:	d109      	bne.n	ae6c <MiMAC_SendPacket+0x184>
		packet[loc++] = MAC_PANID.v[0];
    ae58:	1c48      	adds	r0, r1, #1
    ae5a:	b2c0      	uxtb	r0, r0
    ae5c:	4c34      	ldr	r4, [pc, #208]	; (af30 <MiMAC_SendPacket+0x248>)
    ae5e:	4e33      	ldr	r6, [pc, #204]	; (af2c <MiMAC_SendPacket+0x244>)
    ae60:	7833      	ldrb	r3, [r6, #0]
    ae62:	5463      	strb	r3, [r4, r1]
		packet[loc++] = MAC_PANID.v[1];
    ae64:	3102      	adds	r1, #2
    ae66:	b2c9      	uxtb	r1, r1
    ae68:	7876      	ldrb	r6, [r6, #1]
    ae6a:	5426      	strb	r6, [r4, r0]
    if (transParam.altSrcAddr)
    ae6c:	2a00      	cmp	r2, #0
    ae6e:	d031      	beq.n	aed4 <MiMAC_SendPacket+0x1ec>
		packet[loc++] = myNetworkAddress.v[0];
    ae70:	482f      	ldr	r0, [pc, #188]	; (af30 <MiMAC_SendPacket+0x248>)
    ae72:	4c32      	ldr	r4, [pc, #200]	; (af3c <MiMAC_SendPacket+0x254>)
    ae74:	7822      	ldrb	r2, [r4, #0]
    ae76:	5442      	strb	r2, [r0, r1]
		packet[loc++] = myNetworkAddress.v[1];
    ae78:	1c8a      	adds	r2, r1, #2
    ae7a:	b2d2      	uxtb	r2, r2
		packet[loc++] = myNetworkAddress.v[0];
    ae7c:	3101      	adds	r1, #1
		packet[loc++] = myNetworkAddress.v[1];
    ae7e:	b2c9      	uxtb	r1, r1
    ae80:	7864      	ldrb	r4, [r4, #1]
    ae82:	5444      	strb	r4, [r0, r1]
    for (i = 0; i < MACPayloadLen; i++)
    ae84:	2d00      	cmp	r5, #0
    ae86:	d00a      	beq.n	ae9e <MiMAC_SendPacket+0x1b6>
    ae88:	9901      	ldr	r1, [sp, #4]
    ae8a:	1955      	adds	r5, r2, r5
    ae8c:	b2ed      	uxtb	r5, r5
		packet[loc++] = MACPayload[i];
    ae8e:	4e28      	ldr	r6, [pc, #160]	; (af30 <MiMAC_SendPacket+0x248>)
    ae90:	1c50      	adds	r0, r2, #1
    ae92:	780c      	ldrb	r4, [r1, #0]
    ae94:	54b4      	strb	r4, [r6, r2]
    ae96:	3101      	adds	r1, #1
    ae98:	b2c2      	uxtb	r2, r0
    for (i = 0; i < MACPayloadLen; i++)
    ae9a:	4295      	cmp	r5, r2
    ae9c:	d1f8      	bne.n	ae90 <MiMAC_SendPacket+0x1a8>
    dataPointer = MACPayload;
    ae9e:	4a28      	ldr	r2, [pc, #160]	; (af40 <MiMAC_SendPacket+0x258>)
    aea0:	9b01      	ldr	r3, [sp, #4]
    aea2:	6013      	str	r3, [r2, #0]
	dataConfCallback = ConfCallback;
    aea4:	4b27      	ldr	r3, [pc, #156]	; (af44 <MiMAC_SendPacket+0x25c>)
    aea6:	9a16      	ldr	r2, [sp, #88]	; 0x58
    aea8:	601a      	str	r2, [r3, #0]
    dataHandle = msghandle;
    aeaa:	4b27      	ldr	r3, [pc, #156]	; (af48 <MiMAC_SendPacket+0x260>)
    aeac:	466a      	mov	r2, sp
    aeae:	7a12      	ldrb	r2, [r2, #8]
    aeb0:	701a      	strb	r2, [r3, #0]
    phyDataRequest.polledConfirmation = false;
    aeb2:	a807      	add	r0, sp, #28
    aeb4:	2300      	movs	r3, #0
    aeb6:	7003      	strb	r3, [r0, #0]
    phyDataRequest.confirmCallback = PHY_DataConf;
    aeb8:	4b24      	ldr	r3, [pc, #144]	; (af4c <MiMAC_SendPacket+0x264>)
    aeba:	6083      	str	r3, [r0, #8]
    phyDataRequest.data = packet;
    aebc:	4b1c      	ldr	r3, [pc, #112]	; (af30 <MiMAC_SendPacket+0x248>)
    aebe:	6043      	str	r3, [r0, #4]
    PHY_DataReq(&phyDataRequest);
    aec0:	4b23      	ldr	r3, [pc, #140]	; (af50 <MiMAC_SendPacket+0x268>)
    aec2:	4798      	blx	r3
}
    aec4:	2001      	movs	r0, #1
    aec6:	b00b      	add	sp, #44	; 0x2c
    aec8:	bc3c      	pop	{r2, r3, r4, r5}
    aeca:	4690      	mov	r8, r2
    aecc:	4699      	mov	r9, r3
    aece:	46a2      	mov	sl, r4
    aed0:	46ab      	mov	fp, r5
    aed2:	bdf0      	pop	{r4, r5, r6, r7, pc}
			packet[loc++] = MACInitParams.PAddress[i];
    aed4:	4a1f      	ldr	r2, [pc, #124]	; (af54 <MiMAC_SendPacket+0x26c>)
    aed6:	6850      	ldr	r0, [r2, #4]
    aed8:	000e      	movs	r6, r1
    aeda:	3608      	adds	r6, #8
    aedc:	b2f6      	uxtb	r6, r6
    aede:	4b14      	ldr	r3, [pc, #80]	; (af30 <MiMAC_SendPacket+0x248>)
    aee0:	1c4a      	adds	r2, r1, #1
    aee2:	b2d2      	uxtb	r2, r2
    aee4:	7804      	ldrb	r4, [r0, #0]
    aee6:	545c      	strb	r4, [r3, r1]
    aee8:	3001      	adds	r0, #1
    aeea:	0011      	movs	r1, r2
        for (i = 0; i < 8; i++)
    aeec:	42b2      	cmp	r2, r6
    aeee:	d1f7      	bne.n	aee0 <MiMAC_SendPacket+0x1f8>
    aef0:	e7c8      	b.n	ae84 <MiMAC_SendPacket+0x19c>
			packet[loc++] = 0xCC;
    aef2:	4c0f      	ldr	r4, [pc, #60]	; (af30 <MiMAC_SendPacket+0x248>)
    aef4:	21cc      	movs	r1, #204	; 0xcc
    aef6:	70a1      	strb	r1, [r4, #2]
		packet[loc++] = IEEESeqNum++;
    aef8:	4b0f      	ldr	r3, [pc, #60]	; (af38 <MiMAC_SendPacket+0x250>)
    aefa:	4698      	mov	r8, r3
    aefc:	7819      	ldrb	r1, [r3, #0]
    aefe:	1c4b      	adds	r3, r1, #1
    af00:	4699      	mov	r9, r3
    af02:	4643      	mov	r3, r8
    af04:	464f      	mov	r7, r9
    af06:	701f      	strb	r7, [r3, #0]
    af08:	70e1      	strb	r1, [r4, #3]
		packet[loc++] = transParam.DestPANID.v[0];
    af0a:	a903      	add	r1, sp, #12
    af0c:	7a8b      	ldrb	r3, [r1, #10]
    af0e:	7123      	strb	r3, [r4, #4]
		packet[loc++] = transParam.DestPANID.v[1];
    af10:	7ac9      	ldrb	r1, [r1, #11]
    af12:	7161      	strb	r1, [r4, #5]
        if (transParam.flags.bits.broadcast)
    af14:	0743      	lsls	r3, r0, #29
    af16:	d497      	bmi.n	ae48 <MiMAC_SendPacket+0x160>
        headerLength = 7;
    af18:	2000      	movs	r0, #0
					packet[loc++] = transParam.DestAddress[i];
    af1a:	4b05      	ldr	r3, [pc, #20]	; (af30 <MiMAC_SendPacket+0x248>)
    af1c:	5c34      	ldrb	r4, [r6, r0]
    af1e:	18c1      	adds	r1, r0, r3
    af20:	718c      	strb	r4, [r1, #6]
    af22:	3001      	adds	r0, #1
                for (i = 0; i < 8; i++)
    af24:	2808      	cmp	r0, #8
    af26:	d1f9      	bne.n	af1c <MiMAC_SendPacket+0x234>
					packet[loc++] = transParam.DestAddress[i];
    af28:	210e      	movs	r1, #14
    af2a:	e792      	b.n	ae52 <MiMAC_SendPacket+0x16a>
    af2c:	20001e64 	.word	0x20001e64
    af30:	20001dcc 	.word	0x20001dcc
    af34:	0000ffff 	.word	0x0000ffff
    af38:	20001dc8 	.word	0x20001dc8
    af3c:	20001e4c 	.word	0x20001e4c
    af40:	200003e8 	.word	0x200003e8
    af44:	200003e0 	.word	0x200003e0
    af48:	200003e4 	.word	0x200003e4
    af4c:	0000abe9 	.word	0x0000abe9
    af50:	0000b3fd 	.word	0x0000b3fd
    af54:	20001e54 	.word	0x20001e54

0000af58 <MiMAC_DiscardPacket>:
	if (BankIndex < BANK_SIZE)
    af58:	4b04      	ldr	r3, [pc, #16]	; (af6c <MiMAC_DiscardPacket+0x14>)
    af5a:	781b      	ldrb	r3, [r3, #0]
    af5c:	2b03      	cmp	r3, #3
    af5e:	d804      	bhi.n	af6a <MiMAC_DiscardPacket+0x12>
		RxBuffer[BankIndex].PayloadLen = 0;
    af60:	01da      	lsls	r2, r3, #7
    af62:	1ad3      	subs	r3, r2, r3
    af64:	2100      	movs	r1, #0
    af66:	4a02      	ldr	r2, [pc, #8]	; (af70 <MiMAC_DiscardPacket+0x18>)
    af68:	5499      	strb	r1, [r3, r2]
}
    af6a:	4770      	bx	lr
    af6c:	2000000a 	.word	0x2000000a
    af70:	20001e80 	.word	0x20001e80

0000af74 <MiMAC_ReceivedPacket>:
{
    af74:	b570      	push	{r4, r5, r6, lr}
	BankIndex = 0xFF;
    af76:	22ff      	movs	r2, #255	; 0xff
    af78:	4bce      	ldr	r3, [pc, #824]	; (b2b4 <MiMAC_ReceivedPacket+0x340>)
    af7a:	701a      	strb	r2, [r3, #0]
		if (RxBuffer[i].PayloadLen > 0)
    af7c:	4bce      	ldr	r3, [pc, #824]	; (b2b8 <MiMAC_ReceivedPacket+0x344>)
    af7e:	781b      	ldrb	r3, [r3, #0]
    af80:	2b00      	cmp	r3, #0
    af82:	d000      	beq.n	af86 <MiMAC_ReceivedPacket+0x12>
    af84:	e1bf      	b.n	b306 <MiMAC_ReceivedPacket+0x392>
    af86:	337f      	adds	r3, #127	; 0x7f
    af88:	4acb      	ldr	r2, [pc, #812]	; (b2b8 <MiMAC_ReceivedPacket+0x344>)
    af8a:	5cd3      	ldrb	r3, [r2, r3]
    af8c:	2b00      	cmp	r3, #0
    af8e:	d10b      	bne.n	afa8 <MiMAC_ReceivedPacket+0x34>
    af90:	33fe      	adds	r3, #254	; 0xfe
    af92:	5cd3      	ldrb	r3, [r2, r3]
    af94:	2b00      	cmp	r3, #0
    af96:	d130      	bne.n	affa <MiMAC_ReceivedPacket+0x86>
    af98:	237e      	movs	r3, #126	; 0x7e
    af9a:	33ff      	adds	r3, #255	; 0xff
    af9c:	5cd3      	ldrb	r3, [r2, r3]
	return false;
    af9e:	2000      	movs	r0, #0
	for (i = 0; i < BANK_SIZE; i++)
    afa0:	2203      	movs	r2, #3
		if (RxBuffer[i].PayloadLen > 0)
    afa2:	2b00      	cmp	r3, #0
    afa4:	d101      	bne.n	afaa <MiMAC_ReceivedPacket+0x36>
}
    afa6:	bd70      	pop	{r4, r5, r6, pc}
	for (i = 0; i < BANK_SIZE; i++)
    afa8:	2201      	movs	r2, #1
			BankIndex = i;
    afaa:	4bc2      	ldr	r3, [pc, #776]	; (b2b4 <MiMAC_ReceivedPacket+0x340>)
    afac:	701a      	strb	r2, [r3, #0]
	return false;
    afae:	2000      	movs	r0, #0
	if (BankIndex < BANK_SIZE)
    afb0:	2a03      	cmp	r2, #3
    afb2:	d8f8      	bhi.n	afa6 <MiMAC_ReceivedPacket+0x32>
		if ((RxBuffer[BankIndex].Payload[0] & 0x40) == 0)
    afb4:	0010      	movs	r0, r2
    afb6:	01d1      	lsls	r1, r2, #7
    afb8:	1a89      	subs	r1, r1, r2
    afba:	4bbf      	ldr	r3, [pc, #764]	; (b2b8 <MiMAC_ReceivedPacket+0x344>)
    afbc:	185b      	adds	r3, r3, r1
    afbe:	785d      	ldrb	r5, [r3, #1]
    afc0:	2440      	movs	r4, #64	; 0x40
    afc2:	4025      	ands	r5, r4
		MACRxPacket.flags.Val = 0;
    afc4:	49bd      	ldr	r1, [pc, #756]	; (b2bc <MiMAC_ReceivedPacket+0x348>)
    afc6:	2400      	movs	r4, #0
    afc8:	700c      	strb	r4, [r1, #0]
		MACRxPacket.altSourceAddress = false;
    afca:	73cc      	strb	r4, [r1, #15]
		MACRxPacket.SourcePANID.Val = 0xFFFF;
    afcc:	3c01      	subs	r4, #1
    afce:	820c      	strh	r4, [r1, #16]
		addrMode = RxBuffer[BankIndex].Payload[1] & 0xCC;
    afd0:	789b      	ldrb	r3, [r3, #2]
    afd2:	2133      	movs	r1, #51	; 0x33
    afd4:	438b      	bics	r3, r1
		switch (addrMode)
    afd6:	b2d9      	uxtb	r1, r3
    afd8:	2988      	cmp	r1, #136	; 0x88
    afda:	d100      	bne.n	afde <MiMAC_ReceivedPacket+0x6a>
    afdc:	e0c4      	b.n	b168 <MiMAC_ReceivedPacket+0x1f4>
    afde:	d90e      	bls.n	affe <MiMAC_ReceivedPacket+0x8a>
    afe0:	b2d9      	uxtb	r1, r3
    afe2:	29c8      	cmp	r1, #200	; 0xc8
    afe4:	d046      	beq.n	b074 <MiMAC_ReceivedPacket+0x100>
    afe6:	29cc      	cmp	r1, #204	; 0xcc
    afe8:	d100      	bne.n	afec <MiMAC_ReceivedPacket+0x78>
    afea:	e08a      	b.n	b102 <MiMAC_ReceivedPacket+0x18e>
    afec:	298c      	cmp	r1, #140	; 0x8c
    afee:	d100      	bne.n	aff2 <MiMAC_ReceivedPacket+0x7e>
    aff0:	e104      	b.n	b1fc <MiMAC_ReceivedPacket+0x288>
			MiMAC_DiscardPacket();
    aff2:	4bb3      	ldr	r3, [pc, #716]	; (b2c0 <MiMAC_ReceivedPacket+0x34c>)
    aff4:	4798      	blx	r3
			return false;
    aff6:	2000      	movs	r0, #0
    aff8:	e7d5      	b.n	afa6 <MiMAC_ReceivedPacket+0x32>
	for (i = 0; i < BANK_SIZE; i++)
    affa:	2202      	movs	r2, #2
    affc:	e7d5      	b.n	afaa <MiMAC_ReceivedPacket+0x36>
		switch (addrMode)
    affe:	2b08      	cmp	r3, #8
    b000:	d100      	bne.n	b004 <MiMAC_ReceivedPacket+0x90>
    b002:	e131      	b.n	b268 <MiMAC_ReceivedPacket+0x2f4>
    b004:	2980      	cmp	r1, #128	; 0x80
    b006:	d1f4      	bne.n	aff2 <MiMAC_ReceivedPacket+0x7e>
				MACRxPacket.flags.bits.broadcast = 1;
    b008:	4bac      	ldr	r3, [pc, #688]	; (b2bc <MiMAC_ReceivedPacket+0x348>)
    b00a:	7819      	ldrb	r1, [r3, #0]
    b00c:	2404      	movs	r4, #4
    b00e:	4321      	orrs	r1, r4
				MACRxPacket.flags.bits.sourcePrsnt = 1;
    b010:	2480      	movs	r4, #128	; 0x80
    b012:	4264      	negs	r4, r4
    b014:	4321      	orrs	r1, r4
    b016:	7019      	strb	r1, [r3, #0]
				MACRxPacket.altSourceAddress = true;
    b018:	2101      	movs	r1, #1
    b01a:	73d9      	strb	r1, [r3, #15]
				MACRxPacket.SourcePANID.v[0] = RxBuffer[BankIndex].Payload[3];
    b01c:	4ca6      	ldr	r4, [pc, #664]	; (b2b8 <MiMAC_ReceivedPacket+0x344>)
    b01e:	01d1      	lsls	r1, r2, #7
    b020:	1a88      	subs	r0, r1, r2
    b022:	1821      	adds	r1, r4, r0
    b024:	790d      	ldrb	r5, [r1, #4]
    b026:	741d      	strb	r5, [r3, #16]
				MACRxPacket.SourcePANID.v[1] = RxBuffer[BankIndex].Payload[4];
    b028:	7949      	ldrb	r1, [r1, #5]
    b02a:	7459      	strb	r1, [r3, #17]
    b02c:	01d1      	lsls	r1, r2, #7
    b02e:	1a8a      	subs	r2, r1, r2
				MACRxPacket.SourceAddress = &(RxBuffer[BankIndex].Payload[5]);
    b030:	1d91      	adds	r1, r2, #6
    b032:	1909      	adds	r1, r1, r4
    b034:	6059      	str	r1, [r3, #4]
				MACRxPacket.PayloadLen = RxBuffer[BankIndex].PayloadLen - 11;
    b036:	5d01      	ldrb	r1, [r0, r4]
    b038:	390b      	subs	r1, #11
    b03a:	7319      	strb	r1, [r3, #12]
				MACRxPacket.Payload = &(RxBuffer[BankIndex].Payload[7]);
    b03c:	3208      	adds	r2, #8
    b03e:	1912      	adds	r2, r2, r4
    b040:	609a      	str	r2, [r3, #8]
		if (RxBuffer[BankIndex].Payload[0] & 0x08)
    b042:	4b9c      	ldr	r3, [pc, #624]	; (b2b4 <MiMAC_ReceivedPacket+0x340>)
    b044:	781b      	ldrb	r3, [r3, #0]
    b046:	01d9      	lsls	r1, r3, #7
    b048:	1ac9      	subs	r1, r1, r3
    b04a:	4a9b      	ldr	r2, [pc, #620]	; (b2b8 <MiMAC_ReceivedPacket+0x344>)
    b04c:	1852      	adds	r2, r2, r1
    b04e:	7851      	ldrb	r1, [r2, #1]
    b050:	070a      	lsls	r2, r1, #28
    b052:	d500      	bpl.n	b056 <MiMAC_ReceivedPacket+0xe2>
    b054:	e129      	b.n	b2aa <MiMAC_ReceivedPacket+0x336>
		switch (RxBuffer[BankIndex].Payload[0] & 0x07) // check frame type
    b056:	2207      	movs	r2, #7
    b058:	400a      	ands	r2, r1
    b05a:	2a01      	cmp	r2, #1
    b05c:	d100      	bne.n	b060 <MiMAC_ReceivedPacket+0xec>
    b05e:	e131      	b.n	b2c4 <MiMAC_ReceivedPacket+0x350>
    b060:	2a00      	cmp	r2, #0
    b062:	d100      	bne.n	b066 <MiMAC_ReceivedPacket+0xf2>
    b064:	e149      	b.n	b2fa <MiMAC_ReceivedPacket+0x386>
    b066:	2a03      	cmp	r2, #3
    b068:	d100      	bne.n	b06c <MiMAC_ReceivedPacket+0xf8>
    b06a:	e13e      	b.n	b2ea <MiMAC_ReceivedPacket+0x376>
			MiMAC_DiscardPacket();
    b06c:	4b94      	ldr	r3, [pc, #592]	; (b2c0 <MiMAC_ReceivedPacket+0x34c>)
    b06e:	4798      	blx	r3
			return false;
    b070:	2000      	movs	r0, #0
    b072:	e798      	b.n	afa6 <MiMAC_ReceivedPacket+0x32>
			if (RxBuffer[BankIndex].Payload[5] == 0xFF && RxBuffer[BankIndex].Payload[6] == 0xFF)
    b074:	01d1      	lsls	r1, r2, #7
    b076:	1a89      	subs	r1, r1, r2
    b078:	4b8f      	ldr	r3, [pc, #572]	; (b2b8 <MiMAC_ReceivedPacket+0x344>)
    b07a:	185b      	adds	r3, r3, r1
    b07c:	799b      	ldrb	r3, [r3, #6]
    b07e:	2bff      	cmp	r3, #255	; 0xff
    b080:	d01c      	beq.n	b0bc <MiMAC_ReceivedPacket+0x148>
			MACRxPacket.flags.bits.sourcePrsnt = 1;
    b082:	498e      	ldr	r1, [pc, #568]	; (b2bc <MiMAC_ReceivedPacket+0x348>)
    b084:	780c      	ldrb	r4, [r1, #0]
    b086:	2380      	movs	r3, #128	; 0x80
    b088:	425b      	negs	r3, r3
    b08a:	4323      	orrs	r3, r4
    b08c:	700b      	strb	r3, [r1, #0]
			if (bIntraPAN) // check if it is intraPAN
    b08e:	2d00      	cmp	r5, #0
    b090:	d021      	beq.n	b0d6 <MiMAC_ReceivedPacket+0x162>
				MACRxPacket.SourcePANID.v[0] = RxBuffer[BankIndex].Payload[3];
    b092:	4c89      	ldr	r4, [pc, #548]	; (b2b8 <MiMAC_ReceivedPacket+0x344>)
    b094:	01c3      	lsls	r3, r0, #7
    b096:	1a18      	subs	r0, r3, r0
    b098:	1823      	adds	r3, r4, r0
    b09a:	791d      	ldrb	r5, [r3, #4]
    b09c:	740d      	strb	r5, [r1, #16]
				MACRxPacket.SourcePANID.v[1] = RxBuffer[BankIndex].Payload[4];
    b09e:	795b      	ldrb	r3, [r3, #5]
    b0a0:	744b      	strb	r3, [r1, #17]
    b0a2:	01d3      	lsls	r3, r2, #7
    b0a4:	1a9a      	subs	r2, r3, r2
				MACRxPacket.SourceAddress = &(RxBuffer[BankIndex].Payload[7]);
    b0a6:	0013      	movs	r3, r2
    b0a8:	3308      	adds	r3, #8
    b0aa:	191b      	adds	r3, r3, r4
    b0ac:	604b      	str	r3, [r1, #4]
				MACRxPacket.PayloadLen = RxBuffer[BankIndex].PayloadLen - 19;
    b0ae:	5d03      	ldrb	r3, [r0, r4]
    b0b0:	3b13      	subs	r3, #19
    b0b2:	730b      	strb	r3, [r1, #12]
				MACRxPacket.Payload = &(RxBuffer[BankIndex].Payload[15]);
    b0b4:	3210      	adds	r2, #16
    b0b6:	1912      	adds	r2, r2, r4
    b0b8:	608a      	str	r2, [r1, #8]
    b0ba:	e7c2      	b.n	b042 <MiMAC_ReceivedPacket+0xce>
			if (RxBuffer[BankIndex].Payload[5] == 0xFF && RxBuffer[BankIndex].Payload[6] == 0xFF)
    b0bc:	01d1      	lsls	r1, r2, #7
    b0be:	1a89      	subs	r1, r1, r2
    b0c0:	4b7d      	ldr	r3, [pc, #500]	; (b2b8 <MiMAC_ReceivedPacket+0x344>)
    b0c2:	185b      	adds	r3, r3, r1
    b0c4:	79db      	ldrb	r3, [r3, #7]
    b0c6:	2bff      	cmp	r3, #255	; 0xff
    b0c8:	d1db      	bne.n	b082 <MiMAC_ReceivedPacket+0x10e>
				MACRxPacket.flags.bits.broadcast = 1;
    b0ca:	497c      	ldr	r1, [pc, #496]	; (b2bc <MiMAC_ReceivedPacket+0x348>)
    b0cc:	780b      	ldrb	r3, [r1, #0]
    b0ce:	2404      	movs	r4, #4
    b0d0:	4323      	orrs	r3, r4
    b0d2:	700b      	strb	r3, [r1, #0]
    b0d4:	e7d5      	b.n	b082 <MiMAC_ReceivedPacket+0x10e>
				MACRxPacket.SourcePANID.v[0] = RxBuffer[BankIndex].Payload[7];
    b0d6:	4979      	ldr	r1, [pc, #484]	; (b2bc <MiMAC_ReceivedPacket+0x348>)
    b0d8:	4c77      	ldr	r4, [pc, #476]	; (b2b8 <MiMAC_ReceivedPacket+0x344>)
    b0da:	01c3      	lsls	r3, r0, #7
    b0dc:	1a18      	subs	r0, r3, r0
    b0de:	1823      	adds	r3, r4, r0
    b0e0:	7a1d      	ldrb	r5, [r3, #8]
    b0e2:	740d      	strb	r5, [r1, #16]
				MACRxPacket.SourcePANID.v[1] = RxBuffer[BankIndex].Payload[8];
    b0e4:	7a5b      	ldrb	r3, [r3, #9]
    b0e6:	744b      	strb	r3, [r1, #17]
    b0e8:	01d3      	lsls	r3, r2, #7
    b0ea:	1a9a      	subs	r2, r3, r2
				MACRxPacket.SourceAddress = &(RxBuffer[BankIndex].Payload[9]);
    b0ec:	0013      	movs	r3, r2
    b0ee:	330a      	adds	r3, #10
    b0f0:	191b      	adds	r3, r3, r4
    b0f2:	604b      	str	r3, [r1, #4]
				MACRxPacket.PayloadLen = RxBuffer[BankIndex].PayloadLen - 21;
    b0f4:	5d03      	ldrb	r3, [r0, r4]
    b0f6:	3b15      	subs	r3, #21
    b0f8:	730b      	strb	r3, [r1, #12]
				MACRxPacket.Payload = &(RxBuffer[BankIndex].Payload[17]);
    b0fa:	3212      	adds	r2, #18
    b0fc:	1912      	adds	r2, r2, r4
    b0fe:	608a      	str	r2, [r1, #8]
    b100:	e79f      	b.n	b042 <MiMAC_ReceivedPacket+0xce>
			MACRxPacket.flags.bits.sourcePrsnt = 1;
    b102:	496e      	ldr	r1, [pc, #440]	; (b2bc <MiMAC_ReceivedPacket+0x348>)
    b104:	780c      	ldrb	r4, [r1, #0]
    b106:	2380      	movs	r3, #128	; 0x80
    b108:	425b      	negs	r3, r3
    b10a:	4323      	orrs	r3, r4
    b10c:	700b      	strb	r3, [r1, #0]
			if (bIntraPAN) // check if it is intraPAN
    b10e:	2d00      	cmp	r5, #0
    b110:	d014      	beq.n	b13c <MiMAC_ReceivedPacket+0x1c8>
				MACRxPacket.SourcePANID.v[0] = RxBuffer[BankIndex].Payload[3];
    b112:	4c69      	ldr	r4, [pc, #420]	; (b2b8 <MiMAC_ReceivedPacket+0x344>)
    b114:	01d3      	lsls	r3, r2, #7
    b116:	1a98      	subs	r0, r3, r2
    b118:	1823      	adds	r3, r4, r0
    b11a:	791d      	ldrb	r5, [r3, #4]
    b11c:	740d      	strb	r5, [r1, #16]
				MACRxPacket.SourcePANID.v[1] = RxBuffer[BankIndex].Payload[4];
    b11e:	795b      	ldrb	r3, [r3, #5]
    b120:	744b      	strb	r3, [r1, #17]
    b122:	01d3      	lsls	r3, r2, #7
    b124:	1a9a      	subs	r2, r3, r2
				MACRxPacket.SourceAddress = &(RxBuffer[BankIndex].Payload[13]);
    b126:	0013      	movs	r3, r2
    b128:	330e      	adds	r3, #14
    b12a:	191b      	adds	r3, r3, r4
    b12c:	604b      	str	r3, [r1, #4]
				MACRxPacket.PayloadLen = RxBuffer[BankIndex].PayloadLen - 25;
    b12e:	5d03      	ldrb	r3, [r0, r4]
    b130:	3b19      	subs	r3, #25
    b132:	730b      	strb	r3, [r1, #12]
				MACRxPacket.Payload = &(RxBuffer[BankIndex].Payload[21]);
    b134:	3216      	adds	r2, #22
    b136:	1912      	adds	r2, r2, r4
    b138:	608a      	str	r2, [r1, #8]
    b13a:	e782      	b.n	b042 <MiMAC_ReceivedPacket+0xce>
				MACRxPacket.SourcePANID.v[0] = RxBuffer[BankIndex].Payload[13];
    b13c:	495f      	ldr	r1, [pc, #380]	; (b2bc <MiMAC_ReceivedPacket+0x348>)
    b13e:	4c5e      	ldr	r4, [pc, #376]	; (b2b8 <MiMAC_ReceivedPacket+0x344>)
    b140:	01d3      	lsls	r3, r2, #7
    b142:	1a98      	subs	r0, r3, r2
    b144:	1823      	adds	r3, r4, r0
    b146:	7b9d      	ldrb	r5, [r3, #14]
    b148:	740d      	strb	r5, [r1, #16]
				MACRxPacket.SourcePANID.v[1] = RxBuffer[BankIndex].Payload[14];
    b14a:	7bdb      	ldrb	r3, [r3, #15]
    b14c:	744b      	strb	r3, [r1, #17]
    b14e:	01d3      	lsls	r3, r2, #7
    b150:	1a9a      	subs	r2, r3, r2
				MACRxPacket.SourceAddress = &(RxBuffer[BankIndex].Payload[15]);
    b152:	0013      	movs	r3, r2
    b154:	3310      	adds	r3, #16
    b156:	191b      	adds	r3, r3, r4
    b158:	604b      	str	r3, [r1, #4]
				MACRxPacket.PayloadLen = RxBuffer[BankIndex].PayloadLen - 27;
    b15a:	5d03      	ldrb	r3, [r0, r4]
    b15c:	3b1b      	subs	r3, #27
    b15e:	730b      	strb	r3, [r1, #12]
				MACRxPacket.Payload = &(RxBuffer[BankIndex].Payload[23]);
    b160:	3218      	adds	r2, #24
    b162:	1912      	adds	r2, r2, r4
    b164:	608a      	str	r2, [r1, #8]
    b166:	e76c      	b.n	b042 <MiMAC_ReceivedPacket+0xce>
				if (RxBuffer[BankIndex].Payload[5] == 0xFF && RxBuffer[BankIndex].Payload[6] == 0xFF)
    b168:	01d1      	lsls	r1, r2, #7
    b16a:	1a89      	subs	r1, r1, r2
    b16c:	4b52      	ldr	r3, [pc, #328]	; (b2b8 <MiMAC_ReceivedPacket+0x344>)
    b16e:	185b      	adds	r3, r3, r1
    b170:	799b      	ldrb	r3, [r3, #6]
    b172:	2bff      	cmp	r3, #255	; 0xff
    b174:	d01f      	beq.n	b1b6 <MiMAC_ReceivedPacket+0x242>
				MACRxPacket.flags.bits.sourcePrsnt = 1;
    b176:	4b51      	ldr	r3, [pc, #324]	; (b2bc <MiMAC_ReceivedPacket+0x348>)
    b178:	781c      	ldrb	r4, [r3, #0]
    b17a:	2180      	movs	r1, #128	; 0x80
    b17c:	4249      	negs	r1, r1
    b17e:	4321      	orrs	r1, r4
    b180:	7019      	strb	r1, [r3, #0]
				MACRxPacket.altSourceAddress = true;
    b182:	2101      	movs	r1, #1
    b184:	73d9      	strb	r1, [r3, #15]
				if (bIntraPAN == false)
    b186:	2d00      	cmp	r5, #0
    b188:	d122      	bne.n	b1d0 <MiMAC_ReceivedPacket+0x25c>
					MACRxPacket.SourcePANID.v[0] = RxBuffer[BankIndex].Payload[7];
    b18a:	0019      	movs	r1, r3
    b18c:	4c4a      	ldr	r4, [pc, #296]	; (b2b8 <MiMAC_ReceivedPacket+0x344>)
    b18e:	01c3      	lsls	r3, r0, #7
    b190:	1a18      	subs	r0, r3, r0
    b192:	1823      	adds	r3, r4, r0
    b194:	7a1d      	ldrb	r5, [r3, #8]
    b196:	740d      	strb	r5, [r1, #16]
					MACRxPacket.SourcePANID.v[1] = RxBuffer[BankIndex].Payload[8];
    b198:	7a5b      	ldrb	r3, [r3, #9]
    b19a:	744b      	strb	r3, [r1, #17]
    b19c:	01d3      	lsls	r3, r2, #7
    b19e:	1a9a      	subs	r2, r3, r2
					MACRxPacket.SourceAddress = &(RxBuffer[BankIndex].Payload[9]);
    b1a0:	0013      	movs	r3, r2
    b1a2:	330a      	adds	r3, #10
    b1a4:	191b      	adds	r3, r3, r4
    b1a6:	604b      	str	r3, [r1, #4]
					MACRxPacket.PayloadLen = RxBuffer[BankIndex].PayloadLen - 15;
    b1a8:	5d03      	ldrb	r3, [r0, r4]
    b1aa:	3b0f      	subs	r3, #15
    b1ac:	730b      	strb	r3, [r1, #12]
					MACRxPacket.Payload = &(RxBuffer[BankIndex].Payload[11]);
    b1ae:	320c      	adds	r2, #12
    b1b0:	1912      	adds	r2, r2, r4
    b1b2:	608a      	str	r2, [r1, #8]
    b1b4:	e745      	b.n	b042 <MiMAC_ReceivedPacket+0xce>
				if (RxBuffer[BankIndex].Payload[5] == 0xFF && RxBuffer[BankIndex].Payload[6] == 0xFF)
    b1b6:	01d1      	lsls	r1, r2, #7
    b1b8:	1a89      	subs	r1, r1, r2
    b1ba:	4b3f      	ldr	r3, [pc, #252]	; (b2b8 <MiMAC_ReceivedPacket+0x344>)
    b1bc:	185b      	adds	r3, r3, r1
    b1be:	79db      	ldrb	r3, [r3, #7]
    b1c0:	2bff      	cmp	r3, #255	; 0xff
    b1c2:	d1d8      	bne.n	b176 <MiMAC_ReceivedPacket+0x202>
					MACRxPacket.flags.bits.broadcast = 1;
    b1c4:	493d      	ldr	r1, [pc, #244]	; (b2bc <MiMAC_ReceivedPacket+0x348>)
    b1c6:	780b      	ldrb	r3, [r1, #0]
    b1c8:	2404      	movs	r4, #4
    b1ca:	4323      	orrs	r3, r4
    b1cc:	700b      	strb	r3, [r1, #0]
    b1ce:	e7d2      	b.n	b176 <MiMAC_ReceivedPacket+0x202>
					MACRxPacket.SourcePANID.v[0] = RxBuffer[BankIndex].Payload[3];
    b1d0:	493a      	ldr	r1, [pc, #232]	; (b2bc <MiMAC_ReceivedPacket+0x348>)
    b1d2:	4c39      	ldr	r4, [pc, #228]	; (b2b8 <MiMAC_ReceivedPacket+0x344>)
    b1d4:	01c3      	lsls	r3, r0, #7
    b1d6:	1a18      	subs	r0, r3, r0
    b1d8:	1823      	adds	r3, r4, r0
    b1da:	791d      	ldrb	r5, [r3, #4]
    b1dc:	740d      	strb	r5, [r1, #16]
					MACRxPacket.SourcePANID.v[1] = RxBuffer[BankIndex].Payload[4];
    b1de:	795b      	ldrb	r3, [r3, #5]
    b1e0:	744b      	strb	r3, [r1, #17]
    b1e2:	01d3      	lsls	r3, r2, #7
    b1e4:	1a9a      	subs	r2, r3, r2
					MACRxPacket.SourceAddress = &(RxBuffer[BankIndex].Payload[7]);
    b1e6:	0013      	movs	r3, r2
    b1e8:	3308      	adds	r3, #8
    b1ea:	191b      	adds	r3, r3, r4
    b1ec:	604b      	str	r3, [r1, #4]
					MACRxPacket.PayloadLen = RxBuffer[BankIndex].PayloadLen - 13;
    b1ee:	5d03      	ldrb	r3, [r0, r4]
    b1f0:	3b0d      	subs	r3, #13
    b1f2:	730b      	strb	r3, [r1, #12]
					MACRxPacket.Payload = &(RxBuffer[BankIndex].Payload[9]);
    b1f4:	320a      	adds	r2, #10
    b1f6:	1912      	adds	r2, r2, r4
    b1f8:	608a      	str	r2, [r1, #8]
    b1fa:	e722      	b.n	b042 <MiMAC_ReceivedPacket+0xce>
				MACRxPacket.flags.bits.sourcePrsnt = 1;
    b1fc:	4b2f      	ldr	r3, [pc, #188]	; (b2bc <MiMAC_ReceivedPacket+0x348>)
    b1fe:	781c      	ldrb	r4, [r3, #0]
    b200:	2180      	movs	r1, #128	; 0x80
    b202:	4249      	negs	r1, r1
    b204:	4321      	orrs	r1, r4
    b206:	7019      	strb	r1, [r3, #0]
				MACRxPacket.altSourceAddress = true;
    b208:	2101      	movs	r1, #1
    b20a:	73d9      	strb	r1, [r3, #15]
				if (bIntraPAN) // check if it is intraPAN
    b20c:	2d00      	cmp	r5, #0
    b20e:	d015      	beq.n	b23c <MiMAC_ReceivedPacket+0x2c8>
					MACRxPacket.SourcePANID.v[0] = RxBuffer[BankIndex].Payload[3];
    b210:	0019      	movs	r1, r3
    b212:	4c29      	ldr	r4, [pc, #164]	; (b2b8 <MiMAC_ReceivedPacket+0x344>)
    b214:	01d3      	lsls	r3, r2, #7
    b216:	1a98      	subs	r0, r3, r2
    b218:	1823      	adds	r3, r4, r0
    b21a:	791d      	ldrb	r5, [r3, #4]
    b21c:	740d      	strb	r5, [r1, #16]
					MACRxPacket.SourcePANID.v[1] = RxBuffer[BankIndex].Payload[4];
    b21e:	795b      	ldrb	r3, [r3, #5]
    b220:	744b      	strb	r3, [r1, #17]
    b222:	01d3      	lsls	r3, r2, #7
    b224:	1a9a      	subs	r2, r3, r2
					MACRxPacket.SourceAddress = &(RxBuffer[BankIndex].Payload[13]);
    b226:	0013      	movs	r3, r2
    b228:	330e      	adds	r3, #14
    b22a:	191b      	adds	r3, r3, r4
    b22c:	604b      	str	r3, [r1, #4]
					MACRxPacket.PayloadLen = RxBuffer[BankIndex].PayloadLen - 19;
    b22e:	5d03      	ldrb	r3, [r0, r4]
    b230:	3b13      	subs	r3, #19
    b232:	730b      	strb	r3, [r1, #12]
					MACRxPacket.Payload = &(RxBuffer[BankIndex].Payload[15]);
    b234:	3210      	adds	r2, #16
    b236:	1912      	adds	r2, r2, r4
    b238:	608a      	str	r2, [r1, #8]
    b23a:	e702      	b.n	b042 <MiMAC_ReceivedPacket+0xce>
					MACRxPacket.SourcePANID.v[0] = RxBuffer[BankIndex].Payload[12];
    b23c:	491f      	ldr	r1, [pc, #124]	; (b2bc <MiMAC_ReceivedPacket+0x348>)
    b23e:	4c1e      	ldr	r4, [pc, #120]	; (b2b8 <MiMAC_ReceivedPacket+0x344>)
    b240:	01d3      	lsls	r3, r2, #7
    b242:	1a98      	subs	r0, r3, r2
    b244:	1823      	adds	r3, r4, r0
    b246:	7b5d      	ldrb	r5, [r3, #13]
    b248:	740d      	strb	r5, [r1, #16]
					MACRxPacket.SourcePANID.v[1] = RxBuffer[BankIndex].Payload[13];
    b24a:	7b9b      	ldrb	r3, [r3, #14]
    b24c:	744b      	strb	r3, [r1, #17]
    b24e:	01d3      	lsls	r3, r2, #7
    b250:	1a9a      	subs	r2, r3, r2
					MACRxPacket.SourceAddress = &(RxBuffer[BankIndex].Payload[14]);
    b252:	0013      	movs	r3, r2
    b254:	330f      	adds	r3, #15
    b256:	191b      	adds	r3, r3, r4
    b258:	604b      	str	r3, [r1, #4]
					MACRxPacket.PayloadLen = RxBuffer[BankIndex].PayloadLen - 21;
    b25a:	5d03      	ldrb	r3, [r0, r4]
    b25c:	3b15      	subs	r3, #21
    b25e:	730b      	strb	r3, [r1, #12]
					MACRxPacket.Payload = &(RxBuffer[BankIndex].Payload[17]);
    b260:	3212      	adds	r2, #18
    b262:	1912      	adds	r2, r2, r4
    b264:	608a      	str	r2, [r1, #8]
    b266:	e6ec      	b.n	b042 <MiMAC_ReceivedPacket+0xce>
				if (RxBuffer[BankIndex].Payload[5] == 0xFF && RxBuffer[BankIndex].Payload[6] == 0xFF)
    b268:	01d1      	lsls	r1, r2, #7
    b26a:	1a89      	subs	r1, r1, r2
    b26c:	4b12      	ldr	r3, [pc, #72]	; (b2b8 <MiMAC_ReceivedPacket+0x344>)
    b26e:	185b      	adds	r3, r3, r1
    b270:	799b      	ldrb	r3, [r3, #6]
    b272:	2bff      	cmp	r3, #255	; 0xff
    b274:	d00c      	beq.n	b290 <MiMAC_ReceivedPacket+0x31c>
				MACRxPacket.PayloadLen = RxBuffer[BankIndex].PayloadLen - 10;
    b276:	4911      	ldr	r1, [pc, #68]	; (b2bc <MiMAC_ReceivedPacket+0x348>)
    b278:	4c0f      	ldr	r4, [pc, #60]	; (b2b8 <MiMAC_ReceivedPacket+0x344>)
    b27a:	01c3      	lsls	r3, r0, #7
    b27c:	1a18      	subs	r0, r3, r0
    b27e:	5d03      	ldrb	r3, [r0, r4]
    b280:	3b0a      	subs	r3, #10
    b282:	730b      	strb	r3, [r1, #12]
				MACRxPacket.Payload = &(RxBuffer[BankIndex].Payload[7]);
    b284:	01d3      	lsls	r3, r2, #7
    b286:	1a9a      	subs	r2, r3, r2
    b288:	3208      	adds	r2, #8
    b28a:	1912      	adds	r2, r2, r4
    b28c:	608a      	str	r2, [r1, #8]
			break;
    b28e:	e6d8      	b.n	b042 <MiMAC_ReceivedPacket+0xce>
				if (RxBuffer[BankIndex].Payload[5] == 0xFF && RxBuffer[BankIndex].Payload[6] == 0xFF)
    b290:	01d1      	lsls	r1, r2, #7
    b292:	1a89      	subs	r1, r1, r2
    b294:	4b08      	ldr	r3, [pc, #32]	; (b2b8 <MiMAC_ReceivedPacket+0x344>)
    b296:	185b      	adds	r3, r3, r1
    b298:	79db      	ldrb	r3, [r3, #7]
    b29a:	2bff      	cmp	r3, #255	; 0xff
    b29c:	d1eb      	bne.n	b276 <MiMAC_ReceivedPacket+0x302>
					MACRxPacket.flags.bits.broadcast = 1;
    b29e:	4907      	ldr	r1, [pc, #28]	; (b2bc <MiMAC_ReceivedPacket+0x348>)
    b2a0:	780b      	ldrb	r3, [r1, #0]
    b2a2:	2404      	movs	r4, #4
    b2a4:	4323      	orrs	r3, r4
    b2a6:	700b      	strb	r3, [r1, #0]
    b2a8:	e7e5      	b.n	b276 <MiMAC_ReceivedPacket+0x302>
			MiMAC_DiscardPacket();
    b2aa:	4b05      	ldr	r3, [pc, #20]	; (b2c0 <MiMAC_ReceivedPacket+0x34c>)
    b2ac:	4798      	blx	r3
			return false;
    b2ae:	2000      	movs	r0, #0
    b2b0:	e679      	b.n	afa6 <MiMAC_ReceivedPacket+0x32>
    b2b2:	46c0      	nop			; (mov r8, r8)
    b2b4:	2000000a 	.word	0x2000000a
    b2b8:	20001e80 	.word	0x20001e80
    b2bc:	20002894 	.word	0x20002894
    b2c0:	0000af59 	.word	0x0000af59
			MACRxPacket.flags.bits.packetType = PACKET_TYPE_DATA;
    b2c4:	4912      	ldr	r1, [pc, #72]	; (b310 <MiMAC_ReceivedPacket+0x39c>)
    b2c6:	780a      	ldrb	r2, [r1, #0]
    b2c8:	2003      	movs	r0, #3
    b2ca:	4382      	bics	r2, r0
    b2cc:	700a      	strb	r2, [r1, #0]
		MACRxPacket.LQIValue = RxBuffer[BankIndex].Payload[RxBuffer[BankIndex].PayloadLen - 2];
    b2ce:	4a11      	ldr	r2, [pc, #68]	; (b314 <MiMAC_ReceivedPacket+0x3a0>)
    b2d0:	01d9      	lsls	r1, r3, #7
    b2d2:	1acb      	subs	r3, r1, r3
    b2d4:	5c98      	ldrb	r0, [r3, r2]
    b2d6:	490e      	ldr	r1, [pc, #56]	; (b310 <MiMAC_ReceivedPacket+0x39c>)
    b2d8:	18d3      	adds	r3, r2, r3
    b2da:	181a      	adds	r2, r3, r0
    b2dc:	3a01      	subs	r2, #1
    b2de:	7812      	ldrb	r2, [r2, #0]
    b2e0:	738a      	strb	r2, [r1, #14]
		MACRxPacket.RSSIValue = RxBuffer[BankIndex].Payload[RxBuffer[BankIndex].PayloadLen - 1];
    b2e2:	5c1b      	ldrb	r3, [r3, r0]
    b2e4:	734b      	strb	r3, [r1, #13]
		return true;
    b2e6:	2001      	movs	r0, #1
    b2e8:	e65d      	b.n	afa6 <MiMAC_ReceivedPacket+0x32>
			MACRxPacket.flags.bits.packetType = PACKET_TYPE_COMMAND;
    b2ea:	4909      	ldr	r1, [pc, #36]	; (b310 <MiMAC_ReceivedPacket+0x39c>)
    b2ec:	780a      	ldrb	r2, [r1, #0]
    b2ee:	2003      	movs	r0, #3
    b2f0:	4382      	bics	r2, r0
    b2f2:	2001      	movs	r0, #1
    b2f4:	4302      	orrs	r2, r0
    b2f6:	700a      	strb	r2, [r1, #0]
			break;
    b2f8:	e7e9      	b.n	b2ce <MiMAC_ReceivedPacket+0x35a>
			MACRxPacket.flags.bits.packetType = PACKET_TYPE_RESERVE;
    b2fa:	4905      	ldr	r1, [pc, #20]	; (b310 <MiMAC_ReceivedPacket+0x39c>)
    b2fc:	780a      	ldrb	r2, [r1, #0]
    b2fe:	2003      	movs	r0, #3
    b300:	4302      	orrs	r2, r0
    b302:	700a      	strb	r2, [r1, #0]
			break;
    b304:	e7e3      	b.n	b2ce <MiMAC_ReceivedPacket+0x35a>
			BankIndex = i;
    b306:	2200      	movs	r2, #0
    b308:	4b03      	ldr	r3, [pc, #12]	; (b318 <MiMAC_ReceivedPacket+0x3a4>)
    b30a:	701a      	strb	r2, [r3, #0]
    b30c:	e652      	b.n	afb4 <MiMAC_ReceivedPacket+0x40>
    b30e:	46c0      	nop			; (mov r8, r8)
    b310:	20002894 	.word	0x20002894
    b314:	20001e80 	.word	0x20001e80
    b318:	2000000a 	.word	0x2000000a

0000b31c <MiMAC_SymbolToTicks>:
	return SYMBOLS_TO_TICKS(symbols);
    b31c:	0100      	lsls	r0, r0, #4
}
    b31e:	4770      	bx	lr

0000b320 <MiMAC_GetPHYChannelInfo>:
}
    b320:	4800      	ldr	r0, [pc, #0]	; (b324 <MiMAC_GetPHYChannelInfo+0x4>)
    b322:	4770      	bx	lr
    b324:	07fff800 	.word	0x07fff800

0000b328 <MiMAC_Task>:

void MiMAC_Task(void)
{
    b328:	b510      	push	{r4, lr}
  PHY_TaskHandler();
    b32a:	4b0b      	ldr	r3, [pc, #44]	; (b358 <MiMAC_Task+0x30>)
    b32c:	4798      	blx	r3
  if(dataConfCallback && dataConfAvailable)
    b32e:	4b0b      	ldr	r3, [pc, #44]	; (b35c <MiMAC_Task+0x34>)
    b330:	681b      	ldr	r3, [r3, #0]
    b332:	2b00      	cmp	r3, #0
    b334:	d003      	beq.n	b33e <MiMAC_Task+0x16>
    b336:	4a0a      	ldr	r2, [pc, #40]	; (b360 <MiMAC_Task+0x38>)
    b338:	7812      	ldrb	r2, [r2, #0]
    b33a:	2a00      	cmp	r2, #0
    b33c:	d100      	bne.n	b340 <MiMAC_Task+0x18>
  {
	  dataConfCallback(dataHandle, dataStatus, dataPointer);
	  dataConfAvailable = false;
  }
}
    b33e:	bd10      	pop	{r4, pc}
	  dataConfCallback(dataHandle, dataStatus, dataPointer);
    b340:	4a08      	ldr	r2, [pc, #32]	; (b364 <MiMAC_Task+0x3c>)
    b342:	6812      	ldr	r2, [r2, #0]
    b344:	4908      	ldr	r1, [pc, #32]	; (b368 <MiMAC_Task+0x40>)
    b346:	7809      	ldrb	r1, [r1, #0]
    b348:	4808      	ldr	r0, [pc, #32]	; (b36c <MiMAC_Task+0x44>)
    b34a:	7800      	ldrb	r0, [r0, #0]
    b34c:	4798      	blx	r3
	  dataConfAvailable = false;
    b34e:	2200      	movs	r2, #0
    b350:	4b03      	ldr	r3, [pc, #12]	; (b360 <MiMAC_Task+0x38>)
    b352:	701a      	strb	r2, [r3, #0]
}
    b354:	e7f3      	b.n	b33e <MiMAC_Task+0x16>
    b356:	46c0      	nop			; (mov r8, r8)
    b358:	0000b691 	.word	0x0000b691
    b35c:	200003e0 	.word	0x200003e0
    b360:	200003dc 	.word	0x200003dc
    b364:	200003e8 	.word	0x200003e8
    b368:	20001e5c 	.word	0x20001e5c
    b36c:	200003e4 	.word	0x200003e4

0000b370 <phyTrxSetState>:
}

/*************************************************************************//**
*****************************************************************************/
static void phyTrxSetState(uint8_t state)
{
    b370:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    b372:	0004      	movs	r4, r0
    if (PHY_STATE_SLEEP == phyState)
    b374:	4b0f      	ldr	r3, [pc, #60]	; (b3b4 <phyTrxSetState+0x44>)
    b376:	781b      	ldrb	r3, [r3, #0]
    b378:	2b02      	cmp	r3, #2
    b37a:	d016      	beq.n	b3aa <phyTrxSetState+0x3a>
	trx_reg_write(reg, value);
    b37c:	4f0e      	ldr	r7, [pc, #56]	; (b3b8 <phyTrxSetState+0x48>)
	value = trx_reg_read(reg);
    b37e:	4e0f      	ldr	r6, [pc, #60]	; (b3bc <phyTrxSetState+0x4c>)
	{
		TRX_SLP_TR_LOW();
	}
	do { phyWriteRegister(TRX_STATE_REG, TRX_CMD_FORCE_TRX_OFF);
	} while (TRX_STATUS_TRX_OFF !=
			(phyReadRegister(TRX_STATUS_REG) & TRX_STATUS_MASK));
    b380:	251f      	movs	r5, #31
	trx_reg_write(reg, value);
    b382:	2103      	movs	r1, #3
    b384:	2002      	movs	r0, #2
    b386:	47b8      	blx	r7
	value = trx_reg_read(reg);
    b388:	2001      	movs	r0, #1
    b38a:	47b0      	blx	r6
			(phyReadRegister(TRX_STATUS_REG) & TRX_STATUS_MASK));
    b38c:	4028      	ands	r0, r5
    b38e:	2808      	cmp	r0, #8
    b390:	d1f7      	bne.n	b382 <phyTrxSetState+0x12>
	trx_reg_write(reg, value);
    b392:	4f09      	ldr	r7, [pc, #36]	; (b3b8 <phyTrxSetState+0x48>)
	value = trx_reg_read(reg);
    b394:	4e09      	ldr	r6, [pc, #36]	; (b3bc <phyTrxSetState+0x4c>)

	do { phyWriteRegister(TRX_STATE_REG,
			     state); } while (state !=
			(phyReadRegister(TRX_STATUS_REG) & TRX_STATUS_MASK));
    b396:	251f      	movs	r5, #31
	trx_reg_write(reg, value);
    b398:	0021      	movs	r1, r4
    b39a:	2002      	movs	r0, #2
    b39c:	47b8      	blx	r7
	value = trx_reg_read(reg);
    b39e:	2001      	movs	r0, #1
    b3a0:	47b0      	blx	r6
			(phyReadRegister(TRX_STATUS_REG) & TRX_STATUS_MASK));
    b3a2:	4028      	ands	r0, r5
    b3a4:	4284      	cmp	r4, r0
    b3a6:	d1f7      	bne.n	b398 <phyTrxSetState+0x28>
}
    b3a8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		port_base->OUTCLR.reg = pin_mask;
    b3aa:	2280      	movs	r2, #128	; 0x80
    b3ac:	0352      	lsls	r2, r2, #13
    b3ae:	4b04      	ldr	r3, [pc, #16]	; (b3c0 <phyTrxSetState+0x50>)
    b3b0:	615a      	str	r2, [r3, #20]
    b3b2:	e7e3      	b.n	b37c <phyTrxSetState+0xc>
    b3b4:	2000046d 	.word	0x2000046d
    b3b8:	0000c8a5 	.word	0x0000c8a5
    b3bc:	0000c7a9 	.word	0x0000c7a9
    b3c0:	41004400 	.word	0x41004400

0000b3c4 <phySetRxState>:
{
    b3c4:	b510      	push	{r4, lr}
	phyTrxSetState(TRX_CMD_TRX_OFF);
    b3c6:	2008      	movs	r0, #8
    b3c8:	4b08      	ldr	r3, [pc, #32]	; (b3ec <phySetRxState+0x28>)
    b3ca:	4798      	blx	r3
	value = trx_reg_read(reg);
    b3cc:	200f      	movs	r0, #15
    b3ce:	4b08      	ldr	r3, [pc, #32]	; (b3f0 <phySetRxState+0x2c>)
    b3d0:	4798      	blx	r3
	if (phyRxState) {
    b3d2:	4b08      	ldr	r3, [pc, #32]	; (b3f4 <phySetRxState+0x30>)
    b3d4:	781b      	ldrb	r3, [r3, #0]
    b3d6:	2b00      	cmp	r3, #0
    b3d8:	d100      	bne.n	b3dc <phySetRxState+0x18>
}
    b3da:	bd10      	pop	{r4, pc}
		phyTrxSetState(TRX_CMD_RX_AACK_ON);
    b3dc:	2016      	movs	r0, #22
    b3de:	4b03      	ldr	r3, [pc, #12]	; (b3ec <phySetRxState+0x28>)
    b3e0:	4798      	blx	r3
		phyState = PHY_STATE_IDLE;
    b3e2:	2201      	movs	r2, #1
    b3e4:	4b04      	ldr	r3, [pc, #16]	; (b3f8 <phySetRxState+0x34>)
    b3e6:	701a      	strb	r2, [r3, #0]
}
    b3e8:	e7f7      	b.n	b3da <phySetRxState+0x16>
    b3ea:	46c0      	nop			; (mov r8, r8)
    b3ec:	0000b371 	.word	0x0000b371
    b3f0:	0000c7a9 	.word	0x0000c7a9
    b3f4:	2000046c 	.word	0x2000046c
    b3f8:	2000046d 	.word	0x2000046d

0000b3fc <PHY_DataReq>:
{
    b3fc:	b570      	push	{r4, r5, r6, lr}
    b3fe:	0005      	movs	r5, r0
    phyDataRequestPtr = (PhyTxFrame_t *) MiMem_Alloc(sizeof(PhyTxFrame_t));
    b400:	2010      	movs	r0, #16
    b402:	4b09      	ldr	r3, [pc, #36]	; (b428 <PHY_DataReq+0x2c>)
    b404:	4798      	blx	r3
    b406:	1e04      	subs	r4, r0, #0
    if (NULL == phyDataRequestPtr)
    b408:	d009      	beq.n	b41e <PHY_DataReq+0x22>
	memcpy(&phyDataRequestPtr->phyDataReq, phyDataReq, sizeof(PHY_DataReq_t));
    b40a:	3004      	adds	r0, #4
    b40c:	220c      	movs	r2, #12
    b40e:	0029      	movs	r1, r5
    b410:	4b06      	ldr	r3, [pc, #24]	; (b42c <PHY_DataReq+0x30>)
    b412:	4798      	blx	r3
	miQueueAppend(&phyTxQueue, (miQueueBuffer_t *)phyDataRequestPtr);
    b414:	0021      	movs	r1, r4
    b416:	4806      	ldr	r0, [pc, #24]	; (b430 <PHY_DataReq+0x34>)
    b418:	4b06      	ldr	r3, [pc, #24]	; (b434 <PHY_DataReq+0x38>)
    b41a:	4798      	blx	r3
}
    b41c:	bd70      	pop	{r4, r5, r6, pc}
        phyDataReq->confirmCallback(PHY_STATUS_ERROR);
    b41e:	68ab      	ldr	r3, [r5, #8]
    b420:	2001      	movs	r0, #1
    b422:	4798      	blx	r3
        return;
    b424:	e7fa      	b.n	b41c <PHY_DataReq+0x20>
    b426:	46c0      	nop			; (mov r8, r8)
    b428:	0000bc11 	.word	0x0000bc11
    b42c:	00014cdf 	.word	0x00014cdf
    b430:	20001e74 	.word	0x20001e74
    b434:	0000be0d 	.word	0x0000be0d

0000b438 <PHY_TxHandler>:
{
    b438:	b510      	push	{r4, lr}
	if (phyTxQueue.size && ((phyState == PHY_STATE_IDLE) || (phyState == PHY_STATE_SLEEP)))
    b43a:	4b1e      	ldr	r3, [pc, #120]	; (b4b4 <PHY_TxHandler+0x7c>)
    b43c:	7a1b      	ldrb	r3, [r3, #8]
    b43e:	2b00      	cmp	r3, #0
    b440:	d004      	beq.n	b44c <PHY_TxHandler+0x14>
    b442:	4b1d      	ldr	r3, [pc, #116]	; (b4b8 <PHY_TxHandler+0x80>)
    b444:	781b      	ldrb	r3, [r3, #0]
    b446:	3b01      	subs	r3, #1
    b448:	2b01      	cmp	r3, #1
    b44a:	d900      	bls.n	b44e <PHY_TxHandler+0x16>
}
    b44c:	bd10      	pop	{r4, pc}
        phyTxPtr =  (PhyTxFrame_t *)miQueueRemove(&phyTxQueue, NULL);
    b44e:	2100      	movs	r1, #0
    b450:	4818      	ldr	r0, [pc, #96]	; (b4b4 <PHY_TxHandler+0x7c>)
    b452:	4b1a      	ldr	r3, [pc, #104]	; (b4bc <PHY_TxHandler+0x84>)
    b454:	4798      	blx	r3
    b456:	1e04      	subs	r4, r0, #0
        if (NULL != phyTxPtr)
    b458:	d0f8      	beq.n	b44c <PHY_TxHandler+0x14>
			if (phyTxPtr->phyDataReq.data[0] > MAX_PSDU)
    b45a:	6883      	ldr	r3, [r0, #8]
    b45c:	781b      	ldrb	r3, [r3, #0]
    b45e:	2b7f      	cmp	r3, #127	; 0x7f
    b460:	d823      	bhi.n	b4aa <PHY_TxHandler+0x72>
			gPhyDataReq.polledConfirmation = phyTxPtr->phyDataReq.polledConfirmation;
    b462:	4b17      	ldr	r3, [pc, #92]	; (b4c0 <PHY_TxHandler+0x88>)
    b464:	7902      	ldrb	r2, [r0, #4]
    b466:	701a      	strb	r2, [r3, #0]
			gPhyDataReq.confirmCallback = phyTxPtr->phyDataReq.confirmCallback;
    b468:	68c2      	ldr	r2, [r0, #12]
    b46a:	609a      	str	r2, [r3, #8]
			phyTrxSetState(TRX_CMD_TX_ARET_ON);
    b46c:	2019      	movs	r0, #25
    b46e:	4b15      	ldr	r3, [pc, #84]	; (b4c4 <PHY_TxHandler+0x8c>)
    b470:	4798      	blx	r3
	value = trx_reg_read(reg);
    b472:	200f      	movs	r0, #15
    b474:	4b14      	ldr	r3, [pc, #80]	; (b4c8 <PHY_TxHandler+0x90>)
    b476:	4798      	blx	r3
			phyTxPtr->phyDataReq.data[0] += 2;// 2
    b478:	68a2      	ldr	r2, [r4, #8]
    b47a:	7813      	ldrb	r3, [r2, #0]
    b47c:	3302      	adds	r3, #2
    b47e:	7013      	strb	r3, [r2, #0]
			trx_frame_write(&phyTxPtr->phyDataReq.data[0], (phyTxPtr->phyDataReq.data[0]-1 ) /* length value*/);
    b480:	68a3      	ldr	r3, [r4, #8]
    b482:	7819      	ldrb	r1, [r3, #0]
    b484:	3901      	subs	r1, #1
    b486:	b2c9      	uxtb	r1, r1
    b488:	0018      	movs	r0, r3
    b48a:	4b10      	ldr	r3, [pc, #64]	; (b4cc <PHY_TxHandler+0x94>)
    b48c:	4798      	blx	r3
			phyState = PHY_STATE_TX_WAIT_END;
    b48e:	2203      	movs	r2, #3
    b490:	4b09      	ldr	r3, [pc, #36]	; (b4b8 <PHY_TxHandler+0x80>)
    b492:	701a      	strb	r2, [r3, #0]
		port_base->OUTSET.reg = pin_mask;
    b494:	4b0e      	ldr	r3, [pc, #56]	; (b4d0 <PHY_TxHandler+0x98>)
    b496:	2280      	movs	r2, #128	; 0x80
    b498:	0352      	lsls	r2, r2, #13
    b49a:	619a      	str	r2, [r3, #24]
			TRX_TRIG_DELAY();
    b49c:	46c0      	nop			; (mov r8, r8)
    b49e:	46c0      	nop			; (mov r8, r8)
		port_base->OUTCLR.reg = pin_mask;
    b4a0:	615a      	str	r2, [r3, #20]
		    MiMem_Free((uint8_t *)phyTxPtr);
    b4a2:	0020      	movs	r0, r4
    b4a4:	4b0b      	ldr	r3, [pc, #44]	; (b4d4 <PHY_TxHandler+0x9c>)
    b4a6:	4798      	blx	r3
    b4a8:	e7d0      	b.n	b44c <PHY_TxHandler+0x14>
				phyTxPtr->phyDataReq.confirmCallback(PHY_STATUS_ERROR);
    b4aa:	68c3      	ldr	r3, [r0, #12]
    b4ac:	2001      	movs	r0, #1
    b4ae:	4798      	blx	r3
				return;
    b4b0:	e7cc      	b.n	b44c <PHY_TxHandler+0x14>
    b4b2:	46c0      	nop			; (mov r8, r8)
    b4b4:	20001e74 	.word	0x20001e74
    b4b8:	2000046d 	.word	0x2000046d
    b4bc:	0000be45 	.word	0x0000be45
    b4c0:	20001e68 	.word	0x20001e68
    b4c4:	0000b371 	.word	0x0000b371
    b4c8:	0000c7a9 	.word	0x0000c7a9
    b4cc:	0000cad5 	.word	0x0000cad5
    b4d0:	41004400 	.word	0x41004400
    b4d4:	0000bccd 	.word	0x0000bccd

0000b4d8 <PHY_RandomReq>:
{
    b4d8:	b5f0      	push	{r4, r5, r6, r7, lr}
    b4da:	46c6      	mov	lr, r8
    b4dc:	b500      	push	{lr}
	phyTrxSetState(TRX_CMD_RX_ON);
    b4de:	2006      	movs	r0, #6
    b4e0:	4b0d      	ldr	r3, [pc, #52]	; (b518 <PHY_RandomReq+0x40>)
    b4e2:	4798      	blx	r3
    b4e4:	2400      	movs	r4, #0
	uint16_t rnd = 0;
    b4e6:	2500      	movs	r5, #0
		delay_cycles_us(1);
    b4e8:	4f0c      	ldr	r7, [pc, #48]	; (b51c <PHY_RandomReq+0x44>)
	value = trx_reg_read(reg);
    b4ea:	4e0d      	ldr	r6, [pc, #52]	; (b520 <PHY_RandomReq+0x48>)
		rndValue = (phyReadRegister(PHY_RSSI_REG) >> RND_VALUE) & 3;
    b4ec:	2303      	movs	r3, #3
    b4ee:	4698      	mov	r8, r3
		delay_cycles_us(1);
    b4f0:	2001      	movs	r0, #1
    b4f2:	47b8      	blx	r7
	value = trx_reg_read(reg);
    b4f4:	2006      	movs	r0, #6
    b4f6:	47b0      	blx	r6
		rndValue = (phyReadRegister(PHY_RSSI_REG) >> RND_VALUE) & 3;
    b4f8:	0940      	lsrs	r0, r0, #5
		rnd |= rndValue << i;
    b4fa:	4643      	mov	r3, r8
    b4fc:	4018      	ands	r0, r3
    b4fe:	40a0      	lsls	r0, r4
    b500:	4305      	orrs	r5, r0
    b502:	b2ad      	uxth	r5, r5
    b504:	3402      	adds	r4, #2
	for (uint8_t i = 0; i < 16; i += 2) {
    b506:	2c10      	cmp	r4, #16
    b508:	d1f2      	bne.n	b4f0 <PHY_RandomReq+0x18>
	phySetRxState();
    b50a:	4b06      	ldr	r3, [pc, #24]	; (b524 <PHY_RandomReq+0x4c>)
    b50c:	4798      	blx	r3
}
    b50e:	0028      	movs	r0, r5
    b510:	bc04      	pop	{r2}
    b512:	4690      	mov	r8, r2
    b514:	bdf0      	pop	{r4, r5, r6, r7, pc}
    b516:	46c0      	nop			; (mov r8, r8)
    b518:	0000b371 	.word	0x0000b371
    b51c:	000064c9 	.word	0x000064c9
    b520:	0000c7a9 	.word	0x0000c7a9
    b524:	0000b3c5 	.word	0x0000b3c5

0000b528 <PHY_Init>:
{
    b528:	b570      	push	{r4, r5, r6, lr}
	trx_spi_init();
    b52a:	4b0e      	ldr	r3, [pc, #56]	; (b564 <PHY_Init+0x3c>)
    b52c:	4798      	blx	r3
	PhyReset();
    b52e:	4b0e      	ldr	r3, [pc, #56]	; (b568 <PHY_Init+0x40>)
    b530:	4798      	blx	r3
	phyRxState = false;
    b532:	2200      	movs	r2, #0
    b534:	4b0d      	ldr	r3, [pc, #52]	; (b56c <PHY_Init+0x44>)
    b536:	701a      	strb	r2, [r3, #0]
	phyState = PHY_STATE_IDLE;
    b538:	3201      	adds	r2, #1
    b53a:	4b0d      	ldr	r3, [pc, #52]	; (b570 <PHY_Init+0x48>)
    b53c:	701a      	strb	r2, [r3, #0]
	trx_reg_write(reg, value);
    b53e:	4e0d      	ldr	r6, [pc, #52]	; (b574 <PHY_Init+0x4c>)
	value = trx_reg_read(reg);
    b540:	4d0d      	ldr	r5, [pc, #52]	; (b578 <PHY_Init+0x50>)
	(phyReadRegister(TRX_STATUS_REG) & TRX_STATUS_MASK));
    b542:	241f      	movs	r4, #31
	trx_reg_write(reg, value);
    b544:	2108      	movs	r1, #8
    b546:	2002      	movs	r0, #2
    b548:	47b0      	blx	r6
	value = trx_reg_read(reg);
    b54a:	2001      	movs	r0, #1
    b54c:	47a8      	blx	r5
	(phyReadRegister(TRX_STATUS_REG) & TRX_STATUS_MASK));
    b54e:	4020      	ands	r0, r4
    b550:	2808      	cmp	r0, #8
    b552:	d1f7      	bne.n	b544 <PHY_Init+0x1c>
	trx_reg_write(reg, value);
    b554:	212e      	movs	r1, #46	; 0x2e
    b556:	3804      	subs	r0, #4
    b558:	4c06      	ldr	r4, [pc, #24]	; (b574 <PHY_Init+0x4c>)
    b55a:	47a0      	blx	r4
    b55c:	21a0      	movs	r1, #160	; 0xa0
    b55e:	200c      	movs	r0, #12
    b560:	47a0      	blx	r4
}
    b562:	bd70      	pop	{r4, r5, r6, pc}
    b564:	0000c65d 	.word	0x0000c65d
    b568:	0000c779 	.word	0x0000c779
    b56c:	2000046c 	.word	0x2000046c
    b570:	2000046d 	.word	0x2000046d
    b574:	0000c8a5 	.word	0x0000c8a5
    b578:	0000c7a9 	.word	0x0000c7a9

0000b57c <PHY_SetRxState>:
{
    b57c:	b510      	push	{r4, lr}
	phyRxState = rx;
    b57e:	4b02      	ldr	r3, [pc, #8]	; (b588 <PHY_SetRxState+0xc>)
    b580:	7018      	strb	r0, [r3, #0]
	phySetRxState();
    b582:	4b02      	ldr	r3, [pc, #8]	; (b58c <PHY_SetRxState+0x10>)
    b584:	4798      	blx	r3
}
    b586:	bd10      	pop	{r4, pc}
    b588:	2000046c 	.word	0x2000046c
    b58c:	0000b3c5 	.word	0x0000b3c5

0000b590 <PHY_SetPanId>:
{
    b590:	b530      	push	{r4, r5, lr}
    b592:	b083      	sub	sp, #12
    b594:	466b      	mov	r3, sp
    b596:	1d9d      	adds	r5, r3, #6
    b598:	80d8      	strh	r0, [r3, #6]
	trx_reg_write(reg, value);
    b59a:	b2c1      	uxtb	r1, r0
    b59c:	2022      	movs	r0, #34	; 0x22
    b59e:	4c03      	ldr	r4, [pc, #12]	; (b5ac <PHY_SetPanId+0x1c>)
    b5a0:	47a0      	blx	r4
    b5a2:	7869      	ldrb	r1, [r5, #1]
    b5a4:	2023      	movs	r0, #35	; 0x23
    b5a6:	47a0      	blx	r4
}
    b5a8:	b003      	add	sp, #12
    b5aa:	bd30      	pop	{r4, r5, pc}
    b5ac:	0000c8a5 	.word	0x0000c8a5

0000b5b0 <PHY_SetShortAddr>:
{
    b5b0:	b570      	push	{r4, r5, r6, lr}
    b5b2:	b082      	sub	sp, #8
    b5b4:	466b      	mov	r3, sp
    b5b6:	1d9e      	adds	r6, r3, #6
    b5b8:	80d8      	strh	r0, [r3, #6]
	phyWriteRegister(SHORT_ADDR_0_REG, d[0]);
    b5ba:	b2c4      	uxtb	r4, r0
	trx_reg_write(reg, value);
    b5bc:	0021      	movs	r1, r4
    b5be:	2020      	movs	r0, #32
    b5c0:	4d05      	ldr	r5, [pc, #20]	; (b5d8 <PHY_SetShortAddr+0x28>)
    b5c2:	47a8      	blx	r5
	phyWriteRegister(SHORT_ADDR_1_REG, d[1]);
    b5c4:	7876      	ldrb	r6, [r6, #1]
	trx_reg_write(reg, value);
    b5c6:	0031      	movs	r1, r6
    b5c8:	2021      	movs	r0, #33	; 0x21
    b5ca:	47a8      	blx	r5
	phyWriteRegister(CSMA_SEED_0_REG, d[0] + d[1]);
    b5cc:	19a4      	adds	r4, r4, r6
	trx_reg_write(reg, value);
    b5ce:	b2e1      	uxtb	r1, r4
    b5d0:	202d      	movs	r0, #45	; 0x2d
    b5d2:	47a8      	blx	r5
}
    b5d4:	b002      	add	sp, #8
    b5d6:	bd70      	pop	{r4, r5, r6, pc}
    b5d8:	0000c8a5 	.word	0x0000c8a5

0000b5dc <PHY_Sleep>:
{
    b5dc:	b510      	push	{r4, lr}
	if (PHY_STATE_SLEEP != phyState)
    b5de:	4b07      	ldr	r3, [pc, #28]	; (b5fc <PHY_Sleep+0x20>)
    b5e0:	781b      	ldrb	r3, [r3, #0]
    b5e2:	2b02      	cmp	r3, #2
    b5e4:	d009      	beq.n	b5fa <PHY_Sleep+0x1e>
		phyTrxSetState(TRX_CMD_TRX_OFF);
    b5e6:	2008      	movs	r0, #8
    b5e8:	4b05      	ldr	r3, [pc, #20]	; (b600 <PHY_Sleep+0x24>)
    b5ea:	4798      	blx	r3
		port_base->OUTSET.reg = pin_mask;
    b5ec:	2280      	movs	r2, #128	; 0x80
    b5ee:	0352      	lsls	r2, r2, #13
    b5f0:	4b04      	ldr	r3, [pc, #16]	; (b604 <PHY_Sleep+0x28>)
    b5f2:	619a      	str	r2, [r3, #24]
		phyState = PHY_STATE_SLEEP;	
    b5f4:	2202      	movs	r2, #2
    b5f6:	4b01      	ldr	r3, [pc, #4]	; (b5fc <PHY_Sleep+0x20>)
    b5f8:	701a      	strb	r2, [r3, #0]
}
    b5fa:	bd10      	pop	{r4, pc}
    b5fc:	2000046d 	.word	0x2000046d
    b600:	0000b371 	.word	0x0000b371
    b604:	41004400 	.word	0x41004400

0000b608 <PHY_Wakeup>:
{
    b608:	b510      	push	{r4, lr}
	if (PHY_STATE_SLEEP == phyState)
    b60a:	4b07      	ldr	r3, [pc, #28]	; (b628 <PHY_Wakeup+0x20>)
    b60c:	781b      	ldrb	r3, [r3, #0]
    b60e:	2b02      	cmp	r3, #2
    b610:	d000      	beq.n	b614 <PHY_Wakeup+0xc>
}
    b612:	bd10      	pop	{r4, pc}
		port_base->OUTCLR.reg = pin_mask;
    b614:	2280      	movs	r2, #128	; 0x80
    b616:	0352      	lsls	r2, r2, #13
    b618:	4b04      	ldr	r3, [pc, #16]	; (b62c <PHY_Wakeup+0x24>)
    b61a:	615a      	str	r2, [r3, #20]
	 	phySetRxState();
    b61c:	4b04      	ldr	r3, [pc, #16]	; (b630 <PHY_Wakeup+0x28>)
    b61e:	4798      	blx	r3
	 	phyState = PHY_STATE_IDLE;
    b620:	2201      	movs	r2, #1
    b622:	4b01      	ldr	r3, [pc, #4]	; (b628 <PHY_Wakeup+0x20>)
    b624:	701a      	strb	r2, [r3, #0]
}
    b626:	e7f4      	b.n	b612 <PHY_Wakeup+0xa>
    b628:	2000046d 	.word	0x2000046d
    b62c:	41004400 	.word	0x41004400
    b630:	0000b3c5 	.word	0x0000b3c5

0000b634 <PHY_SetChannel>:
{
    b634:	b510      	push	{r4, lr}
    b636:	0004      	movs	r4, r0
	if (PHY_STATE_SLEEP == phyState)
    b638:	4b09      	ldr	r3, [pc, #36]	; (b660 <PHY_SetChannel+0x2c>)
    b63a:	781b      	ldrb	r3, [r3, #0]
    b63c:	2b02      	cmp	r3, #2
    b63e:	d00b      	beq.n	b658 <PHY_SetChannel+0x24>
	value = trx_reg_read(reg);
    b640:	2008      	movs	r0, #8
    b642:	4b08      	ldr	r3, [pc, #32]	; (b664 <PHY_SetChannel+0x30>)
    b644:	4798      	blx	r3
	reg = phyReadRegister(PHY_CC_CCA_REG) & ~0x1f;
    b646:	231f      	movs	r3, #31
    b648:	0001      	movs	r1, r0
    b64a:	4399      	bics	r1, r3
	phyWriteRegister(PHY_CC_CCA_REG, reg | channel);
    b64c:	4321      	orrs	r1, r4
	trx_reg_write(reg, value);
    b64e:	b2c9      	uxtb	r1, r1
    b650:	2008      	movs	r0, #8
    b652:	4b05      	ldr	r3, [pc, #20]	; (b668 <PHY_SetChannel+0x34>)
    b654:	4798      	blx	r3
}
    b656:	bd10      	pop	{r4, pc}
		PHY_Wakeup();
    b658:	4b04      	ldr	r3, [pc, #16]	; (b66c <PHY_SetChannel+0x38>)
    b65a:	4798      	blx	r3
    b65c:	e7f0      	b.n	b640 <PHY_SetChannel+0xc>
    b65e:	46c0      	nop			; (mov r8, r8)
    b660:	2000046d 	.word	0x2000046d
    b664:	0000c7a9 	.word	0x0000c7a9
    b668:	0000c8a5 	.word	0x0000c8a5
    b66c:	0000b609 	.word	0x0000b609

0000b670 <PHY_SetIEEEAddr>:

/*************************************************************************//**
*****************************************************************************/
// Setting the IEEE address
void PHY_SetIEEEAddr(uint8_t *ieee_addr)
{
    b670:	b570      	push	{r4, r5, r6, lr}
    b672:	0005      	movs	r5, r0
    b674:	2424      	movs	r4, #36	; 0x24
	uint8_t *ptr_to_reg = ieee_addr;
	for (uint8_t i = 0; i < 8; i++) {
		trx_reg_write((IEEE_ADDR_0_REG + i), *ptr_to_reg);
    b676:	4e05      	ldr	r6, [pc, #20]	; (b68c <PHY_SetIEEEAddr+0x1c>)
    b678:	7829      	ldrb	r1, [r5, #0]
    b67a:	0020      	movs	r0, r4
    b67c:	47b0      	blx	r6
		ptr_to_reg++;
    b67e:	3501      	adds	r5, #1
    b680:	3401      	adds	r4, #1
    b682:	b2e4      	uxtb	r4, r4
	for (uint8_t i = 0; i < 8; i++) {
    b684:	2c2c      	cmp	r4, #44	; 0x2c
    b686:	d1f7      	bne.n	b678 <PHY_SetIEEEAddr+0x8>
	}
}
    b688:	bd70      	pop	{r4, r5, r6, pc}
    b68a:	46c0      	nop			; (mov r8, r8)
    b68c:	0000c8a5 	.word	0x0000c8a5

0000b690 <PHY_TaskHandler>:
/*************************************************************************//**
*****************************************************************************/

// Handle Packet Received
void PHY_TaskHandler(void)
{
    b690:	b5f0      	push	{r4, r5, r6, r7, lr}
    b692:	b085      	sub	sp, #20
	PHY_TxHandler();
    b694:	4b3f      	ldr	r3, [pc, #252]	; (b794 <PHY_TaskHandler+0x104>)
    b696:	4798      	blx	r3

	if (PHY_STATE_SLEEP == phyState)
    b698:	4b3f      	ldr	r3, [pc, #252]	; (b798 <PHY_TaskHandler+0x108>)
    b69a:	781b      	ldrb	r3, [r3, #0]
    b69c:	2b02      	cmp	r3, #2
    b69e:	d00a      	beq.n	b6b6 <PHY_TaskHandler+0x26>
	value = trx_reg_read(reg);
    b6a0:	200f      	movs	r0, #15
    b6a2:	4b3e      	ldr	r3, [pc, #248]	; (b79c <PHY_TaskHandler+0x10c>)
    b6a4:	4798      	blx	r3
	{
		return;
	}

	if (phyReadRegister(IRQ_STATUS_REG) & (1 << TRX_END))
    b6a6:	0703      	lsls	r3, r0, #28
    b6a8:	d505      	bpl.n	b6b6 <PHY_TaskHandler+0x26>
	{
		if (PHY_STATE_IDLE == phyState)
    b6aa:	4b3b      	ldr	r3, [pc, #236]	; (b798 <PHY_TaskHandler+0x108>)
    b6ac:	781b      	ldrb	r3, [r3, #0]
    b6ae:	2b01      	cmp	r3, #1
    b6b0:	d003      	beq.n	b6ba <PHY_TaskHandler+0x2a>
					}
				}
				phyWaitState(TRX_STATUS_RX_AACK_ON);
			}
		}
		else if (PHY_STATE_TX_WAIT_END == phyState)
    b6b2:	2b03      	cmp	r3, #3
    b6b4:	d053      	beq.n	b75e <PHY_TaskHandler+0xce>
		    gPhyDataReq.confirmCallback = NULL;
			phySetRxState();
			phyState = PHY_STATE_IDLE;
		}
	}
}
    b6b6:	b005      	add	sp, #20
    b6b8:	bdf0      	pop	{r4, r5, r6, r7, pc}
				if (RxBuffer[i].PayloadLen == 0)
    b6ba:	4b39      	ldr	r3, [pc, #228]	; (b7a0 <PHY_TaskHandler+0x110>)
    b6bc:	781d      	ldrb	r5, [r3, #0]
    b6be:	2d00      	cmp	r5, #0
    b6c0:	d010      	beq.n	b6e4 <PHY_TaskHandler+0x54>
    b6c2:	237f      	movs	r3, #127	; 0x7f
    b6c4:	4a36      	ldr	r2, [pc, #216]	; (b7a0 <PHY_TaskHandler+0x110>)
    b6c6:	5cd3      	ldrb	r3, [r2, r3]
    b6c8:	2b00      	cmp	r3, #0
    b6ca:	d00a      	beq.n	b6e2 <PHY_TaskHandler+0x52>
    b6cc:	23fe      	movs	r3, #254	; 0xfe
    b6ce:	5cd3      	ldrb	r3, [r2, r3]
    b6d0:	2b00      	cmp	r3, #0
    b6d2:	d042      	beq.n	b75a <PHY_TaskHandler+0xca>
    b6d4:	237e      	movs	r3, #126	; 0x7e
    b6d6:	33ff      	adds	r3, #255	; 0xff
    b6d8:	5cd3      	ldrb	r3, [r2, r3]
			for (i = 0; i < BANK_SIZE; i++)
    b6da:	2503      	movs	r5, #3
				if (RxBuffer[i].PayloadLen == 0)
    b6dc:	2b00      	cmp	r3, #0
    b6de:	d1ea      	bne.n	b6b6 <PHY_TaskHandler+0x26>
    b6e0:	e000      	b.n	b6e4 <PHY_TaskHandler+0x54>
			for (i = 0; i < BANK_SIZE; i++)
    b6e2:	2501      	movs	r5, #1
	value = trx_reg_read(reg);
    b6e4:	2007      	movs	r0, #7
    b6e6:	4b2d      	ldr	r3, [pc, #180]	; (b79c <PHY_TaskHandler+0x10c>)
    b6e8:	4798      	blx	r3
    b6ea:	9001      	str	r0, [sp, #4]
				trx_frame_read(&size, 1);
    b6ec:	ab02      	add	r3, sp, #8
    b6ee:	1dde      	adds	r6, r3, #7
    b6f0:	2101      	movs	r1, #1
    b6f2:	0030      	movs	r0, r6
    b6f4:	4b2b      	ldr	r3, [pc, #172]	; (b7a4 <PHY_TaskHandler+0x114>)
    b6f6:	4798      	blx	r3
				if(size <= MAX_PSDU)
    b6f8:	7831      	ldrb	r1, [r6, #0]
    b6fa:	b24b      	sxtb	r3, r1
    b6fc:	2b00      	cmp	r3, #0
    b6fe:	db24      	blt.n	b74a <PHY_TaskHandler+0xba>
					trx_frame_read(phyRxBuffer, size + 2);
    b700:	3102      	adds	r1, #2
    b702:	b2c9      	uxtb	r1, r1
    b704:	4828      	ldr	r0, [pc, #160]	; (b7a8 <PHY_TaskHandler+0x118>)
    b706:	4b27      	ldr	r3, [pc, #156]	; (b7a4 <PHY_TaskHandler+0x114>)
    b708:	4798      	blx	r3
					RxBuffer[RxBank].PayloadLen = size + 2;
    b70a:	002c      	movs	r4, r5
    b70c:	ab02      	add	r3, sp, #8
    b70e:	79d8      	ldrb	r0, [r3, #7]
    b710:	1c87      	adds	r7, r0, #2
    b712:	b2ff      	uxtb	r7, r7
    b714:	01eb      	lsls	r3, r5, #7
    b716:	1b5d      	subs	r5, r3, r5
    b718:	4b21      	ldr	r3, [pc, #132]	; (b7a0 <PHY_TaskHandler+0x110>)
    b71a:	54ef      	strb	r7, [r5, r3]
					if (RxBuffer[RxBank].PayloadLen < RX_PACKET_SIZE)
    b71c:	2f7d      	cmp	r7, #125	; 0x7d
    b71e:	d814      	bhi.n	b74a <PHY_TaskHandler+0xba>
						for (i = 1; i <= size+2; i++)
    b720:	3002      	adds	r0, #2
    b722:	2201      	movs	r2, #1
    b724:	2301      	movs	r3, #1
							RxBuffer[RxBank].Payload[i-1] = phyRxBuffer[i];
    b726:	0029      	movs	r1, r5
    b728:	4d1d      	ldr	r5, [pc, #116]	; (b7a0 <PHY_TaskHandler+0x110>)
    b72a:	186d      	adds	r5, r5, r1
    b72c:	4e1e      	ldr	r6, [pc, #120]	; (b7a8 <PHY_TaskHandler+0x118>)
    b72e:	5cb1      	ldrb	r1, [r6, r2]
    b730:	54a9      	strb	r1, [r5, r2]
						for (i = 1; i <= size+2; i++)
    b732:	3301      	adds	r3, #1
    b734:	b2db      	uxtb	r3, r3
    b736:	001a      	movs	r2, r3
    b738:	4298      	cmp	r0, r3
    b73a:	daf8      	bge.n	b72e <PHY_TaskHandler+0x9e>
						RxBuffer[RxBank].Payload[RxBuffer[RxBank].PayloadLen - 1] = rssi + PHY_RSSI_BASE_VAL;
    b73c:	01e2      	lsls	r2, r4, #7
    b73e:	1b12      	subs	r2, r2, r4
    b740:	4b17      	ldr	r3, [pc, #92]	; (b7a0 <PHY_TaskHandler+0x110>)
    b742:	189b      	adds	r3, r3, r2
    b744:	9c01      	ldr	r4, [sp, #4]
    b746:	3c5e      	subs	r4, #94	; 0x5e
    b748:	55dc      	strb	r4, [r3, r7]
	value = trx_reg_read(reg);
    b74a:	4d14      	ldr	r5, [pc, #80]	; (b79c <PHY_TaskHandler+0x10c>)
while (state != (phyReadRegister(TRX_STATUS_REG) & TRX_STATUS_MASK)) {
    b74c:	241f      	movs	r4, #31
	value = trx_reg_read(reg);
    b74e:	2001      	movs	r0, #1
    b750:	47a8      	blx	r5
while (state != (phyReadRegister(TRX_STATUS_REG) & TRX_STATUS_MASK)) {
    b752:	4020      	ands	r0, r4
    b754:	2816      	cmp	r0, #22
    b756:	d1fa      	bne.n	b74e <PHY_TaskHandler+0xbe>
    b758:	e7ad      	b.n	b6b6 <PHY_TaskHandler+0x26>
			for (i = 0; i < BANK_SIZE; i++)
    b75a:	2502      	movs	r5, #2
    b75c:	e7c2      	b.n	b6e4 <PHY_TaskHandler+0x54>
	value = trx_reg_read(reg);
    b75e:	2002      	movs	r0, #2
    b760:	4b0e      	ldr	r3, [pc, #56]	; (b79c <PHY_TaskHandler+0x10c>)
    b762:	4798      	blx	r3
			uint8_t status = (phyReadRegister(TRX_STATE_REG) >>  TRAC_STATUS) & 7;
    b764:	0940      	lsrs	r0, r0, #5
    b766:	b2c0      	uxtb	r0, r0
   			if (TRAC_STATUS_SUCCESS == status)
    b768:	2800      	cmp	r0, #0
    b76a:	d004      	beq.n	b776 <PHY_TaskHandler+0xe6>
			else if (TRAC_STATUS_CHANNEL_ACCESS_FAILURE == status)
    b76c:	2803      	cmp	r0, #3
    b76e:	d00d      	beq.n	b78c <PHY_TaskHandler+0xfc>
			else if (TRAC_STATUS_NO_ACK == status)
    b770:	2805      	cmp	r0, #5
    b772:	d00d      	beq.n	b790 <PHY_TaskHandler+0x100>
				status = PHY_STATUS_ERROR;
    b774:	2001      	movs	r0, #1
		    gPhyDataReq.confirmCallback(status);
    b776:	4c0d      	ldr	r4, [pc, #52]	; (b7ac <PHY_TaskHandler+0x11c>)
    b778:	68a3      	ldr	r3, [r4, #8]
    b77a:	4798      	blx	r3
		    gPhyDataReq.confirmCallback = NULL;
    b77c:	2300      	movs	r3, #0
    b77e:	60a3      	str	r3, [r4, #8]
			phySetRxState();
    b780:	4b0b      	ldr	r3, [pc, #44]	; (b7b0 <PHY_TaskHandler+0x120>)
    b782:	4798      	blx	r3
			phyState = PHY_STATE_IDLE;
    b784:	2201      	movs	r2, #1
    b786:	4b04      	ldr	r3, [pc, #16]	; (b798 <PHY_TaskHandler+0x108>)
    b788:	701a      	strb	r2, [r3, #0]
    b78a:	e794      	b.n	b6b6 <PHY_TaskHandler+0x26>
				status = PHY_STATUS_CHANNEL_ACCESS_FAILURE;
    b78c:	2002      	movs	r0, #2
    b78e:	e7f2      	b.n	b776 <PHY_TaskHandler+0xe6>
				status = PHY_STATUS_NO_ACK;
    b790:	2003      	movs	r0, #3
    b792:	e7f0      	b.n	b776 <PHY_TaskHandler+0xe6>
    b794:	0000b439 	.word	0x0000b439
    b798:	2000046d 	.word	0x2000046d
    b79c:	0000c7a9 	.word	0x0000c7a9
    b7a0:	20001e80 	.word	0x20001e80
    b7a4:	0000c9a5 	.word	0x0000c9a5
    b7a8:	200003ec 	.word	0x200003ec
    b7ac:	20001e68 	.word	0x20001e68
    b7b0:	0000b3c5 	.word	0x0000b3c5

0000b7b4 <stb_init>:
 * @brief STB Initialization
 *
 * This function initializes the STB.
 */
void stb_init(void)
{
    b7b4:	b510      	push	{r4, lr}
	sal_init();
    b7b6:	4b01      	ldr	r3, [pc, #4]	; (b7bc <stb_init+0x8>)
    b7b8:	4798      	blx	r3
}
    b7ba:	bd10      	pop	{r4, pc}
    b7bc:	0000c431 	.word	0x0000c431

0000b7c0 <stb_ccm_secure>:
		uint8_t *key,
		uint8_t hdr_len,
		uint8_t pld_len,
		uint8_t sec_level,
		uint8_t aes_dir)
{
    b7c0:	b5f0      	push	{r4, r5, r6, r7, lr}
    b7c2:	46de      	mov	lr, fp
    b7c4:	4657      	mov	r7, sl
    b7c6:	464e      	mov	r6, r9
    b7c8:	4645      	mov	r5, r8
    b7ca:	b5e0      	push	{r5, r6, r7, lr}
    b7cc:	b08b      	sub	sp, #44	; 0x2c
    b7ce:	9003      	str	r0, [sp, #12]
    b7d0:	000d      	movs	r5, r1
    b7d2:	0014      	movs	r4, r2
    b7d4:	9304      	str	r3, [sp, #16]
    b7d6:	ab14      	add	r3, sp, #80	; 0x50
    b7d8:	781e      	ldrb	r6, [r3, #0]
    b7da:	ab15      	add	r3, sp, #84	; 0x54
    b7dc:	781f      	ldrb	r7, [r3, #0]
    b7de:	ab16      	add	r3, sp, #88	; 0x58
    b7e0:	781b      	ldrb	r3, [r3, #0]
    b7e2:	469a      	mov	sl, r3
	uint8_t nonce_0; /* nonce[0] for MIC computation. */
	uint8_t mic_len = 0;
	uint8_t enc_flag = ENCRYPTION_NOT_REQD;

	if (stb_restart_required) {
    b7e4:	4b77      	ldr	r3, [pc, #476]	; (b9c4 <stb_ccm_secure+0x204>)
    b7e6:	781b      	ldrb	r3, [r3, #0]
    b7e8:	2b00      	cmp	r3, #0
    b7ea:	d007      	beq.n	b7fc <stb_ccm_secure+0x3c>
#if (SAL_TYPE != ATXMEGA_SAL)
		prev_trx_status = tal_trx_status;
    b7ec:	2202      	movs	r2, #2
    b7ee:	4b76      	ldr	r3, [pc, #472]	; (b9c8 <stb_ccm_secure+0x208>)
    b7f0:	701a      	strb	r2, [r3, #0]
		if (tal_trx_status == TRX_SLEEP) {
			PHY_Wakeup();
		}
#endif
		sal_aes_restart();
    b7f2:	4b76      	ldr	r3, [pc, #472]	; (b9cc <stb_ccm_secure+0x20c>)
    b7f4:	4798      	blx	r3
		stb_restart_required = false;
    b7f6:	2200      	movs	r2, #0
    b7f8:	4b72      	ldr	r3, [pc, #456]	; (b9c4 <stb_ccm_secure+0x204>)
    b7fa:	701a      	strb	r2, [r3, #0]
	}

	switch (sec_level) {
    b7fc:	2f07      	cmp	r7, #7
    b7fe:	d817      	bhi.n	b830 <stb_ccm_secure+0x70>
    b800:	00bb      	lsls	r3, r7, #2
    b802:	4a73      	ldr	r2, [pc, #460]	; (b9d0 <stb_ccm_secure+0x210>)
    b804:	58d3      	ldr	r3, [r2, r3]
    b806:	469f      	mov	pc, r3
	uint8_t enc_flag = ENCRYPTION_NOT_REQD;
    b808:	2300      	movs	r3, #0
    b80a:	4698      	mov	r8, r3
		mic_len = LEN_MIC_32;
		break;

	case SECURITY_02_LEVEL:
		/* MIC-64 & No Encryption at Security Level -2 */
		mic_len = LEN_MIC_64;
    b80c:	2708      	movs	r7, #8
    b80e:	e0bb      	b.n	b988 <stb_ccm_secure+0x1c8>
		break;

	case SECURITY_04_LEVEL:
		/* No MIC & Encryption at Security Level -4 */
		mic_len = LEN_MIC_00;
		enc_flag = ENCRYPTION_REQD;
    b810:	2301      	movs	r3, #1
    b812:	4698      	mov	r8, r3
		mic_len = LEN_MIC_00;
    b814:	2700      	movs	r7, #0
		break;
    b816:	e0b7      	b.n	b988 <stb_ccm_secure+0x1c8>

	case SECURITY_05_LEVEL:
		/* MIC-32 & Encryption at Security Level -5 */
		mic_len = LEN_MIC_32;
		enc_flag = ENCRYPTION_REQD;
    b818:	2301      	movs	r3, #1
    b81a:	4698      	mov	r8, r3
		mic_len = LEN_MIC_32;
    b81c:	2704      	movs	r7, #4
		break;
    b81e:	e0b3      	b.n	b988 <stb_ccm_secure+0x1c8>

	case SECURITY_06_LEVEL:
		/* MIC-64 & Encryption at Security Level -6 */
		mic_len = LEN_MIC_64;
		enc_flag = ENCRYPTION_REQD;
    b820:	2301      	movs	r3, #1
    b822:	4698      	mov	r8, r3
		mic_len = LEN_MIC_64;
    b824:	2708      	movs	r7, #8
		break;
    b826:	e0af      	b.n	b988 <stb_ccm_secure+0x1c8>

	case SECURITY_07_LEVEL:
		/* MIC-128 & Encryption at Security Level -7 */
		mic_len = LEN_MIC_128;
		enc_flag = ENCRYPTION_REQD;
    b828:	2301      	movs	r3, #1
    b82a:	4698      	mov	r8, r3
		mic_len = LEN_MIC_128;
    b82c:	2710      	movs	r7, #16
		break;
    b82e:	e0ab      	b.n	b988 <stb_ccm_secure+0x1c8>
		break;
	}

	/* Test on correct parameters. */

	if ((sec_level & ~0x7) ||
    b830:	2307      	movs	r3, #7
    b832:	439f      	bics	r7, r3
    b834:	d000      	beq.n	b838 <stb_ccm_secure+0x78>
    b836:	e0b5      	b.n	b9a4 <stb_ccm_secure+0x1e4>
	uint8_t enc_flag = ENCRYPTION_NOT_REQD;
    b838:	46b8      	mov	r8, r7
    b83a:	e0a5      	b.n	b988 <stb_ccm_secure+0x1c8>
			(nonce == NULL) ||
			((uint16_t)pld_len + (uint16_t)hdr_len +
			(uint16_t)mic_len > 127)
			) {
#if (SAL_TYPE != ATXMEGA_SAL)
		TRX_SLEEP();
    b83c:	4b65      	ldr	r3, [pc, #404]	; (b9d4 <stb_ccm_secure+0x214>)
    b83e:	4798      	blx	r3
    b840:	e0b5      	b.n	b9ae <stb_ccm_secure+0x1ee>
		sal_aes_clean_up();
#endif
		return (STB_CCM_ILLPARM);
	}

	if (key_change && (key == NULL)) {
    b842:	4b65      	ldr	r3, [pc, #404]	; (b9d8 <stb_ccm_secure+0x218>)
    b844:	781b      	ldrb	r3, [r3, #0]
    b846:	2b00      	cmp	r3, #0
    b848:	d01a      	beq.n	b880 <stb_ccm_secure+0xc0>
    b84a:	2c00      	cmp	r4, #0
    b84c:	d00d      	beq.n	b86a <stb_ccm_secure+0xaa>
	if (key_change) {
		/*
		 * Key must be non-NULL because of test above, and
		 * ECB encryption is always the initial encryption mode.
		 */
		sal_aes_setup(key, AES_MODE_ECB, AES_DIR_ENCRYPT);
    b84e:	2200      	movs	r2, #0
    b850:	2100      	movs	r1, #0
    b852:	0020      	movs	r0, r4
    b854:	4b61      	ldr	r3, [pc, #388]	; (b9dc <stb_ccm_secure+0x21c>)
    b856:	4798      	blx	r3
		memcpy(last_key, key, AES_KEYSIZE);
    b858:	2210      	movs	r2, #16
    b85a:	0021      	movs	r1, r4
    b85c:	4860      	ldr	r0, [pc, #384]	; (b9e0 <stb_ccm_secure+0x220>)
    b85e:	4b61      	ldr	r3, [pc, #388]	; (b9e4 <stb_ccm_secure+0x224>)
    b860:	4798      	blx	r3
		key_change = false;
    b862:	2200      	movs	r2, #0
    b864:	4b5c      	ldr	r3, [pc, #368]	; (b9d8 <stb_ccm_secure+0x218>)
    b866:	701a      	strb	r2, [r3, #0]
    b868:	e01e      	b.n	b8a8 <stb_ccm_secure+0xe8>
		TRX_SLEEP();
    b86a:	4b57      	ldr	r3, [pc, #348]	; (b9c8 <stb_ccm_secure+0x208>)
    b86c:	781b      	ldrb	r3, [r3, #0]
    b86e:	2b01      	cmp	r3, #1
    b870:	d003      	beq.n	b87a <stb_ccm_secure+0xba>
		sal_aes_clean_up();
    b872:	4b5d      	ldr	r3, [pc, #372]	; (b9e8 <stb_ccm_secure+0x228>)
    b874:	4798      	blx	r3
		return (STB_CCM_KEYMISS);
    b876:	2002      	movs	r0, #2
    b878:	e09c      	b.n	b9b4 <stb_ccm_secure+0x1f4>
		TRX_SLEEP();
    b87a:	4b56      	ldr	r3, [pc, #344]	; (b9d4 <stb_ccm_secure+0x214>)
    b87c:	4798      	blx	r3
    b87e:	e7f8      	b.n	b872 <stb_ccm_secure+0xb2>
	if (!key_change && key != NULL) { /* There was some previous key. */
    b880:	2c00      	cmp	r4, #0
    b882:	d011      	beq.n	b8a8 <stb_ccm_secure+0xe8>
    b884:	220f      	movs	r2, #15
			key_change |= (last_key[i] ^ key[i]);
    b886:	4956      	ldr	r1, [pc, #344]	; (b9e0 <stb_ccm_secure+0x220>)
    b888:	0018      	movs	r0, r3
    b88a:	46ac      	mov	ip, r5
    b88c:	5c53      	ldrb	r3, [r2, r1]
    b88e:	5ca5      	ldrb	r5, [r4, r2]
    b890:	406b      	eors	r3, r5
    b892:	4303      	orrs	r3, r0
    b894:	1e58      	subs	r0, r3, #1
    b896:	4183      	sbcs	r3, r0
    b898:	b2d8      	uxtb	r0, r3
		for (i = AES_BLOCKSIZE; i--; /* */) {
    b89a:	3a01      	subs	r2, #1
    b89c:	d2f6      	bcs.n	b88c <stb_ccm_secure+0xcc>
    b89e:	4665      	mov	r5, ip
    b8a0:	4a4d      	ldr	r2, [pc, #308]	; (b9d8 <stb_ccm_secure+0x218>)
    b8a2:	7010      	strb	r0, [r2, #0]
	if (key_change) {
    b8a4:	2800      	cmp	r0, #0
    b8a6:	d1d2      	bne.n	b84e <stb_ccm_secure+0x8e>
	}

	/* Prepare nonce. */
	nonce[0] = LEN_FIELD; /* Always 2 bytes for length field. */

	if (mic_len > 0) {
    b8a8:	2f00      	cmp	r7, #0
    b8aa:	d129      	bne.n	b900 <stb_ccm_secure+0x140>
	nonce[0] = LEN_FIELD; /* Always 2 bytes for length field. */
    b8ac:	2301      	movs	r3, #1
    b8ae:	702b      	strb	r3, [r5, #0]
		nonce[0] |= (uint8_t)(((mic_len - 2) >> 1) << 3);
	}

	if (hdr_len) {
    b8b0:	9b04      	ldr	r3, [sp, #16]
    b8b2:	2b00      	cmp	r3, #0
    b8b4:	d003      	beq.n	b8be <stb_ccm_secure+0xfe>
		nonce[0] |= ADATA;
    b8b6:	782b      	ldrb	r3, [r5, #0]
    b8b8:	2240      	movs	r2, #64	; 0x40
    b8ba:	4313      	orrs	r3, r2
    b8bc:	702b      	strb	r3, [r5, #0]
	}

	nonce_0 = nonce[0];
    b8be:	782b      	ldrb	r3, [r5, #0]
    b8c0:	4699      	mov	r9, r3
	nonce[AES_BLOCKSIZE - 2] = 0;
    b8c2:	2300      	movs	r3, #0
    b8c4:	73ab      	strb	r3, [r5, #14]

	if (aes_dir == AES_DIR_ENCRYPT) {
    b8c6:	4653      	mov	r3, sl
    b8c8:	2b00      	cmp	r3, #0
    b8ca:	d12a      	bne.n	b922 <stb_ccm_secure+0x162>
		/* Authenticate. */
		if (mic_len > 0) {
    b8cc:	2f00      	cmp	r7, #0
    b8ce:	d003      	beq.n	b8d8 <stb_ccm_secure+0x118>
			nonce[AES_BLOCKSIZE - 1] = pld_len;
    b8d0:	73ee      	strb	r6, [r5, #15]

			if (ENCRYPTION_REQD == enc_flag) {
    b8d2:	4643      	mov	r3, r8
    b8d4:	2b01      	cmp	r3, #1
    b8d6:	d01a      	beq.n	b90e <stb_ccm_secure+0x14e>
						hdr_len,
						pld_len);
			}
		}

		nonce[0] = PLAINTEXT_FLAG;
    b8d8:	2301      	movs	r3, #1
    b8da:	702b      	strb	r3, [r5, #0]
		encrypt_pldmic(buffer + hdr_len, nonce, mic_len,
    b8dc:	9b03      	ldr	r3, [sp, #12]
    b8de:	9a04      	ldr	r2, [sp, #16]
    b8e0:	4694      	mov	ip, r2
    b8e2:	4463      	add	r3, ip
    b8e4:	0018      	movs	r0, r3
    b8e6:	0033      	movs	r3, r6
    b8e8:	003a      	movs	r2, r7
    b8ea:	0029      	movs	r1, r5
    b8ec:	4c3f      	ldr	r4, [pc, #252]	; (b9ec <stb_ccm_secure+0x22c>)
    b8ee:	47a0      	blx	r4
			}
		}
	}

#if (SAL_TYPE != ATXMEGA_SAL)
	TRX_SLEEP();
    b8f0:	4b35      	ldr	r3, [pc, #212]	; (b9c8 <stb_ccm_secure+0x208>)
    b8f2:	781b      	ldrb	r3, [r3, #0]
    b8f4:	2b01      	cmp	r3, #1
    b8f6:	d03d      	beq.n	b974 <stb_ccm_secure+0x1b4>
	sal_aes_clean_up();
    b8f8:	4b3b      	ldr	r3, [pc, #236]	; (b9e8 <stb_ccm_secure+0x228>)
    b8fa:	4798      	blx	r3
#endif
	return (STB_CCM_OK);
    b8fc:	2000      	movs	r0, #0
    b8fe:	e059      	b.n	b9b4 <stb_ccm_secure+0x1f4>
		nonce[0] |= (uint8_t)(((mic_len - 2) >> 1) << 3);
    b900:	9b05      	ldr	r3, [sp, #20]
    b902:	3b02      	subs	r3, #2
    b904:	009b      	lsls	r3, r3, #2
    b906:	2201      	movs	r2, #1
    b908:	4313      	orrs	r3, r2
    b90a:	702b      	strb	r3, [r5, #0]
    b90c:	e7d0      	b.n	b8b0 <stb_ccm_secure+0xf0>
						buffer + hdr_len + pld_len,
    b90e:	9b04      	ldr	r3, [sp, #16]
    b910:	1999      	adds	r1, r3, r6
				compute_mic(buffer,
    b912:	9803      	ldr	r0, [sp, #12]
    b914:	4684      	mov	ip, r0
    b916:	4461      	add	r1, ip
    b918:	9600      	str	r6, [sp, #0]
    b91a:	002a      	movs	r2, r5
    b91c:	4c34      	ldr	r4, [pc, #208]	; (b9f0 <stb_ccm_secure+0x230>)
    b91e:	47a0      	blx	r4
    b920:	e7da      	b.n	b8d8 <stb_ccm_secure+0x118>
		if (enc_flag == ENCRYPTION_REQD) {
    b922:	4643      	mov	r3, r8
    b924:	2b01      	cmp	r3, #1
    b926:	d00d      	beq.n	b944 <stb_ccm_secure+0x184>
		if (mic_len > 0) {
    b928:	2f00      	cmp	r7, #0
    b92a:	d0e1      	beq.n	b8f0 <stb_ccm_secure+0x130>
			nonce[AES_BLOCKSIZE - 1] = pld_len;
    b92c:	73ee      	strb	r6, [r5, #15]
			buffer += hdr_len + pld_len;
    b92e:	9b03      	ldr	r3, [sp, #12]
    b930:	445b      	add	r3, fp
    b932:	0018      	movs	r0, r3
			if (memcmp(buffer, rcvd_mic, mic_len)) {
    b934:	003a      	movs	r2, r7
    b936:	a906      	add	r1, sp, #24
    b938:	4b2e      	ldr	r3, [pc, #184]	; (b9f4 <stb_ccm_secure+0x234>)
    b93a:	4798      	blx	r3
    b93c:	2800      	cmp	r0, #0
    b93e:	d0d7      	beq.n	b8f0 <stb_ccm_secure+0x130>
				return STB_CCM_MICERR;
    b940:	2003      	movs	r0, #3
    b942:	e037      	b.n	b9b4 <stb_ccm_secure+0x1f4>
			nonce[0] = PLAINTEXT_FLAG;
    b944:	702b      	strb	r3, [r5, #0]
			encrypt_pldmic(buffer + hdr_len, nonce, mic_len,
    b946:	9b03      	ldr	r3, [sp, #12]
    b948:	9a04      	ldr	r2, [sp, #16]
    b94a:	4694      	mov	ip, r2
    b94c:	4463      	add	r3, ip
    b94e:	0018      	movs	r0, r3
    b950:	0033      	movs	r3, r6
    b952:	003a      	movs	r2, r7
    b954:	0029      	movs	r1, r5
    b956:	4c25      	ldr	r4, [pc, #148]	; (b9ec <stb_ccm_secure+0x22c>)
    b958:	47a0      	blx	r4
		if (mic_len > 0) {
    b95a:	2f00      	cmp	r7, #0
    b95c:	d0c8      	beq.n	b8f0 <stb_ccm_secure+0x130>
			nonce[0] = nonce_0;
    b95e:	464b      	mov	r3, r9
    b960:	702b      	strb	r3, [r5, #0]
			nonce[AES_BLOCKSIZE - 1] = pld_len;
    b962:	73ee      	strb	r6, [r5, #15]
				compute_mic(buffer,
    b964:	9600      	str	r6, [sp, #0]
    b966:	9b04      	ldr	r3, [sp, #16]
    b968:	002a      	movs	r2, r5
    b96a:	a906      	add	r1, sp, #24
    b96c:	9803      	ldr	r0, [sp, #12]
    b96e:	4c20      	ldr	r4, [pc, #128]	; (b9f0 <stb_ccm_secure+0x230>)
    b970:	47a0      	blx	r4
    b972:	e7dc      	b.n	b92e <stb_ccm_secure+0x16e>
	TRX_SLEEP();
    b974:	4b17      	ldr	r3, [pc, #92]	; (b9d4 <stb_ccm_secure+0x214>)
    b976:	4798      	blx	r3
    b978:	e7be      	b.n	b8f8 <stb_ccm_secure+0x138>
	uint8_t enc_flag = ENCRYPTION_NOT_REQD;
    b97a:	2300      	movs	r3, #0
    b97c:	4698      	mov	r8, r3
		mic_len = LEN_MIC_32;
    b97e:	2704      	movs	r7, #4
    b980:	e002      	b.n	b988 <stb_ccm_secure+0x1c8>
	uint8_t enc_flag = ENCRYPTION_NOT_REQD;
    b982:	2300      	movs	r3, #0
    b984:	4698      	mov	r8, r3
		mic_len = LEN_MIC_128;
    b986:	2710      	movs	r7, #16
	if ((sec_level & ~0x7) ||
    b988:	9b03      	ldr	r3, [sp, #12]
    b98a:	2b00      	cmp	r3, #0
    b98c:	d00a      	beq.n	b9a4 <stb_ccm_secure+0x1e4>
			(buffer == NULL) ||
    b98e:	2d00      	cmp	r5, #0
    b990:	d008      	beq.n	b9a4 <stb_ccm_secure+0x1e4>
			((uint16_t)pld_len + (uint16_t)hdr_len +
    b992:	9b04      	ldr	r3, [sp, #16]
    b994:	469b      	mov	fp, r3
    b996:	44b3      	add	fp, r6
			(uint16_t)mic_len > 127)
    b998:	9705      	str	r7, [sp, #20]
			((uint16_t)pld_len + (uint16_t)hdr_len +
    b99a:	465b      	mov	r3, fp
    b99c:	19db      	adds	r3, r3, r7
			(nonce == NULL) ||
    b99e:	2b7f      	cmp	r3, #127	; 0x7f
    b9a0:	dc00      	bgt.n	b9a4 <stb_ccm_secure+0x1e4>
    b9a2:	e74e      	b.n	b842 <stb_ccm_secure+0x82>
		TRX_SLEEP();
    b9a4:	4b08      	ldr	r3, [pc, #32]	; (b9c8 <stb_ccm_secure+0x208>)
    b9a6:	781b      	ldrb	r3, [r3, #0]
    b9a8:	2b01      	cmp	r3, #1
    b9aa:	d100      	bne.n	b9ae <stb_ccm_secure+0x1ee>
    b9ac:	e746      	b.n	b83c <stb_ccm_secure+0x7c>
		sal_aes_clean_up();
    b9ae:	4b0e      	ldr	r3, [pc, #56]	; (b9e8 <stb_ccm_secure+0x228>)
    b9b0:	4798      	blx	r3
		return (STB_CCM_ILLPARM);
    b9b2:	2001      	movs	r0, #1
}
    b9b4:	b00b      	add	sp, #44	; 0x2c
    b9b6:	bc3c      	pop	{r2, r3, r4, r5}
    b9b8:	4690      	mov	r8, r2
    b9ba:	4699      	mov	r9, r3
    b9bc:	46a2      	mov	sl, r4
    b9be:	46ab      	mov	fp, r5
    b9c0:	bdf0      	pop	{r4, r5, r6, r7, pc}
    b9c2:	46c0      	nop			; (mov r8, r8)
    b9c4:	20000481 	.word	0x20000481
    b9c8:	20000480 	.word	0x20000480
    b9cc:	0000c435 	.word	0x0000c435
    b9d0:	0001665c 	.word	0x0001665c
    b9d4:	0000b5dd 	.word	0x0000b5dd
    b9d8:	20000088 	.word	0x20000088
    b9dc:	0000c4f5 	.word	0x0000c4f5
    b9e0:	20000470 	.word	0x20000470
    b9e4:	00014cdf 	.word	0x00014cdf
    b9e8:	0000c485 	.word	0x0000c485
    b9ec:	0000bae9 	.word	0x0000bae9
    b9f0:	0000ba5d 	.word	0x0000ba5d
    b9f4:	00014cc1 	.word	0x00014cc1

0000b9f8 <encrypt_with_padding>:
 *
 * @param start Pointer to start address
 * @param buflen Number of bytes to be encrypted; if 0, nothing happens
 */
void encrypt_with_padding(uint8_t *start, uint8_t buflen)
{
    b9f8:	b5f0      	push	{r4, r5, r6, r7, lr}
    b9fa:	b085      	sub	sp, #20
    b9fc:	0004      	movs	r4, r0
    b9fe:	000e      	movs	r6, r1
	/* Encrypt the "full blocks". */
	while (buflen >= AES_BLOCKSIZE) {
    ba00:	290f      	cmp	r1, #15
    ba02:	d90f      	bls.n	ba24 <encrypt_with_padding+0x2c>
    ba04:	000d      	movs	r5, r1
    ba06:	3d10      	subs	r5, #16
    ba08:	b2ed      	uxtb	r5, r5
    ba0a:	092d      	lsrs	r5, r5, #4
    ba0c:	3501      	adds	r5, #1
    ba0e:	012d      	lsls	r5, r5, #4
    ba10:	1945      	adds	r5, r0, r5
#if (SAL_TYPE == AT86RF2xx)
		sal_aes_wrrd(start, NULL);
    ba12:	4f0f      	ldr	r7, [pc, #60]	; (ba50 <encrypt_with_padding+0x58>)
    ba14:	2100      	movs	r1, #0
    ba16:	0020      	movs	r0, r4
    ba18:	47b8      	blx	r7
#else
		sal_aes_exec(start);
#endif
		start += AES_BLOCKSIZE;
    ba1a:	3410      	adds	r4, #16
	while (buflen >= AES_BLOCKSIZE) {
    ba1c:	42ac      	cmp	r4, r5
    ba1e:	d1f9      	bne.n	ba14 <encrypt_with_padding+0x1c>
    ba20:	230f      	movs	r3, #15
    ba22:	401e      	ands	r6, r3
		buflen -= AES_BLOCKSIZE;
	}

	/* Pad the possible rest and encrypt it. */
	if (buflen) {
    ba24:	2e00      	cmp	r6, #0
    ba26:	d101      	bne.n	ba2c <encrypt_with_padding+0x34>
		sal_aes_wrrd(locbuf, NULL);
#else
		sal_aes_exec(locbuf);
#endif
	}
}
    ba28:	b005      	add	sp, #20
    ba2a:	bdf0      	pop	{r4, r5, r6, r7, pc}
		memcpy(locbuf, start, buflen);
    ba2c:	0032      	movs	r2, r6
    ba2e:	0021      	movs	r1, r4
    ba30:	4668      	mov	r0, sp
    ba32:	4b08      	ldr	r3, [pc, #32]	; (ba54 <encrypt_with_padding+0x5c>)
    ba34:	4798      	blx	r3
		memset(locbuf + buflen, 0, AES_BLOCKSIZE - buflen);
    ba36:	2210      	movs	r2, #16
    ba38:	1b92      	subs	r2, r2, r6
    ba3a:	0030      	movs	r0, r6
    ba3c:	4468      	add	r0, sp
    ba3e:	2100      	movs	r1, #0
    ba40:	4b05      	ldr	r3, [pc, #20]	; (ba58 <encrypt_with_padding+0x60>)
    ba42:	4798      	blx	r3
		sal_aes_wrrd(locbuf, NULL);
    ba44:	2100      	movs	r1, #0
    ba46:	4668      	mov	r0, sp
    ba48:	4b01      	ldr	r3, [pc, #4]	; (ba50 <encrypt_with_padding+0x58>)
    ba4a:	4798      	blx	r3
}
    ba4c:	e7ec      	b.n	ba28 <encrypt_with_padding+0x30>
    ba4e:	46c0      	nop			; (mov r8, r8)
    ba50:	0000c489 	.word	0x0000c489
    ba54:	00014cdf 	.word	0x00014cdf
    ba58:	00014cf1 	.word	0x00014cf1

0000ba5c <compute_mic>:
void compute_mic(uint8_t *buffer,
		uint8_t *mic,
		uint8_t *nonce,
		uint8_t hdr_len,
		uint8_t pld_len)
{
    ba5c:	b5f0      	push	{r4, r5, r6, r7, lr}
    ba5e:	b087      	sub	sp, #28
    ba60:	0005      	movs	r5, r0
    ba62:	9100      	str	r1, [sp, #0]
    ba64:	9201      	str	r2, [sp, #4]
    ba66:	001c      	movs	r4, r3
    ba68:	ab0c      	add	r3, sp, #48	; 0x30
    ba6a:	781e      	ldrb	r6, [r3, #0]
	sal_aes_setup(NULL, AES_MODE_ECB, AES_DIR_ENCRYPT);
    ba6c:	2200      	movs	r2, #0
    ba6e:	2100      	movs	r1, #0
    ba70:	2000      	movs	r0, #0
    ba72:	4f18      	ldr	r7, [pc, #96]	; (bad4 <compute_mic+0x78>)
    ba74:	47b8      	blx	r7
#if (SAL_TYPE == AT86RF2xx)
	sal_aes_wrrd(nonce, NULL);
    ba76:	2100      	movs	r1, #0
    ba78:	9801      	ldr	r0, [sp, #4]
    ba7a:	4b17      	ldr	r3, [pc, #92]	; (bad8 <compute_mic+0x7c>)
    ba7c:	4798      	blx	r3
#else
	sal_aes_exec(nonce);
#endif
	sal_aes_setup(NULL, AES_MODE_CBC, AES_DIR_ENCRYPT);
    ba7e:	2200      	movs	r2, #0
    ba80:	2102      	movs	r1, #2
    ba82:	2000      	movs	r0, #0
    ba84:	47b8      	blx	r7

	if (hdr_len) {
    ba86:	2c00      	cmp	r4, #0
    ba88:	d108      	bne.n	ba9c <compute_mic+0x40>
			encrypt_with_padding(buffer + firstlen,
					hdr_len - firstlen);
		}
	}

	encrypt_with_padding(buffer + hdr_len, pld_len);
    ba8a:	1928      	adds	r0, r5, r4
    ba8c:	0031      	movs	r1, r6
    ba8e:	4b13      	ldr	r3, [pc, #76]	; (badc <compute_mic+0x80>)
    ba90:	4798      	blx	r3

	sal_aes_read(mic);
    ba92:	9800      	ldr	r0, [sp, #0]
    ba94:	4b12      	ldr	r3, [pc, #72]	; (bae0 <compute_mic+0x84>)
    ba96:	4798      	blx	r3
}
    ba98:	b007      	add	sp, #28
    ba9a:	bdf0      	pop	{r4, r5, r6, r7, pc}
		firstlen = MIN(AES_BLOCKSIZE - 2, hdr_len);
    ba9c:	1c27      	adds	r7, r4, #0
    ba9e:	2c0e      	cmp	r4, #14
    baa0:	d900      	bls.n	baa4 <compute_mic+0x48>
    baa2:	270e      	movs	r7, #14
    baa4:	b2ff      	uxtb	r7, r7
		locbuf[0] = 0;
    baa6:	2300      	movs	r3, #0
    baa8:	aa02      	add	r2, sp, #8
    baaa:	7013      	strb	r3, [r2, #0]
		locbuf[1] = hdr_len;
    baac:	0013      	movs	r3, r2
    baae:	7054      	strb	r4, [r2, #1]
		memcpy(locbuf + 2, buffer, firstlen);
    bab0:	003a      	movs	r2, r7
    bab2:	0029      	movs	r1, r5
    bab4:	1c98      	adds	r0, r3, #2
    bab6:	4b0b      	ldr	r3, [pc, #44]	; (bae4 <compute_mic+0x88>)
    bab8:	4798      	blx	r3
		encrypt_with_padding(locbuf, firstlen + 2);
    baba:	1cb9      	adds	r1, r7, #2
    babc:	b2c9      	uxtb	r1, r1
    babe:	a802      	add	r0, sp, #8
    bac0:	4b06      	ldr	r3, [pc, #24]	; (badc <compute_mic+0x80>)
    bac2:	4798      	blx	r3
		if (firstlen < hdr_len) {
    bac4:	42bc      	cmp	r4, r7
    bac6:	d9e0      	bls.n	ba8a <compute_mic+0x2e>
			encrypt_with_padding(buffer + firstlen,
    bac8:	1be1      	subs	r1, r4, r7
    baca:	b2c9      	uxtb	r1, r1
    bacc:	19e8      	adds	r0, r5, r7
    bace:	4b03      	ldr	r3, [pc, #12]	; (badc <compute_mic+0x80>)
    bad0:	4798      	blx	r3
    bad2:	e7da      	b.n	ba8a <compute_mic+0x2e>
    bad4:	0000c4f5 	.word	0x0000c4f5
    bad8:	0000c489 	.word	0x0000c489
    badc:	0000b9f9 	.word	0x0000b9f9
    bae0:	0000c62d 	.word	0x0000c62d
    bae4:	00014cdf 	.word	0x00014cdf

0000bae8 <encrypt_pldmic>:
 */
void encrypt_pldmic(uint8_t *buffer,
		uint8_t *nonce,
		uint8_t mic_len,
		uint8_t pld_len)
{
    bae8:	b5f0      	push	{r4, r5, r6, r7, lr}
    baea:	46d6      	mov	lr, sl
    baec:	464f      	mov	r7, r9
    baee:	4646      	mov	r6, r8
    baf0:	b5c0      	push	{r6, r7, lr}
    baf2:	b084      	sub	sp, #16
    baf4:	0004      	movs	r4, r0
    baf6:	000f      	movs	r7, r1
    baf8:	0016      	movs	r6, r2
    bafa:	001d      	movs	r5, r3
	uint8_t ctr;
	uint8_t i;
	uint8_t keystream[AES_BLOCKSIZE];
	uint8_t *keystreamptr;

	sal_aes_setup(NULL, AES_MODE_ECB, AES_DIR_ENCRYPT);
    bafc:	2200      	movs	r2, #0
    bafe:	2100      	movs	r1, #0
    bb00:	2000      	movs	r0, #0
    bb02:	4b31      	ldr	r3, [pc, #196]	; (bbc8 <encrypt_pldmic+0xe0>)
    bb04:	4798      	blx	r3

	/* Init first keystream block. */
	nonce[AES_BLOCKSIZE - 1] = ctr = 1;
    bb06:	2301      	movs	r3, #1
    bb08:	73fb      	strb	r3, [r7, #15]

	if (pld_len > 0) {
    bb0a:	2d00      	cmp	r5, #0
    bb0c:	d106      	bne.n	bb1c <encrypt_pldmic+0x34>
{
    bb0e:	2301      	movs	r3, #1
    bb10:	469a      	mov	sl, r3
				/* Prepare the keystream for MIC. */
				nonce[AES_BLOCKSIZE - 1] = 0;

				sal_aes_wrrd(nonce, keystream);
			} else {
				sal_aes_read(keystream);
    bb12:	4b2e      	ldr	r3, [pc, #184]	; (bbcc <encrypt_pldmic+0xe4>)
    bb14:	4699      	mov	r9, r3
				sal_aes_wrrd(nonce, keystream);
    bb16:	4b2e      	ldr	r3, [pc, #184]	; (bbd0 <encrypt_pldmic+0xe8>)
    bb18:	4698      	mov	r8, r3
    bb1a:	e02e      	b.n	bb7a <encrypt_pldmic+0x92>
		sal_aes_wrrd(nonce, NULL);
    bb1c:	2100      	movs	r1, #0
    bb1e:	0038      	movs	r0, r7
    bb20:	4b2b      	ldr	r3, [pc, #172]	; (bbd0 <encrypt_pldmic+0xe8>)
    bb22:	4798      	blx	r3
    bb24:	e7f3      	b.n	bb0e <encrypt_pldmic+0x26>
				sal_aes_read(keystream);
    bb26:	4668      	mov	r0, sp
    bb28:	47c8      	blx	r9
    bb2a:	e02f      	b.n	bb8c <encrypt_pldmic+0xa4>
			}
		} else {
			/* Prepare the next keystream block. */
			nonce[AES_BLOCKSIZE - 1] = ++ctr;
    bb2c:	4653      	mov	r3, sl
    bb2e:	3301      	adds	r3, #1
    bb30:	b2db      	uxtb	r3, r3
    bb32:	469a      	mov	sl, r3
    bb34:	73fb      	strb	r3, [r7, #15]

			sal_aes_wrrd(nonce, keystream);
    bb36:	4669      	mov	r1, sp
    bb38:	0038      	movs	r0, r7
    bb3a:	4b25      	ldr	r3, [pc, #148]	; (bbd0 <encrypt_pldmic+0xe8>)
    bb3c:	4798      	blx	r3
		}

		/* En/decrypt payload. */

		for (i = MIN(pld_len, AES_BLOCKSIZE), keystreamptr = keystream;
    bb3e:	1c2b      	adds	r3, r5, #0
    bb40:	2d10      	cmp	r5, #16
    bb42:	d900      	bls.n	bb46 <encrypt_pldmic+0x5e>
    bb44:	2310      	movs	r3, #16
    bb46:	b2db      	uxtb	r3, r3
				i--;
    bb48:	1e58      	subs	r0, r3, #1
    bb4a:	b2c0      	uxtb	r0, r0
		for (i = MIN(pld_len, AES_BLOCKSIZE), keystreamptr = keystream;
    bb4c:	2b00      	cmp	r3, #0
    bb4e:	d105      	bne.n	bb5c <encrypt_pldmic+0x74>
    bb50:	e011      	b.n	bb76 <encrypt_pldmic+0x8e>
    bb52:	b2db      	uxtb	r3, r3
				i--;
    bb54:	1e58      	subs	r0, r3, #1
    bb56:	b2c0      	uxtb	r0, r0
		for (i = MIN(pld_len, AES_BLOCKSIZE), keystreamptr = keystream;
    bb58:	2b00      	cmp	r3, #0
    bb5a:	d01c      	beq.n	bb96 <encrypt_pldmic+0xae>
    bb5c:	3001      	adds	r0, #1
{
    bb5e:	2300      	movs	r3, #0
		                /* */) {
			*buffer++ ^= *keystreamptr++;
    bb60:	466a      	mov	r2, sp
    bb62:	5c9a      	ldrb	r2, [r3, r2]
    bb64:	5ce1      	ldrb	r1, [r4, r3]
    bb66:	404a      	eors	r2, r1
    bb68:	54e2      	strb	r2, [r4, r3]
    bb6a:	3301      	adds	r3, #1
		for (i = MIN(pld_len, AES_BLOCKSIZE), keystreamptr = keystream;
    bb6c:	4298      	cmp	r0, r3
    bb6e:	d1f7      	bne.n	bb60 <encrypt_pldmic+0x78>
    bb70:	18e4      	adds	r4, r4, r3
		}

		if (pld_len <= AES_BLOCKSIZE) {
    bb72:	2d10      	cmp	r5, #16
    bb74:	d90f      	bls.n	bb96 <encrypt_pldmic+0xae>
			break;
		}

		pld_len -= AES_BLOCKSIZE;
    bb76:	3d10      	subs	r5, #16
    bb78:	b2ed      	uxtb	r5, r5
		if (pld_len <= AES_BLOCKSIZE) { /* Last block */
    bb7a:	2d10      	cmp	r5, #16
    bb7c:	d8d6      	bhi.n	bb2c <encrypt_pldmic+0x44>
			if (mic_len) {
    bb7e:	2e00      	cmp	r6, #0
    bb80:	d0d1      	beq.n	bb26 <encrypt_pldmic+0x3e>
				nonce[AES_BLOCKSIZE - 1] = 0;
    bb82:	2300      	movs	r3, #0
    bb84:	73fb      	strb	r3, [r7, #15]
				sal_aes_wrrd(nonce, keystream);
    bb86:	4669      	mov	r1, sp
    bb88:	0038      	movs	r0, r7
    bb8a:	47c0      	blx	r8
		for (i = MIN(pld_len, AES_BLOCKSIZE), keystreamptr = keystream;
    bb8c:	1c2b      	adds	r3, r5, #0
    bb8e:	2d10      	cmp	r5, #16
    bb90:	d9df      	bls.n	bb52 <encrypt_pldmic+0x6a>
    bb92:	2310      	movs	r3, #16
    bb94:	e7dd      	b.n	bb52 <encrypt_pldmic+0x6a>
	}

	/* En/decrypt MIC. */

	if (mic_len) {
    bb96:	2e00      	cmp	r6, #0
    bb98:	d105      	bne.n	bba6 <encrypt_pldmic+0xbe>

		for (i = mic_len, keystreamptr = keystream; i--; /* */) {
			*buffer++ ^= *keystreamptr++;
		}
	}
}
    bb9a:	b004      	add	sp, #16
    bb9c:	bc1c      	pop	{r2, r3, r4}
    bb9e:	4690      	mov	r8, r2
    bba0:	4699      	mov	r9, r3
    bba2:	46a2      	mov	sl, r4
    bba4:	bdf0      	pop	{r4, r5, r6, r7, pc}
		sal_aes_read(keystream);
    bba6:	4668      	mov	r0, sp
    bba8:	4b08      	ldr	r3, [pc, #32]	; (bbcc <encrypt_pldmic+0xe4>)
    bbaa:	4798      	blx	r3
		for (i = mic_len, keystreamptr = keystream; i--; /* */) {
    bbac:	3e01      	subs	r6, #1
    bbae:	b2f2      	uxtb	r2, r6
    bbb0:	3201      	adds	r2, #1
    bbb2:	2300      	movs	r3, #0
			*buffer++ ^= *keystreamptr++;
    bbb4:	4669      	mov	r1, sp
    bbb6:	5c59      	ldrb	r1, [r3, r1]
    bbb8:	5ce0      	ldrb	r0, [r4, r3]
    bbba:	4041      	eors	r1, r0
    bbbc:	54e1      	strb	r1, [r4, r3]
    bbbe:	3301      	adds	r3, #1
		for (i = mic_len, keystreamptr = keystream; i--; /* */) {
    bbc0:	4293      	cmp	r3, r2
    bbc2:	d1f7      	bne.n	bbb4 <encrypt_pldmic+0xcc>
    bbc4:	e7e9      	b.n	bb9a <encrypt_pldmic+0xb2>
    bbc6:	46c0      	nop			; (mov r8, r8)
    bbc8:	0000c4f5 	.word	0x0000c4f5
    bbcc:	0000c62d 	.word	0x0000c62d
    bbd0:	0000c489 	.word	0x0000c489

0000bbd4 <MiMem_Init>:
* Output:		    none
*
* Overview:		    This function will initialize the Mimem buffers
********************************************************************/
void MiMem_Init(void)
{
    bbd4:	b510      	push	{r4, lr}
	size_t startAddress =  ALIGN((size_t)heapMem);
    bbd6:	4a0b      	ldr	r2, [pc, #44]	; (bc04 <MiMem_Init+0x30>)
    bbd8:	1e50      	subs	r0, r2, #1
    bbda:	2403      	movs	r4, #3
    bbdc:	43a0      	bics	r0, r4
    bbde:	1d01      	adds	r1, r0, #4

	/*Aligned heap is the base */
	base = (Block_t*) startAddress;
    bbe0:	4b09      	ldr	r3, [pc, #36]	; (bc08 <MiMem_Init+0x34>)
    bbe2:	6019      	str	r1, [r3, #0]
	base->size = totalFreeBytesRemaining = HEAP_SIZE - (startAddress - (size_t)heapMem);
    bbe4:	4253      	negs	r3, r2
    bbe6:	43a3      	bics	r3, r4
    bbe8:	24c0      	movs	r4, #192	; 0xc0
    bbea:	0164      	lsls	r4, r4, #5
    bbec:	46a4      	mov	ip, r4
    bbee:	4462      	add	r2, ip
    bbf0:	189b      	adds	r3, r3, r2
    bbf2:	4a06      	ldr	r2, [pc, #24]	; (bc0c <MiMem_Init+0x38>)
    bbf4:	6013      	str	r3, [r2, #0]
    bbf6:	60c3      	str	r3, [r0, #12]
	base->free = true;
    bbf8:	2301      	movs	r3, #1
    bbfa:	7403      	strb	r3, [r0, #16]
	base->next = NULL;
    bbfc:	2300      	movs	r3, #0
    bbfe:	6043      	str	r3, [r0, #4]
	base->prev = NULL;
    bc00:	6083      	str	r3, [r0, #8]
}
    bc02:	bd10      	pop	{r4, pc}
    bc04:	20000488 	.word	0x20000488
    bc08:	20000484 	.word	0x20000484
    bc0c:	20001c88 	.word	0x20001c88

0000bc10 <MiMem_Alloc>:
*  or returns NULL if no memory available
*
* Note:			    none
********************************************************************/
void* MiMem_Alloc(uint8_t size)
{
    bc10:	b570      	push	{r4, r5, r6, lr}
    bc12:	0005      	movs	r5, r0
	size_t requestedSize = 0U;
	void* requestedMemPtr = NULL;

	/* Initialize the Heap */
	if (!base)
    bc14:	4b29      	ldr	r3, [pc, #164]	; (bcbc <MiMem_Alloc+0xac>)
    bc16:	681b      	ldr	r3, [r3, #0]
    bc18:	2b00      	cmp	r3, #0
    bc1a:	d012      	beq.n	bc42 <MiMem_Alloc+0x32>
	{
		MiMem_Init();
	}
	/* if requested size is of non zero */
	if (size)
    bc1c:	2d00      	cmp	r5, #0
    bc1e:	d047      	beq.n	bcb0 <MiMem_Alloc+0xa0>
	{
		requestedSize =  size + blockMetaDataSize;
		requestedSize = ALIGN(requestedSize);
    bc20:	0029      	movs	r1, r5
    bc22:	310f      	adds	r1, #15
    bc24:	2303      	movs	r3, #3
    bc26:	4399      	bics	r1, r3
    bc28:	3104      	adds	r1, #4
		if (requestedSize <= totalFreeBytesRemaining)
    bc2a:	4b25      	ldr	r3, [pc, #148]	; (bcc0 <MiMem_Alloc+0xb0>)
    bc2c:	6818      	ldr	r0, [r3, #0]
    bc2e:	4281      	cmp	r1, r0
    bc30:	d840      	bhi.n	bcb4 <MiMem_Alloc+0xa4>
		{
			size_t receivedSize = (size_t)~0U;
			Block_t *requestedBlock = NULL;
			Block_t *blockPtr = base;
    bc32:	4b22      	ldr	r3, [pc, #136]	; (bcbc <MiMem_Alloc+0xac>)
    bc34:	681b      	ldr	r3, [r3, #0]

			/* Find best fit free Block */
			while (blockPtr)
    bc36:	2b00      	cmp	r3, #0
    bc38:	d03e      	beq.n	bcb8 <MiMem_Alloc+0xa8>
    bc3a:	2600      	movs	r6, #0
    bc3c:	2401      	movs	r4, #1
    bc3e:	4264      	negs	r4, r4
    bc40:	e005      	b.n	bc4e <MiMem_Alloc+0x3e>
		MiMem_Init();
    bc42:	4b20      	ldr	r3, [pc, #128]	; (bcc4 <MiMem_Alloc+0xb4>)
    bc44:	4798      	blx	r3
    bc46:	e7e9      	b.n	bc1c <MiMem_Alloc+0xc>
				if ((blockPtr->free) && (blockPtr->size >= requestedSize) && (blockPtr->size < receivedSize))
				{
					receivedSize = blockPtr->size;
					requestedBlock = blockPtr;
				}
				blockPtr = blockPtr->next;
    bc48:	681b      	ldr	r3, [r3, #0]
			while (blockPtr)
    bc4a:	2b00      	cmp	r3, #0
    bc4c:	d00a      	beq.n	bc64 <MiMem_Alloc+0x54>
				if ((blockPtr->free) && (blockPtr->size >= requestedSize) && (blockPtr->size < receivedSize))
    bc4e:	7b1a      	ldrb	r2, [r3, #12]
    bc50:	2a00      	cmp	r2, #0
    bc52:	d0f9      	beq.n	bc48 <MiMem_Alloc+0x38>
    bc54:	689a      	ldr	r2, [r3, #8]
    bc56:	4291      	cmp	r1, r2
    bc58:	d8f6      	bhi.n	bc48 <MiMem_Alloc+0x38>
    bc5a:	42a2      	cmp	r2, r4
    bc5c:	d2f4      	bcs.n	bc48 <MiMem_Alloc+0x38>
    bc5e:	001e      	movs	r6, r3
					receivedSize = blockPtr->size;
    bc60:	0014      	movs	r4, r2
    bc62:	e7f1      	b.n	bc48 <MiMem_Alloc+0x38>
    bc64:	2400      	movs	r4, #0
			}

			if (requestedBlock)
    bc66:	2e00      	cmp	r6, #0
    bc68:	d012      	beq.n	bc90 <MiMem_Alloc+0x80>
			{
				if ((requestedBlock->size - requestedSize) > HEAP_MINIMUM_BLOCK_SIZE)
    bc6a:	68b3      	ldr	r3, [r6, #8]
    bc6c:	1a5b      	subs	r3, r3, r1
    bc6e:	2b14      	cmp	r3, #20
    bc70:	d810      	bhi.n	bc94 <MiMem_Alloc+0x84>
				splitBlock (requestedBlock, requestedSize);
				requestedBlock->free = false;
    bc72:	2300      	movs	r3, #0
    bc74:	7333      	strb	r3, [r6, #12]
				totalFreeBytesRemaining -= requestedBlock->size;
    bc76:	68b3      	ldr	r3, [r6, #8]
    bc78:	1ac0      	subs	r0, r0, r3
    bc7a:	4b11      	ldr	r3, [pc, #68]	; (bcc0 <MiMem_Alloc+0xb0>)
    bc7c:	6018      	str	r0, [r3, #0]
				requestedMemPtr = ( void* )(((uint8_t*)requestedBlock) + blockMetaDataSize);
    bc7e:	0034      	movs	r4, r6
    bc80:	3410      	adds	r4, #16
			}
		}
	}
	if (NULL != requestedMemPtr)
    bc82:	2c00      	cmp	r4, #0
    bc84:	d004      	beq.n	bc90 <MiMem_Alloc+0x80>
	{
		memset(requestedMemPtr, 0, size);
    bc86:	002a      	movs	r2, r5
    bc88:	2100      	movs	r1, #0
    bc8a:	0020      	movs	r0, r4
    bc8c:	4b0e      	ldr	r3, [pc, #56]	; (bcc8 <MiMem_Alloc+0xb8>)
    bc8e:	4798      	blx	r3
	}
	return requestedMemPtr;
}
    bc90:	0020      	movs	r0, r4
    bc92:	bd70      	pop	{r4, r5, r6, pc}
  \param[in] size size of the memory chunk requested
  \return None.
 ******************************************************************************/
static void splitBlock(Block_t* blockTobeSplitted, size_t size)
{
	uint8_t* ptr = (uint8_t*)blockTobeSplitted + size;
    bc94:	1872      	adds	r2, r6, r1
	Block_t* newBlock = (Block_t*)ptr;

	newBlock->size = blockTobeSplitted->size - size;
    bc96:	6093      	str	r3, [r2, #8]

	if (blockTobeSplitted->next)
    bc98:	6833      	ldr	r3, [r6, #0]
    bc9a:	2b00      	cmp	r3, #0
    bc9c:	d000      	beq.n	bca0 <MiMem_Alloc+0x90>
		blockTobeSplitted->next->prev = newBlock;
    bc9e:	605a      	str	r2, [r3, #4]

	newBlock->next = blockTobeSplitted->next;
    bca0:	6833      	ldr	r3, [r6, #0]
    bca2:	6013      	str	r3, [r2, #0]
	newBlock->prev = blockTobeSplitted;
    bca4:	6056      	str	r6, [r2, #4]
	newBlock->free = true;
    bca6:	2301      	movs	r3, #1
    bca8:	7313      	strb	r3, [r2, #12]

	blockTobeSplitted->next = newBlock;
    bcaa:	6032      	str	r2, [r6, #0]
	blockTobeSplitted->size = size;
    bcac:	60b1      	str	r1, [r6, #8]
    bcae:	e7e0      	b.n	bc72 <MiMem_Alloc+0x62>
    bcb0:	2400      	movs	r4, #0
    bcb2:	e7ed      	b.n	bc90 <MiMem_Alloc+0x80>
    bcb4:	2400      	movs	r4, #0
    bcb6:	e7eb      	b.n	bc90 <MiMem_Alloc+0x80>
			while (blockPtr)
    bcb8:	2400      	movs	r4, #0
    bcba:	e7e9      	b.n	bc90 <MiMem_Alloc+0x80>
    bcbc:	20000484 	.word	0x20000484
    bcc0:	20001c88 	.word	0x20001c88
    bcc4:	0000bbd5 	.word	0x0000bbd5
    bcc8:	00014cf1 	.word	0x00014cf1

0000bccc <MiMem_Free>:
	Block_t* blockPtr = base;
    bccc:	4b1c      	ldr	r3, [pc, #112]	; (bd40 <MiMem_Free+0x74>)
    bcce:	681b      	ldr	r3, [r3, #0]
	Block_t* freeBlockPtr = (Block_t*)((uint8_t*)ptr - (uint8_t*)blockMetaDataSize);
    bcd0:	3810      	subs	r0, #16
	for(; ((blockPtr != NULL) && (blockPtr != freeBlockPtr)); blockPtr = blockPtr->next);
    bcd2:	2b00      	cmp	r3, #0
    bcd4:	d030      	beq.n	bd38 <MiMem_Free+0x6c>
    bcd6:	4283      	cmp	r3, r0
    bcd8:	d02f      	beq.n	bd3a <MiMem_Free+0x6e>
    bcda:	681b      	ldr	r3, [r3, #0]
    bcdc:	2b00      	cmp	r3, #0
    bcde:	d02b      	beq.n	bd38 <MiMem_Free+0x6c>
    bce0:	4298      	cmp	r0, r3
    bce2:	d1fa      	bne.n	bcda <MiMem_Free+0xe>
		blockPtr->free = true;
    bce4:	2301      	movs	r3, #1
    bce6:	7303      	strb	r3, [r0, #12]
		totalFreeBytesRemaining += blockPtr->size;
    bce8:	6881      	ldr	r1, [r0, #8]
    bcea:	4a16      	ldr	r2, [pc, #88]	; (bd44 <MiMem_Free+0x78>)
    bcec:	6813      	ldr	r3, [r2, #0]
    bcee:	185b      	adds	r3, r3, r1
    bcf0:	6013      	str	r3, [r2, #0]
		if (blockPtr->prev && blockPtr->prev->free)
    bcf2:	6843      	ldr	r3, [r0, #4]
    bcf4:	2b00      	cmp	r3, #0
    bcf6:	d00f      	beq.n	bd18 <MiMem_Free+0x4c>
    bcf8:	7b1a      	ldrb	r2, [r3, #12]
    bcfa:	2a00      	cmp	r2, #0
    bcfc:	d00c      	beq.n	bd18 <MiMem_Free+0x4c>
			blockPtr->prev->size += blockPtr->size;
    bcfe:	689a      	ldr	r2, [r3, #8]
    bd00:	4694      	mov	ip, r2
    bd02:	4461      	add	r1, ip
    bd04:	6099      	str	r1, [r3, #8]
			if (blockPtr->next)
    bd06:	6803      	ldr	r3, [r0, #0]
    bd08:	2b00      	cmp	r3, #0
    bd0a:	d001      	beq.n	bd10 <MiMem_Free+0x44>
			blockPtr->next->prev = blockPtr->prev;
    bd0c:	6842      	ldr	r2, [r0, #4]
    bd0e:	605a      	str	r2, [r3, #4]
			blockPtr->prev->next = blockPtr->next;
    bd10:	6843      	ldr	r3, [r0, #4]
    bd12:	6802      	ldr	r2, [r0, #0]
    bd14:	601a      	str	r2, [r3, #0]
			blockPtr = blockPtr->prev;
    bd16:	6840      	ldr	r0, [r0, #4]
		if (blockPtr->next && blockPtr->next->free)
    bd18:	6803      	ldr	r3, [r0, #0]
    bd1a:	2b00      	cmp	r3, #0
    bd1c:	d00c      	beq.n	bd38 <MiMem_Free+0x6c>
    bd1e:	7b1a      	ldrb	r2, [r3, #12]
    bd20:	2a00      	cmp	r2, #0
    bd22:	d009      	beq.n	bd38 <MiMem_Free+0x6c>
			blockPtr->size += blockPtr->next->size ;
    bd24:	6882      	ldr	r2, [r0, #8]
    bd26:	6899      	ldr	r1, [r3, #8]
    bd28:	468c      	mov	ip, r1
    bd2a:	4462      	add	r2, ip
    bd2c:	6082      	str	r2, [r0, #8]
			blockPtr->next = blockPtr->next->next;
    bd2e:	681b      	ldr	r3, [r3, #0]
    bd30:	6003      	str	r3, [r0, #0]
			if (blockPtr->next)
    bd32:	2b00      	cmp	r3, #0
    bd34:	d000      	beq.n	bd38 <MiMem_Free+0x6c>
			blockPtr->next->prev = blockPtr;
    bd36:	6058      	str	r0, [r3, #4]
}
    bd38:	4770      	bx	lr
	Block_t* blockPtr = base;
    bd3a:	0018      	movs	r0, r3
    bd3c:	e7d2      	b.n	bce4 <MiMem_Free+0x18>
    bd3e:	46c0      	nop			; (mov r8, r8)
    bd40:	20000484 	.word	0x20000484
    bd44:	20001c88 	.word	0x20001c88

0000bd48 <MiMem_PercentageOfFreeBuffers>:
}

uint8_t MiMem_PercentageOfFreeBuffers(void)
{
    bd48:	b510      	push	{r4, lr}
	return (totalFreeBytesRemaining * 100) / HEAP_SIZE;;
    bd4a:	4b05      	ldr	r3, [pc, #20]	; (bd60 <MiMem_PercentageOfFreeBuffers+0x18>)
    bd4c:	6818      	ldr	r0, [r3, #0]
    bd4e:	2364      	movs	r3, #100	; 0x64
    bd50:	4358      	muls	r0, r3
    bd52:	21c0      	movs	r1, #192	; 0xc0
    bd54:	0149      	lsls	r1, r1, #5
    bd56:	4b03      	ldr	r3, [pc, #12]	; (bd64 <MiMem_PercentageOfFreeBuffers+0x1c>)
    bd58:	4798      	blx	r3
    bd5a:	b2c0      	uxtb	r0, r0
}
    bd5c:	bd10      	pop	{r4, pc}
    bd5e:	46c0      	nop			; (mov r8, r8)
    bd60:	20001c88 	.word	0x20001c88
    bd64:	00012469 	.word	0x00012469

0000bd68 <miQueueReadOrRemove>:
 *         removed or read, otherwise NULL is returned.
 * \ingroup group_qmm
 */
static miQueueBuffer_t *miQueueReadOrRemove(MiQueue_t *q,
						buffer_mode_t mode,search_t *search)
{
    bd68:	b5f0      	push	{r4, r5, r6, r7, lr}
    bd6a:	46c6      	mov	lr, r8
    bd6c:	b500      	push	{lr}
    bd6e:	0007      	movs	r7, r0
    bd70:	4688      	mov	r8, r1
    bd72:	0015      	movs	r5, r2
  __ASM volatile ("cpsid i" : : : "memory");
    bd74:	b672      	cpsid	i
  __ASM volatile ("dmb 0xF":::"memory");
    bd76:	f3bf 8f5f 	dmb	sy
	miQueueBuffer_t *buffer_current = NULL;
	miQueueBuffer_t *buffer_previous;

	cpu_irq_disable();
    bd7a:	2200      	movs	r2, #0
    bd7c:	4b1f      	ldr	r3, [pc, #124]	; (bdfc <miQueueReadOrRemove+0x94>)
    bd7e:	701a      	strb	r2, [r3, #0]
	/* Check whether queue is empty */
	if (q->size != 0) {
    bd80:	7a03      	ldrb	r3, [r0, #8]
    bd82:	2b00      	cmp	r3, #0
    bd84:	d037      	beq.n	bdf6 <miQueueReadOrRemove+0x8e>
		buffer_current = q->head;
    bd86:	6804      	ldr	r4, [r0, #0]
		buffer_previous = q->head;

		/* First get buffer matching with criteria */
		if (NULL != search) {
    bd88:	2d00      	cmp	r5, #0
    bd8a:	d019      	beq.n	bdc0 <miQueueReadOrRemove+0x58>
			uint8_t match;
			/* Search for all buffers in the queue */
			while (NULL != buffer_current) {
    bd8c:	2c00      	cmp	r4, #0
    bd8e:	d00c      	beq.n	bdaa <miQueueReadOrRemove+0x42>
    bd90:	0026      	movs	r6, r4
    bd92:	e000      	b.n	bd96 <miQueueReadOrRemove+0x2e>
					/* Break, if search criteria matches */
					break;
				}

				buffer_previous = buffer_current;
				buffer_current = buffer_current->nextItem;
    bd94:	001c      	movs	r4, r3
				match = search->criteria_func(
    bd96:	6869      	ldr	r1, [r5, #4]
    bd98:	6860      	ldr	r0, [r4, #4]
    bd9a:	682b      	ldr	r3, [r5, #0]
    bd9c:	4798      	blx	r3
				if (match) {
    bd9e:	2800      	cmp	r0, #0
    bda0:	d10f      	bne.n	bdc2 <miQueueReadOrRemove+0x5a>
				buffer_current = buffer_current->nextItem;
    bda2:	6823      	ldr	r3, [r4, #0]
    bda4:	0026      	movs	r6, r4
			while (NULL != buffer_current) {
    bda6:	2b00      	cmp	r3, #0
    bda8:	d1f4      	bne.n	bd94 <miQueueReadOrRemove+0x2c>
	miQueueBuffer_t *buffer_current = NULL;
    bdaa:	2400      	movs	r4, #0
				**/
			}
		}
	} /* q->size != 0 */

	cpu_irq_enable();
    bdac:	2201      	movs	r2, #1
    bdae:	4b13      	ldr	r3, [pc, #76]	; (bdfc <miQueueReadOrRemove+0x94>)
    bdb0:	701a      	strb	r2, [r3, #0]
    bdb2:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
    bdb6:	b662      	cpsie	i

	/* Return the buffer. note that pointer to header of buffer is returned
	**/
	return (buffer_current);
} /* queue_read_or_remove */
    bdb8:	0020      	movs	r0, r4
    bdba:	bc04      	pop	{r2}
    bdbc:	4690      	mov	r8, r2
    bdbe:	bdf0      	pop	{r4, r5, r6, r7, pc}
		buffer_previous = q->head;
    bdc0:	0026      	movs	r6, r4
		if (NULL != buffer_current) {
    bdc2:	2c00      	cmp	r4, #0
    bdc4:	d0f2      	beq.n	bdac <miQueueReadOrRemove+0x44>
			if (REMOVE_MODE == mode) {
    bdc6:	4643      	mov	r3, r8
    bdc8:	2b00      	cmp	r3, #0
    bdca:	d1ef      	bne.n	bdac <miQueueReadOrRemove+0x44>
				if (buffer_current == q->head) {
    bdcc:	683b      	ldr	r3, [r7, #0]
    bdce:	429c      	cmp	r4, r3
    bdd0:	d00c      	beq.n	bdec <miQueueReadOrRemove+0x84>
						= buffer_current->nextItem;
    bdd2:	6823      	ldr	r3, [r4, #0]
    bdd4:	6033      	str	r3, [r6, #0]
				if (buffer_current == q->tail) {
    bdd6:	687b      	ldr	r3, [r7, #4]
    bdd8:	429c      	cmp	r4, r3
    bdda:	d00a      	beq.n	bdf2 <miQueueReadOrRemove+0x8a>
				q->size--;
    bddc:	7a3b      	ldrb	r3, [r7, #8]
    bdde:	3b01      	subs	r3, #1
    bde0:	723b      	strb	r3, [r7, #8]
				if (NULL == q->head) {
    bde2:	683b      	ldr	r3, [r7, #0]
    bde4:	2b00      	cmp	r3, #0
    bde6:	d1e1      	bne.n	bdac <miQueueReadOrRemove+0x44>
					q->tail = NULL;
    bde8:	607b      	str	r3, [r7, #4]
    bdea:	e7df      	b.n	bdac <miQueueReadOrRemove+0x44>
					q->head = buffer_current->nextItem;
    bdec:	6823      	ldr	r3, [r4, #0]
    bdee:	603b      	str	r3, [r7, #0]
    bdf0:	e7f1      	b.n	bdd6 <miQueueReadOrRemove+0x6e>
					q->tail = buffer_previous;
    bdf2:	607e      	str	r6, [r7, #4]
    bdf4:	e7f2      	b.n	bddc <miQueueReadOrRemove+0x74>
	miQueueBuffer_t *buffer_current = NULL;
    bdf6:	2400      	movs	r4, #0
    bdf8:	e7d8      	b.n	bdac <miQueueReadOrRemove+0x44>
    bdfa:	46c0      	nop			; (mov r8, r8)
    bdfc:	20000008 	.word	0x20000008

0000be00 <miQueueInit>:
	q->head = NULL;
    be00:	2300      	movs	r3, #0
    be02:	6003      	str	r3, [r0, #0]
	q->tail = NULL;
    be04:	6043      	str	r3, [r0, #4]
	q->size = 0;
    be06:	7203      	strb	r3, [r0, #8]
}
    be08:	4770      	bx	lr
    be0a:	Address 0x0000be0a is out of bounds.


0000be0c <miQueueAppend>:
  __ASM volatile ("cpsid i" : : : "memory");
    be0c:	b672      	cpsid	i
  __ASM volatile ("dmb 0xF":::"memory");
    be0e:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
    be12:	2200      	movs	r2, #0
    be14:	4b0a      	ldr	r3, [pc, #40]	; (be40 <miQueueAppend+0x34>)
    be16:	701a      	strb	r2, [r3, #0]
	if (q->size == 0) {
    be18:	7a03      	ldrb	r3, [r0, #8]
    be1a:	2b00      	cmp	r3, #0
    be1c:	d00e      	beq.n	be3c <miQueueAppend+0x30>
		q->tail->nextItem = bufPtr;
    be1e:	6843      	ldr	r3, [r0, #4]
    be20:	6019      	str	r1, [r3, #0]
	q->tail = bufPtr;
    be22:	6041      	str	r1, [r0, #4]
	bufPtr->nextItem = NULL;
    be24:	2300      	movs	r3, #0
    be26:	600b      	str	r3, [r1, #0]
	q->size++;
    be28:	7a03      	ldrb	r3, [r0, #8]
    be2a:	3301      	adds	r3, #1
    be2c:	7203      	strb	r3, [r0, #8]
	cpu_irq_enable();
    be2e:	2201      	movs	r2, #1
    be30:	4b03      	ldr	r3, [pc, #12]	; (be40 <miQueueAppend+0x34>)
    be32:	701a      	strb	r2, [r3, #0]
    be34:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
    be38:	b662      	cpsie	i
} /* miQueueAppend */
    be3a:	4770      	bx	lr
		q->head = bufPtr;
    be3c:	6001      	str	r1, [r0, #0]
    be3e:	e7f0      	b.n	be22 <miQueueAppend+0x16>
    be40:	20000008 	.word	0x20000008

0000be44 <miQueueRemove>:
 *
 * @return Pointer to the buffer header, if the buffer is
 * successfully removed, NULL otherwise.
 */
miQueueBuffer_t *miQueueRemove(MiQueue_t *q, search_t *search)
{
    be44:	b510      	push	{r4, lr}
    be46:	000a      	movs	r2, r1
	return (miQueueReadOrRemove(q, REMOVE_MODE, search));
    be48:	2100      	movs	r1, #0
    be4a:	4b01      	ldr	r3, [pc, #4]	; (be50 <miQueueRemove+0xc>)
    be4c:	4798      	blx	r3
}
    be4e:	bd10      	pop	{r4, pc}
    be50:	0000bd69 	.word	0x0000bd69

0000be54 <miQueueRead>:
 *
 * @return Pointer to the buffer header which is to be read, NULL if the buffer
 * is not available
 */
miQueueBuffer_t *miQueueRead(MiQueue_t *q, search_t *search)
{
    be54:	b510      	push	{r4, lr}
    be56:	000a      	movs	r2, r1
	return (miQueueReadOrRemove(q, READ_MODE, search));
    be58:	2101      	movs	r1, #1
    be5a:	4b01      	ldr	r3, [pc, #4]	; (be60 <miQueueRead+0xc>)
    be5c:	4798      	blx	r3
}
    be5e:	bd10      	pop	{r4, pc}
    be60:	0000bd69 	.word	0x0000bd69

0000be64 <placeTimer>:
}

/*************************************************************************//**
*****************************************************************************/
static void placeTimer(SYS_Timer_t *timer)
{
    be64:	b530      	push	{r4, r5, lr}
	if (timers) {
    be66:	4b14      	ldr	r3, [pc, #80]	; (beb8 <placeTimer+0x54>)
    be68:	681d      	ldr	r5, [r3, #0]
    be6a:	2d00      	cmp	r5, #0
    be6c:	d01c      	beq.n	bea8 <placeTimer+0x44>
		SYS_Timer_t *prev = NULL;
		uint32_t timeout = timer->interval;
    be6e:	6882      	ldr	r2, [r0, #8]

		for (SYS_Timer_t *t = timers; t; t = t->next) {
			if (timeout < t->timeout) {
    be70:	6869      	ldr	r1, [r5, #4]
    be72:	428a      	cmp	r2, r1
    be74:	d309      	bcc.n	be8a <placeTimer+0x26>
    be76:	002c      	movs	r4, r5
				t->timeout -= timeout;
				break;
			} else {
				timeout -= t->timeout;
    be78:	1a52      	subs	r2, r2, r1
		for (SYS_Timer_t *t = timers; t; t = t->next) {
    be7a:	6823      	ldr	r3, [r4, #0]
    be7c:	2b00      	cmp	r3, #0
    be7e:	d008      	beq.n	be92 <placeTimer+0x2e>
			if (timeout < t->timeout) {
    be80:	6859      	ldr	r1, [r3, #4]
    be82:	4291      	cmp	r1, r2
    be84:	d803      	bhi.n	be8e <placeTimer+0x2a>
		for (SYS_Timer_t *t = timers; t; t = t->next) {
    be86:	001c      	movs	r4, r3
    be88:	e7f6      	b.n	be78 <placeTimer+0x14>
    be8a:	002b      	movs	r3, r5
		SYS_Timer_t *prev = NULL;
    be8c:	2400      	movs	r4, #0
				t->timeout -= timeout;
    be8e:	1a89      	subs	r1, r1, r2
    be90:	6059      	str	r1, [r3, #4]
			}

			prev = t;
		}

		timer->timeout = timeout;
    be92:	6042      	str	r2, [r0, #4]

		if (prev) {
    be94:	2c00      	cmp	r4, #0
    be96:	d003      	beq.n	bea0 <placeTimer+0x3c>
			timer->next = prev->next;
    be98:	6823      	ldr	r3, [r4, #0]
    be9a:	6003      	str	r3, [r0, #0]
			prev->next = timer;
    be9c:	6020      	str	r0, [r4, #0]
	} else {
		timer->next = NULL;
		timer->timeout = timer->interval;
		timers = timer;
	}
}
    be9e:	bd30      	pop	{r4, r5, pc}
			timer->next = timers;
    bea0:	6005      	str	r5, [r0, #0]
			timers = timer;
    bea2:	4b05      	ldr	r3, [pc, #20]	; (beb8 <placeTimer+0x54>)
    bea4:	6018      	str	r0, [r3, #0]
    bea6:	e7fa      	b.n	be9e <placeTimer+0x3a>
		timer->next = NULL;
    bea8:	2300      	movs	r3, #0
    beaa:	6003      	str	r3, [r0, #0]
		timer->timeout = timer->interval;
    beac:	6883      	ldr	r3, [r0, #8]
    beae:	6043      	str	r3, [r0, #4]
		timers = timer;
    beb0:	4b01      	ldr	r3, [pc, #4]	; (beb8 <placeTimer+0x54>)
    beb2:	6018      	str	r0, [r3, #0]
}
    beb4:	e7f3      	b.n	be9e <placeTimer+0x3a>
    beb6:	46c0      	nop			; (mov r8, r8)
    beb8:	20001c8c 	.word	0x20001c8c

0000bebc <SYS_HwOverflow_Cb>:
	common_tc_delay(SYS_TIMER_INTERVAL * MS);
}

static void SYS_HwOverflow_Cb(void)
{
	timerExtension1++;
    bebc:	4a06      	ldr	r2, [pc, #24]	; (bed8 <SYS_HwOverflow_Cb+0x1c>)
    bebe:	7813      	ldrb	r3, [r2, #0]
    bec0:	3301      	adds	r3, #1
    bec2:	b2db      	uxtb	r3, r3
    bec4:	7013      	strb	r3, [r2, #0]
	if(timerExtension1 == 0)
    bec6:	7813      	ldrb	r3, [r2, #0]
    bec8:	2b00      	cmp	r3, #0
    beca:	d104      	bne.n	bed6 <SYS_HwOverflow_Cb+0x1a>
	{
		timerExtension2++;
    becc:	4a03      	ldr	r2, [pc, #12]	; (bedc <SYS_HwOverflow_Cb+0x20>)
    bece:	7813      	ldrb	r3, [r2, #0]
    bed0:	3301      	adds	r3, #1
    bed2:	b2db      	uxtb	r3, r3
    bed4:	7013      	strb	r3, [r2, #0]
	}
}
    bed6:	4770      	bx	lr
    bed8:	20002690 	.word	0x20002690
    bedc:	20002691 	.word	0x20002691

0000bee0 <SYS_HwExpiry_Cb>:
{
    bee0:	b510      	push	{r4, lr}
	SysTimerIrqCount++;
    bee2:	4a04      	ldr	r2, [pc, #16]	; (bef4 <SYS_HwExpiry_Cb+0x14>)
    bee4:	6813      	ldr	r3, [r2, #0]
    bee6:	3301      	adds	r3, #1
    bee8:	6013      	str	r3, [r2, #0]
	common_tc_delay(SYS_TIMER_INTERVAL * MS);
    beea:	4803      	ldr	r0, [pc, #12]	; (bef8 <SYS_HwExpiry_Cb+0x18>)
    beec:	4b03      	ldr	r3, [pc, #12]	; (befc <SYS_HwExpiry_Cb+0x1c>)
    beee:	4798      	blx	r3
}
    bef0:	bd10      	pop	{r4, pc}
    bef2:	46c0      	nop			; (mov r8, r8)
    bef4:	2000268c 	.word	0x2000268c
    bef8:	00002710 	.word	0x00002710
    befc:	0000d1b5 	.word	0x0000d1b5

0000bf00 <SYS_TimerInit>:
{
    bf00:	b510      	push	{r4, lr}
	SysTimerIrqCount = 0;
    bf02:	2400      	movs	r4, #0
    bf04:	4b09      	ldr	r3, [pc, #36]	; (bf2c <SYS_TimerInit+0x2c>)
    bf06:	601c      	str	r4, [r3, #0]
    timerExtension1 = 0;
    bf08:	4b09      	ldr	r3, [pc, #36]	; (bf30 <SYS_TimerInit+0x30>)
    bf0a:	701c      	strb	r4, [r3, #0]
    timerExtension2 = 0;
    bf0c:	4b09      	ldr	r3, [pc, #36]	; (bf34 <SYS_TimerInit+0x34>)
    bf0e:	701c      	strb	r4, [r3, #0]
    set_common_tc_overflow_callback(SYS_HwOverflow_Cb);
    bf10:	4809      	ldr	r0, [pc, #36]	; (bf38 <SYS_TimerInit+0x38>)
    bf12:	4b0a      	ldr	r3, [pc, #40]	; (bf3c <SYS_TimerInit+0x3c>)
    bf14:	4798      	blx	r3
	set_common_tc_expiry_callback(SYS_HwExpiry_Cb);
    bf16:	480a      	ldr	r0, [pc, #40]	; (bf40 <SYS_TimerInit+0x40>)
    bf18:	4b0a      	ldr	r3, [pc, #40]	; (bf44 <SYS_TimerInit+0x44>)
    bf1a:	4798      	blx	r3
	common_tc_init();
    bf1c:	4b0a      	ldr	r3, [pc, #40]	; (bf48 <SYS_TimerInit+0x48>)
    bf1e:	4798      	blx	r3
	common_tc_delay(SYS_TIMER_INTERVAL * MS);
    bf20:	480a      	ldr	r0, [pc, #40]	; (bf4c <SYS_TimerInit+0x4c>)
    bf22:	4b0b      	ldr	r3, [pc, #44]	; (bf50 <SYS_TimerInit+0x50>)
    bf24:	4798      	blx	r3
	timers = NULL;
    bf26:	4b0b      	ldr	r3, [pc, #44]	; (bf54 <SYS_TimerInit+0x54>)
    bf28:	601c      	str	r4, [r3, #0]
}
    bf2a:	bd10      	pop	{r4, pc}
    bf2c:	2000268c 	.word	0x2000268c
    bf30:	20002690 	.word	0x20002690
    bf34:	20002691 	.word	0x20002691
    bf38:	0000bebd 	.word	0x0000bebd
    bf3c:	0000d2a5 	.word	0x0000d2a5
    bf40:	0000bee1 	.word	0x0000bee1
    bf44:	0000d2b1 	.word	0x0000d2b1
    bf48:	0000d221 	.word	0x0000d221
    bf4c:	00002710 	.word	0x00002710
    bf50:	0000d1b5 	.word	0x0000d1b5
    bf54:	20001c8c 	.word	0x20001c8c

0000bf58 <SYS_TimerStop>:
	for (SYS_Timer_t *t = timers; t; t = t->next) {
    bf58:	4b0e      	ldr	r3, [pc, #56]	; (bf94 <SYS_TimerStop+0x3c>)
    bf5a:	681a      	ldr	r2, [r3, #0]
    bf5c:	2a00      	cmp	r2, #0
    bf5e:	d014      	beq.n	bf8a <SYS_TimerStop+0x32>
		if (t == timer) {
    bf60:	4282      	cmp	r2, r0
    bf62:	d013      	beq.n	bf8c <SYS_TimerStop+0x34>
	for (SYS_Timer_t *t = timers; t; t = t->next) {
    bf64:	6813      	ldr	r3, [r2, #0]
    bf66:	2b00      	cmp	r3, #0
    bf68:	d00f      	beq.n	bf8a <SYS_TimerStop+0x32>
		if (t == timer) {
    bf6a:	4298      	cmp	r0, r3
    bf6c:	d001      	beq.n	bf72 <SYS_TimerStop+0x1a>
	for (SYS_Timer_t *t = timers; t; t = t->next) {
    bf6e:	001a      	movs	r2, r3
    bf70:	e7f8      	b.n	bf64 <SYS_TimerStop+0xc>
			if (prev) {
    bf72:	2a00      	cmp	r2, #0
    bf74:	d00a      	beq.n	bf8c <SYS_TimerStop+0x34>
				prev->next = t->next;
    bf76:	6803      	ldr	r3, [r0, #0]
    bf78:	6013      	str	r3, [r2, #0]
			if (t->next) {
    bf7a:	6803      	ldr	r3, [r0, #0]
    bf7c:	2b00      	cmp	r3, #0
    bf7e:	d004      	beq.n	bf8a <SYS_TimerStop+0x32>
				t->next->timeout += timer->timeout;
    bf80:	6842      	ldr	r2, [r0, #4]
    bf82:	6859      	ldr	r1, [r3, #4]
    bf84:	468c      	mov	ip, r1
    bf86:	4462      	add	r2, ip
    bf88:	605a      	str	r2, [r3, #4]
}
    bf8a:	4770      	bx	lr
				timers = t->next;
    bf8c:	4b01      	ldr	r3, [pc, #4]	; (bf94 <SYS_TimerStop+0x3c>)
    bf8e:	6802      	ldr	r2, [r0, #0]
    bf90:	601a      	str	r2, [r3, #0]
    bf92:	e7f2      	b.n	bf7a <SYS_TimerStop+0x22>
    bf94:	20001c8c 	.word	0x20001c8c

0000bf98 <SYS_TimerStarted>:
	for (SYS_Timer_t *t = timers; t; t = t->next) {
    bf98:	4b09      	ldr	r3, [pc, #36]	; (bfc0 <SYS_TimerStarted+0x28>)
    bf9a:	681b      	ldr	r3, [r3, #0]
    bf9c:	2b00      	cmp	r3, #0
    bf9e:	d00a      	beq.n	bfb6 <SYS_TimerStarted+0x1e>
		if (t == timer) {
    bfa0:	4283      	cmp	r3, r0
    bfa2:	d00a      	beq.n	bfba <SYS_TimerStarted+0x22>
	for (SYS_Timer_t *t = timers; t; t = t->next) {
    bfa4:	681b      	ldr	r3, [r3, #0]
    bfa6:	2b00      	cmp	r3, #0
    bfa8:	d003      	beq.n	bfb2 <SYS_TimerStarted+0x1a>
		if (t == timer) {
    bfaa:	4298      	cmp	r0, r3
    bfac:	d1fa      	bne.n	bfa4 <SYS_TimerStarted+0xc>
			return true;
    bfae:	2001      	movs	r0, #1
    bfb0:	e000      	b.n	bfb4 <SYS_TimerStarted+0x1c>
	return false;
    bfb2:	2000      	movs	r0, #0
}
    bfb4:	4770      	bx	lr
	return false;
    bfb6:	2000      	movs	r0, #0
    bfb8:	e7fc      	b.n	bfb4 <SYS_TimerStarted+0x1c>
			return true;
    bfba:	2001      	movs	r0, #1
    bfbc:	e7fa      	b.n	bfb4 <SYS_TimerStarted+0x1c>
    bfbe:	46c0      	nop			; (mov r8, r8)
    bfc0:	20001c8c 	.word	0x20001c8c

0000bfc4 <SYS_TimerStart>:
{
    bfc4:	b510      	push	{r4, lr}
    bfc6:	0004      	movs	r4, r0
	if (!SYS_TimerStarted(timer)) {
    bfc8:	4b04      	ldr	r3, [pc, #16]	; (bfdc <SYS_TimerStart+0x18>)
    bfca:	4798      	blx	r3
    bfcc:	2800      	cmp	r0, #0
    bfce:	d000      	beq.n	bfd2 <SYS_TimerStart+0xe>
}
    bfd0:	bd10      	pop	{r4, pc}
		placeTimer(timer);
    bfd2:	0020      	movs	r0, r4
    bfd4:	4b02      	ldr	r3, [pc, #8]	; (bfe0 <SYS_TimerStart+0x1c>)
    bfd6:	4798      	blx	r3
}
    bfd8:	e7fa      	b.n	bfd0 <SYS_TimerStart+0xc>
    bfda:	46c0      	nop			; (mov r8, r8)
    bfdc:	0000bf99 	.word	0x0000bf99
    bfe0:	0000be65 	.word	0x0000be65

0000bfe4 <SYS_TimerTaskHandler>:
{
    bfe4:	b5f0      	push	{r4, r5, r6, r7, lr}
    bfe6:	b083      	sub	sp, #12
	if (0 == SysTimerIrqCount) {
    bfe8:	4b1d      	ldr	r3, [pc, #116]	; (c060 <SYS_TimerTaskHandler+0x7c>)
    bfea:	681b      	ldr	r3, [r3, #0]
    bfec:	2b00      	cmp	r3, #0
    bfee:	d034      	beq.n	c05a <SYS_TimerTaskHandler+0x76>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
    bff0:	f3ef 8210 	mrs	r2, PRIMASK
static volatile uint32_t cpu_irq_critical_section_counter;
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = cpu_irq_is_enabled();
    bff4:	4253      	negs	r3, r2
    bff6:	4153      	adcs	r3, r2
    bff8:	9301      	str	r3, [sp, #4]
  __ASM volatile ("cpsid i" : : : "memory");
    bffa:	b672      	cpsid	i
  __ASM volatile ("dmb 0xF":::"memory");
    bffc:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
    c000:	2100      	movs	r1, #0
    c002:	4b18      	ldr	r3, [pc, #96]	; (c064 <SYS_TimerTaskHandler+0x80>)
    c004:	7019      	strb	r1, [r3, #0]
	return flags;
    c006:	9801      	ldr	r0, [sp, #4]
	cnt = SysTimerIrqCount;
    c008:	4a15      	ldr	r2, [pc, #84]	; (c060 <SYS_TimerTaskHandler+0x7c>)
    c00a:	6813      	ldr	r3, [r2, #0]
	SysTimerIrqCount = 0;
    c00c:	6011      	str	r1, [r2, #0]
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
    c00e:	2800      	cmp	r0, #0
    c010:	d005      	beq.n	c01e <SYS_TimerTaskHandler+0x3a>
		cpu_irq_enable();
    c012:	3101      	adds	r1, #1
    c014:	4a13      	ldr	r2, [pc, #76]	; (c064 <SYS_TimerTaskHandler+0x80>)
    c016:	7011      	strb	r1, [r2, #0]
    c018:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
    c01c:	b662      	cpsie	i
	elapsed = cnt * SYS_TIMER_INTERVAL;
    c01e:	009d      	lsls	r5, r3, #2
    c020:	18ed      	adds	r5, r5, r3
    c022:	006d      	lsls	r5, r5, #1
	while (timers && (timers->timeout <= elapsed)) {
    c024:	4e10      	ldr	r6, [pc, #64]	; (c068 <SYS_TimerTaskHandler+0x84>)
		timers = timers->next;
    c026:	0037      	movs	r7, r6
	while (timers && (timers->timeout <= elapsed)) {
    c028:	e005      	b.n	c036 <SYS_TimerTaskHandler+0x52>
			placeTimer(timer);
    c02a:	0020      	movs	r0, r4
    c02c:	4b0f      	ldr	r3, [pc, #60]	; (c06c <SYS_TimerTaskHandler+0x88>)
    c02e:	4798      	blx	r3
    c030:	e00d      	b.n	c04e <SYS_TimerTaskHandler+0x6a>
			timer->handler(timer);
    c032:	0020      	movs	r0, r4
    c034:	4798      	blx	r3
	while (timers && (timers->timeout <= elapsed)) {
    c036:	6834      	ldr	r4, [r6, #0]
    c038:	2c00      	cmp	r4, #0
    c03a:	d00e      	beq.n	c05a <SYS_TimerTaskHandler+0x76>
    c03c:	6863      	ldr	r3, [r4, #4]
    c03e:	429d      	cmp	r5, r3
    c040:	d309      	bcc.n	c056 <SYS_TimerTaskHandler+0x72>
		elapsed -= timers->timeout;
    c042:	1aed      	subs	r5, r5, r3
		timers = timers->next;
    c044:	6823      	ldr	r3, [r4, #0]
    c046:	603b      	str	r3, [r7, #0]
		if (SYS_TIMER_PERIODIC_MODE == timer->mode) {
    c048:	7b23      	ldrb	r3, [r4, #12]
    c04a:	2b01      	cmp	r3, #1
    c04c:	d0ed      	beq.n	c02a <SYS_TimerTaskHandler+0x46>
		if (timer->handler) {
    c04e:	6923      	ldr	r3, [r4, #16]
    c050:	2b00      	cmp	r3, #0
    c052:	d1ee      	bne.n	c032 <SYS_TimerTaskHandler+0x4e>
    c054:	e7ef      	b.n	c036 <SYS_TimerTaskHandler+0x52>
		timers->timeout -= elapsed;
    c056:	1b5d      	subs	r5, r3, r5
    c058:	6065      	str	r5, [r4, #4]
}
    c05a:	b003      	add	sp, #12
    c05c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    c05e:	46c0      	nop			; (mov r8, r8)
    c060:	2000268c 	.word	0x2000268c
    c064:	20000008 	.word	0x20000008
    c068:	20001c8c 	.word	0x20001c8c
    c06c:	0000be65 	.word	0x0000be65

0000c070 <MiWi_TickGet>:
{
    c070:	b570      	push	{r4, r5, r6, lr}
	uint8_t current_timerExtension1 = timerExtension1;
    c072:	4e0f      	ldr	r6, [pc, #60]	; (c0b0 <MiWi_TickGet+0x40>)
    c074:	7835      	ldrb	r5, [r6, #0]
    c076:	b2ed      	uxtb	r5, r5
	currentTime.word.w0 = common_tc_read_count();
    c078:	4b0e      	ldr	r3, [pc, #56]	; (c0b4 <MiWi_TickGet+0x44>)
    c07a:	4798      	blx	r3
    c07c:	0004      	movs	r4, r0
	nop();
    c07e:	46c0      	nop			; (mov r8, r8)
	if (current_timerExtension1 != timerExtension1)
    c080:	7833      	ldrb	r3, [r6, #0]
    c082:	b2db      	uxtb	r3, r3
    c084:	429d      	cmp	r5, r3
    c086:	d004      	beq.n	c092 <MiWi_TickGet+0x22>
		currentTime.word.w0 = common_tc_read_count();
    c088:	4b0a      	ldr	r3, [pc, #40]	; (c0b4 <MiWi_TickGet+0x44>)
    c08a:	4798      	blx	r3
    c08c:	0c24      	lsrs	r4, r4, #16
    c08e:	0424      	lsls	r4, r4, #16
    c090:	4304      	orrs	r4, r0
    currentTime.byte.b2 = timerExtension1;
    c092:	4b07      	ldr	r3, [pc, #28]	; (c0b0 <MiWi_TickGet+0x40>)
    c094:	781b      	ldrb	r3, [r3, #0]
    c096:	041b      	lsls	r3, r3, #16
    c098:	4807      	ldr	r0, [pc, #28]	; (c0b8 <MiWi_TickGet+0x48>)
    c09a:	4004      	ands	r4, r0
    c09c:	431c      	orrs	r4, r3
    currentTime.byte.b3 = timerExtension2;
    c09e:	4b07      	ldr	r3, [pc, #28]	; (c0bc <MiWi_TickGet+0x4c>)
    c0a0:	781b      	ldrb	r3, [r3, #0]
    c0a2:	061b      	lsls	r3, r3, #24
    c0a4:	0224      	lsls	r4, r4, #8
    c0a6:	0a24      	lsrs	r4, r4, #8
    c0a8:	431c      	orrs	r4, r3
}
    c0aa:	0020      	movs	r0, r4
    c0ac:	bd70      	pop	{r4, r5, r6, pc}
    c0ae:	46c0      	nop			; (mov r8, r8)
    c0b0:	20002690 	.word	0x20002690
    c0b4:	0000d169 	.word	0x0000d169
    c0b8:	ff00ffff 	.word	0xff00ffff
    c0bc:	20002691 	.word	0x20002691

0000c0c0 <MiWi_TickGetDiff>:
	if (current_tick.Val > previous_tick.Val)
    c0c0:	4288      	cmp	r0, r1
    c0c2:	d802      	bhi.n	c0ca <MiWi_TickGetDiff+0xa>
		ret_val = (0xFFFFFFFF - previous_tick.Val) + current_tick.Val;
    c0c4:	3801      	subs	r0, #1
    c0c6:	1a40      	subs	r0, r0, r1
}
    c0c8:	4770      	bx	lr
		ret_val = current_tick.Val - previous_tick.Val;
    c0ca:	1a40      	subs	r0, r0, r1
    c0cc:	e7fc      	b.n	c0c8 <MiWi_TickGetDiff+0x8>
    c0ce:	Address 0x0000c0ce is out of bounds.


0000c0d0 <tc_cca_callback>:
}

/*! \brief  hw timer compare callback
 */
static void tc_cca_callback(struct tc_module *const module_instance)
{
    c0d0:	b510      	push	{r4, lr}
	tmr_cca_callback();
    c0d2:	4b01      	ldr	r3, [pc, #4]	; (c0d8 <tc_cca_callback+0x8>)
    c0d4:	4798      	blx	r3
}
    c0d6:	bd10      	pop	{r4, pc}
    c0d8:	0000d289 	.word	0x0000d289

0000c0dc <tc_ovf_callback>:
{
    c0dc:	b510      	push	{r4, lr}
	tmr_ovf_callback();
    c0de:	4b01      	ldr	r3, [pc, #4]	; (c0e4 <tc_ovf_callback+0x8>)
    c0e0:	4798      	blx	r3
}
    c0e2:	bd10      	pop	{r4, pc}
    c0e4:	0000d241 	.word	0x0000d241

0000c0e8 <tmr_read_count>:
{
    c0e8:	b510      	push	{r4, lr}
	return ((uint16_t)tc_get_count_value(&module_inst));
    c0ea:	4802      	ldr	r0, [pc, #8]	; (c0f4 <tmr_read_count+0xc>)
    c0ec:	4b02      	ldr	r3, [pc, #8]	; (c0f8 <tmr_read_count+0x10>)
    c0ee:	4798      	blx	r3
    c0f0:	b280      	uxth	r0, r0
}
    c0f2:	bd10      	pop	{r4, pc}
    c0f4:	200026c8 	.word	0x200026c8
    c0f8:	00008a65 	.word	0x00008a65

0000c0fc <tmr_disable_cc_interrupt>:
	/* Sanity check arguments */
	Assert(module);

	/* Disable callback */
	if (callback_type == TC_CALLBACK_CC_CHANNEL0) {
		module->hw->COUNT8.INTENCLR.reg = TC_INTFLAG_MC(1);
    c0fc:	4b03      	ldr	r3, [pc, #12]	; (c10c <tmr_disable_cc_interrupt+0x10>)
    c0fe:	2110      	movs	r1, #16
    c100:	681a      	ldr	r2, [r3, #0]
    c102:	7311      	strb	r1, [r2, #12]
		module->enable_callback_mask &= ~TC_INTFLAG_MC(1);
    c104:	7e5a      	ldrb	r2, [r3, #25]
    c106:	438a      	bics	r2, r1
    c108:	765a      	strb	r2, [r3, #25]
}
    c10a:	4770      	bx	lr
    c10c:	200026c8 	.word	0x200026c8

0000c110 <tmr_enable_cc_interrupt>:
{
    c110:	b570      	push	{r4, r5, r6, lr}
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    c112:	4c0b      	ldr	r4, [pc, #44]	; (c140 <tmr_enable_cc_interrupt+0x30>)
	if (status_flags & TC_STATUS_COUNT_OVERFLOW) {
		int_flags |= TC_INTFLAG_OVF;
	}

	/* Clear interrupt flag */
	tc_module->INTFLAG.reg = int_flags;
    c114:	2510      	movs	r5, #16
    c116:	6823      	ldr	r3, [r4, #0]
    c118:	739d      	strb	r5, [r3, #14]
	system_interrupt_enable(_tc_interrupt_get_interrupt_vector(_tc_get_inst_index(module->hw)));
    c11a:	0018      	movs	r0, r3
    c11c:	4b09      	ldr	r3, [pc, #36]	; (c144 <tmr_enable_cc_interrupt+0x34>)
    c11e:	4798      	blx	r3
	return (enum system_interrupt_vector)tc_interrupt_vectors[inst_num];
    c120:	4b09      	ldr	r3, [pc, #36]	; (c148 <tmr_enable_cc_interrupt+0x38>)
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
    c122:	5c1b      	ldrb	r3, [r3, r0]
    c124:	221f      	movs	r2, #31
    c126:	401a      	ands	r2, r3
    c128:	2301      	movs	r3, #1
    c12a:	4093      	lsls	r3, r2
    c12c:	4a07      	ldr	r2, [pc, #28]	; (c14c <tmr_enable_cc_interrupt+0x3c>)
    c12e:	6013      	str	r3, [r2, #0]
		module->enable_callback_mask |= TC_INTFLAG_MC(1);
    c130:	7e63      	ldrb	r3, [r4, #25]
    c132:	2210      	movs	r2, #16
    c134:	4313      	orrs	r3, r2
    c136:	7663      	strb	r3, [r4, #25]
		module->hw->COUNT8.INTENSET.reg = TC_INTFLAG_MC(1);
    c138:	6823      	ldr	r3, [r4, #0]
    c13a:	735d      	strb	r5, [r3, #13]
}
    c13c:	bd70      	pop	{r4, r5, r6, pc}
    c13e:	46c0      	nop			; (mov r8, r8)
    c140:	200026c8 	.word	0x200026c8
    c144:	000087f1 	.word	0x000087f1
    c148:	0001667c 	.word	0x0001667c
    c14c:	e000e100 	.word	0xe000e100

0000c150 <tmr_write_cmpreg>:
{
    c150:	b510      	push	{r4, lr}
    c152:	0002      	movs	r2, r0
	tc_set_compare_value(&module_inst, TC_COMPARE_CAPTURE_CHANNEL_0,
    c154:	2100      	movs	r1, #0
    c156:	4802      	ldr	r0, [pc, #8]	; (c160 <tmr_write_cmpreg+0x10>)
    c158:	4b02      	ldr	r3, [pc, #8]	; (c164 <tmr_write_cmpreg+0x14>)
    c15a:	4798      	blx	r3
}
    c15c:	bd10      	pop	{r4, pc}
    c15e:	46c0      	nop			; (mov r8, r8)
    c160:	200026c8 	.word	0x200026c8
    c164:	00008a91 	.word	0x00008a91

0000c168 <tmr_init>:

/*! \brief  to initialize hw timer
 */
uint8_t tmr_init(void)
{
    c168:	b570      	push	{r4, r5, r6, lr}
	config->clock_source               = GCLK_GENERATOR_0;
    c16a:	4a30      	ldr	r2, [pc, #192]	; (c22c <tmr_init+0xc4>)
    c16c:	2300      	movs	r3, #0
    c16e:	7013      	strb	r3, [r2, #0]
	config->counter_size               = TC_COUNTER_SIZE_16BIT;
    c170:	7093      	strb	r3, [r2, #2]
	config->clock_prescaler            = TC_CLOCK_PRESCALER_DIV1;
    c172:	2100      	movs	r1, #0
    c174:	8093      	strh	r3, [r2, #4]
	config->wave_generation            = TC_WAVE_GENERATION_NORMAL_FREQ;
    c176:	7191      	strb	r1, [r2, #6]
	config->reload_action              = TC_RELOAD_ACTION_GCLK;
    c178:	8113      	strh	r3, [r2, #8]
	config->run_in_standby             = false;
    c17a:	7051      	strb	r1, [r2, #1]
	config->waveform_invert_output     = TC_WAVEFORM_INVERT_OUTPUT_NONE;
    c17c:	7291      	strb	r1, [r2, #10]
	config->enable_capture_on_channel[TC_COMPARE_CAPTURE_CHANNEL_0] = false;
    c17e:	72d1      	strb	r1, [r2, #11]
	config->enable_capture_on_channel[TC_COMPARE_CAPTURE_CHANNEL_1] = false;
    c180:	7311      	strb	r1, [r2, #12]
	config->count_direction            = TC_COUNT_DIRECTION_UP;
    c182:	7391      	strb	r1, [r2, #14]
	config->oneshot                    = false;
    c184:	7351      	strb	r1, [r2, #13]
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_0].enabled = false;
    c186:	7411      	strb	r1, [r2, #16]
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_0].pin_out = 0;
    c188:	6153      	str	r3, [r2, #20]
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_0].pin_mux = 0;
    c18a:	6193      	str	r3, [r2, #24]
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_1].enabled = false;
    c18c:	7711      	strb	r1, [r2, #28]
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_1].pin_out = 0;
    c18e:	6213      	str	r3, [r2, #32]
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_1].pin_mux = 0;
    c190:	6253      	str	r3, [r2, #36]	; 0x24
	config->counter_16_bit.value                   = 0x0000;
    c192:	8513      	strh	r3, [r2, #40]	; 0x28
		[TC_COMPARE_CAPTURE_CHANNEL_1]                        = 0x0000;
    c194:	8593      	strh	r3, [r2, #44]	; 0x2c
		timer_config.clock_source = GCLK_GENERATOR_1;
		timer_config.clock_prescaler = TC_CLOCK_PRESCALER_DIV2;
		timer_config.run_in_standby = true;
	}
	#endif
	timer_config.counter_16_bit.compare_capture_channel[0] = TIMER_PERIOD;
    c196:	3b01      	subs	r3, #1
    c198:	8553      	strh	r3, [r2, #42]	; 0x2a
	tc_init(&module_inst, TIMER, &timer_config);
    c19a:	4c25      	ldr	r4, [pc, #148]	; (c230 <tmr_init+0xc8>)
    c19c:	4925      	ldr	r1, [pc, #148]	; (c234 <tmr_init+0xcc>)
    c19e:	0020      	movs	r0, r4
    c1a0:	4b25      	ldr	r3, [pc, #148]	; (c238 <tmr_init+0xd0>)
    c1a2:	4798      	blx	r3
	tc_register_callback(&module_inst, tc_ovf_callback,
    c1a4:	2200      	movs	r2, #0
    c1a6:	4925      	ldr	r1, [pc, #148]	; (c23c <tmr_init+0xd4>)
    c1a8:	0020      	movs	r0, r4
    c1aa:	4d25      	ldr	r5, [pc, #148]	; (c240 <tmr_init+0xd8>)
    c1ac:	47a8      	blx	r5
			TC_CALLBACK_OVERFLOW);
	tc_register_callback(&module_inst, tc_cca_callback,
    c1ae:	2202      	movs	r2, #2
    c1b0:	4924      	ldr	r1, [pc, #144]	; (c244 <tmr_init+0xdc>)
    c1b2:	0020      	movs	r0, r4
    c1b4:	47a8      	blx	r5
	system_interrupt_enable(_tc_interrupt_get_interrupt_vector(_tc_get_inst_index(module->hw)));
    c1b6:	6820      	ldr	r0, [r4, #0]
    c1b8:	4b23      	ldr	r3, [pc, #140]	; (c248 <tmr_init+0xe0>)
    c1ba:	4798      	blx	r3
	return (enum system_interrupt_vector)tc_interrupt_vectors[inst_num];
    c1bc:	4b23      	ldr	r3, [pc, #140]	; (c24c <tmr_init+0xe4>)
    c1be:	5c1a      	ldrb	r2, [r3, r0]
    c1c0:	231f      	movs	r3, #31
    c1c2:	4013      	ands	r3, r2
    c1c4:	2101      	movs	r1, #1
    c1c6:	000a      	movs	r2, r1
    c1c8:	409a      	lsls	r2, r3
    c1ca:	4b21      	ldr	r3, [pc, #132]	; (c250 <tmr_init+0xe8>)
    c1cc:	601a      	str	r2, [r3, #0]
		module->enable_callback_mask |= (1 << callback_type);
    c1ce:	7e63      	ldrb	r3, [r4, #25]
    c1d0:	2201      	movs	r2, #1
    c1d2:	4313      	orrs	r3, r2
    c1d4:	7663      	strb	r3, [r4, #25]
		module->hw->COUNT8.INTENSET.reg = (1 << callback_type);
    c1d6:	6822      	ldr	r2, [r4, #0]
    c1d8:	7351      	strb	r1, [r2, #13]
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
    c1da:	7bd3      	ldrb	r3, [r2, #15]
	while (tc_is_syncing(module_inst)) {
    c1dc:	b25b      	sxtb	r3, r3
    c1de:	2b00      	cmp	r3, #0
    c1e0:	dbfb      	blt.n	c1da <tmr_init+0x72>
	tc_module->CTRLA.reg |= TC_CTRLA_ENABLE;
    c1e2:	8813      	ldrh	r3, [r2, #0]
    c1e4:	2102      	movs	r1, #2
    c1e6:	430b      	orrs	r3, r1
    c1e8:	8013      	strh	r3, [r2, #0]
	} else {
		timer_multiplier = system_gclk_gen_get_hz(0) / (float) DEF_1MHZ;
	}

    #else
	timer_multiplier = system_gclk_gen_get_hz(0) / (float) DEF_1MHZ;	
    c1ea:	2000      	movs	r0, #0
    c1ec:	4b19      	ldr	r3, [pc, #100]	; (c254 <tmr_init+0xec>)
    c1ee:	4798      	blx	r3
    c1f0:	4d19      	ldr	r5, [pc, #100]	; (c258 <tmr_init+0xf0>)
    c1f2:	47a8      	blx	r5
    c1f4:	4919      	ldr	r1, [pc, #100]	; (c25c <tmr_init+0xf4>)
    c1f6:	4b1a      	ldr	r3, [pc, #104]	; (c260 <tmr_init+0xf8>)
    c1f8:	4798      	blx	r3
    c1fa:	1c04      	adds	r4, r0, #0
	#endif
	
	if ((timer_multiplier - (uint32_t)timer_multiplier) >= 0.5f)
    c1fc:	4b19      	ldr	r3, [pc, #100]	; (c264 <tmr_init+0xfc>)
    c1fe:	4798      	blx	r3
    c200:	47a8      	blx	r5
    c202:	1c01      	adds	r1, r0, #0
    c204:	1c20      	adds	r0, r4, #0
    c206:	4b18      	ldr	r3, [pc, #96]	; (c268 <tmr_init+0x100>)
    c208:	4798      	blx	r3
    c20a:	21fc      	movs	r1, #252	; 0xfc
    c20c:	0589      	lsls	r1, r1, #22
    c20e:	4b17      	ldr	r3, [pc, #92]	; (c26c <tmr_init+0x104>)
    c210:	4798      	blx	r3
    c212:	2800      	cmp	r0, #0
    c214:	d005      	beq.n	c222 <tmr_init+0xba>
	{
		timer_multiplier += 1.0f;
    c216:	21fe      	movs	r1, #254	; 0xfe
    c218:	0589      	lsls	r1, r1, #22
    c21a:	1c20      	adds	r0, r4, #0
    c21c:	4b14      	ldr	r3, [pc, #80]	; (c270 <tmr_init+0x108>)
    c21e:	4798      	blx	r3
    c220:	1c04      	adds	r4, r0, #0
	}
	
	return (uint8_t) timer_multiplier;
    c222:	1c20      	adds	r0, r4, #0
    c224:	4b0f      	ldr	r3, [pc, #60]	; (c264 <tmr_init+0xfc>)
    c226:	4798      	blx	r3
    c228:	b2c0      	uxtb	r0, r0
}
    c22a:	bd70      	pop	{r4, r5, r6, pc}
    c22c:	20002694 	.word	0x20002694
    c230:	200026c8 	.word	0x200026c8
    c234:	42002c00 	.word	0x42002c00
    c238:	00008829 	.word	0x00008829
    c23c:	0000c0dd 	.word	0x0000c0dd
    c240:	00008729 	.word	0x00008729
    c244:	0000c0d1 	.word	0x0000c0d1
    c248:	000087f1 	.word	0x000087f1
    c24c:	0001667c 	.word	0x0001667c
    c250:	e000e100 	.word	0xe000e100
    c254:	000084b9 	.word	0x000084b9
    c258:	000132c9 	.word	0x000132c9
    c25c:	49742400 	.word	0x49742400
    c260:	00012b71 	.word	0x00012b71
    c264:	0001281d 	.word	0x0001281d
    c268:	00012f51 	.word	0x00012f51
    c26c:	000127b5 	.word	0x000127b5
    c270:	0001284d 	.word	0x0001284d

0000c274 <edbg_eui_read_eui64>:
#define LEN_EUI    256
uint8_t readbuf[LEN_EUI];

uint8_t *
edbg_eui_read_eui64(void)
{
    c274:	b570      	push	{r4, r5, r6, lr}
    c276:	b090      	sub	sp, #64	; 0x40
	config->baud_rate        = I2C_MASTER_BAUD_RATE_100KHZ;
    c278:	aa03      	add	r2, sp, #12
    c27a:	2364      	movs	r3, #100	; 0x64
    c27c:	9303      	str	r3, [sp, #12]
	config->baud_rate_high_speed = I2C_MASTER_BAUD_RATE_3400KHZ;
    c27e:	4b4d      	ldr	r3, [pc, #308]	; (c3b4 <edbg_eui_read_eui64+0x140>)
    c280:	6053      	str	r3, [r2, #4]
	config->transfer_speed       = I2C_MASTER_SPEED_STANDARD_AND_FAST;
    c282:	2300      	movs	r3, #0
    c284:	6093      	str	r3, [r2, #8]
	config->generator_source = GCLK_GENERATOR_0;
    c286:	7313      	strb	r3, [r2, #12]
	config->run_in_standby   = false;
    c288:	7613      	strb	r3, [r2, #24]
	config->start_hold_time  = I2C_MASTER_START_HOLD_TIME_300NS_600NS;
    c28a:	2180      	movs	r1, #128	; 0x80
    c28c:	0389      	lsls	r1, r1, #14
    c28e:	6111      	str	r1, [r2, #16]
	config->buffer_timeout   = 65535;
    c290:	2101      	movs	r1, #1
    c292:	4249      	negs	r1, r1
    c294:	82d1      	strh	r1, [r2, #22]
	config->unknown_bus_state_timeout = 65535;
    c296:	8291      	strh	r1, [r2, #20]
	config->scl_low_timeout  = false;
    c298:	3125      	adds	r1, #37	; 0x25
    c29a:	5453      	strb	r3, [r2, r1]
	config->inactive_timeout = I2C_MASTER_INACTIVE_TIMEOUT_DISABLED;
    c29c:	6293      	str	r3, [r2, #40]	; 0x28
	config->scl_stretch_only_after_ack_bit = false;
    c29e:	3108      	adds	r1, #8
    c2a0:	5453      	strb	r3, [r2, r1]
	config->slave_scl_low_extend_timeout   = false;
    c2a2:	3101      	adds	r1, #1
    c2a4:	5453      	strb	r3, [r2, r1]
	config->master_scl_low_extend_timeout  = false;
    c2a6:	3101      	adds	r1, #1
    c2a8:	5453      	strb	r3, [r2, r1]
	config->sda_scl_rise_time_ns = 215;
    c2aa:	33d7      	adds	r3, #215	; 0xd7
    c2ac:	8613      	strh	r3, [r2, #48]	; 0x30
  int timeout2 = 0;
  bool random_mac_address = false;
  uint8_t edbg_status = 0xFF;
  struct i2c_master_config config_i2c_master;
  i2c_master_get_config_defaults(&config_i2c_master);
  config_i2c_master.pinmux_pad0  = EDBG_I2C_SERCOM_PINMUX_PAD0;
    c2ae:	4b42      	ldr	r3, [pc, #264]	; (c3b8 <edbg_eui_read_eui64+0x144>)
    c2b0:	61d3      	str	r3, [r2, #28]
  config_i2c_master.pinmux_pad1  = EDBG_I2C_SERCOM_PINMUX_PAD1;
    c2b2:	4b42      	ldr	r3, [pc, #264]	; (c3bc <edbg_eui_read_eui64+0x148>)
    c2b4:	6213      	str	r3, [r2, #32]

  i2c_master_init(&i2c_master_instance, EDBG_I2C_MODULE, &config_i2c_master);
    c2b6:	4c42      	ldr	r4, [pc, #264]	; (c3c0 <edbg_eui_read_eui64+0x14c>)
    c2b8:	4942      	ldr	r1, [pc, #264]	; (c3c4 <edbg_eui_read_eui64+0x150>)
    c2ba:	0020      	movs	r0, r4
    c2bc:	4b42      	ldr	r3, [pc, #264]	; (c3c8 <edbg_eui_read_eui64+0x154>)
    c2be:	4798      	blx	r3
	SercomI2cm *const i2c_module = &(module->hw->I2CM);
    c2c0:	6822      	ldr	r2, [r4, #0]
	return (i2c_hw->SYNCBUSY.reg & SERCOM_I2CM_SYNCBUSY_MASK);
    c2c2:	2107      	movs	r1, #7
    c2c4:	69d3      	ldr	r3, [r2, #28]
	while (i2c_master_is_syncing(module)) {
    c2c6:	4219      	tst	r1, r3
    c2c8:	d1fc      	bne.n	c2c4 <edbg_eui_read_eui64+0x50>
	i2c_module->CTRLA.reg |= SERCOM_I2CM_CTRLA_ENABLE;
    c2ca:	6813      	ldr	r3, [r2, #0]
    c2cc:	2102      	movs	r1, #2
    c2ce:	430b      	orrs	r3, r1
    c2d0:	6013      	str	r3, [r2, #0]
		if(timeout_counter >= (module->unknown_bus_state_timeout)) {
    c2d2:	4b3b      	ldr	r3, [pc, #236]	; (c3c0 <edbg_eui_read_eui64+0x14c>)
    c2d4:	88dc      	ldrh	r4, [r3, #6]
	uint32_t timeout_counter = 0;
    c2d6:	2300      	movs	r3, #0
	while (!(i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE(1))) {
    c2d8:	2010      	movs	r0, #16
    c2da:	8b51      	ldrh	r1, [r2, #26]
    c2dc:	4201      	tst	r1, r0
    c2de:	d104      	bne.n	c2ea <edbg_eui_read_eui64+0x76>
		timeout_counter++;
    c2e0:	3301      	adds	r3, #1
		if(timeout_counter >= (module->unknown_bus_state_timeout)) {
    c2e2:	42a3      	cmp	r3, r4
    c2e4:	d3f9      	bcc.n	c2da <edbg_eui_read_eui64+0x66>
			i2c_module->STATUS.reg = SERCOM_I2CM_STATUS_BUSSTATE(1);
    c2e6:	2310      	movs	r3, #16
    c2e8:	8353      	strh	r3, [r2, #26]

  i2c_master_enable(&i2c_master_instance);

  struct i2c_master_packet packet = {
    c2ea:	466a      	mov	r2, sp
    c2ec:	4b37      	ldr	r3, [pc, #220]	; (c3cc <edbg_eui_read_eui64+0x158>)
    c2ee:	cb13      	ldmia	r3!, {r0, r1, r4}
    c2f0:	c213      	stmia	r2!, {r0, r1, r4}
  int timeout2 = 0;
    c2f2:	2600      	movs	r6, #0
    .hs_master_code  = 0x0,
  };
   
    do
    {
	    edbg_status = i2c_master_write_packet_wait_no_stop(&i2c_master_instance, &packet);
    c2f4:	4c32      	ldr	r4, [pc, #200]	; (c3c0 <edbg_eui_read_eui64+0x14c>)
    c2f6:	4d36      	ldr	r5, [pc, #216]	; (c3d0 <edbg_eui_read_eui64+0x15c>)
    c2f8:	e003      	b.n	c302 <edbg_eui_read_eui64+0x8e>
	    if(edbg_status == STATUS_ERR_BAD_ADDRESS)
		{
			if(timeout2++ == SLAVE_WAIT_TIMEOUT)
    c2fa:	1c73      	adds	r3, r6, #1
    c2fc:	2e0a      	cmp	r6, #10
    c2fe:	d033      	beq.n	c368 <edbg_eui_read_eui64+0xf4>
    c300:	001e      	movs	r6, r3
	    edbg_status = i2c_master_write_packet_wait_no_stop(&i2c_master_instance, &packet);
    c302:	4669      	mov	r1, sp
    c304:	0020      	movs	r0, r4
    c306:	47a8      	blx	r5
	    if(edbg_status == STATUS_ERR_BAD_ADDRESS)
    c308:	2818      	cmp	r0, #24
    c30a:	d0f6      	beq.n	c2fa <edbg_eui_read_eui64+0x86>
				random_mac_address = true;
				timeout2 = 0;
				break;
			}
		}
		else if(edbg_status == STATUS_ERR_TIMEOUT) {
    c30c:	2812      	cmp	r0, #18
    c30e:	d02b      	beq.n	c368 <edbg_eui_read_eui64+0xf4>
		PRINTF("Timeout 1\n");
		random_mac_address = true;	
		break;
		}
    } while (edbg_status!=STATUS_OK && edbg_status!=0xFF);
    c310:	3801      	subs	r0, #1
    c312:	b2c0      	uxtb	r0, r0
    c314:	28fd      	cmp	r0, #253	; 0xfd
    c316:	d9f4      	bls.n	c302 <edbg_eui_read_eui64+0x8e>
	
  packet.data = readbuf;
    c318:	4b2e      	ldr	r3, [pc, #184]	; (c3d4 <edbg_eui_read_eui64+0x160>)
    c31a:	9301      	str	r3, [sp, #4]
  packet.data_length = sizeof(readbuf);
    c31c:	2380      	movs	r3, #128	; 0x80
    c31e:	005b      	lsls	r3, r3, #1
    c320:	466a      	mov	r2, sp
    c322:	8053      	strh	r3, [r2, #2]
if(random_mac_address == false)
{
  do 
  {
	  edbg_status = i2c_master_read_packet_wait(&i2c_master_instance, &packet) ;
    c324:	4c26      	ldr	r4, [pc, #152]	; (c3c0 <edbg_eui_read_eui64+0x14c>)
    c326:	4d2c      	ldr	r5, [pc, #176]	; (c3d8 <edbg_eui_read_eui64+0x164>)
    c328:	4669      	mov	r1, sp
    c32a:	0020      	movs	r0, r4
    c32c:	47a8      	blx	r5
	    if(edbg_status==STATUS_ERR_BAD_ADDRESS)
    c32e:	2818      	cmp	r0, #24
    c330:	d03c      	beq.n	c3ac <edbg_eui_read_eui64+0x138>
	    {			
			PRINTF("I2C Slave Not Available");
			random_mac_address = true;	
		    break;
	    }
		else if(edbg_status == STATUS_ERR_TIMEOUT) {
    c332:	2812      	cmp	r0, #18
    c334:	d03a      	beq.n	c3ac <edbg_eui_read_eui64+0x138>
			random_mac_address = true;	
			PRINTF("Timeout 2\n");
			break;
		}		
  } while (edbg_status!=STATUS_OK && edbg_status!=0xFF);
    c336:	3801      	subs	r0, #1
    c338:	b2c0      	uxtb	r0, r0
    c33a:	28fd      	cmp	r0, #253	; 0xfd
    c33c:	d9f4      	bls.n	c328 <edbg_eui_read_eui64+0xb4>
}
  i2c_master_reset(&i2c_master_instance);
    c33e:	4820      	ldr	r0, [pc, #128]	; (c3c0 <edbg_eui_read_eui64+0x14c>)
    c340:	4b26      	ldr	r3, [pc, #152]	; (c3dc <edbg_eui_read_eui64+0x168>)
    c342:	4798      	blx	r3
  if(random_mac_address || !(readbuf[0] ^ readbuf[1] ^ readbuf[2] ^ readbuf[3] ^ readbuf[4] ^ readbuf[5] ^ readbuf[6] ^ readbuf[7]))
    c344:	4a23      	ldr	r2, [pc, #140]	; (c3d4 <edbg_eui_read_eui64+0x160>)
    c346:	7813      	ldrb	r3, [r2, #0]
    c348:	7851      	ldrb	r1, [r2, #1]
    c34a:	404b      	eors	r3, r1
    c34c:	7891      	ldrb	r1, [r2, #2]
    c34e:	404b      	eors	r3, r1
    c350:	78d1      	ldrb	r1, [r2, #3]
    c352:	404b      	eors	r3, r1
    c354:	7911      	ldrb	r1, [r2, #4]
    c356:	404b      	eors	r3, r1
    c358:	7951      	ldrb	r1, [r2, #5]
    c35a:	404b      	eors	r3, r1
    c35c:	7991      	ldrb	r1, [r2, #6]
    c35e:	79d2      	ldrb	r2, [r2, #7]
    c360:	404b      	eors	r3, r1
    c362:	429a      	cmp	r2, r3
    c364:	d11f      	bne.n	c3a6 <edbg_eui_read_eui64+0x132>
    c366:	e008      	b.n	c37a <edbg_eui_read_eui64+0x106>
  packet.data = readbuf;
    c368:	4b1a      	ldr	r3, [pc, #104]	; (c3d4 <edbg_eui_read_eui64+0x160>)
    c36a:	9301      	str	r3, [sp, #4]
  packet.data_length = sizeof(readbuf);
    c36c:	2380      	movs	r3, #128	; 0x80
    c36e:	005b      	lsls	r3, r3, #1
    c370:	466a      	mov	r2, sp
    c372:	8053      	strh	r3, [r2, #2]
  i2c_master_reset(&i2c_master_instance);
    c374:	4812      	ldr	r0, [pc, #72]	; (c3c0 <edbg_eui_read_eui64+0x14c>)
    c376:	4b19      	ldr	r3, [pc, #100]	; (c3dc <edbg_eui_read_eui64+0x168>)
    c378:	4798      	blx	r3
  {
	  unsigned int seed;
	  seed = ((*S_NO_WORD0) ^ (*S_NO_WORD1) ^ (*S_NO_WORD2) ^ (*S_NO_WORD3));
    c37a:	4b19      	ldr	r3, [pc, #100]	; (c3e0 <edbg_eui_read_eui64+0x16c>)
    c37c:	6818      	ldr	r0, [r3, #0]
    c37e:	4b19      	ldr	r3, [pc, #100]	; (c3e4 <edbg_eui_read_eui64+0x170>)
    c380:	681b      	ldr	r3, [r3, #0]
    c382:	4058      	eors	r0, r3
    c384:	4b18      	ldr	r3, [pc, #96]	; (c3e8 <edbg_eui_read_eui64+0x174>)
    c386:	681b      	ldr	r3, [r3, #0]
    c388:	4058      	eors	r0, r3
    c38a:	4b18      	ldr	r3, [pc, #96]	; (c3ec <edbg_eui_read_eui64+0x178>)
    c38c:	681b      	ldr	r3, [r3, #0]
    c38e:	4058      	eors	r0, r3
	  srand(seed);
    c390:	4b17      	ldr	r3, [pc, #92]	; (c3f0 <edbg_eui_read_eui64+0x17c>)
    c392:	4798      	blx	r3
    c394:	4c0f      	ldr	r4, [pc, #60]	; (c3d4 <edbg_eui_read_eui64+0x160>)
    c396:	0026      	movs	r6, r4
    c398:	3608      	adds	r6, #8
	  //printf("\r\n Generating Random MAC \r\n");
	  for (uint8_t i = 0; i < 8; i++) {
		  *(readbuf+i) = rand();
    c39a:	4d16      	ldr	r5, [pc, #88]	; (c3f4 <edbg_eui_read_eui64+0x180>)
    c39c:	47a8      	blx	r5
    c39e:	7020      	strb	r0, [r4, #0]
    c3a0:	3401      	adds	r4, #1
	  for (uint8_t i = 0; i < 8; i++) {
    c3a2:	42a6      	cmp	r6, r4
    c3a4:	d1fa      	bne.n	c39c <edbg_eui_read_eui64+0x128>
	  }
	  
  }
  return readbuf;
}
    c3a6:	480b      	ldr	r0, [pc, #44]	; (c3d4 <edbg_eui_read_eui64+0x160>)
    c3a8:	b010      	add	sp, #64	; 0x40
    c3aa:	bd70      	pop	{r4, r5, r6, pc}
  i2c_master_reset(&i2c_master_instance);
    c3ac:	4804      	ldr	r0, [pc, #16]	; (c3c0 <edbg_eui_read_eui64+0x14c>)
    c3ae:	4b0b      	ldr	r3, [pc, #44]	; (c3dc <edbg_eui_read_eui64+0x168>)
    c3b0:	4798      	blx	r3
    c3b2:	e7e2      	b.n	c37a <edbg_eui_read_eui64+0x106>
    c3b4:	00000d48 	.word	0x00000d48
    c3b8:	00100002 	.word	0x00100002
    c3bc:	00110002 	.word	0x00110002
    c3c0:	200027e4 	.word	0x200027e4
    c3c4:	42000c00 	.word	0x42000c00
    c3c8:	00006a65 	.word	0x00006a65
    c3cc:	00016680 	.word	0x00016680
    c3d0:	0000707d 	.word	0x0000707d
    c3d4:	200026e4 	.word	0x200026e4
    c3d8:	00007069 	.word	0x00007069
    c3dc:	00006d2d 	.word	0x00006d2d
    c3e0:	0080a00c 	.word	0x0080a00c
    c3e4:	0080a040 	.word	0x0080a040
    c3e8:	0080a044 	.word	0x0080a044
    c3ec:	0080a048 	.word	0x0080a048
    c3f0:	00015299 	.word	0x00015299
    c3f4:	000152f5 	.word	0x000152f5

0000c3f8 <nvm_init>:

	return STATUS_OK;
}

status_code_t nvm_init(mem_type_t mem)
{
    c3f8:	b500      	push	{lr}
    c3fa:	b083      	sub	sp, #12
	if (INT_FLASH == mem) {
    c3fc:	2800      	cmp	r0, #0
    c3fe:	d110      	bne.n	c422 <nvm_init+0x2a>
	config->sleep_power_mode  = NVM_SLEEP_POWER_MODE_WAKEONACCESS;
    c400:	2300      	movs	r3, #0
    c402:	466a      	mov	r2, sp
    c404:	7013      	strb	r3, [r2, #0]
	config->wait_states       = NVMCTRL->CTRLB.bit.RWS;
    c406:	4a08      	ldr	r2, [pc, #32]	; (c428 <nvm_init+0x30>)
    c408:	6852      	ldr	r2, [r2, #4]
	config->disable_cache     = false;
    c40a:	466a      	mov	r2, sp
    c40c:	70d3      	strb	r3, [r2, #3]
	config->cache_readmode    = NVM_CACHE_READMODE_NO_MISS_PENALTY;
    c40e:	7113      	strb	r3, [r2, #4]
		struct nvm_config config;
		/* Get the default configuration */
		nvm_get_config_defaults(&config);

		/* Enable automatic page write mode */
		config.manual_page_write = false;
    c410:	7053      	strb	r3, [r2, #1]

		/* Set wait state to 1 */
		config.wait_states = 2;
    c412:	3302      	adds	r3, #2
    c414:	7093      	strb	r3, [r2, #2]

		/* Set the NVM configuration */
		nvm_set_config(&config);
    c416:	4668      	mov	r0, sp
    c418:	4b04      	ldr	r3, [pc, #16]	; (c42c <nvm_init+0x34>)
    c41a:	4798      	blx	r3

		return STATUS_OK;
    c41c:	2000      	movs	r0, #0
	}

	return ERR_INVALID_ARG;
}
    c41e:	b003      	add	sp, #12
    c420:	bd00      	pop	{pc}
	return ERR_INVALID_ARG;
    c422:	2008      	movs	r0, #8
    c424:	4240      	negs	r0, r0
    c426:	e7fa      	b.n	c41e <nvm_init+0x26>
    c428:	41004000 	.word	0x41004000
    c42c:	00006809 	.word	0x00006809

0000c430 <sal_init>:
 *
 * This functions initializes the SAL.
 */
void sal_init(void)
{
}
    c430:	4770      	bx	lr
    c432:	Address 0x0000c432 is out of bounds.


0000c434 <sal_aes_restart>:
 * When using sal_aes_wrrd(), call sal_aes_read() to get the result
 * of the last AES operation BEFORE you put the transceiver unit to
 * sleep state!
 */
void sal_aes_restart(void)
{
    c434:	b570      	push	{r4, r5, r6, lr}
	 * This is not required anymore for SPI transceivers beyond
	 * these two mentioned transceivers.
	 */
	uint8_t *keyp;
	uint8_t save_cmd;
	if (last_dir == AES_DIR_ENCRYPT) {
    c436:	4b0c      	ldr	r3, [pc, #48]	; (c468 <sal_aes_restart+0x34>)
    c438:	781b      	ldrb	r3, [r3, #0]
    c43a:	2b00      	cmp	r3, #0
    c43c:	d012      	beq.n	c464 <sal_aes_restart+0x30>
		keyp = enc_key;
	} else {
		keyp = dec_key;
    c43e:	490b      	ldr	r1, [pc, #44]	; (c46c <sal_aes_restart+0x38>)
	}

	save_cmd = aes_buf[0];
    c440:	4c0b      	ldr	r4, [pc, #44]	; (c470 <sal_aes_restart+0x3c>)
    c442:	7825      	ldrb	r5, [r4, #0]
	aes_buf[0] = SR_MASK(SR_AES_MODE, AES_MODE_KEY);
    c444:	2310      	movs	r3, #16
    c446:	7023      	strb	r3, [r4, #0]

	/* Fill in key. */
	memcpy(aes_buf + 1, keyp, AES_KEYSIZE);
    c448:	1c60      	adds	r0, r4, #1
    c44a:	2210      	movs	r2, #16
    c44c:	4b09      	ldr	r3, [pc, #36]	; (c474 <sal_aes_restart+0x40>)
    c44e:	4798      	blx	r3

	/* Write to SRAM in one step. */
	trx_sram_write((AES_BASE_ADDR + RG_AES_CTRL), aes_buf,
    c450:	2211      	movs	r2, #17
    c452:	0021      	movs	r1, r4
    c454:	2083      	movs	r0, #131	; 0x83
    c456:	4b08      	ldr	r3, [pc, #32]	; (c478 <sal_aes_restart+0x44>)
    c458:	4798      	blx	r3
			AES_BLOCKSIZE + 1);

	aes_buf[0] = save_cmd;
    c45a:	7025      	strb	r5, [r4, #0]
	setup_flag = true;
    c45c:	2201      	movs	r2, #1
    c45e:	4b07      	ldr	r3, [pc, #28]	; (c47c <sal_aes_restart+0x48>)
    c460:	701a      	strb	r2, [r3, #0]
}
    c462:	bd70      	pop	{r4, r5, r6, pc}
		keyp = enc_key;
    c464:	4906      	ldr	r1, [pc, #24]	; (c480 <sal_aes_restart+0x4c>)
    c466:	e7eb      	b.n	c440 <sal_aes_restart+0xc>
    c468:	2000008e 	.word	0x2000008e
    c46c:	20001ca4 	.word	0x20001ca4
    c470:	20001c90 	.word	0x20001c90
    c474:	00014cdf 	.word	0x00014cdf
    c478:	0000cbf1 	.word	0x0000cbf1
    c47c:	20001cc4 	.word	0x20001cc4
    c480:	20001cb4 	.word	0x20001cb4

0000c484 <_sal_aes_clean_up>:
/**
 * @brief Cleans up the SAL/AES after STB has been finished
 */
void _sal_aes_clean_up(void)
{
}
    c484:	4770      	bx	lr
    c486:	Address 0x0000c486 is out of bounds.


0000c488 <sal_aes_wrrd>:
 * @param[in]  idata  AES block to be en/decrypted
 * @param[out] odata  Result of previous operation
 *                    (odata may be NULL or equal to idata)
 */
void sal_aes_wrrd(uint8_t *idata, uint8_t *odata)
{
    c488:	b570      	push	{r4, r5, r6, lr}
    c48a:	0003      	movs	r3, r0
    c48c:	000d      	movs	r5, r1
	 * Write data and start the operation.
	 * AES_MODE in aes_buf[0] and aes_buf[AES_BLOCKSIZE+1] as well as
	 * AES_REQUEST in aes_buf[AES_BLOCKSIZE+1]
	 * were set before in sal_aes_setup()
	 */
	memcpy(aes_buf + 1, idata, AES_BLOCKSIZE);
    c48e:	4c14      	ldr	r4, [pc, #80]	; (c4e0 <sal_aes_wrrd+0x58>)
    c490:	1c60      	adds	r0, r4, #1
    c492:	2210      	movs	r2, #16
    c494:	0019      	movs	r1, r3
    c496:	4b13      	ldr	r3, [pc, #76]	; (c4e4 <sal_aes_wrrd+0x5c>)
    c498:	4798      	blx	r3

	/* trx_aes_wrrd() overwrites aes_buf, the last byte must be saved.
	**/
	save_cmd = aes_buf[AES_BLOCKSIZE + 1];
    c49a:	7c64      	ldrb	r4, [r4, #17]

	if (setup_flag) {
    c49c:	4b12      	ldr	r3, [pc, #72]	; (c4e8 <sal_aes_wrrd+0x60>)
    c49e:	781b      	ldrb	r3, [r3, #0]
    c4a0:	2b00      	cmp	r3, #0
    c4a2:	d015      	beq.n	c4d0 <sal_aes_wrrd+0x48>
		trx_aes_wrrd((AES_BASE_ADDR + RG_AES_CTRL), aes_buf,
    c4a4:	2212      	movs	r2, #18
    c4a6:	490e      	ldr	r1, [pc, #56]	; (c4e0 <sal_aes_wrrd+0x58>)
    c4a8:	2083      	movs	r0, #131	; 0x83
    c4aa:	4b10      	ldr	r3, [pc, #64]	; (c4ec <sal_aes_wrrd+0x64>)
    c4ac:	4798      	blx	r3
				AES_BLOCKSIZE + 2);

		setup_flag = false;
    c4ae:	2200      	movs	r2, #0
    c4b0:	4b0d      	ldr	r3, [pc, #52]	; (c4e8 <sal_aes_wrrd+0x60>)
    c4b2:	701a      	strb	r2, [r3, #0]
		trx_aes_wrrd((AES_BASE_ADDR + RG_AES_STATE_KEY_0),
				aes_buf + 1, AES_BLOCKSIZE + 1);
	}

	/* Restore the result. */
	if (odata != NULL) {
    c4b4:	2d00      	cmp	r5, #0
    c4b6:	d005      	beq.n	c4c4 <sal_aes_wrrd+0x3c>
		memcpy(odata, aes_buf + 1, AES_BLOCKSIZE);
    c4b8:	2210      	movs	r2, #16
    c4ba:	4909      	ldr	r1, [pc, #36]	; (c4e0 <sal_aes_wrrd+0x58>)
    c4bc:	3101      	adds	r1, #1
    c4be:	0028      	movs	r0, r5
    c4c0:	4b08      	ldr	r3, [pc, #32]	; (c4e4 <sal_aes_wrrd+0x5c>)
    c4c2:	4798      	blx	r3
	}

	aes_buf[AES_BLOCKSIZE + 1] = save_cmd;
    c4c4:	4b06      	ldr	r3, [pc, #24]	; (c4e0 <sal_aes_wrrd+0x58>)
    c4c6:	745c      	strb	r4, [r3, #17]

	/* Wait for the operation to finish for 24 us. */
	delay_us(24);
    c4c8:	2018      	movs	r0, #24
    c4ca:	4b09      	ldr	r3, [pc, #36]	; (c4f0 <sal_aes_wrrd+0x68>)
    c4cc:	4798      	blx	r3
}
    c4ce:	bd70      	pop	{r4, r5, r6, pc}
		trx_aes_wrrd((AES_BASE_ADDR + RG_AES_STATE_KEY_0),
    c4d0:	2211      	movs	r2, #17
    c4d2:	4903      	ldr	r1, [pc, #12]	; (c4e0 <sal_aes_wrrd+0x58>)
    c4d4:	3101      	adds	r1, #1
    c4d6:	2084      	movs	r0, #132	; 0x84
    c4d8:	4b04      	ldr	r3, [pc, #16]	; (c4ec <sal_aes_wrrd+0x64>)
    c4da:	4798      	blx	r3
    c4dc:	e7ea      	b.n	c4b4 <sal_aes_wrrd+0x2c>
    c4de:	46c0      	nop			; (mov r8, r8)
    c4e0:	20001c90 	.word	0x20001c90
    c4e4:	00014cdf 	.word	0x00014cdf
    c4e8:	20001cc4 	.word	0x20001cc4
    c4ec:	0000cee5 	.word	0x0000cee5
    c4f0:	000064c9 	.word	0x000064c9

0000c4f4 <sal_aes_setup>:
{
    c4f4:	b5f0      	push	{r4, r5, r6, r7, lr}
    c4f6:	46c6      	mov	lr, r8
    c4f8:	b500      	push	{lr}
    c4fa:	b084      	sub	sp, #16
    c4fc:	0005      	movs	r5, r0
    c4fe:	000e      	movs	r6, r1
    c500:	0014      	movs	r4, r2
	if (key != NULL) {
    c502:	2800      	cmp	r0, #0
    c504:	d017      	beq.n	c536 <sal_aes_setup+0x42>
		dec_initialized = false;
    c506:	2200      	movs	r2, #0
    c508:	4b3e      	ldr	r3, [pc, #248]	; (c604 <sal_aes_setup+0x110>)
    c50a:	701a      	strb	r2, [r3, #0]
		last_dir = AES_DIR_VOID;
    c50c:	3202      	adds	r2, #2
    c50e:	4b3e      	ldr	r3, [pc, #248]	; (c608 <sal_aes_setup+0x114>)
    c510:	701a      	strb	r2, [r3, #0]
		memcpy(enc_key, key, AES_KEYSIZE);
    c512:	320e      	adds	r2, #14
    c514:	0001      	movs	r1, r0
    c516:	483d      	ldr	r0, [pc, #244]	; (c60c <sal_aes_setup+0x118>)
    c518:	4b3d      	ldr	r3, [pc, #244]	; (c610 <sal_aes_setup+0x11c>)
    c51a:	4698      	mov	r8, r3
    c51c:	4798      	blx	r3
		aes_buf[0] = SR_MASK(SR_AES_MODE, AES_MODE_KEY);
    c51e:	4f3d      	ldr	r7, [pc, #244]	; (c614 <sal_aes_setup+0x120>)
    c520:	2310      	movs	r3, #16
    c522:	703b      	strb	r3, [r7, #0]
		memcpy(aes_buf + 1, key, AES_KEYSIZE);
    c524:	1c78      	adds	r0, r7, #1
    c526:	2210      	movs	r2, #16
    c528:	0029      	movs	r1, r5
    c52a:	47c0      	blx	r8
		trx_sram_write((AES_BASE_ADDR + RG_AES_CTRL), aes_buf,
    c52c:	2211      	movs	r2, #17
    c52e:	0039      	movs	r1, r7
    c530:	2083      	movs	r0, #131	; 0x83
    c532:	4b39      	ldr	r3, [pc, #228]	; (c618 <sal_aes_setup+0x124>)
    c534:	4798      	blx	r3
	switch (dir) {
    c536:	2c00      	cmp	r4, #0
    c538:	d003      	beq.n	c542 <sal_aes_setup+0x4e>
    c53a:	2c01      	cmp	r4, #1
    c53c:	d02f      	beq.n	c59e <sal_aes_setup+0xaa>
		return false;
    c53e:	2000      	movs	r0, #0
    c540:	e01b      	b.n	c57a <sal_aes_setup+0x86>
		if (last_dir == AES_DIR_DECRYPT) {
    c542:	4b31      	ldr	r3, [pc, #196]	; (c608 <sal_aes_setup+0x114>)
    c544:	781b      	ldrb	r3, [r3, #0]
    c546:	2b01      	cmp	r3, #1
    c548:	d01b      	beq.n	c582 <sal_aes_setup+0x8e>
	last_dir = dir;
    c54a:	4b2f      	ldr	r3, [pc, #188]	; (c608 <sal_aes_setup+0x114>)
    c54c:	701c      	strb	r4, [r3, #0]
	switch (enc_mode) {
    c54e:	2e00      	cmp	r6, #0
    c550:	d002      	beq.n	c558 <sal_aes_setup+0x64>
		return (false);
    c552:	2000      	movs	r0, #0
	switch (enc_mode) {
    c554:	2e02      	cmp	r6, #2
    c556:	d110      	bne.n	c57a <sal_aes_setup+0x86>
		aes_buf[0] = SR_MASK(SR_AES_MODE, enc_mode) |
    c558:	0136      	lsls	r6, r6, #4
    c55a:	2370      	movs	r3, #112	; 0x70
    c55c:	401e      	ands	r6, r3
				SR_MASK(SR_AES_DIR, dir);
    c55e:	00e4      	lsls	r4, r4, #3
    c560:	3b68      	subs	r3, #104	; 0x68
    c562:	401c      	ands	r4, r3
		aes_buf[0] = SR_MASK(SR_AES_MODE, enc_mode) |
    c564:	4334      	orrs	r4, r6
    c566:	4b2b      	ldr	r3, [pc, #172]	; (c614 <sal_aes_setup+0x120>)
    c568:	701c      	strb	r4, [r3, #0]
				SR_MASK(SR_AES_DIR, dir) |
    c56a:	2680      	movs	r6, #128	; 0x80
    c56c:	4276      	negs	r6, r6
    c56e:	4334      	orrs	r4, r6
		aes_buf[AES_BLOCKSIZE + 1] = SR_MASK(SR_AES_MODE, enc_mode) |
    c570:	745c      	strb	r4, [r3, #17]
	setup_flag = true;
    c572:	2201      	movs	r2, #1
    c574:	4b29      	ldr	r3, [pc, #164]	; (c61c <sal_aes_setup+0x128>)
    c576:	701a      	strb	r2, [r3, #0]
	return (true);
    c578:	2001      	movs	r0, #1
}
    c57a:	b004      	add	sp, #16
    c57c:	bc04      	pop	{r2}
    c57e:	4690      	mov	r8, r2
    c580:	bdf0      	pop	{r4, r5, r6, r7, pc}
			aes_buf[0] = SR_MASK(SR_AES_MODE, AES_MODE_KEY);
    c582:	4d24      	ldr	r5, [pc, #144]	; (c614 <sal_aes_setup+0x120>)
    c584:	330f      	adds	r3, #15
    c586:	702b      	strb	r3, [r5, #0]
			memcpy(aes_buf + 1, enc_key, AES_KEYSIZE);
    c588:	1c68      	adds	r0, r5, #1
    c58a:	2210      	movs	r2, #16
    c58c:	491f      	ldr	r1, [pc, #124]	; (c60c <sal_aes_setup+0x118>)
    c58e:	4b20      	ldr	r3, [pc, #128]	; (c610 <sal_aes_setup+0x11c>)
    c590:	4798      	blx	r3
			trx_sram_write((AES_BASE_ADDR + RG_AES_CTRL),
    c592:	2211      	movs	r2, #17
    c594:	0029      	movs	r1, r5
    c596:	2083      	movs	r0, #131	; 0x83
    c598:	4b1f      	ldr	r3, [pc, #124]	; (c618 <sal_aes_setup+0x124>)
    c59a:	4798      	blx	r3
    c59c:	e7d5      	b.n	c54a <sal_aes_setup+0x56>
		if (last_dir != AES_DIR_DECRYPT) {
    c59e:	4b1a      	ldr	r3, [pc, #104]	; (c608 <sal_aes_setup+0x114>)
    c5a0:	781b      	ldrb	r3, [r3, #0]
    c5a2:	2b01      	cmp	r3, #1
    c5a4:	d0d1      	beq.n	c54a <sal_aes_setup+0x56>
			aes_buf[0] = SR_MASK(SR_AES_MODE, AES_MODE_KEY);
    c5a6:	2210      	movs	r2, #16
    c5a8:	4b1a      	ldr	r3, [pc, #104]	; (c614 <sal_aes_setup+0x120>)
    c5aa:	701a      	strb	r2, [r3, #0]
			if (!dec_initialized) {
    c5ac:	4b15      	ldr	r3, [pc, #84]	; (c604 <sal_aes_setup+0x110>)
    c5ae:	781b      	ldrb	r3, [r3, #0]
    c5b0:	2b00      	cmp	r3, #0
    c5b2:	d00e      	beq.n	c5d2 <sal_aes_setup+0xde>
			memcpy(aes_buf + 1, dec_key, AES_KEYSIZE);
    c5b4:	4d17      	ldr	r5, [pc, #92]	; (c614 <sal_aes_setup+0x120>)
    c5b6:	1c68      	adds	r0, r5, #1
    c5b8:	2210      	movs	r2, #16
    c5ba:	4919      	ldr	r1, [pc, #100]	; (c620 <sal_aes_setup+0x12c>)
    c5bc:	4b14      	ldr	r3, [pc, #80]	; (c610 <sal_aes_setup+0x11c>)
    c5be:	4798      	blx	r3
			trx_sram_write((AES_BASE_ADDR + RG_AES_CTRL),
    c5c0:	2211      	movs	r2, #17
    c5c2:	0029      	movs	r1, r5
    c5c4:	2083      	movs	r0, #131	; 0x83
    c5c6:	4b14      	ldr	r3, [pc, #80]	; (c618 <sal_aes_setup+0x124>)
    c5c8:	4798      	blx	r3
			dec_initialized = true;
    c5ca:	4b0e      	ldr	r3, [pc, #56]	; (c604 <sal_aes_setup+0x110>)
    c5cc:	2201      	movs	r2, #1
    c5ce:	701a      	strb	r2, [r3, #0]
    c5d0:	e7bb      	b.n	c54a <sal_aes_setup+0x56>
				aes_buf[0] = SR_MASK(SR_AES_MODE, AES_MODE_ECB);
    c5d2:	4d10      	ldr	r5, [pc, #64]	; (c614 <sal_aes_setup+0x120>)
    c5d4:	702b      	strb	r3, [r5, #0]
				aes_buf[AES_BLOCKSIZE + 1] = SR_MASK(
    c5d6:	3380      	adds	r3, #128	; 0x80
    c5d8:	746b      	strb	r3, [r5, #17]
				setup_flag = true; /* Needed in sal_aes_wrrd().
    c5da:	3a0f      	subs	r2, #15
    c5dc:	4b0f      	ldr	r3, [pc, #60]	; (c61c <sal_aes_setup+0x128>)
    c5de:	701a      	strb	r2, [r3, #0]
				sal_aes_wrrd(dummy, NULL);
    c5e0:	2100      	movs	r1, #0
    c5e2:	4668      	mov	r0, sp
    c5e4:	4b0f      	ldr	r3, [pc, #60]	; (c624 <sal_aes_setup+0x130>)
    c5e6:	4798      	blx	r3
				aes_buf[0] = SR_MASK(SR_AES_MODE, AES_MODE_KEY);
    c5e8:	2310      	movs	r3, #16
    c5ea:	702b      	strb	r3, [r5, #0]
				trx_sram_write(
    c5ec:	2201      	movs	r2, #1
    c5ee:	0029      	movs	r1, r5
    c5f0:	2083      	movs	r0, #131	; 0x83
    c5f2:	4b09      	ldr	r3, [pc, #36]	; (c618 <sal_aes_setup+0x124>)
    c5f4:	4798      	blx	r3
				trx_sram_read((AES_BASE_ADDR +
    c5f6:	2210      	movs	r2, #16
    c5f8:	4909      	ldr	r1, [pc, #36]	; (c620 <sal_aes_setup+0x12c>)
    c5fa:	2084      	movs	r0, #132	; 0x84
    c5fc:	4b0a      	ldr	r3, [pc, #40]	; (c628 <sal_aes_setup+0x134>)
    c5fe:	4798      	blx	r3
    c600:	e7d8      	b.n	c5b4 <sal_aes_setup+0xc0>
    c602:	46c0      	nop			; (mov r8, r8)
    c604:	20001ca2 	.word	0x20001ca2
    c608:	2000008e 	.word	0x2000008e
    c60c:	20001cb4 	.word	0x20001cb4
    c610:	00014cdf 	.word	0x00014cdf
    c614:	20001c90 	.word	0x20001c90
    c618:	0000cbf1 	.word	0x0000cbf1
    c61c:	20001cc4 	.word	0x20001cc4
    c620:	20001ca4 	.word	0x20001ca4
    c624:	0000c489 	.word	0x0000c489
    c628:	0000cd5d 	.word	0x0000cd5d

0000c62c <sal_aes_read>:
 * of a series of sal_aes_wrrd() calls.
 *
 * @param[out] data     - result of previous operation
 */
void sal_aes_read(uint8_t *data)
{
    c62c:	b510      	push	{r4, lr}
    c62e:	0001      	movs	r1, r0
	trx_sram_read((AES_BASE_ADDR + RG_AES_STATE_KEY_0), data,
    c630:	2210      	movs	r2, #16
    c632:	2084      	movs	r0, #132	; 0x84
    c634:	4b01      	ldr	r3, [pc, #4]	; (c63c <sal_aes_read+0x10>)
    c636:	4798      	blx	r3
			AES_BLOCKSIZE);
}
    c638:	bd10      	pop	{r4, pc}
    c63a:	46c0      	nop			; (mov r8, r8)
    c63c:	0000cd5d 	.word	0x0000cd5d

0000c640 <AT86RFX_ISR>:
void AT86RFX_ISR(void)
#else
AT86RFX_ISR()
#endif

{
    c640:	b510      	push	{r4, lr}
	eic_module->INTFLAG.reg = eic_mask;
    c642:	2201      	movs	r2, #1
    c644:	4b03      	ldr	r3, [pc, #12]	; (c654 <AT86RFX_ISR+0x14>)
    c646:	611a      	str	r2, [r3, #16]
	/*Clearing the RF interrupt*/
	trx_irq_flag_clr();
  	/*Calling the interrupt routines*/
	if (irq_hdl_trx) {
    c648:	4b03      	ldr	r3, [pc, #12]	; (c658 <AT86RFX_ISR+0x18>)
    c64a:	681b      	ldr	r3, [r3, #0]
    c64c:	2b00      	cmp	r3, #0
    c64e:	d000      	beq.n	c652 <AT86RFX_ISR+0x12>
		irq_hdl_trx();
    c650:	4798      	blx	r3
	}
}
    c652:	bd10      	pop	{r4, pc}
    c654:	40001800 	.word	0x40001800
    c658:	20001cc8 	.word	0x20001cc8

0000c65c <trx_spi_init>:

void trx_spi_init(void)
{
    c65c:	b530      	push	{r4, r5, lr}
    c65e:	b085      	sub	sp, #20
	config->address_enabled = false;
    c660:	4a34      	ldr	r2, [pc, #208]	; (c734 <trx_spi_init+0xd8>)
    c662:	2300      	movs	r3, #0
    c664:	7053      	strb	r3, [r2, #1]
	config->address         = 0;
    c666:	7093      	strb	r3, [r2, #2]
	/* Initialize SPI in master mode to access the transceiver */
#if SAMD || SAMR21 || SAML21 || SAMR30
	spi_slave_inst_get_config_defaults(&slave_dev_config);
	slave_dev_config.ss_pin = AT86RFX_SPI_CS;
    c668:	213f      	movs	r1, #63	; 0x3f
    c66a:	7011      	strb	r1, [r2, #0]
	slave->ss_pin          = config->ss_pin;
    c66c:	4c32      	ldr	r4, [pc, #200]	; (c738 <trx_spi_init+0xdc>)
    c66e:	7021      	strb	r1, [r4, #0]
	slave->address_enabled = config->address_enabled;
    c670:	7063      	strb	r3, [r4, #1]
	slave->address         = config->address;
    c672:	70a3      	strb	r3, [r4, #2]
	config->input_pull = PORT_PIN_PULL_UP;
    c674:	2201      	movs	r2, #1
    c676:	4669      	mov	r1, sp
    c678:	704a      	strb	r2, [r1, #1]
	config->powersave  = false;
    c67a:	708b      	strb	r3, [r1, #2]
	pin_conf.direction = PORT_PIN_DIR_OUTPUT;
    c67c:	700a      	strb	r2, [r1, #0]
	port_pin_set_config(slave->ss_pin, &pin_conf);
    c67e:	203f      	movs	r0, #63	; 0x3f
    c680:	4b2e      	ldr	r3, [pc, #184]	; (c73c <trx_spi_init+0xe0>)
    c682:	4798      	blx	r3
	port_pin_set_output_level(slave->ss_pin, true);
    c684:	7822      	ldrb	r2, [r4, #0]
	if (port_index < PORT_INST_NUM) {
    c686:	09d1      	lsrs	r1, r2, #7
		return NULL;
    c688:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
    c68a:	2900      	cmp	r1, #0
    c68c:	d104      	bne.n	c698 <trx_spi_init+0x3c>
		return &(ports[port_index]->Group[group_index]);
    c68e:	0953      	lsrs	r3, r2, #5
    c690:	01db      	lsls	r3, r3, #7
    c692:	492b      	ldr	r1, [pc, #172]	; (c740 <trx_spi_init+0xe4>)
    c694:	468c      	mov	ip, r1
    c696:	4463      	add	r3, ip
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    c698:	211f      	movs	r1, #31
    c69a:	4011      	ands	r1, r2
    c69c:	2201      	movs	r2, #1
    c69e:	0010      	movs	r0, r2
    c6a0:	4088      	lsls	r0, r1
		port_base->OUTSET.reg = pin_mask;
    c6a2:	6198      	str	r0, [r3, #24]
	config->mode             = SPI_MODE_MASTER;
    c6a4:	4c27      	ldr	r4, [pc, #156]	; (c744 <trx_spi_init+0xe8>)
    c6a6:	7022      	strb	r2, [r4, #0]
	config->data_order       = SPI_DATA_ORDER_MSB;
    c6a8:	2300      	movs	r3, #0
    c6aa:	6063      	str	r3, [r4, #4]
	config->transfer_mode    = SPI_TRANSFER_MODE_0;
    c6ac:	60a3      	str	r3, [r4, #8]
	config->character_size   = SPI_CHARACTER_SIZE_8BIT;
    c6ae:	7423      	strb	r3, [r4, #16]
	config->run_in_standby   = false;
    c6b0:	7463      	strb	r3, [r4, #17]
	config->receiver_enable  = true;
    c6b2:	74a2      	strb	r2, [r4, #18]
	config->select_slave_low_detect_enable= true;
    c6b4:	74e2      	strb	r2, [r4, #19]
	config->master_slave_select_enable= false;
    c6b6:	7523      	strb	r3, [r4, #20]
	config->generator_source = GCLK_GENERATOR_0;
    c6b8:	3223      	adds	r2, #35	; 0x23
    c6ba:	54a3      	strb	r3, [r4, r2]
	memset(&(config->mode_specific), 0, sizeof(config->mode_specific));
    c6bc:	0020      	movs	r0, r4
    c6be:	3018      	adds	r0, #24
    c6c0:	3a18      	subs	r2, #24
    c6c2:	2100      	movs	r1, #0
    c6c4:	4b20      	ldr	r3, [pc, #128]	; (c748 <trx_spi_init+0xec>)
    c6c6:	4798      	blx	r3
	spi_attach_slave(&slave, &slave_dev_config);
	spi_get_config_defaults(&config);
	config.mux_setting = AT86RFX_SPI_SERCOM_MUX_SETTING;
    c6c8:	2380      	movs	r3, #128	; 0x80
    c6ca:	025b      	lsls	r3, r3, #9
    c6cc:	60e3      	str	r3, [r4, #12]
	config.mode_specific.master.baudrate = AT86RFX_SPI_BAUDRATE;
    c6ce:	4b1f      	ldr	r3, [pc, #124]	; (c74c <trx_spi_init+0xf0>)
    c6d0:	61a3      	str	r3, [r4, #24]
	config.pinmux_pad0 = AT86RFX_SPI_SERCOM_PINMUX_PAD0;
    c6d2:	4b1f      	ldr	r3, [pc, #124]	; (c750 <trx_spi_init+0xf4>)
    c6d4:	62a3      	str	r3, [r4, #40]	; 0x28
	config.pinmux_pad1 = AT86RFX_SPI_SERCOM_PINMUX_PAD1;
    c6d6:	2301      	movs	r3, #1
    c6d8:	425b      	negs	r3, r3
    c6da:	62e3      	str	r3, [r4, #44]	; 0x2c
	config.pinmux_pad2 = AT86RFX_SPI_SERCOM_PINMUX_PAD2;
    c6dc:	4b1d      	ldr	r3, [pc, #116]	; (c754 <trx_spi_init+0xf8>)
    c6de:	6323      	str	r3, [r4, #48]	; 0x30
	config.pinmux_pad3 = AT86RFX_SPI_SERCOM_PINMUX_PAD3;
    c6e0:	4b1d      	ldr	r3, [pc, #116]	; (c758 <trx_spi_init+0xfc>)
    c6e2:	6363      	str	r3, [r4, #52]	; 0x34
	spi_init(&master, AT86RFX_SPI, &config);
    c6e4:	4d1d      	ldr	r5, [pc, #116]	; (c75c <trx_spi_init+0x100>)
    c6e6:	0022      	movs	r2, r4
    c6e8:	491d      	ldr	r1, [pc, #116]	; (c760 <trx_spi_init+0x104>)
    c6ea:	0028      	movs	r0, r5
    c6ec:	4b1d      	ldr	r3, [pc, #116]	; (c764 <trx_spi_init+0x108>)
    c6ee:	4798      	blx	r3
	SercomSpi *const spi_module = &(module->hw->SPI);
    c6f0:	682a      	ldr	r2, [r5, #0]
	return (spi_module->SYNCBUSY.reg);
    c6f2:	69d3      	ldr	r3, [r2, #28]
	while (spi_is_syncing(module)) {
    c6f4:	2b00      	cmp	r3, #0
    c6f6:	d1fc      	bne.n	c6f2 <trx_spi_init+0x96>
	spi_module->CTRLA.reg |= SERCOM_SPI_CTRLA_ENABLE;
    c6f8:	6813      	ldr	r3, [r2, #0]
    c6fa:	2502      	movs	r5, #2
    c6fc:	432b      	orrs	r3, r5
    c6fe:	6013      	str	r3, [r2, #0]
	spi_enable(&master);

	struct extint_chan_conf eint_chan_conf;
	extint_chan_get_config_defaults(&eint_chan_conf);
    c700:	ac01      	add	r4, sp, #4
    c702:	0020      	movs	r0, r4
    c704:	4b18      	ldr	r3, [pc, #96]	; (c768 <trx_spi_init+0x10c>)
    c706:	4798      	blx	r3
	eint_chan_conf.gpio_pin = AT86RFX_IRQ_PIN;
    c708:	2320      	movs	r3, #32
    c70a:	9301      	str	r3, [sp, #4]
	eint_chan_conf.gpio_pin_mux = AT86RFX_IRQ_PINMUX;
    c70c:	2380      	movs	r3, #128	; 0x80
    c70e:	039b      	lsls	r3, r3, #14
    c710:	6063      	str	r3, [r4, #4]
	eint_chan_conf.gpio_pin_pull      = EXTINT_PULL_DOWN;
    c712:	7225      	strb	r5, [r4, #8]
	#if (SAML21 || SAMR30)
	eint_chan_conf.enable_async_edge_detection = false;
	#else
	eint_chan_conf.wake_if_sleeping    = true;
    c714:	2301      	movs	r3, #1
    c716:	7263      	strb	r3, [r4, #9]
	#endif
	eint_chan_conf.filter_input_signal = false;
    c718:	2200      	movs	r2, #0
    c71a:	72a2      	strb	r2, [r4, #10]
	eint_chan_conf.detection_criteria  = EXTINT_DETECT_RISING;
    c71c:	72e3      	strb	r3, [r4, #11]
	extint_chan_set_config(AT86RFX_IRQ_CHAN, &eint_chan_conf);
    c71e:	0021      	movs	r1, r4
    c720:	2000      	movs	r0, #0
    c722:	4b12      	ldr	r3, [pc, #72]	; (c76c <trx_spi_init+0x110>)
    c724:	4798      	blx	r3
	extint_register_callback(AT86RFX_ISR, AT86RFX_IRQ_CHAN,
    c726:	2200      	movs	r2, #0
    c728:	2100      	movs	r1, #0
    c72a:	4811      	ldr	r0, [pc, #68]	; (c770 <trx_spi_init+0x114>)
    c72c:	4b11      	ldr	r3, [pc, #68]	; (c774 <trx_spi_init+0x118>)
    c72e:	4798      	blx	r3
	spi_master_setup_device(AT86RFX_SPI, &SPI_AT86RFX_DEVICE, SPI_MODE_0,
			AT86RFX_SPI_BAUDRATE, 0);
	spi_enable(AT86RFX_SPI);
	AT86RFX_INTC_INIT();
#endif
}
    c730:	b005      	add	sp, #20
    c732:	bd30      	pop	{r4, r5, pc}
    c734:	200027f4 	.word	0x200027f4
    c738:	200027f8 	.word	0x200027f8
    c73c:	00006a35 	.word	0x00006a35
    c740:	41004400 	.word	0x41004400
    c744:	200027fc 	.word	0x200027fc
    c748:	00014cf1 	.word	0x00014cf1
    c74c:	003d0900 	.word	0x003d0900
    c750:	00530005 	.word	0x00530005
    c754:	003e0005 	.word	0x003e0005
    c758:	00520005 	.word	0x00520005
    c75c:	20002834 	.word	0x20002834
    c760:	42001800 	.word	0x42001800
    c764:	000074d5 	.word	0x000074d5
    c768:	0000677d 	.word	0x0000677d
    c76c:	00006791 	.word	0x00006791
    c770:	0000c641 	.word	0x0000c641
    c774:	00006639 	.word	0x00006639

0000c778 <PhyReset>:

void PhyReset(void)
{
    c778:	b570      	push	{r4, r5, r6, lr}
    c77a:	4c08      	ldr	r4, [pc, #32]	; (c79c <PhyReset+0x24>)
    c77c:	2580      	movs	r5, #128	; 0x80
    c77e:	022d      	lsls	r5, r5, #8
    c780:	61a5      	str	r5, [r4, #24]
		port_base->OUTCLR.reg = pin_mask;
    c782:	2280      	movs	r2, #128	; 0x80
    c784:	0352      	lsls	r2, r2, #13
    c786:	4b06      	ldr	r3, [pc, #24]	; (c7a0 <PhyReset+0x28>)
    c788:	615a      	str	r2, [r3, #20]
	/* Ensure control lines have correct levels. */
	RST_HIGH();
	SLP_TR_LOW();

	/* Wait typical time of timer TR1. */
	delay_us(330);
    c78a:	20a5      	movs	r0, #165	; 0xa5
    c78c:	0040      	lsls	r0, r0, #1
    c78e:	4e05      	ldr	r6, [pc, #20]	; (c7a4 <PhyReset+0x2c>)
    c790:	47b0      	blx	r6
    c792:	6165      	str	r5, [r4, #20]

	RST_LOW();
	delay_us(10);
    c794:	200a      	movs	r0, #10
    c796:	47b0      	blx	r6
		port_base->OUTSET.reg = pin_mask;
    c798:	61a5      	str	r5, [r4, #24]
	RST_HIGH();
}
    c79a:	bd70      	pop	{r4, r5, r6, pc}
    c79c:	41004480 	.word	0x41004480
    c7a0:	41004400 	.word	0x41004400
    c7a4:	000064c9 	.word	0x000064c9

0000c7a8 <trx_reg_read>:

uint8_t trx_reg_read(uint8_t addr)
{
    c7a8:	b570      	push	{r4, r5, r6, lr}
    c7aa:	b082      	sub	sp, #8
    c7ac:	0005      	movs	r5, r0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
    c7ae:	f3ef 8310 	mrs	r3, PRIMASK
	volatile irqflags_t flags = cpu_irq_is_enabled();
    c7b2:	425a      	negs	r2, r3
    c7b4:	4153      	adcs	r3, r2
    c7b6:	9301      	str	r3, [sp, #4]
  __ASM volatile ("cpsid i" : : : "memory");
    c7b8:	b672      	cpsid	i
  __ASM volatile ("dmb 0xF":::"memory");
    c7ba:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
    c7be:	2200      	movs	r2, #0
    c7c0:	4b33      	ldr	r3, [pc, #204]	; (c890 <trx_reg_read+0xe8>)
    c7c2:	701a      	strb	r2, [r3, #0]
	return flags;
    c7c4:	9c01      	ldr	r4, [sp, #4]
	/* Prepare the command byte */
	addr |= READ_ACCESS_COMMAND;

#if SAMD || SAMR21 || SAML21 || SAMR30
	/* Start SPI transaction by pulling SEL low */
	spi_select_slave(&master, &slave, true);
    c7c6:	4e33      	ldr	r6, [pc, #204]	; (c894 <trx_reg_read+0xec>)
    c7c8:	3201      	adds	r2, #1
    c7ca:	4933      	ldr	r1, [pc, #204]	; (c898 <trx_reg_read+0xf0>)
    c7cc:	0030      	movs	r0, r6
    c7ce:	4b33      	ldr	r3, [pc, #204]	; (c89c <trx_reg_read+0xf4>)
    c7d0:	4798      	blx	r3
	SercomSpi *const spi_module = &(module->hw->SPI);
    c7d2:	6833      	ldr	r3, [r6, #0]

	/* Send the Read command byte */
	while (!spi_is_ready_to_write(&master)) {
    c7d4:	2101      	movs	r1, #1
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    c7d6:	7e1a      	ldrb	r2, [r3, #24]
    c7d8:	420a      	tst	r2, r1
    c7da:	d0fc      	beq.n	c7d6 <trx_reg_read+0x2e>
    c7dc:	7e1a      	ldrb	r2, [r3, #24]
	if (!spi_is_ready_to_write(module)) {
    c7de:	07d2      	lsls	r2, r2, #31
    c7e0:	d502      	bpl.n	c7e8 <trx_reg_read+0x40>
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    c7e2:	2280      	movs	r2, #128	; 0x80
    c7e4:	4315      	orrs	r5, r2
    c7e6:	629d      	str	r5, [r3, #40]	; 0x28
	}
	spi_write(&master, addr);
	while (!spi_is_write_complete(&master)) {
    c7e8:	2102      	movs	r1, #2
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
    c7ea:	7e1a      	ldrb	r2, [r3, #24]
    c7ec:	420a      	tst	r2, r1
    c7ee:	d0fc      	beq.n	c7ea <trx_reg_read+0x42>
	}
	/* Dummy read since SPI RX is double buffered */
	while (!spi_is_ready_to_read(&master)) {
    c7f0:	2104      	movs	r1, #4
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    c7f2:	7e1a      	ldrb	r2, [r3, #24]
    c7f4:	420a      	tst	r2, r1
    c7f6:	d0fc      	beq.n	c7f2 <trx_reg_read+0x4a>
    c7f8:	7e1a      	ldrb	r2, [r3, #24]
	if (!spi_is_ready_to_read(module)) {
    c7fa:	0752      	lsls	r2, r2, #29
    c7fc:	d50c      	bpl.n	c818 <trx_reg_read+0x70>
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    c7fe:	8b5a      	ldrh	r2, [r3, #26]
    c800:	0752      	lsls	r2, r2, #29
    c802:	d501      	bpl.n	c808 <trx_reg_read+0x60>
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
    c804:	2204      	movs	r2, #4
    c806:	835a      	strh	r2, [r3, #26]
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    c808:	4a22      	ldr	r2, [pc, #136]	; (c894 <trx_reg_read+0xec>)
    c80a:	7992      	ldrb	r2, [r2, #6]
    c80c:	2a01      	cmp	r2, #1
    c80e:	d034      	beq.n	c87a <trx_reg_read+0xd2>
		*rx_data = (uint8_t)spi_module->DATA.reg;
    c810:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    c812:	b2d2      	uxtb	r2, r2
    c814:	4922      	ldr	r1, [pc, #136]	; (c8a0 <trx_reg_read+0xf8>)
    c816:	800a      	strh	r2, [r1, #0]
	}
	spi_read(&master, &dummy_read);

	while (!spi_is_ready_to_write(&master)) {
    c818:	2101      	movs	r1, #1
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    c81a:	7e1a      	ldrb	r2, [r3, #24]
    c81c:	420a      	tst	r2, r1
    c81e:	d0fc      	beq.n	c81a <trx_reg_read+0x72>
    c820:	7e1a      	ldrb	r2, [r3, #24]
	if (!spi_is_ready_to_write(module)) {
    c822:	07d2      	lsls	r2, r2, #31
    c824:	d501      	bpl.n	c82a <trx_reg_read+0x82>
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    c826:	2200      	movs	r2, #0
    c828:	629a      	str	r2, [r3, #40]	; 0x28
	}
	spi_write(&master, 0);
	while (!spi_is_write_complete(&master)) {
    c82a:	2102      	movs	r1, #2
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
    c82c:	7e1a      	ldrb	r2, [r3, #24]
    c82e:	420a      	tst	r2, r1
    c830:	d0fc      	beq.n	c82c <trx_reg_read+0x84>
	}
	while (!spi_is_ready_to_read(&master)) {
    c832:	2104      	movs	r1, #4
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    c834:	7e1a      	ldrb	r2, [r3, #24]
    c836:	420a      	tst	r2, r1
    c838:	d0fc      	beq.n	c834 <trx_reg_read+0x8c>
    c83a:	7e1a      	ldrb	r2, [r3, #24]
	uint16_t register_value = 0;
    c83c:	2500      	movs	r5, #0
	if (!spi_is_ready_to_read(module)) {
    c83e:	0752      	lsls	r2, r2, #29
    c840:	d50a      	bpl.n	c858 <trx_reg_read+0xb0>
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    c842:	8b5a      	ldrh	r2, [r3, #26]
    c844:	0752      	lsls	r2, r2, #29
    c846:	d501      	bpl.n	c84c <trx_reg_read+0xa4>
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
    c848:	2204      	movs	r2, #4
    c84a:	835a      	strh	r2, [r3, #26]
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    c84c:	4a11      	ldr	r2, [pc, #68]	; (c894 <trx_reg_read+0xec>)
    c84e:	7992      	ldrb	r2, [r2, #6]
    c850:	2a01      	cmp	r2, #1
    c852:	d018      	beq.n	c886 <trx_reg_read+0xde>
		*rx_data = (uint8_t)spi_module->DATA.reg;
    c854:	6a9d      	ldr	r5, [r3, #40]	; 0x28
    c856:	b2ed      	uxtb	r5, r5
	}
	spi_read(&master, &register_value);

	/* Stop the SPI transaction by setting SEL high */
	spi_select_slave(&master, &slave, false);
    c858:	2200      	movs	r2, #0
    c85a:	490f      	ldr	r1, [pc, #60]	; (c898 <trx_reg_read+0xf0>)
    c85c:	480d      	ldr	r0, [pc, #52]	; (c894 <trx_reg_read+0xec>)
    c85e:	4b0f      	ldr	r3, [pc, #60]	; (c89c <trx_reg_read+0xf4>)
    c860:	4798      	blx	r3
	if (cpu_irq_is_enabled_flags(flags))
    c862:	23ff      	movs	r3, #255	; 0xff
    c864:	4223      	tst	r3, r4
    c866:	d005      	beq.n	c874 <trx_reg_read+0xcc>
		cpu_irq_enable();
    c868:	2201      	movs	r2, #1
    c86a:	4b09      	ldr	r3, [pc, #36]	; (c890 <trx_reg_read+0xe8>)
    c86c:	701a      	strb	r2, [r3, #0]
    c86e:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
    c872:	b662      	cpsie	i

	/*Restoring the interrupt status which was stored & enabling the global
	 * interrupt */
	LEAVE_TRX_CRITICAL_REGION();

	return register_value;
    c874:	b2e8      	uxtb	r0, r5
}
    c876:	b002      	add	sp, #8
    c878:	bd70      	pop	{r4, r5, r6, pc}
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
    c87a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    c87c:	05d2      	lsls	r2, r2, #23
    c87e:	0dd2      	lsrs	r2, r2, #23
    c880:	4907      	ldr	r1, [pc, #28]	; (c8a0 <trx_reg_read+0xf8>)
    c882:	800a      	strh	r2, [r1, #0]
    c884:	e7c8      	b.n	c818 <trx_reg_read+0x70>
    c886:	6a9d      	ldr	r5, [r3, #40]	; 0x28
    c888:	05ed      	lsls	r5, r5, #23
    c88a:	0ded      	lsrs	r5, r5, #23
    c88c:	e7e4      	b.n	c858 <trx_reg_read+0xb0>
    c88e:	46c0      	nop			; (mov r8, r8)
    c890:	20000008 	.word	0x20000008
    c894:	20002834 	.word	0x20002834
    c898:	200027f8 	.word	0x200027f8
    c89c:	00007799 	.word	0x00007799
    c8a0:	200027f0 	.word	0x200027f0

0000c8a4 <trx_reg_write>:

void trx_reg_write(uint8_t addr, uint8_t data)
{
    c8a4:	b5f0      	push	{r4, r5, r6, r7, lr}
    c8a6:	b083      	sub	sp, #12
    c8a8:	0006      	movs	r6, r0
    c8aa:	000c      	movs	r4, r1
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
    c8ac:	f3ef 8310 	mrs	r3, PRIMASK
	volatile irqflags_t flags = cpu_irq_is_enabled();
    c8b0:	425a      	negs	r2, r3
    c8b2:	4153      	adcs	r3, r2
    c8b4:	9301      	str	r3, [sp, #4]
  __ASM volatile ("cpsid i" : : : "memory");
    c8b6:	b672      	cpsid	i
  __ASM volatile ("dmb 0xF":::"memory");
    c8b8:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
    c8bc:	2200      	movs	r2, #0
    c8be:	4b34      	ldr	r3, [pc, #208]	; (c990 <trx_reg_write+0xec>)
    c8c0:	701a      	strb	r2, [r3, #0]
	return flags;
    c8c2:	9d01      	ldr	r5, [sp, #4]
	/* Prepare the command byte */
	addr |= WRITE_ACCESS_COMMAND;

#if SAMD || SAMR21 || SAML21 || SAMR30
	/* Start SPI transaction by pulling SEL low */
	spi_select_slave(&master, &slave, true);
    c8c4:	4f33      	ldr	r7, [pc, #204]	; (c994 <trx_reg_write+0xf0>)
    c8c6:	3201      	adds	r2, #1
    c8c8:	4933      	ldr	r1, [pc, #204]	; (c998 <trx_reg_write+0xf4>)
    c8ca:	0038      	movs	r0, r7
    c8cc:	4b33      	ldr	r3, [pc, #204]	; (c99c <trx_reg_write+0xf8>)
    c8ce:	4798      	blx	r3
	SercomSpi *const spi_module = &(module->hw->SPI);
    c8d0:	683b      	ldr	r3, [r7, #0]

	/* Send the Read command byte */
	while (!spi_is_ready_to_write(&master)) {
    c8d2:	2101      	movs	r1, #1
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    c8d4:	7e1a      	ldrb	r2, [r3, #24]
    c8d6:	420a      	tst	r2, r1
    c8d8:	d0fc      	beq.n	c8d4 <trx_reg_write+0x30>
    c8da:	7e1a      	ldrb	r2, [r3, #24]
	if (!spi_is_ready_to_write(module)) {
    c8dc:	07d2      	lsls	r2, r2, #31
    c8de:	d502      	bpl.n	c8e6 <trx_reg_write+0x42>
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    c8e0:	22c0      	movs	r2, #192	; 0xc0
    c8e2:	4316      	orrs	r6, r2
    c8e4:	629e      	str	r6, [r3, #40]	; 0x28
	}
	spi_write(&master, addr);
	while (!spi_is_write_complete(&master)) {
    c8e6:	2102      	movs	r1, #2
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
    c8e8:	7e1a      	ldrb	r2, [r3, #24]
    c8ea:	420a      	tst	r2, r1
    c8ec:	d0fc      	beq.n	c8e8 <trx_reg_write+0x44>
	}
	/* Dummy read since SPI RX is double buffered */
	while (!spi_is_ready_to_read(&master)) {
    c8ee:	2104      	movs	r1, #4
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    c8f0:	7e1a      	ldrb	r2, [r3, #24]
    c8f2:	420a      	tst	r2, r1
    c8f4:	d0fc      	beq.n	c8f0 <trx_reg_write+0x4c>
    c8f6:	7e1a      	ldrb	r2, [r3, #24]
	if (!spi_is_ready_to_read(module)) {
    c8f8:	0752      	lsls	r2, r2, #29
    c8fa:	d50c      	bpl.n	c916 <trx_reg_write+0x72>
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    c8fc:	8b5a      	ldrh	r2, [r3, #26]
    c8fe:	0752      	lsls	r2, r2, #29
    c900:	d501      	bpl.n	c906 <trx_reg_write+0x62>
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
    c902:	2204      	movs	r2, #4
    c904:	835a      	strh	r2, [r3, #26]
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    c906:	4a23      	ldr	r2, [pc, #140]	; (c994 <trx_reg_write+0xf0>)
    c908:	7992      	ldrb	r2, [r2, #6]
    c90a:	2a01      	cmp	r2, #1
    c90c:	d033      	beq.n	c976 <trx_reg_write+0xd2>
		*rx_data = (uint8_t)spi_module->DATA.reg;
    c90e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    c910:	b2d2      	uxtb	r2, r2
    c912:	4923      	ldr	r1, [pc, #140]	; (c9a0 <trx_reg_write+0xfc>)
    c914:	800a      	strh	r2, [r1, #0]
	}
	spi_read(&master, &dummy_read);

	/* Write the byte in the transceiver data register */
	while (!spi_is_ready_to_write(&master)) {
    c916:	2101      	movs	r1, #1
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    c918:	7e1a      	ldrb	r2, [r3, #24]
    c91a:	420a      	tst	r2, r1
    c91c:	d0fc      	beq.n	c918 <trx_reg_write+0x74>
    c91e:	7e1a      	ldrb	r2, [r3, #24]
	if (!spi_is_ready_to_write(module)) {
    c920:	07d2      	lsls	r2, r2, #31
    c922:	d500      	bpl.n	c926 <trx_reg_write+0x82>
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    c924:	629c      	str	r4, [r3, #40]	; 0x28
	}
	spi_write(&master, data);
	while (!spi_is_write_complete(&master)) {
    c926:	2102      	movs	r1, #2
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
    c928:	7e1a      	ldrb	r2, [r3, #24]
    c92a:	420a      	tst	r2, r1
    c92c:	d0fc      	beq.n	c928 <trx_reg_write+0x84>
	}
	/* Dummy read since SPI RX is double buffered */
	while (!spi_is_ready_to_read(&master)) {
    c92e:	2104      	movs	r1, #4
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    c930:	7e1a      	ldrb	r2, [r3, #24]
    c932:	420a      	tst	r2, r1
    c934:	d0fc      	beq.n	c930 <trx_reg_write+0x8c>
    c936:	7e1a      	ldrb	r2, [r3, #24]
	if (!spi_is_ready_to_read(module)) {
    c938:	0752      	lsls	r2, r2, #29
    c93a:	d50c      	bpl.n	c956 <trx_reg_write+0xb2>
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    c93c:	8b5a      	ldrh	r2, [r3, #26]
    c93e:	0752      	lsls	r2, r2, #29
    c940:	d501      	bpl.n	c946 <trx_reg_write+0xa2>
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
    c942:	2204      	movs	r2, #4
    c944:	835a      	strh	r2, [r3, #26]
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    c946:	4a13      	ldr	r2, [pc, #76]	; (c994 <trx_reg_write+0xf0>)
    c948:	7992      	ldrb	r2, [r2, #6]
    c94a:	2a01      	cmp	r2, #1
    c94c:	d019      	beq.n	c982 <trx_reg_write+0xde>
		*rx_data = (uint8_t)spi_module->DATA.reg;
    c94e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    c950:	b2db      	uxtb	r3, r3
    c952:	4a13      	ldr	r2, [pc, #76]	; (c9a0 <trx_reg_write+0xfc>)
    c954:	8013      	strh	r3, [r2, #0]
	}
	spi_read(&master, &dummy_read);

	/* Stop the SPI transaction by setting SEL high */
	spi_select_slave(&master, &slave, false);
    c956:	2200      	movs	r2, #0
    c958:	490f      	ldr	r1, [pc, #60]	; (c998 <trx_reg_write+0xf4>)
    c95a:	480e      	ldr	r0, [pc, #56]	; (c994 <trx_reg_write+0xf0>)
    c95c:	4b0f      	ldr	r3, [pc, #60]	; (c99c <trx_reg_write+0xf8>)
    c95e:	4798      	blx	r3
	if (cpu_irq_is_enabled_flags(flags))
    c960:	23ff      	movs	r3, #255	; 0xff
    c962:	422b      	tst	r3, r5
    c964:	d005      	beq.n	c972 <trx_reg_write+0xce>
		cpu_irq_enable();
    c966:	2201      	movs	r2, #1
    c968:	4b09      	ldr	r3, [pc, #36]	; (c990 <trx_reg_write+0xec>)
    c96a:	701a      	strb	r2, [r3, #0]
    c96c:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
    c970:	b662      	cpsie	i
#endif

	/*Restoring the interrupt status which was stored & enabling the global
	 * interrupt */
	LEAVE_TRX_CRITICAL_REGION();
}
    c972:	b003      	add	sp, #12
    c974:	bdf0      	pop	{r4, r5, r6, r7, pc}
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
    c976:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    c978:	05d2      	lsls	r2, r2, #23
    c97a:	0dd2      	lsrs	r2, r2, #23
    c97c:	4908      	ldr	r1, [pc, #32]	; (c9a0 <trx_reg_write+0xfc>)
    c97e:	800a      	strh	r2, [r1, #0]
    c980:	e7c9      	b.n	c916 <trx_reg_write+0x72>
    c982:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    c984:	05db      	lsls	r3, r3, #23
    c986:	0ddb      	lsrs	r3, r3, #23
    c988:	4a05      	ldr	r2, [pc, #20]	; (c9a0 <trx_reg_write+0xfc>)
    c98a:	8013      	strh	r3, [r2, #0]
    c98c:	e7e3      	b.n	c956 <trx_reg_write+0xb2>
    c98e:	46c0      	nop			; (mov r8, r8)
    c990:	20000008 	.word	0x20000008
    c994:	20002834 	.word	0x20002834
    c998:	200027f8 	.word	0x200027f8
    c99c:	00007799 	.word	0x00007799
    c9a0:	200027f0 	.word	0x200027f0

0000c9a4 <trx_frame_read>:
	new_value |= current_reg_value;
	trx_reg_write(reg_addr, new_value);
}

void trx_frame_read(uint8_t *data, uint8_t length)
{
    c9a4:	b5f0      	push	{r4, r5, r6, r7, lr}
    c9a6:	46d6      	mov	lr, sl
    c9a8:	464f      	mov	r7, r9
    c9aa:	4646      	mov	r6, r8
    c9ac:	b5c0      	push	{r6, r7, lr}
    c9ae:	b082      	sub	sp, #8
    c9b0:	0005      	movs	r5, r0
    c9b2:	000c      	movs	r4, r1
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
    c9b4:	f3ef 8310 	mrs	r3, PRIMASK
	volatile irqflags_t flags = cpu_irq_is_enabled();
    c9b8:	425a      	negs	r2, r3
    c9ba:	4153      	adcs	r3, r2
    c9bc:	9301      	str	r3, [sp, #4]
  __ASM volatile ("cpsid i" : : : "memory");
    c9be:	b672      	cpsid	i
  __ASM volatile ("dmb 0xF":::"memory");
    c9c0:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
    c9c4:	2200      	movs	r2, #0
    c9c6:	4b3e      	ldr	r3, [pc, #248]	; (cac0 <trx_frame_read+0x11c>)
    c9c8:	701a      	strb	r2, [r3, #0]
	return flags;
    c9ca:	9b01      	ldr	r3, [sp, #4]
    c9cc:	4698      	mov	r8, r3
	ENTER_TRX_CRITICAL_REGION();

#if SAMD || SAMR21 || SAML21 || SAMR30
	uint16_t temp;
	/* Start SPI transaction by pulling SEL low */
	spi_select_slave(&master, &slave, true);
    c9ce:	4f3d      	ldr	r7, [pc, #244]	; (cac4 <trx_frame_read+0x120>)
    c9d0:	3201      	adds	r2, #1
    c9d2:	493d      	ldr	r1, [pc, #244]	; (cac8 <trx_frame_read+0x124>)
    c9d4:	0038      	movs	r0, r7
    c9d6:	4b3d      	ldr	r3, [pc, #244]	; (cacc <trx_frame_read+0x128>)
    c9d8:	4798      	blx	r3
	SercomSpi *const spi_module = &(module->hw->SPI);
    c9da:	683b      	ldr	r3, [r7, #0]

	temp = TRX_CMD_FR;

	/* Send the command byte */
	while (!spi_is_ready_to_write(&master)) {
    c9dc:	2101      	movs	r1, #1
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    c9de:	7e1a      	ldrb	r2, [r3, #24]
    c9e0:	420a      	tst	r2, r1
    c9e2:	d0fc      	beq.n	c9de <trx_frame_read+0x3a>
    c9e4:	7e1a      	ldrb	r2, [r3, #24]
	if (!spi_is_ready_to_write(module)) {
    c9e6:	07d2      	lsls	r2, r2, #31
    c9e8:	d501      	bpl.n	c9ee <trx_frame_read+0x4a>
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    c9ea:	2220      	movs	r2, #32
    c9ec:	629a      	str	r2, [r3, #40]	; 0x28
	}
	spi_write(&master, temp);
	while (!spi_is_write_complete(&master)) {
    c9ee:	2102      	movs	r1, #2
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
    c9f0:	7e1a      	ldrb	r2, [r3, #24]
    c9f2:	420a      	tst	r2, r1
    c9f4:	d0fc      	beq.n	c9f0 <trx_frame_read+0x4c>
	}
	/* Dummy read since SPI RX is double buffered */
	while (!spi_is_ready_to_read(&master)) {
    c9f6:	2104      	movs	r1, #4
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    c9f8:	7e1a      	ldrb	r2, [r3, #24]
    c9fa:	420a      	tst	r2, r1
    c9fc:	d0fc      	beq.n	c9f8 <trx_frame_read+0x54>
    c9fe:	7e1a      	ldrb	r2, [r3, #24]
	if (!spi_is_ready_to_read(module)) {
    ca00:	0752      	lsls	r2, r2, #29
    ca02:	d50c      	bpl.n	ca1e <trx_frame_read+0x7a>
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    ca04:	8b5a      	ldrh	r2, [r3, #26]
    ca06:	0752      	lsls	r2, r2, #29
    ca08:	d501      	bpl.n	ca0e <trx_frame_read+0x6a>
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
    ca0a:	2204      	movs	r2, #4
    ca0c:	835a      	strh	r2, [r3, #26]
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    ca0e:	4a2d      	ldr	r2, [pc, #180]	; (cac4 <trx_frame_read+0x120>)
    ca10:	7992      	ldrb	r2, [r2, #6]
    ca12:	2a01      	cmp	r2, #1
    ca14:	d013      	beq.n	ca3e <trx_frame_read+0x9a>
		*rx_data = (uint8_t)spi_module->DATA.reg;
    ca16:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    ca18:	b2db      	uxtb	r3, r3
    ca1a:	4a2d      	ldr	r2, [pc, #180]	; (cad0 <trx_frame_read+0x12c>)
    ca1c:	8013      	strh	r3, [r2, #0]
	}
	spi_read(&master, &dummy_read);

	while (length--) {
    ca1e:	1e63      	subs	r3, r4, #1
    ca20:	b2db      	uxtb	r3, r3
    ca22:	2c00      	cmp	r4, #0
    ca24:	d036      	beq.n	ca94 <trx_frame_read+0xf0>
    ca26:	3301      	adds	r3, #1
    ca28:	469c      	mov	ip, r3
    ca2a:	44ac      	add	ip, r5
    ca2c:	2720      	movs	r7, #32
	SercomSpi *const spi_module = &(module->hw->SPI);
    ca2e:	4e25      	ldr	r6, [pc, #148]	; (cac4 <trx_frame_read+0x120>)
		while (!spi_is_ready_to_write(&master)) {
    ca30:	2001      	movs	r0, #1
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    ca32:	2300      	movs	r3, #0
    ca34:	469a      	mov	sl, r3
		}
		spi_write(&master, 0);
		while (!spi_is_write_complete(&master)) {
    ca36:	2402      	movs	r4, #2
		}
		/* Dummy read since SPI RX is double buffered */
		while (!spi_is_ready_to_read(&master)) {
    ca38:	2104      	movs	r1, #4
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    ca3a:	46b1      	mov	r9, r6
    ca3c:	e00f      	b.n	ca5e <trx_frame_read+0xba>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
    ca3e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    ca40:	05db      	lsls	r3, r3, #23
    ca42:	0ddb      	lsrs	r3, r3, #23
    ca44:	4a22      	ldr	r2, [pc, #136]	; (cad0 <trx_frame_read+0x12c>)
    ca46:	8013      	strh	r3, [r2, #0]
    ca48:	e7e9      	b.n	ca1e <trx_frame_read+0x7a>
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    ca4a:	464a      	mov	r2, r9
    ca4c:	7992      	ldrb	r2, [r2, #6]
    ca4e:	2a01      	cmp	r2, #1
    ca50:	d01c      	beq.n	ca8c <trx_frame_read+0xe8>
		*rx_data = (uint8_t)spi_module->DATA.reg;
    ca52:	6a9f      	ldr	r7, [r3, #40]	; 0x28
    ca54:	b2ff      	uxtb	r7, r7
		}
		spi_read(&master, &temp);
		*data = temp;
    ca56:	702f      	strb	r7, [r5, #0]
		data++;
    ca58:	3501      	adds	r5, #1
	while (length--) {
    ca5a:	4565      	cmp	r5, ip
    ca5c:	d01a      	beq.n	ca94 <trx_frame_read+0xf0>
	SercomSpi *const spi_module = &(module->hw->SPI);
    ca5e:	6833      	ldr	r3, [r6, #0]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    ca60:	7e1a      	ldrb	r2, [r3, #24]
		while (!spi_is_ready_to_write(&master)) {
    ca62:	4202      	tst	r2, r0
    ca64:	d0fc      	beq.n	ca60 <trx_frame_read+0xbc>
    ca66:	7e1a      	ldrb	r2, [r3, #24]
	if (!spi_is_ready_to_write(module)) {
    ca68:	4202      	tst	r2, r0
    ca6a:	d001      	beq.n	ca70 <trx_frame_read+0xcc>
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    ca6c:	4652      	mov	r2, sl
    ca6e:	629a      	str	r2, [r3, #40]	; 0x28
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
    ca70:	7e1a      	ldrb	r2, [r3, #24]
		while (!spi_is_write_complete(&master)) {
    ca72:	4222      	tst	r2, r4
    ca74:	d0fc      	beq.n	ca70 <trx_frame_read+0xcc>
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    ca76:	7e1a      	ldrb	r2, [r3, #24]
		while (!spi_is_ready_to_read(&master)) {
    ca78:	420a      	tst	r2, r1
    ca7a:	d0fc      	beq.n	ca76 <trx_frame_read+0xd2>
    ca7c:	7e1a      	ldrb	r2, [r3, #24]
	if (!spi_is_ready_to_read(module)) {
    ca7e:	420a      	tst	r2, r1
    ca80:	d0e9      	beq.n	ca56 <trx_frame_read+0xb2>
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    ca82:	8b5a      	ldrh	r2, [r3, #26]
    ca84:	420a      	tst	r2, r1
    ca86:	d0e0      	beq.n	ca4a <trx_frame_read+0xa6>
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
    ca88:	8359      	strh	r1, [r3, #26]
    ca8a:	e7de      	b.n	ca4a <trx_frame_read+0xa6>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
    ca8c:	6a9f      	ldr	r7, [r3, #40]	; 0x28
    ca8e:	05ff      	lsls	r7, r7, #23
    ca90:	0dff      	lsrs	r7, r7, #23
    ca92:	e7e0      	b.n	ca56 <trx_frame_read+0xb2>
	}

	/* Stop the SPI transaction by setting SEL high */
	spi_select_slave(&master, &slave, false);
    ca94:	2200      	movs	r2, #0
    ca96:	490c      	ldr	r1, [pc, #48]	; (cac8 <trx_frame_read+0x124>)
    ca98:	480a      	ldr	r0, [pc, #40]	; (cac4 <trx_frame_read+0x120>)
    ca9a:	4b0c      	ldr	r3, [pc, #48]	; (cacc <trx_frame_read+0x128>)
    ca9c:	4798      	blx	r3
	if (cpu_irq_is_enabled_flags(flags))
    ca9e:	23ff      	movs	r3, #255	; 0xff
    caa0:	4642      	mov	r2, r8
    caa2:	4213      	tst	r3, r2
    caa4:	d005      	beq.n	cab2 <trx_frame_read+0x10e>
		cpu_irq_enable();
    caa6:	2201      	movs	r2, #1
    caa8:	4b05      	ldr	r3, [pc, #20]	; (cac0 <trx_frame_read+0x11c>)
    caaa:	701a      	strb	r2, [r3, #0]
    caac:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
    cab0:	b662      	cpsie	i
#endif

	/*Restoring the interrupt status which was stored & enabling the global
	 * interrupt */
	LEAVE_TRX_CRITICAL_REGION();
}
    cab2:	b002      	add	sp, #8
    cab4:	bc1c      	pop	{r2, r3, r4}
    cab6:	4690      	mov	r8, r2
    cab8:	4699      	mov	r9, r3
    caba:	46a2      	mov	sl, r4
    cabc:	bdf0      	pop	{r4, r5, r6, r7, pc}
    cabe:	46c0      	nop			; (mov r8, r8)
    cac0:	20000008 	.word	0x20000008
    cac4:	20002834 	.word	0x20002834
    cac8:	200027f8 	.word	0x200027f8
    cacc:	00007799 	.word	0x00007799
    cad0:	200027f0 	.word	0x200027f0

0000cad4 <trx_frame_write>:

void trx_frame_write(uint8_t *data, uint8_t length)
{
    cad4:	b5f0      	push	{r4, r5, r6, r7, lr}
    cad6:	46c6      	mov	lr, r8
    cad8:	b500      	push	{lr}
    cada:	b082      	sub	sp, #8
    cadc:	0004      	movs	r4, r0
    cade:	000d      	movs	r5, r1
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
    cae0:	f3ef 8310 	mrs	r3, PRIMASK
	volatile irqflags_t flags = cpu_irq_is_enabled();
    cae4:	425a      	negs	r2, r3
    cae6:	4153      	adcs	r3, r2
    cae8:	9301      	str	r3, [sp, #4]
  __ASM volatile ("cpsid i" : : : "memory");
    caea:	b672      	cpsid	i
  __ASM volatile ("dmb 0xF":::"memory");
    caec:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
    caf0:	2200      	movs	r2, #0
    caf2:	4b3a      	ldr	r3, [pc, #232]	; (cbdc <trx_frame_write+0x108>)
    caf4:	701a      	strb	r2, [r3, #0]
	return flags;
    caf6:	9b01      	ldr	r3, [sp, #4]
    caf8:	4698      	mov	r8, r3
	**/
	ENTER_TRX_CRITICAL_REGION();

#if SAMD || SAMR21 || SAML21 || SAMR30
	/* Start SPI transaction by pulling SEL low */
	spi_select_slave(&master, &slave, true);
    cafa:	4f39      	ldr	r7, [pc, #228]	; (cbe0 <trx_frame_write+0x10c>)
    cafc:	3201      	adds	r2, #1
    cafe:	4939      	ldr	r1, [pc, #228]	; (cbe4 <trx_frame_write+0x110>)
    cb00:	0038      	movs	r0, r7
    cb02:	4b39      	ldr	r3, [pc, #228]	; (cbe8 <trx_frame_write+0x114>)
    cb04:	4798      	blx	r3
	SercomSpi *const spi_module = &(module->hw->SPI);
    cb06:	683b      	ldr	r3, [r7, #0]

	temp = TRX_CMD_FW;

	/* Send the command byte */
	while (!spi_is_ready_to_write(&master)) {
    cb08:	2101      	movs	r1, #1
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    cb0a:	7e1a      	ldrb	r2, [r3, #24]
    cb0c:	420a      	tst	r2, r1
    cb0e:	d0fc      	beq.n	cb0a <trx_frame_write+0x36>
    cb10:	7e1a      	ldrb	r2, [r3, #24]
	if (!spi_is_ready_to_write(module)) {
    cb12:	07d2      	lsls	r2, r2, #31
    cb14:	d501      	bpl.n	cb1a <trx_frame_write+0x46>
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    cb16:	2260      	movs	r2, #96	; 0x60
    cb18:	629a      	str	r2, [r3, #40]	; 0x28
	}
	spi_write(&master, temp);
	while (!spi_is_write_complete(&master)) {
    cb1a:	2102      	movs	r1, #2
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
    cb1c:	7e1a      	ldrb	r2, [r3, #24]
    cb1e:	420a      	tst	r2, r1
    cb20:	d0fc      	beq.n	cb1c <trx_frame_write+0x48>
	} 
	/* Dummy read since SPI RX is double buffered */
	while (!spi_is_ready_to_read(&master)) {
    cb22:	2104      	movs	r1, #4
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    cb24:	7e1a      	ldrb	r2, [r3, #24]
    cb26:	420a      	tst	r2, r1
    cb28:	d0fc      	beq.n	cb24 <trx_frame_write+0x50>
    cb2a:	7e1a      	ldrb	r2, [r3, #24]
	if (!spi_is_ready_to_read(module)) {
    cb2c:	0752      	lsls	r2, r2, #29
    cb2e:	d50c      	bpl.n	cb4a <trx_frame_write+0x76>
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    cb30:	8b5a      	ldrh	r2, [r3, #26]
    cb32:	0752      	lsls	r2, r2, #29
    cb34:	d501      	bpl.n	cb3a <trx_frame_write+0x66>
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
    cb36:	2204      	movs	r2, #4
    cb38:	835a      	strh	r2, [r3, #26]
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    cb3a:	4a29      	ldr	r2, [pc, #164]	; (cbe0 <trx_frame_write+0x10c>)
    cb3c:	7992      	ldrb	r2, [r2, #6]
    cb3e:	2a01      	cmp	r2, #1
    cb40:	d00b      	beq.n	cb5a <trx_frame_write+0x86>
		*rx_data = (uint8_t)spi_module->DATA.reg;
    cb42:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    cb44:	b2d2      	uxtb	r2, r2
    cb46:	4929      	ldr	r1, [pc, #164]	; (cbec <trx_frame_write+0x118>)
    cb48:	800a      	strh	r2, [r1, #0]
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    cb4a:	4a25      	ldr	r2, [pc, #148]	; (cbe0 <trx_frame_write+0x10c>)
    cb4c:	7992      	ldrb	r2, [r2, #6]
    cb4e:	4694      	mov	ip, r2
    cb50:	0021      	movs	r1, r4
	}
	spi_read(&master, &dummy_read);
	while (length--) {
		while (!spi_is_ready_to_write(&master)) {
    cb52:	2701      	movs	r7, #1
		}
		spi_write(&master, *data++);
		while (!spi_is_write_complete(&master)) {
    cb54:	2002      	movs	r0, #2
		}
		/* Dummy read since SPI RX is double buffered */
		while (!spi_is_ready_to_read(&master)) {
    cb56:	2404      	movs	r4, #4
    cb58:	e00d      	b.n	cb76 <trx_frame_write+0xa2>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
    cb5a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    cb5c:	05d2      	lsls	r2, r2, #23
    cb5e:	0dd2      	lsrs	r2, r2, #23
    cb60:	4922      	ldr	r1, [pc, #136]	; (cbec <trx_frame_write+0x118>)
    cb62:	800a      	strh	r2, [r1, #0]
    cb64:	e7f1      	b.n	cb4a <trx_frame_write+0x76>
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    cb66:	4662      	mov	r2, ip
    cb68:	2a01      	cmp	r2, #1
    cb6a:	d01e      	beq.n	cbaa <trx_frame_write+0xd6>
		*rx_data = (uint8_t)spi_module->DATA.reg;
    cb6c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    cb6e:	b2d2      	uxtb	r2, r2
    cb70:	4e1e      	ldr	r6, [pc, #120]	; (cbec <trx_frame_write+0x118>)
    cb72:	8032      	strh	r2, [r6, #0]
    cb74:	3101      	adds	r1, #1
	while (length--) {
    cb76:	3d01      	subs	r5, #1
    cb78:	b2ed      	uxtb	r5, r5
    cb7a:	2dff      	cmp	r5, #255	; 0xff
    cb7c:	d01b      	beq.n	cbb6 <trx_frame_write+0xe2>
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    cb7e:	7e1a      	ldrb	r2, [r3, #24]
		while (!spi_is_ready_to_write(&master)) {
    cb80:	423a      	tst	r2, r7
    cb82:	d0fc      	beq.n	cb7e <trx_frame_write+0xaa>
    cb84:	7e1a      	ldrb	r2, [r3, #24]
	if (!spi_is_ready_to_write(module)) {
    cb86:	423a      	tst	r2, r7
    cb88:	d001      	beq.n	cb8e <trx_frame_write+0xba>
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    cb8a:	780a      	ldrb	r2, [r1, #0]
    cb8c:	629a      	str	r2, [r3, #40]	; 0x28
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
    cb8e:	7e1a      	ldrb	r2, [r3, #24]
		while (!spi_is_write_complete(&master)) {
    cb90:	4202      	tst	r2, r0
    cb92:	d0fc      	beq.n	cb8e <trx_frame_write+0xba>
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    cb94:	7e1a      	ldrb	r2, [r3, #24]
		while (!spi_is_ready_to_read(&master)) {
    cb96:	4222      	tst	r2, r4
    cb98:	d0fc      	beq.n	cb94 <trx_frame_write+0xc0>
    cb9a:	7e1a      	ldrb	r2, [r3, #24]
	if (!spi_is_ready_to_read(module)) {
    cb9c:	4222      	tst	r2, r4
    cb9e:	d0e9      	beq.n	cb74 <trx_frame_write+0xa0>
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    cba0:	8b5a      	ldrh	r2, [r3, #26]
    cba2:	4222      	tst	r2, r4
    cba4:	d0df      	beq.n	cb66 <trx_frame_write+0x92>
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
    cba6:	835c      	strh	r4, [r3, #26]
    cba8:	e7dd      	b.n	cb66 <trx_frame_write+0x92>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
    cbaa:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    cbac:	05d2      	lsls	r2, r2, #23
    cbae:	0dd2      	lsrs	r2, r2, #23
    cbb0:	4e0e      	ldr	r6, [pc, #56]	; (cbec <trx_frame_write+0x118>)
    cbb2:	8032      	strh	r2, [r6, #0]
    cbb4:	e7de      	b.n	cb74 <trx_frame_write+0xa0>
		}
		spi_read(&master, &dummy_read);
	}

	/* Stop the SPI transaction by setting SEL high */
	spi_select_slave(&master, &slave, false);
    cbb6:	2200      	movs	r2, #0
    cbb8:	490a      	ldr	r1, [pc, #40]	; (cbe4 <trx_frame_write+0x110>)
    cbba:	4809      	ldr	r0, [pc, #36]	; (cbe0 <trx_frame_write+0x10c>)
    cbbc:	4b0a      	ldr	r3, [pc, #40]	; (cbe8 <trx_frame_write+0x114>)
    cbbe:	4798      	blx	r3
	if (cpu_irq_is_enabled_flags(flags))
    cbc0:	23ff      	movs	r3, #255	; 0xff
    cbc2:	4642      	mov	r2, r8
    cbc4:	4213      	tst	r3, r2
    cbc6:	d005      	beq.n	cbd4 <trx_frame_write+0x100>
		cpu_irq_enable();
    cbc8:	2201      	movs	r2, #1
    cbca:	4b04      	ldr	r3, [pc, #16]	; (cbdc <trx_frame_write+0x108>)
    cbcc:	701a      	strb	r2, [r3, #0]
    cbce:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
    cbd2:	b662      	cpsie	i
#endif

	/*Restoring the interrupt status which was stored & enabling the global
	 * interrupt */
	LEAVE_TRX_CRITICAL_REGION();
}
    cbd4:	b002      	add	sp, #8
    cbd6:	bc04      	pop	{r2}
    cbd8:	4690      	mov	r8, r2
    cbda:	bdf0      	pop	{r4, r5, r6, r7, pc}
    cbdc:	20000008 	.word	0x20000008
    cbe0:	20002834 	.word	0x20002834
    cbe4:	200027f8 	.word	0x200027f8
    cbe8:	00007799 	.word	0x00007799
    cbec:	200027f0 	.word	0x200027f0

0000cbf0 <trx_sram_write>:
 * @param addr Start address in the SRAM for the write operation
 * @param data Pointer to the data to be written into SRAM
 * @param length Number of bytes to be written into SRAM
 */
void trx_sram_write(uint8_t addr, uint8_t *data, uint8_t length)
{
    cbf0:	b5f0      	push	{r4, r5, r6, r7, lr}
    cbf2:	46c6      	mov	lr, r8
    cbf4:	b500      	push	{lr}
    cbf6:	b082      	sub	sp, #8
    cbf8:	0006      	movs	r6, r0
    cbfa:	000d      	movs	r5, r1
    cbfc:	0014      	movs	r4, r2
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
    cbfe:	f3ef 8310 	mrs	r3, PRIMASK
	volatile irqflags_t flags = cpu_irq_is_enabled();
    cc02:	425a      	negs	r2, r3
    cc04:	4153      	adcs	r3, r2
    cc06:	9301      	str	r3, [sp, #4]
  __ASM volatile ("cpsid i" : : : "memory");
    cc08:	b672      	cpsid	i
  __ASM volatile ("dmb 0xF":::"memory");
    cc0a:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
    cc0e:	2200      	movs	r2, #0
    cc10:	4b4d      	ldr	r3, [pc, #308]	; (cd48 <trx_sram_write+0x158>)
    cc12:	701a      	strb	r2, [r3, #0]
	return flags;
    cc14:	9b01      	ldr	r3, [sp, #4]
    cc16:	4698      	mov	r8, r3
	**/
	ENTER_TRX_CRITICAL_REGION();

#if SAMD || SAMR21 || SAML21 || SAMR30
	/* Start SPI transaction by pulling SEL low */
	spi_select_slave(&master, &slave, true);
    cc18:	4f4c      	ldr	r7, [pc, #304]	; (cd4c <trx_sram_write+0x15c>)
    cc1a:	3201      	adds	r2, #1
    cc1c:	494c      	ldr	r1, [pc, #304]	; (cd50 <trx_sram_write+0x160>)
    cc1e:	0038      	movs	r0, r7
    cc20:	4b4c      	ldr	r3, [pc, #304]	; (cd54 <trx_sram_write+0x164>)
    cc22:	4798      	blx	r3
	SercomSpi *const spi_module = &(module->hw->SPI);
    cc24:	683b      	ldr	r3, [r7, #0]

	/* Send the command byte */
	temp = TRX_CMD_SW;

	/* Send the command byte */
	while (!spi_is_ready_to_write(&master)) {
    cc26:	2101      	movs	r1, #1
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    cc28:	7e1a      	ldrb	r2, [r3, #24]
    cc2a:	420a      	tst	r2, r1
    cc2c:	d0fc      	beq.n	cc28 <trx_sram_write+0x38>
    cc2e:	7e1a      	ldrb	r2, [r3, #24]
	if (!spi_is_ready_to_write(module)) {
    cc30:	07d2      	lsls	r2, r2, #31
    cc32:	d501      	bpl.n	cc38 <trx_sram_write+0x48>
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    cc34:	2240      	movs	r2, #64	; 0x40
    cc36:	629a      	str	r2, [r3, #40]	; 0x28
	}
	spi_write(&master, temp);
	while (!spi_is_write_complete(&master)) {
    cc38:	2102      	movs	r1, #2
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
    cc3a:	7e1a      	ldrb	r2, [r3, #24]
    cc3c:	420a      	tst	r2, r1
    cc3e:	d0fc      	beq.n	cc3a <trx_sram_write+0x4a>
	}
	/* Dummy read since SPI RX is double buffered */
	while (!spi_is_ready_to_read(&master)) {
    cc40:	2104      	movs	r1, #4
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    cc42:	7e1a      	ldrb	r2, [r3, #24]
    cc44:	420a      	tst	r2, r1
    cc46:	d0fc      	beq.n	cc42 <trx_sram_write+0x52>
    cc48:	7e1a      	ldrb	r2, [r3, #24]
	if (!spi_is_ready_to_read(module)) {
    cc4a:	0752      	lsls	r2, r2, #29
    cc4c:	d50c      	bpl.n	cc68 <trx_sram_write+0x78>
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    cc4e:	8b5a      	ldrh	r2, [r3, #26]
    cc50:	0752      	lsls	r2, r2, #29
    cc52:	d501      	bpl.n	cc58 <trx_sram_write+0x68>
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
    cc54:	2204      	movs	r2, #4
    cc56:	835a      	strh	r2, [r3, #26]
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    cc58:	4a3c      	ldr	r2, [pc, #240]	; (cd4c <trx_sram_write+0x15c>)
    cc5a:	7992      	ldrb	r2, [r2, #6]
    cc5c:	2a01      	cmp	r2, #1
    cc5e:	d02b      	beq.n	ccb8 <trx_sram_write+0xc8>
		*rx_data = (uint8_t)spi_module->DATA.reg;
    cc60:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    cc62:	b2d2      	uxtb	r2, r2
    cc64:	493c      	ldr	r1, [pc, #240]	; (cd58 <trx_sram_write+0x168>)
    cc66:	800a      	strh	r2, [r1, #0]
	}
	spi_read(&master, &dummy_read);

	/* Send the address from which the write operation should start */
	while (!spi_is_ready_to_write(&master)) {
    cc68:	2101      	movs	r1, #1
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    cc6a:	7e1a      	ldrb	r2, [r3, #24]
    cc6c:	420a      	tst	r2, r1
    cc6e:	d0fc      	beq.n	cc6a <trx_sram_write+0x7a>
    cc70:	7e1a      	ldrb	r2, [r3, #24]
	if (!spi_is_ready_to_write(module)) {
    cc72:	07d2      	lsls	r2, r2, #31
    cc74:	d500      	bpl.n	cc78 <trx_sram_write+0x88>
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    cc76:	629e      	str	r6, [r3, #40]	; 0x28
	}
	spi_write(&master, addr);
	while (!spi_is_write_complete(&master)) {
    cc78:	2102      	movs	r1, #2
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
    cc7a:	7e1a      	ldrb	r2, [r3, #24]
    cc7c:	420a      	tst	r2, r1
    cc7e:	d0fc      	beq.n	cc7a <trx_sram_write+0x8a>
	}
	/* Dummy read since SPI RX is double buffered */
	while (!spi_is_ready_to_read(&master)) {
    cc80:	2104      	movs	r1, #4
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    cc82:	7e1a      	ldrb	r2, [r3, #24]
    cc84:	420a      	tst	r2, r1
    cc86:	d0fc      	beq.n	cc82 <trx_sram_write+0x92>
    cc88:	7e1a      	ldrb	r2, [r3, #24]
	if (!spi_is_ready_to_read(module)) {
    cc8a:	0752      	lsls	r2, r2, #29
    cc8c:	d50c      	bpl.n	cca8 <trx_sram_write+0xb8>
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    cc8e:	8b5a      	ldrh	r2, [r3, #26]
    cc90:	0752      	lsls	r2, r2, #29
    cc92:	d501      	bpl.n	cc98 <trx_sram_write+0xa8>
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
    cc94:	2204      	movs	r2, #4
    cc96:	835a      	strh	r2, [r3, #26]
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    cc98:	4a2c      	ldr	r2, [pc, #176]	; (cd4c <trx_sram_write+0x15c>)
    cc9a:	7992      	ldrb	r2, [r2, #6]
    cc9c:	2a01      	cmp	r2, #1
    cc9e:	d011      	beq.n	ccc4 <trx_sram_write+0xd4>
		*rx_data = (uint8_t)spi_module->DATA.reg;
    cca0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    cca2:	b2d2      	uxtb	r2, r2
    cca4:	492c      	ldr	r1, [pc, #176]	; (cd58 <trx_sram_write+0x168>)
    cca6:	800a      	strh	r2, [r1, #0]
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    cca8:	4a28      	ldr	r2, [pc, #160]	; (cd4c <trx_sram_write+0x15c>)
    ccaa:	7992      	ldrb	r2, [r2, #6]
    ccac:	4694      	mov	ip, r2
    ccae:	0028      	movs	r0, r5
	}
	spi_read(&master, &dummy_read);

	while (length--) {
		while (!spi_is_ready_to_write(&master)) {
    ccb0:	2601      	movs	r6, #1
		}
		spi_write(&master, *data++);
		while (!spi_is_write_complete(&master)) {
    ccb2:	2502      	movs	r5, #2
		}
		/* Dummy read since SPI RX is double buffered */
		while (!spi_is_ready_to_read(&master)) {
    ccb4:	2104      	movs	r1, #4
    ccb6:	e013      	b.n	cce0 <trx_sram_write+0xf0>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
    ccb8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    ccba:	05d2      	lsls	r2, r2, #23
    ccbc:	0dd2      	lsrs	r2, r2, #23
    ccbe:	4926      	ldr	r1, [pc, #152]	; (cd58 <trx_sram_write+0x168>)
    ccc0:	800a      	strh	r2, [r1, #0]
    ccc2:	e7d1      	b.n	cc68 <trx_sram_write+0x78>
    ccc4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    ccc6:	05d2      	lsls	r2, r2, #23
    ccc8:	0dd2      	lsrs	r2, r2, #23
    ccca:	4923      	ldr	r1, [pc, #140]	; (cd58 <trx_sram_write+0x168>)
    cccc:	800a      	strh	r2, [r1, #0]
    ccce:	e7eb      	b.n	cca8 <trx_sram_write+0xb8>
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    ccd0:	4662      	mov	r2, ip
    ccd2:	2a01      	cmp	r2, #1
    ccd4:	d01e      	beq.n	cd14 <trx_sram_write+0x124>
		*rx_data = (uint8_t)spi_module->DATA.reg;
    ccd6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    ccd8:	b2d2      	uxtb	r2, r2
    ccda:	4f1f      	ldr	r7, [pc, #124]	; (cd58 <trx_sram_write+0x168>)
    ccdc:	803a      	strh	r2, [r7, #0]
    ccde:	3001      	adds	r0, #1
	while (length--) {
    cce0:	3c01      	subs	r4, #1
    cce2:	b2e4      	uxtb	r4, r4
    cce4:	2cff      	cmp	r4, #255	; 0xff
    cce6:	d01b      	beq.n	cd20 <trx_sram_write+0x130>
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    cce8:	7e1a      	ldrb	r2, [r3, #24]
		while (!spi_is_ready_to_write(&master)) {
    ccea:	4232      	tst	r2, r6
    ccec:	d0fc      	beq.n	cce8 <trx_sram_write+0xf8>
    ccee:	7e1a      	ldrb	r2, [r3, #24]
	if (!spi_is_ready_to_write(module)) {
    ccf0:	4232      	tst	r2, r6
    ccf2:	d001      	beq.n	ccf8 <trx_sram_write+0x108>
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    ccf4:	7802      	ldrb	r2, [r0, #0]
    ccf6:	629a      	str	r2, [r3, #40]	; 0x28
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
    ccf8:	7e1a      	ldrb	r2, [r3, #24]
		while (!spi_is_write_complete(&master)) {
    ccfa:	422a      	tst	r2, r5
    ccfc:	d0fc      	beq.n	ccf8 <trx_sram_write+0x108>
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    ccfe:	7e1a      	ldrb	r2, [r3, #24]
		while (!spi_is_ready_to_read(&master)) {
    cd00:	420a      	tst	r2, r1
    cd02:	d0fc      	beq.n	ccfe <trx_sram_write+0x10e>
    cd04:	7e1a      	ldrb	r2, [r3, #24]
	if (!spi_is_ready_to_read(module)) {
    cd06:	420a      	tst	r2, r1
    cd08:	d0e9      	beq.n	ccde <trx_sram_write+0xee>
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    cd0a:	8b5a      	ldrh	r2, [r3, #26]
    cd0c:	420a      	tst	r2, r1
    cd0e:	d0df      	beq.n	ccd0 <trx_sram_write+0xe0>
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
    cd10:	8359      	strh	r1, [r3, #26]
    cd12:	e7dd      	b.n	ccd0 <trx_sram_write+0xe0>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
    cd14:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    cd16:	05d2      	lsls	r2, r2, #23
    cd18:	0dd2      	lsrs	r2, r2, #23
    cd1a:	4f0f      	ldr	r7, [pc, #60]	; (cd58 <trx_sram_write+0x168>)
    cd1c:	803a      	strh	r2, [r7, #0]
    cd1e:	e7de      	b.n	ccde <trx_sram_write+0xee>
		}
		spi_read(&master, &dummy_read);
	}

	/* Stop the SPI transaction by setting SEL high */
	spi_select_slave(&master, &slave, false);
    cd20:	2200      	movs	r2, #0
    cd22:	490b      	ldr	r1, [pc, #44]	; (cd50 <trx_sram_write+0x160>)
    cd24:	4809      	ldr	r0, [pc, #36]	; (cd4c <trx_sram_write+0x15c>)
    cd26:	4b0b      	ldr	r3, [pc, #44]	; (cd54 <trx_sram_write+0x164>)
    cd28:	4798      	blx	r3
	if (cpu_irq_is_enabled_flags(flags))
    cd2a:	23ff      	movs	r3, #255	; 0xff
    cd2c:	4642      	mov	r2, r8
    cd2e:	4213      	tst	r3, r2
    cd30:	d005      	beq.n	cd3e <trx_sram_write+0x14e>
		cpu_irq_enable();
    cd32:	2201      	movs	r2, #1
    cd34:	4b04      	ldr	r3, [pc, #16]	; (cd48 <trx_sram_write+0x158>)
    cd36:	701a      	strb	r2, [r3, #0]
    cd38:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
    cd3c:	b662      	cpsie	i
#endif

	/*Restoring the interrupt status which was stored & enabling the global
	 * interrupt */
	LEAVE_TRX_CRITICAL_REGION();
}
    cd3e:	b002      	add	sp, #8
    cd40:	bc04      	pop	{r2}
    cd42:	4690      	mov	r8, r2
    cd44:	bdf0      	pop	{r4, r5, r6, r7, pc}
    cd46:	46c0      	nop			; (mov r8, r8)
    cd48:	20000008 	.word	0x20000008
    cd4c:	20002834 	.word	0x20002834
    cd50:	200027f8 	.word	0x200027f8
    cd54:	00007799 	.word	0x00007799
    cd58:	200027f0 	.word	0x200027f0

0000cd5c <trx_sram_read>:
 * @param[in] addr Start address in SRAM for read operation
 * @param[out] data Pointer to the location where data stored
 * @param[in] length Number of bytes to be read from SRAM
 */
void trx_sram_read(uint8_t addr, uint8_t *data, uint8_t length)
{
    cd5c:	b5f0      	push	{r4, r5, r6, r7, lr}
    cd5e:	46d6      	mov	lr, sl
    cd60:	464f      	mov	r7, r9
    cd62:	4646      	mov	r6, r8
    cd64:	b5c0      	push	{r6, r7, lr}
    cd66:	b082      	sub	sp, #8
    cd68:	0004      	movs	r4, r0
    cd6a:	000d      	movs	r5, r1
    cd6c:	0017      	movs	r7, r2
	delay_us(1); /* wap_rf4ce */
    cd6e:	2001      	movs	r0, #1
    cd70:	4b56      	ldr	r3, [pc, #344]	; (cecc <trx_sram_read+0x170>)
    cd72:	4798      	blx	r3
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
    cd74:	f3ef 8310 	mrs	r3, PRIMASK
	volatile irqflags_t flags = cpu_irq_is_enabled();
    cd78:	425a      	negs	r2, r3
    cd7a:	4153      	adcs	r3, r2
    cd7c:	9301      	str	r3, [sp, #4]
  __ASM volatile ("cpsid i" : : : "memory");
    cd7e:	b672      	cpsid	i
  __ASM volatile ("dmb 0xF":::"memory");
    cd80:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
    cd84:	2200      	movs	r2, #0
    cd86:	4b52      	ldr	r3, [pc, #328]	; (ced0 <trx_sram_read+0x174>)
    cd88:	701a      	strb	r2, [r3, #0]
	return flags;
    cd8a:	9b01      	ldr	r3, [sp, #4]
    cd8c:	4698      	mov	r8, r3
	**/
	ENTER_TRX_CRITICAL_REGION();
#if SAMD || SAMR21 || SAML21 || SAMR30
	uint16_t temp;
	/* Start SPI transaction by pulling SEL low */
	spi_select_slave(&master, &slave, true);
    cd8e:	4e51      	ldr	r6, [pc, #324]	; (ced4 <trx_sram_read+0x178>)
    cd90:	3201      	adds	r2, #1
    cd92:	4951      	ldr	r1, [pc, #324]	; (ced8 <trx_sram_read+0x17c>)
    cd94:	0030      	movs	r0, r6
    cd96:	4b51      	ldr	r3, [pc, #324]	; (cedc <trx_sram_read+0x180>)
    cd98:	4798      	blx	r3
	SercomSpi *const spi_module = &(module->hw->SPI);
    cd9a:	6833      	ldr	r3, [r6, #0]

	temp = TRX_CMD_SR;

	/* Send the command byte */
	while (!spi_is_ready_to_write(&master)) {
    cd9c:	2101      	movs	r1, #1
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    cd9e:	7e1a      	ldrb	r2, [r3, #24]
    cda0:	420a      	tst	r2, r1
    cda2:	d0fc      	beq.n	cd9e <trx_sram_read+0x42>
    cda4:	7e1a      	ldrb	r2, [r3, #24]
	if (!spi_is_ready_to_write(module)) {
    cda6:	07d2      	lsls	r2, r2, #31
    cda8:	d501      	bpl.n	cdae <trx_sram_read+0x52>
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    cdaa:	2200      	movs	r2, #0
    cdac:	629a      	str	r2, [r3, #40]	; 0x28
	}
	spi_write(&master, temp);
	while (!spi_is_write_complete(&master)) {
    cdae:	2102      	movs	r1, #2
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
    cdb0:	7e1a      	ldrb	r2, [r3, #24]
    cdb2:	420a      	tst	r2, r1
    cdb4:	d0fc      	beq.n	cdb0 <trx_sram_read+0x54>
	}
	/* Dummy read since SPI RX is double buffered */
	while (!spi_is_ready_to_read(&master)) {
    cdb6:	2104      	movs	r1, #4
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    cdb8:	7e1a      	ldrb	r2, [r3, #24]
    cdba:	420a      	tst	r2, r1
    cdbc:	d0fc      	beq.n	cdb8 <trx_sram_read+0x5c>
    cdbe:	7e1a      	ldrb	r2, [r3, #24]
	if (!spi_is_ready_to_read(module)) {
    cdc0:	0752      	lsls	r2, r2, #29
    cdc2:	d50c      	bpl.n	cdde <trx_sram_read+0x82>
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    cdc4:	8b5a      	ldrh	r2, [r3, #26]
    cdc6:	0752      	lsls	r2, r2, #29
    cdc8:	d501      	bpl.n	cdce <trx_sram_read+0x72>
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
    cdca:	2204      	movs	r2, #4
    cdcc:	835a      	strh	r2, [r3, #26]
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    cdce:	4a41      	ldr	r2, [pc, #260]	; (ced4 <trx_sram_read+0x178>)
    cdd0:	7992      	ldrb	r2, [r2, #6]
    cdd2:	2a01      	cmp	r2, #1
    cdd4:	d033      	beq.n	ce3e <trx_sram_read+0xe2>
		*rx_data = (uint8_t)spi_module->DATA.reg;
    cdd6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    cdd8:	b2d2      	uxtb	r2, r2
    cdda:	4941      	ldr	r1, [pc, #260]	; (cee0 <trx_sram_read+0x184>)
    cddc:	800a      	strh	r2, [r1, #0]
	}
	spi_read(&master, &dummy_read);

	/* Send the address from which the read operation should start */
	while (!spi_is_ready_to_write(&master)) {
    cdde:	2101      	movs	r1, #1
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    cde0:	7e1a      	ldrb	r2, [r3, #24]
    cde2:	420a      	tst	r2, r1
    cde4:	d0fc      	beq.n	cde0 <trx_sram_read+0x84>
    cde6:	7e1a      	ldrb	r2, [r3, #24]
	if (!spi_is_ready_to_write(module)) {
    cde8:	07d2      	lsls	r2, r2, #31
    cdea:	d500      	bpl.n	cdee <trx_sram_read+0x92>
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    cdec:	629c      	str	r4, [r3, #40]	; 0x28
	}
	spi_write(&master, addr);
	while (!spi_is_write_complete(&master)) {
    cdee:	2102      	movs	r1, #2
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
    cdf0:	7e1a      	ldrb	r2, [r3, #24]
    cdf2:	420a      	tst	r2, r1
    cdf4:	d0fc      	beq.n	cdf0 <trx_sram_read+0x94>
	}
	/* Dummy read since SPI RX is double buffered */
	while (!spi_is_ready_to_read(&master)) {
    cdf6:	2104      	movs	r1, #4
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    cdf8:	7e1a      	ldrb	r2, [r3, #24]
    cdfa:	420a      	tst	r2, r1
    cdfc:	d0fc      	beq.n	cdf8 <trx_sram_read+0x9c>
    cdfe:	7e1a      	ldrb	r2, [r3, #24]
	if (!spi_is_ready_to_read(module)) {
    ce00:	0752      	lsls	r2, r2, #29
    ce02:	d50c      	bpl.n	ce1e <trx_sram_read+0xc2>
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    ce04:	8b5a      	ldrh	r2, [r3, #26]
    ce06:	0752      	lsls	r2, r2, #29
    ce08:	d501      	bpl.n	ce0e <trx_sram_read+0xb2>
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
    ce0a:	2204      	movs	r2, #4
    ce0c:	835a      	strh	r2, [r3, #26]
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    ce0e:	4a31      	ldr	r2, [pc, #196]	; (ced4 <trx_sram_read+0x178>)
    ce10:	7992      	ldrb	r2, [r2, #6]
    ce12:	2a01      	cmp	r2, #1
    ce14:	d019      	beq.n	ce4a <trx_sram_read+0xee>
		*rx_data = (uint8_t)spi_module->DATA.reg;
    ce16:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    ce18:	b2db      	uxtb	r3, r3
    ce1a:	4a31      	ldr	r2, [pc, #196]	; (cee0 <trx_sram_read+0x184>)
    ce1c:	8013      	strh	r3, [r2, #0]
	}
	spi_read(&master, &dummy_read);

	/* Upload the received byte in the user provided location */
	while (length--) {
    ce1e:	1e7b      	subs	r3, r7, #1
    ce20:	b2db      	uxtb	r3, r3
    ce22:	2f00      	cmp	r7, #0
    ce24:	d03c      	beq.n	cea0 <trx_sram_read+0x144>
    ce26:	3301      	adds	r3, #1
    ce28:	469c      	mov	ip, r3
    ce2a:	44ac      	add	ip, r5
    ce2c:	2700      	movs	r7, #0
	SercomSpi *const spi_module = &(module->hw->SPI);
    ce2e:	4e29      	ldr	r6, [pc, #164]	; (ced4 <trx_sram_read+0x178>)
		while (!spi_is_ready_to_write(&master)) {
    ce30:	2001      	movs	r0, #1
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    ce32:	2300      	movs	r3, #0
    ce34:	469a      	mov	sl, r3
		}
		spi_write(&master, 0);
		while (!spi_is_write_complete(&master)) {
    ce36:	2402      	movs	r4, #2
		}
		/* Dummy read since SPI RX is double buffered */
		while (!spi_is_ready_to_read(&master)) {
    ce38:	2104      	movs	r1, #4
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    ce3a:	46b1      	mov	r9, r6
    ce3c:	e015      	b.n	ce6a <trx_sram_read+0x10e>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
    ce3e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    ce40:	05d2      	lsls	r2, r2, #23
    ce42:	0dd2      	lsrs	r2, r2, #23
    ce44:	4926      	ldr	r1, [pc, #152]	; (cee0 <trx_sram_read+0x184>)
    ce46:	800a      	strh	r2, [r1, #0]
    ce48:	e7c9      	b.n	cdde <trx_sram_read+0x82>
    ce4a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    ce4c:	05db      	lsls	r3, r3, #23
    ce4e:	0ddb      	lsrs	r3, r3, #23
    ce50:	4a23      	ldr	r2, [pc, #140]	; (cee0 <trx_sram_read+0x184>)
    ce52:	8013      	strh	r3, [r2, #0]
    ce54:	e7e3      	b.n	ce1e <trx_sram_read+0xc2>
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    ce56:	464a      	mov	r2, r9
    ce58:	7992      	ldrb	r2, [r2, #6]
    ce5a:	2a01      	cmp	r2, #1
    ce5c:	d01c      	beq.n	ce98 <trx_sram_read+0x13c>
		*rx_data = (uint8_t)spi_module->DATA.reg;
    ce5e:	6a9f      	ldr	r7, [r3, #40]	; 0x28
    ce60:	b2ff      	uxtb	r7, r7
		}
		spi_read(&master, &temp);
		*data = temp;
    ce62:	702f      	strb	r7, [r5, #0]
		data++;
    ce64:	3501      	adds	r5, #1
	while (length--) {
    ce66:	4565      	cmp	r5, ip
    ce68:	d01a      	beq.n	cea0 <trx_sram_read+0x144>
	SercomSpi *const spi_module = &(module->hw->SPI);
    ce6a:	6833      	ldr	r3, [r6, #0]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    ce6c:	7e1a      	ldrb	r2, [r3, #24]
		while (!spi_is_ready_to_write(&master)) {
    ce6e:	4202      	tst	r2, r0
    ce70:	d0fc      	beq.n	ce6c <trx_sram_read+0x110>
    ce72:	7e1a      	ldrb	r2, [r3, #24]
	if (!spi_is_ready_to_write(module)) {
    ce74:	4202      	tst	r2, r0
    ce76:	d001      	beq.n	ce7c <trx_sram_read+0x120>
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    ce78:	4652      	mov	r2, sl
    ce7a:	629a      	str	r2, [r3, #40]	; 0x28
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
    ce7c:	7e1a      	ldrb	r2, [r3, #24]
		while (!spi_is_write_complete(&master)) {
    ce7e:	4222      	tst	r2, r4
    ce80:	d0fc      	beq.n	ce7c <trx_sram_read+0x120>
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    ce82:	7e1a      	ldrb	r2, [r3, #24]
		while (!spi_is_ready_to_read(&master)) {
    ce84:	420a      	tst	r2, r1
    ce86:	d0fc      	beq.n	ce82 <trx_sram_read+0x126>
    ce88:	7e1a      	ldrb	r2, [r3, #24]
	if (!spi_is_ready_to_read(module)) {
    ce8a:	420a      	tst	r2, r1
    ce8c:	d0e9      	beq.n	ce62 <trx_sram_read+0x106>
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    ce8e:	8b5a      	ldrh	r2, [r3, #26]
    ce90:	420a      	tst	r2, r1
    ce92:	d0e0      	beq.n	ce56 <trx_sram_read+0xfa>
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
    ce94:	8359      	strh	r1, [r3, #26]
    ce96:	e7de      	b.n	ce56 <trx_sram_read+0xfa>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
    ce98:	6a9f      	ldr	r7, [r3, #40]	; 0x28
    ce9a:	05ff      	lsls	r7, r7, #23
    ce9c:	0dff      	lsrs	r7, r7, #23
    ce9e:	e7e0      	b.n	ce62 <trx_sram_read+0x106>
	}

	/* Stop the SPI transaction by setting SEL high */
	spi_select_slave(&master, &slave, false);
    cea0:	2200      	movs	r2, #0
    cea2:	490d      	ldr	r1, [pc, #52]	; (ced8 <trx_sram_read+0x17c>)
    cea4:	480b      	ldr	r0, [pc, #44]	; (ced4 <trx_sram_read+0x178>)
    cea6:	4b0d      	ldr	r3, [pc, #52]	; (cedc <trx_sram_read+0x180>)
    cea8:	4798      	blx	r3
	if (cpu_irq_is_enabled_flags(flags))
    ceaa:	23ff      	movs	r3, #255	; 0xff
    ceac:	4642      	mov	r2, r8
    ceae:	4213      	tst	r3, r2
    ceb0:	d005      	beq.n	cebe <trx_sram_read+0x162>
		cpu_irq_enable();
    ceb2:	2201      	movs	r2, #1
    ceb4:	4b06      	ldr	r3, [pc, #24]	; (ced0 <trx_sram_read+0x174>)
    ceb6:	701a      	strb	r2, [r3, #0]
    ceb8:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
    cebc:	b662      	cpsie	i
#endif

	/*Restoring the interrupt status which was stored & enabling the global
	 * interrupt */
	LEAVE_TRX_CRITICAL_REGION();
}
    cebe:	b002      	add	sp, #8
    cec0:	bc1c      	pop	{r2, r3, r4}
    cec2:	4690      	mov	r8, r2
    cec4:	4699      	mov	r9, r3
    cec6:	46a2      	mov	sl, r4
    cec8:	bdf0      	pop	{r4, r5, r6, r7, pc}
    ceca:	46c0      	nop			; (mov r8, r8)
    cecc:	000064c9 	.word	0x000064c9
    ced0:	20000008 	.word	0x20000008
    ced4:	20002834 	.word	0x20002834
    ced8:	200027f8 	.word	0x200027f8
    cedc:	00007799 	.word	0x00007799
    cee0:	200027f0 	.word	0x200027f0

0000cee4 <trx_aes_wrrd>:
 * @param addr Start address in the SRAM for the write operation
 * @param idata Pointer to the data written/read into/from SRAM
 * @param length Number of bytes written/read into/from SRAM
 */
void trx_aes_wrrd(uint8_t addr, uint8_t *idata, uint8_t length)
{
    cee4:	b5f0      	push	{r4, r5, r6, r7, lr}
    cee6:	46d6      	mov	lr, sl
    cee8:	464f      	mov	r7, r9
    ceea:	4646      	mov	r6, r8
    ceec:	b5c0      	push	{r6, r7, lr}
    ceee:	0006      	movs	r6, r0
    cef0:	468a      	mov	sl, r1
    cef2:	0014      	movs	r4, r2
#if SAMD || SAMR21 || SAML21 || SAMR30
	uint16_t odata_var = 0;
#endif
	uint8_t temp;

	delay_us(1); /* wap_rf4ce */
    cef4:	2001      	movs	r0, #1
    cef6:	4b76      	ldr	r3, [pc, #472]	; (d0d0 <trx_aes_wrrd+0x1ec>)
    cef8:	4798      	blx	r3

	ENTER_TRX_REGION();
    cefa:	2100      	movs	r1, #0
    cefc:	2000      	movs	r0, #0
    cefe:	4b75      	ldr	r3, [pc, #468]	; (d0d4 <trx_aes_wrrd+0x1f0>)
    cf00:	4798      	blx	r3
		/* wait until SPI gets available */
	}
#endif
#if SAMD || SAMR21 || SAML21 || SAMR30
	/* Start SPI transaction by pulling SEL low */
	spi_select_slave(&master, &slave, true);
    cf02:	4f75      	ldr	r7, [pc, #468]	; (d0d8 <trx_aes_wrrd+0x1f4>)
    cf04:	2201      	movs	r2, #1
    cf06:	4975      	ldr	r1, [pc, #468]	; (d0dc <trx_aes_wrrd+0x1f8>)
    cf08:	0038      	movs	r0, r7
    cf0a:	4b75      	ldr	r3, [pc, #468]	; (d0e0 <trx_aes_wrrd+0x1fc>)
    cf0c:	4798      	blx	r3
	SercomSpi *const spi_module = &(module->hw->SPI);
    cf0e:	683b      	ldr	r3, [r7, #0]

	/* Send the command byte */
	temp = TRX_CMD_SW;

	while (!spi_is_ready_to_write(&master)) {
    cf10:	2101      	movs	r1, #1
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    cf12:	7e1a      	ldrb	r2, [r3, #24]
    cf14:	420a      	tst	r2, r1
    cf16:	d0fc      	beq.n	cf12 <trx_aes_wrrd+0x2e>
    cf18:	7e1a      	ldrb	r2, [r3, #24]
	if (!spi_is_ready_to_write(module)) {
    cf1a:	07d2      	lsls	r2, r2, #31
    cf1c:	d501      	bpl.n	cf22 <trx_aes_wrrd+0x3e>
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    cf1e:	2240      	movs	r2, #64	; 0x40
    cf20:	629a      	str	r2, [r3, #40]	; 0x28
	}
	spi_write(&master, temp);
	while (!spi_is_write_complete(&master)) {
    cf22:	2102      	movs	r1, #2
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
    cf24:	7e1a      	ldrb	r2, [r3, #24]
    cf26:	420a      	tst	r2, r1
    cf28:	d0fc      	beq.n	cf24 <trx_aes_wrrd+0x40>
	}
	/* Dummy read since SPI RX is double buffered */
	while (!spi_is_ready_to_read(&master)) {
    cf2a:	2104      	movs	r1, #4
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    cf2c:	7e1a      	ldrb	r2, [r3, #24]
    cf2e:	420a      	tst	r2, r1
    cf30:	d0fc      	beq.n	cf2c <trx_aes_wrrd+0x48>
    cf32:	7e1a      	ldrb	r2, [r3, #24]
	if (!spi_is_ready_to_read(module)) {
    cf34:	0752      	lsls	r2, r2, #29
    cf36:	d50c      	bpl.n	cf52 <trx_aes_wrrd+0x6e>
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    cf38:	8b5a      	ldrh	r2, [r3, #26]
    cf3a:	0752      	lsls	r2, r2, #29
    cf3c:	d501      	bpl.n	cf42 <trx_aes_wrrd+0x5e>
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
    cf3e:	2204      	movs	r2, #4
    cf40:	835a      	strh	r2, [r3, #26]
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    cf42:	4a65      	ldr	r2, [pc, #404]	; (d0d8 <trx_aes_wrrd+0x1f4>)
    cf44:	7992      	ldrb	r2, [r2, #6]
    cf46:	2a01      	cmp	r2, #1
    cf48:	d055      	beq.n	cff6 <trx_aes_wrrd+0x112>
		*rx_data = (uint8_t)spi_module->DATA.reg;
    cf4a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    cf4c:	b2d2      	uxtb	r2, r2
    cf4e:	4965      	ldr	r1, [pc, #404]	; (d0e4 <trx_aes_wrrd+0x200>)
    cf50:	800a      	strh	r2, [r1, #0]
	}
	spi_read(&master, &dummy_read);

	/* write SRAM start address */
	while (!spi_is_ready_to_write(&master)) {
    cf52:	2101      	movs	r1, #1
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    cf54:	7e1a      	ldrb	r2, [r3, #24]
    cf56:	420a      	tst	r2, r1
    cf58:	d0fc      	beq.n	cf54 <trx_aes_wrrd+0x70>
    cf5a:	7e1a      	ldrb	r2, [r3, #24]
	if (!spi_is_ready_to_write(module)) {
    cf5c:	07d2      	lsls	r2, r2, #31
    cf5e:	d500      	bpl.n	cf62 <trx_aes_wrrd+0x7e>
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    cf60:	629e      	str	r6, [r3, #40]	; 0x28
	}
	spi_write(&master, addr);
	while (!spi_is_write_complete(&master)) {
    cf62:	2102      	movs	r1, #2
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
    cf64:	7e1a      	ldrb	r2, [r3, #24]
    cf66:	420a      	tst	r2, r1
    cf68:	d0fc      	beq.n	cf64 <trx_aes_wrrd+0x80>
	}
	/* Dummy read since SPI RX is double buffered */
	while (!spi_is_ready_to_read(&master)) {
    cf6a:	2104      	movs	r1, #4
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    cf6c:	7e1a      	ldrb	r2, [r3, #24]
    cf6e:	420a      	tst	r2, r1
    cf70:	d0fc      	beq.n	cf6c <trx_aes_wrrd+0x88>
    cf72:	7e1a      	ldrb	r2, [r3, #24]
	if (!spi_is_ready_to_read(module)) {
    cf74:	0752      	lsls	r2, r2, #29
    cf76:	d50c      	bpl.n	cf92 <trx_aes_wrrd+0xae>
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    cf78:	8b5a      	ldrh	r2, [r3, #26]
    cf7a:	0752      	lsls	r2, r2, #29
    cf7c:	d501      	bpl.n	cf82 <trx_aes_wrrd+0x9e>
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
    cf7e:	2204      	movs	r2, #4
    cf80:	835a      	strh	r2, [r3, #26]
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    cf82:	4a55      	ldr	r2, [pc, #340]	; (d0d8 <trx_aes_wrrd+0x1f4>)
    cf84:	7992      	ldrb	r2, [r2, #6]
    cf86:	2a01      	cmp	r2, #1
    cf88:	d03b      	beq.n	d002 <trx_aes_wrrd+0x11e>
		*rx_data = (uint8_t)spi_module->DATA.reg;
    cf8a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    cf8c:	b2d2      	uxtb	r2, r2
    cf8e:	4955      	ldr	r1, [pc, #340]	; (d0e4 <trx_aes_wrrd+0x200>)
    cf90:	800a      	strh	r2, [r1, #0]

	/* now transfer data */
	odata = idata;

	/* write data byte 0 - the obtained value in SPDR is meaningless */
	while (!spi_is_ready_to_write(&master)) {
    cf92:	2101      	movs	r1, #1
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    cf94:	7e1a      	ldrb	r2, [r3, #24]
    cf96:	420a      	tst	r2, r1
    cf98:	d0fc      	beq.n	cf94 <trx_aes_wrrd+0xb0>
    cf9a:	7e1a      	ldrb	r2, [r3, #24]
	if (!spi_is_ready_to_write(module)) {
    cf9c:	07d2      	lsls	r2, r2, #31
    cf9e:	d502      	bpl.n	cfa6 <trx_aes_wrrd+0xc2>
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    cfa0:	4652      	mov	r2, sl
    cfa2:	7812      	ldrb	r2, [r2, #0]
    cfa4:	629a      	str	r2, [r3, #40]	; 0x28
	}
	spi_write(&master, *idata++);
	while (!spi_is_write_complete(&master)) {
    cfa6:	2102      	movs	r1, #2
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
    cfa8:	7e1a      	ldrb	r2, [r3, #24]
    cfaa:	420a      	tst	r2, r1
    cfac:	d0fc      	beq.n	cfa8 <trx_aes_wrrd+0xc4>
	}
	/* Dummy read since SPI RX is double buffered */
	while (!spi_is_ready_to_read(&master)) {
    cfae:	2104      	movs	r1, #4
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    cfb0:	7e1a      	ldrb	r2, [r3, #24]
    cfb2:	420a      	tst	r2, r1
    cfb4:	d0fc      	beq.n	cfb0 <trx_aes_wrrd+0xcc>
    cfb6:	7e1a      	ldrb	r2, [r3, #24]
	if (!spi_is_ready_to_read(module)) {
    cfb8:	0752      	lsls	r2, r2, #29
    cfba:	d50c      	bpl.n	cfd6 <trx_aes_wrrd+0xf2>
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    cfbc:	8b5a      	ldrh	r2, [r3, #26]
    cfbe:	0752      	lsls	r2, r2, #29
    cfc0:	d501      	bpl.n	cfc6 <trx_aes_wrrd+0xe2>
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
    cfc2:	2204      	movs	r2, #4
    cfc4:	835a      	strh	r2, [r3, #26]
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    cfc6:	4a44      	ldr	r2, [pc, #272]	; (d0d8 <trx_aes_wrrd+0x1f4>)
    cfc8:	7992      	ldrb	r2, [r2, #6]
    cfca:	2a01      	cmp	r2, #1
    cfcc:	d01f      	beq.n	d00e <trx_aes_wrrd+0x12a>
		*rx_data = (uint8_t)spi_module->DATA.reg;
    cfce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    cfd0:	b2db      	uxtb	r3, r3
    cfd2:	4a44      	ldr	r2, [pc, #272]	; (d0e4 <trx_aes_wrrd+0x200>)
    cfd4:	8013      	strh	r3, [r2, #0]
	}
	spi_read(&master, &dummy_read);

	/* Reading Spi Data for the length specified */
	while (length > 0) {
    cfd6:	2700      	movs	r7, #0
    cfd8:	2c00      	cmp	r4, #0
    cfda:	d043      	beq.n	d064 <trx_aes_wrrd+0x180>
    cfdc:	4656      	mov	r6, sl
    cfde:	3c01      	subs	r4, #1
    cfe0:	b2e4      	uxtb	r4, r4
    cfe2:	3401      	adds	r4, #1
    cfe4:	44a2      	add	sl, r4
    cfe6:	46d0      	mov	r8, sl
    cfe8:	2700      	movs	r7, #0
	SercomSpi *const spi_module = &(module->hw->SPI);
    cfea:	4d3b      	ldr	r5, [pc, #236]	; (d0d8 <trx_aes_wrrd+0x1f4>)
		while (!spi_is_ready_to_write(&master)) {
    cfec:	2001      	movs	r0, #1
		}
		spi_write(&master, *idata++);
		while (!spi_is_write_complete(&master)) {
    cfee:	2402      	movs	r4, #2
		}
		while (!spi_is_ready_to_read(&master)) {
    cff0:	2104      	movs	r1, #4
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    cff2:	46a9      	mov	r9, r5
    cff4:	e01b      	b.n	d02e <trx_aes_wrrd+0x14a>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
    cff6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    cff8:	05d2      	lsls	r2, r2, #23
    cffa:	0dd2      	lsrs	r2, r2, #23
    cffc:	4939      	ldr	r1, [pc, #228]	; (d0e4 <trx_aes_wrrd+0x200>)
    cffe:	800a      	strh	r2, [r1, #0]
    d000:	e7a7      	b.n	cf52 <trx_aes_wrrd+0x6e>
    d002:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    d004:	05d2      	lsls	r2, r2, #23
    d006:	0dd2      	lsrs	r2, r2, #23
    d008:	4936      	ldr	r1, [pc, #216]	; (d0e4 <trx_aes_wrrd+0x200>)
    d00a:	800a      	strh	r2, [r1, #0]
    d00c:	e7c1      	b.n	cf92 <trx_aes_wrrd+0xae>
    d00e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    d010:	05db      	lsls	r3, r3, #23
    d012:	0ddb      	lsrs	r3, r3, #23
    d014:	4a33      	ldr	r2, [pc, #204]	; (d0e4 <trx_aes_wrrd+0x200>)
    d016:	8013      	strh	r3, [r2, #0]
    d018:	e7dd      	b.n	cfd6 <trx_aes_wrrd+0xf2>
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    d01a:	464a      	mov	r2, r9
    d01c:	7992      	ldrb	r2, [r2, #6]
    d01e:	2a01      	cmp	r2, #1
    d020:	d01c      	beq.n	d05c <trx_aes_wrrd+0x178>
		*rx_data = (uint8_t)spi_module->DATA.reg;
    d022:	6a9f      	ldr	r7, [r3, #40]	; 0x28
    d024:	b2ff      	uxtb	r7, r7
		}

#if SAMD || SAMR21 || SAML21 || SAMR30
		spi_read(&master, &odata_var);
		*odata++ = (uint8_t)odata_var;
    d026:	7037      	strb	r7, [r6, #0]
    d028:	3601      	adds	r6, #1
	while (length > 0) {
    d02a:	45b0      	cmp	r8, r6
    d02c:	d01a      	beq.n	d064 <trx_aes_wrrd+0x180>
	SercomSpi *const spi_module = &(module->hw->SPI);
    d02e:	682b      	ldr	r3, [r5, #0]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    d030:	7e1a      	ldrb	r2, [r3, #24]
		while (!spi_is_ready_to_write(&master)) {
    d032:	4202      	tst	r2, r0
    d034:	d0fc      	beq.n	d030 <trx_aes_wrrd+0x14c>
    d036:	7e1a      	ldrb	r2, [r3, #24]
	if (!spi_is_ready_to_write(module)) {
    d038:	4202      	tst	r2, r0
    d03a:	d001      	beq.n	d040 <trx_aes_wrrd+0x15c>
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    d03c:	7872      	ldrb	r2, [r6, #1]
    d03e:	629a      	str	r2, [r3, #40]	; 0x28
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
    d040:	7e1a      	ldrb	r2, [r3, #24]
		while (!spi_is_write_complete(&master)) {
    d042:	4222      	tst	r2, r4
    d044:	d0fc      	beq.n	d040 <trx_aes_wrrd+0x15c>
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    d046:	7e1a      	ldrb	r2, [r3, #24]
		while (!spi_is_ready_to_read(&master)) {
    d048:	420a      	tst	r2, r1
    d04a:	d0fc      	beq.n	d046 <trx_aes_wrrd+0x162>
    d04c:	7e1a      	ldrb	r2, [r3, #24]
	if (!spi_is_ready_to_read(module)) {
    d04e:	420a      	tst	r2, r1
    d050:	d0e9      	beq.n	d026 <trx_aes_wrrd+0x142>
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    d052:	8b5a      	ldrh	r2, [r3, #26]
    d054:	420a      	tst	r2, r1
    d056:	d0e0      	beq.n	d01a <trx_aes_wrrd+0x136>
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
    d058:	8359      	strh	r1, [r3, #26]
    d05a:	e7de      	b.n	d01a <trx_aes_wrrd+0x136>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
    d05c:	6a9f      	ldr	r7, [r3, #40]	; 0x28
    d05e:	05ff      	lsls	r7, r7, #23
    d060:	0dff      	lsrs	r7, r7, #23
    d062:	e7e0      	b.n	d026 <trx_aes_wrrd+0x142>
	SercomSpi *const spi_module = &(module->hw->SPI);
    d064:	4b1c      	ldr	r3, [pc, #112]	; (d0d8 <trx_aes_wrrd+0x1f4>)
    d066:	681b      	ldr	r3, [r3, #0]
#endif
		length--;
	}

	/* To get the last data byte, write some dummy byte */
	while (!spi_is_ready_to_write(&master)) {
    d068:	2101      	movs	r1, #1
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    d06a:	7e1a      	ldrb	r2, [r3, #24]
    d06c:	420a      	tst	r2, r1
    d06e:	d0fc      	beq.n	d06a <trx_aes_wrrd+0x186>
    d070:	7e1a      	ldrb	r2, [r3, #24]
	if (!spi_is_ready_to_write(module)) {
    d072:	07d2      	lsls	r2, r2, #31
    d074:	d501      	bpl.n	d07a <trx_aes_wrrd+0x196>
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    d076:	2200      	movs	r2, #0
    d078:	629a      	str	r2, [r3, #40]	; 0x28
	}
	spi_write(&master, 0);
	while (!spi_is_write_complete(&master)) {
    d07a:	2102      	movs	r1, #2
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
    d07c:	7e1a      	ldrb	r2, [r3, #24]
    d07e:	420a      	tst	r2, r1
    d080:	d0fc      	beq.n	d07c <trx_aes_wrrd+0x198>
	}
	while (!spi_is_ready_to_read(&master)) {
    d082:	2104      	movs	r1, #4
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    d084:	7e1a      	ldrb	r2, [r3, #24]
    d086:	420a      	tst	r2, r1
    d088:	d0fc      	beq.n	d084 <trx_aes_wrrd+0x1a0>
    d08a:	7e1a      	ldrb	r2, [r3, #24]
	if (!spi_is_ready_to_read(module)) {
    d08c:	0752      	lsls	r2, r2, #29
    d08e:	d50a      	bpl.n	d0a6 <trx_aes_wrrd+0x1c2>
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    d090:	8b5a      	ldrh	r2, [r3, #26]
    d092:	0752      	lsls	r2, r2, #29
    d094:	d501      	bpl.n	d09a <trx_aes_wrrd+0x1b6>
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
    d096:	2204      	movs	r2, #4
    d098:	835a      	strh	r2, [r3, #26]
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    d09a:	4a0f      	ldr	r2, [pc, #60]	; (d0d8 <trx_aes_wrrd+0x1f4>)
    d09c:	7992      	ldrb	r2, [r2, #6]
    d09e:	2a01      	cmp	r2, #1
    d0a0:	d011      	beq.n	d0c6 <trx_aes_wrrd+0x1e2>
		*rx_data = (uint8_t)spi_module->DATA.reg;
    d0a2:	6a9f      	ldr	r7, [r3, #40]	; 0x28
    d0a4:	b2ff      	uxtb	r7, r7
	}
#if SAMD || SAMR21 || SAML21 || SAMR30
	spi_read(&master, &odata_var);
	*odata = (uint8_t)odata_var;
    d0a6:	4653      	mov	r3, sl
    d0a8:	701f      	strb	r7, [r3, #0]
#else
	spi_read(&master, (uint16_t *)odata);
#endif

	/* Stop the SPI transaction by setting SEL high */
	spi_select_slave(&master, &slave, false);
    d0aa:	2200      	movs	r2, #0
    d0ac:	490b      	ldr	r1, [pc, #44]	; (d0dc <trx_aes_wrrd+0x1f8>)
    d0ae:	480a      	ldr	r0, [pc, #40]	; (d0d8 <trx_aes_wrrd+0x1f4>)
    d0b0:	4b0b      	ldr	r3, [pc, #44]	; (d0e0 <trx_aes_wrrd+0x1fc>)
    d0b2:	4798      	blx	r3
	spi_read_packet(AT86RFX_SPI, odata, 1);

	/* Stop the SPI transaction by setting SEL high */
	spi_deselect_device(AT86RFX_SPI, &SPI_AT86RFX_DEVICE);
#endif
	LEAVE_TRX_REGION();
    d0b4:	2100      	movs	r1, #0
    d0b6:	2000      	movs	r0, #0
    d0b8:	4b0b      	ldr	r3, [pc, #44]	; (d0e8 <trx_aes_wrrd+0x204>)
    d0ba:	4798      	blx	r3
}
    d0bc:	bc1c      	pop	{r2, r3, r4}
    d0be:	4690      	mov	r8, r2
    d0c0:	4699      	mov	r9, r3
    d0c2:	46a2      	mov	sl, r4
    d0c4:	bdf0      	pop	{r4, r5, r6, r7, pc}
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
    d0c6:	6a9f      	ldr	r7, [r3, #40]	; 0x28
    d0c8:	05ff      	lsls	r7, r7, #23
    d0ca:	0dff      	lsrs	r7, r7, #23
    d0cc:	e7eb      	b.n	d0a6 <trx_aes_wrrd+0x1c2>
    d0ce:	46c0      	nop			; (mov r8, r8)
    d0d0:	000064c9 	.word	0x000064c9
    d0d4:	00006685 	.word	0x00006685
    d0d8:	20002834 	.word	0x20002834
    d0dc:	200027f8 	.word	0x200027f8
    d0e0:	00007799 	.word	0x00007799
    d0e4:	200027f0 	.word	0x200027f0
    d0e8:	00006665 	.word	0x00006665

0000d0ec <ReadMacAddress>:
* Overview:		    Uses the MAC Address from the EEPROM for addressing
*
* Note:			    
**********************************************************************/
void ReadMacAddress(void)
{
    d0ec:	b510      	push	{r4, lr}
   {
     myLongAddress[i] = (NVM_UID_ADDRESS[j] & 0xFF);
	 myLongAddress[i + 1] = (NVM_UID_ADDRESS[j] >> 8);
   }
#elif ((BOARD == SAMR30_XPLAINED_PRO) || (BOARD == SAMR21_XPLAINED_PRO))
   uint8_t* peui64 = edbg_eui_read_eui64();
    d0ee:	4b06      	ldr	r3, [pc, #24]	; (d108 <ReadMacAddress+0x1c>)
    d0f0:	4798      	blx	r3
    d0f2:	1dc3      	adds	r3, r0, #7
    d0f4:	4a05      	ldr	r2, [pc, #20]	; (d10c <ReadMacAddress+0x20>)
    d0f6:	3801      	subs	r0, #1
	for(uint8_t k=0; k<MY_ADDRESS_LENGTH; k++)
   {
		myLongAddress[k] = peui64[MY_ADDRESS_LENGTH-k-1];
    d0f8:	7819      	ldrb	r1, [r3, #0]
    d0fa:	7011      	strb	r1, [r2, #0]
    d0fc:	3b01      	subs	r3, #1
    d0fe:	3201      	adds	r2, #1
	for(uint8_t k=0; k<MY_ADDRESS_LENGTH; k++)
    d100:	4283      	cmp	r3, r0
    d102:	d1f9      	bne.n	d0f8 <ReadMacAddress+0xc>
   }
#endif
}
    d104:	bd10      	pop	{r4, pc}
    d106:	46c0      	nop			; (mov r8, r8)
    d108:	0000c275 	.word	0x0000c275
    d10c:	20000094 	.word	0x20000094

0000d110 <main>:
{
    d110:	b510      	push	{r4, lr}
	system_init();
    d112:	4b0c      	ldr	r3, [pc, #48]	; (d144 <main+0x34>)
    d114:	4798      	blx	r3
	delay_init();
    d116:	4b0c      	ldr	r3, [pc, #48]	; (d148 <main+0x38>)
    d118:	4798      	blx	r3
	cpu_irq_enable();	
    d11a:	2201      	movs	r2, #1
    d11c:	4b0b      	ldr	r3, [pc, #44]	; (d14c <main+0x3c>)
    d11e:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dmb 0xF":::"memory");
    d120:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
    d124:	b662      	cpsie	i
	ReadMacAddress();
    d126:	4b0a      	ldr	r3, [pc, #40]	; (d150 <main+0x40>)
    d128:	4798      	blx	r3
    SYS_TimerInit();
    d12a:	4b0a      	ldr	r3, [pc, #40]	; (d154 <main+0x44>)
    d12c:	4798      	blx	r3
    nvm_init(INT_FLASH);
    d12e:	2000      	movs	r0, #0
    d130:	4b09      	ldr	r3, [pc, #36]	; (d158 <main+0x48>)
    d132:	4798      	blx	r3
    PDS_Init();
    d134:	4b09      	ldr	r3, [pc, #36]	; (d15c <main+0x4c>)
    d136:	4798      	blx	r3
	streetlight_init();
    d138:	4b09      	ldr	r3, [pc, #36]	; (d160 <main+0x50>)
    d13a:	4798      	blx	r3
		streetlight_task();
    d13c:	4c09      	ldr	r4, [pc, #36]	; (d164 <main+0x54>)
    d13e:	47a0      	blx	r4
    d140:	e7fd      	b.n	d13e <main+0x2e>
    d142:	46c0      	nop			; (mov r8, r8)
    d144:	000086fd 	.word	0x000086fd
    d148:	00006489 	.word	0x00006489
    d14c:	20000008 	.word	0x20000008
    d150:	0000d0ed 	.word	0x0000d0ed
    d154:	0000bf01 	.word	0x0000bf01
    d158:	0000c3f9 	.word	0x0000c3f9
    d15c:	0000a7c1 	.word	0x0000a7c1
    d160:	000062f5 	.word	0x000062f5
    d164:	00006391 	.word	0x00006391

0000d168 <common_tc_read_count>:
    d168:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    d16a:	4b0d      	ldr	r3, [pc, #52]	; (d1a0 <common_tc_read_count+0x38>)
    d16c:	4798      	blx	r3
    d16e:	4b0d      	ldr	r3, [pc, #52]	; (d1a4 <common_tc_read_count+0x3c>)
    d170:	781b      	ldrb	r3, [r3, #0]
    d172:	2b00      	cmp	r3, #0
    d174:	d00e      	beq.n	d194 <common_tc_read_count+0x2c>
    d176:	4b0c      	ldr	r3, [pc, #48]	; (d1a8 <common_tc_read_count+0x40>)
    d178:	781d      	ldrb	r5, [r3, #0]
    d17a:	4b0a      	ldr	r3, [pc, #40]	; (d1a4 <common_tc_read_count+0x3c>)
    d17c:	781f      	ldrb	r7, [r3, #0]
    d17e:	4c0b      	ldr	r4, [pc, #44]	; (d1ac <common_tc_read_count+0x44>)
    d180:	1c29      	adds	r1, r5, #0
    d182:	47a0      	blx	r4
    d184:	1c06      	adds	r6, r0, #0
    d186:	480a      	ldr	r0, [pc, #40]	; (d1b0 <common_tc_read_count+0x48>)
    d188:	1c29      	adds	r1, r5, #0
    d18a:	47a0      	blx	r4
    d18c:	4378      	muls	r0, r7
    d18e:	1830      	adds	r0, r6, r0
    d190:	b280      	uxth	r0, r0
    d192:	e004      	b.n	d19e <common_tc_read_count+0x36>
    d194:	4b04      	ldr	r3, [pc, #16]	; (d1a8 <common_tc_read_count+0x40>)
    d196:	7819      	ldrb	r1, [r3, #0]
    d198:	4b04      	ldr	r3, [pc, #16]	; (d1ac <common_tc_read_count+0x44>)
    d19a:	4798      	blx	r3
    d19c:	b280      	uxth	r0, r0
    d19e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    d1a0:	0000c0e9 	.word	0x0000c0e9
    d1a4:	20001ccc 	.word	0x20001ccc
    d1a8:	20002840 	.word	0x20002840
    d1ac:	0001257d 	.word	0x0001257d
    d1b0:	0000ffff 	.word	0x0000ffff

0000d1b4 <common_tc_delay>:
    d1b4:	b510      	push	{r4, lr}
    d1b6:	1c04      	adds	r4, r0, #0
    d1b8:	4b13      	ldr	r3, [pc, #76]	; (d208 <common_tc_delay+0x54>)
    d1ba:	4798      	blx	r3
    d1bc:	4b13      	ldr	r3, [pc, #76]	; (d20c <common_tc_delay+0x58>)
    d1be:	781a      	ldrb	r2, [r3, #0]
    d1c0:	4362      	muls	r2, r4
    d1c2:	1881      	adds	r1, r0, r2
    d1c4:	4b12      	ldr	r3, [pc, #72]	; (d210 <common_tc_delay+0x5c>)
    d1c6:	6059      	str	r1, [r3, #4]
    d1c8:	6859      	ldr	r1, [r3, #4]
    d1ca:	0c09      	lsrs	r1, r1, #16
    d1cc:	6059      	str	r1, [r3, #4]
    d1ce:	685b      	ldr	r3, [r3, #4]
    d1d0:	2b00      	cmp	r3, #0
    d1d2:	d007      	beq.n	d1e4 <common_tc_delay+0x30>
    d1d4:	4b0e      	ldr	r3, [pc, #56]	; (d210 <common_tc_delay+0x5c>)
    d1d6:	6859      	ldr	r1, [r3, #4]
    d1d8:	3201      	adds	r2, #1
    d1da:	1880      	adds	r0, r0, r2
    d1dc:	8118      	strh	r0, [r3, #8]
    d1de:	4b0d      	ldr	r3, [pc, #52]	; (d214 <common_tc_delay+0x60>)
    d1e0:	4798      	blx	r3
    d1e2:	e004      	b.n	d1ee <common_tc_delay+0x3a>
    d1e4:	1882      	adds	r2, r0, r2
    d1e6:	4b0a      	ldr	r3, [pc, #40]	; (d210 <common_tc_delay+0x5c>)
    d1e8:	811a      	strh	r2, [r3, #8]
    d1ea:	4b0b      	ldr	r3, [pc, #44]	; (d218 <common_tc_delay+0x64>)
    d1ec:	4798      	blx	r3
    d1ee:	4b08      	ldr	r3, [pc, #32]	; (d210 <common_tc_delay+0x5c>)
    d1f0:	891b      	ldrh	r3, [r3, #8]
    d1f2:	2b63      	cmp	r3, #99	; 0x63
    d1f4:	d802      	bhi.n	d1fc <common_tc_delay+0x48>
    d1f6:	3364      	adds	r3, #100	; 0x64
    d1f8:	4a05      	ldr	r2, [pc, #20]	; (d210 <common_tc_delay+0x5c>)
    d1fa:	8113      	strh	r3, [r2, #8]
    d1fc:	4b04      	ldr	r3, [pc, #16]	; (d210 <common_tc_delay+0x5c>)
    d1fe:	8918      	ldrh	r0, [r3, #8]
    d200:	4b06      	ldr	r3, [pc, #24]	; (d21c <common_tc_delay+0x68>)
    d202:	4798      	blx	r3
    d204:	bd10      	pop	{r4, pc}
    d206:	46c0      	nop			; (mov r8, r8)
    d208:	0000c0e9 	.word	0x0000c0e9
    d20c:	20002840 	.word	0x20002840
    d210:	20001ccc 	.word	0x20001ccc
    d214:	0000c0fd 	.word	0x0000c0fd
    d218:	0000c111 	.word	0x0000c111
    d21c:	0000c151 	.word	0x0000c151

0000d220 <common_tc_init>:
    d220:	b508      	push	{r3, lr}
    d222:	2200      	movs	r2, #0
    d224:	4b03      	ldr	r3, [pc, #12]	; (d234 <common_tc_init+0x14>)
    d226:	701a      	strb	r2, [r3, #0]
    d228:	4b03      	ldr	r3, [pc, #12]	; (d238 <common_tc_init+0x18>)
    d22a:	4798      	blx	r3
    d22c:	4b03      	ldr	r3, [pc, #12]	; (d23c <common_tc_init+0x1c>)
    d22e:	7018      	strb	r0, [r3, #0]
    d230:	bd08      	pop	{r3, pc}
    d232:	46c0      	nop			; (mov r8, r8)
    d234:	20001ccc 	.word	0x20001ccc
    d238:	0000c169 	.word	0x0000c169
    d23c:	20002840 	.word	0x20002840

0000d240 <tmr_ovf_callback>:
    d240:	b508      	push	{r3, lr}
    d242:	4b0e      	ldr	r3, [pc, #56]	; (d27c <tmr_ovf_callback+0x3c>)
    d244:	685b      	ldr	r3, [r3, #4]
    d246:	2b00      	cmp	r3, #0
    d248:	d007      	beq.n	d25a <tmr_ovf_callback+0x1a>
    d24a:	4a0c      	ldr	r2, [pc, #48]	; (d27c <tmr_ovf_callback+0x3c>)
    d24c:	6853      	ldr	r3, [r2, #4]
    d24e:	3b01      	subs	r3, #1
    d250:	6053      	str	r3, [r2, #4]
    d252:	2b00      	cmp	r3, #0
    d254:	d101      	bne.n	d25a <tmr_ovf_callback+0x1a>
    d256:	4b0a      	ldr	r3, [pc, #40]	; (d280 <tmr_ovf_callback+0x40>)
    d258:	4798      	blx	r3
    d25a:	4a08      	ldr	r2, [pc, #32]	; (d27c <tmr_ovf_callback+0x3c>)
    d25c:	7813      	ldrb	r3, [r2, #0]
    d25e:	3301      	adds	r3, #1
    d260:	b2db      	uxtb	r3, r3
    d262:	7013      	strb	r3, [r2, #0]
    d264:	4a07      	ldr	r2, [pc, #28]	; (d284 <tmr_ovf_callback+0x44>)
    d266:	7812      	ldrb	r2, [r2, #0]
    d268:	429a      	cmp	r2, r3
    d26a:	d806      	bhi.n	d27a <tmr_ovf_callback+0x3a>
    d26c:	4b03      	ldr	r3, [pc, #12]	; (d27c <tmr_ovf_callback+0x3c>)
    d26e:	2200      	movs	r2, #0
    d270:	701a      	strb	r2, [r3, #0]
    d272:	68db      	ldr	r3, [r3, #12]
    d274:	2b00      	cmp	r3, #0
    d276:	d000      	beq.n	d27a <tmr_ovf_callback+0x3a>
    d278:	4798      	blx	r3
    d27a:	bd08      	pop	{r3, pc}
    d27c:	20001ccc 	.word	0x20001ccc
    d280:	0000c111 	.word	0x0000c111
    d284:	20002840 	.word	0x20002840

0000d288 <tmr_cca_callback>:
    d288:	b508      	push	{r3, lr}
    d28a:	4b04      	ldr	r3, [pc, #16]	; (d29c <tmr_cca_callback+0x14>)
    d28c:	4798      	blx	r3
    d28e:	4b04      	ldr	r3, [pc, #16]	; (d2a0 <tmr_cca_callback+0x18>)
    d290:	691b      	ldr	r3, [r3, #16]
    d292:	2b00      	cmp	r3, #0
    d294:	d000      	beq.n	d298 <tmr_cca_callback+0x10>
    d296:	4798      	blx	r3
    d298:	bd08      	pop	{r3, pc}
    d29a:	46c0      	nop			; (mov r8, r8)
    d29c:	0000c0fd 	.word	0x0000c0fd
    d2a0:	20001ccc 	.word	0x20001ccc

0000d2a4 <set_common_tc_overflow_callback>:
    d2a4:	4b01      	ldr	r3, [pc, #4]	; (d2ac <set_common_tc_overflow_callback+0x8>)
    d2a6:	60d8      	str	r0, [r3, #12]
    d2a8:	4770      	bx	lr
    d2aa:	46c0      	nop			; (mov r8, r8)
    d2ac:	20001ccc 	.word	0x20001ccc

0000d2b0 <set_common_tc_expiry_callback>:
    d2b0:	4b01      	ldr	r3, [pc, #4]	; (d2b8 <set_common_tc_expiry_callback+0x8>)
    d2b2:	6118      	str	r0, [r3, #16]
    d2b4:	4770      	bx	lr
    d2b6:	46c0      	nop			; (mov r8, r8)
    d2b8:	20001ccc 	.word	0x20001ccc

0000d2bc <frameTxCallback>:
    d2bc:	b570      	push	{r4, r5, r6, lr}
    d2be:	4c0a      	ldr	r4, [pc, #40]	; (d2e8 <frameTxCallback+0x2c>)
    d2c0:	7823      	ldrb	r3, [r4, #0]
    d2c2:	3b01      	subs	r3, #1
    d2c4:	7023      	strb	r3, [r4, #0]
    d2c6:	2401      	movs	r4, #1
    d2c8:	4b08      	ldr	r3, [pc, #32]	; (d2ec <frameTxCallback+0x30>)
    d2ca:	701c      	strb	r4, [r3, #0]
    d2cc:	4c08      	ldr	r4, [pc, #32]	; (d2f0 <frameTxCallback+0x34>)
    d2ce:	6823      	ldr	r3, [r4, #0]
    d2d0:	691b      	ldr	r3, [r3, #16]
    d2d2:	2b00      	cmp	r3, #0
    d2d4:	d004      	beq.n	d2e0 <frameTxCallback+0x24>
    d2d6:	4798      	blx	r3
    d2d8:	4d06      	ldr	r5, [pc, #24]	; (d2f4 <frameTxCallback+0x38>)
    d2da:	6820      	ldr	r0, [r4, #0]
    d2dc:	47a8      	blx	r5
    d2de:	bd70      	pop	{r4, r5, r6, pc}
    d2e0:	0010      	movs	r0, r2
    d2e2:	4d04      	ldr	r5, [pc, #16]	; (d2f4 <frameTxCallback+0x38>)
    d2e4:	47a8      	blx	r5
    d2e6:	e7f8      	b.n	d2da <frameTxCallback+0x1e>
    d2e8:	20001ce0 	.word	0x20001ce0
    d2ec:	20000090 	.word	0x20000090
    d2f0:	2000288c 	.word	0x2000288c
    d2f4:	0000bccd 	.word	0x0000bccd

0000d2f8 <nonAckDataCallback>:
    d2f8:	b5f0      	push	{r4, r5, r6, r7, lr}
    d2fa:	46c6      	mov	lr, r8
    d2fc:	4d14      	ldr	r5, [pc, #80]	; (d350 <nonAckDataCallback+0x58>)
    d2fe:	b500      	push	{lr}
    d300:	4680      	mov	r8, r0
    d302:	0010      	movs	r0, r2
    d304:	0016      	movs	r6, r2
    d306:	000f      	movs	r7, r1
    d308:	47a8      	blx	r5
    d30a:	4b12      	ldr	r3, [pc, #72]	; (d354 <nonAckDataCallback+0x5c>)
    d30c:	2100      	movs	r1, #0
    d30e:	4812      	ldr	r0, [pc, #72]	; (d358 <nonAckDataCallback+0x60>)
    d310:	4798      	blx	r3
    d312:	22ff      	movs	r2, #255	; 0xff
    d314:	4b11      	ldr	r3, [pc, #68]	; (d35c <nonAckDataCallback+0x64>)
    d316:	0004      	movs	r4, r0
    d318:	881b      	ldrh	r3, [r3, #0]
    d31a:	421a      	tst	r2, r3
    d31c:	d10d      	bne.n	d33a <nonAckDataCallback+0x42>
    d31e:	2c00      	cmp	r4, #0
    d320:	d010      	beq.n	d344 <nonAckDataCallback+0x4c>
    d322:	68a3      	ldr	r3, [r4, #8]
    d324:	2b00      	cmp	r3, #0
    d326:	d003      	beq.n	d330 <nonAckDataCallback+0x38>
    d328:	0032      	movs	r2, r6
    d32a:	0039      	movs	r1, r7
    d32c:	4640      	mov	r0, r8
    d32e:	4798      	blx	r3
    d330:	0020      	movs	r0, r4
    d332:	47a8      	blx	r5
    d334:	bc04      	pop	{r2}
    d336:	4690      	mov	r8, r2
    d338:	bdf0      	pop	{r4, r5, r6, r7, pc}
    d33a:	0038      	movs	r0, r7
    d33c:	4b08      	ldr	r3, [pc, #32]	; (d360 <nonAckDataCallback+0x68>)
    d33e:	4798      	blx	r3
    d340:	2c00      	cmp	r4, #0
    d342:	d1ee      	bne.n	d322 <nonAckDataCallback+0x2a>
    d344:	4b07      	ldr	r3, [pc, #28]	; (d364 <nonAckDataCallback+0x6c>)
    d346:	781b      	ldrb	r3, [r3, #0]
    d348:	2b08      	cmp	r3, #8
    d34a:	d1f3      	bne.n	d334 <nonAckDataCallback+0x3c>
    d34c:	e7e9      	b.n	d322 <nonAckDataCallback+0x2a>
    d34e:	46c0      	nop			; (mov r8, r8)
    d350:	0000bccd 	.word	0x0000bccd
    d354:	0000be45 	.word	0x0000be45
    d358:	20002844 	.word	0x20002844
    d35c:	200028b8 	.word	0x200028b8
    d360:	0001197d 	.word	0x0001197d
    d364:	20001ce1 	.word	0x20001ce1

0000d368 <dataTimerHandler>:
    d368:	b5f0      	push	{r4, r5, r6, r7, lr}
    d36a:	464e      	mov	r6, r9
    d36c:	46de      	mov	lr, fp
    d36e:	4657      	mov	r7, sl
    d370:	4645      	mov	r5, r8
    d372:	b5e0      	push	{r5, r6, r7, lr}
    d374:	4e5b      	ldr	r6, [pc, #364]	; (d4e4 <dataTimerHandler+0x17c>)
    d376:	b083      	sub	sp, #12
    d378:	7a33      	ldrb	r3, [r6, #8]
    d37a:	2b00      	cmp	r3, #0
    d37c:	d04d      	beq.n	d41a <dataTimerHandler+0xb2>
    d37e:	4b5a      	ldr	r3, [pc, #360]	; (d4e8 <dataTimerHandler+0x180>)
    d380:	2500      	movs	r5, #0
    d382:	4698      	mov	r8, r3
    d384:	4b59      	ldr	r3, [pc, #356]	; (d4ec <dataTimerHandler+0x184>)
    d386:	4f5a      	ldr	r7, [pc, #360]	; (d4f0 <dataTimerHandler+0x188>)
    d388:	469a      	mov	sl, r3
    d38a:	4b5a      	ldr	r3, [pc, #360]	; (d4f4 <dataTimerHandler+0x18c>)
    d38c:	4699      	mov	r9, r3
    d38e:	2100      	movs	r1, #0
    d390:	0030      	movs	r0, r6
    d392:	47b8      	blx	r7
    d394:	1e04      	subs	r4, r0, #0
    d396:	d040      	beq.n	d41a <dataTimerHandler+0xb2>
    d398:	7c03      	ldrb	r3, [r0, #16]
    d39a:	2b00      	cmp	r3, #0
    d39c:	d04c      	beq.n	d438 <dataTimerHandler+0xd0>
    d39e:	3b01      	subs	r3, #1
    d3a0:	b2db      	uxtb	r3, r3
    d3a2:	7403      	strb	r3, [r0, #16]
    d3a4:	2b00      	cmp	r3, #0
    d3a6:	d147      	bne.n	d438 <dataTimerHandler+0xd0>
    d3a8:	7c43      	ldrb	r3, [r0, #17]
    d3aa:	2b00      	cmp	r3, #0
    d3ac:	d04d      	beq.n	d44a <dataTimerHandler+0xe2>
    d3ae:	3b01      	subs	r3, #1
    d3b0:	b2db      	uxtb	r3, r3
    d3b2:	7443      	strb	r3, [r0, #17]
    d3b4:	2b00      	cmp	r3, #0
    d3b6:	d148      	bne.n	d44a <dataTimerHandler+0xe2>
    d3b8:	6883      	ldr	r3, [r0, #8]
    d3ba:	2b00      	cmp	r3, #0
    d3bc:	d003      	beq.n	d3c6 <dataTimerHandler+0x5e>
    d3be:	7c80      	ldrb	r0, [r0, #18]
    d3c0:	0022      	movs	r2, r4
    d3c2:	2103      	movs	r1, #3
    d3c4:	4798      	blx	r3
    d3c6:	0020      	movs	r0, r4
    d3c8:	4b4b      	ldr	r3, [pc, #300]	; (d4f8 <dataTimerHandler+0x190>)
    d3ca:	4798      	blx	r3
    d3cc:	23ff      	movs	r3, #255	; 0xff
    d3ce:	8ba0      	ldrh	r0, [r4, #28]
    d3d0:	4203      	tst	r3, r0
    d3d2:	d11d      	bne.n	d410 <dataTimerHandler+0xa8>
    d3d4:	0001      	movs	r1, r0
    d3d6:	4a49      	ldr	r2, [pc, #292]	; (d4fc <dataTimerHandler+0x194>)
    d3d8:	4399      	bics	r1, r3
    d3da:	8812      	ldrh	r2, [r2, #0]
    d3dc:	4291      	cmp	r1, r2
    d3de:	d017      	beq.n	d410 <dataTimerHandler+0xa8>
    d3e0:	4b47      	ldr	r3, [pc, #284]	; (d500 <dataTimerHandler+0x198>)
    d3e2:	0a02      	lsrs	r2, r0, #8
    d3e4:	681b      	ldr	r3, [r3, #0]
    d3e6:	0052      	lsls	r2, r2, #1
    d3e8:	689b      	ldr	r3, [r3, #8]
    d3ea:	189a      	adds	r2, r3, r2
    d3ec:	7854      	ldrb	r4, [r2, #1]
    d3ee:	230f      	movs	r3, #15
    d3f0:	0021      	movs	r1, r4
    d3f2:	469b      	mov	fp, r3
    d3f4:	4399      	bics	r1, r3
    d3f6:	d00b      	beq.n	d410 <dataTimerHandler+0xa8>
    d3f8:	0921      	lsrs	r1, r4, #4
    d3fa:	310f      	adds	r1, #15
    d3fc:	4019      	ands	r1, r3
    d3fe:	010b      	lsls	r3, r1, #4
    d400:	469c      	mov	ip, r3
    d402:	465b      	mov	r3, fp
    d404:	4023      	ands	r3, r4
    d406:	4664      	mov	r4, ip
    d408:	4323      	orrs	r3, r4
    d40a:	7053      	strb	r3, [r2, #1]
    d40c:	2900      	cmp	r1, #0
    d40e:	d05e      	beq.n	d4ce <dataTimerHandler+0x166>
    d410:	3501      	adds	r5, #1
    d412:	7a33      	ldrb	r3, [r6, #8]
    d414:	b2ed      	uxtb	r5, r5
    d416:	42ab      	cmp	r3, r5
    d418:	d8b9      	bhi.n	d38e <dataTimerHandler+0x26>
    d41a:	4b3a      	ldr	r3, [pc, #232]	; (d504 <dataTimerHandler+0x19c>)
    d41c:	4798      	blx	r3
    d41e:	4b3a      	ldr	r3, [pc, #232]	; (d508 <dataTimerHandler+0x1a0>)
    d420:	781b      	ldrb	r3, [r3, #0]
    d422:	2b06      	cmp	r3, #6
    d424:	d056      	beq.n	d4d4 <dataTimerHandler+0x16c>
    d426:	4b39      	ldr	r3, [pc, #228]	; (d50c <dataTimerHandler+0x1a4>)
    d428:	4798      	blx	r3
    d42a:	b003      	add	sp, #12
    d42c:	bc3c      	pop	{r2, r3, r4, r5}
    d42e:	4690      	mov	r8, r2
    d430:	4699      	mov	r9, r3
    d432:	46a2      	mov	sl, r4
    d434:	46ab      	mov	fp, r5
    d436:	bdf0      	pop	{r4, r5, r6, r7, pc}
    d438:	0021      	movs	r1, r4
    d43a:	0030      	movs	r0, r6
    d43c:	47c0      	blx	r8
    d43e:	3501      	adds	r5, #1
    d440:	7a33      	ldrb	r3, [r6, #8]
    d442:	b2ed      	uxtb	r5, r5
    d444:	42ab      	cmp	r3, r5
    d446:	d8a2      	bhi.n	d38e <dataTimerHandler+0x26>
    d448:	e7e7      	b.n	d41a <dataTimerHandler+0xb2>
    d44a:	2301      	movs	r3, #1
    d44c:	89a1      	ldrh	r1, [r4, #12]
    d44e:	74e3      	strb	r3, [r4, #19]
    d450:	4652      	mov	r2, sl
    d452:	0020      	movs	r0, r4
    d454:	47c8      	blx	r9
    d456:	2800      	cmp	r0, #0
    d458:	d102      	bne.n	d460 <dataTimerHandler+0xf8>
    d45a:	7c63      	ldrb	r3, [r4, #17]
    d45c:	3b01      	subs	r3, #1
    d45e:	7463      	strb	r3, [r4, #17]
    d460:	8ba2      	ldrh	r2, [r4, #28]
    d462:	2133      	movs	r1, #51	; 0x33
    d464:	9201      	str	r2, [sp, #4]
    d466:	4a25      	ldr	r2, [pc, #148]	; (d4fc <dataTimerHandler+0x194>)
    d468:	4b25      	ldr	r3, [pc, #148]	; (d500 <dataTimerHandler+0x198>)
    d46a:	8812      	ldrh	r2, [r2, #0]
    d46c:	681b      	ldr	r3, [r3, #0]
    d46e:	4694      	mov	ip, r2
    d470:	5c58      	ldrb	r0, [r3, r1]
    d472:	22ff      	movs	r2, #255	; 0xff
    d474:	3001      	adds	r0, #1
    d476:	b2c0      	uxtb	r0, r0
    d478:	0041      	lsls	r1, r0, #1
    d47a:	1808      	adds	r0, r1, r0
    d47c:	4661      	mov	r1, ip
    d47e:	0100      	lsls	r0, r0, #4
    d480:	420a      	tst	r2, r1
    d482:	d008      	beq.n	d496 <dataTimerHandler+0x12e>
    d484:	4a1d      	ldr	r2, [pc, #116]	; (d4fc <dataTimerHandler+0x194>)
    d486:	8811      	ldrh	r1, [r2, #0]
    d488:	060a      	lsls	r2, r1, #24
    d48a:	d404      	bmi.n	d496 <dataTimerHandler+0x12e>
    d48c:	21fa      	movs	r1, #250	; 0xfa
    d48e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
    d490:	0089      	lsls	r1, r1, #2
    d492:	4351      	muls	r1, r2
    d494:	1840      	adds	r0, r0, r1
    d496:	21ff      	movs	r1, #255	; 0xff
    d498:	9a01      	ldr	r2, [sp, #4]
    d49a:	4211      	tst	r1, r2
    d49c:	d006      	beq.n	d4ac <dataTimerHandler+0x144>
    d49e:	0612      	lsls	r2, r2, #24
    d4a0:	d404      	bmi.n	d4ac <dataTimerHandler+0x144>
    d4a2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
    d4a4:	23fa      	movs	r3, #250	; 0xfa
    d4a6:	009b      	lsls	r3, r3, #2
    d4a8:	4353      	muls	r3, r2
    d4aa:	18c0      	adds	r0, r0, r3
    d4ac:	21fa      	movs	r1, #250	; 0xfa
    d4ae:	4b18      	ldr	r3, [pc, #96]	; (d510 <dataTimerHandler+0x1a8>)
    d4b0:	0089      	lsls	r1, r1, #2
    d4b2:	4798      	blx	r3
    d4b4:	3001      	adds	r0, #1
    d4b6:	7420      	strb	r0, [r4, #16]
    d4b8:	4b0b      	ldr	r3, [pc, #44]	; (d4e8 <dataTimerHandler+0x180>)
    d4ba:	0021      	movs	r1, r4
    d4bc:	0030      	movs	r0, r6
    d4be:	4798      	blx	r3
    d4c0:	3501      	adds	r5, #1
    d4c2:	7a33      	ldrb	r3, [r6, #8]
    d4c4:	b2ed      	uxtb	r5, r5
    d4c6:	42ab      	cmp	r3, r5
    d4c8:	d900      	bls.n	d4cc <dataTimerHandler+0x164>
    d4ca:	e760      	b.n	d38e <dataTimerHandler+0x26>
    d4cc:	e7a5      	b.n	d41a <dataTimerHandler+0xb2>
    d4ce:	4b11      	ldr	r3, [pc, #68]	; (d514 <dataTimerHandler+0x1ac>)
    d4d0:	4798      	blx	r3
    d4d2:	e79d      	b.n	d410 <dataTimerHandler+0xa8>
    d4d4:	4b10      	ldr	r3, [pc, #64]	; (d518 <dataTimerHandler+0x1b0>)
    d4d6:	4798      	blx	r3
    d4d8:	4b10      	ldr	r3, [pc, #64]	; (d51c <dataTimerHandler+0x1b4>)
    d4da:	4798      	blx	r3
    d4dc:	4b10      	ldr	r3, [pc, #64]	; (d520 <dataTimerHandler+0x1b8>)
    d4de:	4798      	blx	r3
    d4e0:	e7a1      	b.n	d426 <dataTimerHandler+0xbe>
    d4e2:	46c0      	nop			; (mov r8, r8)
    d4e4:	2000287c 	.word	0x2000287c
    d4e8:	0000be0d 	.word	0x0000be0d
    d4ec:	0000d525 	.word	0x0000d525
    d4f0:	0000be45 	.word	0x0000be45
    d4f4:	0000f255 	.word	0x0000f255
    d4f8:	0000bccd 	.word	0x0000bccd
    d4fc:	200028b8 	.word	0x200028b8
    d500:	2000285c 	.word	0x2000285c
    d504:	00010271 	.word	0x00010271
    d508:	20001ce1 	.word	0x20001ce1
    d50c:	00011849 	.word	0x00011849
    d510:	00012469 	.word	0x00012469
    d514:	00011efd 	.word	0x00011efd
    d518:	00011f91 	.word	0x00011f91
    d51c:	0000f5e1 	.word	0x0000f5e1
    d520:	0000f825 	.word	0x0000f825

0000d524 <ackReqDataConfcb>:
    d524:	b5f0      	push	{r4, r5, r6, r7, lr}
    d526:	46de      	mov	lr, fp
    d528:	4645      	mov	r5, r8
    d52a:	4657      	mov	r7, sl
    d52c:	464e      	mov	r6, r9
    d52e:	0013      	movs	r3, r2
    d530:	b5e0      	push	{r5, r6, r7, lr}
    d532:	b085      	sub	sp, #20
    d534:	9202      	str	r2, [sp, #8]
    d536:	7892      	ldrb	r2, [r2, #2]
    d538:	4683      	mov	fp, r0
    d53a:	0018      	movs	r0, r3
    d53c:	4b73      	ldr	r3, [pc, #460]	; (d70c <ackReqDataConfcb+0x1e8>)
    d53e:	4690      	mov	r8, r2
    d540:	9100      	str	r1, [sp, #0]
    d542:	4798      	blx	r3
    d544:	22ff      	movs	r2, #255	; 0xff
    d546:	4b72      	ldr	r3, [pc, #456]	; (d710 <ackReqDataConfcb+0x1ec>)
    d548:	881b      	ldrh	r3, [r3, #0]
    d54a:	421a      	tst	r2, r3
    d54c:	d000      	beq.n	d550 <ackReqDataConfcb+0x2c>
    d54e:	e0a6      	b.n	d69e <ackReqDataConfcb+0x17a>
    d550:	4e70      	ldr	r6, [pc, #448]	; (d714 <ackReqDataConfcb+0x1f0>)
    d552:	7a33      	ldrb	r3, [r6, #8]
    d554:	2b00      	cmp	r3, #0
    d556:	d037      	beq.n	d5c8 <ackReqDataConfcb+0xa4>
    d558:	4b6f      	ldr	r3, [pc, #444]	; (d718 <ackReqDataConfcb+0x1f4>)
    d55a:	2400      	movs	r4, #0
    d55c:	4f6f      	ldr	r7, [pc, #444]	; (d71c <ackReqDataConfcb+0x1f8>)
    d55e:	469a      	mov	sl, r3
    d560:	e007      	b.n	d572 <ackReqDataConfcb+0x4e>
    d562:	0029      	movs	r1, r5
    d564:	0030      	movs	r0, r6
    d566:	47d0      	blx	sl
    d568:	3401      	adds	r4, #1
    d56a:	7a33      	ldrb	r3, [r6, #8]
    d56c:	b2e4      	uxtb	r4, r4
    d56e:	42a3      	cmp	r3, r4
    d570:	d92a      	bls.n	d5c8 <ackReqDataConfcb+0xa4>
    d572:	2100      	movs	r1, #0
    d574:	0030      	movs	r0, r6
    d576:	47b8      	blx	r7
    d578:	1e05      	subs	r5, r0, #0
    d57a:	d025      	beq.n	d5c8 <ackReqDataConfcb+0xa4>
    d57c:	2320      	movs	r3, #32
    d57e:	5cc3      	ldrb	r3, [r0, r3]
    d580:	4543      	cmp	r3, r8
    d582:	d1ee      	bne.n	d562 <ackReqDataConfcb+0x3e>
    d584:	7c83      	ldrb	r3, [r0, #18]
    d586:	4699      	mov	r9, r3
    d588:	455b      	cmp	r3, fp
    d58a:	d1ea      	bne.n	d562 <ackReqDataConfcb+0x3e>
    d58c:	9a00      	ldr	r2, [sp, #0]
    d58e:	8b83      	ldrh	r3, [r0, #28]
    d590:	2a00      	cmp	r2, #0
    d592:	d031      	beq.n	d5f8 <ackReqDataConfcb+0xd4>
    d594:	2a03      	cmp	r2, #3
    d596:	d100      	bne.n	d59a <ackReqDataConfcb+0x76>
    d598:	e08f      	b.n	d6ba <ackReqDataConfcb+0x196>
    d59a:	7c6b      	ldrb	r3, [r5, #17]
    d59c:	2b00      	cmp	r3, #0
    d59e:	d01a      	beq.n	d5d6 <ackReqDataConfcb+0xb2>
    d5a0:	3b01      	subs	r3, #1
    d5a2:	b2db      	uxtb	r3, r3
    d5a4:	746b      	strb	r3, [r5, #17]
    d5a6:	2b00      	cmp	r3, #0
    d5a8:	d115      	bne.n	d5d6 <ackReqDataConfcb+0xb2>
    d5aa:	68ab      	ldr	r3, [r5, #8]
    d5ac:	2b00      	cmp	r3, #0
    d5ae:	d003      	beq.n	d5b8 <ackReqDataConfcb+0x94>
    d5b0:	9a02      	ldr	r2, [sp, #8]
    d5b2:	9900      	ldr	r1, [sp, #0]
    d5b4:	4648      	mov	r0, r9
    d5b6:	4798      	blx	r3
    d5b8:	4b54      	ldr	r3, [pc, #336]	; (d70c <ackReqDataConfcb+0x1e8>)
    d5ba:	0028      	movs	r0, r5
    d5bc:	4798      	blx	r3
    d5be:	3401      	adds	r4, #1
    d5c0:	7a33      	ldrb	r3, [r6, #8]
    d5c2:	b2e4      	uxtb	r4, r4
    d5c4:	42a3      	cmp	r3, r4
    d5c6:	d8d4      	bhi.n	d572 <ackReqDataConfcb+0x4e>
    d5c8:	b005      	add	sp, #20
    d5ca:	bc3c      	pop	{r2, r3, r4, r5}
    d5cc:	4690      	mov	r8, r2
    d5ce:	4699      	mov	r9, r3
    d5d0:	46a2      	mov	sl, r4
    d5d2:	46ab      	mov	fp, r5
    d5d4:	bdf0      	pop	{r4, r5, r6, r7, pc}
    d5d6:	4b52      	ldr	r3, [pc, #328]	; (d720 <ackReqDataConfcb+0x1fc>)
    d5d8:	781b      	ldrb	r3, [r3, #0]
    d5da:	2b08      	cmp	r3, #8
    d5dc:	d0e5      	beq.n	d5aa <ackReqDataConfcb+0x86>
    d5de:	2301      	movs	r3, #1
    d5e0:	89a9      	ldrh	r1, [r5, #12]
    d5e2:	74eb      	strb	r3, [r5, #19]
    d5e4:	4a4f      	ldr	r2, [pc, #316]	; (d724 <ackReqDataConfcb+0x200>)
    d5e6:	0028      	movs	r0, r5
    d5e8:	4b4f      	ldr	r3, [pc, #316]	; (d728 <ackReqDataConfcb+0x204>)
    d5ea:	4798      	blx	r3
    d5ec:	2800      	cmp	r0, #0
    d5ee:	d133      	bne.n	d658 <ackReqDataConfcb+0x134>
    d5f0:	7c6b      	ldrb	r3, [r5, #17]
    d5f2:	3b01      	subs	r3, #1
    d5f4:	746b      	strb	r3, [r5, #17]
    d5f6:	e02f      	b.n	d658 <ackReqDataConfcb+0x134>
    d5f8:	21ff      	movs	r1, #255	; 0xff
    d5fa:	000a      	movs	r2, r1
    d5fc:	401a      	ands	r2, r3
    d5fe:	d030      	beq.n	d662 <ackReqDataConfcb+0x13e>
    d600:	484a      	ldr	r0, [pc, #296]	; (d72c <ackReqDataConfcb+0x208>)
    d602:	6801      	ldr	r1, [r0, #0]
    d604:	2033      	movs	r0, #51	; 0x33
    d606:	9103      	str	r1, [sp, #12]
    d608:	5c08      	ldrb	r0, [r1, r0]
    d60a:	3001      	adds	r0, #1
    d60c:	b2c0      	uxtb	r0, r0
    d60e:	0041      	lsls	r1, r0, #1
    d610:	468c      	mov	ip, r1
    d612:	493f      	ldr	r1, [pc, #252]	; (d710 <ackReqDataConfcb+0x1ec>)
    d614:	4460      	add	r0, ip
    d616:	8809      	ldrh	r1, [r1, #0]
    d618:	0100      	lsls	r0, r0, #4
    d61a:	468c      	mov	ip, r1
    d61c:	9001      	str	r0, [sp, #4]
    d61e:	21ff      	movs	r1, #255	; 0xff
    d620:	4660      	mov	r0, ip
    d622:	4201      	tst	r1, r0
    d624:	d003      	beq.n	d62e <ackReqDataConfcb+0x10a>
    d626:	493a      	ldr	r1, [pc, #232]	; (d710 <ackReqDataConfcb+0x1ec>)
    d628:	8809      	ldrh	r1, [r1, #0]
    d62a:	0609      	lsls	r1, r1, #24
    d62c:	d53b      	bpl.n	d6a6 <ackReqDataConfcb+0x182>
    d62e:	2a00      	cmp	r2, #0
    d630:	d00b      	beq.n	d64a <ackReqDataConfcb+0x126>
    d632:	061b      	lsls	r3, r3, #24
    d634:	d409      	bmi.n	d64a <ackReqDataConfcb+0x126>
    d636:	22fa      	movs	r2, #250	; 0xfa
    d638:	9b03      	ldr	r3, [sp, #12]
    d63a:	0092      	lsls	r2, r2, #2
    d63c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    d63e:	4353      	muls	r3, r2
    d640:	9a01      	ldr	r2, [sp, #4]
    d642:	4694      	mov	ip, r2
    d644:	449c      	add	ip, r3
    d646:	4663      	mov	r3, ip
    d648:	9301      	str	r3, [sp, #4]
    d64a:	21fa      	movs	r1, #250	; 0xfa
    d64c:	9801      	ldr	r0, [sp, #4]
    d64e:	0089      	lsls	r1, r1, #2
    d650:	4b37      	ldr	r3, [pc, #220]	; (d730 <ackReqDataConfcb+0x20c>)
    d652:	4798      	blx	r3
    d654:	3001      	adds	r0, #1
    d656:	7428      	strb	r0, [r5, #16]
    d658:	0029      	movs	r1, r5
    d65a:	0030      	movs	r0, r6
    d65c:	4b2e      	ldr	r3, [pc, #184]	; (d718 <ackReqDataConfcb+0x1f4>)
    d65e:	4798      	blx	r3
    d660:	e782      	b.n	d568 <ackReqDataConfcb+0x44>
    d662:	482b      	ldr	r0, [pc, #172]	; (d710 <ackReqDataConfcb+0x1ec>)
    d664:	8800      	ldrh	r0, [r0, #0]
    d666:	4684      	mov	ip, r0
    d668:	0018      	movs	r0, r3
    d66a:	4388      	bics	r0, r1
    d66c:	4584      	cmp	ip, r0
    d66e:	d0c7      	beq.n	d600 <ackReqDataConfcb+0xdc>
    d670:	482e      	ldr	r0, [pc, #184]	; (d72c <ackReqDataConfcb+0x208>)
    d672:	0a1b      	lsrs	r3, r3, #8
    d674:	6802      	ldr	r2, [r0, #0]
    d676:	005b      	lsls	r3, r3, #1
    d678:	6892      	ldr	r2, [r2, #8]
    d67a:	4691      	mov	r9, r2
    d67c:	4499      	add	r9, r3
    d67e:	464b      	mov	r3, r9
    d680:	785a      	ldrb	r2, [r3, #1]
    d682:	4694      	mov	ip, r2
    d684:	220f      	movs	r2, #15
    d686:	4663      	mov	r3, ip
    d688:	401a      	ands	r2, r3
    d68a:	2330      	movs	r3, #48	; 0x30
    d68c:	469c      	mov	ip, r3
    d68e:	4663      	mov	r3, ip
    d690:	431a      	orrs	r2, r3
    d692:	464b      	mov	r3, r9
    d694:	705a      	strb	r2, [r3, #1]
    d696:	000a      	movs	r2, r1
    d698:	8bab      	ldrh	r3, [r5, #28]
    d69a:	401a      	ands	r2, r3
    d69c:	e7b1      	b.n	d602 <ackReqDataConfcb+0xde>
    d69e:	9800      	ldr	r0, [sp, #0]
    d6a0:	4b24      	ldr	r3, [pc, #144]	; (d734 <ackReqDataConfcb+0x210>)
    d6a2:	4798      	blx	r3
    d6a4:	e754      	b.n	d550 <ackReqDataConfcb+0x2c>
    d6a6:	21fa      	movs	r1, #250	; 0xfa
    d6a8:	9803      	ldr	r0, [sp, #12]
    d6aa:	0089      	lsls	r1, r1, #2
    d6ac:	6b80      	ldr	r0, [r0, #56]	; 0x38
    d6ae:	4341      	muls	r1, r0
    d6b0:	468c      	mov	ip, r1
    d6b2:	9901      	ldr	r1, [sp, #4]
    d6b4:	4461      	add	r1, ip
    d6b6:	9101      	str	r1, [sp, #4]
    d6b8:	e7b9      	b.n	d62e <ackReqDataConfcb+0x10a>
    d6ba:	32fc      	adds	r2, #252	; 0xfc
    d6bc:	421a      	tst	r2, r3
    d6be:	d000      	beq.n	d6c2 <ackReqDataConfcb+0x19e>
    d6c0:	e76b      	b.n	d59a <ackReqDataConfcb+0x76>
    d6c2:	0018      	movs	r0, r3
    d6c4:	4912      	ldr	r1, [pc, #72]	; (d710 <ackReqDataConfcb+0x1ec>)
    d6c6:	4390      	bics	r0, r2
    d6c8:	8809      	ldrh	r1, [r1, #0]
    d6ca:	4281      	cmp	r1, r0
    d6cc:	d100      	bne.n	d6d0 <ackReqDataConfcb+0x1ac>
    d6ce:	e764      	b.n	d59a <ackReqDataConfcb+0x76>
    d6d0:	4816      	ldr	r0, [pc, #88]	; (d72c <ackReqDataConfcb+0x208>)
    d6d2:	0a1a      	lsrs	r2, r3, #8
    d6d4:	6801      	ldr	r1, [r0, #0]
    d6d6:	0052      	lsls	r2, r2, #1
    d6d8:	6889      	ldr	r1, [r1, #8]
    d6da:	468c      	mov	ip, r1
    d6dc:	4494      	add	ip, r2
    d6de:	4662      	mov	r2, ip
    d6e0:	7850      	ldrb	r0, [r2, #1]
    d6e2:	220f      	movs	r2, #15
    d6e4:	0001      	movs	r1, r0
    d6e6:	4391      	bics	r1, r2
    d6e8:	d100      	bne.n	d6ec <ackReqDataConfcb+0x1c8>
    d6ea:	e756      	b.n	d59a <ackReqDataConfcb+0x76>
    d6ec:	0901      	lsrs	r1, r0, #4
    d6ee:	310f      	adds	r1, #15
    d6f0:	4011      	ands	r1, r2
    d6f2:	4002      	ands	r2, r0
    d6f4:	0108      	lsls	r0, r1, #4
    d6f6:	4302      	orrs	r2, r0
    d6f8:	4660      	mov	r0, ip
    d6fa:	7042      	strb	r2, [r0, #1]
    d6fc:	2900      	cmp	r1, #0
    d6fe:	d000      	beq.n	d702 <ackReqDataConfcb+0x1de>
    d700:	e74b      	b.n	d59a <ackReqDataConfcb+0x76>
    d702:	0018      	movs	r0, r3
    d704:	4b0c      	ldr	r3, [pc, #48]	; (d738 <ackReqDataConfcb+0x214>)
    d706:	4798      	blx	r3
    d708:	e747      	b.n	d59a <ackReqDataConfcb+0x76>
    d70a:	46c0      	nop			; (mov r8, r8)
    d70c:	0000bccd 	.word	0x0000bccd
    d710:	200028b8 	.word	0x200028b8
    d714:	2000287c 	.word	0x2000287c
    d718:	0000be0d 	.word	0x0000be0d
    d71c:	0000be45 	.word	0x0000be45
    d720:	20001ce1 	.word	0x20001ce1
    d724:	0000d525 	.word	0x0000d525
    d728:	0000f255 	.word	0x0000f255
    d72c:	2000285c 	.word	0x2000285c
    d730:	00012469 	.word	0x00012469
    d734:	0001197d 	.word	0x0001197d
    d738:	00011efd 	.word	0x00011efd

0000d73c <MiApp_ProtocolInit>:
    d73c:	b5f0      	push	{r4, r5, r6, r7, lr}
    d73e:	46c6      	mov	lr, r8
    d740:	b500      	push	{lr}
    d742:	4b52      	ldr	r3, [pc, #328]	; (d88c <MiApp_ProtocolInit+0x150>)
    d744:	b084      	sub	sp, #16
    d746:	781a      	ldrb	r2, [r3, #0]
    d748:	2370      	movs	r3, #112	; 0x70
    d74a:	0112      	lsls	r2, r2, #4
    d74c:	4013      	ands	r3, r2
    d74e:	4a50      	ldr	r2, [pc, #320]	; (d890 <MiApp_ProtocolInit+0x154>)
    d750:	7812      	ldrb	r2, [r2, #0]
    d752:	0912      	lsrs	r2, r2, #4
    d754:	4313      	orrs	r3, r2
    d756:	2b1f      	cmp	r3, #31
    d758:	d000      	beq.n	d75c <MiApp_ProtocolInit+0x20>
    d75a:	e7fe      	b.n	d75a <MiApp_ProtocolInit+0x1e>
    d75c:	4b4d      	ldr	r3, [pc, #308]	; (d894 <MiApp_ProtocolInit+0x158>)
    d75e:	4c4e      	ldr	r4, [pc, #312]	; (d898 <MiApp_ProtocolInit+0x15c>)
    d760:	6019      	str	r1, [r3, #0]
    d762:	6020      	str	r0, [r4, #0]
    d764:	8e03      	ldrh	r3, [r0, #48]	; 0x30
    d766:	2002      	movs	r0, #2
    d768:	4d4c      	ldr	r5, [pc, #304]	; (d89c <MiApp_ProtocolInit+0x160>)
    d76a:	aa02      	add	r2, sp, #8
    d76c:	802b      	strh	r3, [r5, #0]
    d76e:	7813      	ldrb	r3, [r2, #0]
    d770:	2601      	movs	r6, #1
    d772:	4303      	orrs	r3, r0
    d774:	2087      	movs	r0, #135	; 0x87
    d776:	4003      	ands	r3, r0
    d778:	2040      	movs	r0, #64	; 0x40
    d77a:	4303      	orrs	r3, r0
    d77c:	2004      	movs	r0, #4
    d77e:	b2db      	uxtb	r3, r3
    d780:	4303      	orrs	r3, r0
    d782:	b2db      	uxtb	r3, r3
    d784:	43b3      	bics	r3, r6
    d786:	7013      	strb	r3, [r2, #0]
    d788:	4945      	ldr	r1, [pc, #276]	; (d8a0 <MiApp_ProtocolInit+0x164>)
    d78a:	4b46      	ldr	r3, [pc, #280]	; (d8a4 <MiApp_ProtocolInit+0x168>)
    d78c:	9802      	ldr	r0, [sp, #8]
    d78e:	9103      	str	r1, [sp, #12]
    d790:	4798      	blx	r3
    d792:	4b45      	ldr	r3, [pc, #276]	; (d8a8 <MiApp_ProtocolInit+0x16c>)
    d794:	4798      	blx	r3
    d796:	2701      	movs	r7, #1
    d798:	466b      	mov	r3, sp
    d79a:	0029      	movs	r1, r5
    d79c:	1d98      	adds	r0, r3, #6
    d79e:	427f      	negs	r7, r7
    d7a0:	4b42      	ldr	r3, [pc, #264]	; (d8ac <MiApp_ProtocolInit+0x170>)
    d7a2:	8007      	strh	r7, [r0, #0]
    d7a4:	4798      	blx	r3
    d7a6:	4b42      	ldr	r3, [pc, #264]	; (d8b0 <MiApp_ProtocolInit+0x174>)
    d7a8:	4798      	blx	r3
    d7aa:	4b42      	ldr	r3, [pc, #264]	; (d8b4 <MiApp_ProtocolInit+0x178>)
    d7ac:	6018      	str	r0, [r3, #0]
    d7ae:	4b42      	ldr	r3, [pc, #264]	; (d8b8 <MiApp_ProtocolInit+0x17c>)
    d7b0:	4798      	blx	r3
    d7b2:	4b42      	ldr	r3, [pc, #264]	; (d8bc <MiApp_ProtocolInit+0x180>)
    d7b4:	4798      	blx	r3
    d7b6:	4b42      	ldr	r3, [pc, #264]	; (d8c0 <MiApp_ProtocolInit+0x184>)
    d7b8:	4798      	blx	r3
    d7ba:	4b42      	ldr	r3, [pc, #264]	; (d8c4 <MiApp_ProtocolInit+0x188>)
    d7bc:	4798      	blx	r3
    d7be:	4d42      	ldr	r5, [pc, #264]	; (d8c8 <MiApp_ProtocolInit+0x18c>)
    d7c0:	4b42      	ldr	r3, [pc, #264]	; (d8cc <MiApp_ProtocolInit+0x190>)
    d7c2:	802f      	strh	r7, [r5, #0]
    d7c4:	4842      	ldr	r0, [pc, #264]	; (d8d0 <MiApp_ProtocolInit+0x194>)
    d7c6:	4f43      	ldr	r7, [pc, #268]	; (d8d4 <MiApp_ProtocolInit+0x198>)
    d7c8:	701e      	strb	r6, [r3, #0]
    d7ca:	4698      	mov	r8, r3
    d7cc:	47b8      	blx	r7
    d7ce:	4842      	ldr	r0, [pc, #264]	; (d8d8 <MiApp_ProtocolInit+0x19c>)
    d7d0:	47b8      	blx	r7
    d7d2:	4842      	ldr	r0, [pc, #264]	; (d8dc <MiApp_ProtocolInit+0x1a0>)
    d7d4:	47b8      	blx	r7
    d7d6:	4842      	ldr	r0, [pc, #264]	; (d8e0 <MiApp_ProtocolInit+0x1a4>)
    d7d8:	47b8      	blx	r7
    d7da:	23fa      	movs	r3, #250	; 0xfa
    d7dc:	4841      	ldr	r0, [pc, #260]	; (d8e4 <MiApp_ProtocolInit+0x1a8>)
    d7de:	009b      	lsls	r3, r3, #2
    d7e0:	6083      	str	r3, [r0, #8]
    d7e2:	4b41      	ldr	r3, [pc, #260]	; (d8e8 <MiApp_ProtocolInit+0x1ac>)
    d7e4:	7306      	strb	r6, [r0, #12]
    d7e6:	4e41      	ldr	r6, [pc, #260]	; (d8ec <MiApp_ProtocolInit+0x1b0>)
    d7e8:	6103      	str	r3, [r0, #16]
    d7ea:	47b0      	blx	r6
    d7ec:	4b40      	ldr	r3, [pc, #256]	; (d8f0 <MiApp_ProtocolInit+0x1b4>)
    d7ee:	4798      	blx	r3
    d7f0:	4b40      	ldr	r3, [pc, #256]	; (d8f4 <MiApp_ProtocolInit+0x1b8>)
    d7f2:	4798      	blx	r3
    d7f4:	4b40      	ldr	r3, [pc, #256]	; (d8f8 <MiApp_ProtocolInit+0x1bc>)
    d7f6:	4798      	blx	r3
    d7f8:	4b40      	ldr	r3, [pc, #256]	; (d8fc <MiApp_ProtocolInit+0x1c0>)
    d7fa:	4798      	blx	r3
    d7fc:	4b40      	ldr	r3, [pc, #256]	; (d900 <MiApp_ProtocolInit+0x1c4>)
    d7fe:	7018      	strb	r0, [r3, #0]
    d800:	4840      	ldr	r0, [pc, #256]	; (d904 <MiApp_ProtocolInit+0x1c8>)
    d802:	4b41      	ldr	r3, [pc, #260]	; (d908 <MiApp_ProtocolInit+0x1cc>)
    d804:	4798      	blx	r3
    d806:	2800      	cmp	r0, #0
    d808:	d13a      	bne.n	d880 <MiApp_ProtocolInit+0x144>
    d80a:	4b40      	ldr	r3, [pc, #256]	; (d90c <MiApp_ProtocolInit+0x1d0>)
    d80c:	4798      	blx	r3
    d80e:	882a      	ldrh	r2, [r5, #0]
    d810:	4b3f      	ldr	r3, [pc, #252]	; (d910 <MiApp_ProtocolInit+0x1d4>)
    d812:	429a      	cmp	r2, r3
    d814:	d02f      	beq.n	d876 <MiApp_ProtocolInit+0x13a>
    d816:	2306      	movs	r3, #6
    d818:	4642      	mov	r2, r8
    d81a:	7013      	strb	r3, [r2, #0]
    d81c:	4b3d      	ldr	r3, [pc, #244]	; (d914 <MiApp_ProtocolInit+0x1d8>)
    d81e:	681b      	ldr	r3, [r3, #0]
    d820:	2b00      	cmp	r3, #0
    d822:	d001      	beq.n	d828 <MiApp_ProtocolInit+0xec>
    d824:	2000      	movs	r0, #0
    d826:	4798      	blx	r3
    d828:	882a      	ldrh	r2, [r5, #0]
    d82a:	2300      	movs	r3, #0
    d82c:	0612      	lsls	r2, r2, #24
    d82e:	d502      	bpl.n	d836 <MiApp_ProtocolInit+0xfa>
    d830:	22ff      	movs	r2, #255	; 0xff
    d832:	882b      	ldrh	r3, [r5, #0]
    d834:	4393      	bics	r3, r2
    d836:	20fa      	movs	r0, #250	; 0xfa
    d838:	4a37      	ldr	r2, [pc, #220]	; (d918 <MiApp_ProtocolInit+0x1dc>)
    d83a:	0080      	lsls	r0, r0, #2
    d83c:	8013      	strh	r3, [r2, #0]
    d83e:	6823      	ldr	r3, [r4, #0]
    d840:	2105      	movs	r1, #5
    d842:	8a9b      	ldrh	r3, [r3, #20]
    d844:	4358      	muls	r0, r3
    d846:	4b35      	ldr	r3, [pc, #212]	; (d91c <MiApp_ProtocolInit+0x1e0>)
    d848:	4798      	blx	r3
    d84a:	4b35      	ldr	r3, [pc, #212]	; (d920 <MiApp_ProtocolInit+0x1e4>)
    d84c:	4a35      	ldr	r2, [pc, #212]	; (d924 <MiApp_ProtocolInit+0x1e8>)
    d84e:	6058      	str	r0, [r3, #4]
    d850:	611a      	str	r2, [r3, #16]
    d852:	2201      	movs	r2, #1
    d854:	6098      	str	r0, [r3, #8]
    d856:	0018      	movs	r0, r3
    d858:	731a      	strb	r2, [r3, #12]
    d85a:	47b0      	blx	r6
    d85c:	4b32      	ldr	r3, [pc, #200]	; (d928 <MiApp_ProtocolInit+0x1ec>)
    d85e:	781b      	ldrb	r3, [r3, #0]
    d860:	2bff      	cmp	r3, #255	; 0xff
    d862:	d008      	beq.n	d876 <MiApp_ProtocolInit+0x13a>
    d864:	4831      	ldr	r0, [pc, #196]	; (d92c <MiApp_ProtocolInit+0x1f0>)
    d866:	4b32      	ldr	r3, [pc, #200]	; (d930 <MiApp_ProtocolInit+0x1f4>)
    d868:	6103      	str	r3, [r0, #16]
    d86a:	4b32      	ldr	r3, [pc, #200]	; (d934 <MiApp_ProtocolInit+0x1f8>)
    d86c:	6043      	str	r3, [r0, #4]
    d86e:	6083      	str	r3, [r0, #8]
    d870:	2300      	movs	r3, #0
    d872:	7303      	strb	r3, [r0, #12]
    d874:	47b0      	blx	r6
    d876:	2000      	movs	r0, #0
    d878:	b004      	add	sp, #16
    d87a:	bc04      	pop	{r2}
    d87c:	4690      	mov	r8, r2
    d87e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    d880:	4820      	ldr	r0, [pc, #128]	; (d904 <MiApp_ProtocolInit+0x1c8>)
    d882:	4b2d      	ldr	r3, [pc, #180]	; (d938 <MiApp_ProtocolInit+0x1fc>)
    d884:	4798      	blx	r3
    d886:	2800      	cmp	r0, #0
    d888:	d0bf      	beq.n	d80a <MiApp_ProtocolInit+0xce>
    d88a:	e7c0      	b.n	d80e <MiApp_ProtocolInit+0xd2>
    d88c:	41003fe8 	.word	0x41003fe8
    d890:	41003fe4 	.word	0x41003fe4
    d894:	20002860 	.word	0x20002860
    d898:	2000285c 	.word	0x2000285c
    d89c:	200028a8 	.word	0x200028a8
    d8a0:	20000094 	.word	0x20000094
    d8a4:	0000ac85 	.word	0x0000ac85
    d8a8:	0000b7b5 	.word	0x0000b7b5
    d8ac:	0000abfd 	.word	0x0000abfd
    d8b0:	0000c071 	.word	0x0000c071
    d8b4:	20001cf8 	.word	0x20001cf8
    d8b8:	00011a75 	.word	0x00011a75
    d8bc:	000116e1 	.word	0x000116e1
    d8c0:	0000f5b5 	.word	0x0000f5b5
    d8c4:	00010241 	.word	0x00010241
    d8c8:	200028b8 	.word	0x200028b8
    d8cc:	20001ce1 	.word	0x20001ce1
    d8d0:	2000287c 	.word	0x2000287c
    d8d4:	0000be01 	.word	0x0000be01
    d8d8:	20002844 	.word	0x20002844
    d8dc:	20002850 	.word	0x20002850
    d8e0:	200028ac 	.word	0x200028ac
    d8e4:	20001ce4 	.word	0x20001ce4
    d8e8:	0000d369 	.word	0x0000d369
    d8ec:	0000bfc5 	.word	0x0000bfc5
    d8f0:	0000bbd5 	.word	0x0000bbd5
    d8f4:	0000b4d9 	.word	0x0000b4d9
    d8f8:	00015299 	.word	0x00015299
    d8fc:	000152f5 	.word	0x000152f5
    d900:	20002890 	.word	0x20002890
    d904:	00004001 	.word	0x00004001
    d908:	0000a769 	.word	0x0000a769
    d90c:	0000a7d5 	.word	0x0000a7d5
    d910:	0000ffff 	.word	0x0000ffff
    d914:	200028d4 	.word	0x200028d4
    d918:	2000009c 	.word	0x2000009c
    d91c:	000119f5 	.word	0x000119f5
    d920:	200028bc 	.word	0x200028bc
    d924:	000104b1 	.word	0x000104b1
    d928:	2000008f 	.word	0x2000008f
    d92c:	200028dc 	.word	0x200028dc
    d930:	0000ef71 	.word	0x0000ef71
    d934:	00003a98 	.word	0x00003a98
    d938:	0000a4d5 	.word	0x0000a4d5

0000d93c <MiApp_Set>:
    d93c:	b530      	push	{r4, r5, lr}
    d93e:	000c      	movs	r4, r1
    d940:	b083      	sub	sp, #12
    d942:	2805      	cmp	r0, #5
    d944:	d049      	beq.n	d9da <MiApp_Set+0x9e>
    d946:	d907      	bls.n	d958 <MiApp_Set+0x1c>
    d948:	2880      	cmp	r0, #128	; 0x80
    d94a:	d030      	beq.n	d9ae <MiApp_Set+0x72>
    d94c:	2881      	cmp	r0, #129	; 0x81
    d94e:	d022      	beq.n	d996 <MiApp_Set+0x5a>
    d950:	2806      	cmp	r0, #6
    d952:	d027      	beq.n	d9a4 <MiApp_Set+0x68>
    d954:	2000      	movs	r0, #0
    d956:	e013      	b.n	d980 <MiApp_Set+0x44>
    d958:	2801      	cmp	r0, #1
    d95a:	d02f      	beq.n	d9bc <MiApp_Set+0x80>
    d95c:	2800      	cmp	r0, #0
    d95e:	d011      	beq.n	d984 <MiApp_Set+0x48>
    d960:	2802      	cmp	r0, #2
    d962:	d1f7      	bne.n	d954 <MiApp_Set+0x18>
    d964:	780b      	ldrb	r3, [r1, #0]
    d966:	ad01      	add	r5, sp, #4
    d968:	702b      	strb	r3, [r5, #0]
    d96a:	784b      	ldrb	r3, [r1, #1]
    d96c:	0028      	movs	r0, r5
    d96e:	706b      	strb	r3, [r5, #1]
    d970:	491d      	ldr	r1, [pc, #116]	; (d9e8 <MiApp_Set+0xac>)
    d972:	4b1e      	ldr	r3, [pc, #120]	; (d9ec <MiApp_Set+0xb0>)
    d974:	4798      	blx	r3
    d976:	2800      	cmp	r0, #0
    d978:	d002      	beq.n	d980 <MiApp_Set+0x44>
    d97a:	882a      	ldrh	r2, [r5, #0]
    d97c:	4b1c      	ldr	r3, [pc, #112]	; (d9f0 <MiApp_Set+0xb4>)
    d97e:	801a      	strh	r2, [r3, #0]
    d980:	b003      	add	sp, #12
    d982:	bd30      	pop	{r4, r5, pc}
    d984:	2000      	movs	r0, #0
    d986:	4b1b      	ldr	r3, [pc, #108]	; (d9f4 <MiApp_Set+0xb8>)
    d988:	4798      	blx	r3
    d98a:	2800      	cmp	r0, #0
    d98c:	d0f8      	beq.n	d980 <MiApp_Set+0x44>
    d98e:	7822      	ldrb	r2, [r4, #0]
    d990:	4b19      	ldr	r3, [pc, #100]	; (d9f8 <MiApp_Set+0xbc>)
    d992:	701a      	strb	r2, [r3, #0]
    d994:	e7f4      	b.n	d980 <MiApp_Set+0x44>
    d996:	780b      	ldrb	r3, [r1, #0]
    d998:	2001      	movs	r0, #1
    d99a:	1e5a      	subs	r2, r3, #1
    d99c:	4193      	sbcs	r3, r2
    d99e:	4a17      	ldr	r2, [pc, #92]	; (d9fc <MiApp_Set+0xc0>)
    d9a0:	7013      	strb	r3, [r2, #0]
    d9a2:	e7ed      	b.n	d980 <MiApp_Set+0x44>
    d9a4:	780a      	ldrb	r2, [r1, #0]
    d9a6:	4b16      	ldr	r3, [pc, #88]	; (da00 <MiApp_Set+0xc4>)
    d9a8:	2001      	movs	r0, #1
    d9aa:	701a      	strb	r2, [r3, #0]
    d9ac:	e7e8      	b.n	d980 <MiApp_Set+0x44>
    d9ae:	780b      	ldrb	r3, [r1, #0]
    d9b0:	2001      	movs	r0, #1
    d9b2:	1e5a      	subs	r2, r3, #1
    d9b4:	4193      	sbcs	r3, r2
    d9b6:	4a13      	ldr	r2, [pc, #76]	; (da04 <MiApp_Set+0xc8>)
    d9b8:	7013      	strb	r3, [r2, #0]
    d9ba:	e7e1      	b.n	d980 <MiApp_Set+0x44>
    d9bc:	780b      	ldrb	r3, [r1, #0]
    d9be:	ad01      	add	r5, sp, #4
    d9c0:	702b      	strb	r3, [r5, #0]
    d9c2:	784b      	ldrb	r3, [r1, #1]
    d9c4:	480a      	ldr	r0, [pc, #40]	; (d9f0 <MiApp_Set+0xb4>)
    d9c6:	706b      	strb	r3, [r5, #1]
    d9c8:	0029      	movs	r1, r5
    d9ca:	4b08      	ldr	r3, [pc, #32]	; (d9ec <MiApp_Set+0xb0>)
    d9cc:	4798      	blx	r3
    d9ce:	2800      	cmp	r0, #0
    d9d0:	d0d6      	beq.n	d980 <MiApp_Set+0x44>
    d9d2:	882a      	ldrh	r2, [r5, #0]
    d9d4:	4b04      	ldr	r3, [pc, #16]	; (d9e8 <MiApp_Set+0xac>)
    d9d6:	801a      	strh	r2, [r3, #0]
    d9d8:	e7d2      	b.n	d980 <MiApp_Set+0x44>
    d9da:	2204      	movs	r2, #4
    d9dc:	480a      	ldr	r0, [pc, #40]	; (da08 <MiApp_Set+0xcc>)
    d9de:	4b0b      	ldr	r3, [pc, #44]	; (da0c <MiApp_Set+0xd0>)
    d9e0:	4798      	blx	r3
    d9e2:	2001      	movs	r0, #1
    d9e4:	e7cc      	b.n	d980 <MiApp_Set+0x44>
    d9e6:	46c0      	nop			; (mov r8, r8)
    d9e8:	200028a8 	.word	0x200028a8
    d9ec:	0000abfd 	.word	0x0000abfd
    d9f0:	200028b8 	.word	0x200028b8
    d9f4:	0000ac5d 	.word	0x0000ac5d
    d9f8:	20002888 	.word	0x20002888
    d9fc:	20001d1c 	.word	0x20001d1c
    da00:	200028fc 	.word	0x200028fc
    da04:	20000091 	.word	0x20000091
    da08:	200028f8 	.word	0x200028f8
    da0c:	00014cdf 	.word	0x00014cdf

0000da10 <MeshTasks>:
    da10:	b5f0      	push	{r4, r5, r6, r7, lr}
    da12:	46c6      	mov	lr, r8
    da14:	b500      	push	{lr}
    da16:	4b24      	ldr	r3, [pc, #144]	; (daa8 <MeshTasks+0x98>)
    da18:	b084      	sub	sp, #16
    da1a:	4798      	blx	r3
    da1c:	4b23      	ldr	r3, [pc, #140]	; (daac <MeshTasks+0x9c>)
    da1e:	4798      	blx	r3
    da20:	4c23      	ldr	r4, [pc, #140]	; (dab0 <MeshTasks+0xa0>)
    da22:	0005      	movs	r5, r0
    da24:	7a23      	ldrb	r3, [r4, #8]
    da26:	2b00      	cmp	r3, #0
    da28:	d003      	beq.n	da32 <MeshTasks+0x22>
    da2a:	4e22      	ldr	r6, [pc, #136]	; (dab4 <MeshTasks+0xa4>)
    da2c:	7833      	ldrb	r3, [r6, #0]
    da2e:	2b00      	cmp	r3, #0
    da30:	d10e      	bne.n	da50 <MeshTasks+0x40>
    da32:	4b21      	ldr	r3, [pc, #132]	; (dab8 <MeshTasks+0xa8>)
    da34:	4798      	blx	r3
    da36:	2800      	cmp	r0, #0
    da38:	d004      	beq.n	da44 <MeshTasks+0x34>
    da3a:	4b20      	ldr	r3, [pc, #128]	; (dabc <MeshTasks+0xac>)
    da3c:	4820      	ldr	r0, [pc, #128]	; (dac0 <MeshTasks+0xb0>)
    da3e:	4798      	blx	r3
    da40:	4b20      	ldr	r3, [pc, #128]	; (dac4 <MeshTasks+0xb4>)
    da42:	4798      	blx	r3
    da44:	4b20      	ldr	r3, [pc, #128]	; (dac8 <MeshTasks+0xb8>)
    da46:	4798      	blx	r3
    da48:	b004      	add	sp, #16
    da4a:	bc04      	pop	{r2}
    da4c:	4690      	mov	r8, r2
    da4e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    da50:	4f1e      	ldr	r7, [pc, #120]	; (dacc <MeshTasks+0xbc>)
    da52:	4b1f      	ldr	r3, [pc, #124]	; (dad0 <MeshTasks+0xc0>)
    da54:	6839      	ldr	r1, [r7, #0]
    da56:	4798      	blx	r3
    da58:	4b1e      	ldr	r3, [pc, #120]	; (dad4 <MeshTasks+0xc4>)
    da5a:	4698      	mov	r8, r3
    da5c:	681b      	ldr	r3, [r3, #0]
    da5e:	4298      	cmp	r0, r3
    da60:	d9e7      	bls.n	da32 <MeshTasks+0x22>
    da62:	0020      	movs	r0, r4
    da64:	2100      	movs	r1, #0
    da66:	4b1c      	ldr	r3, [pc, #112]	; (dad8 <MeshTasks+0xc8>)
    da68:	4798      	blx	r3
    da6a:	1e04      	subs	r4, r0, #0
    da6c:	d0e1      	beq.n	da32 <MeshTasks+0x22>
    da6e:	4b1b      	ldr	r3, [pc, #108]	; (dadc <MeshTasks+0xcc>)
    da70:	6018      	str	r0, [r3, #0]
    da72:	4b1b      	ldr	r3, [pc, #108]	; (dae0 <MeshTasks+0xd0>)
    da74:	2048      	movs	r0, #72	; 0x48
    da76:	4798      	blx	r3
    da78:	4643      	mov	r3, r8
    da7a:	4a1a      	ldr	r2, [pc, #104]	; (dae4 <MeshTasks+0xd4>)
    da7c:	6018      	str	r0, [r3, #0]
    da7e:	7813      	ldrb	r3, [r2, #0]
    da80:	603d      	str	r5, [r7, #0]
    da82:	3301      	adds	r3, #1
    da84:	7013      	strb	r3, [r2, #0]
    da86:	4a18      	ldr	r2, [pc, #96]	; (dae8 <MeshTasks+0xd8>)
    da88:	6963      	ldr	r3, [r4, #20]
    da8a:	9202      	str	r2, [sp, #8]
    da8c:	2225      	movs	r2, #37	; 0x25
    da8e:	5ca2      	ldrb	r2, [r4, r2]
    da90:	9201      	str	r2, [sp, #4]
    da92:	2224      	movs	r2, #36	; 0x24
    da94:	5ca2      	ldrb	r2, [r4, r2]
    da96:	3418      	adds	r4, #24
    da98:	9200      	str	r2, [sp, #0]
    da9a:	cc07      	ldmia	r4!, {r0, r1, r2}
    da9c:	4c13      	ldr	r4, [pc, #76]	; (daec <MeshTasks+0xdc>)
    da9e:	47a0      	blx	r4
    daa0:	2300      	movs	r3, #0
    daa2:	7033      	strb	r3, [r6, #0]
    daa4:	e7c5      	b.n	da32 <MeshTasks+0x22>
    daa6:	46c0      	nop			; (mov r8, r8)
    daa8:	0000b329 	.word	0x0000b329
    daac:	0000c071 	.word	0x0000c071
    dab0:	200028ac 	.word	0x200028ac
    dab4:	20000090 	.word	0x20000090
    dab8:	0000af75 	.word	0x0000af75
    dabc:	0000f92d 	.word	0x0000f92d
    dac0:	20002894 	.word	0x20002894
    dac4:	0000af59 	.word	0x0000af59
    dac8:	0000bfe5 	.word	0x0000bfe5
    dacc:	20001cf8 	.word	0x20001cf8
    dad0:	0000c0c1 	.word	0x0000c0c1
    dad4:	20001cfc 	.word	0x20001cfc
    dad8:	0000be45 	.word	0x0000be45
    dadc:	2000288c 	.word	0x2000288c
    dae0:	0000b31d 	.word	0x0000b31d
    dae4:	20001ce0 	.word	0x20001ce0
    dae8:	0000d2bd 	.word	0x0000d2bd
    daec:	0000ace9 	.word	0x0000ace9

0000daf0 <MiApp_Get>:
    daf0:	b510      	push	{r4, lr}
    daf2:	000b      	movs	r3, r1
    daf4:	2806      	cmp	r0, #6
    daf6:	d820      	bhi.n	db3a <MiApp_Get+0x4a>
    daf8:	4a11      	ldr	r2, [pc, #68]	; (db40 <MiApp_Get+0x50>)
    dafa:	0080      	lsls	r0, r0, #2
    dafc:	5812      	ldr	r2, [r2, r0]
    dafe:	4697      	mov	pc, r2
    db00:	2001      	movs	r0, #1
    db02:	4a10      	ldr	r2, [pc, #64]	; (db44 <MiApp_Get+0x54>)
    db04:	7812      	ldrb	r2, [r2, #0]
    db06:	700a      	strb	r2, [r1, #0]
    db08:	bd10      	pop	{r4, pc}
    db0a:	4a0f      	ldr	r2, [pc, #60]	; (db48 <MiApp_Get+0x58>)
    db0c:	2001      	movs	r0, #1
    db0e:	7812      	ldrb	r2, [r2, #0]
    db10:	700a      	strb	r2, [r1, #0]
    db12:	e7f9      	b.n	db08 <MiApp_Get+0x18>
    db14:	4a0d      	ldr	r2, [pc, #52]	; (db4c <MiApp_Get+0x5c>)
    db16:	8811      	ldrh	r1, [r2, #0]
    db18:	2001      	movs	r0, #1
    db1a:	7019      	strb	r1, [r3, #0]
    db1c:	8812      	ldrh	r2, [r2, #0]
    db1e:	0a12      	lsrs	r2, r2, #8
    db20:	705a      	strb	r2, [r3, #1]
    db22:	e7f1      	b.n	db08 <MiApp_Get+0x18>
    db24:	4a0a      	ldr	r2, [pc, #40]	; (db50 <MiApp_Get+0x60>)
    db26:	e7f6      	b.n	db16 <MiApp_Get+0x26>
    db28:	4a0a      	ldr	r2, [pc, #40]	; (db54 <MiApp_Get+0x64>)
    db2a:	e7f4      	b.n	db16 <MiApp_Get+0x26>
    db2c:	0018      	movs	r0, r3
    db2e:	2204      	movs	r2, #4
    db30:	4909      	ldr	r1, [pc, #36]	; (db58 <MiApp_Get+0x68>)
    db32:	4b0a      	ldr	r3, [pc, #40]	; (db5c <MiApp_Get+0x6c>)
    db34:	4798      	blx	r3
    db36:	2001      	movs	r0, #1
    db38:	e7e6      	b.n	db08 <MiApp_Get+0x18>
    db3a:	2000      	movs	r0, #0
    db3c:	e7e4      	b.n	db08 <MiApp_Get+0x18>
    db3e:	46c0      	nop			; (mov r8, r8)
    db40:	0001668c 	.word	0x0001668c
    db44:	200028fc 	.word	0x200028fc
    db48:	20002888 	.word	0x20002888
    db4c:	200028a8 	.word	0x200028a8
    db50:	200028b8 	.word	0x200028b8
    db54:	2000009c 	.word	0x2000009c
    db58:	200028f8 	.word	0x200028f8
    db5c:	00014cdf 	.word	0x00014cdf

0000db60 <calculateAckWaitTimeout>:
    db60:	0003      	movs	r3, r0
    db62:	b510      	push	{r4, lr}
    db64:	24ff      	movs	r4, #255	; 0xff
    db66:	0040      	lsls	r0, r0, #1
    db68:	18c0      	adds	r0, r0, r3
    db6a:	4b11      	ldr	r3, [pc, #68]	; (dbb0 <calculateAckWaitTimeout+0x50>)
    db6c:	0100      	lsls	r0, r0, #4
    db6e:	881a      	ldrh	r2, [r3, #0]
    db70:	4214      	tst	r4, r2
    db72:	d002      	beq.n	db7a <calculateAckWaitTimeout+0x1a>
    db74:	881b      	ldrh	r3, [r3, #0]
    db76:	061b      	lsls	r3, r3, #24
    db78:	d512      	bpl.n	dba0 <calculateAckWaitTimeout+0x40>
    db7a:	23ff      	movs	r3, #255	; 0xff
    db7c:	420b      	tst	r3, r1
    db7e:	d008      	beq.n	db92 <calculateAckWaitTimeout+0x32>
    db80:	060b      	lsls	r3, r1, #24
    db82:	d406      	bmi.n	db92 <calculateAckWaitTimeout+0x32>
    db84:	4b0b      	ldr	r3, [pc, #44]	; (dbb4 <calculateAckWaitTimeout+0x54>)
    db86:	681b      	ldr	r3, [r3, #0]
    db88:	6b9a      	ldr	r2, [r3, #56]	; 0x38
    db8a:	23fa      	movs	r3, #250	; 0xfa
    db8c:	009b      	lsls	r3, r3, #2
    db8e:	4353      	muls	r3, r2
    db90:	18c0      	adds	r0, r0, r3
    db92:	21fa      	movs	r1, #250	; 0xfa
    db94:	4b08      	ldr	r3, [pc, #32]	; (dbb8 <calculateAckWaitTimeout+0x58>)
    db96:	0089      	lsls	r1, r1, #2
    db98:	4798      	blx	r3
    db9a:	3001      	adds	r0, #1
    db9c:	b2c0      	uxtb	r0, r0
    db9e:	bd10      	pop	{r4, pc}
    dba0:	4b04      	ldr	r3, [pc, #16]	; (dbb4 <calculateAckWaitTimeout+0x54>)
    dba2:	681b      	ldr	r3, [r3, #0]
    dba4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
    dba6:	23fa      	movs	r3, #250	; 0xfa
    dba8:	009b      	lsls	r3, r3, #2
    dbaa:	4353      	muls	r3, r2
    dbac:	18c0      	adds	r0, r0, r3
    dbae:	e7e4      	b.n	db7a <calculateAckWaitTimeout+0x1a>
    dbb0:	200028b8 	.word	0x200028b8
    dbb4:	2000285c 	.word	0x2000285c
    dbb8:	00012469 	.word	0x00012469

0000dbbc <MiApp_SendData>:
    dbbc:	b5f0      	push	{r4, r5, r6, r7, lr}
    dbbe:	4657      	mov	r7, sl
    dbc0:	4645      	mov	r5, r8
    dbc2:	464e      	mov	r6, r9
    dbc4:	46de      	mov	lr, fp
    dbc6:	b5e0      	push	{r5, r6, r7, lr}
    dbc8:	b083      	sub	sp, #12
    dbca:	4698      	mov	r8, r3
    dbcc:	ab0c      	add	r3, sp, #48	; 0x30
    dbce:	781b      	ldrb	r3, [r3, #0]
    dbd0:	784c      	ldrb	r4, [r1, #1]
    dbd2:	4699      	mov	r9, r3
    dbd4:	ab0d      	add	r3, sp, #52	; 0x34
    dbd6:	781f      	ldrb	r7, [r3, #0]
    dbd8:	23ff      	movs	r3, #255	; 0xff
    dbda:	469a      	mov	sl, r3
    dbdc:	780b      	ldrb	r3, [r1, #0]
    dbde:	0224      	lsls	r4, r4, #8
    dbe0:	0015      	movs	r5, r2
    dbe2:	431c      	orrs	r4, r3
    dbe4:	2a50      	cmp	r2, #80	; 0x50
    dbe6:	d80a      	bhi.n	dbfe <MiApp_SendData+0x42>
    dbe8:	4e9f      	ldr	r6, [pc, #636]	; (de68 <MiApp_SendData+0x2ac>)
    dbea:	b2a4      	uxth	r4, r4
    dbec:	8833      	ldrh	r3, [r6, #0]
    dbee:	429c      	cmp	r4, r3
    dbf0:	d005      	beq.n	dbfe <MiApp_SendData+0x42>
    dbf2:	4b9e      	ldr	r3, [pc, #632]	; (de6c <MiApp_SendData+0x2b0>)
    dbf4:	469b      	mov	fp, r3
    dbf6:	781b      	ldrb	r3, [r3, #0]
    dbf8:	3b06      	subs	r3, #6
    dbfa:	2b01      	cmp	r3, #1
    dbfc:	d908      	bls.n	dc10 <MiApp_SendData+0x54>
    dbfe:	2400      	movs	r4, #0
    dc00:	0020      	movs	r0, r4
    dc02:	b003      	add	sp, #12
    dc04:	bc3c      	pop	{r2, r3, r4, r5}
    dc06:	4690      	mov	r8, r2
    dc08:	4699      	mov	r9, r3
    dc0a:	46a2      	mov	sl, r4
    dc0c:	46ab      	mov	fp, r5
    dc0e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    dc10:	2802      	cmp	r0, #2
    dc12:	d1f4      	bne.n	dbfe <MiApp_SendData+0x42>
    dc14:	309e      	adds	r0, #158	; 0x9e
    dc16:	4b96      	ldr	r3, [pc, #600]	; (de70 <MiApp_SendData+0x2b4>)
    dc18:	4798      	blx	r3
    dc1a:	9001      	str	r0, [sp, #4]
    dc1c:	1e01      	subs	r1, r0, #0
    dc1e:	d0ee      	beq.n	dbfe <MiApp_SendData+0x42>
    dc20:	2203      	movs	r2, #3
    dc22:	7e43      	ldrb	r3, [r0, #25]
    dc24:	8384      	strh	r4, [r0, #28]
    dc26:	4393      	bics	r3, r2
    dc28:	7643      	strb	r3, [r0, #25]
    dc2a:	8833      	ldrh	r3, [r6, #0]
    dc2c:	83c3      	strh	r3, [r0, #30]
    dc2e:	2301      	movs	r3, #1
    dc30:	403b      	ands	r3, r7
    dc32:	011a      	lsls	r2, r3, #4
    dc34:	7e43      	ldrb	r3, [r0, #25]
    dc36:	2010      	movs	r0, #16
    dc38:	4383      	bics	r3, r0
    dc3a:	4313      	orrs	r3, r2
    dc3c:	764b      	strb	r3, [r1, #25]
    dc3e:	2338      	movs	r3, #56	; 0x38
    dc40:	54cd      	strb	r5, [r1, r3]
    dc42:	464b      	mov	r3, r9
    dc44:	748b      	strb	r3, [r1, #18]
    dc46:	2300      	movs	r3, #0
    dc48:	0008      	movs	r0, r1
    dc4a:	74cb      	strb	r3, [r1, #19]
    dc4c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    dc4e:	002a      	movs	r2, r5
    dc50:	608b      	str	r3, [r1, #8]
    dc52:	3039      	adds	r0, #57	; 0x39
    dc54:	4641      	mov	r1, r8
    dc56:	4d87      	ldr	r5, [pc, #540]	; (de74 <MiApp_SendData+0x2b8>)
    dc58:	47a8      	blx	r5
    dc5a:	4b87      	ldr	r3, [pc, #540]	; (de78 <MiApp_SendData+0x2bc>)
    dc5c:	429c      	cmp	r4, r3
    dc5e:	d91d      	bls.n	dc9c <MiApp_SendData+0xe0>
    dc60:	2110      	movs	r1, #16
    dc62:	9a01      	ldr	r2, [sp, #4]
    dc64:	7e53      	ldrb	r3, [r2, #25]
    dc66:	438b      	bics	r3, r1
    dc68:	7653      	strb	r3, [r2, #25]
    dc6a:	4b84      	ldr	r3, [pc, #528]	; (de7c <MiApp_SendData+0x2c0>)
    dc6c:	429c      	cmp	r4, r3
    dc6e:	d100      	bne.n	dc72 <MiApp_SendData+0xb6>
    dc70:	e085      	b.n	dd7e <MiApp_SendData+0x1c2>
    dc72:	4a83      	ldr	r2, [pc, #524]	; (de80 <MiApp_SendData+0x2c4>)
    dc74:	4981      	ldr	r1, [pc, #516]	; (de7c <MiApp_SendData+0x2c0>)
    dc76:	9801      	ldr	r0, [sp, #4]
    dc78:	4b82      	ldr	r3, [pc, #520]	; (de84 <MiApp_SendData+0x2c8>)
    dc7a:	4798      	blx	r3
    dc7c:	1e04      	subs	r4, r0, #0
    dc7e:	d000      	beq.n	dc82 <MiApp_SendData+0xc6>
    dc80:	e0b7      	b.n	ddf2 <MiApp_SendData+0x236>
    dc82:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    dc84:	2b00      	cmp	r3, #0
    dc86:	d005      	beq.n	dc94 <MiApp_SendData+0xd8>
    dc88:	9b01      	ldr	r3, [sp, #4]
    dc8a:	2101      	movs	r1, #1
    dc8c:	7c98      	ldrb	r0, [r3, #18]
    dc8e:	001a      	movs	r2, r3
    dc90:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    dc92:	4798      	blx	r3
    dc94:	9801      	ldr	r0, [sp, #4]
    dc96:	4b7c      	ldr	r3, [pc, #496]	; (de88 <MiApp_SendData+0x2cc>)
    dc98:	4798      	blx	r3
    dc9a:	e7b1      	b.n	dc00 <MiApp_SendData+0x44>
    dc9c:	4653      	mov	r3, sl
    dc9e:	4223      	tst	r3, r4
    dca0:	d006      	beq.n	dcb0 <MiApp_SendData+0xf4>
    dca2:	0023      	movs	r3, r4
    dca4:	4651      	mov	r1, sl
    dca6:	8832      	ldrh	r2, [r6, #0]
    dca8:	438b      	bics	r3, r1
    dcaa:	429a      	cmp	r2, r3
    dcac:	d100      	bne.n	dcb0 <MiApp_SendData+0xf4>
    dcae:	e0b8      	b.n	de22 <MiApp_SendData+0x266>
    dcb0:	465b      	mov	r3, fp
    dcb2:	781b      	ldrb	r3, [r3, #0]
    dcb4:	2b07      	cmp	r3, #7
    dcb6:	d147      	bne.n	dd48 <MiApp_SendData+0x18c>
    dcb8:	8835      	ldrh	r5, [r6, #0]
    dcba:	33f8      	adds	r3, #248	; 0xf8
    dcbc:	439d      	bics	r5, r3
    dcbe:	9b01      	ldr	r3, [sp, #4]
    dcc0:	819d      	strh	r5, [r3, #12]
    dcc2:	2f00      	cmp	r7, #0
    dcc4:	d100      	bne.n	dcc8 <MiApp_SendData+0x10c>
    dcc6:	e099      	b.n	ddfc <MiApp_SendData+0x240>
    dcc8:	42ac      	cmp	r4, r5
    dcca:	d100      	bne.n	dcce <MiApp_SendData+0x112>
    dccc:	e0ba      	b.n	de44 <MiApp_SendData+0x288>
    dcce:	4b6f      	ldr	r3, [pc, #444]	; (de8c <MiApp_SendData+0x2d0>)
    dcd0:	21ff      	movs	r1, #255	; 0xff
    dcd2:	681c      	ldr	r4, [r3, #0]
    dcd4:	9b01      	ldr	r3, [sp, #4]
    dcd6:	8b9a      	ldrh	r2, [r3, #28]
    dcd8:	2333      	movs	r3, #51	; 0x33
    dcda:	5ce0      	ldrb	r0, [r4, r3]
    dcdc:	3001      	adds	r0, #1
    dcde:	b2c0      	uxtb	r0, r0
    dce0:	0043      	lsls	r3, r0, #1
    dce2:	1818      	adds	r0, r3, r0
    dce4:	8833      	ldrh	r3, [r6, #0]
    dce6:	0100      	lsls	r0, r0, #4
    dce8:	4219      	tst	r1, r3
    dcea:	d007      	beq.n	dcfc <MiApp_SendData+0x140>
    dcec:	8833      	ldrh	r3, [r6, #0]
    dcee:	061b      	lsls	r3, r3, #24
    dcf0:	d404      	bmi.n	dcfc <MiApp_SendData+0x140>
    dcf2:	23fa      	movs	r3, #250	; 0xfa
    dcf4:	6ba1      	ldr	r1, [r4, #56]	; 0x38
    dcf6:	009b      	lsls	r3, r3, #2
    dcf8:	434b      	muls	r3, r1
    dcfa:	18c0      	adds	r0, r0, r3
    dcfc:	23ff      	movs	r3, #255	; 0xff
    dcfe:	4213      	tst	r3, r2
    dd00:	d006      	beq.n	dd10 <MiApp_SendData+0x154>
    dd02:	0613      	lsls	r3, r2, #24
    dd04:	d404      	bmi.n	dd10 <MiApp_SendData+0x154>
    dd06:	23fa      	movs	r3, #250	; 0xfa
    dd08:	6ba2      	ldr	r2, [r4, #56]	; 0x38
    dd0a:	009b      	lsls	r3, r3, #2
    dd0c:	4353      	muls	r3, r2
    dd0e:	18c0      	adds	r0, r0, r3
    dd10:	21fa      	movs	r1, #250	; 0xfa
    dd12:	4b5f      	ldr	r3, [pc, #380]	; (de90 <MiApp_SendData+0x2d4>)
    dd14:	0089      	lsls	r1, r1, #2
    dd16:	4798      	blx	r3
    dd18:	9b01      	ldr	r3, [sp, #4]
    dd1a:	3001      	adds	r0, #1
    dd1c:	7418      	strb	r0, [r3, #16]
    dd1e:	233e      	movs	r3, #62	; 0x3e
    dd20:	5ce3      	ldrb	r3, [r4, r3]
    dd22:	9c01      	ldr	r4, [sp, #4]
    dd24:	3301      	adds	r3, #1
    dd26:	7463      	strb	r3, [r4, #17]
    dd28:	4a5a      	ldr	r2, [pc, #360]	; (de94 <MiApp_SendData+0x2d8>)
    dd2a:	0029      	movs	r1, r5
    dd2c:	0020      	movs	r0, r4
    dd2e:	4b55      	ldr	r3, [pc, #340]	; (de84 <MiApp_SendData+0x2c8>)
    dd30:	4798      	blx	r3
    dd32:	2800      	cmp	r0, #0
    dd34:	d102      	bne.n	dd3c <MiApp_SendData+0x180>
    dd36:	7c63      	ldrb	r3, [r4, #17]
    dd38:	3b01      	subs	r3, #1
    dd3a:	7463      	strb	r3, [r4, #17]
    dd3c:	9901      	ldr	r1, [sp, #4]
    dd3e:	4856      	ldr	r0, [pc, #344]	; (de98 <MiApp_SendData+0x2dc>)
    dd40:	4b56      	ldr	r3, [pc, #344]	; (de9c <MiApp_SendData+0x2e0>)
    dd42:	4798      	blx	r3
    dd44:	2401      	movs	r4, #1
    dd46:	e75b      	b.n	dc00 <MiApp_SendData+0x44>
    dd48:	23ff      	movs	r3, #255	; 0xff
    dd4a:	0020      	movs	r0, r4
    dd4c:	4398      	bics	r0, r3
    dd4e:	4b54      	ldr	r3, [pc, #336]	; (dea0 <MiApp_SendData+0x2e4>)
    dd50:	4798      	blx	r3
    dd52:	9b01      	ldr	r3, [sp, #4]
    dd54:	0005      	movs	r5, r0
    dd56:	8198      	strh	r0, [r3, #12]
    dd58:	4b48      	ldr	r3, [pc, #288]	; (de7c <MiApp_SendData+0x2c0>)
    dd5a:	4298      	cmp	r0, r3
    dd5c:	d1b1      	bne.n	dcc2 <MiApp_SendData+0x106>
    dd5e:	0020      	movs	r0, r4
    dd60:	4b50      	ldr	r3, [pc, #320]	; (dea4 <MiApp_SendData+0x2e8>)
    dd62:	4798      	blx	r3
    dd64:	1e04      	subs	r4, r0, #0
    dd66:	d08c      	beq.n	dc82 <MiApp_SendData+0xc6>
    dd68:	4b48      	ldr	r3, [pc, #288]	; (de8c <MiApp_SendData+0x2d0>)
    dd6a:	9a01      	ldr	r2, [sp, #4]
    dd6c:	681b      	ldr	r3, [r3, #0]
    dd6e:	0011      	movs	r1, r2
    dd70:	7f5b      	ldrb	r3, [r3, #29]
    dd72:	484d      	ldr	r0, [pc, #308]	; (dea8 <MiApp_SendData+0x2ec>)
    dd74:	3301      	adds	r3, #1
    dd76:	7413      	strb	r3, [r2, #16]
    dd78:	4b48      	ldr	r3, [pc, #288]	; (de9c <MiApp_SendData+0x2e0>)
    dd7a:	4798      	blx	r3
    dd7c:	e740      	b.n	dc00 <MiApp_SendData+0x44>
    dd7e:	4f43      	ldr	r7, [pc, #268]	; (de8c <MiApp_SendData+0x2d0>)
    dd80:	683b      	ldr	r3, [r7, #0]
    dd82:	7eda      	ldrb	r2, [r3, #27]
    dd84:	2a01      	cmp	r2, #1
    dd86:	d800      	bhi.n	dd8a <MiApp_SendData+0x1ce>
    dd88:	e773      	b.n	dc72 <MiApp_SendData+0xb6>
    dd8a:	4a48      	ldr	r2, [pc, #288]	; (deac <MiApp_SendData+0x2f0>)
    dd8c:	2401      	movs	r4, #1
    dd8e:	4690      	mov	r8, r2
    dd90:	4a47      	ldr	r2, [pc, #284]	; (deb0 <MiApp_SendData+0x2f4>)
    dd92:	4692      	mov	sl, r2
    dd94:	4a47      	ldr	r2, [pc, #284]	; (deb4 <MiApp_SendData+0x2f8>)
    dd96:	4693      	mov	fp, r2
    dd98:	e006      	b.n	dda8 <MiApp_SendData+0x1ec>
    dd9a:	683b      	ldr	r3, [r7, #0]
    dd9c:	3401      	adds	r4, #1
    dd9e:	7eda      	ldrb	r2, [r3, #27]
    dda0:	b2e4      	uxtb	r4, r4
    dda2:	42a2      	cmp	r2, r4
    dda4:	d800      	bhi.n	dda8 <MiApp_SendData+0x1ec>
    dda6:	e764      	b.n	dc72 <MiApp_SendData+0xb6>
    dda8:	00a0      	lsls	r0, r4, #2
    ddaa:	1900      	adds	r0, r0, r4
    ddac:	685b      	ldr	r3, [r3, #4]
    ddae:	0080      	lsls	r0, r0, #2
    ddb0:	1818      	adds	r0, r3, r0
    ddb2:	47c0      	blx	r8
    ddb4:	2800      	cmp	r0, #0
    ddb6:	d0f0      	beq.n	dd9a <MiApp_SendData+0x1de>
    ddb8:	47d0      	blx	sl
    ddba:	2832      	cmp	r0, #50	; 0x32
    ddbc:	d9ed      	bls.n	dd9a <MiApp_SendData+0x1de>
    ddbe:	20a0      	movs	r0, #160	; 0xa0
    ddc0:	4b2b      	ldr	r3, [pc, #172]	; (de70 <MiApp_SendData+0x2b4>)
    ddc2:	4798      	blx	r3
    ddc4:	4681      	mov	r9, r0
    ddc6:	2800      	cmp	r0, #0
    ddc8:	d0e7      	beq.n	dd9a <MiApp_SendData+0x1de>
    ddca:	9901      	ldr	r1, [sp, #4]
    ddcc:	22a0      	movs	r2, #160	; 0xa0
    ddce:	47a8      	blx	r5
    ddd0:	464a      	mov	r2, r9
    ddd2:	683b      	ldr	r3, [r7, #0]
    ddd4:	4649      	mov	r1, r9
    ddd6:	7f9b      	ldrb	r3, [r3, #30]
    ddd8:	4658      	mov	r0, fp
    ddda:	3301      	adds	r3, #1
    dddc:	7413      	strb	r3, [r2, #16]
    ddde:	2200      	movs	r2, #0
    dde0:	464b      	mov	r3, r9
    dde2:	745a      	strb	r2, [r3, #17]
    dde4:	8833      	ldrh	r3, [r6, #0]
    dde6:	608a      	str	r2, [r1, #8]
    dde8:	191b      	adds	r3, r3, r4
    ddea:	818b      	strh	r3, [r1, #12]
    ddec:	4b2b      	ldr	r3, [pc, #172]	; (de9c <MiApp_SendData+0x2e0>)
    ddee:	4798      	blx	r3
    ddf0:	e7d3      	b.n	dd9a <MiApp_SendData+0x1de>
    ddf2:	9901      	ldr	r1, [sp, #4]
    ddf4:	4830      	ldr	r0, [pc, #192]	; (deb8 <MiApp_SendData+0x2fc>)
    ddf6:	4b29      	ldr	r3, [pc, #164]	; (de9c <MiApp_SendData+0x2e0>)
    ddf8:	4798      	blx	r3
    ddfa:	e701      	b.n	dc00 <MiApp_SendData+0x44>
    ddfc:	2300      	movs	r3, #0
    ddfe:	9801      	ldr	r0, [sp, #4]
    de00:	0029      	movs	r1, r5
    de02:	7443      	strb	r3, [r0, #17]
    de04:	4a1e      	ldr	r2, [pc, #120]	; (de80 <MiApp_SendData+0x2c4>)
    de06:	4b1f      	ldr	r3, [pc, #124]	; (de84 <MiApp_SendData+0x2c8>)
    de08:	0005      	movs	r5, r0
    de0a:	4798      	blx	r3
    de0c:	1e04      	subs	r4, r0, #0
    de0e:	d1f0      	bne.n	ddf2 <MiApp_SendData+0x236>
    de10:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    de12:	2b00      	cmp	r3, #0
    de14:	d100      	bne.n	de18 <MiApp_SendData+0x25c>
    de16:	e73d      	b.n	dc94 <MiApp_SendData+0xd8>
    de18:	002a      	movs	r2, r5
    de1a:	7ca8      	ldrb	r0, [r5, #18]
    de1c:	2101      	movs	r1, #1
    de1e:	4798      	blx	r3
    de20:	e738      	b.n	dc94 <MiApp_SendData+0xd8>
    de22:	9b01      	ldr	r3, [sp, #4]
    de24:	819c      	strh	r4, [r3, #12]
    de26:	0623      	lsls	r3, r4, #24
    de28:	d50f      	bpl.n	de4a <MiApp_SendData+0x28e>
    de2a:	0025      	movs	r5, r4
    de2c:	2f00      	cmp	r7, #0
    de2e:	d0e5      	beq.n	ddfc <MiApp_SendData+0x240>
    de30:	0021      	movs	r1, r4
    de32:	4b22      	ldr	r3, [pc, #136]	; (debc <MiApp_SendData+0x300>)
    de34:	2001      	movs	r0, #1
    de36:	4798      	blx	r3
    de38:	9a01      	ldr	r2, [sp, #4]
    de3a:	4b14      	ldr	r3, [pc, #80]	; (de8c <MiApp_SendData+0x2d0>)
    de3c:	7410      	strb	r0, [r2, #16]
    de3e:	681c      	ldr	r4, [r3, #0]
    de40:	8995      	ldrh	r5, [r2, #12]
    de42:	e76c      	b.n	dd1e <MiApp_SendData+0x162>
    de44:	9b01      	ldr	r3, [sp, #4]
    de46:	8b9c      	ldrh	r4, [r3, #28]
    de48:	e7f2      	b.n	de30 <MiApp_SendData+0x274>
    de4a:	4b10      	ldr	r3, [pc, #64]	; (de8c <MiApp_SendData+0x2d0>)
    de4c:	9901      	ldr	r1, [sp, #4]
    de4e:	681a      	ldr	r2, [r3, #0]
    de50:	4818      	ldr	r0, [pc, #96]	; (deb4 <MiApp_SendData+0x2f8>)
    de52:	7f93      	ldrb	r3, [r2, #30]
    de54:	2401      	movs	r4, #1
    de56:	3301      	adds	r3, #1
    de58:	740b      	strb	r3, [r1, #16]
    de5a:	233e      	movs	r3, #62	; 0x3e
    de5c:	5cd3      	ldrb	r3, [r2, r3]
    de5e:	3301      	adds	r3, #1
    de60:	744b      	strb	r3, [r1, #17]
    de62:	4b0e      	ldr	r3, [pc, #56]	; (de9c <MiApp_SendData+0x2e0>)
    de64:	4798      	blx	r3
    de66:	e6cb      	b.n	dc00 <MiApp_SendData+0x44>
    de68:	200028b8 	.word	0x200028b8
    de6c:	20001ce1 	.word	0x20001ce1
    de70:	0000bc11 	.word	0x0000bc11
    de74:	00014cdf 	.word	0x00014cdf
    de78:	0000fffc 	.word	0x0000fffc
    de7c:	0000ffff 	.word	0x0000ffff
    de80:	0000d2f9 	.word	0x0000d2f9
    de84:	0000f255 	.word	0x0000f255
    de88:	0000bccd 	.word	0x0000bccd
    de8c:	2000285c 	.word	0x2000285c
    de90:	00012469 	.word	0x00012469
    de94:	0000d525 	.word	0x0000d525
    de98:	2000287c 	.word	0x2000287c
    de9c:	0000be0d 	.word	0x0000be0d
    dea0:	00011f69 	.word	0x00011f69
    dea4:	000121a5 	.word	0x000121a5
    dea8:	20002908 	.word	0x20002908
    deac:	00011809 	.word	0x00011809
    deb0:	0000bd49 	.word	0x0000bd49
    deb4:	20002850 	.word	0x20002850
    deb8:	20002844 	.word	0x20002844
    debc:	0000db61 	.word	0x0000db61

0000dec0 <bloomFilterAddressCheck>:
    dec0:	b5f0      	push	{r4, r5, r6, r7, lr}
    dec2:	464e      	mov	r6, r9
    dec4:	46de      	mov	lr, fp
    dec6:	4657      	mov	r7, sl
    dec8:	4645      	mov	r5, r8
    deca:	b5e0      	push	{r5, r6, r7, lr}
    decc:	4bf5      	ldr	r3, [pc, #980]	; (e2a4 <bloomFilterAddressCheck+0x3e4>)
    dece:	b087      	sub	sp, #28
    ded0:	781b      	ldrb	r3, [r3, #0]
    ded2:	9003      	str	r0, [sp, #12]
    ded4:	000e      	movs	r6, r1
    ded6:	9300      	str	r3, [sp, #0]
    ded8:	2b00      	cmp	r3, #0
    deda:	d001      	beq.n	dee0 <bloomFilterAddressCheck+0x20>
    dedc:	f000 fe65 	bl	ebaa <bloomFilterAddressCheck+0xcea>
    dee0:	7811      	ldrb	r1, [r2, #0]
    dee2:	020b      	lsls	r3, r1, #8
    dee4:	0249      	lsls	r1, r1, #9
    dee6:	b209      	sxth	r1, r1
    dee8:	b218      	sxth	r0, r3
    deea:	468c      	mov	ip, r1
    deec:	4680      	mov	r8, r0
    deee:	4660      	mov	r0, ip
    def0:	4644      	mov	r4, r8
    def2:	49ed      	ldr	r1, [pc, #948]	; (e2a8 <bloomFilterAddressCheck+0x3e8>)
    def4:	005b      	lsls	r3, r3, #1
    def6:	4041      	eors	r1, r0
    def8:	b29b      	uxth	r3, r3
    defa:	b289      	uxth	r1, r1
    defc:	9304      	str	r3, [sp, #16]
    defe:	1c18      	adds	r0, r3, #0
    df00:	2c00      	cmp	r4, #0
    df02:	da01      	bge.n	df08 <bloomFilterAddressCheck+0x48>
    df04:	f000 fe5b 	bl	ebbe <bloomFilterAddressCheck+0xcfe>
    df08:	b284      	uxth	r4, r0
    df0a:	49e7      	ldr	r1, [pc, #924]	; (e2a8 <bloomFilterAddressCheck+0x3e8>)
    df0c:	0064      	lsls	r4, r4, #1
    df0e:	4061      	eors	r1, r4
    df10:	b209      	sxth	r1, r1
    df12:	b289      	uxth	r1, r1
    df14:	0044      	lsls	r4, r0, #1
    df16:	0403      	lsls	r3, r0, #16
    df18:	d501      	bpl.n	df1e <bloomFilterAddressCheck+0x5e>
    df1a:	f000 fe53 	bl	ebc4 <bloomFilterAddressCheck+0xd04>
    df1e:	b2a0      	uxth	r0, r4
    df20:	49e1      	ldr	r1, [pc, #900]	; (e2a8 <bloomFilterAddressCheck+0x3e8>)
    df22:	0040      	lsls	r0, r0, #1
    df24:	4041      	eors	r1, r0
    df26:	b289      	uxth	r1, r1
    df28:	0060      	lsls	r0, r4, #1
    df2a:	0423      	lsls	r3, r4, #16
    df2c:	d501      	bpl.n	df32 <bloomFilterAddressCheck+0x72>
    df2e:	f000 fe54 	bl	ebda <bloomFilterAddressCheck+0xd1a>
    df32:	b284      	uxth	r4, r0
    df34:	49dc      	ldr	r1, [pc, #880]	; (e2a8 <bloomFilterAddressCheck+0x3e8>)
    df36:	0064      	lsls	r4, r4, #1
    df38:	4061      	eors	r1, r4
    df3a:	b289      	uxth	r1, r1
    df3c:	0044      	lsls	r4, r0, #1
    df3e:	0403      	lsls	r3, r0, #16
    df40:	d501      	bpl.n	df46 <bloomFilterAddressCheck+0x86>
    df42:	f000 fe55 	bl	ebf0 <bloomFilterAddressCheck+0xd30>
    df46:	b2a0      	uxth	r0, r4
    df48:	49d7      	ldr	r1, [pc, #860]	; (e2a8 <bloomFilterAddressCheck+0x3e8>)
    df4a:	0040      	lsls	r0, r0, #1
    df4c:	4041      	eors	r1, r0
    df4e:	b289      	uxth	r1, r1
    df50:	0060      	lsls	r0, r4, #1
    df52:	0423      	lsls	r3, r4, #16
    df54:	d501      	bpl.n	df5a <bloomFilterAddressCheck+0x9a>
    df56:	f000 fe56 	bl	ec06 <bloomFilterAddressCheck+0xd46>
    df5a:	b284      	uxth	r4, r0
    df5c:	49d2      	ldr	r1, [pc, #840]	; (e2a8 <bloomFilterAddressCheck+0x3e8>)
    df5e:	0064      	lsls	r4, r4, #1
    df60:	4061      	eors	r1, r4
    df62:	b289      	uxth	r1, r1
    df64:	0044      	lsls	r4, r0, #1
    df66:	0403      	lsls	r3, r0, #16
    df68:	d501      	bpl.n	df6e <bloomFilterAddressCheck+0xae>
    df6a:	f000 fe57 	bl	ec1c <bloomFilterAddressCheck+0xd5c>
    df6e:	b2a0      	uxth	r0, r4
    df70:	49cd      	ldr	r1, [pc, #820]	; (e2a8 <bloomFilterAddressCheck+0x3e8>)
    df72:	0040      	lsls	r0, r0, #1
    df74:	4041      	eors	r1, r0
    df76:	b289      	uxth	r1, r1
    df78:	0060      	lsls	r0, r4, #1
    df7a:	0423      	lsls	r3, r4, #16
    df7c:	d501      	bpl.n	df82 <bloomFilterAddressCheck+0xc2>
    df7e:	f000 fe58 	bl	ec32 <bloomFilterAddressCheck+0xd72>
    df82:	b284      	uxth	r4, r0
    df84:	49c8      	ldr	r1, [pc, #800]	; (e2a8 <bloomFilterAddressCheck+0x3e8>)
    df86:	0064      	lsls	r4, r4, #1
    df88:	4061      	eors	r1, r4
    df8a:	2401      	movs	r4, #1
    df8c:	5714      	ldrsb	r4, [r2, r4]
    df8e:	b289      	uxth	r1, r1
    df90:	0224      	lsls	r4, r4, #8
    df92:	0045      	lsls	r5, r0, #1
    df94:	0403      	lsls	r3, r0, #16
    df96:	d501      	bpl.n	df9c <bloomFilterAddressCheck+0xdc>
    df98:	f000 fe4e 	bl	ec38 <bloomFilterAddressCheck+0xd78>
    df9c:	4065      	eors	r5, r4
    df9e:	b22d      	sxth	r5, r5
    dfa0:	b2a9      	uxth	r1, r5
    dfa2:	48c1      	ldr	r0, [pc, #772]	; (e2a8 <bloomFilterAddressCheck+0x3e8>)
    dfa4:	0049      	lsls	r1, r1, #1
    dfa6:	4048      	eors	r0, r1
    dfa8:	b280      	uxth	r0, r0
    dfaa:	2d00      	cmp	r5, #0
    dfac:	da01      	bge.n	dfb2 <bloomFilterAddressCheck+0xf2>
    dfae:	f000 fe46 	bl	ec3e <bloomFilterAddressCheck+0xd7e>
    dfb2:	48bd      	ldr	r0, [pc, #756]	; (e2a8 <bloomFilterAddressCheck+0x3e8>)
    dfb4:	b28d      	uxth	r5, r1
    dfb6:	006d      	lsls	r5, r5, #1
    dfb8:	4045      	eors	r5, r0
    dfba:	b2ad      	uxth	r5, r5
    dfbc:	0048      	lsls	r0, r1, #1
    dfbe:	040b      	lsls	r3, r1, #16
    dfc0:	d501      	bpl.n	dfc6 <bloomFilterAddressCheck+0x106>
    dfc2:	f000 fe47 	bl	ec54 <bloomFilterAddressCheck+0xd94>
    dfc6:	b285      	uxth	r5, r0
    dfc8:	49b7      	ldr	r1, [pc, #732]	; (e2a8 <bloomFilterAddressCheck+0x3e8>)
    dfca:	006d      	lsls	r5, r5, #1
    dfcc:	4069      	eors	r1, r5
    dfce:	b289      	uxth	r1, r1
    dfd0:	0045      	lsls	r5, r0, #1
    dfd2:	0403      	lsls	r3, r0, #16
    dfd4:	d501      	bpl.n	dfda <bloomFilterAddressCheck+0x11a>
    dfd6:	f000 fe48 	bl	ec6a <bloomFilterAddressCheck+0xdaa>
    dfda:	b2a8      	uxth	r0, r5
    dfdc:	49b2      	ldr	r1, [pc, #712]	; (e2a8 <bloomFilterAddressCheck+0x3e8>)
    dfde:	0040      	lsls	r0, r0, #1
    dfe0:	4041      	eors	r1, r0
    dfe2:	b289      	uxth	r1, r1
    dfe4:	0068      	lsls	r0, r5, #1
    dfe6:	042b      	lsls	r3, r5, #16
    dfe8:	d501      	bpl.n	dfee <bloomFilterAddressCheck+0x12e>
    dfea:	f000 fe49 	bl	ec80 <bloomFilterAddressCheck+0xdc0>
    dfee:	b285      	uxth	r5, r0
    dff0:	49ad      	ldr	r1, [pc, #692]	; (e2a8 <bloomFilterAddressCheck+0x3e8>)
    dff2:	006d      	lsls	r5, r5, #1
    dff4:	4069      	eors	r1, r5
    dff6:	b289      	uxth	r1, r1
    dff8:	0045      	lsls	r5, r0, #1
    dffa:	0403      	lsls	r3, r0, #16
    dffc:	d501      	bpl.n	e002 <bloomFilterAddressCheck+0x142>
    dffe:	f000 fe4a 	bl	ec96 <bloomFilterAddressCheck+0xdd6>
    e002:	b2a8      	uxth	r0, r5
    e004:	49a8      	ldr	r1, [pc, #672]	; (e2a8 <bloomFilterAddressCheck+0x3e8>)
    e006:	0040      	lsls	r0, r0, #1
    e008:	4041      	eors	r1, r0
    e00a:	b289      	uxth	r1, r1
    e00c:	0068      	lsls	r0, r5, #1
    e00e:	042b      	lsls	r3, r5, #16
    e010:	d501      	bpl.n	e016 <bloomFilterAddressCheck+0x156>
    e012:	f000 fe4b 	bl	ecac <bloomFilterAddressCheck+0xdec>
    e016:	b285      	uxth	r5, r0
    e018:	49a3      	ldr	r1, [pc, #652]	; (e2a8 <bloomFilterAddressCheck+0x3e8>)
    e01a:	006d      	lsls	r5, r5, #1
    e01c:	4069      	eors	r1, r5
    e01e:	b289      	uxth	r1, r1
    e020:	0045      	lsls	r5, r0, #1
    e022:	0403      	lsls	r3, r0, #16
    e024:	d501      	bpl.n	e02a <bloomFilterAddressCheck+0x16a>
    e026:	f000 fe4c 	bl	ecc2 <bloomFilterAddressCheck+0xe02>
    e02a:	b2a8      	uxth	r0, r5
    e02c:	499e      	ldr	r1, [pc, #632]	; (e2a8 <bloomFilterAddressCheck+0x3e8>)
    e02e:	0040      	lsls	r0, r0, #1
    e030:	4041      	eors	r1, r0
    e032:	2002      	movs	r0, #2
    e034:	5610      	ldrsb	r0, [r2, r0]
    e036:	006f      	lsls	r7, r5, #1
    e038:	b289      	uxth	r1, r1
    e03a:	0200      	lsls	r0, r0, #8
    e03c:	46b9      	mov	r9, r7
    e03e:	042b      	lsls	r3, r5, #16
    e040:	d501      	bpl.n	e046 <bloomFilterAddressCheck+0x186>
    e042:	f000 fe41 	bl	ecc8 <bloomFilterAddressCheck+0xe08>
    e046:	464d      	mov	r5, r9
    e048:	4045      	eors	r5, r0
    e04a:	b22d      	sxth	r5, r5
    e04c:	b2a9      	uxth	r1, r5
    e04e:	0049      	lsls	r1, r1, #1
    e050:	4689      	mov	r9, r1
    e052:	464f      	mov	r7, r9
    e054:	4994      	ldr	r1, [pc, #592]	; (e2a8 <bloomFilterAddressCheck+0x3e8>)
    e056:	4079      	eors	r1, r7
    e058:	b289      	uxth	r1, r1
    e05a:	468a      	mov	sl, r1
    e05c:	4649      	mov	r1, r9
    e05e:	2d00      	cmp	r5, #0
    e060:	da01      	bge.n	e066 <bloomFilterAddressCheck+0x1a6>
    e062:	f000 fe34 	bl	ecce <bloomFilterAddressCheck+0xe0e>
    e066:	b28d      	uxth	r5, r1
    e068:	006d      	lsls	r5, r5, #1
    e06a:	46a9      	mov	r9, r5
    e06c:	464f      	mov	r7, r9
    e06e:	4d8e      	ldr	r5, [pc, #568]	; (e2a8 <bloomFilterAddressCheck+0x3e8>)
    e070:	407d      	eors	r5, r7
    e072:	b2ad      	uxth	r5, r5
    e074:	46a9      	mov	r9, r5
    e076:	004d      	lsls	r5, r1, #1
    e078:	040b      	lsls	r3, r1, #16
    e07a:	d501      	bpl.n	e080 <bloomFilterAddressCheck+0x1c0>
    e07c:	f000 fe2a 	bl	ecd4 <bloomFilterAddressCheck+0xe14>
    e080:	b2a9      	uxth	r1, r5
    e082:	0049      	lsls	r1, r1, #1
    e084:	4689      	mov	r9, r1
    e086:	464f      	mov	r7, r9
    e088:	4987      	ldr	r1, [pc, #540]	; (e2a8 <bloomFilterAddressCheck+0x3e8>)
    e08a:	4079      	eors	r1, r7
    e08c:	006f      	lsls	r7, r5, #1
    e08e:	b289      	uxth	r1, r1
    e090:	46b9      	mov	r9, r7
    e092:	042b      	lsls	r3, r5, #16
    e094:	d501      	bpl.n	e09a <bloomFilterAddressCheck+0x1da>
    e096:	f000 fe20 	bl	ecda <bloomFilterAddressCheck+0xe1a>
    e09a:	4649      	mov	r1, r9
    e09c:	466b      	mov	r3, sp
    e09e:	b28d      	uxth	r5, r1
    e0a0:	8099      	strh	r1, [r3, #4]
    e0a2:	4981      	ldr	r1, [pc, #516]	; (e2a8 <bloomFilterAddressCheck+0x3e8>)
    e0a4:	006d      	lsls	r5, r5, #1
    e0a6:	4069      	eors	r1, r5
    e0a8:	464f      	mov	r7, r9
    e0aa:	464d      	mov	r5, r9
    e0ac:	b289      	uxth	r1, r1
    e0ae:	006d      	lsls	r5, r5, #1
    e0b0:	043b      	lsls	r3, r7, #16
    e0b2:	d501      	bpl.n	e0b8 <bloomFilterAddressCheck+0x1f8>
    e0b4:	f000 fe14 	bl	ece0 <bloomFilterAddressCheck+0xe20>
    e0b8:	b2a9      	uxth	r1, r5
    e0ba:	0049      	lsls	r1, r1, #1
    e0bc:	4689      	mov	r9, r1
    e0be:	464f      	mov	r7, r9
    e0c0:	4979      	ldr	r1, [pc, #484]	; (e2a8 <bloomFilterAddressCheck+0x3e8>)
    e0c2:	4079      	eors	r1, r7
    e0c4:	006f      	lsls	r7, r5, #1
    e0c6:	b289      	uxth	r1, r1
    e0c8:	46b9      	mov	r9, r7
    e0ca:	042b      	lsls	r3, r5, #16
    e0cc:	d501      	bpl.n	e0d2 <bloomFilterAddressCheck+0x212>
    e0ce:	f000 fe0a 	bl	ece6 <bloomFilterAddressCheck+0xe26>
    e0d2:	4649      	mov	r1, r9
    e0d4:	466b      	mov	r3, sp
    e0d6:	b28d      	uxth	r5, r1
    e0d8:	8099      	strh	r1, [r3, #4]
    e0da:	4973      	ldr	r1, [pc, #460]	; (e2a8 <bloomFilterAddressCheck+0x3e8>)
    e0dc:	006d      	lsls	r5, r5, #1
    e0de:	4069      	eors	r1, r5
    e0e0:	464f      	mov	r7, r9
    e0e2:	464d      	mov	r5, r9
    e0e4:	b289      	uxth	r1, r1
    e0e6:	006d      	lsls	r5, r5, #1
    e0e8:	043b      	lsls	r3, r7, #16
    e0ea:	d501      	bpl.n	e0f0 <bloomFilterAddressCheck+0x230>
    e0ec:	f000 fdfe 	bl	ecec <bloomFilterAddressCheck+0xe2c>
    e0f0:	b2a9      	uxth	r1, r5
    e0f2:	0049      	lsls	r1, r1, #1
    e0f4:	4689      	mov	r9, r1
    e0f6:	464f      	mov	r7, r9
    e0f8:	496b      	ldr	r1, [pc, #428]	; (e2a8 <bloomFilterAddressCheck+0x3e8>)
    e0fa:	4079      	eors	r1, r7
    e0fc:	006f      	lsls	r7, r5, #1
    e0fe:	b289      	uxth	r1, r1
    e100:	46ba      	mov	sl, r7
    e102:	042b      	lsls	r3, r5, #16
    e104:	d501      	bpl.n	e10a <bloomFilterAddressCheck+0x24a>
    e106:	f000 fdf4 	bl	ecf2 <bloomFilterAddressCheck+0xe32>
    e10a:	4651      	mov	r1, sl
    e10c:	466b      	mov	r3, sp
    e10e:	b28d      	uxth	r5, r1
    e110:	8099      	strh	r1, [r3, #4]
    e112:	4965      	ldr	r1, [pc, #404]	; (e2a8 <bloomFilterAddressCheck+0x3e8>)
    e114:	006d      	lsls	r5, r5, #1
    e116:	4069      	eors	r1, r5
    e118:	b289      	uxth	r1, r1
    e11a:	4689      	mov	r9, r1
    e11c:	2103      	movs	r1, #3
    e11e:	4655      	mov	r5, sl
    e120:	4657      	mov	r7, sl
    e122:	5651      	ldrsb	r1, [r2, r1]
    e124:	006d      	lsls	r5, r5, #1
    e126:	0209      	lsls	r1, r1, #8
    e128:	043b      	lsls	r3, r7, #16
    e12a:	d501      	bpl.n	e130 <bloomFilterAddressCheck+0x270>
    e12c:	f000 fde4 	bl	ecf8 <bloomFilterAddressCheck+0xe38>
    e130:	404d      	eors	r5, r1
    e132:	b22d      	sxth	r5, r5
    e134:	466b      	mov	r3, sp
    e136:	46a9      	mov	r9, r5
    e138:	4f5b      	ldr	r7, [pc, #364]	; (e2a8 <bloomFilterAddressCheck+0x3e8>)
    e13a:	b2ad      	uxth	r5, r5
    e13c:	006d      	lsls	r5, r5, #1
    e13e:	406f      	eors	r7, r5
    e140:	809f      	strh	r7, [r3, #4]
    e142:	b2bf      	uxth	r7, r7
    e144:	46ba      	mov	sl, r7
    e146:	464f      	mov	r7, r9
    e148:	2f00      	cmp	r7, #0
    e14a:	da01      	bge.n	e150 <bloomFilterAddressCheck+0x290>
    e14c:	f000 fdd7 	bl	ecfe <bloomFilterAddressCheck+0xe3e>
    e150:	b2af      	uxth	r7, r5
    e152:	007f      	lsls	r7, r7, #1
    e154:	46ba      	mov	sl, r7
    e156:	4f54      	ldr	r7, [pc, #336]	; (e2a8 <bloomFilterAddressCheck+0x3e8>)
    e158:	46b9      	mov	r9, r7
    e15a:	4657      	mov	r7, sl
    e15c:	464b      	mov	r3, r9
    e15e:	405f      	eors	r7, r3
    e160:	1c3b      	adds	r3, r7, #0
    e162:	466f      	mov	r7, sp
    e164:	80bb      	strh	r3, [r7, #4]
    e166:	88bb      	ldrh	r3, [r7, #4]
    e168:	469a      	mov	sl, r3
    e16a:	006b      	lsls	r3, r5, #1
    e16c:	4699      	mov	r9, r3
    e16e:	042b      	lsls	r3, r5, #16
    e170:	d501      	bpl.n	e176 <bloomFilterAddressCheck+0x2b6>
    e172:	f000 fdc7 	bl	ed04 <bloomFilterAddressCheck+0xe44>
    e176:	464b      	mov	r3, r9
    e178:	466d      	mov	r5, sp
    e17a:	80ab      	strh	r3, [r5, #4]
    e17c:	88ad      	ldrh	r5, [r5, #4]
    e17e:	006b      	lsls	r3, r5, #1
    e180:	4d49      	ldr	r5, [pc, #292]	; (e2a8 <bloomFilterAddressCheck+0x3e8>)
    e182:	405d      	eors	r5, r3
    e184:	464b      	mov	r3, r9
    e186:	005b      	lsls	r3, r3, #1
    e188:	469a      	mov	sl, r3
    e18a:	464b      	mov	r3, r9
    e18c:	b2ad      	uxth	r5, r5
    e18e:	041b      	lsls	r3, r3, #16
    e190:	d501      	bpl.n	e196 <bloomFilterAddressCheck+0x2d6>
    e192:	f000 fdba 	bl	ed0a <bloomFilterAddressCheck+0xe4a>
    e196:	4653      	mov	r3, sl
    e198:	466d      	mov	r5, sp
    e19a:	80ab      	strh	r3, [r5, #4]
    e19c:	88ad      	ldrh	r5, [r5, #4]
    e19e:	006b      	lsls	r3, r5, #1
    e1a0:	4d41      	ldr	r5, [pc, #260]	; (e2a8 <bloomFilterAddressCheck+0x3e8>)
    e1a2:	405d      	eors	r5, r3
    e1a4:	4653      	mov	r3, sl
    e1a6:	005b      	lsls	r3, r3, #1
    e1a8:	4699      	mov	r9, r3
    e1aa:	4653      	mov	r3, sl
    e1ac:	b2ad      	uxth	r5, r5
    e1ae:	041b      	lsls	r3, r3, #16
    e1b0:	d501      	bpl.n	e1b6 <bloomFilterAddressCheck+0x2f6>
    e1b2:	f000 fdad 	bl	ed10 <bloomFilterAddressCheck+0xe50>
    e1b6:	464b      	mov	r3, r9
    e1b8:	466d      	mov	r5, sp
    e1ba:	80ab      	strh	r3, [r5, #4]
    e1bc:	88ad      	ldrh	r5, [r5, #4]
    e1be:	006b      	lsls	r3, r5, #1
    e1c0:	4d39      	ldr	r5, [pc, #228]	; (e2a8 <bloomFilterAddressCheck+0x3e8>)
    e1c2:	405d      	eors	r5, r3
    e1c4:	464b      	mov	r3, r9
    e1c6:	005b      	lsls	r3, r3, #1
    e1c8:	469a      	mov	sl, r3
    e1ca:	464b      	mov	r3, r9
    e1cc:	b2ad      	uxth	r5, r5
    e1ce:	041b      	lsls	r3, r3, #16
    e1d0:	d501      	bpl.n	e1d6 <bloomFilterAddressCheck+0x316>
    e1d2:	f000 fda0 	bl	ed16 <bloomFilterAddressCheck+0xe56>
    e1d6:	4653      	mov	r3, sl
    e1d8:	466d      	mov	r5, sp
    e1da:	80ab      	strh	r3, [r5, #4]
    e1dc:	88ad      	ldrh	r5, [r5, #4]
    e1de:	006b      	lsls	r3, r5, #1
    e1e0:	4d31      	ldr	r5, [pc, #196]	; (e2a8 <bloomFilterAddressCheck+0x3e8>)
    e1e2:	405d      	eors	r5, r3
    e1e4:	4653      	mov	r3, sl
    e1e6:	005b      	lsls	r3, r3, #1
    e1e8:	4699      	mov	r9, r3
    e1ea:	4653      	mov	r3, sl
    e1ec:	b2ad      	uxth	r5, r5
    e1ee:	041b      	lsls	r3, r3, #16
    e1f0:	d501      	bpl.n	e1f6 <bloomFilterAddressCheck+0x336>
    e1f2:	f000 fd93 	bl	ed1c <bloomFilterAddressCheck+0xe5c>
    e1f6:	464b      	mov	r3, r9
    e1f8:	466d      	mov	r5, sp
    e1fa:	80ab      	strh	r3, [r5, #4]
    e1fc:	88ad      	ldrh	r5, [r5, #4]
    e1fe:	006b      	lsls	r3, r5, #1
    e200:	4d29      	ldr	r5, [pc, #164]	; (e2a8 <bloomFilterAddressCheck+0x3e8>)
    e202:	405d      	eors	r5, r3
    e204:	464b      	mov	r3, r9
    e206:	005b      	lsls	r3, r3, #1
    e208:	469a      	mov	sl, r3
    e20a:	464b      	mov	r3, r9
    e20c:	b2ad      	uxth	r5, r5
    e20e:	041b      	lsls	r3, r3, #16
    e210:	d501      	bpl.n	e216 <bloomFilterAddressCheck+0x356>
    e212:	f000 fd86 	bl	ed22 <bloomFilterAddressCheck+0xe62>
    e216:	4653      	mov	r3, sl
    e218:	466d      	mov	r5, sp
    e21a:	80ab      	strh	r3, [r5, #4]
    e21c:	88ad      	ldrh	r5, [r5, #4]
    e21e:	006b      	lsls	r3, r5, #1
    e220:	4d21      	ldr	r5, [pc, #132]	; (e2a8 <bloomFilterAddressCheck+0x3e8>)
    e222:	405d      	eors	r5, r3
    e224:	b2ab      	uxth	r3, r5
    e226:	2504      	movs	r5, #4
    e228:	5755      	ldrsb	r5, [r2, r5]
    e22a:	4699      	mov	r9, r3
    e22c:	022b      	lsls	r3, r5, #8
    e22e:	469b      	mov	fp, r3
    e230:	4653      	mov	r3, sl
    e232:	005d      	lsls	r5, r3, #1
    e234:	041b      	lsls	r3, r3, #16
    e236:	d501      	bpl.n	e23c <bloomFilterAddressCheck+0x37c>
    e238:	f000 fd76 	bl	ed28 <bloomFilterAddressCheck+0xe68>
    e23c:	465b      	mov	r3, fp
    e23e:	405d      	eors	r5, r3
    e240:	b22b      	sxth	r3, r5
    e242:	466d      	mov	r5, sp
    e244:	4699      	mov	r9, r3
    e246:	80ab      	strh	r3, [r5, #4]
    e248:	4b17      	ldr	r3, [pc, #92]	; (e2a8 <bloomFilterAddressCheck+0x3e8>)
    e24a:	88ad      	ldrh	r5, [r5, #4]
    e24c:	001f      	movs	r7, r3
    e24e:	006d      	lsls	r5, r5, #1
    e250:	406f      	eors	r7, r5
    e252:	1c3b      	adds	r3, r7, #0
    e254:	466f      	mov	r7, sp
    e256:	80bb      	strh	r3, [r7, #4]
    e258:	88bb      	ldrh	r3, [r7, #4]
    e25a:	469a      	mov	sl, r3
    e25c:	464b      	mov	r3, r9
    e25e:	2b00      	cmp	r3, #0
    e260:	da01      	bge.n	e266 <bloomFilterAddressCheck+0x3a6>
    e262:	f000 fd64 	bl	ed2e <bloomFilterAddressCheck+0xe6e>
    e266:	b2ab      	uxth	r3, r5
    e268:	005b      	lsls	r3, r3, #1
    e26a:	469a      	mov	sl, r3
    e26c:	4657      	mov	r7, sl
    e26e:	4b0e      	ldr	r3, [pc, #56]	; (e2a8 <bloomFilterAddressCheck+0x3e8>)
    e270:	405f      	eors	r7, r3
    e272:	1c3b      	adds	r3, r7, #0
    e274:	466f      	mov	r7, sp
    e276:	80bb      	strh	r3, [r7, #4]
    e278:	88bb      	ldrh	r3, [r7, #4]
    e27a:	469a      	mov	sl, r3
    e27c:	006b      	lsls	r3, r5, #1
    e27e:	4699      	mov	r9, r3
    e280:	042b      	lsls	r3, r5, #16
    e282:	d501      	bpl.n	e288 <bloomFilterAddressCheck+0x3c8>
    e284:	f000 fd56 	bl	ed34 <bloomFilterAddressCheck+0xe74>
    e288:	464b      	mov	r3, r9
    e28a:	466d      	mov	r5, sp
    e28c:	80ab      	strh	r3, [r5, #4]
    e28e:	88ad      	ldrh	r5, [r5, #4]
    e290:	006b      	lsls	r3, r5, #1
    e292:	4d05      	ldr	r5, [pc, #20]	; (e2a8 <bloomFilterAddressCheck+0x3e8>)
    e294:	405d      	eors	r5, r3
    e296:	464b      	mov	r3, r9
    e298:	005b      	lsls	r3, r3, #1
    e29a:	469a      	mov	sl, r3
    e29c:	464b      	mov	r3, r9
    e29e:	b2ad      	uxth	r5, r5
    e2a0:	e004      	b.n	e2ac <bloomFilterAddressCheck+0x3ec>
    e2a2:	46c0      	nop			; (mov r8, r8)
    e2a4:	20000091 	.word	0x20000091
    e2a8:	00001021 	.word	0x00001021
    e2ac:	041b      	lsls	r3, r3, #16
    e2ae:	d501      	bpl.n	e2b4 <bloomFilterAddressCheck+0x3f4>
    e2b0:	f000 fd43 	bl	ed3a <bloomFilterAddressCheck+0xe7a>
    e2b4:	4653      	mov	r3, sl
    e2b6:	466d      	mov	r5, sp
    e2b8:	80ab      	strh	r3, [r5, #4]
    e2ba:	88ad      	ldrh	r5, [r5, #4]
    e2bc:	006b      	lsls	r3, r5, #1
    e2be:	4de9      	ldr	r5, [pc, #932]	; (e664 <bloomFilterAddressCheck+0x7a4>)
    e2c0:	405d      	eors	r5, r3
    e2c2:	4653      	mov	r3, sl
    e2c4:	005b      	lsls	r3, r3, #1
    e2c6:	4699      	mov	r9, r3
    e2c8:	4653      	mov	r3, sl
    e2ca:	b2ad      	uxth	r5, r5
    e2cc:	041b      	lsls	r3, r3, #16
    e2ce:	d501      	bpl.n	e2d4 <bloomFilterAddressCheck+0x414>
    e2d0:	f000 fd36 	bl	ed40 <bloomFilterAddressCheck+0xe80>
    e2d4:	464b      	mov	r3, r9
    e2d6:	466d      	mov	r5, sp
    e2d8:	80ab      	strh	r3, [r5, #4]
    e2da:	88ad      	ldrh	r5, [r5, #4]
    e2dc:	006b      	lsls	r3, r5, #1
    e2de:	4de1      	ldr	r5, [pc, #900]	; (e664 <bloomFilterAddressCheck+0x7a4>)
    e2e0:	405d      	eors	r5, r3
    e2e2:	464b      	mov	r3, r9
    e2e4:	005b      	lsls	r3, r3, #1
    e2e6:	469a      	mov	sl, r3
    e2e8:	464b      	mov	r3, r9
    e2ea:	b2ad      	uxth	r5, r5
    e2ec:	041b      	lsls	r3, r3, #16
    e2ee:	d501      	bpl.n	e2f4 <bloomFilterAddressCheck+0x434>
    e2f0:	f000 fd29 	bl	ed46 <bloomFilterAddressCheck+0xe86>
    e2f4:	4653      	mov	r3, sl
    e2f6:	466d      	mov	r5, sp
    e2f8:	80ab      	strh	r3, [r5, #4]
    e2fa:	88ad      	ldrh	r5, [r5, #4]
    e2fc:	006b      	lsls	r3, r5, #1
    e2fe:	4dd9      	ldr	r5, [pc, #868]	; (e664 <bloomFilterAddressCheck+0x7a4>)
    e300:	405d      	eors	r5, r3
    e302:	4653      	mov	r3, sl
    e304:	005b      	lsls	r3, r3, #1
    e306:	4699      	mov	r9, r3
    e308:	4653      	mov	r3, sl
    e30a:	b2ad      	uxth	r5, r5
    e30c:	041b      	lsls	r3, r3, #16
    e30e:	d501      	bpl.n	e314 <bloomFilterAddressCheck+0x454>
    e310:	f000 fd1c 	bl	ed4c <bloomFilterAddressCheck+0xe8c>
    e314:	464b      	mov	r3, r9
    e316:	466d      	mov	r5, sp
    e318:	80ab      	strh	r3, [r5, #4]
    e31a:	88ad      	ldrh	r5, [r5, #4]
    e31c:	006b      	lsls	r3, r5, #1
    e31e:	4dd1      	ldr	r5, [pc, #836]	; (e664 <bloomFilterAddressCheck+0x7a4>)
    e320:	405d      	eors	r5, r3
    e322:	464b      	mov	r3, r9
    e324:	005b      	lsls	r3, r3, #1
    e326:	469a      	mov	sl, r3
    e328:	464b      	mov	r3, r9
    e32a:	b2ad      	uxth	r5, r5
    e32c:	041b      	lsls	r3, r3, #16
    e32e:	d501      	bpl.n	e334 <bloomFilterAddressCheck+0x474>
    e330:	f000 fd0f 	bl	ed52 <bloomFilterAddressCheck+0xe92>
    e334:	4653      	mov	r3, sl
    e336:	466d      	mov	r5, sp
    e338:	80ab      	strh	r3, [r5, #4]
    e33a:	88ad      	ldrh	r5, [r5, #4]
    e33c:	006b      	lsls	r3, r5, #1
    e33e:	4dc9      	ldr	r5, [pc, #804]	; (e664 <bloomFilterAddressCheck+0x7a4>)
    e340:	405d      	eors	r5, r3
    e342:	b2ab      	uxth	r3, r5
    e344:	2505      	movs	r5, #5
    e346:	5755      	ldrsb	r5, [r2, r5]
    e348:	4699      	mov	r9, r3
    e34a:	022b      	lsls	r3, r5, #8
    e34c:	9301      	str	r3, [sp, #4]
    e34e:	4653      	mov	r3, sl
    e350:	005d      	lsls	r5, r3, #1
    e352:	041b      	lsls	r3, r3, #16
    e354:	d501      	bpl.n	e35a <bloomFilterAddressCheck+0x49a>
    e356:	f000 fcff 	bl	ed58 <bloomFilterAddressCheck+0xe98>
    e35a:	9b01      	ldr	r3, [sp, #4]
    e35c:	405d      	eors	r5, r3
    e35e:	b22b      	sxth	r3, r5
    e360:	466d      	mov	r5, sp
    e362:	4699      	mov	r9, r3
    e364:	812b      	strh	r3, [r5, #8]
    e366:	4bbf      	ldr	r3, [pc, #764]	; (e664 <bloomFilterAddressCheck+0x7a4>)
    e368:	892d      	ldrh	r5, [r5, #8]
    e36a:	001f      	movs	r7, r3
    e36c:	006d      	lsls	r5, r5, #1
    e36e:	406f      	eors	r7, r5
    e370:	1c3b      	adds	r3, r7, #0
    e372:	466f      	mov	r7, sp
    e374:	813b      	strh	r3, [r7, #8]
    e376:	893b      	ldrh	r3, [r7, #8]
    e378:	469a      	mov	sl, r3
    e37a:	464b      	mov	r3, r9
    e37c:	2b00      	cmp	r3, #0
    e37e:	da01      	bge.n	e384 <bloomFilterAddressCheck+0x4c4>
    e380:	f000 fced 	bl	ed5e <bloomFilterAddressCheck+0xe9e>
    e384:	b2ab      	uxth	r3, r5
    e386:	005b      	lsls	r3, r3, #1
    e388:	469a      	mov	sl, r3
    e38a:	4657      	mov	r7, sl
    e38c:	4bb5      	ldr	r3, [pc, #724]	; (e664 <bloomFilterAddressCheck+0x7a4>)
    e38e:	405f      	eors	r7, r3
    e390:	1c3b      	adds	r3, r7, #0
    e392:	466f      	mov	r7, sp
    e394:	813b      	strh	r3, [r7, #8]
    e396:	893b      	ldrh	r3, [r7, #8]
    e398:	469a      	mov	sl, r3
    e39a:	006b      	lsls	r3, r5, #1
    e39c:	4699      	mov	r9, r3
    e39e:	042b      	lsls	r3, r5, #16
    e3a0:	d501      	bpl.n	e3a6 <bloomFilterAddressCheck+0x4e6>
    e3a2:	f000 fcdf 	bl	ed64 <bloomFilterAddressCheck+0xea4>
    e3a6:	464b      	mov	r3, r9
    e3a8:	466d      	mov	r5, sp
    e3aa:	812b      	strh	r3, [r5, #8]
    e3ac:	892d      	ldrh	r5, [r5, #8]
    e3ae:	006b      	lsls	r3, r5, #1
    e3b0:	4dac      	ldr	r5, [pc, #688]	; (e664 <bloomFilterAddressCheck+0x7a4>)
    e3b2:	405d      	eors	r5, r3
    e3b4:	464b      	mov	r3, r9
    e3b6:	005b      	lsls	r3, r3, #1
    e3b8:	469a      	mov	sl, r3
    e3ba:	464b      	mov	r3, r9
    e3bc:	b2ad      	uxth	r5, r5
    e3be:	041b      	lsls	r3, r3, #16
    e3c0:	d501      	bpl.n	e3c6 <bloomFilterAddressCheck+0x506>
    e3c2:	f000 fcd2 	bl	ed6a <bloomFilterAddressCheck+0xeaa>
    e3c6:	4653      	mov	r3, sl
    e3c8:	466d      	mov	r5, sp
    e3ca:	812b      	strh	r3, [r5, #8]
    e3cc:	892d      	ldrh	r5, [r5, #8]
    e3ce:	006b      	lsls	r3, r5, #1
    e3d0:	4da4      	ldr	r5, [pc, #656]	; (e664 <bloomFilterAddressCheck+0x7a4>)
    e3d2:	405d      	eors	r5, r3
    e3d4:	4653      	mov	r3, sl
    e3d6:	005b      	lsls	r3, r3, #1
    e3d8:	4699      	mov	r9, r3
    e3da:	4653      	mov	r3, sl
    e3dc:	b2ad      	uxth	r5, r5
    e3de:	041b      	lsls	r3, r3, #16
    e3e0:	d501      	bpl.n	e3e6 <bloomFilterAddressCheck+0x526>
    e3e2:	f000 fcc5 	bl	ed70 <bloomFilterAddressCheck+0xeb0>
    e3e6:	464b      	mov	r3, r9
    e3e8:	466d      	mov	r5, sp
    e3ea:	812b      	strh	r3, [r5, #8]
    e3ec:	892d      	ldrh	r5, [r5, #8]
    e3ee:	006b      	lsls	r3, r5, #1
    e3f0:	4d9c      	ldr	r5, [pc, #624]	; (e664 <bloomFilterAddressCheck+0x7a4>)
    e3f2:	405d      	eors	r5, r3
    e3f4:	464b      	mov	r3, r9
    e3f6:	005b      	lsls	r3, r3, #1
    e3f8:	469a      	mov	sl, r3
    e3fa:	464b      	mov	r3, r9
    e3fc:	b2ad      	uxth	r5, r5
    e3fe:	041b      	lsls	r3, r3, #16
    e400:	d501      	bpl.n	e406 <bloomFilterAddressCheck+0x546>
    e402:	f000 fcb8 	bl	ed76 <bloomFilterAddressCheck+0xeb6>
    e406:	4653      	mov	r3, sl
    e408:	466d      	mov	r5, sp
    e40a:	812b      	strh	r3, [r5, #8]
    e40c:	892d      	ldrh	r5, [r5, #8]
    e40e:	006b      	lsls	r3, r5, #1
    e410:	4d94      	ldr	r5, [pc, #592]	; (e664 <bloomFilterAddressCheck+0x7a4>)
    e412:	405d      	eors	r5, r3
    e414:	4653      	mov	r3, sl
    e416:	005b      	lsls	r3, r3, #1
    e418:	4699      	mov	r9, r3
    e41a:	4653      	mov	r3, sl
    e41c:	b2ad      	uxth	r5, r5
    e41e:	041b      	lsls	r3, r3, #16
    e420:	d501      	bpl.n	e426 <bloomFilterAddressCheck+0x566>
    e422:	f000 fcab 	bl	ed7c <bloomFilterAddressCheck+0xebc>
    e426:	464b      	mov	r3, r9
    e428:	466d      	mov	r5, sp
    e42a:	812b      	strh	r3, [r5, #8]
    e42c:	892d      	ldrh	r5, [r5, #8]
    e42e:	006b      	lsls	r3, r5, #1
    e430:	4d8c      	ldr	r5, [pc, #560]	; (e664 <bloomFilterAddressCheck+0x7a4>)
    e432:	405d      	eors	r5, r3
    e434:	464b      	mov	r3, r9
    e436:	005b      	lsls	r3, r3, #1
    e438:	469a      	mov	sl, r3
    e43a:	464b      	mov	r3, r9
    e43c:	b2ad      	uxth	r5, r5
    e43e:	041b      	lsls	r3, r3, #16
    e440:	d501      	bpl.n	e446 <bloomFilterAddressCheck+0x586>
    e442:	f000 fc9e 	bl	ed82 <bloomFilterAddressCheck+0xec2>
    e446:	4653      	mov	r3, sl
    e448:	466d      	mov	r5, sp
    e44a:	812b      	strh	r3, [r5, #8]
    e44c:	892d      	ldrh	r5, [r5, #8]
    e44e:	006b      	lsls	r3, r5, #1
    e450:	4d84      	ldr	r5, [pc, #528]	; (e664 <bloomFilterAddressCheck+0x7a4>)
    e452:	405d      	eors	r5, r3
    e454:	b2ab      	uxth	r3, r5
    e456:	2506      	movs	r5, #6
    e458:	5755      	ldrsb	r5, [r2, r5]
    e45a:	4699      	mov	r9, r3
    e45c:	022b      	lsls	r3, r5, #8
    e45e:	9302      	str	r3, [sp, #8]
    e460:	4653      	mov	r3, sl
    e462:	005d      	lsls	r5, r3, #1
    e464:	041b      	lsls	r3, r3, #16
    e466:	d501      	bpl.n	e46c <bloomFilterAddressCheck+0x5ac>
    e468:	f000 fc8e 	bl	ed88 <bloomFilterAddressCheck+0xec8>
    e46c:	9b02      	ldr	r3, [sp, #8]
    e46e:	405d      	eors	r5, r3
    e470:	b22b      	sxth	r3, r5
    e472:	466d      	mov	r5, sp
    e474:	4699      	mov	r9, r3
    e476:	82ab      	strh	r3, [r5, #20]
    e478:	4b7a      	ldr	r3, [pc, #488]	; (e664 <bloomFilterAddressCheck+0x7a4>)
    e47a:	8aad      	ldrh	r5, [r5, #20]
    e47c:	001f      	movs	r7, r3
    e47e:	006d      	lsls	r5, r5, #1
    e480:	406f      	eors	r7, r5
    e482:	1c3b      	adds	r3, r7, #0
    e484:	466f      	mov	r7, sp
    e486:	82bb      	strh	r3, [r7, #20]
    e488:	8abb      	ldrh	r3, [r7, #20]
    e48a:	469a      	mov	sl, r3
    e48c:	464b      	mov	r3, r9
    e48e:	2b00      	cmp	r3, #0
    e490:	da01      	bge.n	e496 <bloomFilterAddressCheck+0x5d6>
    e492:	f000 fc7c 	bl	ed8e <bloomFilterAddressCheck+0xece>
    e496:	b2ab      	uxth	r3, r5
    e498:	005b      	lsls	r3, r3, #1
    e49a:	469a      	mov	sl, r3
    e49c:	4657      	mov	r7, sl
    e49e:	4b71      	ldr	r3, [pc, #452]	; (e664 <bloomFilterAddressCheck+0x7a4>)
    e4a0:	405f      	eors	r7, r3
    e4a2:	1c3b      	adds	r3, r7, #0
    e4a4:	466f      	mov	r7, sp
    e4a6:	82bb      	strh	r3, [r7, #20]
    e4a8:	8abb      	ldrh	r3, [r7, #20]
    e4aa:	4699      	mov	r9, r3
    e4ac:	006b      	lsls	r3, r5, #1
    e4ae:	469a      	mov	sl, r3
    e4b0:	042b      	lsls	r3, r5, #16
    e4b2:	d501      	bpl.n	e4b8 <bloomFilterAddressCheck+0x5f8>
    e4b4:	f000 fc6e 	bl	ed94 <bloomFilterAddressCheck+0xed4>
    e4b8:	4653      	mov	r3, sl
    e4ba:	466d      	mov	r5, sp
    e4bc:	82ab      	strh	r3, [r5, #20]
    e4be:	8aad      	ldrh	r5, [r5, #20]
    e4c0:	006b      	lsls	r3, r5, #1
    e4c2:	4d68      	ldr	r5, [pc, #416]	; (e664 <bloomFilterAddressCheck+0x7a4>)
    e4c4:	405d      	eors	r5, r3
    e4c6:	4653      	mov	r3, sl
    e4c8:	005b      	lsls	r3, r3, #1
    e4ca:	4699      	mov	r9, r3
    e4cc:	4653      	mov	r3, sl
    e4ce:	b2ad      	uxth	r5, r5
    e4d0:	041b      	lsls	r3, r3, #16
    e4d2:	d501      	bpl.n	e4d8 <bloomFilterAddressCheck+0x618>
    e4d4:	f000 fc61 	bl	ed9a <bloomFilterAddressCheck+0xeda>
    e4d8:	464b      	mov	r3, r9
    e4da:	466d      	mov	r5, sp
    e4dc:	82ab      	strh	r3, [r5, #20]
    e4de:	8aad      	ldrh	r5, [r5, #20]
    e4e0:	006b      	lsls	r3, r5, #1
    e4e2:	4d60      	ldr	r5, [pc, #384]	; (e664 <bloomFilterAddressCheck+0x7a4>)
    e4e4:	405d      	eors	r5, r3
    e4e6:	464b      	mov	r3, r9
    e4e8:	005b      	lsls	r3, r3, #1
    e4ea:	469a      	mov	sl, r3
    e4ec:	464b      	mov	r3, r9
    e4ee:	b2ad      	uxth	r5, r5
    e4f0:	041b      	lsls	r3, r3, #16
    e4f2:	d501      	bpl.n	e4f8 <bloomFilterAddressCheck+0x638>
    e4f4:	f000 fc54 	bl	eda0 <bloomFilterAddressCheck+0xee0>
    e4f8:	4653      	mov	r3, sl
    e4fa:	466d      	mov	r5, sp
    e4fc:	82ab      	strh	r3, [r5, #20]
    e4fe:	8aad      	ldrh	r5, [r5, #20]
    e500:	006b      	lsls	r3, r5, #1
    e502:	4d58      	ldr	r5, [pc, #352]	; (e664 <bloomFilterAddressCheck+0x7a4>)
    e504:	405d      	eors	r5, r3
    e506:	4653      	mov	r3, sl
    e508:	005b      	lsls	r3, r3, #1
    e50a:	4699      	mov	r9, r3
    e50c:	4653      	mov	r3, sl
    e50e:	b2ad      	uxth	r5, r5
    e510:	041b      	lsls	r3, r3, #16
    e512:	d501      	bpl.n	e518 <bloomFilterAddressCheck+0x658>
    e514:	f000 fc47 	bl	eda6 <bloomFilterAddressCheck+0xee6>
    e518:	464b      	mov	r3, r9
    e51a:	466d      	mov	r5, sp
    e51c:	82ab      	strh	r3, [r5, #20]
    e51e:	8aad      	ldrh	r5, [r5, #20]
    e520:	006b      	lsls	r3, r5, #1
    e522:	4d50      	ldr	r5, [pc, #320]	; (e664 <bloomFilterAddressCheck+0x7a4>)
    e524:	405d      	eors	r5, r3
    e526:	464b      	mov	r3, r9
    e528:	005b      	lsls	r3, r3, #1
    e52a:	469a      	mov	sl, r3
    e52c:	464b      	mov	r3, r9
    e52e:	b2ad      	uxth	r5, r5
    e530:	041b      	lsls	r3, r3, #16
    e532:	d501      	bpl.n	e538 <bloomFilterAddressCheck+0x678>
    e534:	f000 fc3a 	bl	edac <bloomFilterAddressCheck+0xeec>
    e538:	4653      	mov	r3, sl
    e53a:	466d      	mov	r5, sp
    e53c:	82ab      	strh	r3, [r5, #20]
    e53e:	8aad      	ldrh	r5, [r5, #20]
    e540:	006b      	lsls	r3, r5, #1
    e542:	4d48      	ldr	r5, [pc, #288]	; (e664 <bloomFilterAddressCheck+0x7a4>)
    e544:	405d      	eors	r5, r3
    e546:	4653      	mov	r3, sl
    e548:	005b      	lsls	r3, r3, #1
    e54a:	4699      	mov	r9, r3
    e54c:	4653      	mov	r3, sl
    e54e:	b2ad      	uxth	r5, r5
    e550:	041b      	lsls	r3, r3, #16
    e552:	d501      	bpl.n	e558 <bloomFilterAddressCheck+0x698>
    e554:	f000 fc2d 	bl	edb2 <bloomFilterAddressCheck+0xef2>
    e558:	464b      	mov	r3, r9
    e55a:	466d      	mov	r5, sp
    e55c:	82ab      	strh	r3, [r5, #20]
    e55e:	8aad      	ldrh	r5, [r5, #20]
    e560:	79d2      	ldrb	r2, [r2, #7]
    e562:	006b      	lsls	r3, r5, #1
    e564:	4d3f      	ldr	r5, [pc, #252]	; (e664 <bloomFilterAddressCheck+0x7a4>)
    e566:	b252      	sxtb	r2, r2
    e568:	405d      	eors	r5, r3
    e56a:	0213      	lsls	r3, r2, #8
    e56c:	469a      	mov	sl, r3
    e56e:	464b      	mov	r3, r9
    e570:	b2ad      	uxth	r5, r5
    e572:	005a      	lsls	r2, r3, #1
    e574:	041b      	lsls	r3, r3, #16
    e576:	d501      	bpl.n	e57c <bloomFilterAddressCheck+0x6bc>
    e578:	f000 fc1e 	bl	edb8 <bloomFilterAddressCheck+0xef8>
    e57c:	4653      	mov	r3, sl
    e57e:	405a      	eors	r2, r3
    e580:	4b38      	ldr	r3, [pc, #224]	; (e664 <bloomFilterAddressCheck+0x7a4>)
    e582:	b212      	sxth	r2, r2
    e584:	001f      	movs	r7, r3
    e586:	b295      	uxth	r5, r2
    e588:	006d      	lsls	r5, r5, #1
    e58a:	406f      	eors	r7, r5
    e58c:	1c3b      	adds	r3, r7, #0
    e58e:	466f      	mov	r7, sp
    e590:	82bb      	strh	r3, [r7, #20]
    e592:	8abb      	ldrh	r3, [r7, #20]
    e594:	b2ad      	uxth	r5, r5
    e596:	2a00      	cmp	r2, #0
    e598:	da00      	bge.n	e59c <bloomFilterAddressCheck+0x6dc>
    e59a:	e30e      	b.n	ebba <bloomFilterAddressCheck+0xcfa>
    e59c:	1c2a      	adds	r2, r5, #0
    e59e:	466f      	mov	r7, sp
    e5a0:	b295      	uxth	r5, r2
    e5a2:	006b      	lsls	r3, r5, #1
    e5a4:	4d2f      	ldr	r5, [pc, #188]	; (e664 <bloomFilterAddressCheck+0x7a4>)
    e5a6:	405d      	eors	r5, r3
    e5a8:	0053      	lsls	r3, r2, #1
    e5aa:	82bb      	strh	r3, [r7, #20]
    e5ac:	8abb      	ldrh	r3, [r7, #20]
    e5ae:	b2ad      	uxth	r5, r5
    e5b0:	4699      	mov	r9, r3
    e5b2:	0413      	lsls	r3, r2, #16
    e5b4:	d501      	bpl.n	e5ba <bloomFilterAddressCheck+0x6fa>
    e5b6:	f000 fcb4 	bl	ef22 <bloomFilterAddressCheck+0x1062>
    e5ba:	464a      	mov	r2, r9
    e5bc:	466f      	mov	r7, sp
    e5be:	b295      	uxth	r5, r2
    e5c0:	006b      	lsls	r3, r5, #1
    e5c2:	4d28      	ldr	r5, [pc, #160]	; (e664 <bloomFilterAddressCheck+0x7a4>)
    e5c4:	405d      	eors	r5, r3
    e5c6:	0053      	lsls	r3, r2, #1
    e5c8:	82bb      	strh	r3, [r7, #20]
    e5ca:	8abb      	ldrh	r3, [r7, #20]
    e5cc:	b2ad      	uxth	r5, r5
    e5ce:	4699      	mov	r9, r3
    e5d0:	0413      	lsls	r3, r2, #16
    e5d2:	d400      	bmi.n	e5d6 <bloomFilterAddressCheck+0x716>
    e5d4:	464d      	mov	r5, r9
    e5d6:	466f      	mov	r7, sp
    e5d8:	b2aa      	uxth	r2, r5
    e5da:	0053      	lsls	r3, r2, #1
    e5dc:	4a21      	ldr	r2, [pc, #132]	; (e664 <bloomFilterAddressCheck+0x7a4>)
    e5de:	405a      	eors	r2, r3
    e5e0:	006b      	lsls	r3, r5, #1
    e5e2:	82bb      	strh	r3, [r7, #20]
    e5e4:	8abb      	ldrh	r3, [r7, #20]
    e5e6:	b292      	uxth	r2, r2
    e5e8:	4699      	mov	r9, r3
    e5ea:	042b      	lsls	r3, r5, #16
    e5ec:	d400      	bmi.n	e5f0 <bloomFilterAddressCheck+0x730>
    e5ee:	464a      	mov	r2, r9
    e5f0:	466f      	mov	r7, sp
    e5f2:	b295      	uxth	r5, r2
    e5f4:	006b      	lsls	r3, r5, #1
    e5f6:	4d1b      	ldr	r5, [pc, #108]	; (e664 <bloomFilterAddressCheck+0x7a4>)
    e5f8:	405d      	eors	r5, r3
    e5fa:	0053      	lsls	r3, r2, #1
    e5fc:	82bb      	strh	r3, [r7, #20]
    e5fe:	8abb      	ldrh	r3, [r7, #20]
    e600:	b2ad      	uxth	r5, r5
    e602:	4699      	mov	r9, r3
    e604:	0413      	lsls	r3, r2, #16
    e606:	d400      	bmi.n	e60a <bloomFilterAddressCheck+0x74a>
    e608:	464d      	mov	r5, r9
    e60a:	466f      	mov	r7, sp
    e60c:	b2aa      	uxth	r2, r5
    e60e:	0053      	lsls	r3, r2, #1
    e610:	4a14      	ldr	r2, [pc, #80]	; (e664 <bloomFilterAddressCheck+0x7a4>)
    e612:	405a      	eors	r2, r3
    e614:	006b      	lsls	r3, r5, #1
    e616:	82bb      	strh	r3, [r7, #20]
    e618:	8abb      	ldrh	r3, [r7, #20]
    e61a:	b292      	uxth	r2, r2
    e61c:	4699      	mov	r9, r3
    e61e:	042b      	lsls	r3, r5, #16
    e620:	d400      	bmi.n	e624 <bloomFilterAddressCheck+0x764>
    e622:	464a      	mov	r2, r9
    e624:	b295      	uxth	r5, r2
    e626:	006b      	lsls	r3, r5, #1
    e628:	4d0e      	ldr	r5, [pc, #56]	; (e664 <bloomFilterAddressCheck+0x7a4>)
    e62a:	405d      	eors	r5, r3
    e62c:	b2ab      	uxth	r3, r5
    e62e:	0055      	lsls	r5, r2, #1
    e630:	4699      	mov	r9, r3
    e632:	b2ad      	uxth	r5, r5
    e634:	0413      	lsls	r3, r2, #16
    e636:	d501      	bpl.n	e63c <bloomFilterAddressCheck+0x77c>
    e638:	f000 fc70 	bl	ef1c <bloomFilterAddressCheck+0x105c>
    e63c:	1c2a      	adds	r2, r5, #0
    e63e:	b295      	uxth	r5, r2
    e640:	b213      	sxth	r3, r2
    e642:	001f      	movs	r7, r3
    e644:	006b      	lsls	r3, r5, #1
    e646:	4d07      	ldr	r5, [pc, #28]	; (e664 <bloomFilterAddressCheck+0x7a4>)
    e648:	0052      	lsls	r2, r2, #1
    e64a:	405d      	eors	r5, r3
    e64c:	b2ab      	uxth	r3, r5
    e64e:	9305      	str	r3, [sp, #20]
    e650:	b293      	uxth	r3, r2
    e652:	4699      	mov	r9, r3
    e654:	4663      	mov	r3, ip
    e656:	4a04      	ldr	r2, [pc, #16]	; (e668 <bloomFilterAddressCheck+0x7a8>)
    e658:	4645      	mov	r5, r8
    e65a:	405a      	eors	r2, r3
    e65c:	466b      	mov	r3, sp
    e65e:	b292      	uxth	r2, r2
    e660:	8a1b      	ldrh	r3, [r3, #16]
    e662:	e003      	b.n	e66c <bloomFilterAddressCheck+0x7ac>
    e664:	00001021 	.word	0x00001021
    e668:	ffff8005 	.word	0xffff8005
    e66c:	2d00      	cmp	r5, #0
    e66e:	da01      	bge.n	e674 <bloomFilterAddressCheck+0x7b4>
    e670:	f000 fc51 	bl	ef16 <bloomFilterAddressCheck+0x1056>
    e674:	b29d      	uxth	r5, r3
    e676:	4ae9      	ldr	r2, [pc, #932]	; (ea1c <bloomFilterAddressCheck+0xb5c>)
    e678:	006d      	lsls	r5, r5, #1
    e67a:	406a      	eors	r2, r5
    e67c:	b212      	sxth	r2, r2
    e67e:	b295      	uxth	r5, r2
    e680:	005a      	lsls	r2, r3, #1
    e682:	b292      	uxth	r2, r2
    e684:	041b      	lsls	r3, r3, #16
    e686:	d501      	bpl.n	e68c <bloomFilterAddressCheck+0x7cc>
    e688:	f000 fc42 	bl	ef10 <bloomFilterAddressCheck+0x1050>
    e68c:	4be3      	ldr	r3, [pc, #908]	; (ea1c <bloomFilterAddressCheck+0xb5c>)
    e68e:	b295      	uxth	r5, r2
    e690:	006d      	lsls	r5, r5, #1
    e692:	405d      	eors	r5, r3
    e694:	0053      	lsls	r3, r2, #1
    e696:	b2ad      	uxth	r5, r5
    e698:	b29b      	uxth	r3, r3
    e69a:	0412      	lsls	r2, r2, #16
    e69c:	d501      	bpl.n	e6a2 <bloomFilterAddressCheck+0x7e2>
    e69e:	f000 fc34 	bl	ef0a <bloomFilterAddressCheck+0x104a>
    e6a2:	4ade      	ldr	r2, [pc, #888]	; (ea1c <bloomFilterAddressCheck+0xb5c>)
    e6a4:	b29d      	uxth	r5, r3
    e6a6:	006d      	lsls	r5, r5, #1
    e6a8:	4055      	eors	r5, r2
    e6aa:	005a      	lsls	r2, r3, #1
    e6ac:	b2ad      	uxth	r5, r5
    e6ae:	b292      	uxth	r2, r2
    e6b0:	041b      	lsls	r3, r3, #16
    e6b2:	d501      	bpl.n	e6b8 <bloomFilterAddressCheck+0x7f8>
    e6b4:	f000 fc26 	bl	ef04 <bloomFilterAddressCheck+0x1044>
    e6b8:	4bd8      	ldr	r3, [pc, #864]	; (ea1c <bloomFilterAddressCheck+0xb5c>)
    e6ba:	b295      	uxth	r5, r2
    e6bc:	006d      	lsls	r5, r5, #1
    e6be:	405d      	eors	r5, r3
    e6c0:	0053      	lsls	r3, r2, #1
    e6c2:	b2ad      	uxth	r5, r5
    e6c4:	b29b      	uxth	r3, r3
    e6c6:	0412      	lsls	r2, r2, #16
    e6c8:	d501      	bpl.n	e6ce <bloomFilterAddressCheck+0x80e>
    e6ca:	f000 fc18 	bl	eefe <bloomFilterAddressCheck+0x103e>
    e6ce:	4ad3      	ldr	r2, [pc, #844]	; (ea1c <bloomFilterAddressCheck+0xb5c>)
    e6d0:	b29d      	uxth	r5, r3
    e6d2:	006d      	lsls	r5, r5, #1
    e6d4:	4055      	eors	r5, r2
    e6d6:	005a      	lsls	r2, r3, #1
    e6d8:	b2ad      	uxth	r5, r5
    e6da:	b292      	uxth	r2, r2
    e6dc:	041b      	lsls	r3, r3, #16
    e6de:	d501      	bpl.n	e6e4 <bloomFilterAddressCheck+0x824>
    e6e0:	f000 fc0a 	bl	eef8 <bloomFilterAddressCheck+0x1038>
    e6e4:	4bcd      	ldr	r3, [pc, #820]	; (ea1c <bloomFilterAddressCheck+0xb5c>)
    e6e6:	b295      	uxth	r5, r2
    e6e8:	006d      	lsls	r5, r5, #1
    e6ea:	405d      	eors	r5, r3
    e6ec:	0053      	lsls	r3, r2, #1
    e6ee:	b2ad      	uxth	r5, r5
    e6f0:	b29b      	uxth	r3, r3
    e6f2:	0412      	lsls	r2, r2, #16
    e6f4:	d500      	bpl.n	e6f8 <bloomFilterAddressCheck+0x838>
    e6f6:	e3c1      	b.n	ee7c <bloomFilterAddressCheck+0xfbc>
    e6f8:	b29a      	uxth	r2, r3
    e6fa:	4dc8      	ldr	r5, [pc, #800]	; (ea1c <bloomFilterAddressCheck+0xb5c>)
    e6fc:	0052      	lsls	r2, r2, #1
    e6fe:	4055      	eors	r5, r2
    e700:	005a      	lsls	r2, r3, #1
    e702:	b2ad      	uxth	r5, r5
    e704:	b292      	uxth	r2, r2
    e706:	041b      	lsls	r3, r3, #16
    e708:	d500      	bpl.n	e70c <bloomFilterAddressCheck+0x84c>
    e70a:	e3b5      	b.n	ee78 <bloomFilterAddressCheck+0xfb8>
    e70c:	4054      	eors	r4, r2
    e70e:	b224      	sxth	r4, r4
    e710:	b2a2      	uxth	r2, r4
    e712:	4bc2      	ldr	r3, [pc, #776]	; (ea1c <bloomFilterAddressCheck+0xb5c>)
    e714:	0052      	lsls	r2, r2, #1
    e716:	4053      	eors	r3, r2
    e718:	b29d      	uxth	r5, r3
    e71a:	b293      	uxth	r3, r2
    e71c:	2c00      	cmp	r4, #0
    e71e:	da00      	bge.n	e722 <bloomFilterAddressCheck+0x862>
    e720:	e3a8      	b.n	ee74 <bloomFilterAddressCheck+0xfb4>
    e722:	4abe      	ldr	r2, [pc, #760]	; (ea1c <bloomFilterAddressCheck+0xb5c>)
    e724:	b29c      	uxth	r4, r3
    e726:	0064      	lsls	r4, r4, #1
    e728:	4054      	eors	r4, r2
    e72a:	005a      	lsls	r2, r3, #1
    e72c:	b2a4      	uxth	r4, r4
    e72e:	b292      	uxth	r2, r2
    e730:	041b      	lsls	r3, r3, #16
    e732:	d500      	bpl.n	e736 <bloomFilterAddressCheck+0x876>
    e734:	e39c      	b.n	ee70 <bloomFilterAddressCheck+0xfb0>
    e736:	4bb9      	ldr	r3, [pc, #740]	; (ea1c <bloomFilterAddressCheck+0xb5c>)
    e738:	b294      	uxth	r4, r2
    e73a:	0064      	lsls	r4, r4, #1
    e73c:	405c      	eors	r4, r3
    e73e:	0053      	lsls	r3, r2, #1
    e740:	b2a4      	uxth	r4, r4
    e742:	b29b      	uxth	r3, r3
    e744:	0412      	lsls	r2, r2, #16
    e746:	d500      	bpl.n	e74a <bloomFilterAddressCheck+0x88a>
    e748:	e390      	b.n	ee6c <bloomFilterAddressCheck+0xfac>
    e74a:	4ab4      	ldr	r2, [pc, #720]	; (ea1c <bloomFilterAddressCheck+0xb5c>)
    e74c:	b29c      	uxth	r4, r3
    e74e:	0064      	lsls	r4, r4, #1
    e750:	4054      	eors	r4, r2
    e752:	005a      	lsls	r2, r3, #1
    e754:	b2a4      	uxth	r4, r4
    e756:	b292      	uxth	r2, r2
    e758:	041b      	lsls	r3, r3, #16
    e75a:	d500      	bpl.n	e75e <bloomFilterAddressCheck+0x89e>
    e75c:	e384      	b.n	ee68 <bloomFilterAddressCheck+0xfa8>
    e75e:	4baf      	ldr	r3, [pc, #700]	; (ea1c <bloomFilterAddressCheck+0xb5c>)
    e760:	b294      	uxth	r4, r2
    e762:	0064      	lsls	r4, r4, #1
    e764:	405c      	eors	r4, r3
    e766:	0053      	lsls	r3, r2, #1
    e768:	b2a4      	uxth	r4, r4
    e76a:	b29b      	uxth	r3, r3
    e76c:	0412      	lsls	r2, r2, #16
    e76e:	d500      	bpl.n	e772 <bloomFilterAddressCheck+0x8b2>
    e770:	e378      	b.n	ee64 <bloomFilterAddressCheck+0xfa4>
    e772:	4aaa      	ldr	r2, [pc, #680]	; (ea1c <bloomFilterAddressCheck+0xb5c>)
    e774:	b29c      	uxth	r4, r3
    e776:	0064      	lsls	r4, r4, #1
    e778:	4054      	eors	r4, r2
    e77a:	005a      	lsls	r2, r3, #1
    e77c:	b2a4      	uxth	r4, r4
    e77e:	b292      	uxth	r2, r2
    e780:	041b      	lsls	r3, r3, #16
    e782:	d500      	bpl.n	e786 <bloomFilterAddressCheck+0x8c6>
    e784:	e36c      	b.n	ee60 <bloomFilterAddressCheck+0xfa0>
    e786:	4ba5      	ldr	r3, [pc, #660]	; (ea1c <bloomFilterAddressCheck+0xb5c>)
    e788:	b294      	uxth	r4, r2
    e78a:	0064      	lsls	r4, r4, #1
    e78c:	405c      	eors	r4, r3
    e78e:	0053      	lsls	r3, r2, #1
    e790:	b2a4      	uxth	r4, r4
    e792:	b29b      	uxth	r3, r3
    e794:	0412      	lsls	r2, r2, #16
    e796:	d500      	bpl.n	e79a <bloomFilterAddressCheck+0x8da>
    e798:	e360      	b.n	ee5c <bloomFilterAddressCheck+0xf9c>
    e79a:	b29a      	uxth	r2, r3
    e79c:	4c9f      	ldr	r4, [pc, #636]	; (ea1c <bloomFilterAddressCheck+0xb5c>)
    e79e:	0052      	lsls	r2, r2, #1
    e7a0:	4054      	eors	r4, r2
    e7a2:	005a      	lsls	r2, r3, #1
    e7a4:	b2a4      	uxth	r4, r4
    e7a6:	b292      	uxth	r2, r2
    e7a8:	041b      	lsls	r3, r3, #16
    e7aa:	d500      	bpl.n	e7ae <bloomFilterAddressCheck+0x8ee>
    e7ac:	e354      	b.n	ee58 <bloomFilterAddressCheck+0xf98>
    e7ae:	4050      	eors	r0, r2
    e7b0:	b200      	sxth	r0, r0
    e7b2:	b282      	uxth	r2, r0
    e7b4:	4b99      	ldr	r3, [pc, #612]	; (ea1c <bloomFilterAddressCheck+0xb5c>)
    e7b6:	0052      	lsls	r2, r2, #1
    e7b8:	4053      	eors	r3, r2
    e7ba:	b29c      	uxth	r4, r3
    e7bc:	b293      	uxth	r3, r2
    e7be:	2800      	cmp	r0, #0
    e7c0:	da00      	bge.n	e7c4 <bloomFilterAddressCheck+0x904>
    e7c2:	e347      	b.n	ee54 <bloomFilterAddressCheck+0xf94>
    e7c4:	4a95      	ldr	r2, [pc, #596]	; (ea1c <bloomFilterAddressCheck+0xb5c>)
    e7c6:	b298      	uxth	r0, r3
    e7c8:	0040      	lsls	r0, r0, #1
    e7ca:	4050      	eors	r0, r2
    e7cc:	005a      	lsls	r2, r3, #1
    e7ce:	b280      	uxth	r0, r0
    e7d0:	b292      	uxth	r2, r2
    e7d2:	041b      	lsls	r3, r3, #16
    e7d4:	d500      	bpl.n	e7d8 <bloomFilterAddressCheck+0x918>
    e7d6:	e33b      	b.n	ee50 <bloomFilterAddressCheck+0xf90>
    e7d8:	4b90      	ldr	r3, [pc, #576]	; (ea1c <bloomFilterAddressCheck+0xb5c>)
    e7da:	b290      	uxth	r0, r2
    e7dc:	0040      	lsls	r0, r0, #1
    e7de:	4058      	eors	r0, r3
    e7e0:	0053      	lsls	r3, r2, #1
    e7e2:	b280      	uxth	r0, r0
    e7e4:	b29b      	uxth	r3, r3
    e7e6:	0412      	lsls	r2, r2, #16
    e7e8:	d500      	bpl.n	e7ec <bloomFilterAddressCheck+0x92c>
    e7ea:	e32f      	b.n	ee4c <bloomFilterAddressCheck+0xf8c>
    e7ec:	4a8b      	ldr	r2, [pc, #556]	; (ea1c <bloomFilterAddressCheck+0xb5c>)
    e7ee:	b298      	uxth	r0, r3
    e7f0:	0040      	lsls	r0, r0, #1
    e7f2:	4050      	eors	r0, r2
    e7f4:	005a      	lsls	r2, r3, #1
    e7f6:	b280      	uxth	r0, r0
    e7f8:	b292      	uxth	r2, r2
    e7fa:	041b      	lsls	r3, r3, #16
    e7fc:	d500      	bpl.n	e800 <bloomFilterAddressCheck+0x940>
    e7fe:	e323      	b.n	ee48 <bloomFilterAddressCheck+0xf88>
    e800:	4b86      	ldr	r3, [pc, #536]	; (ea1c <bloomFilterAddressCheck+0xb5c>)
    e802:	b290      	uxth	r0, r2
    e804:	0040      	lsls	r0, r0, #1
    e806:	4058      	eors	r0, r3
    e808:	0053      	lsls	r3, r2, #1
    e80a:	b280      	uxth	r0, r0
    e80c:	b29b      	uxth	r3, r3
    e80e:	0412      	lsls	r2, r2, #16
    e810:	d500      	bpl.n	e814 <bloomFilterAddressCheck+0x954>
    e812:	e317      	b.n	ee44 <bloomFilterAddressCheck+0xf84>
    e814:	4a81      	ldr	r2, [pc, #516]	; (ea1c <bloomFilterAddressCheck+0xb5c>)
    e816:	b298      	uxth	r0, r3
    e818:	0040      	lsls	r0, r0, #1
    e81a:	4050      	eors	r0, r2
    e81c:	005a      	lsls	r2, r3, #1
    e81e:	b280      	uxth	r0, r0
    e820:	b292      	uxth	r2, r2
    e822:	041b      	lsls	r3, r3, #16
    e824:	d500      	bpl.n	e828 <bloomFilterAddressCheck+0x968>
    e826:	e30b      	b.n	ee40 <bloomFilterAddressCheck+0xf80>
    e828:	4b7c      	ldr	r3, [pc, #496]	; (ea1c <bloomFilterAddressCheck+0xb5c>)
    e82a:	b290      	uxth	r0, r2
    e82c:	0040      	lsls	r0, r0, #1
    e82e:	4058      	eors	r0, r3
    e830:	0053      	lsls	r3, r2, #1
    e832:	b280      	uxth	r0, r0
    e834:	b29b      	uxth	r3, r3
    e836:	0412      	lsls	r2, r2, #16
    e838:	d500      	bpl.n	e83c <bloomFilterAddressCheck+0x97c>
    e83a:	e2ff      	b.n	ee3c <bloomFilterAddressCheck+0xf7c>
    e83c:	b29a      	uxth	r2, r3
    e83e:	4877      	ldr	r0, [pc, #476]	; (ea1c <bloomFilterAddressCheck+0xb5c>)
    e840:	0052      	lsls	r2, r2, #1
    e842:	4050      	eors	r0, r2
    e844:	005a      	lsls	r2, r3, #1
    e846:	b280      	uxth	r0, r0
    e848:	b292      	uxth	r2, r2
    e84a:	041b      	lsls	r3, r3, #16
    e84c:	d500      	bpl.n	e850 <bloomFilterAddressCheck+0x990>
    e84e:	e2f3      	b.n	ee38 <bloomFilterAddressCheck+0xf78>
    e850:	4051      	eors	r1, r2
    e852:	b209      	sxth	r1, r1
    e854:	b28b      	uxth	r3, r1
    e856:	4a71      	ldr	r2, [pc, #452]	; (ea1c <bloomFilterAddressCheck+0xb5c>)
    e858:	005b      	lsls	r3, r3, #1
    e85a:	405a      	eors	r2, r3
    e85c:	b292      	uxth	r2, r2
    e85e:	2900      	cmp	r1, #0
    e860:	da00      	bge.n	e864 <bloomFilterAddressCheck+0x9a4>
    e862:	e2e7      	b.n	ee34 <bloomFilterAddressCheck+0xf74>
    e864:	4a6d      	ldr	r2, [pc, #436]	; (ea1c <bloomFilterAddressCheck+0xb5c>)
    e866:	b299      	uxth	r1, r3
    e868:	0049      	lsls	r1, r1, #1
    e86a:	4051      	eors	r1, r2
    e86c:	b289      	uxth	r1, r1
    e86e:	005a      	lsls	r2, r3, #1
    e870:	041b      	lsls	r3, r3, #16
    e872:	d500      	bpl.n	e876 <bloomFilterAddressCheck+0x9b6>
    e874:	e2dc      	b.n	ee30 <bloomFilterAddressCheck+0xf70>
    e876:	b291      	uxth	r1, r2
    e878:	4b68      	ldr	r3, [pc, #416]	; (ea1c <bloomFilterAddressCheck+0xb5c>)
    e87a:	0049      	lsls	r1, r1, #1
    e87c:	404b      	eors	r3, r1
    e87e:	b29b      	uxth	r3, r3
    e880:	0051      	lsls	r1, r2, #1
    e882:	0412      	lsls	r2, r2, #16
    e884:	d500      	bpl.n	e888 <bloomFilterAddressCheck+0x9c8>
    e886:	e2d1      	b.n	ee2c <bloomFilterAddressCheck+0xf6c>
    e888:	b28a      	uxth	r2, r1
    e88a:	4b64      	ldr	r3, [pc, #400]	; (ea1c <bloomFilterAddressCheck+0xb5c>)
    e88c:	0052      	lsls	r2, r2, #1
    e88e:	4053      	eors	r3, r2
    e890:	b29b      	uxth	r3, r3
    e892:	004a      	lsls	r2, r1, #1
    e894:	0409      	lsls	r1, r1, #16
    e896:	d500      	bpl.n	e89a <bloomFilterAddressCheck+0x9da>
    e898:	e2c6      	b.n	ee28 <bloomFilterAddressCheck+0xf68>
    e89a:	b291      	uxth	r1, r2
    e89c:	4b5f      	ldr	r3, [pc, #380]	; (ea1c <bloomFilterAddressCheck+0xb5c>)
    e89e:	0049      	lsls	r1, r1, #1
    e8a0:	404b      	eors	r3, r1
    e8a2:	b29b      	uxth	r3, r3
    e8a4:	0051      	lsls	r1, r2, #1
    e8a6:	0412      	lsls	r2, r2, #16
    e8a8:	d500      	bpl.n	e8ac <bloomFilterAddressCheck+0x9ec>
    e8aa:	e2bb      	b.n	ee24 <bloomFilterAddressCheck+0xf64>
    e8ac:	b28a      	uxth	r2, r1
    e8ae:	4b5b      	ldr	r3, [pc, #364]	; (ea1c <bloomFilterAddressCheck+0xb5c>)
    e8b0:	0052      	lsls	r2, r2, #1
    e8b2:	4053      	eors	r3, r2
    e8b4:	b29b      	uxth	r3, r3
    e8b6:	004a      	lsls	r2, r1, #1
    e8b8:	0409      	lsls	r1, r1, #16
    e8ba:	d500      	bpl.n	e8be <bloomFilterAddressCheck+0x9fe>
    e8bc:	e2b0      	b.n	ee20 <bloomFilterAddressCheck+0xf60>
    e8be:	b291      	uxth	r1, r2
    e8c0:	4b56      	ldr	r3, [pc, #344]	; (ea1c <bloomFilterAddressCheck+0xb5c>)
    e8c2:	0049      	lsls	r1, r1, #1
    e8c4:	404b      	eors	r3, r1
    e8c6:	b29b      	uxth	r3, r3
    e8c8:	0051      	lsls	r1, r2, #1
    e8ca:	0412      	lsls	r2, r2, #16
    e8cc:	d500      	bpl.n	e8d0 <bloomFilterAddressCheck+0xa10>
    e8ce:	e2a5      	b.n	ee1c <bloomFilterAddressCheck+0xf5c>
    e8d0:	b28a      	uxth	r2, r1
    e8d2:	4b52      	ldr	r3, [pc, #328]	; (ea1c <bloomFilterAddressCheck+0xb5c>)
    e8d4:	0052      	lsls	r2, r2, #1
    e8d6:	4053      	eors	r3, r2
    e8d8:	b29b      	uxth	r3, r3
    e8da:	004a      	lsls	r2, r1, #1
    e8dc:	0409      	lsls	r1, r1, #16
    e8de:	d500      	bpl.n	e8e2 <bloomFilterAddressCheck+0xa22>
    e8e0:	e29a      	b.n	ee18 <bloomFilterAddressCheck+0xf58>
    e8e2:	465b      	mov	r3, fp
    e8e4:	4053      	eors	r3, r2
    e8e6:	b21a      	sxth	r2, r3
    e8e8:	b293      	uxth	r3, r2
    e8ea:	494c      	ldr	r1, [pc, #304]	; (ea1c <bloomFilterAddressCheck+0xb5c>)
    e8ec:	005b      	lsls	r3, r3, #1
    e8ee:	4059      	eors	r1, r3
    e8f0:	b289      	uxth	r1, r1
    e8f2:	2a00      	cmp	r2, #0
    e8f4:	da00      	bge.n	e8f8 <bloomFilterAddressCheck+0xa38>
    e8f6:	e28d      	b.n	ee14 <bloomFilterAddressCheck+0xf54>
    e8f8:	b299      	uxth	r1, r3
    e8fa:	4a48      	ldr	r2, [pc, #288]	; (ea1c <bloomFilterAddressCheck+0xb5c>)
    e8fc:	0049      	lsls	r1, r1, #1
    e8fe:	404a      	eors	r2, r1
    e900:	b292      	uxth	r2, r2
    e902:	0059      	lsls	r1, r3, #1
    e904:	041b      	lsls	r3, r3, #16
    e906:	d500      	bpl.n	e90a <bloomFilterAddressCheck+0xa4a>
    e908:	e282      	b.n	ee10 <bloomFilterAddressCheck+0xf50>
    e90a:	b28a      	uxth	r2, r1
    e90c:	4b43      	ldr	r3, [pc, #268]	; (ea1c <bloomFilterAddressCheck+0xb5c>)
    e90e:	0052      	lsls	r2, r2, #1
    e910:	4053      	eors	r3, r2
    e912:	b29b      	uxth	r3, r3
    e914:	004a      	lsls	r2, r1, #1
    e916:	0409      	lsls	r1, r1, #16
    e918:	d500      	bpl.n	e91c <bloomFilterAddressCheck+0xa5c>
    e91a:	e277      	b.n	ee0c <bloomFilterAddressCheck+0xf4c>
    e91c:	b291      	uxth	r1, r2
    e91e:	4b3f      	ldr	r3, [pc, #252]	; (ea1c <bloomFilterAddressCheck+0xb5c>)
    e920:	0049      	lsls	r1, r1, #1
    e922:	404b      	eors	r3, r1
    e924:	b29b      	uxth	r3, r3
    e926:	0051      	lsls	r1, r2, #1
    e928:	0412      	lsls	r2, r2, #16
    e92a:	d500      	bpl.n	e92e <bloomFilterAddressCheck+0xa6e>
    e92c:	e26c      	b.n	ee08 <bloomFilterAddressCheck+0xf48>
    e92e:	b28a      	uxth	r2, r1
    e930:	4b3a      	ldr	r3, [pc, #232]	; (ea1c <bloomFilterAddressCheck+0xb5c>)
    e932:	0052      	lsls	r2, r2, #1
    e934:	4053      	eors	r3, r2
    e936:	b29b      	uxth	r3, r3
    e938:	004a      	lsls	r2, r1, #1
    e93a:	0409      	lsls	r1, r1, #16
    e93c:	d500      	bpl.n	e940 <bloomFilterAddressCheck+0xa80>
    e93e:	e261      	b.n	ee04 <bloomFilterAddressCheck+0xf44>
    e940:	b291      	uxth	r1, r2
    e942:	4b36      	ldr	r3, [pc, #216]	; (ea1c <bloomFilterAddressCheck+0xb5c>)
    e944:	0049      	lsls	r1, r1, #1
    e946:	404b      	eors	r3, r1
    e948:	b29b      	uxth	r3, r3
    e94a:	0051      	lsls	r1, r2, #1
    e94c:	0412      	lsls	r2, r2, #16
    e94e:	d500      	bpl.n	e952 <bloomFilterAddressCheck+0xa92>
    e950:	e242      	b.n	edd8 <bloomFilterAddressCheck+0xf18>
    e952:	b28a      	uxth	r2, r1
    e954:	4b31      	ldr	r3, [pc, #196]	; (ea1c <bloomFilterAddressCheck+0xb5c>)
    e956:	0052      	lsls	r2, r2, #1
    e958:	4053      	eors	r3, r2
    e95a:	b29b      	uxth	r3, r3
    e95c:	004a      	lsls	r2, r1, #1
    e95e:	0409      	lsls	r1, r1, #16
    e960:	d500      	bpl.n	e964 <bloomFilterAddressCheck+0xaa4>
    e962:	e243      	b.n	edec <bloomFilterAddressCheck+0xf2c>
    e964:	b291      	uxth	r1, r2
    e966:	4b2d      	ldr	r3, [pc, #180]	; (ea1c <bloomFilterAddressCheck+0xb5c>)
    e968:	0049      	lsls	r1, r1, #1
    e96a:	404b      	eors	r3, r1
    e96c:	b29b      	uxth	r3, r3
    e96e:	0055      	lsls	r5, r2, #1
    e970:	0412      	lsls	r2, r2, #16
    e972:	d500      	bpl.n	e976 <bloomFilterAddressCheck+0xab6>
    e974:	e244      	b.n	ee00 <bloomFilterAddressCheck+0xf40>
    e976:	9b01      	ldr	r3, [sp, #4]
    e978:	4a28      	ldr	r2, [pc, #160]	; (ea1c <bloomFilterAddressCheck+0xb5c>)
    e97a:	406b      	eors	r3, r5
    e97c:	b21d      	sxth	r5, r3
    e97e:	b2ab      	uxth	r3, r5
    e980:	005b      	lsls	r3, r3, #1
    e982:	405a      	eors	r2, r3
    e984:	b292      	uxth	r2, r2
    e986:	2d00      	cmp	r5, #0
    e988:	da00      	bge.n	e98c <bloomFilterAddressCheck+0xacc>
    e98a:	e2a7      	b.n	eedc <bloomFilterAddressCheck+0x101c>
    e98c:	b299      	uxth	r1, r3
    e98e:	4a23      	ldr	r2, [pc, #140]	; (ea1c <bloomFilterAddressCheck+0xb5c>)
    e990:	0049      	lsls	r1, r1, #1
    e992:	404a      	eors	r2, r1
    e994:	b292      	uxth	r2, r2
    e996:	0059      	lsls	r1, r3, #1
    e998:	041b      	lsls	r3, r3, #16
    e99a:	d500      	bpl.n	e99e <bloomFilterAddressCheck+0xade>
    e99c:	e29c      	b.n	eed8 <bloomFilterAddressCheck+0x1018>
    e99e:	b28a      	uxth	r2, r1
    e9a0:	4b1e      	ldr	r3, [pc, #120]	; (ea1c <bloomFilterAddressCheck+0xb5c>)
    e9a2:	0052      	lsls	r2, r2, #1
    e9a4:	4053      	eors	r3, r2
    e9a6:	b29b      	uxth	r3, r3
    e9a8:	004a      	lsls	r2, r1, #1
    e9aa:	0409      	lsls	r1, r1, #16
    e9ac:	d500      	bpl.n	e9b0 <bloomFilterAddressCheck+0xaf0>
    e9ae:	e291      	b.n	eed4 <bloomFilterAddressCheck+0x1014>
    e9b0:	b291      	uxth	r1, r2
    e9b2:	4b1a      	ldr	r3, [pc, #104]	; (ea1c <bloomFilterAddressCheck+0xb5c>)
    e9b4:	0049      	lsls	r1, r1, #1
    e9b6:	404b      	eors	r3, r1
    e9b8:	b29b      	uxth	r3, r3
    e9ba:	0051      	lsls	r1, r2, #1
    e9bc:	0412      	lsls	r2, r2, #16
    e9be:	d500      	bpl.n	e9c2 <bloomFilterAddressCheck+0xb02>
    e9c0:	e286      	b.n	eed0 <bloomFilterAddressCheck+0x1010>
    e9c2:	b28a      	uxth	r2, r1
    e9c4:	4b15      	ldr	r3, [pc, #84]	; (ea1c <bloomFilterAddressCheck+0xb5c>)
    e9c6:	0052      	lsls	r2, r2, #1
    e9c8:	4053      	eors	r3, r2
    e9ca:	b29b      	uxth	r3, r3
    e9cc:	004a      	lsls	r2, r1, #1
    e9ce:	0409      	lsls	r1, r1, #16
    e9d0:	d500      	bpl.n	e9d4 <bloomFilterAddressCheck+0xb14>
    e9d2:	e27b      	b.n	eecc <bloomFilterAddressCheck+0x100c>
    e9d4:	b291      	uxth	r1, r2
    e9d6:	4b11      	ldr	r3, [pc, #68]	; (ea1c <bloomFilterAddressCheck+0xb5c>)
    e9d8:	0049      	lsls	r1, r1, #1
    e9da:	404b      	eors	r3, r1
    e9dc:	b29b      	uxth	r3, r3
    e9de:	0051      	lsls	r1, r2, #1
    e9e0:	0412      	lsls	r2, r2, #16
    e9e2:	d500      	bpl.n	e9e6 <bloomFilterAddressCheck+0xb26>
    e9e4:	e270      	b.n	eec8 <bloomFilterAddressCheck+0x1008>
    e9e6:	b28a      	uxth	r2, r1
    e9e8:	4b0c      	ldr	r3, [pc, #48]	; (ea1c <bloomFilterAddressCheck+0xb5c>)
    e9ea:	0052      	lsls	r2, r2, #1
    e9ec:	4053      	eors	r3, r2
    e9ee:	b29b      	uxth	r3, r3
    e9f0:	004a      	lsls	r2, r1, #1
    e9f2:	0409      	lsls	r1, r1, #16
    e9f4:	d500      	bpl.n	e9f8 <bloomFilterAddressCheck+0xb38>
    e9f6:	e265      	b.n	eec4 <bloomFilterAddressCheck+0x1004>
    e9f8:	b291      	uxth	r1, r2
    e9fa:	4b08      	ldr	r3, [pc, #32]	; (ea1c <bloomFilterAddressCheck+0xb5c>)
    e9fc:	0049      	lsls	r1, r1, #1
    e9fe:	404b      	eors	r3, r1
    ea00:	b29b      	uxth	r3, r3
    ea02:	0055      	lsls	r5, r2, #1
    ea04:	0412      	lsls	r2, r2, #16
    ea06:	d500      	bpl.n	ea0a <bloomFilterAddressCheck+0xb4a>
    ea08:	e25a      	b.n	eec0 <bloomFilterAddressCheck+0x1000>
    ea0a:	9b02      	ldr	r3, [sp, #8]
    ea0c:	4a03      	ldr	r2, [pc, #12]	; (ea1c <bloomFilterAddressCheck+0xb5c>)
    ea0e:	406b      	eors	r3, r5
    ea10:	b21d      	sxth	r5, r3
    ea12:	b2ab      	uxth	r3, r5
    ea14:	005b      	lsls	r3, r3, #1
    ea16:	405a      	eors	r2, r3
    ea18:	b292      	uxth	r2, r2
    ea1a:	e001      	b.n	ea20 <bloomFilterAddressCheck+0xb60>
    ea1c:	ffff8005 	.word	0xffff8005
    ea20:	2d00      	cmp	r5, #0
    ea22:	da00      	bge.n	ea26 <bloomFilterAddressCheck+0xb66>
    ea24:	e24a      	b.n	eebc <bloomFilterAddressCheck+0xffc>
    ea26:	b299      	uxth	r1, r3
    ea28:	4ae8      	ldr	r2, [pc, #928]	; (edcc <bloomFilterAddressCheck+0xf0c>)
    ea2a:	0049      	lsls	r1, r1, #1
    ea2c:	404a      	eors	r2, r1
    ea2e:	b292      	uxth	r2, r2
    ea30:	0059      	lsls	r1, r3, #1
    ea32:	041b      	lsls	r3, r3, #16
    ea34:	d500      	bpl.n	ea38 <bloomFilterAddressCheck+0xb78>
    ea36:	e23f      	b.n	eeb8 <bloomFilterAddressCheck+0xff8>
    ea38:	b28a      	uxth	r2, r1
    ea3a:	4be4      	ldr	r3, [pc, #912]	; (edcc <bloomFilterAddressCheck+0xf0c>)
    ea3c:	0052      	lsls	r2, r2, #1
    ea3e:	4053      	eors	r3, r2
    ea40:	b29b      	uxth	r3, r3
    ea42:	004a      	lsls	r2, r1, #1
    ea44:	0409      	lsls	r1, r1, #16
    ea46:	d500      	bpl.n	ea4a <bloomFilterAddressCheck+0xb8a>
    ea48:	e234      	b.n	eeb4 <bloomFilterAddressCheck+0xff4>
    ea4a:	b291      	uxth	r1, r2
    ea4c:	4bdf      	ldr	r3, [pc, #892]	; (edcc <bloomFilterAddressCheck+0xf0c>)
    ea4e:	0049      	lsls	r1, r1, #1
    ea50:	404b      	eors	r3, r1
    ea52:	b29b      	uxth	r3, r3
    ea54:	0051      	lsls	r1, r2, #1
    ea56:	0412      	lsls	r2, r2, #16
    ea58:	d500      	bpl.n	ea5c <bloomFilterAddressCheck+0xb9c>
    ea5a:	e229      	b.n	eeb0 <bloomFilterAddressCheck+0xff0>
    ea5c:	b28a      	uxth	r2, r1
    ea5e:	4bdb      	ldr	r3, [pc, #876]	; (edcc <bloomFilterAddressCheck+0xf0c>)
    ea60:	0052      	lsls	r2, r2, #1
    ea62:	4053      	eors	r3, r2
    ea64:	b29b      	uxth	r3, r3
    ea66:	004a      	lsls	r2, r1, #1
    ea68:	0409      	lsls	r1, r1, #16
    ea6a:	d500      	bpl.n	ea6e <bloomFilterAddressCheck+0xbae>
    ea6c:	e21e      	b.n	eeac <bloomFilterAddressCheck+0xfec>
    ea6e:	b291      	uxth	r1, r2
    ea70:	4bd6      	ldr	r3, [pc, #856]	; (edcc <bloomFilterAddressCheck+0xf0c>)
    ea72:	0049      	lsls	r1, r1, #1
    ea74:	404b      	eors	r3, r1
    ea76:	b29b      	uxth	r3, r3
    ea78:	0051      	lsls	r1, r2, #1
    ea7a:	0412      	lsls	r2, r2, #16
    ea7c:	d500      	bpl.n	ea80 <bloomFilterAddressCheck+0xbc0>
    ea7e:	e1ff      	b.n	ee80 <bloomFilterAddressCheck+0xfc0>
    ea80:	b28a      	uxth	r2, r1
    ea82:	4bd2      	ldr	r3, [pc, #840]	; (edcc <bloomFilterAddressCheck+0xf0c>)
    ea84:	0052      	lsls	r2, r2, #1
    ea86:	4053      	eors	r3, r2
    ea88:	b29b      	uxth	r3, r3
    ea8a:	0048      	lsls	r0, r1, #1
    ea8c:	040a      	lsls	r2, r1, #16
    ea8e:	d500      	bpl.n	ea92 <bloomFilterAddressCheck+0xbd2>
    ea90:	e200      	b.n	ee94 <bloomFilterAddressCheck+0xfd4>
    ea92:	b282      	uxth	r2, r0
    ea94:	4bcd      	ldr	r3, [pc, #820]	; (edcc <bloomFilterAddressCheck+0xf0c>)
    ea96:	0052      	lsls	r2, r2, #1
    ea98:	4053      	eors	r3, r2
    ea9a:	b29b      	uxth	r3, r3
    ea9c:	0042      	lsls	r2, r0, #1
    ea9e:	0401      	lsls	r1, r0, #16
    eaa0:	d500      	bpl.n	eaa4 <bloomFilterAddressCheck+0xbe4>
    eaa2:	e201      	b.n	eea8 <bloomFilterAddressCheck+0xfe8>
    eaa4:	4653      	mov	r3, sl
    eaa6:	4053      	eors	r3, r2
    eaa8:	b21a      	sxth	r2, r3
    eaaa:	b291      	uxth	r1, r2
    eaac:	4bc7      	ldr	r3, [pc, #796]	; (edcc <bloomFilterAddressCheck+0xf0c>)
    eaae:	0049      	lsls	r1, r1, #1
    eab0:	404b      	eors	r3, r1
    eab2:	b298      	uxth	r0, r3
    eab4:	b28b      	uxth	r3, r1
    eab6:	2a00      	cmp	r2, #0
    eab8:	da00      	bge.n	eabc <bloomFilterAddressCheck+0xbfc>
    eaba:	e21b      	b.n	eef4 <bloomFilterAddressCheck+0x1034>
    eabc:	4ac3      	ldr	r2, [pc, #780]	; (edcc <bloomFilterAddressCheck+0xf0c>)
    eabe:	b299      	uxth	r1, r3
    eac0:	0049      	lsls	r1, r1, #1
    eac2:	4051      	eors	r1, r2
    eac4:	005a      	lsls	r2, r3, #1
    eac6:	b289      	uxth	r1, r1
    eac8:	b292      	uxth	r2, r2
    eaca:	041b      	lsls	r3, r3, #16
    eacc:	d500      	bpl.n	ead0 <bloomFilterAddressCheck+0xc10>
    eace:	e20f      	b.n	eef0 <bloomFilterAddressCheck+0x1030>
    ead0:	4bbe      	ldr	r3, [pc, #760]	; (edcc <bloomFilterAddressCheck+0xf0c>)
    ead2:	b291      	uxth	r1, r2
    ead4:	0049      	lsls	r1, r1, #1
    ead6:	4059      	eors	r1, r3
    ead8:	0053      	lsls	r3, r2, #1
    eada:	b289      	uxth	r1, r1
    eadc:	b29b      	uxth	r3, r3
    eade:	0412      	lsls	r2, r2, #16
    eae0:	d500      	bpl.n	eae4 <bloomFilterAddressCheck+0xc24>
    eae2:	e203      	b.n	eeec <bloomFilterAddressCheck+0x102c>
    eae4:	4ab9      	ldr	r2, [pc, #740]	; (edcc <bloomFilterAddressCheck+0xf0c>)
    eae6:	b299      	uxth	r1, r3
    eae8:	0049      	lsls	r1, r1, #1
    eaea:	4051      	eors	r1, r2
    eaec:	005a      	lsls	r2, r3, #1
    eaee:	b289      	uxth	r1, r1
    eaf0:	b292      	uxth	r2, r2
    eaf2:	041b      	lsls	r3, r3, #16
    eaf4:	d500      	bpl.n	eaf8 <bloomFilterAddressCheck+0xc38>
    eaf6:	e1f7      	b.n	eee8 <bloomFilterAddressCheck+0x1028>
    eaf8:	4bb4      	ldr	r3, [pc, #720]	; (edcc <bloomFilterAddressCheck+0xf0c>)
    eafa:	b291      	uxth	r1, r2
    eafc:	0049      	lsls	r1, r1, #1
    eafe:	4059      	eors	r1, r3
    eb00:	0053      	lsls	r3, r2, #1
    eb02:	b289      	uxth	r1, r1
    eb04:	b29b      	uxth	r3, r3
    eb06:	0412      	lsls	r2, r2, #16
    eb08:	d500      	bpl.n	eb0c <bloomFilterAddressCheck+0xc4c>
    eb0a:	e1eb      	b.n	eee4 <bloomFilterAddressCheck+0x1024>
    eb0c:	4aaf      	ldr	r2, [pc, #700]	; (edcc <bloomFilterAddressCheck+0xf0c>)
    eb0e:	b299      	uxth	r1, r3
    eb10:	0049      	lsls	r1, r1, #1
    eb12:	4051      	eors	r1, r2
    eb14:	005a      	lsls	r2, r3, #1
    eb16:	b289      	uxth	r1, r1
    eb18:	b292      	uxth	r2, r2
    eb1a:	041b      	lsls	r3, r3, #16
    eb1c:	d500      	bpl.n	eb20 <bloomFilterAddressCheck+0xc60>
    eb1e:	e1df      	b.n	eee0 <bloomFilterAddressCheck+0x1020>
    eb20:	b293      	uxth	r3, r2
    eb22:	4caa      	ldr	r4, [pc, #680]	; (edcc <bloomFilterAddressCheck+0xf0c>)
    eb24:	005b      	lsls	r3, r3, #1
    eb26:	405c      	eors	r4, r3
    eb28:	b2a1      	uxth	r1, r4
    eb2a:	0054      	lsls	r4, r2, #1
    eb2c:	b2a4      	uxth	r4, r4
    eb2e:	0413      	lsls	r3, r2, #16
    eb30:	d500      	bpl.n	eb34 <bloomFilterAddressCheck+0xc74>
    eb32:	e149      	b.n	edc8 <bloomFilterAddressCheck+0xf08>
    eb34:	b223      	sxth	r3, r4
    eb36:	b2a2      	uxth	r2, r4
    eb38:	469b      	mov	fp, r3
    eb3a:	4ba4      	ldr	r3, [pc, #656]	; (edcc <bloomFilterAddressCheck+0xf0c>)
    eb3c:	0052      	lsls	r2, r2, #1
    eb3e:	4053      	eors	r3, r2
    eb40:	00f5      	lsls	r5, r6, #3
    eb42:	b29b      	uxth	r3, r3
    eb44:	0064      	lsls	r4, r4, #1
    eb46:	3d01      	subs	r5, #1
    eb48:	4698      	mov	r8, r3
    eb4a:	b2a4      	uxth	r4, r4
    eb4c:	b2ed      	uxtb	r5, r5
    eb4e:	2f00      	cmp	r7, #0
    eb50:	da00      	bge.n	eb54 <bloomFilterAddressCheck+0xc94>
    eb52:	e136      	b.n	edc2 <bloomFilterAddressCheck+0xf02>
    eb54:	4648      	mov	r0, r9
    eb56:	4b9e      	ldr	r3, [pc, #632]	; (edd0 <bloomFilterAddressCheck+0xf10>)
    eb58:	b280      	uxth	r0, r0
    eb5a:	0029      	movs	r1, r5
    eb5c:	469a      	mov	sl, r3
    eb5e:	4798      	blx	r3
    eb60:	465b      	mov	r3, fp
    eb62:	4689      	mov	r9, r1
    eb64:	2b00      	cmp	r3, #0
    eb66:	da00      	bge.n	eb6a <bloomFilterAddressCheck+0xcaa>
    eb68:	e129      	b.n	edbe <bloomFilterAddressCheck+0xefe>
    eb6a:	b2a0      	uxth	r0, r4
    eb6c:	0029      	movs	r1, r5
    eb6e:	47d0      	blx	sl
    eb70:	b2cb      	uxtb	r3, r1
    eb72:	08db      	lsrs	r3, r3, #3
    eb74:	9f03      	ldr	r7, [sp, #12]
    eb76:	3301      	adds	r3, #1
    eb78:	1af3      	subs	r3, r6, r3
    eb7a:	466a      	mov	r2, sp
    eb7c:	5cf8      	ldrb	r0, [r7, r3]
    eb7e:	464b      	mov	r3, r9
    eb80:	7113      	strb	r3, [r2, #4]
    eb82:	7913      	ldrb	r3, [r2, #4]
    eb84:	2201      	movs	r2, #1
    eb86:	08db      	lsrs	r3, r3, #3
    eb88:	3301      	adds	r3, #1
    eb8a:	1af6      	subs	r6, r6, r3
    eb8c:	2407      	movs	r4, #7
    eb8e:	464b      	mov	r3, r9
    eb90:	0015      	movs	r5, r2
    eb92:	4023      	ands	r3, r4
    eb94:	409d      	lsls	r5, r3
    eb96:	5dbb      	ldrb	r3, [r7, r6]
    eb98:	421d      	tst	r5, r3
    eb9a:	d006      	beq.n	ebaa <bloomFilterAddressCheck+0xcea>
    eb9c:	4021      	ands	r1, r4
    eb9e:	408a      	lsls	r2, r1
    eba0:	4002      	ands	r2, r0
    eba2:	1e50      	subs	r0, r2, #1
    eba4:	4182      	sbcs	r2, r0
    eba6:	b2d3      	uxtb	r3, r2
    eba8:	9300      	str	r3, [sp, #0]
    ebaa:	9800      	ldr	r0, [sp, #0]
    ebac:	b007      	add	sp, #28
    ebae:	bc3c      	pop	{r2, r3, r4, r5}
    ebb0:	4690      	mov	r8, r2
    ebb2:	4699      	mov	r9, r3
    ebb4:	46a2      	mov	sl, r4
    ebb6:	46ab      	mov	fp, r5
    ebb8:	bdf0      	pop	{r4, r5, r6, r7, pc}
    ebba:	1c1a      	adds	r2, r3, #0
    ebbc:	e4ef      	b.n	e59e <bloomFilterAddressCheck+0x6de>
    ebbe:	1c08      	adds	r0, r1, #0
    ebc0:	f7ff f9a2 	bl	df08 <bloomFilterAddressCheck+0x48>
    ebc4:	1c0c      	adds	r4, r1, #0
    ebc6:	b2a0      	uxth	r0, r4
    ebc8:	4982      	ldr	r1, [pc, #520]	; (edd4 <bloomFilterAddressCheck+0xf14>)
    ebca:	0040      	lsls	r0, r0, #1
    ebcc:	4041      	eors	r1, r0
    ebce:	b289      	uxth	r1, r1
    ebd0:	0060      	lsls	r0, r4, #1
    ebd2:	0423      	lsls	r3, r4, #16
    ebd4:	d401      	bmi.n	ebda <bloomFilterAddressCheck+0xd1a>
    ebd6:	f7ff f9ac 	bl	df32 <bloomFilterAddressCheck+0x72>
    ebda:	1c08      	adds	r0, r1, #0
    ebdc:	b284      	uxth	r4, r0
    ebde:	497d      	ldr	r1, [pc, #500]	; (edd4 <bloomFilterAddressCheck+0xf14>)
    ebe0:	0064      	lsls	r4, r4, #1
    ebe2:	4061      	eors	r1, r4
    ebe4:	b289      	uxth	r1, r1
    ebe6:	0044      	lsls	r4, r0, #1
    ebe8:	0403      	lsls	r3, r0, #16
    ebea:	d401      	bmi.n	ebf0 <bloomFilterAddressCheck+0xd30>
    ebec:	f7ff f9ab 	bl	df46 <bloomFilterAddressCheck+0x86>
    ebf0:	1c0c      	adds	r4, r1, #0
    ebf2:	b2a0      	uxth	r0, r4
    ebf4:	4977      	ldr	r1, [pc, #476]	; (edd4 <bloomFilterAddressCheck+0xf14>)
    ebf6:	0040      	lsls	r0, r0, #1
    ebf8:	4041      	eors	r1, r0
    ebfa:	b289      	uxth	r1, r1
    ebfc:	0060      	lsls	r0, r4, #1
    ebfe:	0423      	lsls	r3, r4, #16
    ec00:	d401      	bmi.n	ec06 <bloomFilterAddressCheck+0xd46>
    ec02:	f7ff f9aa 	bl	df5a <bloomFilterAddressCheck+0x9a>
    ec06:	1c08      	adds	r0, r1, #0
    ec08:	b284      	uxth	r4, r0
    ec0a:	4972      	ldr	r1, [pc, #456]	; (edd4 <bloomFilterAddressCheck+0xf14>)
    ec0c:	0064      	lsls	r4, r4, #1
    ec0e:	4061      	eors	r1, r4
    ec10:	b289      	uxth	r1, r1
    ec12:	0044      	lsls	r4, r0, #1
    ec14:	0403      	lsls	r3, r0, #16
    ec16:	d401      	bmi.n	ec1c <bloomFilterAddressCheck+0xd5c>
    ec18:	f7ff f9a9 	bl	df6e <bloomFilterAddressCheck+0xae>
    ec1c:	1c0c      	adds	r4, r1, #0
    ec1e:	b2a0      	uxth	r0, r4
    ec20:	496c      	ldr	r1, [pc, #432]	; (edd4 <bloomFilterAddressCheck+0xf14>)
    ec22:	0040      	lsls	r0, r0, #1
    ec24:	4041      	eors	r1, r0
    ec26:	b289      	uxth	r1, r1
    ec28:	0060      	lsls	r0, r4, #1
    ec2a:	0423      	lsls	r3, r4, #16
    ec2c:	d401      	bmi.n	ec32 <bloomFilterAddressCheck+0xd72>
    ec2e:	f7ff f9a8 	bl	df82 <bloomFilterAddressCheck+0xc2>
    ec32:	1c08      	adds	r0, r1, #0
    ec34:	f7ff f9a5 	bl	df82 <bloomFilterAddressCheck+0xc2>
    ec38:	1c0d      	adds	r5, r1, #0
    ec3a:	f7ff f9af 	bl	df9c <bloomFilterAddressCheck+0xdc>
    ec3e:	1c01      	adds	r1, r0, #0
    ec40:	b28d      	uxth	r5, r1
    ec42:	4864      	ldr	r0, [pc, #400]	; (edd4 <bloomFilterAddressCheck+0xf14>)
    ec44:	006d      	lsls	r5, r5, #1
    ec46:	4045      	eors	r5, r0
    ec48:	b2ad      	uxth	r5, r5
    ec4a:	0048      	lsls	r0, r1, #1
    ec4c:	040b      	lsls	r3, r1, #16
    ec4e:	d401      	bmi.n	ec54 <bloomFilterAddressCheck+0xd94>
    ec50:	f7ff f9b9 	bl	dfc6 <bloomFilterAddressCheck+0x106>
    ec54:	1c28      	adds	r0, r5, #0
    ec56:	b285      	uxth	r5, r0
    ec58:	495e      	ldr	r1, [pc, #376]	; (edd4 <bloomFilterAddressCheck+0xf14>)
    ec5a:	006d      	lsls	r5, r5, #1
    ec5c:	4069      	eors	r1, r5
    ec5e:	b289      	uxth	r1, r1
    ec60:	0045      	lsls	r5, r0, #1
    ec62:	0403      	lsls	r3, r0, #16
    ec64:	d401      	bmi.n	ec6a <bloomFilterAddressCheck+0xdaa>
    ec66:	f7ff f9b8 	bl	dfda <bloomFilterAddressCheck+0x11a>
    ec6a:	1c0d      	adds	r5, r1, #0
    ec6c:	b2a8      	uxth	r0, r5
    ec6e:	4959      	ldr	r1, [pc, #356]	; (edd4 <bloomFilterAddressCheck+0xf14>)
    ec70:	0040      	lsls	r0, r0, #1
    ec72:	4041      	eors	r1, r0
    ec74:	b289      	uxth	r1, r1
    ec76:	0068      	lsls	r0, r5, #1
    ec78:	042b      	lsls	r3, r5, #16
    ec7a:	d401      	bmi.n	ec80 <bloomFilterAddressCheck+0xdc0>
    ec7c:	f7ff f9b7 	bl	dfee <bloomFilterAddressCheck+0x12e>
    ec80:	1c08      	adds	r0, r1, #0
    ec82:	b285      	uxth	r5, r0
    ec84:	4953      	ldr	r1, [pc, #332]	; (edd4 <bloomFilterAddressCheck+0xf14>)
    ec86:	006d      	lsls	r5, r5, #1
    ec88:	4069      	eors	r1, r5
    ec8a:	b289      	uxth	r1, r1
    ec8c:	0045      	lsls	r5, r0, #1
    ec8e:	0403      	lsls	r3, r0, #16
    ec90:	d401      	bmi.n	ec96 <bloomFilterAddressCheck+0xdd6>
    ec92:	f7ff f9b6 	bl	e002 <bloomFilterAddressCheck+0x142>
    ec96:	1c0d      	adds	r5, r1, #0
    ec98:	b2a8      	uxth	r0, r5
    ec9a:	494e      	ldr	r1, [pc, #312]	; (edd4 <bloomFilterAddressCheck+0xf14>)
    ec9c:	0040      	lsls	r0, r0, #1
    ec9e:	4041      	eors	r1, r0
    eca0:	b289      	uxth	r1, r1
    eca2:	0068      	lsls	r0, r5, #1
    eca4:	042b      	lsls	r3, r5, #16
    eca6:	d401      	bmi.n	ecac <bloomFilterAddressCheck+0xdec>
    eca8:	f7ff f9b5 	bl	e016 <bloomFilterAddressCheck+0x156>
    ecac:	1c08      	adds	r0, r1, #0
    ecae:	b285      	uxth	r5, r0
    ecb0:	4948      	ldr	r1, [pc, #288]	; (edd4 <bloomFilterAddressCheck+0xf14>)
    ecb2:	006d      	lsls	r5, r5, #1
    ecb4:	4069      	eors	r1, r5
    ecb6:	b289      	uxth	r1, r1
    ecb8:	0045      	lsls	r5, r0, #1
    ecba:	0403      	lsls	r3, r0, #16
    ecbc:	d401      	bmi.n	ecc2 <bloomFilterAddressCheck+0xe02>
    ecbe:	f7ff f9b4 	bl	e02a <bloomFilterAddressCheck+0x16a>
    ecc2:	1c0d      	adds	r5, r1, #0
    ecc4:	f7ff f9b1 	bl	e02a <bloomFilterAddressCheck+0x16a>
    ecc8:	4689      	mov	r9, r1
    ecca:	f7ff f9bc 	bl	e046 <bloomFilterAddressCheck+0x186>
    ecce:	4651      	mov	r1, sl
    ecd0:	f7ff f9c9 	bl	e066 <bloomFilterAddressCheck+0x1a6>
    ecd4:	464d      	mov	r5, r9
    ecd6:	f7ff f9d3 	bl	e080 <bloomFilterAddressCheck+0x1c0>
    ecda:	4689      	mov	r9, r1
    ecdc:	f7ff f9dd 	bl	e09a <bloomFilterAddressCheck+0x1da>
    ece0:	1c0d      	adds	r5, r1, #0
    ece2:	f7ff f9e9 	bl	e0b8 <bloomFilterAddressCheck+0x1f8>
    ece6:	4689      	mov	r9, r1
    ece8:	f7ff f9f3 	bl	e0d2 <bloomFilterAddressCheck+0x212>
    ecec:	1c0d      	adds	r5, r1, #0
    ecee:	f7ff f9ff 	bl	e0f0 <bloomFilterAddressCheck+0x230>
    ecf2:	468a      	mov	sl, r1
    ecf4:	f7ff fa09 	bl	e10a <bloomFilterAddressCheck+0x24a>
    ecf8:	464d      	mov	r5, r9
    ecfa:	f7ff fa19 	bl	e130 <bloomFilterAddressCheck+0x270>
    ecfe:	4655      	mov	r5, sl
    ed00:	f7ff fa26 	bl	e150 <bloomFilterAddressCheck+0x290>
    ed04:	46d1      	mov	r9, sl
    ed06:	f7ff fa36 	bl	e176 <bloomFilterAddressCheck+0x2b6>
    ed0a:	46aa      	mov	sl, r5
    ed0c:	f7ff fa43 	bl	e196 <bloomFilterAddressCheck+0x2d6>
    ed10:	46a9      	mov	r9, r5
    ed12:	f7ff fa50 	bl	e1b6 <bloomFilterAddressCheck+0x2f6>
    ed16:	46aa      	mov	sl, r5
    ed18:	f7ff fa5d 	bl	e1d6 <bloomFilterAddressCheck+0x316>
    ed1c:	46a9      	mov	r9, r5
    ed1e:	f7ff fa6a 	bl	e1f6 <bloomFilterAddressCheck+0x336>
    ed22:	46aa      	mov	sl, r5
    ed24:	f7ff fa77 	bl	e216 <bloomFilterAddressCheck+0x356>
    ed28:	464d      	mov	r5, r9
    ed2a:	f7ff fa87 	bl	e23c <bloomFilterAddressCheck+0x37c>
    ed2e:	4655      	mov	r5, sl
    ed30:	f7ff fa99 	bl	e266 <bloomFilterAddressCheck+0x3a6>
    ed34:	46d1      	mov	r9, sl
    ed36:	f7ff faa7 	bl	e288 <bloomFilterAddressCheck+0x3c8>
    ed3a:	46aa      	mov	sl, r5
    ed3c:	f7ff faba 	bl	e2b4 <bloomFilterAddressCheck+0x3f4>
    ed40:	46a9      	mov	r9, r5
    ed42:	f7ff fac7 	bl	e2d4 <bloomFilterAddressCheck+0x414>
    ed46:	46aa      	mov	sl, r5
    ed48:	f7ff fad4 	bl	e2f4 <bloomFilterAddressCheck+0x434>
    ed4c:	46a9      	mov	r9, r5
    ed4e:	f7ff fae1 	bl	e314 <bloomFilterAddressCheck+0x454>
    ed52:	46aa      	mov	sl, r5
    ed54:	f7ff faee 	bl	e334 <bloomFilterAddressCheck+0x474>
    ed58:	464d      	mov	r5, r9
    ed5a:	f7ff fafe 	bl	e35a <bloomFilterAddressCheck+0x49a>
    ed5e:	4655      	mov	r5, sl
    ed60:	f7ff fb10 	bl	e384 <bloomFilterAddressCheck+0x4c4>
    ed64:	46d1      	mov	r9, sl
    ed66:	f7ff fb1e 	bl	e3a6 <bloomFilterAddressCheck+0x4e6>
    ed6a:	46aa      	mov	sl, r5
    ed6c:	f7ff fb2b 	bl	e3c6 <bloomFilterAddressCheck+0x506>
    ed70:	46a9      	mov	r9, r5
    ed72:	f7ff fb38 	bl	e3e6 <bloomFilterAddressCheck+0x526>
    ed76:	46aa      	mov	sl, r5
    ed78:	f7ff fb45 	bl	e406 <bloomFilterAddressCheck+0x546>
    ed7c:	46a9      	mov	r9, r5
    ed7e:	f7ff fb52 	bl	e426 <bloomFilterAddressCheck+0x566>
    ed82:	46aa      	mov	sl, r5
    ed84:	f7ff fb5f 	bl	e446 <bloomFilterAddressCheck+0x586>
    ed88:	464d      	mov	r5, r9
    ed8a:	f7ff fb6f 	bl	e46c <bloomFilterAddressCheck+0x5ac>
    ed8e:	4655      	mov	r5, sl
    ed90:	f7ff fb81 	bl	e496 <bloomFilterAddressCheck+0x5d6>
    ed94:	46ca      	mov	sl, r9
    ed96:	f7ff fb8f 	bl	e4b8 <bloomFilterAddressCheck+0x5f8>
    ed9a:	46a9      	mov	r9, r5
    ed9c:	f7ff fb9c 	bl	e4d8 <bloomFilterAddressCheck+0x618>
    eda0:	46aa      	mov	sl, r5
    eda2:	f7ff fba9 	bl	e4f8 <bloomFilterAddressCheck+0x638>
    eda6:	46a9      	mov	r9, r5
    eda8:	f7ff fbb6 	bl	e518 <bloomFilterAddressCheck+0x658>
    edac:	46aa      	mov	sl, r5
    edae:	f7ff fbc3 	bl	e538 <bloomFilterAddressCheck+0x678>
    edb2:	46a9      	mov	r9, r5
    edb4:	f7ff fbd0 	bl	e558 <bloomFilterAddressCheck+0x698>
    edb8:	1c2a      	adds	r2, r5, #0
    edba:	f7ff fbdf 	bl	e57c <bloomFilterAddressCheck+0x6bc>
    edbe:	4644      	mov	r4, r8
    edc0:	e6d3      	b.n	eb6a <bloomFilterAddressCheck+0xcaa>
    edc2:	466b      	mov	r3, sp
    edc4:	8a98      	ldrh	r0, [r3, #20]
    edc6:	e6c6      	b.n	eb56 <bloomFilterAddressCheck+0xc96>
    edc8:	1c0c      	adds	r4, r1, #0
    edca:	e6b3      	b.n	eb34 <bloomFilterAddressCheck+0xc74>
    edcc:	ffff8005 	.word	0xffff8005
    edd0:	00012749 	.word	0x00012749
    edd4:	00001021 	.word	0x00001021
    edd8:	1c19      	adds	r1, r3, #0
    edda:	b28a      	uxth	r2, r1
    eddc:	4b52      	ldr	r3, [pc, #328]	; (ef28 <bloomFilterAddressCheck+0x1068>)
    edde:	0052      	lsls	r2, r2, #1
    ede0:	4053      	eors	r3, r2
    ede2:	b29b      	uxth	r3, r3
    ede4:	004a      	lsls	r2, r1, #1
    ede6:	0409      	lsls	r1, r1, #16
    ede8:	d400      	bmi.n	edec <bloomFilterAddressCheck+0xf2c>
    edea:	e5bb      	b.n	e964 <bloomFilterAddressCheck+0xaa4>
    edec:	1c1a      	adds	r2, r3, #0
    edee:	b291      	uxth	r1, r2
    edf0:	4b4d      	ldr	r3, [pc, #308]	; (ef28 <bloomFilterAddressCheck+0x1068>)
    edf2:	0049      	lsls	r1, r1, #1
    edf4:	404b      	eors	r3, r1
    edf6:	b29b      	uxth	r3, r3
    edf8:	0055      	lsls	r5, r2, #1
    edfa:	0412      	lsls	r2, r2, #16
    edfc:	d400      	bmi.n	ee00 <bloomFilterAddressCheck+0xf40>
    edfe:	e5ba      	b.n	e976 <bloomFilterAddressCheck+0xab6>
    ee00:	1c1d      	adds	r5, r3, #0
    ee02:	e5b8      	b.n	e976 <bloomFilterAddressCheck+0xab6>
    ee04:	1c1a      	adds	r2, r3, #0
    ee06:	e59b      	b.n	e940 <bloomFilterAddressCheck+0xa80>
    ee08:	1c19      	adds	r1, r3, #0
    ee0a:	e590      	b.n	e92e <bloomFilterAddressCheck+0xa6e>
    ee0c:	1c1a      	adds	r2, r3, #0
    ee0e:	e585      	b.n	e91c <bloomFilterAddressCheck+0xa5c>
    ee10:	1c11      	adds	r1, r2, #0
    ee12:	e57a      	b.n	e90a <bloomFilterAddressCheck+0xa4a>
    ee14:	1c0b      	adds	r3, r1, #0
    ee16:	e56f      	b.n	e8f8 <bloomFilterAddressCheck+0xa38>
    ee18:	1c1a      	adds	r2, r3, #0
    ee1a:	e562      	b.n	e8e2 <bloomFilterAddressCheck+0xa22>
    ee1c:	1c19      	adds	r1, r3, #0
    ee1e:	e557      	b.n	e8d0 <bloomFilterAddressCheck+0xa10>
    ee20:	1c1a      	adds	r2, r3, #0
    ee22:	e54c      	b.n	e8be <bloomFilterAddressCheck+0x9fe>
    ee24:	1c19      	adds	r1, r3, #0
    ee26:	e541      	b.n	e8ac <bloomFilterAddressCheck+0x9ec>
    ee28:	1c1a      	adds	r2, r3, #0
    ee2a:	e536      	b.n	e89a <bloomFilterAddressCheck+0x9da>
    ee2c:	1c19      	adds	r1, r3, #0
    ee2e:	e52b      	b.n	e888 <bloomFilterAddressCheck+0x9c8>
    ee30:	1c0a      	adds	r2, r1, #0
    ee32:	e520      	b.n	e876 <bloomFilterAddressCheck+0x9b6>
    ee34:	1c13      	adds	r3, r2, #0
    ee36:	e515      	b.n	e864 <bloomFilterAddressCheck+0x9a4>
    ee38:	1c02      	adds	r2, r0, #0
    ee3a:	e509      	b.n	e850 <bloomFilterAddressCheck+0x990>
    ee3c:	1c03      	adds	r3, r0, #0
    ee3e:	e4fd      	b.n	e83c <bloomFilterAddressCheck+0x97c>
    ee40:	1c02      	adds	r2, r0, #0
    ee42:	e4f1      	b.n	e828 <bloomFilterAddressCheck+0x968>
    ee44:	1c03      	adds	r3, r0, #0
    ee46:	e4e5      	b.n	e814 <bloomFilterAddressCheck+0x954>
    ee48:	1c02      	adds	r2, r0, #0
    ee4a:	e4d9      	b.n	e800 <bloomFilterAddressCheck+0x940>
    ee4c:	1c03      	adds	r3, r0, #0
    ee4e:	e4cd      	b.n	e7ec <bloomFilterAddressCheck+0x92c>
    ee50:	1c02      	adds	r2, r0, #0
    ee52:	e4c1      	b.n	e7d8 <bloomFilterAddressCheck+0x918>
    ee54:	1c23      	adds	r3, r4, #0
    ee56:	e4b5      	b.n	e7c4 <bloomFilterAddressCheck+0x904>
    ee58:	1c22      	adds	r2, r4, #0
    ee5a:	e4a8      	b.n	e7ae <bloomFilterAddressCheck+0x8ee>
    ee5c:	1c23      	adds	r3, r4, #0
    ee5e:	e49c      	b.n	e79a <bloomFilterAddressCheck+0x8da>
    ee60:	1c22      	adds	r2, r4, #0
    ee62:	e490      	b.n	e786 <bloomFilterAddressCheck+0x8c6>
    ee64:	1c23      	adds	r3, r4, #0
    ee66:	e484      	b.n	e772 <bloomFilterAddressCheck+0x8b2>
    ee68:	1c22      	adds	r2, r4, #0
    ee6a:	e478      	b.n	e75e <bloomFilterAddressCheck+0x89e>
    ee6c:	1c23      	adds	r3, r4, #0
    ee6e:	e46c      	b.n	e74a <bloomFilterAddressCheck+0x88a>
    ee70:	1c22      	adds	r2, r4, #0
    ee72:	e460      	b.n	e736 <bloomFilterAddressCheck+0x876>
    ee74:	1c2b      	adds	r3, r5, #0
    ee76:	e454      	b.n	e722 <bloomFilterAddressCheck+0x862>
    ee78:	1c2a      	adds	r2, r5, #0
    ee7a:	e447      	b.n	e70c <bloomFilterAddressCheck+0x84c>
    ee7c:	1c2b      	adds	r3, r5, #0
    ee7e:	e43b      	b.n	e6f8 <bloomFilterAddressCheck+0x838>
    ee80:	1c19      	adds	r1, r3, #0
    ee82:	b28a      	uxth	r2, r1
    ee84:	4b28      	ldr	r3, [pc, #160]	; (ef28 <bloomFilterAddressCheck+0x1068>)
    ee86:	0052      	lsls	r2, r2, #1
    ee88:	4053      	eors	r3, r2
    ee8a:	b29b      	uxth	r3, r3
    ee8c:	0048      	lsls	r0, r1, #1
    ee8e:	040a      	lsls	r2, r1, #16
    ee90:	d400      	bmi.n	ee94 <bloomFilterAddressCheck+0xfd4>
    ee92:	e5fe      	b.n	ea92 <bloomFilterAddressCheck+0xbd2>
    ee94:	1c18      	adds	r0, r3, #0
    ee96:	b282      	uxth	r2, r0
    ee98:	4b23      	ldr	r3, [pc, #140]	; (ef28 <bloomFilterAddressCheck+0x1068>)
    ee9a:	0052      	lsls	r2, r2, #1
    ee9c:	4053      	eors	r3, r2
    ee9e:	b29b      	uxth	r3, r3
    eea0:	0042      	lsls	r2, r0, #1
    eea2:	0401      	lsls	r1, r0, #16
    eea4:	d400      	bmi.n	eea8 <bloomFilterAddressCheck+0xfe8>
    eea6:	e5fd      	b.n	eaa4 <bloomFilterAddressCheck+0xbe4>
    eea8:	1c1a      	adds	r2, r3, #0
    eeaa:	e5fb      	b.n	eaa4 <bloomFilterAddressCheck+0xbe4>
    eeac:	1c1a      	adds	r2, r3, #0
    eeae:	e5de      	b.n	ea6e <bloomFilterAddressCheck+0xbae>
    eeb0:	1c19      	adds	r1, r3, #0
    eeb2:	e5d3      	b.n	ea5c <bloomFilterAddressCheck+0xb9c>
    eeb4:	1c1a      	adds	r2, r3, #0
    eeb6:	e5c8      	b.n	ea4a <bloomFilterAddressCheck+0xb8a>
    eeb8:	1c11      	adds	r1, r2, #0
    eeba:	e5bd      	b.n	ea38 <bloomFilterAddressCheck+0xb78>
    eebc:	1c13      	adds	r3, r2, #0
    eebe:	e5b2      	b.n	ea26 <bloomFilterAddressCheck+0xb66>
    eec0:	1c1d      	adds	r5, r3, #0
    eec2:	e5a2      	b.n	ea0a <bloomFilterAddressCheck+0xb4a>
    eec4:	1c1a      	adds	r2, r3, #0
    eec6:	e597      	b.n	e9f8 <bloomFilterAddressCheck+0xb38>
    eec8:	1c19      	adds	r1, r3, #0
    eeca:	e58c      	b.n	e9e6 <bloomFilterAddressCheck+0xb26>
    eecc:	1c1a      	adds	r2, r3, #0
    eece:	e581      	b.n	e9d4 <bloomFilterAddressCheck+0xb14>
    eed0:	1c19      	adds	r1, r3, #0
    eed2:	e576      	b.n	e9c2 <bloomFilterAddressCheck+0xb02>
    eed4:	1c1a      	adds	r2, r3, #0
    eed6:	e56b      	b.n	e9b0 <bloomFilterAddressCheck+0xaf0>
    eed8:	1c11      	adds	r1, r2, #0
    eeda:	e560      	b.n	e99e <bloomFilterAddressCheck+0xade>
    eedc:	1c13      	adds	r3, r2, #0
    eede:	e555      	b.n	e98c <bloomFilterAddressCheck+0xacc>
    eee0:	1c0a      	adds	r2, r1, #0
    eee2:	e61d      	b.n	eb20 <bloomFilterAddressCheck+0xc60>
    eee4:	1c0b      	adds	r3, r1, #0
    eee6:	e611      	b.n	eb0c <bloomFilterAddressCheck+0xc4c>
    eee8:	1c0a      	adds	r2, r1, #0
    eeea:	e605      	b.n	eaf8 <bloomFilterAddressCheck+0xc38>
    eeec:	1c0b      	adds	r3, r1, #0
    eeee:	e5f9      	b.n	eae4 <bloomFilterAddressCheck+0xc24>
    eef0:	1c0a      	adds	r2, r1, #0
    eef2:	e5ed      	b.n	ead0 <bloomFilterAddressCheck+0xc10>
    eef4:	1c03      	adds	r3, r0, #0
    eef6:	e5e1      	b.n	eabc <bloomFilterAddressCheck+0xbfc>
    eef8:	1c2a      	adds	r2, r5, #0
    eefa:	f7ff fbf3 	bl	e6e4 <bloomFilterAddressCheck+0x824>
    eefe:	1c2b      	adds	r3, r5, #0
    ef00:	f7ff fbe5 	bl	e6ce <bloomFilterAddressCheck+0x80e>
    ef04:	1c2a      	adds	r2, r5, #0
    ef06:	f7ff fbd7 	bl	e6b8 <bloomFilterAddressCheck+0x7f8>
    ef0a:	1c2b      	adds	r3, r5, #0
    ef0c:	f7ff fbc9 	bl	e6a2 <bloomFilterAddressCheck+0x7e2>
    ef10:	1c2a      	adds	r2, r5, #0
    ef12:	f7ff fbbb 	bl	e68c <bloomFilterAddressCheck+0x7cc>
    ef16:	1c13      	adds	r3, r2, #0
    ef18:	f7ff fbac 	bl	e674 <bloomFilterAddressCheck+0x7b4>
    ef1c:	464a      	mov	r2, r9
    ef1e:	f7ff fb8e 	bl	e63e <bloomFilterAddressCheck+0x77e>
    ef22:	1c2a      	adds	r2, r5, #0
    ef24:	f7ff fb4a 	bl	e5bc <bloomFilterAddressCheck+0x6fc>
    ef28:	ffff8005 	.word	0xffff8005

0000ef2c <handleCommissiongMessage>:
    ef2c:	b510      	push	{r4, lr}
    ef2e:	780b      	ldrb	r3, [r1, #0]
    ef30:	2b21      	cmp	r3, #33	; 0x21
    ef32:	d105      	bne.n	ef40 <handleCommissiongMessage+0x14>
    ef34:	88c3      	ldrh	r3, [r0, #6]
    ef36:	2b00      	cmp	r3, #0
    ef38:	d102      	bne.n	ef40 <handleCommissiongMessage+0x14>
    ef3a:	784b      	ldrb	r3, [r1, #1]
    ef3c:	2b08      	cmp	r3, #8
    ef3e:	d000      	beq.n	ef42 <handleCommissiongMessage+0x16>
    ef40:	bd10      	pop	{r4, pc}
    ef42:	3102      	adds	r1, #2
    ef44:	2208      	movs	r2, #8
    ef46:	4b03      	ldr	r3, [pc, #12]	; (ef54 <handleCommissiongMessage+0x28>)
    ef48:	4803      	ldr	r0, [pc, #12]	; (ef58 <handleCommissiongMessage+0x2c>)
    ef4a:	4798      	blx	r3
    ef4c:	4b03      	ldr	r3, [pc, #12]	; (ef5c <handleCommissiongMessage+0x30>)
    ef4e:	2004      	movs	r0, #4
    ef50:	4798      	blx	r3
    ef52:	e7f5      	b.n	ef40 <handleCommissiongMessage+0x14>
    ef54:	00014cdf 	.word	0x00014cdf
    ef58:	200028f0 	.word	0x200028f0
    ef5c:	0000a5b5 	.word	0x0000a5b5

0000ef60 <nwkAckConfCb>:
    ef60:	b510      	push	{r4, lr}
    ef62:	0010      	movs	r0, r2
    ef64:	4b01      	ldr	r3, [pc, #4]	; (ef6c <nwkAckConfCb+0xc>)
    ef66:	4798      	blx	r3
    ef68:	bd10      	pop	{r4, pc}
    ef6a:	46c0      	nop			; (mov r8, r8)
    ef6c:	0000bccd 	.word	0x0000bccd

0000ef70 <channelUpdateTimerExpired>:
    ef70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    ef72:	4e1f      	ldr	r6, [pc, #124]	; (eff0 <channelUpdateTimerExpired+0x80>)
    ef74:	6833      	ldr	r3, [r6, #0]
    ef76:	7e9a      	ldrb	r2, [r3, #26]
    ef78:	2a00      	cmp	r2, #0
    ef7a:	d012      	beq.n	efa2 <channelUpdateTimerExpired+0x32>
    ef7c:	2400      	movs	r4, #0
    ef7e:	4f1d      	ldr	r7, [pc, #116]	; (eff4 <channelUpdateTimerExpired+0x84>)
    ef80:	6818      	ldr	r0, [r3, #0]
    ef82:	0125      	lsls	r5, r4, #4
    ef84:	1940      	adds	r0, r0, r5
    ef86:	47b8      	blx	r7
    ef88:	6833      	ldr	r3, [r6, #0]
    ef8a:	2800      	cmp	r0, #0
    ef8c:	d004      	beq.n	ef98 <channelUpdateTimerExpired+0x28>
    ef8e:	681a      	ldr	r2, [r3, #0]
    ef90:	4694      	mov	ip, r2
    ef92:	8dda      	ldrh	r2, [r3, #46]	; 0x2e
    ef94:	4465      	add	r5, ip
    ef96:	60aa      	str	r2, [r5, #8]
    ef98:	3401      	adds	r4, #1
    ef9a:	7e9a      	ldrb	r2, [r3, #26]
    ef9c:	b2e4      	uxtb	r4, r4
    ef9e:	42a2      	cmp	r2, r4
    efa0:	d8ee      	bhi.n	ef80 <channelUpdateTimerExpired+0x10>
    efa2:	7eda      	ldrb	r2, [r3, #27]
    efa4:	2a01      	cmp	r2, #1
    efa6:	d914      	bls.n	efd2 <channelUpdateTimerExpired+0x62>
    efa8:	2401      	movs	r4, #1
    efaa:	4f12      	ldr	r7, [pc, #72]	; (eff4 <channelUpdateTimerExpired+0x84>)
    efac:	00a5      	lsls	r5, r4, #2
    efae:	6858      	ldr	r0, [r3, #4]
    efb0:	192d      	adds	r5, r5, r4
    efb2:	00ad      	lsls	r5, r5, #2
    efb4:	1940      	adds	r0, r0, r5
    efb6:	47b8      	blx	r7
    efb8:	6833      	ldr	r3, [r6, #0]
    efba:	2800      	cmp	r0, #0
    efbc:	d004      	beq.n	efc8 <channelUpdateTimerExpired+0x58>
    efbe:	685a      	ldr	r2, [r3, #4]
    efc0:	4694      	mov	ip, r2
    efc2:	4465      	add	r5, ip
    efc4:	68aa      	ldr	r2, [r5, #8]
    efc6:	60ea      	str	r2, [r5, #12]
    efc8:	3401      	adds	r4, #1
    efca:	7eda      	ldrb	r2, [r3, #27]
    efcc:	b2e4      	uxtb	r4, r4
    efce:	42a2      	cmp	r2, r4
    efd0:	d8ec      	bhi.n	efac <channelUpdateTimerExpired+0x3c>
    efd2:	4c09      	ldr	r4, [pc, #36]	; (eff8 <channelUpdateTimerExpired+0x88>)
    efd4:	7823      	ldrb	r3, [r4, #0]
    efd6:	2bff      	cmp	r3, #255	; 0xff
    efd8:	d008      	beq.n	efec <channelUpdateTimerExpired+0x7c>
    efda:	4b08      	ldr	r3, [pc, #32]	; (effc <channelUpdateTimerExpired+0x8c>)
    efdc:	0021      	movs	r1, r4
    efde:	2000      	movs	r0, #0
    efe0:	4798      	blx	r3
    efe2:	23ff      	movs	r3, #255	; 0xff
    efe4:	2005      	movs	r0, #5
    efe6:	7023      	strb	r3, [r4, #0]
    efe8:	4b05      	ldr	r3, [pc, #20]	; (f000 <channelUpdateTimerExpired+0x90>)
    efea:	4798      	blx	r3
    efec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    efee:	46c0      	nop			; (mov r8, r8)
    eff0:	2000285c 	.word	0x2000285c
    eff4:	00011809 	.word	0x00011809
    eff8:	2000008f 	.word	0x2000008f
    effc:	0000d93d 	.word	0x0000d93d
    f000:	0000a5b5 	.word	0x0000a5b5

0000f004 <memFreeConfcb>:
    f004:	b510      	push	{r4, lr}
    f006:	0010      	movs	r0, r2
    f008:	4b01      	ldr	r3, [pc, #4]	; (f010 <memFreeConfcb+0xc>)
    f00a:	4798      	blx	r3
    f00c:	bd10      	pop	{r4, pc}
    f00e:	46c0      	nop			; (mov r8, r8)
    f010:	0000bccd 	.word	0x0000bccd

0000f014 <MiApp_SubscribeDataIndicationCallback>:
    f014:	2800      	cmp	r0, #0
    f016:	d003      	beq.n	f020 <MiApp_SubscribeDataIndicationCallback+0xc>
    f018:	4b02      	ldr	r3, [pc, #8]	; (f024 <MiApp_SubscribeDataIndicationCallback+0x10>)
    f01a:	6018      	str	r0, [r3, #0]
    f01c:	2001      	movs	r0, #1
    f01e:	4770      	bx	lr
    f020:	2000      	movs	r0, #0
    f022:	e7fc      	b.n	f01e <MiApp_SubscribeDataIndicationCallback+0xa>
    f024:	20001d04 	.word	0x20001d04

0000f028 <prepareGenericHeader>:
    f028:	b510      	push	{r4, lr}
    f02a:	28ff      	cmp	r0, #255	; 0xff
    f02c:	d105      	bne.n	f03a <prepareGenericHeader+0x12>
    f02e:	480f      	ldr	r0, [pc, #60]	; (f06c <prepareGenericHeader+0x44>)
    f030:	6804      	ldr	r4, [r0, #0]
    f032:	2033      	movs	r0, #51	; 0x33
    f034:	5c20      	ldrb	r0, [r4, r0]
    f036:	3001      	adds	r0, #1
    f038:	b2c0      	uxtb	r0, r0
    f03a:	2403      	movs	r4, #3
    f03c:	7018      	strb	r0, [r3, #0]
    f03e:	7858      	ldrb	r0, [r3, #1]
    f040:	80d9      	strh	r1, [r3, #6]
    f042:	43a0      	bics	r0, r4
    f044:	2401      	movs	r4, #1
    f046:	4304      	orrs	r4, r0
    f048:	20f7      	movs	r0, #247	; 0xf7
    f04a:	4020      	ands	r0, r4
    f04c:	2404      	movs	r4, #4
    f04e:	4320      	orrs	r0, r4
    f050:	2407      	movs	r4, #7
    f052:	4907      	ldr	r1, [pc, #28]	; (f070 <prepareGenericHeader+0x48>)
    f054:	4020      	ands	r0, r4
    f056:	7058      	strb	r0, [r3, #1]
    f058:	809a      	strh	r2, [r3, #4]
    f05a:	4806      	ldr	r0, [pc, #24]	; (f074 <prepareGenericHeader+0x4c>)
    f05c:	780a      	ldrb	r2, [r1, #0]
    f05e:	8800      	ldrh	r0, [r0, #0]
    f060:	3201      	adds	r2, #1
    f062:	b2d2      	uxtb	r2, r2
    f064:	8058      	strh	r0, [r3, #2]
    f066:	700a      	strb	r2, [r1, #0]
    f068:	721a      	strb	r2, [r3, #8]
    f06a:	bd10      	pop	{r4, pc}
    f06c:	2000285c 	.word	0x2000285c
    f070:	20002890 	.word	0x20002890
    f074:	200028a8 	.word	0x200028a8

0000f078 <generalFrameConstruct>:
    f078:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    f07a:	7802      	ldrb	r2, [r0, #0]
    f07c:	0003      	movs	r3, r0
    f07e:	700a      	strb	r2, [r1, #0]
    f080:	7842      	ldrb	r2, [r0, #1]
    f082:	000c      	movs	r4, r1
    f084:	704a      	strb	r2, [r1, #1]
    f086:	7a02      	ldrb	r2, [r0, #8]
    f088:	708a      	strb	r2, [r1, #2]
    f08a:	7842      	ldrb	r2, [r0, #1]
    f08c:	0691      	lsls	r1, r2, #26
    f08e:	d42b      	bmi.n	f0e8 <generalFrameConstruct+0x70>
    f090:	8842      	ldrh	r2, [r0, #2]
    f092:	2516      	movs	r5, #22
    f094:	70e2      	strb	r2, [r4, #3]
    f096:	8842      	ldrh	r2, [r0, #2]
    f098:	260e      	movs	r6, #14
    f09a:	0a12      	lsrs	r2, r2, #8
    f09c:	7122      	strb	r2, [r4, #4]
    f09e:	8882      	ldrh	r2, [r0, #4]
    f0a0:	210a      	movs	r1, #10
    f0a2:	7162      	strb	r2, [r4, #5]
    f0a4:	8882      	ldrh	r2, [r0, #4]
    f0a6:	2709      	movs	r7, #9
    f0a8:	0a12      	lsrs	r2, r2, #8
    f0aa:	71a2      	strb	r2, [r4, #6]
    f0ac:	88c2      	ldrh	r2, [r0, #6]
    f0ae:	71e2      	strb	r2, [r4, #7]
    f0b0:	88c2      	ldrh	r2, [r0, #6]
    f0b2:	0a12      	lsrs	r2, r2, #8
    f0b4:	7222      	strb	r2, [r4, #8]
    f0b6:	7842      	ldrb	r2, [r0, #1]
    f0b8:	2009      	movs	r0, #9
    f0ba:	0752      	lsls	r2, r2, #29
    f0bc:	d513      	bpl.n	f0e6 <generalFrameConstruct+0x6e>
    f0be:	4a0d      	ldr	r2, [pc, #52]	; (f0f4 <generalFrameConstruct+0x7c>)
    f0c0:	6810      	ldr	r0, [r2, #0]
    f0c2:	2220      	movs	r2, #32
    f0c4:	5c82      	ldrb	r2, [r0, r2]
    f0c6:	480c      	ldr	r0, [pc, #48]	; (f0f8 <generalFrameConstruct+0x80>)
    f0c8:	741a      	strb	r2, [r3, #16]
    f0ca:	6800      	ldr	r0, [r0, #0]
    f0cc:	3314      	adds	r3, #20
    f0ce:	6018      	str	r0, [r3, #0]
    f0d0:	55e2      	strb	r2, [r4, r7]
    f0d2:	1860      	adds	r0, r4, r1
    f0d4:	2204      	movs	r2, #4
    f0d6:	0019      	movs	r1, r3
    f0d8:	4f08      	ldr	r7, [pc, #32]	; (f0fc <generalFrameConstruct+0x84>)
    f0da:	47b8      	blx	r7
    f0dc:	19a0      	adds	r0, r4, r6
    f0de:	2208      	movs	r2, #8
    f0e0:	4907      	ldr	r1, [pc, #28]	; (f100 <generalFrameConstruct+0x88>)
    f0e2:	47b8      	blx	r7
    f0e4:	0028      	movs	r0, r5
    f0e6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    f0e8:	2510      	movs	r5, #16
    f0ea:	2608      	movs	r6, #8
    f0ec:	2104      	movs	r1, #4
    f0ee:	2703      	movs	r7, #3
    f0f0:	2003      	movs	r0, #3
    f0f2:	e7e2      	b.n	f0ba <generalFrameConstruct+0x42>
    f0f4:	20002860 	.word	0x20002860
    f0f8:	20002914 	.word	0x20002914
    f0fc:	00014cdf 	.word	0x00014cdf
    f100:	20000094 	.word	0x20000094

0000f104 <frameTransmit>:
    f104:	b5f0      	push	{r4, r5, r6, r7, lr}
    f106:	4657      	mov	r7, sl
    f108:	464e      	mov	r6, r9
    f10a:	46de      	mov	lr, fp
    f10c:	4645      	mov	r5, r8
    f10e:	b5e0      	push	{r5, r6, r7, lr}
    f110:	b085      	sub	sp, #20
    f112:	4699      	mov	r9, r3
    f114:	ab0e      	add	r3, sp, #56	; 0x38
    f116:	781e      	ldrb	r6, [r3, #0]
    f118:	ab10      	add	r3, sp, #64	; 0x40
    f11a:	781b      	ldrb	r3, [r3, #0]
    f11c:	0007      	movs	r7, r0
    f11e:	469a      	mov	sl, r3
    f120:	2028      	movs	r0, #40	; 0x28
    f122:	4b43      	ldr	r3, [pc, #268]	; (f230 <frameTransmit+0x12c>)
    f124:	4688      	mov	r8, r1
    f126:	9203      	str	r2, [sp, #12]
    f128:	4798      	blx	r3
    f12a:	1e04      	subs	r4, r0, #0
    f12c:	d100      	bne.n	f130 <frameTransmit+0x2c>
    f12e:	e07d      	b.n	f22c <frameTransmit+0x128>
    f130:	2300      	movs	r3, #0
    f132:	7603      	strb	r3, [r0, #24]
    f134:	787b      	ldrb	r3, [r7, #1]
    f136:	075b      	lsls	r3, r3, #29
    f138:	d457      	bmi.n	f1ea <frameTransmit+0xe6>
    f13a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    f13c:	781a      	ldrb	r2, [r3, #0]
    f13e:	785b      	ldrb	r3, [r3, #1]
    f140:	2e02      	cmp	r6, #2
    f142:	d067      	beq.n	f214 <frameTransmit+0x110>
    f144:	2101      	movs	r1, #1
    f146:	2200      	movs	r2, #0
    f148:	2020      	movs	r0, #32
    f14a:	7e23      	ldrb	r3, [r4, #24]
    f14c:	0149      	lsls	r1, r1, #5
    f14e:	4383      	bics	r3, r0
    f150:	430b      	orrs	r3, r1
    f152:	2104      	movs	r1, #4
    f154:	0092      	lsls	r2, r2, #2
    f156:	438b      	bics	r3, r1
    f158:	4313      	orrs	r3, r2
    f15a:	2208      	movs	r2, #8
    f15c:	4393      	bics	r3, r2
    f15e:	7623      	strb	r3, [r4, #24]
    f160:	4b34      	ldr	r3, [pc, #208]	; (f234 <frameTransmit+0x130>)
    f162:	881a      	ldrh	r2, [r3, #0]
    f164:	4b34      	ldr	r3, [pc, #208]	; (f238 <frameTransmit+0x134>)
    f166:	429a      	cmp	r2, r3
    f168:	d05e      	beq.n	f228 <frameTransmit+0x124>
    f16a:	4b34      	ldr	r3, [pc, #208]	; (f23c <frameTransmit+0x138>)
    f16c:	3903      	subs	r1, #3
    f16e:	781a      	ldrb	r2, [r3, #0]
    f170:	2300      	movs	r3, #0
    f172:	3a06      	subs	r2, #6
    f174:	b2d2      	uxtb	r2, r2
    f176:	4291      	cmp	r1, r2
    f178:	415b      	adcs	r3, r3
    f17a:	b2db      	uxtb	r3, r3
    f17c:	2221      	movs	r2, #33	; 0x21
    f17e:	54a3      	strb	r3, [r4, r2]
    f180:	1eb3      	subs	r3, r6, #2
    f182:	425a      	negs	r2, r3
    f184:	4153      	adcs	r3, r2
    f186:	2220      	movs	r2, #32
    f188:	2101      	movs	r1, #1
    f18a:	54a3      	strb	r3, [r4, r2]
    f18c:	7e23      	ldrb	r3, [r4, #24]
    f18e:	089a      	lsrs	r2, r3, #2
    f190:	4051      	eors	r1, r2
    f192:	2201      	movs	r2, #1
    f194:	400a      	ands	r2, r1
    f196:	2140      	movs	r1, #64	; 0x40
    f198:	0192      	lsls	r2, r2, #6
    f19a:	438b      	bics	r3, r1
    f19c:	4313      	orrs	r3, r2
    f19e:	2280      	movs	r2, #128	; 0x80
    f1a0:	4252      	negs	r2, r2
    f1a2:	4313      	orrs	r3, r2
    f1a4:	7623      	strb	r3, [r4, #24]
    f1a6:	887b      	ldrh	r3, [r7, #2]
    f1a8:	0027      	movs	r7, r4
    f1aa:	8463      	strh	r3, [r4, #34]	; 0x22
    f1ac:	464b      	mov	r3, r9
    f1ae:	3708      	adds	r7, #8
    f1b0:	6163      	str	r3, [r4, #20]
    f1b2:	0032      	movs	r2, r6
    f1b4:	990f      	ldr	r1, [sp, #60]	; 0x3c
    f1b6:	4b22      	ldr	r3, [pc, #136]	; (f240 <frameTransmit+0x13c>)
    f1b8:	0038      	movs	r0, r7
    f1ba:	4798      	blx	r3
    f1bc:	9b11      	ldr	r3, [sp, #68]	; 0x44
    f1be:	4652      	mov	r2, sl
    f1c0:	6123      	str	r3, [r4, #16]
    f1c2:	2325      	movs	r3, #37	; 0x25
    f1c4:	61e7      	str	r7, [r4, #28]
    f1c6:	54e2      	strb	r2, [r4, r3]
    f1c8:	9b03      	ldr	r3, [sp, #12]
    f1ca:	481e      	ldr	r0, [pc, #120]	; (f244 <frameTransmit+0x140>)
    f1cc:	4443      	add	r3, r8
    f1ce:	001d      	movs	r5, r3
    f1d0:	2324      	movs	r3, #36	; 0x24
    f1d2:	0021      	movs	r1, r4
    f1d4:	54e5      	strb	r5, [r4, r3]
    f1d6:	4b1c      	ldr	r3, [pc, #112]	; (f248 <frameTransmit+0x144>)
    f1d8:	4798      	blx	r3
    f1da:	2001      	movs	r0, #1
    f1dc:	b005      	add	sp, #20
    f1de:	bc3c      	pop	{r2, r3, r4, r5}
    f1e0:	4690      	mov	r8, r2
    f1e2:	4699      	mov	r9, r3
    f1e4:	46a2      	mov	sl, r4
    f1e6:	46ab      	mov	fp, r5
    f1e8:	bdf0      	pop	{r4, r5, r6, r7, pc}
    f1ea:	4b18      	ldr	r3, [pc, #96]	; (f24c <frameTransmit+0x148>)
    f1ec:	0030      	movs	r0, r6
    f1ee:	4798      	blx	r3
    f1f0:	464b      	mov	r3, r9
    f1f2:	9000      	str	r0, [sp, #0]
    f1f4:	9a03      	ldr	r2, [sp, #12]
    f1f6:	4641      	mov	r1, r8
    f1f8:	0038      	movs	r0, r7
    f1fa:	4d15      	ldr	r5, [pc, #84]	; (f250 <frameTransmit+0x14c>)
    f1fc:	47a8      	blx	r5
    f1fe:	28ff      	cmp	r0, #255	; 0xff
    f200:	d014      	beq.n	f22c <frameTransmit+0x128>
    f202:	9b03      	ldr	r3, [sp, #12]
    f204:	181d      	adds	r5, r3, r0
    f206:	b2eb      	uxtb	r3, r5
    f208:	9303      	str	r3, [sp, #12]
    f20a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    f20c:	781a      	ldrb	r2, [r3, #0]
    f20e:	785b      	ldrb	r3, [r3, #1]
    f210:	2e02      	cmp	r6, #2
    f212:	d197      	bne.n	f144 <frameTransmit+0x40>
    f214:	021b      	lsls	r3, r3, #8
    f216:	189b      	adds	r3, r3, r2
    f218:	4a07      	ldr	r2, [pc, #28]	; (f238 <frameTransmit+0x134>)
    f21a:	b29b      	uxth	r3, r3
    f21c:	4293      	cmp	r3, r2
    f21e:	d000      	beq.n	f222 <frameTransmit+0x11e>
    f220:	e790      	b.n	f144 <frameTransmit+0x40>
    f222:	2100      	movs	r1, #0
    f224:	2201      	movs	r2, #1
    f226:	e78f      	b.n	f148 <frameTransmit+0x44>
    f228:	2300      	movs	r3, #0
    f22a:	e7a7      	b.n	f17c <frameTransmit+0x78>
    f22c:	2000      	movs	r0, #0
    f22e:	e7d5      	b.n	f1dc <frameTransmit+0xd8>
    f230:	0000bc11 	.word	0x0000bc11
    f234:	200028b8 	.word	0x200028b8
    f238:	0000ffff 	.word	0x0000ffff
    f23c:	20001ce1 	.word	0x20001ce1
    f240:	00014cdf 	.word	0x00014cdf
    f244:	200028ac 	.word	0x200028ac
    f248:	0000be0d 	.word	0x0000be0d
    f24c:	0001226d 	.word	0x0001226d
    f250:	00012291 	.word	0x00012291

0000f254 <sendDataFrame>:
    f254:	b5f0      	push	{r4, r5, r6, r7, lr}
    f256:	46de      	mov	lr, fp
    f258:	464e      	mov	r6, r9
    f25a:	4645      	mov	r5, r8
    f25c:	4657      	mov	r7, sl
    f25e:	b5e0      	push	{r5, r6, r7, lr}
    f260:	b093      	sub	sp, #76	; 0x4c
    f262:	ab04      	add	r3, sp, #16
    f264:	469c      	mov	ip, r3
    f266:	2616      	movs	r6, #22
    f268:	4ba8      	ldr	r3, [pc, #672]	; (f50c <sendDataFrame+0x2b8>)
    f26a:	9205      	str	r2, [sp, #20]
    f26c:	469b      	mov	fp, r3
    f26e:	881b      	ldrh	r3, [r3, #0]
    f270:	4466      	add	r6, ip
    f272:	b28a      	uxth	r2, r1
    f274:	0005      	movs	r5, r0
    f276:	8031      	strh	r1, [r6, #0]
    f278:	429a      	cmp	r2, r3
    f27a:	d100      	bne.n	f27e <sendDataFrame+0x2a>
    f27c:	e0ba      	b.n	f3f4 <sendDataFrame+0x1a0>
    f27e:	2800      	cmp	r0, #0
    f280:	d100      	bne.n	f284 <sendDataFrame+0x30>
    f282:	e0b7      	b.n	f3f4 <sendDataFrame+0x1a0>
    f284:	2088      	movs	r0, #136	; 0x88
    f286:	4ba2      	ldr	r3, [pc, #648]	; (f510 <sendDataFrame+0x2bc>)
    f288:	4798      	blx	r3
    f28a:	1e07      	subs	r7, r0, #0
    f28c:	d100      	bne.n	f290 <sendDataFrame+0x3c>
    f28e:	e0b1      	b.n	f3f4 <sendDataFrame+0x1a0>
    f290:	4aa0      	ldr	r2, [pc, #640]	; (f514 <sendDataFrame+0x2c0>)
    f292:	ac0a      	add	r4, sp, #40	; 0x28
    f294:	4692      	mov	sl, r2
    f296:	4651      	mov	r1, sl
    f298:	2233      	movs	r2, #51	; 0x33
    f29a:	6809      	ldr	r1, [r1, #0]
    f29c:	8beb      	ldrh	r3, [r5, #30]
    f29e:	5c8a      	ldrb	r2, [r1, r2]
    f2a0:	8ba8      	ldrh	r0, [r5, #28]
    f2a2:	3201      	adds	r2, #1
    f2a4:	b2d2      	uxtb	r2, r2
    f2a6:	9206      	str	r2, [sp, #24]
    f2a8:	7022      	strb	r2, [r4, #0]
    f2aa:	2208      	movs	r2, #8
    f2ac:	7861      	ldrb	r1, [r4, #1]
    f2ae:	80e3      	strh	r3, [r4, #6]
    f2b0:	4391      	bics	r1, r2
    f2b2:	2204      	movs	r2, #4
    f2b4:	4694      	mov	ip, r2
    f2b6:	4662      	mov	r2, ip
    f2b8:	4b97      	ldr	r3, [pc, #604]	; (f518 <sendDataFrame+0x2c4>)
    f2ba:	4311      	orrs	r1, r2
    f2bc:	4a97      	ldr	r2, [pc, #604]	; (f51c <sendDataFrame+0x2c8>)
    f2be:	781b      	ldrb	r3, [r3, #0]
    f2c0:	8812      	ldrh	r2, [r2, #0]
    f2c2:	3301      	adds	r3, #1
    f2c4:	8062      	strh	r2, [r4, #2]
    f2c6:	4a94      	ldr	r2, [pc, #592]	; (f518 <sendDataFrame+0x2c4>)
    f2c8:	b2db      	uxtb	r3, r3
    f2ca:	7013      	strb	r3, [r2, #0]
    f2cc:	7223      	strb	r3, [r4, #8]
    f2ce:	7e6b      	ldrb	r3, [r5, #25]
    f2d0:	80a0      	strh	r0, [r4, #4]
    f2d2:	469c      	mov	ip, r3
    f2d4:	2303      	movs	r3, #3
    f2d6:	4698      	mov	r8, r3
    f2d8:	4663      	mov	r3, ip
    f2da:	4642      	mov	r2, r8
    f2dc:	4013      	ands	r3, r2
    f2de:	4699      	mov	r9, r3
    f2e0:	231f      	movs	r3, #31
    f2e2:	400b      	ands	r3, r1
    f2e4:	4393      	bics	r3, r2
    f2e6:	2110      	movs	r1, #16
    f2e8:	4662      	mov	r2, ip
    f2ea:	4011      	ands	r1, r2
    f2ec:	464a      	mov	r2, r9
    f2ee:	4313      	orrs	r3, r2
    f2f0:	2210      	movs	r2, #16
    f2f2:	4393      	bics	r3, r2
    f2f4:	4319      	orrs	r1, r3
    f2f6:	23ff      	movs	r3, #255	; 0xff
    f2f8:	7061      	strb	r1, [r4, #1]
    f2fa:	4203      	tst	r3, r0
    f2fc:	d012      	beq.n	f324 <sendDataFrame+0xd0>
    f2fe:	465a      	mov	r2, fp
    f300:	8811      	ldrh	r1, [r2, #0]
    f302:	0002      	movs	r2, r0
    f304:	439a      	bics	r2, r3
    f306:	428a      	cmp	r2, r1
    f308:	d100      	bne.n	f30c <sendDataFrame+0xb8>
    f30a:	e0b5      	b.n	f478 <sendDataFrame+0x224>
    f30c:	4984      	ldr	r1, [pc, #528]	; (f520 <sendDataFrame+0x2cc>)
    f30e:	4288      	cmp	r0, r1
    f310:	d108      	bne.n	f324 <sendDataFrame+0xd0>
    f312:	89a9      	ldrh	r1, [r5, #12]
    f314:	420b      	tst	r3, r1
    f316:	d005      	beq.n	f324 <sendDataFrame+0xd0>
    f318:	465a      	mov	r2, fp
    f31a:	8810      	ldrh	r0, [r2, #0]
    f31c:	4399      	bics	r1, r3
    f31e:	4281      	cmp	r1, r0
    f320:	d100      	bne.n	f324 <sendDataFrame+0xd0>
    f322:	e0a9      	b.n	f478 <sendDataFrame+0x224>
    f324:	466b      	mov	r3, sp
    f326:	7e1b      	ldrb	r3, [r3, #24]
    f328:	703b      	strb	r3, [r7, #0]
    f32a:	7863      	ldrb	r3, [r4, #1]
    f32c:	707b      	strb	r3, [r7, #1]
    f32e:	7a23      	ldrb	r3, [r4, #8]
    f330:	70bb      	strb	r3, [r7, #2]
    f332:	7863      	ldrb	r3, [r4, #1]
    f334:	069a      	lsls	r2, r3, #26
    f336:	d565      	bpl.n	f404 <sendDataFrame+0x1b0>
    f338:	2210      	movs	r2, #16
    f33a:	2103      	movs	r1, #3
    f33c:	9207      	str	r2, [sp, #28]
    f33e:	9208      	str	r2, [sp, #32]
    f340:	3a08      	subs	r2, #8
    f342:	4691      	mov	r9, r2
    f344:	2003      	movs	r0, #3
    f346:	3a04      	subs	r2, #4
    f348:	9106      	str	r1, [sp, #24]
    f34a:	075b      	lsls	r3, r3, #29
    f34c:	d500      	bpl.n	f350 <sendDataFrame+0xfc>
    f34e:	e074      	b.n	f43a <sendDataFrame+0x1e6>
    f350:	4b74      	ldr	r3, [pc, #464]	; (f524 <sendDataFrame+0x2d0>)
    f352:	4698      	mov	r8, r3
    f354:	7ceb      	ldrb	r3, [r5, #19]
    f356:	2b00      	cmp	r3, #0
    f358:	d100      	bne.n	f35c <sendDataFrame+0x108>
    f35a:	e089      	b.n	f470 <sendDataFrame+0x21c>
    f35c:	2320      	movs	r3, #32
    f35e:	5ceb      	ldrb	r3, [r5, r3]
    f360:	4a6d      	ldr	r2, [pc, #436]	; (f518 <sendDataFrame+0x2c4>)
    f362:	70bb      	strb	r3, [r7, #2]
    f364:	4b6c      	ldr	r3, [pc, #432]	; (f518 <sendDataFrame+0x2c4>)
    f366:	781b      	ldrb	r3, [r3, #0]
    f368:	3b01      	subs	r3, #1
    f36a:	7013      	strb	r3, [r2, #0]
    f36c:	2338      	movs	r3, #56	; 0x38
    f36e:	0029      	movs	r1, r5
    f370:	4699      	mov	r9, r3
    f372:	5cea      	ldrb	r2, [r5, r3]
    f374:	1838      	adds	r0, r7, r0
    f376:	3139      	adds	r1, #57	; 0x39
    f378:	47c0      	blx	r8
    f37a:	464b      	mov	r3, r9
    f37c:	5ceb      	ldrb	r3, [r5, r3]
    f37e:	8830      	ldrh	r0, [r6, #0]
    f380:	4698      	mov	r8, r3
    f382:	4b67      	ldr	r3, [pc, #412]	; (f520 <sendDataFrame+0x2cc>)
    f384:	4298      	cmp	r0, r3
    f386:	d00d      	beq.n	f3a4 <sendDataFrame+0x150>
    f388:	9b05      	ldr	r3, [sp, #20]
    f38a:	4642      	mov	r2, r8
    f38c:	9303      	str	r3, [sp, #12]
    f38e:	7cab      	ldrb	r3, [r5, #18]
    f390:	9906      	ldr	r1, [sp, #24]
    f392:	9302      	str	r3, [sp, #8]
    f394:	2302      	movs	r3, #2
    f396:	9601      	str	r6, [sp, #4]
    f398:	9300      	str	r3, [sp, #0]
    f39a:	0020      	movs	r0, r4
    f39c:	003b      	movs	r3, r7
    f39e:	4c62      	ldr	r4, [pc, #392]	; (f528 <sendDataFrame+0x2d4>)
    f3a0:	47a0      	blx	r4
    f3a2:	e028      	b.n	f3f6 <sendDataFrame+0x1a2>
    f3a4:	465b      	mov	r3, fp
    f3a6:	881b      	ldrh	r3, [r3, #0]
    f3a8:	b29b      	uxth	r3, r3
    f3aa:	9307      	str	r3, [sp, #28]
    f3ac:	4653      	mov	r3, sl
    f3ae:	681b      	ldr	r3, [r3, #0]
    f3b0:	7fda      	ldrb	r2, [r3, #31]
    f3b2:	2a00      	cmp	r2, #0
    f3b4:	d01b      	beq.n	f3ee <sendDataFrame+0x19a>
    f3b6:	691b      	ldr	r3, [r3, #16]
    f3b8:	469c      	mov	ip, r3
    f3ba:	881b      	ldrh	r3, [r3, #0]
    f3bc:	4283      	cmp	r3, r0
    f3be:	d100      	bne.n	f3c2 <sendDataFrame+0x16e>
    f3c0:	e09f      	b.n	f502 <sendDataFrame+0x2ae>
    f3c2:	4663      	mov	r3, ip
    f3c4:	3a01      	subs	r2, #1
    f3c6:	b2d1      	uxtb	r1, r2
    f3c8:	3101      	adds	r1, #1
    f3ca:	0089      	lsls	r1, r1, #2
    f3cc:	4461      	add	r1, ip
    f3ce:	46a9      	mov	r9, r5
    f3d0:	3304      	adds	r3, #4
    f3d2:	4665      	mov	r5, ip
    f3d4:	46bc      	mov	ip, r7
    f3d6:	e007      	b.n	f3e8 <sendDataFrame+0x194>
    f3d8:	1b5f      	subs	r7, r3, r5
    f3da:	469b      	mov	fp, r3
    f3dc:	3304      	adds	r3, #4
    f3de:	1f1a      	subs	r2, r3, #4
    f3e0:	8812      	ldrh	r2, [r2, #0]
    f3e2:	4282      	cmp	r2, r0
    f3e4:	d100      	bne.n	f3e8 <sendDataFrame+0x194>
    f3e6:	e077      	b.n	f4d8 <sendDataFrame+0x284>
    f3e8:	4299      	cmp	r1, r3
    f3ea:	d1f5      	bne.n	f3d8 <sendDataFrame+0x184>
    f3ec:	4667      	mov	r7, ip
    f3ee:	0038      	movs	r0, r7
    f3f0:	4b4e      	ldr	r3, [pc, #312]	; (f52c <sendDataFrame+0x2d8>)
    f3f2:	4798      	blx	r3
    f3f4:	2000      	movs	r0, #0
    f3f6:	b013      	add	sp, #76	; 0x4c
    f3f8:	bc3c      	pop	{r2, r3, r4, r5}
    f3fa:	4690      	mov	r8, r2
    f3fc:	4699      	mov	r9, r3
    f3fe:	46a2      	mov	sl, r4
    f400:	46ab      	mov	fp, r5
    f402:	bdf0      	pop	{r4, r5, r6, r7, pc}
    f404:	8862      	ldrh	r2, [r4, #2]
    f406:	2109      	movs	r1, #9
    f408:	70fa      	strb	r2, [r7, #3]
    f40a:	8862      	ldrh	r2, [r4, #2]
    f40c:	2009      	movs	r0, #9
    f40e:	0a12      	lsrs	r2, r2, #8
    f410:	713a      	strb	r2, [r7, #4]
    f412:	88a2      	ldrh	r2, [r4, #4]
    f414:	717a      	strb	r2, [r7, #5]
    f416:	88a2      	ldrh	r2, [r4, #4]
    f418:	0a12      	lsrs	r2, r2, #8
    f41a:	71ba      	strb	r2, [r7, #6]
    f41c:	88e2      	ldrh	r2, [r4, #6]
    f41e:	71fa      	strb	r2, [r7, #7]
    f420:	88e2      	ldrh	r2, [r4, #6]
    f422:	9106      	str	r1, [sp, #24]
    f424:	0a12      	lsrs	r2, r2, #8
    f426:	723a      	strb	r2, [r7, #8]
    f428:	2216      	movs	r2, #22
    f42a:	9207      	str	r2, [sp, #28]
    f42c:	9208      	str	r2, [sp, #32]
    f42e:	3a08      	subs	r2, #8
    f430:	4691      	mov	r9, r2
    f432:	3a04      	subs	r2, #4
    f434:	075b      	lsls	r3, r3, #29
    f436:	d400      	bmi.n	f43a <sendDataFrame+0x1e6>
    f438:	e78a      	b.n	f350 <sendDataFrame+0xfc>
    f43a:	4b3d      	ldr	r3, [pc, #244]	; (f530 <sendDataFrame+0x2dc>)
    f43c:	6819      	ldr	r1, [r3, #0]
    f43e:	2320      	movs	r3, #32
    f440:	5ccb      	ldrb	r3, [r1, r3]
    f442:	493c      	ldr	r1, [pc, #240]	; (f534 <sendDataFrame+0x2e0>)
    f444:	7423      	strb	r3, [r4, #16]
    f446:	6809      	ldr	r1, [r1, #0]
    f448:	6161      	str	r1, [r4, #20]
    f44a:	543b      	strb	r3, [r7, r0]
    f44c:	4b35      	ldr	r3, [pc, #212]	; (f524 <sendDataFrame+0x2d0>)
    f44e:	18b8      	adds	r0, r7, r2
    f450:	a90f      	add	r1, sp, #60	; 0x3c
    f452:	2204      	movs	r2, #4
    f454:	4698      	mov	r8, r3
    f456:	4798      	blx	r3
    f458:	464b      	mov	r3, r9
    f45a:	2208      	movs	r2, #8
    f45c:	18f8      	adds	r0, r7, r3
    f45e:	4936      	ldr	r1, [pc, #216]	; (f538 <sendDataFrame+0x2e4>)
    f460:	47c0      	blx	r8
    f462:	9b08      	ldr	r3, [sp, #32]
    f464:	9807      	ldr	r0, [sp, #28]
    f466:	9306      	str	r3, [sp, #24]
    f468:	7ceb      	ldrb	r3, [r5, #19]
    f46a:	2b00      	cmp	r3, #0
    f46c:	d000      	beq.n	f470 <sendDataFrame+0x21c>
    f46e:	e775      	b.n	f35c <sendDataFrame+0x108>
    f470:	2320      	movs	r3, #32
    f472:	78ba      	ldrb	r2, [r7, #2]
    f474:	54ea      	strb	r2, [r5, r3]
    f476:	e779      	b.n	f36c <sendDataFrame+0x118>
    f478:	4b30      	ldr	r3, [pc, #192]	; (f53c <sendDataFrame+0x2e8>)
    f47a:	2100      	movs	r1, #0
    f47c:	4698      	mov	r8, r3
    f47e:	0018      	movs	r0, r3
    f480:	4b2f      	ldr	r3, [pc, #188]	; (f540 <sendDataFrame+0x2ec>)
    f482:	4798      	blx	r3
    f484:	4643      	mov	r3, r8
    f486:	7a1b      	ldrb	r3, [r3, #8]
    f488:	469c      	mov	ip, r3
    f48a:	2b00      	cmp	r3, #0
    f48c:	d021      	beq.n	f4d2 <sendDataFrame+0x27e>
    f48e:	2240      	movs	r2, #64	; 0x40
    f490:	8833      	ldrh	r3, [r6, #0]
    f492:	4691      	mov	r9, r2
    f494:	4a22      	ldr	r2, [pc, #136]	; (f520 <sendDataFrame+0x2cc>)
    f496:	9306      	str	r3, [sp, #24]
    f498:	4661      	mov	r1, ip
    f49a:	2300      	movs	r3, #0
    f49c:	4690      	mov	r8, r2
    f49e:	46bc      	mov	ip, r7
    f4a0:	e006      	b.n	f4b0 <sendDataFrame+0x25c>
    f4a2:	4542      	cmp	r2, r8
    f4a4:	d00f      	beq.n	f4c6 <sendDataFrame+0x272>
    f4a6:	3301      	adds	r3, #1
    f4a8:	b2db      	uxtb	r3, r3
    f4aa:	6800      	ldr	r0, [r0, #0]
    f4ac:	428b      	cmp	r3, r1
    f4ae:	d00f      	beq.n	f4d0 <sendDataFrame+0x27c>
    f4b0:	2800      	cmp	r0, #0
    f4b2:	d0f8      	beq.n	f4a6 <sendDataFrame+0x252>
    f4b4:	8b82      	ldrh	r2, [r0, #28]
    f4b6:	8baf      	ldrh	r7, [r5, #28]
    f4b8:	4297      	cmp	r7, r2
    f4ba:	d1f2      	bne.n	f4a2 <sendDataFrame+0x24e>
    f4bc:	464f      	mov	r7, r9
    f4be:	7862      	ldrb	r2, [r4, #1]
    f4c0:	433a      	orrs	r2, r7
    f4c2:	7062      	strb	r2, [r4, #1]
    f4c4:	e7ef      	b.n	f4a6 <sendDataFrame+0x252>
    f4c6:	8982      	ldrh	r2, [r0, #12]
    f4c8:	9f06      	ldr	r7, [sp, #24]
    f4ca:	42ba      	cmp	r2, r7
    f4cc:	d1eb      	bne.n	f4a6 <sendDataFrame+0x252>
    f4ce:	e7f5      	b.n	f4bc <sendDataFrame+0x268>
    f4d0:	4667      	mov	r7, ip
    f4d2:	7823      	ldrb	r3, [r4, #0]
    f4d4:	9306      	str	r3, [sp, #24]
    f4d6:	e725      	b.n	f324 <sendDataFrame+0xd0>
    f4d8:	464d      	mov	r5, r9
    f4da:	46b9      	mov	r9, r7
    f4dc:	4667      	mov	r7, ip
    f4de:	4669      	mov	r1, sp
    f4e0:	465b      	mov	r3, fp
    f4e2:	8b89      	ldrh	r1, [r1, #28]
    f4e4:	78ba      	ldrb	r2, [r7, #2]
    f4e6:	8019      	strh	r1, [r3, #0]
    f4e8:	4653      	mov	r3, sl
    f4ea:	681b      	ldr	r3, [r3, #0]
    f4ec:	691b      	ldr	r3, [r3, #16]
    f4ee:	444b      	add	r3, r9
    f4f0:	709a      	strb	r2, [r3, #2]
    f4f2:	4653      	mov	r3, sl
    f4f4:	2220      	movs	r2, #32
    f4f6:	681b      	ldr	r3, [r3, #0]
    f4f8:	5c9a      	ldrb	r2, [r3, r2]
    f4fa:	691b      	ldr	r3, [r3, #16]
    f4fc:	444b      	add	r3, r9
    f4fe:	70da      	strb	r2, [r3, #3]
    f500:	e742      	b.n	f388 <sendDataFrame+0x134>
    f502:	2300      	movs	r3, #0
    f504:	46e3      	mov	fp, ip
    f506:	4699      	mov	r9, r3
    f508:	e7e9      	b.n	f4de <sendDataFrame+0x28a>
    f50a:	46c0      	nop			; (mov r8, r8)
    f50c:	200028b8 	.word	0x200028b8
    f510:	0000bc11 	.word	0x0000bc11
    f514:	2000285c 	.word	0x2000285c
    f518:	20002890 	.word	0x20002890
    f51c:	200028a8 	.word	0x200028a8
    f520:	0000ffff 	.word	0x0000ffff
    f524:	00014cdf 	.word	0x00014cdf
    f528:	0000f105 	.word	0x0000f105
    f52c:	0000bccd 	.word	0x0000bccd
    f530:	20002860 	.word	0x20002860
    f534:	20002914 	.word	0x20002914
    f538:	20000094 	.word	0x20000094
    f53c:	20002850 	.word	0x20002850
    f540:	0000be55 	.word	0x0000be55

0000f544 <addRebroadcastTableEntry>:
    f544:	b5f0      	push	{r4, r5, r6, r7, lr}
    f546:	46c6      	mov	lr, r8
    f548:	b500      	push	{lr}
    f54a:	4e18      	ldr	r6, [pc, #96]	; (f5ac <addRebroadcastTableEntry+0x68>)
    f54c:	4684      	mov	ip, r0
    f54e:	6833      	ldr	r3, [r6, #0]
    f550:	4688      	mov	r8, r1
    f552:	7fda      	ldrb	r2, [r3, #31]
    f554:	2a00      	cmp	r2, #0
    f556:	d014      	beq.n	f582 <addRebroadcastTableEntry+0x3e>
    f558:	691d      	ldr	r5, [r3, #16]
    f55a:	4f15      	ldr	r7, [pc, #84]	; (f5b0 <addRebroadcastTableEntry+0x6c>)
    f55c:	882b      	ldrh	r3, [r5, #0]
    f55e:	42bb      	cmp	r3, r7
    f560:	d013      	beq.n	f58a <addRebroadcastTableEntry+0x46>
    f562:	3a01      	subs	r2, #1
    f564:	b2d2      	uxtb	r2, r2
    f566:	3201      	adds	r2, #1
    f568:	0092      	lsls	r2, r2, #2
    f56a:	1d2b      	adds	r3, r5, #4
    f56c:	18aa      	adds	r2, r5, r2
    f56e:	e006      	b.n	f57e <addRebroadcastTableEntry+0x3a>
    f570:	1b59      	subs	r1, r3, r5
    f572:	0018      	movs	r0, r3
    f574:	3304      	adds	r3, #4
    f576:	1f1c      	subs	r4, r3, #4
    f578:	8824      	ldrh	r4, [r4, #0]
    f57a:	42bc      	cmp	r4, r7
    f57c:	d007      	beq.n	f58e <addRebroadcastTableEntry+0x4a>
    f57e:	4293      	cmp	r3, r2
    f580:	d1f6      	bne.n	f570 <addRebroadcastTableEntry+0x2c>
    f582:	2000      	movs	r0, #0
    f584:	bc04      	pop	{r2}
    f586:	4690      	mov	r8, r2
    f588:	bdf0      	pop	{r4, r5, r6, r7, pc}
    f58a:	0028      	movs	r0, r5
    f58c:	2100      	movs	r1, #0
    f58e:	4663      	mov	r3, ip
    f590:	4642      	mov	r2, r8
    f592:	8003      	strh	r3, [r0, #0]
    f594:	6833      	ldr	r3, [r6, #0]
    f596:	2001      	movs	r0, #1
    f598:	691b      	ldr	r3, [r3, #16]
    f59a:	185b      	adds	r3, r3, r1
    f59c:	709a      	strb	r2, [r3, #2]
    f59e:	2220      	movs	r2, #32
    f5a0:	6833      	ldr	r3, [r6, #0]
    f5a2:	5c9a      	ldrb	r2, [r3, r2]
    f5a4:	691b      	ldr	r3, [r3, #16]
    f5a6:	185b      	adds	r3, r3, r1
    f5a8:	70da      	strb	r2, [r3, #3]
    f5aa:	e7eb      	b.n	f584 <addRebroadcastTableEntry+0x40>
    f5ac:	2000285c 	.word	0x2000285c
    f5b0:	0000ffff 	.word	0x0000ffff

0000f5b4 <initRebroadcastTable>:
    f5b4:	b510      	push	{r4, lr}
    f5b6:	4809      	ldr	r0, [pc, #36]	; (f5dc <initRebroadcastTable+0x28>)
    f5b8:	2300      	movs	r3, #0
    f5ba:	6802      	ldr	r2, [r0, #0]
    f5bc:	7fd1      	ldrb	r1, [r2, #31]
    f5be:	2900      	cmp	r1, #0
    f5c0:	d00a      	beq.n	f5d8 <initRebroadcastTable+0x24>
    f5c2:	2401      	movs	r4, #1
    f5c4:	4264      	negs	r4, r4
    f5c6:	6912      	ldr	r2, [r2, #16]
    f5c8:	0099      	lsls	r1, r3, #2
    f5ca:	528c      	strh	r4, [r1, r2]
    f5cc:	6802      	ldr	r2, [r0, #0]
    f5ce:	3301      	adds	r3, #1
    f5d0:	7fd1      	ldrb	r1, [r2, #31]
    f5d2:	b2db      	uxtb	r3, r3
    f5d4:	4299      	cmp	r1, r3
    f5d6:	d8f6      	bhi.n	f5c6 <initRebroadcastTable+0x12>
    f5d8:	bd10      	pop	{r4, pc}
    f5da:	46c0      	nop			; (mov r8, r8)
    f5dc:	2000285c 	.word	0x2000285c

0000f5e0 <rebroadcastTimerHandler>:
    f5e0:	b5f0      	push	{r4, r5, r6, r7, lr}
    f5e2:	4f11      	ldr	r7, [pc, #68]	; (f628 <rebroadcastTimerHandler+0x48>)
    f5e4:	2300      	movs	r3, #0
    f5e6:	683c      	ldr	r4, [r7, #0]
    f5e8:	7fe5      	ldrb	r5, [r4, #31]
    f5ea:	2d00      	cmp	r5, #0
    f5ec:	d01b      	beq.n	f626 <rebroadcastTimerHandler+0x46>
    f5ee:	2201      	movs	r2, #1
    f5f0:	4252      	negs	r2, r2
    f5f2:	4694      	mov	ip, r2
    f5f4:	4e0d      	ldr	r6, [pc, #52]	; (f62c <rebroadcastTimerHandler+0x4c>)
    f5f6:	6922      	ldr	r2, [r4, #16]
    f5f8:	0098      	lsls	r0, r3, #2
    f5fa:	1812      	adds	r2, r2, r0
    f5fc:	8811      	ldrh	r1, [r2, #0]
    f5fe:	42b1      	cmp	r1, r6
    f600:	d00d      	beq.n	f61e <rebroadcastTimerHandler+0x3e>
    f602:	78d1      	ldrb	r1, [r2, #3]
    f604:	2900      	cmp	r1, #0
    f606:	d00a      	beq.n	f61e <rebroadcastTimerHandler+0x3e>
    f608:	3901      	subs	r1, #1
    f60a:	b2c9      	uxtb	r1, r1
    f60c:	70d1      	strb	r1, [r2, #3]
    f60e:	2900      	cmp	r1, #0
    f610:	d103      	bne.n	f61a <rebroadcastTimerHandler+0x3a>
    f612:	4661      	mov	r1, ip
    f614:	683a      	ldr	r2, [r7, #0]
    f616:	6912      	ldr	r2, [r2, #16]
    f618:	5211      	strh	r1, [r2, r0]
    f61a:	683c      	ldr	r4, [r7, #0]
    f61c:	7fe5      	ldrb	r5, [r4, #31]
    f61e:	3301      	adds	r3, #1
    f620:	b2db      	uxtb	r3, r3
    f622:	42ab      	cmp	r3, r5
    f624:	d3e7      	bcc.n	f5f6 <rebroadcastTimerHandler+0x16>
    f626:	bdf0      	pop	{r4, r5, r6, r7, pc}
    f628:	2000285c 	.word	0x2000285c
    f62c:	0000ffff 	.word	0x0000ffff

0000f630 <handleDataMessage>:
    f630:	b5f0      	push	{r4, r5, r6, r7, lr}
    f632:	46de      	mov	lr, fp
    f634:	4657      	mov	r7, sl
    f636:	464e      	mov	r6, r9
    f638:	4645      	mov	r5, r8
    f63a:	b5e0      	push	{r5, r6, r7, lr}
    f63c:	780b      	ldrb	r3, [r1, #0]
    f63e:	b083      	sub	sp, #12
    f640:	0004      	movs	r4, r0
    f642:	2b31      	cmp	r3, #49	; 0x31
    f644:	d050      	beq.n	f6e8 <handleDataMessage+0xb8>
    f646:	2b32      	cmp	r3, #50	; 0x32
    f648:	d147      	bne.n	f6da <handleDataMessage+0xaa>
    f64a:	4d67      	ldr	r5, [pc, #412]	; (f7e8 <handleDataMessage+0x1b8>)
    f64c:	7a2b      	ldrb	r3, [r5, #8]
    f64e:	2b00      	cmp	r3, #0
    f650:	d043      	beq.n	f6da <handleDataMessage+0xaa>
    f652:	4a66      	ldr	r2, [pc, #408]	; (f7ec <handleDataMessage+0x1bc>)
    f654:	4b66      	ldr	r3, [pc, #408]	; (f7f0 <handleDataMessage+0x1c0>)
    f656:	4691      	mov	r9, r2
    f658:	4a66      	ldr	r2, [pc, #408]	; (f7f4 <handleDataMessage+0x1c4>)
    f65a:	2600      	movs	r6, #0
    f65c:	4692      	mov	sl, r2
    f65e:	4a66      	ldr	r2, [pc, #408]	; (f7f8 <handleDataMessage+0x1c8>)
    f660:	4698      	mov	r8, r3
    f662:	4693      	mov	fp, r2
    f664:	e007      	b.n	f676 <handleDataMessage+0x46>
    f666:	0039      	movs	r1, r7
    f668:	0028      	movs	r0, r5
    f66a:	47c8      	blx	r9
    f66c:	3601      	adds	r6, #1
    f66e:	7a2b      	ldrb	r3, [r5, #8]
    f670:	b2f6      	uxtb	r6, r6
    f672:	42b3      	cmp	r3, r6
    f674:	d931      	bls.n	f6da <handleDataMessage+0xaa>
    f676:	2100      	movs	r1, #0
    f678:	0028      	movs	r0, r5
    f67a:	47c0      	blx	r8
    f67c:	1e07      	subs	r7, r0, #0
    f67e:	d02c      	beq.n	f6da <handleDataMessage+0xaa>
    f680:	2320      	movs	r3, #32
    f682:	7a22      	ldrb	r2, [r4, #8]
    f684:	5cc3      	ldrb	r3, [r0, r3]
    f686:	429a      	cmp	r2, r3
    f688:	d1ed      	bne.n	f666 <handleDataMessage+0x36>
    f68a:	88e2      	ldrh	r2, [r4, #6]
    f68c:	8b83      	ldrh	r3, [r0, #28]
    f68e:	429a      	cmp	r2, r3
    f690:	d1e9      	bne.n	f666 <handleDataMessage+0x36>
    f692:	6883      	ldr	r3, [r0, #8]
    f694:	2b00      	cmp	r3, #0
    f696:	d003      	beq.n	f6a0 <handleDataMessage+0x70>
    f698:	7c80      	ldrb	r0, [r0, #18]
    f69a:	003a      	movs	r2, r7
    f69c:	2100      	movs	r1, #0
    f69e:	4798      	blx	r3
    f6a0:	0038      	movs	r0, r7
    f6a2:	47d0      	blx	sl
    f6a4:	22ff      	movs	r2, #255	; 0xff
    f6a6:	8bbb      	ldrh	r3, [r7, #28]
    f6a8:	421a      	tst	r2, r3
    f6aa:	d1df      	bne.n	f66c <handleDataMessage+0x3c>
    f6ac:	4659      	mov	r1, fp
    f6ae:	0018      	movs	r0, r3
    f6b0:	8809      	ldrh	r1, [r1, #0]
    f6b2:	4390      	bics	r0, r2
    f6b4:	4288      	cmp	r0, r1
    f6b6:	d0d9      	beq.n	f66c <handleDataMessage+0x3c>
    f6b8:	4a50      	ldr	r2, [pc, #320]	; (f7fc <handleDataMessage+0x1cc>)
    f6ba:	0a1b      	lsrs	r3, r3, #8
    f6bc:	6812      	ldr	r2, [r2, #0]
    f6be:	005b      	lsls	r3, r3, #1
    f6c0:	6892      	ldr	r2, [r2, #8]
    f6c2:	3601      	adds	r6, #1
    f6c4:	18d3      	adds	r3, r2, r3
    f6c6:	220f      	movs	r2, #15
    f6c8:	7859      	ldrb	r1, [r3, #1]
    f6ca:	b2f6      	uxtb	r6, r6
    f6cc:	400a      	ands	r2, r1
    f6ce:	2130      	movs	r1, #48	; 0x30
    f6d0:	430a      	orrs	r2, r1
    f6d2:	705a      	strb	r2, [r3, #1]
    f6d4:	7a2b      	ldrb	r3, [r5, #8]
    f6d6:	42b3      	cmp	r3, r6
    f6d8:	d8cd      	bhi.n	f676 <handleDataMessage+0x46>
    f6da:	b003      	add	sp, #12
    f6dc:	bc3c      	pop	{r2, r3, r4, r5}
    f6de:	4690      	mov	r8, r2
    f6e0:	4699      	mov	r9, r3
    f6e2:	46a2      	mov	sl, r4
    f6e4:	46ab      	mov	fp, r5
    f6e6:	bdf0      	pop	{r4, r5, r6, r7, pc}
    f6e8:	7983      	ldrb	r3, [r0, #6]
    f6ea:	009d      	lsls	r5, r3, #2
    f6ec:	18ed      	adds	r5, r5, r3
    f6ee:	4b43      	ldr	r3, [pc, #268]	; (f7fc <handleDataMessage+0x1cc>)
    f6f0:	00ad      	lsls	r5, r5, #2
    f6f2:	469a      	mov	sl, r3
    f6f4:	681b      	ldr	r3, [r3, #0]
    f6f6:	6858      	ldr	r0, [r3, #4]
    f6f8:	4b41      	ldr	r3, [pc, #260]	; (f800 <handleDataMessage+0x1d0>)
    f6fa:	1940      	adds	r0, r0, r5
    f6fc:	4798      	blx	r3
    f6fe:	2800      	cmp	r0, #0
    f700:	d044      	beq.n	f78c <handleDataMessage+0x15c>
    f702:	4653      	mov	r3, sl
    f704:	681b      	ldr	r3, [r3, #0]
    f706:	685b      	ldr	r3, [r3, #4]
    f708:	195d      	adds	r5, r3, r5
    f70a:	68ab      	ldr	r3, [r5, #8]
    f70c:	60eb      	str	r3, [r5, #12]
    f70e:	4b3d      	ldr	r3, [pc, #244]	; (f804 <handleDataMessage+0x1d4>)
    f710:	7a1d      	ldrb	r5, [r3, #8]
    f712:	4698      	mov	r8, r3
    f714:	2d00      	cmp	r5, #0
    f716:	d0e0      	beq.n	f6da <handleDataMessage+0xaa>
    f718:	21ff      	movs	r1, #255	; 0xff
    f71a:	4b37      	ldr	r3, [pc, #220]	; (f7f8 <handleDataMessage+0x1c8>)
    f71c:	469b      	mov	fp, r3
    f71e:	881a      	ldrh	r2, [r3, #0]
    f720:	88e3      	ldrh	r3, [r4, #6]
    f722:	438b      	bics	r3, r1
    f724:	429a      	cmp	r2, r3
    f726:	d1d8      	bne.n	f6da <handleDataMessage+0xaa>
    f728:	4b31      	ldr	r3, [pc, #196]	; (f7f0 <handleDataMessage+0x1c0>)
    f72a:	2700      	movs	r7, #0
    f72c:	9301      	str	r3, [sp, #4]
    f72e:	4b36      	ldr	r3, [pc, #216]	; (f808 <handleDataMessage+0x1d8>)
    f730:	4699      	mov	r9, r3
    f732:	e00d      	b.n	f750 <handleDataMessage+0x120>
    f734:	4a35      	ldr	r2, [pc, #212]	; (f80c <handleDataMessage+0x1dc>)
    f736:	4293      	cmp	r3, r2
    f738:	d102      	bne.n	f740 <handleDataMessage+0x110>
    f73a:	8982      	ldrh	r2, [r0, #12]
    f73c:	428a      	cmp	r2, r1
    f73e:	d011      	beq.n	f764 <handleDataMessage+0x134>
    f740:	0031      	movs	r1, r6
    f742:	4640      	mov	r0, r8
    f744:	4b29      	ldr	r3, [pc, #164]	; (f7ec <handleDataMessage+0x1bc>)
    f746:	4798      	blx	r3
    f748:	3701      	adds	r7, #1
    f74a:	b2ff      	uxtb	r7, r7
    f74c:	42bd      	cmp	r5, r7
    f74e:	d0c4      	beq.n	f6da <handleDataMessage+0xaa>
    f750:	2100      	movs	r1, #0
    f752:	4640      	mov	r0, r8
    f754:	9b01      	ldr	r3, [sp, #4]
    f756:	4798      	blx	r3
    f758:	1e06      	subs	r6, r0, #0
    f75a:	d0be      	beq.n	f6da <handleDataMessage+0xaa>
    f75c:	88e1      	ldrh	r1, [r4, #6]
    f75e:	8b83      	ldrh	r3, [r0, #28]
    f760:	4299      	cmp	r1, r3
    f762:	d1e7      	bne.n	f734 <handleDataMessage+0x104>
    f764:	7e72      	ldrb	r2, [r6, #25]
    f766:	06d2      	lsls	r2, r2, #27
    f768:	d503      	bpl.n	f772 <handleDataMessage+0x142>
    f76a:	465a      	mov	r2, fp
    f76c:	8812      	ldrh	r2, [r2, #0]
    f76e:	4293      	cmp	r3, r2
    f770:	d010      	beq.n	f794 <handleDataMessage+0x164>
    f772:	4a27      	ldr	r2, [pc, #156]	; (f810 <handleDataMessage+0x1e0>)
    f774:	0030      	movs	r0, r6
    f776:	4b27      	ldr	r3, [pc, #156]	; (f814 <handleDataMessage+0x1e4>)
    f778:	4798      	blx	r3
    f77a:	2800      	cmp	r0, #0
    f77c:	d029      	beq.n	f7d2 <handleDataMessage+0x1a2>
    f77e:	2300      	movs	r3, #0
    f780:	0031      	movs	r1, r6
    f782:	7473      	strb	r3, [r6, #17]
    f784:	4648      	mov	r0, r9
    f786:	4b19      	ldr	r3, [pc, #100]	; (f7ec <handleDataMessage+0x1bc>)
    f788:	4798      	blx	r3
    f78a:	e7dd      	b.n	f748 <handleDataMessage+0x118>
    f78c:	88e0      	ldrh	r0, [r4, #6]
    f78e:	4b22      	ldr	r3, [pc, #136]	; (f818 <handleDataMessage+0x1e8>)
    f790:	4798      	blx	r3
    f792:	e7a2      	b.n	f6da <handleDataMessage+0xaa>
    f794:	4651      	mov	r1, sl
    f796:	2233      	movs	r2, #51	; 0x33
    f798:	6809      	ldr	r1, [r1, #0]
    f79a:	5c88      	ldrb	r0, [r1, r2]
    f79c:	0019      	movs	r1, r3
    f79e:	3001      	adds	r0, #1
    f7a0:	4b1e      	ldr	r3, [pc, #120]	; (f81c <handleDataMessage+0x1ec>)
    f7a2:	b2c0      	uxtb	r0, r0
    f7a4:	4798      	blx	r3
    f7a6:	4652      	mov	r2, sl
    f7a8:	233e      	movs	r3, #62	; 0x3e
    f7aa:	6812      	ldr	r2, [r2, #0]
    f7ac:	7430      	strb	r0, [r6, #16]
    f7ae:	5cd3      	ldrb	r3, [r2, r3]
    f7b0:	0030      	movs	r0, r6
    f7b2:	3301      	adds	r3, #1
    f7b4:	7473      	strb	r3, [r6, #17]
    f7b6:	88e1      	ldrh	r1, [r4, #6]
    f7b8:	4a19      	ldr	r2, [pc, #100]	; (f820 <handleDataMessage+0x1f0>)
    f7ba:	4b16      	ldr	r3, [pc, #88]	; (f814 <handleDataMessage+0x1e4>)
    f7bc:	4798      	blx	r3
    f7be:	2800      	cmp	r0, #0
    f7c0:	d102      	bne.n	f7c8 <handleDataMessage+0x198>
    f7c2:	7c73      	ldrb	r3, [r6, #17]
    f7c4:	3b01      	subs	r3, #1
    f7c6:	7473      	strb	r3, [r6, #17]
    f7c8:	0031      	movs	r1, r6
    f7ca:	4807      	ldr	r0, [pc, #28]	; (f7e8 <handleDataMessage+0x1b8>)
    f7cc:	4b07      	ldr	r3, [pc, #28]	; (f7ec <handleDataMessage+0x1bc>)
    f7ce:	4798      	blx	r3
    f7d0:	e7ba      	b.n	f748 <handleDataMessage+0x118>
    f7d2:	68b3      	ldr	r3, [r6, #8]
    f7d4:	2b00      	cmp	r3, #0
    f7d6:	d003      	beq.n	f7e0 <handleDataMessage+0x1b0>
    f7d8:	7cb0      	ldrb	r0, [r6, #18]
    f7da:	0032      	movs	r2, r6
    f7dc:	2101      	movs	r1, #1
    f7de:	4798      	blx	r3
    f7e0:	0030      	movs	r0, r6
    f7e2:	4b04      	ldr	r3, [pc, #16]	; (f7f4 <handleDataMessage+0x1c4>)
    f7e4:	4798      	blx	r3
    f7e6:	e778      	b.n	f6da <handleDataMessage+0xaa>
    f7e8:	2000287c 	.word	0x2000287c
    f7ec:	0000be0d 	.word	0x0000be0d
    f7f0:	0000be45 	.word	0x0000be45
    f7f4:	0000bccd 	.word	0x0000bccd
    f7f8:	200028b8 	.word	0x200028b8
    f7fc:	2000285c 	.word	0x2000285c
    f800:	00011809 	.word	0x00011809
    f804:	20002850 	.word	0x20002850
    f808:	20002844 	.word	0x20002844
    f80c:	0000ffff 	.word	0x0000ffff
    f810:	0000d2f9 	.word	0x0000d2f9
    f814:	0000f255 	.word	0x0000f255
    f818:	00011781 	.word	0x00011781
    f81c:	0000db61 	.word	0x0000db61
    f820:	0000d525 	.word	0x0000d525

0000f824 <indirectDataTimerHandler>:
    f824:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    f826:	46ce      	mov	lr, r9
    f828:	4647      	mov	r7, r8
    f82a:	b580      	push	{r7, lr}
    f82c:	4e18      	ldr	r6, [pc, #96]	; (f890 <indirectDataTimerHandler+0x6c>)
    f82e:	7a33      	ldrb	r3, [r6, #8]
    f830:	2b00      	cmp	r3, #0
    f832:	d029      	beq.n	f888 <indirectDataTimerHandler+0x64>
    f834:	4b17      	ldr	r3, [pc, #92]	; (f894 <indirectDataTimerHandler+0x70>)
    f836:	2500      	movs	r5, #0
    f838:	4698      	mov	r8, r3
    f83a:	4b17      	ldr	r3, [pc, #92]	; (f898 <indirectDataTimerHandler+0x74>)
    f83c:	4f17      	ldr	r7, [pc, #92]	; (f89c <indirectDataTimerHandler+0x78>)
    f83e:	4699      	mov	r9, r3
    f840:	e00d      	b.n	f85e <indirectDataTimerHandler+0x3a>
    f842:	6883      	ldr	r3, [r0, #8]
    f844:	2b00      	cmp	r3, #0
    f846:	d003      	beq.n	f850 <indirectDataTimerHandler+0x2c>
    f848:	7c80      	ldrb	r0, [r0, #18]
    f84a:	0022      	movs	r2, r4
    f84c:	2105      	movs	r1, #5
    f84e:	4798      	blx	r3
    f850:	0020      	movs	r0, r4
    f852:	47c8      	blx	r9
    f854:	3501      	adds	r5, #1
    f856:	7a33      	ldrb	r3, [r6, #8]
    f858:	b2ed      	uxtb	r5, r5
    f85a:	42ab      	cmp	r3, r5
    f85c:	d914      	bls.n	f888 <indirectDataTimerHandler+0x64>
    f85e:	2100      	movs	r1, #0
    f860:	0030      	movs	r0, r6
    f862:	47b8      	blx	r7
    f864:	1e04      	subs	r4, r0, #0
    f866:	d00f      	beq.n	f888 <indirectDataTimerHandler+0x64>
    f868:	7c03      	ldrb	r3, [r0, #16]
    f86a:	2b00      	cmp	r3, #0
    f86c:	d004      	beq.n	f878 <indirectDataTimerHandler+0x54>
    f86e:	3b01      	subs	r3, #1
    f870:	b2db      	uxtb	r3, r3
    f872:	7403      	strb	r3, [r0, #16]
    f874:	2b00      	cmp	r3, #0
    f876:	d0e4      	beq.n	f842 <indirectDataTimerHandler+0x1e>
    f878:	0021      	movs	r1, r4
    f87a:	0030      	movs	r0, r6
    f87c:	47c0      	blx	r8
    f87e:	3501      	adds	r5, #1
    f880:	7a33      	ldrb	r3, [r6, #8]
    f882:	b2ed      	uxtb	r5, r5
    f884:	42ab      	cmp	r3, r5
    f886:	d8ea      	bhi.n	f85e <indirectDataTimerHandler+0x3a>
    f888:	bc0c      	pop	{r2, r3}
    f88a:	4690      	mov	r8, r2
    f88c:	4699      	mov	r9, r3
    f88e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    f890:	20002850 	.word	0x20002850
    f894:	0000be0d 	.word	0x0000be0d
    f898:	0000bccd 	.word	0x0000bccd
    f89c:	0000be45 	.word	0x0000be45

0000f8a0 <addDuplicateRejectionTableEntry>:
    f8a0:	b5f0      	push	{r4, r5, r6, r7, lr}
    f8a2:	46c6      	mov	lr, r8
    f8a4:	2232      	movs	r2, #50	; 0x32
    f8a6:	b500      	push	{lr}
    f8a8:	4c1d      	ldr	r4, [pc, #116]	; (f920 <addDuplicateRejectionTableEntry+0x80>)
    f8aa:	4680      	mov	r8, r0
    f8ac:	6823      	ldr	r3, [r4, #0]
    f8ae:	468c      	mov	ip, r1
    f8b0:	5c9a      	ldrb	r2, [r3, r2]
    f8b2:	2a00      	cmp	r2, #0
    f8b4:	d014      	beq.n	f8e0 <addDuplicateRejectionTableEntry+0x40>
    f8b6:	6a5e      	ldr	r6, [r3, #36]	; 0x24
    f8b8:	4f1a      	ldr	r7, [pc, #104]	; (f924 <addDuplicateRejectionTableEntry+0x84>)
    f8ba:	8833      	ldrh	r3, [r6, #0]
    f8bc:	42bb      	cmp	r3, r7
    f8be:	d013      	beq.n	f8e8 <addDuplicateRejectionTableEntry+0x48>
    f8c0:	3a01      	subs	r2, #1
    f8c2:	b2d2      	uxtb	r2, r2
    f8c4:	3201      	adds	r2, #1
    f8c6:	0092      	lsls	r2, r2, #2
    f8c8:	1d33      	adds	r3, r6, #4
    f8ca:	18b2      	adds	r2, r6, r2
    f8cc:	e006      	b.n	f8dc <addDuplicateRejectionTableEntry+0x3c>
    f8ce:	1b99      	subs	r1, r3, r6
    f8d0:	0018      	movs	r0, r3
    f8d2:	3304      	adds	r3, #4
    f8d4:	1f1d      	subs	r5, r3, #4
    f8d6:	882d      	ldrh	r5, [r5, #0]
    f8d8:	42bd      	cmp	r5, r7
    f8da:	d007      	beq.n	f8ec <addDuplicateRejectionTableEntry+0x4c>
    f8dc:	4293      	cmp	r3, r2
    f8de:	d1f6      	bne.n	f8ce <addDuplicateRejectionTableEntry+0x2e>
    f8e0:	2000      	movs	r0, #0
    f8e2:	bc04      	pop	{r2}
    f8e4:	4690      	mov	r8, r2
    f8e6:	bdf0      	pop	{r4, r5, r6, r7, pc}
    f8e8:	0030      	movs	r0, r6
    f8ea:	2100      	movs	r1, #0
    f8ec:	4643      	mov	r3, r8
    f8ee:	4662      	mov	r2, ip
    f8f0:	8003      	strh	r3, [r0, #0]
    f8f2:	6823      	ldr	r3, [r4, #0]
    f8f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    f8f6:	185b      	adds	r3, r3, r1
    f8f8:	709a      	strb	r2, [r3, #2]
    f8fa:	6823      	ldr	r3, [r4, #0]
    f8fc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
    f8fe:	1855      	adds	r5, r2, r1
    f900:	2233      	movs	r2, #51	; 0x33
    f902:	5c9b      	ldrb	r3, [r3, r2]
    f904:	4641      	mov	r1, r8
    f906:	3301      	adds	r3, #1
    f908:	b2db      	uxtb	r3, r3
    f90a:	0018      	movs	r0, r3
    f90c:	4b06      	ldr	r3, [pc, #24]	; (f928 <addDuplicateRejectionTableEntry+0x88>)
    f90e:	4798      	blx	r3
    f910:	223e      	movs	r2, #62	; 0x3e
    f912:	6821      	ldr	r1, [r4, #0]
    f914:	1c83      	adds	r3, r0, #2
    f916:	5c88      	ldrb	r0, [r1, r2]
    f918:	4358      	muls	r0, r3
    f91a:	70e8      	strb	r0, [r5, #3]
    f91c:	2001      	movs	r0, #1
    f91e:	e7e0      	b.n	f8e2 <addDuplicateRejectionTableEntry+0x42>
    f920:	2000285c 	.word	0x2000285c
    f924:	0000ffff 	.word	0x0000ffff
    f928:	0000db61 	.word	0x0000db61

0000f92c <frameParse>:
    f92c:	b5f0      	push	{r4, r5, r6, r7, lr}
    f92e:	46de      	mov	lr, fp
    f930:	4657      	mov	r7, sl
    f932:	464e      	mov	r6, r9
    f934:	4645      	mov	r5, r8
    f936:	b5e0      	push	{r5, r6, r7, lr}
    f938:	4bc6      	ldr	r3, [pc, #792]	; (fc54 <frameParse+0x328>)
    f93a:	8a02      	ldrh	r2, [r0, #16]
    f93c:	881b      	ldrh	r3, [r3, #0]
    f93e:	b09b      	sub	sp, #108	; 0x6c
    f940:	0004      	movs	r4, r0
    f942:	4293      	cmp	r3, r2
    f944:	d006      	beq.n	f954 <frameParse+0x28>
    f946:	b01b      	add	sp, #108	; 0x6c
    f948:	bc3c      	pop	{r2, r3, r4, r5}
    f94a:	4690      	mov	r8, r2
    f94c:	4699      	mov	r9, r3
    f94e:	46a2      	mov	sl, r4
    f950:	46ab      	mov	fp, r5
    f952:	bdf0      	pop	{r4, r5, r6, r7, pc}
    f954:	6886      	ldr	r6, [r0, #8]
    f956:	ad0a      	add	r5, sp, #40	; 0x28
    f958:	7832      	ldrb	r2, [r6, #0]
    f95a:	702a      	strb	r2, [r5, #0]
    f95c:	7872      	ldrb	r2, [r6, #1]
    f95e:	706a      	strb	r2, [r5, #1]
    f960:	78b2      	ldrb	r2, [r6, #2]
    f962:	722a      	strb	r2, [r5, #8]
    f964:	7bc2      	ldrb	r2, [r0, #15]
    f966:	2a00      	cmp	r2, #0
    f968:	d000      	beq.n	f96c <frameParse+0x40>
    f96a:	e09c      	b.n	faa6 <frameParse+0x17a>
    f96c:	786a      	ldrb	r2, [r5, #1]
    f96e:	0691      	lsls	r1, r2, #26
    f970:	d500      	bpl.n	f974 <frameParse+0x48>
    f972:	e09e      	b.n	fab2 <frameParse+0x186>
    f974:	2308      	movs	r3, #8
    f976:	9304      	str	r3, [sp, #16]
    f978:	6863      	ldr	r3, [r4, #4]
    f97a:	7931      	ldrb	r1, [r6, #4]
    f97c:	4699      	mov	r9, r3
    f97e:	78f3      	ldrb	r3, [r6, #3]
    f980:	0209      	lsls	r1, r1, #8
    f982:	430b      	orrs	r3, r1
    f984:	79b1      	ldrb	r1, [r6, #6]
    f986:	806b      	strh	r3, [r5, #2]
    f988:	7973      	ldrb	r3, [r6, #5]
    f98a:	0209      	lsls	r1, r1, #8
    f98c:	430b      	orrs	r3, r1
    f98e:	7a31      	ldrb	r1, [r6, #8]
    f990:	80ab      	strh	r3, [r5, #4]
    f992:	79f3      	ldrb	r3, [r6, #7]
    f994:	0209      	lsls	r1, r1, #8
    f996:	430b      	orrs	r3, r1
    f998:	80eb      	strh	r3, [r5, #6]
    f99a:	2316      	movs	r3, #22
    f99c:	210a      	movs	r1, #10
    f99e:	9305      	str	r3, [sp, #20]
    f9a0:	469a      	mov	sl, r3
    f9a2:	469b      	mov	fp, r3
    f9a4:	3b08      	subs	r3, #8
    f9a6:	4698      	mov	r8, r3
    f9a8:	3b05      	subs	r3, #5
    f9aa:	0752      	lsls	r2, r2, #29
    f9ac:	d5cb      	bpl.n	f946 <frameParse+0x1a>
    f9ae:	5cf3      	ldrb	r3, [r6, r3]
    f9b0:	1871      	adds	r1, r6, r1
    f9b2:	742b      	strb	r3, [r5, #16]
    f9b4:	2204      	movs	r2, #4
    f9b6:	4ba8      	ldr	r3, [pc, #672]	; (fc58 <frameParse+0x32c>)
    f9b8:	a80f      	add	r0, sp, #60	; 0x3c
    f9ba:	4798      	blx	r3
    f9bc:	4643      	mov	r3, r8
    f9be:	2208      	movs	r2, #8
    f9c0:	18f1      	adds	r1, r6, r3
    f9c2:	a810      	add	r0, sp, #64	; 0x40
    f9c4:	4ba4      	ldr	r3, [pc, #656]	; (fc58 <frameParse+0x32c>)
    f9c6:	4798      	blx	r3
    f9c8:	465b      	mov	r3, fp
    f9ca:	7b20      	ldrb	r0, [r4, #12]
    f9cc:	1ac0      	subs	r0, r0, r3
    f9ce:	b2c3      	uxtb	r3, r0
    f9d0:	4698      	mov	r8, r3
    f9d2:	9804      	ldr	r0, [sp, #16]
    f9d4:	4ba1      	ldr	r3, [pc, #644]	; (fc5c <frameParse+0x330>)
    f9d6:	4798      	blx	r3
    f9d8:	9001      	str	r0, [sp, #4]
    f9da:	68a3      	ldr	r3, [r4, #8]
    f9dc:	465a      	mov	r2, fp
    f9de:	9300      	str	r3, [sp, #0]
    f9e0:	a910      	add	r1, sp, #64	; 0x40
    f9e2:	4643      	mov	r3, r8
    f9e4:	0028      	movs	r0, r5
    f9e6:	4f9e      	ldr	r7, [pc, #632]	; (fc60 <frameParse+0x334>)
    f9e8:	47b8      	blx	r7
    f9ea:	28ff      	cmp	r0, #255	; 0xff
    f9ec:	d0ab      	beq.n	f946 <frameParse+0x1a>
    f9ee:	0033      	movs	r3, r6
    f9f0:	4453      	add	r3, sl
    f9f2:	9306      	str	r3, [sp, #24]
    f9f4:	4643      	mov	r3, r8
    f9f6:	1a18      	subs	r0, r3, r0
    f9f8:	b2c3      	uxtb	r3, r0
    f9fa:	9307      	str	r3, [sp, #28]
    f9fc:	88a8      	ldrh	r0, [r5, #4]
    f9fe:	4b99      	ldr	r3, [pc, #612]	; (fc64 <frameParse+0x338>)
    fa00:	4298      	cmp	r0, r3
    fa02:	d900      	bls.n	fa06 <frameParse+0xda>
    fa04:	e079      	b.n	fafa <frameParse+0x1ce>
    fa06:	4b98      	ldr	r3, [pc, #608]	; (fc68 <frameParse+0x33c>)
    fa08:	881a      	ldrh	r2, [r3, #0]
    fa0a:	4290      	cmp	r0, r2
    fa0c:	d100      	bne.n	fa10 <frameParse+0xe4>
    fa0e:	e153      	b.n	fcb8 <frameParse+0x38c>
    fa10:	21ff      	movs	r1, #255	; 0xff
    fa12:	0004      	movs	r4, r0
    fa14:	881a      	ldrh	r2, [r3, #0]
    fa16:	438c      	bics	r4, r1
    fa18:	4294      	cmp	r4, r2
    fa1a:	d100      	bne.n	fa1e <frameParse+0xf2>
    fa1c:	e14f      	b.n	fcbe <frameParse+0x392>
    fa1e:	881a      	ldrh	r2, [r3, #0]
    fa20:	4290      	cmp	r0, r2
    fa22:	d100      	bne.n	fa26 <frameParse+0xfa>
    fa24:	e78f      	b.n	f946 <frameParse+0x1a>
    fa26:	782a      	ldrb	r2, [r5, #0]
    fa28:	2a00      	cmp	r2, #0
    fa2a:	d100      	bne.n	fa2e <frameParse+0x102>
    fa2c:	e78b      	b.n	f946 <frameParse+0x1a>
    fa2e:	498f      	ldr	r1, [pc, #572]	; (fc6c <frameParse+0x340>)
    fa30:	7809      	ldrb	r1, [r1, #0]
    fa32:	2906      	cmp	r1, #6
    fa34:	d000      	beq.n	fa38 <frameParse+0x10c>
    fa36:	e786      	b.n	f946 <frameParse+0x1a>
    fa38:	881b      	ldrh	r3, [r3, #0]
    fa3a:	88e9      	ldrh	r1, [r5, #6]
    fa3c:	4299      	cmp	r1, r3
    fa3e:	d100      	bne.n	fa42 <frameParse+0x116>
    fa40:	e781      	b.n	f946 <frameParse+0x1a>
    fa42:	3a01      	subs	r2, #1
    fa44:	4b8a      	ldr	r3, [pc, #552]	; (fc70 <frameParse+0x344>)
    fa46:	702a      	strb	r2, [r5, #0]
    fa48:	4798      	blx	r3
    fa4a:	4b8a      	ldr	r3, [pc, #552]	; (fc74 <frameParse+0x348>)
    fa4c:	ac12      	add	r4, sp, #72	; 0x48
    fa4e:	8020      	strh	r0, [r4, #0]
    fa50:	4298      	cmp	r0, r3
    fa52:	d100      	bne.n	fa56 <frameParse+0x12a>
    fa54:	e35c      	b.n	10110 <frameParse+0x7e4>
    fa56:	2088      	movs	r0, #136	; 0x88
    fa58:	4b87      	ldr	r3, [pc, #540]	; (fc78 <frameParse+0x34c>)
    fa5a:	4798      	blx	r3
    fa5c:	1e06      	subs	r6, r0, #0
    fa5e:	d100      	bne.n	fa62 <frameParse+0x136>
    fa60:	e771      	b.n	f946 <frameParse+0x1a>
    fa62:	0001      	movs	r1, r0
    fa64:	4b85      	ldr	r3, [pc, #532]	; (fc7c <frameParse+0x350>)
    fa66:	0028      	movs	r0, r5
    fa68:	4798      	blx	r3
    fa6a:	7a2b      	ldrb	r3, [r5, #8]
    fa6c:	0007      	movs	r7, r0
    fa6e:	70b3      	strb	r3, [r6, #2]
    fa70:	9b07      	ldr	r3, [sp, #28]
    fa72:	9906      	ldr	r1, [sp, #24]
    fa74:	001a      	movs	r2, r3
    fa76:	4698      	mov	r8, r3
    fa78:	1830      	adds	r0, r6, r0
    fa7a:	4b77      	ldr	r3, [pc, #476]	; (fc58 <frameParse+0x32c>)
    fa7c:	4798      	blx	r3
    fa7e:	4b80      	ldr	r3, [pc, #512]	; (fc80 <frameParse+0x354>)
    fa80:	9401      	str	r4, [sp, #4]
    fa82:	9303      	str	r3, [sp, #12]
    fa84:	2300      	movs	r3, #0
    fa86:	9302      	str	r3, [sp, #8]
    fa88:	3302      	adds	r3, #2
    fa8a:	9300      	str	r3, [sp, #0]
    fa8c:	4642      	mov	r2, r8
    fa8e:	0033      	movs	r3, r6
    fa90:	0039      	movs	r1, r7
    fa92:	0028      	movs	r0, r5
    fa94:	4c7b      	ldr	r4, [pc, #492]	; (fc84 <frameParse+0x358>)
    fa96:	47a0      	blx	r4
    fa98:	2800      	cmp	r0, #0
    fa9a:	d000      	beq.n	fa9e <frameParse+0x172>
    fa9c:	e753      	b.n	f946 <frameParse+0x1a>
    fa9e:	0030      	movs	r0, r6
    faa0:	4b79      	ldr	r3, [pc, #484]	; (fc88 <frameParse+0x35c>)
    faa2:	4798      	blx	r3
    faa4:	e74f      	b.n	f946 <frameParse+0x1a>
    faa6:	786a      	ldrb	r2, [r5, #1]
    faa8:	0691      	lsls	r1, r2, #26
    faaa:	d417      	bmi.n	fadc <frameParse+0x1b0>
    faac:	2302      	movs	r3, #2
    faae:	9304      	str	r3, [sp, #16]
    fab0:	e762      	b.n	f978 <frameParse+0x4c>
    fab2:	6862      	ldr	r2, [r4, #4]
    fab4:	806b      	strh	r3, [r5, #2]
    fab6:	2308      	movs	r3, #8
    fab8:	4691      	mov	r9, r2
    faba:	9304      	str	r3, [sp, #16]
    fabc:	7823      	ldrb	r3, [r4, #0]
    fabe:	075b      	lsls	r3, r3, #29
    fac0:	d518      	bpl.n	faf4 <frameParse+0x1c8>
    fac2:	2301      	movs	r3, #1
    fac4:	425b      	negs	r3, r3
    fac6:	80ab      	strh	r3, [r5, #4]
    fac8:	2310      	movs	r3, #16
    faca:	9305      	str	r3, [sp, #20]
    facc:	469a      	mov	sl, r3
    face:	469b      	mov	fp, r3
    fad0:	3b08      	subs	r3, #8
    fad2:	4698      	mov	r8, r3
    fad4:	786a      	ldrb	r2, [r5, #1]
    fad6:	2104      	movs	r1, #4
    fad8:	3b05      	subs	r3, #5
    fada:	e766      	b.n	f9aa <frameParse+0x7e>
    fadc:	6862      	ldr	r2, [r4, #4]
    fade:	806b      	strh	r3, [r5, #2]
    fae0:	0013      	movs	r3, r2
    fae2:	4691      	mov	r9, r2
    fae4:	7852      	ldrb	r2, [r2, #1]
    fae6:	781b      	ldrb	r3, [r3, #0]
    fae8:	0212      	lsls	r2, r2, #8
    faea:	4313      	orrs	r3, r2
    faec:	80eb      	strh	r3, [r5, #6]
    faee:	2302      	movs	r3, #2
    faf0:	9304      	str	r3, [sp, #16]
    faf2:	e7e3      	b.n	fabc <frameParse+0x190>
    faf4:	4b5c      	ldr	r3, [pc, #368]	; (fc68 <frameParse+0x33c>)
    faf6:	881b      	ldrh	r3, [r3, #0]
    faf8:	e7e5      	b.n	fac6 <frameParse+0x19a>
    fafa:	7a2b      	ldrb	r3, [r5, #8]
    fafc:	88ee      	ldrh	r6, [r5, #6]
    fafe:	4698      	mov	r8, r3
    fb00:	4b62      	ldr	r3, [pc, #392]	; (fc8c <frameParse+0x360>)
    fb02:	469a      	mov	sl, r3
    fb04:	681b      	ldr	r3, [r3, #0]
    fb06:	7fda      	ldrb	r2, [r3, #31]
    fb08:	469c      	mov	ip, r3
    fb0a:	2a00      	cmp	r2, #0
    fb0c:	d014      	beq.n	fb38 <frameParse+0x20c>
    fb0e:	3a01      	subs	r2, #1
    fb10:	b2d1      	uxtb	r1, r2
    fb12:	4642      	mov	r2, r8
    fb14:	691b      	ldr	r3, [r3, #16]
    fb16:	3101      	adds	r1, #1
    fb18:	0089      	lsls	r1, r1, #2
    fb1a:	4680      	mov	r8, r0
    fb1c:	1859      	adds	r1, r3, r1
    fb1e:	0010      	movs	r0, r2
    fb20:	e002      	b.n	fb28 <frameParse+0x1fc>
    fb22:	3304      	adds	r3, #4
    fb24:	4299      	cmp	r1, r3
    fb26:	d006      	beq.n	fb36 <frameParse+0x20a>
    fb28:	881a      	ldrh	r2, [r3, #0]
    fb2a:	42b2      	cmp	r2, r6
    fb2c:	d1f9      	bne.n	fb22 <frameParse+0x1f6>
    fb2e:	789a      	ldrb	r2, [r3, #2]
    fb30:	4282      	cmp	r2, r0
    fb32:	d1f6      	bne.n	fb22 <frameParse+0x1f6>
    fb34:	e707      	b.n	f946 <frameParse+0x1a>
    fb36:	4640      	mov	r0, r8
    fb38:	4b4e      	ldr	r3, [pc, #312]	; (fc74 <frameParse+0x348>)
    fb3a:	4298      	cmp	r0, r3
    fb3c:	d100      	bne.n	fb40 <frameParse+0x214>
    fb3e:	e14a      	b.n	fdd6 <frameParse+0x4aa>
    fb40:	2301      	movs	r3, #1
    fb42:	4698      	mov	r8, r3
    fb44:	2310      	movs	r3, #16
    fb46:	7869      	ldrb	r1, [r5, #1]
    fb48:	420b      	tst	r3, r1
    fb4a:	d005      	beq.n	fb58 <frameParse+0x22c>
    fb4c:	4a46      	ldr	r2, [pc, #280]	; (fc68 <frameParse+0x33c>)
    fb4e:	88a8      	ldrh	r0, [r5, #4]
    fb50:	8816      	ldrh	r6, [r2, #0]
    fb52:	42b0      	cmp	r0, r6
    fb54:	d100      	bne.n	fb58 <frameParse+0x22c>
    fb56:	e18f      	b.n	fe78 <frameParse+0x54c>
    fb58:	2603      	movs	r6, #3
    fb5a:	400e      	ands	r6, r1
    fb5c:	2e01      	cmp	r6, #1
    fb5e:	d100      	bne.n	fb62 <frameParse+0x236>
    fb60:	e0ed      	b.n	fd3e <frameParse+0x412>
    fb62:	07cb      	lsls	r3, r1, #31
    fb64:	d405      	bmi.n	fb72 <frameParse+0x246>
    fb66:	4b41      	ldr	r3, [pc, #260]	; (fc6c <frameParse+0x340>)
    fb68:	781b      	ldrb	r3, [r3, #0]
    fb6a:	3b06      	subs	r3, #6
    fb6c:	2b01      	cmp	r3, #1
    fb6e:	d800      	bhi.n	fb72 <frameParse+0x246>
    fb70:	e105      	b.n	fd7e <frameParse+0x452>
    fb72:	4643      	mov	r3, r8
    fb74:	2b00      	cmp	r3, #0
    fb76:	d100      	bne.n	fb7a <frameParse+0x24e>
    fb78:	e6e5      	b.n	f946 <frameParse+0x1a>
    fb7a:	782b      	ldrb	r3, [r5, #0]
    fb7c:	2b00      	cmp	r3, #0
    fb7e:	d100      	bne.n	fb82 <frameParse+0x256>
    fb80:	e6e1      	b.n	f946 <frameParse+0x1a>
    fb82:	4b3a      	ldr	r3, [pc, #232]	; (fc6c <frameParse+0x340>)
    fb84:	781b      	ldrb	r3, [r3, #0]
    fb86:	2b06      	cmp	r3, #6
    fb88:	d000      	beq.n	fb8c <frameParse+0x260>
    fb8a:	e6dc      	b.n	f946 <frameParse+0x1a>
    fb8c:	ab12      	add	r3, sp, #72	; 0x48
    fb8e:	001a      	movs	r2, r3
    fb90:	9308      	str	r3, [sp, #32]
    fb92:	2301      	movs	r3, #1
    fb94:	425b      	negs	r3, r3
    fb96:	8013      	strh	r3, [r2, #0]
    fb98:	2088      	movs	r0, #136	; 0x88
    fb9a:	4b37      	ldr	r3, [pc, #220]	; (fc78 <frameParse+0x34c>)
    fb9c:	4798      	blx	r3
    fb9e:	4680      	mov	r8, r0
    fba0:	2800      	cmp	r0, #0
    fba2:	d100      	bne.n	fba6 <frameParse+0x27a>
    fba4:	e6cf      	b.n	f946 <frameParse+0x1a>
    fba6:	782b      	ldrb	r3, [r5, #0]
    fba8:	3b01      	subs	r3, #1
    fbaa:	b2db      	uxtb	r3, r3
    fbac:	702b      	strb	r3, [r5, #0]
    fbae:	7003      	strb	r3, [r0, #0]
    fbb0:	786b      	ldrb	r3, [r5, #1]
    fbb2:	7043      	strb	r3, [r0, #1]
    fbb4:	7a2b      	ldrb	r3, [r5, #8]
    fbb6:	7083      	strb	r3, [r0, #2]
    fbb8:	786b      	ldrb	r3, [r5, #1]
    fbba:	069a      	lsls	r2, r3, #26
    fbbc:	d500      	bpl.n	fbc0 <frameParse+0x294>
    fbbe:	e1f3      	b.n	ffa8 <frameParse+0x67c>
    fbc0:	886a      	ldrh	r2, [r5, #2]
    fbc2:	2716      	movs	r7, #22
    fbc4:	70c2      	strb	r2, [r0, #3]
    fbc6:	886a      	ldrh	r2, [r5, #2]
    fbc8:	260e      	movs	r6, #14
    fbca:	0a12      	lsrs	r2, r2, #8
    fbcc:	7102      	strb	r2, [r0, #4]
    fbce:	88aa      	ldrh	r2, [r5, #4]
    fbd0:	7142      	strb	r2, [r0, #5]
    fbd2:	88aa      	ldrh	r2, [r5, #4]
    fbd4:	0a12      	lsrs	r2, r2, #8
    fbd6:	7182      	strb	r2, [r0, #6]
    fbd8:	88ea      	ldrh	r2, [r5, #6]
    fbda:	71c2      	strb	r2, [r0, #7]
    fbdc:	88ea      	ldrh	r2, [r5, #6]
    fbde:	0a12      	lsrs	r2, r2, #8
    fbe0:	7202      	strb	r2, [r0, #8]
    fbe2:	2216      	movs	r2, #22
    fbe4:	4692      	mov	sl, r2
    fbe6:	3a0d      	subs	r2, #13
    fbe8:	200a      	movs	r0, #10
    fbea:	4691      	mov	r9, r2
    fbec:	9204      	str	r2, [sp, #16]
    fbee:	075b      	lsls	r3, r3, #29
    fbf0:	d518      	bpl.n	fc24 <frameParse+0x2f8>
    fbf2:	4b27      	ldr	r3, [pc, #156]	; (fc90 <frameParse+0x364>)
    fbf4:	4649      	mov	r1, r9
    fbf6:	681a      	ldr	r2, [r3, #0]
    fbf8:	2320      	movs	r3, #32
    fbfa:	5cd3      	ldrb	r3, [r2, r3]
    fbfc:	4a25      	ldr	r2, [pc, #148]	; (fc94 <frameParse+0x368>)
    fbfe:	742b      	strb	r3, [r5, #16]
    fc00:	6812      	ldr	r2, [r2, #0]
    fc02:	4440      	add	r0, r8
    fc04:	616a      	str	r2, [r5, #20]
    fc06:	4642      	mov	r2, r8
    fc08:	5453      	strb	r3, [r2, r1]
    fc0a:	2204      	movs	r2, #4
    fc0c:	a90f      	add	r1, sp, #60	; 0x3c
    fc0e:	4b12      	ldr	r3, [pc, #72]	; (fc58 <frameParse+0x32c>)
    fc10:	4798      	blx	r3
    fc12:	0030      	movs	r0, r6
    fc14:	4b10      	ldr	r3, [pc, #64]	; (fc58 <frameParse+0x32c>)
    fc16:	4440      	add	r0, r8
    fc18:	2208      	movs	r2, #8
    fc1a:	491f      	ldr	r1, [pc, #124]	; (fc98 <frameParse+0x36c>)
    fc1c:	4798      	blx	r3
    fc1e:	4653      	mov	r3, sl
    fc20:	46b9      	mov	r9, r7
    fc22:	9304      	str	r3, [sp, #16]
    fc24:	4642      	mov	r2, r8
    fc26:	7a2b      	ldrb	r3, [r5, #8]
    fc28:	7093      	strb	r3, [r2, #2]
    fc2a:	4b18      	ldr	r3, [pc, #96]	; (fc8c <frameParse+0x360>)
    fc2c:	469a      	mov	sl, r3
    fc2e:	681b      	ldr	r3, [r3, #0]
    fc30:	7fda      	ldrb	r2, [r3, #31]
    fc32:	2a00      	cmp	r2, #0
    fc34:	d03c      	beq.n	fcb0 <frameParse+0x384>
    fc36:	6918      	ldr	r0, [r3, #16]
    fc38:	4e0e      	ldr	r6, [pc, #56]	; (fc74 <frameParse+0x348>)
    fc3a:	8803      	ldrh	r3, [r0, #0]
    fc3c:	42b3      	cmp	r3, r6
    fc3e:	d100      	bne.n	fc42 <frameParse+0x316>
    fc40:	e2b3      	b.n	101aa <frameParse+0x87e>
    fc42:	3a01      	subs	r2, #1
    fc44:	b2d1      	uxtb	r1, r2
    fc46:	3101      	adds	r1, #1
    fc48:	0089      	lsls	r1, r1, #2
    fc4a:	1d03      	adds	r3, r0, #4
    fc4c:	1841      	adds	r1, r0, r1
    fc4e:	46a4      	mov	ip, r4
    fc50:	e02c      	b.n	fcac <frameParse+0x380>
    fc52:	46c0      	nop			; (mov r8, r8)
    fc54:	200028a8 	.word	0x200028a8
    fc58:	00014cdf 	.word	0x00014cdf
    fc5c:	0001226d 	.word	0x0001226d
    fc60:	000123b1 	.word	0x000123b1
    fc64:	0000fffc 	.word	0x0000fffc
    fc68:	200028b8 	.word	0x200028b8
    fc6c:	20001ce1 	.word	0x20001ce1
    fc70:	00011f69 	.word	0x00011f69
    fc74:	0000ffff 	.word	0x0000ffff
    fc78:	0000bc11 	.word	0x0000bc11
    fc7c:	0000f079 	.word	0x0000f079
    fc80:	0000f005 	.word	0x0000f005
    fc84:	0000f105 	.word	0x0000f105
    fc88:	0000bccd 	.word	0x0000bccd
    fc8c:	2000285c 	.word	0x2000285c
    fc90:	20002860 	.word	0x20002860
    fc94:	20002914 	.word	0x20002914
    fc98:	20000094 	.word	0x20000094
    fc9c:	1a1c      	subs	r4, r3, r0
    fc9e:	001f      	movs	r7, r3
    fca0:	3304      	adds	r3, #4
    fca2:	1f1a      	subs	r2, r3, #4
    fca4:	8812      	ldrh	r2, [r2, #0]
    fca6:	42b2      	cmp	r2, r6
    fca8:	d100      	bne.n	fcac <frameParse+0x380>
    fcaa:	e1b1      	b.n	10010 <frameParse+0x6e4>
    fcac:	4299      	cmp	r1, r3
    fcae:	d1f5      	bne.n	fc9c <frameParse+0x370>
    fcb0:	4640      	mov	r0, r8
    fcb2:	4bc2      	ldr	r3, [pc, #776]	; (ffbc <frameParse+0x690>)
    fcb4:	4798      	blx	r3
    fcb6:	e646      	b.n	f946 <frameParse+0x1a>
    fcb8:	2300      	movs	r3, #0
    fcba:	4698      	mov	r8, r3
    fcbc:	e742      	b.n	fb44 <frameParse+0x218>
    fcbe:	4ac0      	ldr	r2, [pc, #768]	; (ffc0 <frameParse+0x694>)
    fcc0:	7812      	ldrb	r2, [r2, #0]
    fcc2:	2a06      	cmp	r2, #6
    fcc4:	d000      	beq.n	fcc8 <frameParse+0x39c>
    fcc6:	e6aa      	b.n	fa1e <frameParse+0xf2>
    fcc8:	2680      	movs	r6, #128	; 0x80
    fcca:	4006      	ands	r6, r0
    fccc:	d100      	bne.n	fcd0 <frameParse+0x3a4>
    fcce:	e1fb      	b.n	100c8 <frameParse+0x79c>
    fcd0:	2088      	movs	r0, #136	; 0x88
    fcd2:	4bbc      	ldr	r3, [pc, #752]	; (ffc4 <frameParse+0x698>)
    fcd4:	4798      	blx	r3
    fcd6:	1e06      	subs	r6, r0, #0
    fcd8:	d100      	bne.n	fcdc <frameParse+0x3b0>
    fcda:	e634      	b.n	f946 <frameParse+0x1a>
    fcdc:	782b      	ldrb	r3, [r5, #0]
    fcde:	88ea      	ldrh	r2, [r5, #6]
    fce0:	88a9      	ldrh	r1, [r5, #4]
    fce2:	2bff      	cmp	r3, #255	; 0xff
    fce4:	d100      	bne.n	fce8 <frameParse+0x3bc>
    fce6:	e235      	b.n	10154 <frameParse+0x828>
    fce8:	ac12      	add	r4, sp, #72	; 0x48
    fcea:	7023      	strb	r3, [r4, #0]
    fcec:	4bb6      	ldr	r3, [pc, #728]	; (ffc8 <frameParse+0x69c>)
    fcee:	80e2      	strh	r2, [r4, #6]
    fcf0:	881b      	ldrh	r3, [r3, #0]
    fcf2:	4ab6      	ldr	r2, [pc, #728]	; (ffcc <frameParse+0x6a0>)
    fcf4:	8063      	strh	r3, [r4, #2]
    fcf6:	7813      	ldrb	r3, [r2, #0]
    fcf8:	80a1      	strh	r1, [r4, #4]
    fcfa:	3301      	adds	r3, #1
    fcfc:	b2db      	uxtb	r3, r3
    fcfe:	7013      	strb	r3, [r2, #0]
    fd00:	7223      	strb	r3, [r4, #8]
    fd02:	786b      	ldrb	r3, [r5, #1]
    fd04:	0031      	movs	r1, r6
    fd06:	7063      	strb	r3, [r4, #1]
    fd08:	0020      	movs	r0, r4
    fd0a:	4bb1      	ldr	r3, [pc, #708]	; (ffd0 <frameParse+0x6a4>)
    fd0c:	4798      	blx	r3
    fd0e:	7a2b      	ldrb	r3, [r5, #8]
    fd10:	9d07      	ldr	r5, [sp, #28]
    fd12:	0007      	movs	r7, r0
    fd14:	70b3      	strb	r3, [r6, #2]
    fd16:	002a      	movs	r2, r5
    fd18:	9906      	ldr	r1, [sp, #24]
    fd1a:	1830      	adds	r0, r6, r0
    fd1c:	4bad      	ldr	r3, [pc, #692]	; (ffd4 <frameParse+0x6a8>)
    fd1e:	4798      	blx	r3
    fd20:	4bad      	ldr	r3, [pc, #692]	; (ffd8 <frameParse+0x6ac>)
    fd22:	002a      	movs	r2, r5
    fd24:	9303      	str	r3, [sp, #12]
    fd26:	2300      	movs	r3, #0
    fd28:	9302      	str	r3, [sp, #8]
    fd2a:	ab0b      	add	r3, sp, #44	; 0x2c
    fd2c:	9301      	str	r3, [sp, #4]
    fd2e:	2302      	movs	r3, #2
    fd30:	0039      	movs	r1, r7
    fd32:	9300      	str	r3, [sp, #0]
    fd34:	0020      	movs	r0, r4
    fd36:	0033      	movs	r3, r6
    fd38:	4ca8      	ldr	r4, [pc, #672]	; (ffdc <frameParse+0x6b0>)
    fd3a:	47a0      	blx	r4
    fd3c:	e603      	b.n	f946 <frameParse+0x1a>
    fd3e:	9b06      	ldr	r3, [sp, #24]
    fd40:	781a      	ldrb	r2, [r3, #0]
    fd42:	230f      	movs	r3, #15
    fd44:	0010      	movs	r0, r2
    fd46:	4398      	bics	r0, r3
    fd48:	2820      	cmp	r0, #32
    fd4a:	d100      	bne.n	fd4e <frameParse+0x422>
    fd4c:	e1a6      	b.n	1009c <frameParse+0x770>
    fd4e:	d900      	bls.n	fd52 <frameParse+0x426>
    fd50:	e0f7      	b.n	ff42 <frameParse+0x616>
    fd52:	2800      	cmp	r0, #0
    fd54:	d100      	bne.n	fd58 <frameParse+0x42c>
    fd56:	e198      	b.n	1008a <frameParse+0x75e>
    fd58:	2810      	cmp	r0, #16
    fd5a:	d000      	beq.n	fd5e <frameParse+0x432>
    fd5c:	e701      	b.n	fb62 <frameParse+0x236>
    fd5e:	4b98      	ldr	r3, [pc, #608]	; (ffc0 <frameParse+0x694>)
    fd60:	781b      	ldrb	r3, [r3, #0]
    fd62:	2b06      	cmp	r3, #6
    fd64:	d000      	beq.n	fd68 <frameParse+0x43c>
    fd66:	e704      	b.n	fb72 <frameParse+0x246>
    fd68:	7ba3      	ldrb	r3, [r4, #14]
    fd6a:	9904      	ldr	r1, [sp, #16]
    fd6c:	9300      	str	r3, [sp, #0]
    fd6e:	464a      	mov	r2, r9
    fd70:	9b06      	ldr	r3, [sp, #24]
    fd72:	0028      	movs	r0, r5
    fd74:	4e9a      	ldr	r6, [pc, #616]	; (ffe0 <frameParse+0x6b4>)
    fd76:	47b0      	blx	r6
    fd78:	7869      	ldrb	r1, [r5, #1]
    fd7a:	4680      	mov	r8, r0
    fd7c:	e6f1      	b.n	fb62 <frameParse+0x236>
    fd7e:	88aa      	ldrh	r2, [r5, #4]
    fd80:	4b98      	ldr	r3, [pc, #608]	; (ffe4 <frameParse+0x6b8>)
    fd82:	429a      	cmp	r2, r3
    fd84:	d800      	bhi.n	fd88 <frameParse+0x45c>
    fd86:	e0f6      	b.n	ff76 <frameParse+0x64a>
    fd88:	20ff      	movs	r0, #255	; 0xff
    fd8a:	4b97      	ldr	r3, [pc, #604]	; (ffe8 <frameParse+0x6bc>)
    fd8c:	8819      	ldrh	r1, [r3, #0]
    fd8e:	4208      	tst	r0, r1
    fd90:	d100      	bne.n	fd94 <frameParse+0x468>
    fd92:	e171      	b.n	10078 <frameParse+0x74c>
    fd94:	8819      	ldrh	r1, [r3, #0]
    fd96:	0609      	lsls	r1, r1, #24
    fd98:	d500      	bpl.n	fd9c <frameParse+0x470>
    fd9a:	e16d      	b.n	10078 <frameParse+0x74c>
    fd9c:	4993      	ldr	r1, [pc, #588]	; (ffec <frameParse+0x6c0>)
    fd9e:	428a      	cmp	r2, r1
    fda0:	d000      	beq.n	fda4 <frameParse+0x478>
    fda2:	e6e6      	b.n	fb72 <frameParse+0x246>
    fda4:	881b      	ldrh	r3, [r3, #0]
    fda6:	88eb      	ldrh	r3, [r5, #6]
    fda8:	a812      	add	r0, sp, #72	; 0x48
    fdaa:	8003      	strh	r3, [r0, #0]
    fdac:	466b      	mov	r3, sp
    fdae:	7f1b      	ldrb	r3, [r3, #28]
    fdb0:	786a      	ldrb	r2, [r5, #1]
    fdb2:	7203      	strb	r3, [r0, #8]
    fdb4:	9b06      	ldr	r3, [sp, #24]
    fdb6:	6043      	str	r3, [r0, #4]
    fdb8:	7ba3      	ldrb	r3, [r4, #14]
    fdba:	7283      	strb	r3, [r0, #10]
    fdbc:	7b63      	ldrb	r3, [r4, #13]
    fdbe:	7243      	strb	r3, [r0, #9]
    fdc0:	2303      	movs	r3, #3
    fdc2:	4013      	ands	r3, r2
    fdc4:	d000      	beq.n	fdc8 <frameParse+0x49c>
    fdc6:	e175      	b.n	100b4 <frameParse+0x788>
    fdc8:	4b89      	ldr	r3, [pc, #548]	; (fff0 <frameParse+0x6c4>)
    fdca:	681b      	ldr	r3, [r3, #0]
    fdcc:	2b00      	cmp	r3, #0
    fdce:	d100      	bne.n	fdd2 <frameParse+0x4a6>
    fdd0:	e6cf      	b.n	fb72 <frameParse+0x246>
    fdd2:	4798      	blx	r3
    fdd4:	e6cd      	b.n	fb72 <frameParse+0x246>
    fdd6:	782b      	ldrb	r3, [r5, #0]
    fdd8:	2b01      	cmp	r3, #1
    fdda:	dc00      	bgt.n	fdde <frameParse+0x4b2>
    fddc:	e6b0      	b.n	fb40 <frameParse+0x214>
    fdde:	4663      	mov	r3, ip
    fde0:	7edb      	ldrb	r3, [r3, #27]
    fde2:	2b01      	cmp	r3, #1
    fde4:	d800      	bhi.n	fde8 <frameParse+0x4bc>
    fde6:	e6ab      	b.n	fb40 <frameParse+0x214>
    fde8:	4652      	mov	r2, sl
    fdea:	2601      	movs	r6, #1
    fdec:	46a2      	mov	sl, r4
    fdee:	464f      	mov	r7, r9
    fdf0:	4663      	mov	r3, ip
    fdf2:	0014      	movs	r4, r2
    fdf4:	e006      	b.n	fe04 <frameParse+0x4d8>
    fdf6:	6823      	ldr	r3, [r4, #0]
    fdf8:	3601      	adds	r6, #1
    fdfa:	7eda      	ldrb	r2, [r3, #27]
    fdfc:	b2f6      	uxtb	r6, r6
    fdfe:	42b2      	cmp	r2, r6
    fe00:	d800      	bhi.n	fe04 <frameParse+0x4d8>
    fe02:	e0b5      	b.n	ff70 <frameParse+0x644>
    fe04:	00b0      	lsls	r0, r6, #2
    fe06:	685b      	ldr	r3, [r3, #4]
    fe08:	1980      	adds	r0, r0, r6
    fe0a:	0080      	lsls	r0, r0, #2
    fe0c:	1818      	adds	r0, r3, r0
    fe0e:	4b79      	ldr	r3, [pc, #484]	; (fff4 <frameParse+0x6c8>)
    fe10:	4798      	blx	r3
    fe12:	2800      	cmp	r0, #0
    fe14:	d0ef      	beq.n	fdf6 <frameParse+0x4ca>
    fe16:	4b78      	ldr	r3, [pc, #480]	; (fff8 <frameParse+0x6cc>)
    fe18:	4798      	blx	r3
    fe1a:	2832      	cmp	r0, #50	; 0x32
    fe1c:	d9eb      	bls.n	fdf6 <frameParse+0x4ca>
    fe1e:	20a0      	movs	r0, #160	; 0xa0
    fe20:	4b68      	ldr	r3, [pc, #416]	; (ffc4 <frameParse+0x698>)
    fe22:	4798      	blx	r3
    fe24:	4680      	mov	r8, r0
    fe26:	2800      	cmp	r0, #0
    fe28:	d100      	bne.n	fe2c <frameParse+0x500>
    fe2a:	e58c      	b.n	f946 <frameParse+0x1a>
    fe2c:	0029      	movs	r1, r5
    fe2e:	2220      	movs	r2, #32
    fe30:	4b68      	ldr	r3, [pc, #416]	; (ffd4 <frameParse+0x6a8>)
    fe32:	3018      	adds	r0, #24
    fe34:	4798      	blx	r3
    fe36:	4641      	mov	r1, r8
    fe38:	2338      	movs	r3, #56	; 0x38
    fe3a:	9a07      	ldr	r2, [sp, #28]
    fe3c:	4640      	mov	r0, r8
    fe3e:	54ca      	strb	r2, [r1, r3]
    fe40:	2300      	movs	r3, #0
    fe42:	4699      	mov	r9, r3
    fe44:	4643      	mov	r3, r8
    fe46:	4649      	mov	r1, r9
    fe48:	3039      	adds	r0, #57	; 0x39
    fe4a:	6099      	str	r1, [r3, #8]
    fe4c:	9906      	ldr	r1, [sp, #24]
    fe4e:	4b61      	ldr	r3, [pc, #388]	; (ffd4 <frameParse+0x6a8>)
    fe50:	4798      	blx	r3
    fe52:	4642      	mov	r2, r8
    fe54:	2301      	movs	r3, #1
    fe56:	74d3      	strb	r3, [r2, #19]
    fe58:	4b63      	ldr	r3, [pc, #396]	; (ffe8 <frameParse+0x6bc>)
    fe5a:	4641      	mov	r1, r8
    fe5c:	881b      	ldrh	r3, [r3, #0]
    fe5e:	4867      	ldr	r0, [pc, #412]	; (fffc <frameParse+0x6d0>)
    fe60:	199b      	adds	r3, r3, r6
    fe62:	8193      	strh	r3, [r2, #12]
    fe64:	6823      	ldr	r3, [r4, #0]
    fe66:	7f9b      	ldrb	r3, [r3, #30]
    fe68:	3301      	adds	r3, #1
    fe6a:	7413      	strb	r3, [r2, #16]
    fe6c:	4643      	mov	r3, r8
    fe6e:	464a      	mov	r2, r9
    fe70:	745a      	strb	r2, [r3, #17]
    fe72:	4b63      	ldr	r3, [pc, #396]	; (10000 <frameParse+0x6d4>)
    fe74:	4798      	blx	r3
    fe76:	e7be      	b.n	fdf6 <frameParse+0x4ca>
    fe78:	4e5a      	ldr	r6, [pc, #360]	; (ffe4 <frameParse+0x6b8>)
    fe7a:	42b0      	cmp	r0, r6
    fe7c:	d900      	bls.n	fe80 <frameParse+0x554>
    fe7e:	e66b      	b.n	fb58 <frameParse+0x22c>
    fe80:	7a29      	ldrb	r1, [r5, #8]
    fe82:	8816      	ldrh	r6, [r2, #0]
    fe84:	88e8      	ldrh	r0, [r5, #6]
    fe86:	9109      	str	r1, [sp, #36]	; 0x24
    fe88:	a912      	add	r1, sp, #72	; 0x48
    fe8a:	46b4      	mov	ip, r6
    fe8c:	9108      	str	r1, [sp, #32]
    fe8e:	000e      	movs	r6, r1
    fe90:	2133      	movs	r1, #51	; 0x33
    fe92:	4f5c      	ldr	r7, [pc, #368]	; (10004 <frameParse+0x6d8>)
    fe94:	46ba      	mov	sl, r7
    fe96:	683f      	ldr	r7, [r7, #0]
    fe98:	5c79      	ldrb	r1, [r7, r1]
    fe9a:	0037      	movs	r7, r6
    fe9c:	3101      	adds	r1, #1
    fe9e:	7031      	strb	r1, [r6, #0]
    fea0:	2103      	movs	r1, #3
    fea2:	7876      	ldrb	r6, [r6, #1]
    fea4:	80b8      	strh	r0, [r7, #4]
    fea6:	438e      	bics	r6, r1
    fea8:	3902      	subs	r1, #2
    feaa:	430e      	orrs	r6, r1
    feac:	3107      	adds	r1, #7
    feae:	438e      	bics	r6, r1
    feb0:	3904      	subs	r1, #4
    feb2:	4331      	orrs	r1, r6
    feb4:	2620      	movs	r6, #32
    feb6:	43b1      	bics	r1, r6
    feb8:	19b6      	adds	r6, r6, r6
    feba:	43b1      	bics	r1, r6
    febc:	4399      	bics	r1, r3
    febe:	336f      	adds	r3, #111	; 0x6f
    fec0:	4019      	ands	r1, r3
    fec2:	4b41      	ldr	r3, [pc, #260]	; (ffc8 <frameParse+0x69c>)
    fec4:	4e41      	ldr	r6, [pc, #260]	; (ffcc <frameParse+0x6a0>)
    fec6:	881b      	ldrh	r3, [r3, #0]
    fec8:	7079      	strb	r1, [r7, #1]
    feca:	807b      	strh	r3, [r7, #2]
    fecc:	4663      	mov	r3, ip
    fece:	80fb      	strh	r3, [r7, #6]
    fed0:	7833      	ldrb	r3, [r6, #0]
    fed2:	0039      	movs	r1, r7
    fed4:	3301      	adds	r3, #1
    fed6:	7033      	strb	r3, [r6, #0]
    fed8:	2724      	movs	r7, #36	; 0x24
    feda:	466b      	mov	r3, sp
    fedc:	19db      	adds	r3, r3, r7
    fede:	781b      	ldrb	r3, [r3, #0]
    fee0:	720b      	strb	r3, [r1, #8]
    fee2:	23ff      	movs	r3, #255	; 0xff
    fee4:	4218      	tst	r0, r3
    fee6:	d005      	beq.n	fef4 <frameParse+0x5c8>
    fee8:	0001      	movs	r1, r0
    feea:	8812      	ldrh	r2, [r2, #0]
    feec:	4399      	bics	r1, r3
    feee:	428a      	cmp	r2, r1
    fef0:	d100      	bne.n	fef4 <frameParse+0x5c8>
    fef2:	e136      	b.n	10162 <frameParse+0x836>
    fef4:	2088      	movs	r0, #136	; 0x88
    fef6:	4b33      	ldr	r3, [pc, #204]	; (ffc4 <frameParse+0x698>)
    fef8:	4798      	blx	r3
    fefa:	1e07      	subs	r7, r0, #0
    fefc:	d01a      	beq.n	ff34 <frameParse+0x608>
    fefe:	9b08      	ldr	r3, [sp, #32]
    ff00:	0001      	movs	r1, r0
    ff02:	469a      	mov	sl, r3
    ff04:	0018      	movs	r0, r3
    ff06:	4b32      	ldr	r3, [pc, #200]	; (ffd0 <frameParse+0x6a4>)
    ff08:	4798      	blx	r3
    ff0a:	7833      	ldrb	r3, [r6, #0]
    ff0c:	0001      	movs	r1, r0
    ff0e:	3b01      	subs	r3, #1
    ff10:	7033      	strb	r3, [r6, #0]
    ff12:	2332      	movs	r3, #50	; 0x32
    ff14:	543b      	strb	r3, [r7, r0]
    ff16:	4b3c      	ldr	r3, [pc, #240]	; (10008 <frameParse+0x6dc>)
    ff18:	2201      	movs	r2, #1
    ff1a:	9303      	str	r3, [sp, #12]
    ff1c:	2300      	movs	r3, #0
    ff1e:	9302      	str	r3, [sp, #8]
    ff20:	464b      	mov	r3, r9
    ff22:	9301      	str	r3, [sp, #4]
    ff24:	9b04      	ldr	r3, [sp, #16]
    ff26:	4650      	mov	r0, sl
    ff28:	9300      	str	r3, [sp, #0]
    ff2a:	4e2c      	ldr	r6, [pc, #176]	; (ffdc <frameParse+0x6b0>)
    ff2c:	003b      	movs	r3, r7
    ff2e:	47b0      	blx	r6
    ff30:	2800      	cmp	r0, #0
    ff32:	d001      	beq.n	ff38 <frameParse+0x60c>
    ff34:	7869      	ldrb	r1, [r5, #1]
    ff36:	e60f      	b.n	fb58 <frameParse+0x22c>
    ff38:	0038      	movs	r0, r7
    ff3a:	4b20      	ldr	r3, [pc, #128]	; (ffbc <frameParse+0x690>)
    ff3c:	4798      	blx	r3
    ff3e:	7869      	ldrb	r1, [r5, #1]
    ff40:	e60a      	b.n	fb58 <frameParse+0x22c>
    ff42:	2830      	cmp	r0, #48	; 0x30
    ff44:	d100      	bne.n	ff48 <frameParse+0x61c>
    ff46:	e0af      	b.n	100a8 <frameParse+0x77c>
    ff48:	2840      	cmp	r0, #64	; 0x40
    ff4a:	d000      	beq.n	ff4e <frameParse+0x622>
    ff4c:	e609      	b.n	fb62 <frameParse+0x236>
    ff4e:	2a41      	cmp	r2, #65	; 0x41
    ff50:	d000      	beq.n	ff54 <frameParse+0x628>
    ff52:	e606      	b.n	fb62 <frameParse+0x236>
    ff54:	88ef      	ldrh	r7, [r5, #6]
    ff56:	2f00      	cmp	r7, #0
    ff58:	d000      	beq.n	ff5c <frameParse+0x630>
    ff5a:	e60a      	b.n	fb72 <frameParse+0x246>
    ff5c:	4b2b      	ldr	r3, [pc, #172]	; (1000c <frameParse+0x6e0>)
    ff5e:	4798      	blx	r3
    ff60:	9b06      	ldr	r3, [sp, #24]
    ff62:	785b      	ldrb	r3, [r3, #1]
    ff64:	40d8      	lsrs	r0, r3
    ff66:	4230      	tst	r0, r6
    ff68:	d000      	beq.n	ff6c <frameParse+0x640>
    ff6a:	e12c      	b.n	101c6 <frameParse+0x89a>
    ff6c:	7869      	ldrb	r1, [r5, #1]
    ff6e:	e5f8      	b.n	fb62 <frameParse+0x236>
    ff70:	46b9      	mov	r9, r7
    ff72:	4654      	mov	r4, sl
    ff74:	e5e4      	b.n	fb40 <frameParse+0x214>
    ff76:	2232      	movs	r2, #50	; 0x32
    ff78:	4b22      	ldr	r3, [pc, #136]	; (10004 <frameParse+0x6d8>)
    ff7a:	88e8      	ldrh	r0, [r5, #6]
    ff7c:	681b      	ldr	r3, [r3, #0]
    ff7e:	7a29      	ldrb	r1, [r5, #8]
    ff80:	5c9e      	ldrb	r6, [r3, r2]
    ff82:	2e00      	cmp	r6, #0
    ff84:	d075      	beq.n	10072 <frameParse+0x746>
    ff86:	3e01      	subs	r6, #1
    ff88:	b2f6      	uxtb	r6, r6
    ff8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    ff8c:	3601      	adds	r6, #1
    ff8e:	00b6      	lsls	r6, r6, #2
    ff90:	199e      	adds	r6, r3, r6
    ff92:	e002      	b.n	ff9a <frameParse+0x66e>
    ff94:	3304      	adds	r3, #4
    ff96:	429e      	cmp	r6, r3
    ff98:	d06b      	beq.n	10072 <frameParse+0x746>
    ff9a:	881a      	ldrh	r2, [r3, #0]
    ff9c:	4282      	cmp	r2, r0
    ff9e:	d1f9      	bne.n	ff94 <frameParse+0x668>
    ffa0:	789a      	ldrb	r2, [r3, #2]
    ffa2:	428a      	cmp	r2, r1
    ffa4:	d1f6      	bne.n	ff94 <frameParse+0x668>
    ffa6:	e5e4      	b.n	fb72 <frameParse+0x246>
    ffa8:	2210      	movs	r2, #16
    ffaa:	4692      	mov	sl, r2
    ffac:	3a0d      	subs	r2, #13
    ffae:	2710      	movs	r7, #16
    ffb0:	2608      	movs	r6, #8
    ffb2:	2004      	movs	r0, #4
    ffb4:	4691      	mov	r9, r2
    ffb6:	9204      	str	r2, [sp, #16]
    ffb8:	e619      	b.n	fbee <frameParse+0x2c2>
    ffba:	46c0      	nop			; (mov r8, r8)
    ffbc:	0000bccd 	.word	0x0000bccd
    ffc0:	20001ce1 	.word	0x20001ce1
    ffc4:	0000bc11 	.word	0x0000bc11
    ffc8:	200028a8 	.word	0x200028a8
    ffcc:	20002890 	.word	0x20002890
    ffd0:	0000f079 	.word	0x0000f079
    ffd4:	00014cdf 	.word	0x00014cdf
    ffd8:	0000f005 	.word	0x0000f005
    ffdc:	0000f105 	.word	0x0000f105
    ffe0:	00011bb5 	.word	0x00011bb5
    ffe4:	0000fffc 	.word	0x0000fffc
    ffe8:	200028b8 	.word	0x200028b8
    ffec:	0000ffff 	.word	0x0000ffff
    fff0:	20001d04 	.word	0x20001d04
    fff4:	00011809 	.word	0x00011809
    fff8:	0000bd49 	.word	0x0000bd49
    fffc:	20002850 	.word	0x20002850
   10000:	0000be0d 	.word	0x0000be0d
   10004:	2000285c 	.word	0x2000285c
   10008:	0000ef61 	.word	0x0000ef61
   1000c:	0000b321 	.word	0x0000b321
   10010:	4663      	mov	r3, ip
   10012:	46bc      	mov	ip, r7
   10014:	0027      	movs	r7, r4
   10016:	001c      	movs	r4, r3
   10018:	4661      	mov	r1, ip
   1001a:	88eb      	ldrh	r3, [r5, #6]
   1001c:	7a2a      	ldrb	r2, [r5, #8]
   1001e:	800b      	strh	r3, [r1, #0]
   10020:	4653      	mov	r3, sl
   10022:	681b      	ldr	r3, [r3, #0]
   10024:	4648      	mov	r0, r9
   10026:	691b      	ldr	r3, [r3, #16]
   10028:	9906      	ldr	r1, [sp, #24]
   1002a:	19db      	adds	r3, r3, r7
   1002c:	709a      	strb	r2, [r3, #2]
   1002e:	4653      	mov	r3, sl
   10030:	2220      	movs	r2, #32
   10032:	681b      	ldr	r3, [r3, #0]
   10034:	4440      	add	r0, r8
   10036:	5c9a      	ldrb	r2, [r3, r2]
   10038:	691b      	ldr	r3, [r3, #16]
   1003a:	19df      	adds	r7, r3, r7
   1003c:	70fa      	strb	r2, [r7, #3]
   1003e:	7b22      	ldrb	r2, [r4, #12]
   10040:	9b05      	ldr	r3, [sp, #20]
   10042:	1ad2      	subs	r2, r2, r3
   10044:	4b68      	ldr	r3, [pc, #416]	; (101e8 <frameParse+0x8bc>)
   10046:	4798      	blx	r3
   10048:	465b      	mov	r3, fp
   1004a:	7b22      	ldrb	r2, [r4, #12]
   1004c:	9904      	ldr	r1, [sp, #16]
   1004e:	1ad2      	subs	r2, r2, r3
   10050:	4b66      	ldr	r3, [pc, #408]	; (101ec <frameParse+0x8c0>)
   10052:	b2d2      	uxtb	r2, r2
   10054:	9303      	str	r3, [sp, #12]
   10056:	2300      	movs	r3, #0
   10058:	9302      	str	r3, [sp, #8]
   1005a:	9b08      	ldr	r3, [sp, #32]
   1005c:	0028      	movs	r0, r5
   1005e:	9301      	str	r3, [sp, #4]
   10060:	2302      	movs	r3, #2
   10062:	4c63      	ldr	r4, [pc, #396]	; (101f0 <frameParse+0x8c4>)
   10064:	9300      	str	r3, [sp, #0]
   10066:	4643      	mov	r3, r8
   10068:	47a0      	blx	r4
   1006a:	2800      	cmp	r0, #0
   1006c:	d000      	beq.n	10070 <frameParse+0x744>
   1006e:	e46a      	b.n	f946 <frameParse+0x1a>
   10070:	e61e      	b.n	fcb0 <frameParse+0x384>
   10072:	4b60      	ldr	r3, [pc, #384]	; (101f4 <frameParse+0x8c8>)
   10074:	4798      	blx	r3
   10076:	e696      	b.n	fda6 <frameParse+0x47a>
   10078:	881b      	ldrh	r3, [r3, #0]
   1007a:	061b      	lsls	r3, r3, #24
   1007c:	d400      	bmi.n	10080 <frameParse+0x754>
   1007e:	e692      	b.n	fda6 <frameParse+0x47a>
   10080:	4b5d      	ldr	r3, [pc, #372]	; (101f8 <frameParse+0x8cc>)
   10082:	429a      	cmp	r2, r3
   10084:	d000      	beq.n	10088 <frameParse+0x75c>
   10086:	e68e      	b.n	fda6 <frameParse+0x47a>
   10088:	e573      	b.n	fb72 <frameParse+0x246>
   1008a:	7ba3      	ldrb	r3, [r4, #14]
   1008c:	464a      	mov	r2, r9
   1008e:	9300      	str	r3, [sp, #0]
   10090:	9904      	ldr	r1, [sp, #16]
   10092:	9b06      	ldr	r3, [sp, #24]
   10094:	0028      	movs	r0, r5
   10096:	4c59      	ldr	r4, [pc, #356]	; (101fc <frameParse+0x8d0>)
   10098:	47a0      	blx	r4
   1009a:	e454      	b.n	f946 <frameParse+0x1a>
   1009c:	9906      	ldr	r1, [sp, #24]
   1009e:	0028      	movs	r0, r5
   100a0:	4b57      	ldr	r3, [pc, #348]	; (10200 <frameParse+0x8d4>)
   100a2:	4798      	blx	r3
   100a4:	7869      	ldrb	r1, [r5, #1]
   100a6:	e55c      	b.n	fb62 <frameParse+0x236>
   100a8:	9906      	ldr	r1, [sp, #24]
   100aa:	0028      	movs	r0, r5
   100ac:	4b55      	ldr	r3, [pc, #340]	; (10204 <frameParse+0x8d8>)
   100ae:	4798      	blx	r3
   100b0:	7869      	ldrb	r1, [r5, #1]
   100b2:	e556      	b.n	fb62 <frameParse+0x236>
   100b4:	2b02      	cmp	r3, #2
   100b6:	d000      	beq.n	100ba <frameParse+0x78e>
   100b8:	e445      	b.n	f946 <frameParse+0x1a>
   100ba:	4b53      	ldr	r3, [pc, #332]	; (10208 <frameParse+0x8dc>)
   100bc:	681b      	ldr	r3, [r3, #0]
   100be:	2b00      	cmp	r3, #0
   100c0:	d100      	bne.n	100c4 <frameParse+0x798>
   100c2:	e556      	b.n	fb72 <frameParse+0x246>
   100c4:	4798      	blx	r3
   100c6:	e554      	b.n	fb72 <frameParse+0x246>
   100c8:	20a0      	movs	r0, #160	; 0xa0
   100ca:	4b50      	ldr	r3, [pc, #320]	; (1020c <frameParse+0x8e0>)
   100cc:	4798      	blx	r3
   100ce:	1e04      	subs	r4, r0, #0
   100d0:	d101      	bne.n	100d6 <frameParse+0x7aa>
   100d2:	f7ff fc38 	bl	f946 <frameParse+0x1a>
   100d6:	0029      	movs	r1, r5
   100d8:	2220      	movs	r2, #32
   100da:	4b43      	ldr	r3, [pc, #268]	; (101e8 <frameParse+0x8bc>)
   100dc:	3018      	adds	r0, #24
   100de:	4798      	blx	r3
   100e0:	2338      	movs	r3, #56	; 0x38
   100e2:	0020      	movs	r0, r4
   100e4:	9a07      	ldr	r2, [sp, #28]
   100e6:	9906      	ldr	r1, [sp, #24]
   100e8:	54e2      	strb	r2, [r4, r3]
   100ea:	60a6      	str	r6, [r4, #8]
   100ec:	88ab      	ldrh	r3, [r5, #4]
   100ee:	3039      	adds	r0, #57	; 0x39
   100f0:	81a3      	strh	r3, [r4, #12]
   100f2:	4b3d      	ldr	r3, [pc, #244]	; (101e8 <frameParse+0x8bc>)
   100f4:	4798      	blx	r3
   100f6:	2301      	movs	r3, #1
   100f8:	74e3      	strb	r3, [r4, #19]
   100fa:	4b45      	ldr	r3, [pc, #276]	; (10210 <frameParse+0x8e4>)
   100fc:	0021      	movs	r1, r4
   100fe:	681b      	ldr	r3, [r3, #0]
   10100:	4844      	ldr	r0, [pc, #272]	; (10214 <frameParse+0x8e8>)
   10102:	7f9b      	ldrb	r3, [r3, #30]
   10104:	3301      	adds	r3, #1
   10106:	7423      	strb	r3, [r4, #16]
   10108:	4b43      	ldr	r3, [pc, #268]	; (10218 <frameParse+0x8ec>)
   1010a:	4798      	blx	r3
   1010c:	f7ff fc1b 	bl	f946 <frameParse+0x1a>
   10110:	20a0      	movs	r0, #160	; 0xa0
   10112:	4b3e      	ldr	r3, [pc, #248]	; (1020c <frameParse+0x8e0>)
   10114:	4798      	blx	r3
   10116:	1e04      	subs	r4, r0, #0
   10118:	d101      	bne.n	1011e <frameParse+0x7f2>
   1011a:	f7ff fc14 	bl	f946 <frameParse+0x1a>
   1011e:	2220      	movs	r2, #32
   10120:	0029      	movs	r1, r5
   10122:	4b31      	ldr	r3, [pc, #196]	; (101e8 <frameParse+0x8bc>)
   10124:	3018      	adds	r0, #24
   10126:	4798      	blx	r3
   10128:	2338      	movs	r3, #56	; 0x38
   1012a:	9a07      	ldr	r2, [sp, #28]
   1012c:	0020      	movs	r0, r4
   1012e:	54e2      	strb	r2, [r4, r3]
   10130:	2300      	movs	r3, #0
   10132:	9906      	ldr	r1, [sp, #24]
   10134:	60a3      	str	r3, [r4, #8]
   10136:	3039      	adds	r0, #57	; 0x39
   10138:	4b2b      	ldr	r3, [pc, #172]	; (101e8 <frameParse+0x8bc>)
   1013a:	4798      	blx	r3
   1013c:	2301      	movs	r3, #1
   1013e:	74e3      	strb	r3, [r4, #19]
   10140:	88a8      	ldrh	r0, [r5, #4]
   10142:	4b36      	ldr	r3, [pc, #216]	; (1021c <frameParse+0x8f0>)
   10144:	4798      	blx	r3
   10146:	2800      	cmp	r0, #0
   10148:	d132      	bne.n	101b0 <frameParse+0x884>
   1014a:	0020      	movs	r0, r4
   1014c:	4b34      	ldr	r3, [pc, #208]	; (10220 <frameParse+0x8f4>)
   1014e:	4798      	blx	r3
   10150:	f7ff fbf9 	bl	f946 <frameParse+0x1a>
   10154:	4b2e      	ldr	r3, [pc, #184]	; (10210 <frameParse+0x8e4>)
   10156:	6818      	ldr	r0, [r3, #0]
   10158:	2333      	movs	r3, #51	; 0x33
   1015a:	5cc3      	ldrb	r3, [r0, r3]
   1015c:	3301      	adds	r3, #1
   1015e:	b2db      	uxtb	r3, r3
   10160:	e5c2      	b.n	fce8 <frameParse+0x3bc>
   10162:	375c      	adds	r7, #92	; 0x5c
   10164:	4007      	ands	r7, r0
   10166:	d000      	beq.n	1016a <frameParse+0x83e>
   10168:	e6c4      	b.n	fef4 <frameParse+0x5c8>
   1016a:	20a0      	movs	r0, #160	; 0xa0
   1016c:	4b27      	ldr	r3, [pc, #156]	; (1020c <frameParse+0x8e0>)
   1016e:	4798      	blx	r3
   10170:	1e06      	subs	r6, r0, #0
   10172:	d100      	bne.n	10176 <frameParse+0x84a>
   10174:	e6de      	b.n	ff34 <frameParse+0x608>
   10176:	2220      	movs	r2, #32
   10178:	9908      	ldr	r1, [sp, #32]
   1017a:	4b1b      	ldr	r3, [pc, #108]	; (101e8 <frameParse+0x8bc>)
   1017c:	3018      	adds	r0, #24
   1017e:	4798      	blx	r3
   10180:	2338      	movs	r3, #56	; 0x38
   10182:	2201      	movs	r2, #1
   10184:	54f2      	strb	r2, [r6, r3]
   10186:	2232      	movs	r2, #50	; 0x32
   10188:	3301      	adds	r3, #1
   1018a:	60b7      	str	r7, [r6, #8]
   1018c:	54f2      	strb	r2, [r6, r3]
   1018e:	4653      	mov	r3, sl
   10190:	681b      	ldr	r3, [r3, #0]
   10192:	0031      	movs	r1, r6
   10194:	7f9b      	ldrb	r3, [r3, #30]
   10196:	481f      	ldr	r0, [pc, #124]	; (10214 <frameParse+0x8e8>)
   10198:	3301      	adds	r3, #1
   1019a:	7433      	strb	r3, [r6, #16]
   1019c:	2301      	movs	r3, #1
   1019e:	7477      	strb	r7, [r6, #17]
   101a0:	74f3      	strb	r3, [r6, #19]
   101a2:	4b1d      	ldr	r3, [pc, #116]	; (10218 <frameParse+0x8ec>)
   101a4:	4798      	blx	r3
   101a6:	7869      	ldrb	r1, [r5, #1]
   101a8:	e4d6      	b.n	fb58 <frameParse+0x22c>
   101aa:	4684      	mov	ip, r0
   101ac:	2700      	movs	r7, #0
   101ae:	e733      	b.n	10018 <frameParse+0x6ec>
   101b0:	4b17      	ldr	r3, [pc, #92]	; (10210 <frameParse+0x8e4>)
   101b2:	0021      	movs	r1, r4
   101b4:	681b      	ldr	r3, [r3, #0]
   101b6:	481b      	ldr	r0, [pc, #108]	; (10224 <frameParse+0x8f8>)
   101b8:	7f5b      	ldrb	r3, [r3, #29]
   101ba:	3301      	adds	r3, #1
   101bc:	7423      	strb	r3, [r4, #16]
   101be:	4b16      	ldr	r3, [pc, #88]	; (10218 <frameParse+0x8ec>)
   101c0:	4798      	blx	r3
   101c2:	f7ff fbc0 	bl	f946 <frameParse+0x1a>
   101c6:	4a18      	ldr	r2, [pc, #96]	; (10228 <frameParse+0x8fc>)
   101c8:	4818      	ldr	r0, [pc, #96]	; (1022c <frameParse+0x900>)
   101ca:	7013      	strb	r3, [r2, #0]
   101cc:	4b18      	ldr	r3, [pc, #96]	; (10230 <frameParse+0x904>)
   101ce:	7307      	strb	r7, [r0, #12]
   101d0:	6103      	str	r3, [r0, #16]
   101d2:	4b18      	ldr	r3, [pc, #96]	; (10234 <frameParse+0x908>)
   101d4:	6043      	str	r3, [r0, #4]
   101d6:	6083      	str	r3, [r0, #8]
   101d8:	4b17      	ldr	r3, [pc, #92]	; (10238 <frameParse+0x90c>)
   101da:	4798      	blx	r3
   101dc:	2005      	movs	r0, #5
   101de:	4b17      	ldr	r3, [pc, #92]	; (1023c <frameParse+0x910>)
   101e0:	4798      	blx	r3
   101e2:	7869      	ldrb	r1, [r5, #1]
   101e4:	e4bd      	b.n	fb62 <frameParse+0x236>
   101e6:	46c0      	nop			; (mov r8, r8)
   101e8:	00014cdf 	.word	0x00014cdf
   101ec:	0000f005 	.word	0x0000f005
   101f0:	0000f105 	.word	0x0000f105
   101f4:	0000f8a1 	.word	0x0000f8a1
   101f8:	0000fffd 	.word	0x0000fffd
   101fc:	00010d15 	.word	0x00010d15
   10200:	0000ef2d 	.word	0x0000ef2d
   10204:	0000f631 	.word	0x0000f631
   10208:	20001d00 	.word	0x20001d00
   1020c:	0000bc11 	.word	0x0000bc11
   10210:	2000285c 	.word	0x2000285c
   10214:	20002850 	.word	0x20002850
   10218:	0000be0d 	.word	0x0000be0d
   1021c:	000121a5 	.word	0x000121a5
   10220:	0000bccd 	.word	0x0000bccd
   10224:	20002908 	.word	0x20002908
   10228:	2000008f 	.word	0x2000008f
   1022c:	200028dc 	.word	0x200028dc
   10230:	0000ef71 	.word	0x0000ef71
   10234:	00003a98 	.word	0x00003a98
   10238:	0000bfc5 	.word	0x0000bfc5
   1023c:	0000a5b5 	.word	0x0000a5b5

00010240 <initDuplicateRejectionTable>:
   10240:	2332      	movs	r3, #50	; 0x32
   10242:	b530      	push	{r4, r5, lr}
   10244:	4809      	ldr	r0, [pc, #36]	; (1026c <initDuplicateRejectionTable+0x2c>)
   10246:	6802      	ldr	r2, [r0, #0]
   10248:	5cd1      	ldrb	r1, [r2, r3]
   1024a:	2300      	movs	r3, #0
   1024c:	2900      	cmp	r1, #0
   1024e:	d00b      	beq.n	10268 <initDuplicateRejectionTable+0x28>
   10250:	2501      	movs	r5, #1
   10252:	2432      	movs	r4, #50	; 0x32
   10254:	426d      	negs	r5, r5
   10256:	6a52      	ldr	r2, [r2, #36]	; 0x24
   10258:	0099      	lsls	r1, r3, #2
   1025a:	528d      	strh	r5, [r1, r2]
   1025c:	6802      	ldr	r2, [r0, #0]
   1025e:	3301      	adds	r3, #1
   10260:	5d11      	ldrb	r1, [r2, r4]
   10262:	b2db      	uxtb	r3, r3
   10264:	4299      	cmp	r1, r3
   10266:	d8f6      	bhi.n	10256 <initDuplicateRejectionTable+0x16>
   10268:	bd30      	pop	{r4, r5, pc}
   1026a:	46c0      	nop			; (mov r8, r8)
   1026c:	2000285c 	.word	0x2000285c

00010270 <duplicateRejectionTimerHandler>:
   10270:	b5f0      	push	{r4, r5, r6, r7, lr}
   10272:	46c6      	mov	lr, r8
   10274:	2332      	movs	r3, #50	; 0x32
   10276:	b500      	push	{lr}
   10278:	4e13      	ldr	r6, [pc, #76]	; (102c8 <duplicateRejectionTimerHandler+0x58>)
   1027a:	6834      	ldr	r4, [r6, #0]
   1027c:	5ce7      	ldrb	r7, [r4, r3]
   1027e:	2300      	movs	r3, #0
   10280:	2f00      	cmp	r7, #0
   10282:	d01e      	beq.n	102c2 <duplicateRejectionTimerHandler+0x52>
   10284:	2201      	movs	r2, #1
   10286:	4252      	negs	r2, r2
   10288:	4694      	mov	ip, r2
   1028a:	3233      	adds	r2, #51	; 0x33
   1028c:	4690      	mov	r8, r2
   1028e:	4d0f      	ldr	r5, [pc, #60]	; (102cc <duplicateRejectionTimerHandler+0x5c>)
   10290:	6a62      	ldr	r2, [r4, #36]	; 0x24
   10292:	0098      	lsls	r0, r3, #2
   10294:	1812      	adds	r2, r2, r0
   10296:	8811      	ldrh	r1, [r2, #0]
   10298:	42a9      	cmp	r1, r5
   1029a:	d00e      	beq.n	102ba <duplicateRejectionTimerHandler+0x4a>
   1029c:	78d1      	ldrb	r1, [r2, #3]
   1029e:	2900      	cmp	r1, #0
   102a0:	d00b      	beq.n	102ba <duplicateRejectionTimerHandler+0x4a>
   102a2:	3901      	subs	r1, #1
   102a4:	b2c9      	uxtb	r1, r1
   102a6:	70d1      	strb	r1, [r2, #3]
   102a8:	2900      	cmp	r1, #0
   102aa:	d103      	bne.n	102b4 <duplicateRejectionTimerHandler+0x44>
   102ac:	4661      	mov	r1, ip
   102ae:	6832      	ldr	r2, [r6, #0]
   102b0:	6a52      	ldr	r2, [r2, #36]	; 0x24
   102b2:	5211      	strh	r1, [r2, r0]
   102b4:	4642      	mov	r2, r8
   102b6:	6834      	ldr	r4, [r6, #0]
   102b8:	5ca7      	ldrb	r7, [r4, r2]
   102ba:	3301      	adds	r3, #1
   102bc:	b2db      	uxtb	r3, r3
   102be:	42bb      	cmp	r3, r7
   102c0:	d3e6      	bcc.n	10290 <duplicateRejectionTimerHandler+0x20>
   102c2:	bc04      	pop	{r2}
   102c4:	4690      	mov	r8, r2
   102c6:	bdf0      	pop	{r4, r5, r6, r7, pc}
   102c8:	2000285c 	.word	0x2000285c
   102cc:	0000ffff 	.word	0x0000ffff

000102d0 <establishTimerExpired>:
   102d0:	2205      	movs	r2, #5
   102d2:	b510      	push	{r4, lr}
   102d4:	4b04      	ldr	r3, [pc, #16]	; (102e8 <establishTimerExpired+0x18>)
   102d6:	4c05      	ldr	r4, [pc, #20]	; (102ec <establishTimerExpired+0x1c>)
   102d8:	701a      	strb	r2, [r3, #0]
   102da:	2004      	movs	r0, #4
   102dc:	6823      	ldr	r3, [r4, #0]
   102de:	4798      	blx	r3
   102e0:	2300      	movs	r3, #0
   102e2:	6023      	str	r3, [r4, #0]
   102e4:	bd10      	pop	{r4, pc}
   102e6:	46c0      	nop			; (mov r8, r8)
   102e8:	20001ce1 	.word	0x20001ce1
   102ec:	20001d0c 	.word	0x20001d0c

000102f0 <ScanChannel>:
   102f0:	b5f0      	push	{r4, r5, r6, r7, lr}
   102f2:	46c6      	mov	lr, r8
   102f4:	b500      	push	{lr}
   102f6:	4f2d      	ldr	r7, [pc, #180]	; (103ac <ScanChannel+0xbc>)
   102f8:	b090      	sub	sp, #64	; 0x40
   102fa:	783c      	ldrb	r4, [r7, #0]
   102fc:	0005      	movs	r5, r0
   102fe:	2c1a      	cmp	r4, #26
   10300:	d842      	bhi.n	10388 <ScanChannel+0x98>
   10302:	4b2b      	ldr	r3, [pc, #172]	; (103b0 <ScanChannel+0xc0>)
   10304:	b2e2      	uxtb	r2, r4
   10306:	2601      	movs	r6, #1
   10308:	4698      	mov	r8, r3
   1030a:	e003      	b.n	10314 <ScanChannel+0x24>
   1030c:	3401      	adds	r4, #1
   1030e:	b2e2      	uxtb	r2, r4
   10310:	2a1a      	cmp	r2, #26
   10312:	d839      	bhi.n	10388 <ScanChannel+0x98>
   10314:	686b      	ldr	r3, [r5, #4]
   10316:	40e3      	lsrs	r3, r4
   10318:	421e      	tst	r6, r3
   1031a:	d0f7      	beq.n	1030c <ScanChannel+0x1c>
   1031c:	0039      	movs	r1, r7
   1031e:	2000      	movs	r0, #0
   10320:	703a      	strb	r2, [r7, #0]
   10322:	47c0      	blx	r8
   10324:	2800      	cmp	r0, #0
   10326:	d0f1      	beq.n	1030c <ScanChannel+0x1c>
   10328:	ab02      	add	r3, sp, #8
   1032a:	469c      	mov	ip, r3
   1032c:	2716      	movs	r7, #22
   1032e:	2301      	movs	r3, #1
   10330:	4467      	add	r7, ip
   10332:	425b      	negs	r3, r3
   10334:	803b      	strh	r3, [r7, #0]
   10336:	2088      	movs	r0, #136	; 0x88
   10338:	4b1e      	ldr	r3, [pc, #120]	; (103b4 <ScanChannel+0xc4>)
   1033a:	4798      	blx	r3
   1033c:	1e04      	subs	r4, r0, #0
   1033e:	d021      	beq.n	10384 <ScanChannel+0x94>
   10340:	aa08      	add	r2, sp, #32
   10342:	0015      	movs	r5, r2
   10344:	491c      	ldr	r1, [pc, #112]	; (103b8 <ScanChannel+0xc8>)
   10346:	002b      	movs	r3, r5
   10348:	883a      	ldrh	r2, [r7, #0]
   1034a:	9505      	str	r5, [sp, #20]
   1034c:	2001      	movs	r0, #1
   1034e:	4d1b      	ldr	r5, [pc, #108]	; (103bc <ScanChannel+0xcc>)
   10350:	47a8      	blx	r5
   10352:	2220      	movs	r2, #32
   10354:	9d05      	ldr	r5, [sp, #20]
   10356:	0021      	movs	r1, r4
   10358:	786b      	ldrb	r3, [r5, #1]
   1035a:	0028      	movs	r0, r5
   1035c:	4313      	orrs	r3, r2
   1035e:	706b      	strb	r3, [r5, #1]
   10360:	4b17      	ldr	r3, [pc, #92]	; (103c0 <ScanChannel+0xd0>)
   10362:	4798      	blx	r3
   10364:	4b17      	ldr	r3, [pc, #92]	; (103c4 <ScanChannel+0xd4>)
   10366:	5426      	strb	r6, [r4, r0]
   10368:	9303      	str	r3, [sp, #12]
   1036a:	2300      	movs	r3, #0
   1036c:	9302      	str	r3, [sp, #8]
   1036e:	3302      	adds	r3, #2
   10370:	0001      	movs	r1, r0
   10372:	9300      	str	r3, [sp, #0]
   10374:	9701      	str	r7, [sp, #4]
   10376:	0023      	movs	r3, r4
   10378:	2201      	movs	r2, #1
   1037a:	0028      	movs	r0, r5
   1037c:	4c12      	ldr	r4, [pc, #72]	; (103c8 <ScanChannel+0xd8>)
   1037e:	47a0      	blx	r4
   10380:	2800      	cmp	r0, #0
   10382:	d110      	bne.n	103a6 <ScanChannel+0xb6>
   10384:	200a      	movs	r0, #10
   10386:	e00a      	b.n	1039e <ScanChannel+0xae>
   10388:	2205      	movs	r2, #5
   1038a:	4b10      	ldr	r3, [pc, #64]	; (103cc <ScanChannel+0xdc>)
   1038c:	4c10      	ldr	r4, [pc, #64]	; (103d0 <ScanChannel+0xe0>)
   1038e:	701a      	strb	r2, [r3, #0]
   10390:	7868      	ldrb	r0, [r5, #1]
   10392:	6823      	ldr	r3, [r4, #0]
   10394:	0029      	movs	r1, r5
   10396:	4798      	blx	r3
   10398:	2300      	movs	r3, #0
   1039a:	2000      	movs	r0, #0
   1039c:	6023      	str	r3, [r4, #0]
   1039e:	b010      	add	sp, #64	; 0x40
   103a0:	bc04      	pop	{r2}
   103a2:	4690      	mov	r8, r2
   103a4:	bdf0      	pop	{r4, r5, r6, r7, pc}
   103a6:	2000      	movs	r0, #0
   103a8:	e7f9      	b.n	1039e <ScanChannel+0xae>
   103aa:	46c0      	nop			; (mov r8, r8)
   103ac:	20002888 	.word	0x20002888
   103b0:	0000d93d 	.word	0x0000d93d
   103b4:	0000bc11 	.word	0x0000bc11
   103b8:	0000ffff 	.word	0x0000ffff
   103bc:	0000f029 	.word	0x0000f029
   103c0:	0000f079 	.word	0x0000f079
   103c4:	00010619 	.word	0x00010619
   103c8:	0000f105 	.word	0x0000f105
   103cc:	20001ce1 	.word	0x20001ce1
   103d0:	20001d10 	.word	0x20001d10

000103d4 <scanDurationExpired>:
   103d4:	b510      	push	{r4, lr}
   103d6:	4b0d      	ldr	r3, [pc, #52]	; (1040c <scanDurationExpired+0x38>)
   103d8:	4c0d      	ldr	r4, [pc, #52]	; (10410 <scanDurationExpired+0x3c>)
   103da:	781a      	ldrb	r2, [r3, #0]
   103dc:	2301      	movs	r3, #1
   103de:	4093      	lsls	r3, r2
   103e0:	6820      	ldr	r0, [r4, #0]
   103e2:	6842      	ldr	r2, [r0, #4]
   103e4:	439a      	bics	r2, r3
   103e6:	6042      	str	r2, [r0, #4]
   103e8:	4b0a      	ldr	r3, [pc, #40]	; (10414 <scanDurationExpired+0x40>)
   103ea:	4798      	blx	r3
   103ec:	2800      	cmp	r0, #0
   103ee:	d00b      	beq.n	10408 <scanDurationExpired+0x34>
   103f0:	2205      	movs	r2, #5
   103f2:	6823      	ldr	r3, [r4, #0]
   103f4:	7018      	strb	r0, [r3, #0]
   103f6:	4b08      	ldr	r3, [pc, #32]	; (10418 <scanDurationExpired+0x44>)
   103f8:	6821      	ldr	r1, [r4, #0]
   103fa:	4c08      	ldr	r4, [pc, #32]	; (1041c <scanDurationExpired+0x48>)
   103fc:	701a      	strb	r2, [r3, #0]
   103fe:	7848      	ldrb	r0, [r1, #1]
   10400:	6823      	ldr	r3, [r4, #0]
   10402:	4798      	blx	r3
   10404:	2300      	movs	r3, #0
   10406:	6023      	str	r3, [r4, #0]
   10408:	bd10      	pop	{r4, pc}
   1040a:	46c0      	nop			; (mov r8, r8)
   1040c:	20002888 	.word	0x20002888
   10410:	20001d18 	.word	0x20001d18
   10414:	000102f1 	.word	0x000102f1
   10418:	20001ce1 	.word	0x20001ce1
   1041c:	20001d10 	.word	0x20001d10

00010420 <roleUpgradeTimerExpired>:
   10420:	b530      	push	{r4, r5, lr}
   10422:	2088      	movs	r0, #136	; 0x88
   10424:	b08d      	sub	sp, #52	; 0x34
   10426:	4b15      	ldr	r3, [pc, #84]	; (1047c <roleUpgradeTimerExpired+0x5c>)
   10428:	4798      	blx	r3
   1042a:	1e04      	subs	r4, r0, #0
   1042c:	d023      	beq.n	10476 <roleUpgradeTimerExpired+0x56>
   1042e:	4b14      	ldr	r3, [pc, #80]	; (10480 <roleUpgradeTimerExpired+0x60>)
   10430:	2200      	movs	r2, #0
   10432:	8819      	ldrh	r1, [r3, #0]
   10434:	20ff      	movs	r0, #255	; 0xff
   10436:	b289      	uxth	r1, r1
   10438:	ab04      	add	r3, sp, #16
   1043a:	4d12      	ldr	r5, [pc, #72]	; (10484 <roleUpgradeTimerExpired+0x64>)
   1043c:	47a8      	blx	r5
   1043e:	0021      	movs	r1, r4
   10440:	4b11      	ldr	r3, [pc, #68]	; (10488 <roleUpgradeTimerExpired+0x68>)
   10442:	a804      	add	r0, sp, #16
   10444:	4798      	blx	r3
   10446:	2305      	movs	r3, #5
   10448:	0005      	movs	r5, r0
   1044a:	5423      	strb	r3, [r4, r0]
   1044c:	3001      	adds	r0, #1
   1044e:	b2c0      	uxtb	r0, r0
   10450:	1820      	adds	r0, r4, r0
   10452:	2208      	movs	r2, #8
   10454:	490d      	ldr	r1, [pc, #52]	; (1048c <roleUpgradeTimerExpired+0x6c>)
   10456:	4b0e      	ldr	r3, [pc, #56]	; (10490 <roleUpgradeTimerExpired+0x70>)
   10458:	4798      	blx	r3
   1045a:	4b0e      	ldr	r3, [pc, #56]	; (10494 <roleUpgradeTimerExpired+0x74>)
   1045c:	2209      	movs	r2, #9
   1045e:	9303      	str	r3, [sp, #12]
   10460:	2300      	movs	r3, #0
   10462:	9302      	str	r3, [sp, #8]
   10464:	4b0c      	ldr	r3, [pc, #48]	; (10498 <roleUpgradeTimerExpired+0x78>)
   10466:	0029      	movs	r1, r5
   10468:	9301      	str	r3, [sp, #4]
   1046a:	2302      	movs	r3, #2
   1046c:	a804      	add	r0, sp, #16
   1046e:	9300      	str	r3, [sp, #0]
   10470:	0023      	movs	r3, r4
   10472:	4c0a      	ldr	r4, [pc, #40]	; (1049c <roleUpgradeTimerExpired+0x7c>)
   10474:	47a0      	blx	r4
   10476:	b00d      	add	sp, #52	; 0x34
   10478:	bd30      	pop	{r4, r5, pc}
   1047a:	46c0      	nop			; (mov r8, r8)
   1047c:	0000bc11 	.word	0x0000bc11
   10480:	200028b8 	.word	0x200028b8
   10484:	0000f029 	.word	0x0000f029
   10488:	0000f079 	.word	0x0000f079
   1048c:	20000094 	.word	0x20000094
   10490:	00014cdf 	.word	0x00014cdf
   10494:	000106d5 	.word	0x000106d5
   10498:	2000009c 	.word	0x2000009c
   1049c:	0000f105 	.word	0x0000f105

000104a0 <commandConfcb>:
   104a0:	b510      	push	{r4, lr}
   104a2:	0010      	movs	r0, r2
   104a4:	4b01      	ldr	r3, [pc, #4]	; (104ac <commandConfcb+0xc>)
   104a6:	4798      	blx	r3
   104a8:	bd10      	pop	{r4, pc}
   104aa:	46c0      	nop			; (mov r8, r8)
   104ac:	0000bccd 	.word	0x0000bccd

000104b0 <sendKeepAlive>:
   104b0:	22ff      	movs	r2, #255	; 0xff
   104b2:	b5f0      	push	{r4, r5, r6, r7, lr}
   104b4:	4e1c      	ldr	r6, [pc, #112]	; (10528 <sendKeepAlive+0x78>)
   104b6:	4d1d      	ldr	r5, [pc, #116]	; (1052c <sendKeepAlive+0x7c>)
   104b8:	8833      	ldrh	r3, [r6, #0]
   104ba:	b08f      	sub	sp, #60	; 0x3c
   104bc:	8828      	ldrh	r0, [r5, #0]
   104be:	421a      	tst	r2, r3
   104c0:	d02e      	beq.n	10520 <sendKeepAlive+0x70>
   104c2:	2416      	movs	r4, #22
   104c4:	4b1a      	ldr	r3, [pc, #104]	; (10530 <sendKeepAlive+0x80>)
   104c6:	446c      	add	r4, sp
   104c8:	8020      	strh	r0, [r4, #0]
   104ca:	4298      	cmp	r0, r3
   104cc:	d026      	beq.n	1051c <sendKeepAlive+0x6c>
   104ce:	2088      	movs	r0, #136	; 0x88
   104d0:	4b18      	ldr	r3, [pc, #96]	; (10534 <sendKeepAlive+0x84>)
   104d2:	4798      	blx	r3
   104d4:	1e07      	subs	r7, r0, #0
   104d6:	d021      	beq.n	1051c <sendKeepAlive+0x6c>
   104d8:	8831      	ldrh	r1, [r6, #0]
   104da:	882a      	ldrh	r2, [r5, #0]
   104dc:	b289      	uxth	r1, r1
   104de:	ab06      	add	r3, sp, #24
   104e0:	20ff      	movs	r0, #255	; 0xff
   104e2:	4d15      	ldr	r5, [pc, #84]	; (10538 <sendKeepAlive+0x88>)
   104e4:	47a8      	blx	r5
   104e6:	0039      	movs	r1, r7
   104e8:	4b14      	ldr	r3, [pc, #80]	; (1053c <sendKeepAlive+0x8c>)
   104ea:	a806      	add	r0, sp, #24
   104ec:	4798      	blx	r3
   104ee:	2307      	movs	r3, #7
   104f0:	0005      	movs	r5, r0
   104f2:	543b      	strb	r3, [r7, r0]
   104f4:	3001      	adds	r0, #1
   104f6:	b2c0      	uxtb	r0, r0
   104f8:	2208      	movs	r2, #8
   104fa:	4911      	ldr	r1, [pc, #68]	; (10540 <sendKeepAlive+0x90>)
   104fc:	4b11      	ldr	r3, [pc, #68]	; (10544 <sendKeepAlive+0x94>)
   104fe:	1838      	adds	r0, r7, r0
   10500:	4798      	blx	r3
   10502:	4b11      	ldr	r3, [pc, #68]	; (10548 <sendKeepAlive+0x98>)
   10504:	9401      	str	r4, [sp, #4]
   10506:	9303      	str	r3, [sp, #12]
   10508:	2300      	movs	r3, #0
   1050a:	9302      	str	r3, [sp, #8]
   1050c:	3302      	adds	r3, #2
   1050e:	9300      	str	r3, [sp, #0]
   10510:	2209      	movs	r2, #9
   10512:	003b      	movs	r3, r7
   10514:	0029      	movs	r1, r5
   10516:	a806      	add	r0, sp, #24
   10518:	4c0c      	ldr	r4, [pc, #48]	; (1054c <sendKeepAlive+0x9c>)
   1051a:	47a0      	blx	r4
   1051c:	b00f      	add	sp, #60	; 0x3c
   1051e:	bdf0      	pop	{r4, r5, r6, r7, pc}
   10520:	4b0b      	ldr	r3, [pc, #44]	; (10550 <sendKeepAlive+0xa0>)
   10522:	4798      	blx	r3
   10524:	e7cd      	b.n	104c2 <sendKeepAlive+0x12>
   10526:	46c0      	nop			; (mov r8, r8)
   10528:	200028b8 	.word	0x200028b8
   1052c:	2000009c 	.word	0x2000009c
   10530:	0000ffff 	.word	0x0000ffff
   10534:	0000bc11 	.word	0x0000bc11
   10538:	0000f029 	.word	0x0000f029
   1053c:	0000f079 	.word	0x0000f079
   10540:	20000094 	.word	0x20000094
   10544:	00014cdf 	.word	0x00014cdf
   10548:	00010865 	.word	0x00010865
   1054c:	0000f105 	.word	0x0000f105
   10550:	00011f69 	.word	0x00011f69

00010554 <dataWaitIntervalTimerHandler>:
   10554:	2200      	movs	r2, #0
   10556:	b510      	push	{r4, lr}
   10558:	4b0f      	ldr	r3, [pc, #60]	; (10598 <dataWaitIntervalTimerHandler+0x44>)
   1055a:	4c10      	ldr	r4, [pc, #64]	; (1059c <dataWaitIntervalTimerHandler+0x48>)
   1055c:	701a      	strb	r2, [r3, #0]
   1055e:	0020      	movs	r0, r4
   10560:	4b0f      	ldr	r3, [pc, #60]	; (105a0 <dataWaitIntervalTimerHandler+0x4c>)
   10562:	4798      	blx	r3
   10564:	4a0f      	ldr	r2, [pc, #60]	; (105a4 <dataWaitIntervalTimerHandler+0x50>)
   10566:	7813      	ldrb	r3, [r2, #0]
   10568:	3b01      	subs	r3, #1
   1056a:	b2db      	uxtb	r3, r3
   1056c:	7013      	strb	r3, [r2, #0]
   1056e:	2b00      	cmp	r3, #0
   10570:	d102      	bne.n	10578 <dataWaitIntervalTimerHandler+0x24>
   10572:	2000      	movs	r0, #0
   10574:	4b0c      	ldr	r3, [pc, #48]	; (105a8 <dataWaitIntervalTimerHandler+0x54>)
   10576:	4798      	blx	r3
   10578:	4b0c      	ldr	r3, [pc, #48]	; (105ac <dataWaitIntervalTimerHandler+0x58>)
   1057a:	0020      	movs	r0, r4
   1057c:	6123      	str	r3, [r4, #16]
   1057e:	4b0c      	ldr	r3, [pc, #48]	; (105b0 <dataWaitIntervalTimerHandler+0x5c>)
   10580:	681b      	ldr	r3, [r3, #0]
   10582:	6b5a      	ldr	r2, [r3, #52]	; 0x34
   10584:	23fa      	movs	r3, #250	; 0xfa
   10586:	009b      	lsls	r3, r3, #2
   10588:	4353      	muls	r3, r2
   1058a:	6063      	str	r3, [r4, #4]
   1058c:	60a3      	str	r3, [r4, #8]
   1058e:	2300      	movs	r3, #0
   10590:	7323      	strb	r3, [r4, #12]
   10592:	4b08      	ldr	r3, [pc, #32]	; (105b4 <dataWaitIntervalTimerHandler+0x60>)
   10594:	4798      	blx	r3
   10596:	bd10      	pop	{r4, pc}
   10598:	20001d0a 	.word	0x20001d0a
   1059c:	200028bc 	.word	0x200028bc
   105a0:	0000bf59 	.word	0x0000bf59
   105a4:	20001ce0 	.word	0x20001ce0
   105a8:	0000ac35 	.word	0x0000ac35
   105ac:	000108f5 	.word	0x000108f5
   105b0:	2000285c 	.word	0x2000285c
   105b4:	0000bfc5 	.word	0x0000bfc5

000105b8 <EstcommandConfcb>:
   105b8:	b570      	push	{r4, r5, r6, lr}
   105ba:	0010      	movs	r0, r2
   105bc:	4b0f      	ldr	r3, [pc, #60]	; (105fc <EstcommandConfcb+0x44>)
   105be:	000c      	movs	r4, r1
   105c0:	4798      	blx	r3
   105c2:	2c00      	cmp	r4, #0
   105c4:	d009      	beq.n	105da <EstcommandConfcb+0x22>
   105c6:	2205      	movs	r2, #5
   105c8:	4b0d      	ldr	r3, [pc, #52]	; (10600 <EstcommandConfcb+0x48>)
   105ca:	4d0e      	ldr	r5, [pc, #56]	; (10604 <EstcommandConfcb+0x4c>)
   105cc:	701a      	strb	r2, [r3, #0]
   105ce:	0020      	movs	r0, r4
   105d0:	682b      	ldr	r3, [r5, #0]
   105d2:	4798      	blx	r3
   105d4:	2300      	movs	r3, #0
   105d6:	602b      	str	r3, [r5, #0]
   105d8:	bd70      	pop	{r4, r5, r6, pc}
   105da:	480b      	ldr	r0, [pc, #44]	; (10608 <EstcommandConfcb+0x50>)
   105dc:	4b0b      	ldr	r3, [pc, #44]	; (1060c <EstcommandConfcb+0x54>)
   105de:	6103      	str	r3, [r0, #16]
   105e0:	4b0b      	ldr	r3, [pc, #44]	; (10610 <EstcommandConfcb+0x58>)
   105e2:	681a      	ldr	r2, [r3, #0]
   105e4:	233d      	movs	r3, #61	; 0x3d
   105e6:	5cd2      	ldrb	r2, [r2, r3]
   105e8:	23fa      	movs	r3, #250	; 0xfa
   105ea:	009b      	lsls	r3, r3, #2
   105ec:	4353      	muls	r3, r2
   105ee:	6043      	str	r3, [r0, #4]
   105f0:	6083      	str	r3, [r0, #8]
   105f2:	4b08      	ldr	r3, [pc, #32]	; (10614 <EstcommandConfcb+0x5c>)
   105f4:	7304      	strb	r4, [r0, #12]
   105f6:	4798      	blx	r3
   105f8:	e7ee      	b.n	105d8 <EstcommandConfcb+0x20>
   105fa:	46c0      	nop			; (mov r8, r8)
   105fc:	0000bccd 	.word	0x0000bccd
   10600:	20001ce1 	.word	0x20001ce1
   10604:	20001d0c 	.word	0x20001d0c
   10608:	200028dc 	.word	0x200028dc
   1060c:	000102d1 	.word	0x000102d1
   10610:	2000285c 	.word	0x2000285c
   10614:	0000bfc5 	.word	0x0000bfc5

00010618 <beaconReqConfcb>:
   10618:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1061a:	46ce      	mov	lr, r9
   1061c:	4647      	mov	r7, r8
   1061e:	0010      	movs	r0, r2
   10620:	b580      	push	{r7, lr}
   10622:	4b21      	ldr	r3, [pc, #132]	; (106a8 <beaconReqConfcb+0x90>)
   10624:	000d      	movs	r5, r1
   10626:	4798      	blx	r3
   10628:	2d00      	cmp	r5, #0
   1062a:	d016      	beq.n	1065a <beaconReqConfcb+0x42>
   1062c:	4c1f      	ldr	r4, [pc, #124]	; (106ac <beaconReqConfcb+0x94>)
   1062e:	4b20      	ldr	r3, [pc, #128]	; (106b0 <beaconReqConfcb+0x98>)
   10630:	6820      	ldr	r0, [r4, #0]
   10632:	4798      	blx	r3
   10634:	2800      	cmp	r0, #0
   10636:	d103      	bne.n	10640 <beaconReqConfcb+0x28>
   10638:	bc0c      	pop	{r2, r3}
   1063a:	4690      	mov	r8, r2
   1063c:	4699      	mov	r9, r3
   1063e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   10640:	2205      	movs	r2, #5
   10642:	6823      	ldr	r3, [r4, #0]
   10644:	7018      	strb	r0, [r3, #0]
   10646:	4b1b      	ldr	r3, [pc, #108]	; (106b4 <beaconReqConfcb+0x9c>)
   10648:	6821      	ldr	r1, [r4, #0]
   1064a:	4c1b      	ldr	r4, [pc, #108]	; (106b8 <beaconReqConfcb+0xa0>)
   1064c:	701a      	strb	r2, [r3, #0]
   1064e:	7848      	ldrb	r0, [r1, #1]
   10650:	6823      	ldr	r3, [r4, #0]
   10652:	4798      	blx	r3
   10654:	2300      	movs	r3, #0
   10656:	6023      	str	r3, [r4, #0]
   10658:	e7ee      	b.n	10638 <beaconReqConfcb+0x20>
   1065a:	2401      	movs	r4, #1
   1065c:	0022      	movs	r2, r4
   1065e:	4e17      	ldr	r6, [pc, #92]	; (106bc <beaconReqConfcb+0xa4>)
   10660:	4b17      	ldr	r3, [pc, #92]	; (106c0 <beaconReqConfcb+0xa8>)
   10662:	6133      	str	r3, [r6, #16]
   10664:	4b17      	ldr	r3, [pc, #92]	; (106c4 <beaconReqConfcb+0xac>)
   10666:	4699      	mov	r9, r3
   10668:	781b      	ldrb	r3, [r3, #0]
   1066a:	409a      	lsls	r2, r3
   1066c:	0013      	movs	r3, r2
   1066e:	3301      	adds	r3, #1
   10670:	0118      	lsls	r0, r3, #4
   10672:	1ac0      	subs	r0, r0, r3
   10674:	4b14      	ldr	r3, [pc, #80]	; (106c8 <beaconReqConfcb+0xb0>)
   10676:	0180      	lsls	r0, r0, #6
   10678:	4698      	mov	r8, r3
   1067a:	4798      	blx	r3
   1067c:	21fa      	movs	r1, #250	; 0xfa
   1067e:	4f13      	ldr	r7, [pc, #76]	; (106cc <beaconReqConfcb+0xb4>)
   10680:	0089      	lsls	r1, r1, #2
   10682:	47b8      	blx	r7
   10684:	464b      	mov	r3, r9
   10686:	781b      	ldrb	r3, [r3, #0]
   10688:	6070      	str	r0, [r6, #4]
   1068a:	409c      	lsls	r4, r3
   1068c:	3401      	adds	r4, #1
   1068e:	0120      	lsls	r0, r4, #4
   10690:	1b00      	subs	r0, r0, r4
   10692:	0180      	lsls	r0, r0, #6
   10694:	47c0      	blx	r8
   10696:	21fa      	movs	r1, #250	; 0xfa
   10698:	0089      	lsls	r1, r1, #2
   1069a:	47b8      	blx	r7
   1069c:	4b0c      	ldr	r3, [pc, #48]	; (106d0 <beaconReqConfcb+0xb8>)
   1069e:	60b0      	str	r0, [r6, #8]
   106a0:	0030      	movs	r0, r6
   106a2:	7335      	strb	r5, [r6, #12]
   106a4:	4798      	blx	r3
   106a6:	e7c7      	b.n	10638 <beaconReqConfcb+0x20>
   106a8:	0000bccd 	.word	0x0000bccd
   106ac:	20001d18 	.word	0x20001d18
   106b0:	000102f1 	.word	0x000102f1
   106b4:	20001ce1 	.word	0x20001ce1
   106b8:	20001d10 	.word	0x20001d10
   106bc:	200028dc 	.word	0x200028dc
   106c0:	000103d5 	.word	0x000103d5
   106c4:	200028d8 	.word	0x200028d8
   106c8:	0000b31d 	.word	0x0000b31d
   106cc:	00012469 	.word	0x00012469
   106d0:	0000bfc5 	.word	0x0000bfc5

000106d4 <roleUpGradeReqConfcb>:
   106d4:	b510      	push	{r4, lr}
   106d6:	0014      	movs	r4, r2
   106d8:	2903      	cmp	r1, #3
   106da:	d009      	beq.n	106f0 <roleUpGradeReqConfcb+0x1c>
   106dc:	4b13      	ldr	r3, [pc, #76]	; (1072c <roleUpGradeReqConfcb+0x58>)
   106de:	681a      	ldr	r2, [r3, #0]
   106e0:	233c      	movs	r3, #60	; 0x3c
   106e2:	5cd2      	ldrb	r2, [r2, r3]
   106e4:	4b12      	ldr	r3, [pc, #72]	; (10730 <roleUpGradeReqConfcb+0x5c>)
   106e6:	701a      	strb	r2, [r3, #0]
   106e8:	0020      	movs	r0, r4
   106ea:	4b12      	ldr	r3, [pc, #72]	; (10734 <roleUpGradeReqConfcb+0x60>)
   106ec:	4798      	blx	r3
   106ee:	bd10      	pop	{r4, pc}
   106f0:	4a0f      	ldr	r2, [pc, #60]	; (10730 <roleUpGradeReqConfcb+0x5c>)
   106f2:	7813      	ldrb	r3, [r2, #0]
   106f4:	2b00      	cmp	r3, #0
   106f6:	d0f7      	beq.n	106e8 <roleUpGradeReqConfcb+0x14>
   106f8:	3b01      	subs	r3, #1
   106fa:	b2db      	uxtb	r3, r3
   106fc:	7013      	strb	r3, [r2, #0]
   106fe:	2b00      	cmp	r3, #0
   10700:	d1f2      	bne.n	106e8 <roleUpGradeReqConfcb+0x14>
   10702:	4a0d      	ldr	r2, [pc, #52]	; (10738 <roleUpGradeReqConfcb+0x64>)
   10704:	480d      	ldr	r0, [pc, #52]	; (1073c <roleUpGradeReqConfcb+0x68>)
   10706:	7013      	strb	r3, [r2, #0]
   10708:	4b0d      	ldr	r3, [pc, #52]	; (10740 <roleUpGradeReqConfcb+0x6c>)
   1070a:	4798      	blx	r3
   1070c:	2208      	movs	r2, #8
   1070e:	4b0d      	ldr	r3, [pc, #52]	; (10744 <roleUpGradeReqConfcb+0x70>)
   10710:	480d      	ldr	r0, [pc, #52]	; (10748 <roleUpGradeReqConfcb+0x74>)
   10712:	701a      	strb	r2, [r3, #0]
   10714:	4b0d      	ldr	r3, [pc, #52]	; (1074c <roleUpGradeReqConfcb+0x78>)
   10716:	3a09      	subs	r2, #9
   10718:	801a      	strh	r2, [r3, #0]
   1071a:	4b0d      	ldr	r3, [pc, #52]	; (10750 <roleUpGradeReqConfcb+0x7c>)
   1071c:	4798      	blx	r3
   1071e:	4b0d      	ldr	r3, [pc, #52]	; (10754 <roleUpGradeReqConfcb+0x80>)
   10720:	681b      	ldr	r3, [r3, #0]
   10722:	2b00      	cmp	r3, #0
   10724:	d0e0      	beq.n	106e8 <roleUpGradeReqConfcb+0x14>
   10726:	4798      	blx	r3
   10728:	e7de      	b.n	106e8 <roleUpGradeReqConfcb+0x14>
   1072a:	46c0      	nop			; (mov r8, r8)
   1072c:	2000285c 	.word	0x2000285c
   10730:	200028d0 	.word	0x200028d0
   10734:	0000bccd 	.word	0x0000bccd
   10738:	20001d0a 	.word	0x20001d0a
   1073c:	200028bc 	.word	0x200028bc
   10740:	0000bf59 	.word	0x0000bf59
   10744:	20001ce1 	.word	0x20001ce1
   10748:	00004001 	.word	0x00004001
   1074c:	200028b8 	.word	0x200028b8
   10750:	0000a5b5 	.word	0x0000a5b5
   10754:	20002900 	.word	0x20002900

00010758 <dataReqConfcb>:
   10758:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1075a:	0010      	movs	r0, r2
   1075c:	4b30      	ldr	r3, [pc, #192]	; (10820 <dataReqConfcb+0xc8>)
   1075e:	000d      	movs	r5, r1
   10760:	4798      	blx	r3
   10762:	2d00      	cmp	r5, #0
   10764:	d03d      	beq.n	107e2 <dataReqConfcb+0x8a>
   10766:	4c2f      	ldr	r4, [pc, #188]	; (10824 <dataReqConfcb+0xcc>)
   10768:	4e2f      	ldr	r6, [pc, #188]	; (10828 <dataReqConfcb+0xd0>)
   1076a:	0020      	movs	r0, r4
   1076c:	47b0      	blx	r6
   1076e:	4a2f      	ldr	r2, [pc, #188]	; (1082c <dataReqConfcb+0xd4>)
   10770:	7813      	ldrb	r3, [r2, #0]
   10772:	3b01      	subs	r3, #1
   10774:	b2db      	uxtb	r3, r3
   10776:	7013      	strb	r3, [r2, #0]
   10778:	2b00      	cmp	r3, #0
   1077a:	d04d      	beq.n	10818 <dataReqConfcb+0xc0>
   1077c:	4b2c      	ldr	r3, [pc, #176]	; (10830 <dataReqConfcb+0xd8>)
   1077e:	4f2d      	ldr	r7, [pc, #180]	; (10834 <dataReqConfcb+0xdc>)
   10780:	6123      	str	r3, [r4, #16]
   10782:	683b      	ldr	r3, [r7, #0]
   10784:	0020      	movs	r0, r4
   10786:	6b5a      	ldr	r2, [r3, #52]	; 0x34
   10788:	23fa      	movs	r3, #250	; 0xfa
   1078a:	009b      	lsls	r3, r3, #2
   1078c:	4353      	muls	r3, r2
   1078e:	6063      	str	r3, [r4, #4]
   10790:	60a3      	str	r3, [r4, #8]
   10792:	2300      	movs	r3, #0
   10794:	7323      	strb	r3, [r4, #12]
   10796:	4b28      	ldr	r3, [pc, #160]	; (10838 <dataReqConfcb+0xe0>)
   10798:	4798      	blx	r3
   1079a:	2d03      	cmp	r5, #3
   1079c:	d005      	beq.n	107aa <dataReqConfcb+0x52>
   1079e:	233c      	movs	r3, #60	; 0x3c
   107a0:	683a      	ldr	r2, [r7, #0]
   107a2:	5cd2      	ldrb	r2, [r2, r3]
   107a4:	4b25      	ldr	r3, [pc, #148]	; (1083c <dataReqConfcb+0xe4>)
   107a6:	701a      	strb	r2, [r3, #0]
   107a8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   107aa:	4a24      	ldr	r2, [pc, #144]	; (1083c <dataReqConfcb+0xe4>)
   107ac:	7813      	ldrb	r3, [r2, #0]
   107ae:	2b00      	cmp	r3, #0
   107b0:	d0fa      	beq.n	107a8 <dataReqConfcb+0x50>
   107b2:	3b01      	subs	r3, #1
   107b4:	b2db      	uxtb	r3, r3
   107b6:	7013      	strb	r3, [r2, #0]
   107b8:	2b00      	cmp	r3, #0
   107ba:	d1f5      	bne.n	107a8 <dataReqConfcb+0x50>
   107bc:	4a20      	ldr	r2, [pc, #128]	; (10840 <dataReqConfcb+0xe8>)
   107be:	0020      	movs	r0, r4
   107c0:	7013      	strb	r3, [r2, #0]
   107c2:	47b0      	blx	r6
   107c4:	2208      	movs	r2, #8
   107c6:	4b1f      	ldr	r3, [pc, #124]	; (10844 <dataReqConfcb+0xec>)
   107c8:	481f      	ldr	r0, [pc, #124]	; (10848 <dataReqConfcb+0xf0>)
   107ca:	701a      	strb	r2, [r3, #0]
   107cc:	4b1f      	ldr	r3, [pc, #124]	; (1084c <dataReqConfcb+0xf4>)
   107ce:	3a09      	subs	r2, #9
   107d0:	801a      	strh	r2, [r3, #0]
   107d2:	4b1f      	ldr	r3, [pc, #124]	; (10850 <dataReqConfcb+0xf8>)
   107d4:	4798      	blx	r3
   107d6:	4b1f      	ldr	r3, [pc, #124]	; (10854 <dataReqConfcb+0xfc>)
   107d8:	681b      	ldr	r3, [r3, #0]
   107da:	2b00      	cmp	r3, #0
   107dc:	d0e4      	beq.n	107a8 <dataReqConfcb+0x50>
   107de:	4798      	blx	r3
   107e0:	e7e2      	b.n	107a8 <dataReqConfcb+0x50>
   107e2:	2206      	movs	r2, #6
   107e4:	4b17      	ldr	r3, [pc, #92]	; (10844 <dataReqConfcb+0xec>)
   107e6:	3532      	adds	r5, #50	; 0x32
   107e8:	701a      	strb	r2, [r3, #0]
   107ea:	4b1b      	ldr	r3, [pc, #108]	; (10858 <dataReqConfcb+0x100>)
   107ec:	781b      	ldrb	r3, [r3, #0]
   107ee:	2b0a      	cmp	r3, #10
   107f0:	d800      	bhi.n	107f4 <dataReqConfcb+0x9c>
   107f2:	3532      	adds	r5, #50	; 0x32
   107f4:	4c0b      	ldr	r4, [pc, #44]	; (10824 <dataReqConfcb+0xcc>)
   107f6:	4b0c      	ldr	r3, [pc, #48]	; (10828 <dataReqConfcb+0xd0>)
   107f8:	0020      	movs	r0, r4
   107fa:	4798      	blx	r3
   107fc:	4b17      	ldr	r3, [pc, #92]	; (1085c <dataReqConfcb+0x104>)
   107fe:	0020      	movs	r0, r4
   10800:	6123      	str	r3, [r4, #16]
   10802:	2300      	movs	r3, #0
   10804:	7323      	strb	r3, [r4, #12]
   10806:	4b0c      	ldr	r3, [pc, #48]	; (10838 <dataReqConfcb+0xe0>)
   10808:	6065      	str	r5, [r4, #4]
   1080a:	60a5      	str	r5, [r4, #8]
   1080c:	4798      	blx	r3
   1080e:	2201      	movs	r2, #1
   10810:	4b0b      	ldr	r3, [pc, #44]	; (10840 <dataReqConfcb+0xe8>)
   10812:	4f08      	ldr	r7, [pc, #32]	; (10834 <dataReqConfcb+0xdc>)
   10814:	701a      	strb	r2, [r3, #0]
   10816:	e7c2      	b.n	1079e <dataReqConfcb+0x46>
   10818:	4b11      	ldr	r3, [pc, #68]	; (10860 <dataReqConfcb+0x108>)
   1081a:	2000      	movs	r0, #0
   1081c:	4798      	blx	r3
   1081e:	e7ad      	b.n	1077c <dataReqConfcb+0x24>
   10820:	0000bccd 	.word	0x0000bccd
   10824:	200028bc 	.word	0x200028bc
   10828:	0000bf59 	.word	0x0000bf59
   1082c:	20001ce0 	.word	0x20001ce0
   10830:	000108f5 	.word	0x000108f5
   10834:	2000285c 	.word	0x2000285c
   10838:	0000bfc5 	.word	0x0000bfc5
   1083c:	200028d0 	.word	0x200028d0
   10840:	20001d0a 	.word	0x20001d0a
   10844:	20001ce1 	.word	0x20001ce1
   10848:	00004001 	.word	0x00004001
   1084c:	200028b8 	.word	0x200028b8
   10850:	0000a5b5 	.word	0x0000a5b5
   10854:	20002900 	.word	0x20002900
   10858:	20002888 	.word	0x20002888
   1085c:	00010555 	.word	0x00010555
   10860:	0000ac35 	.word	0x0000ac35

00010864 <keepAliveReqConfcb>:
   10864:	b570      	push	{r4, r5, r6, lr}
   10866:	0015      	movs	r5, r2
   10868:	22ff      	movs	r2, #255	; 0xff
   1086a:	4c17      	ldr	r4, [pc, #92]	; (108c8 <keepAliveReqConfcb+0x64>)
   1086c:	8823      	ldrh	r3, [r4, #0]
   1086e:	421a      	tst	r2, r3
   10870:	d103      	bne.n	1087a <keepAliveReqConfcb+0x16>
   10872:	0028      	movs	r0, r5
   10874:	4b15      	ldr	r3, [pc, #84]	; (108cc <keepAliveReqConfcb+0x68>)
   10876:	4798      	blx	r3
   10878:	bd70      	pop	{r4, r5, r6, pc}
   1087a:	2903      	cmp	r1, #3
   1087c:	d006      	beq.n	1088c <keepAliveReqConfcb+0x28>
   1087e:	4b14      	ldr	r3, [pc, #80]	; (108d0 <keepAliveReqConfcb+0x6c>)
   10880:	681a      	ldr	r2, [r3, #0]
   10882:	233c      	movs	r3, #60	; 0x3c
   10884:	5cd2      	ldrb	r2, [r2, r3]
   10886:	4b13      	ldr	r3, [pc, #76]	; (108d4 <keepAliveReqConfcb+0x70>)
   10888:	701a      	strb	r2, [r3, #0]
   1088a:	e7f2      	b.n	10872 <keepAliveReqConfcb+0xe>
   1088c:	4a11      	ldr	r2, [pc, #68]	; (108d4 <keepAliveReqConfcb+0x70>)
   1088e:	7813      	ldrb	r3, [r2, #0]
   10890:	2b00      	cmp	r3, #0
   10892:	d0ee      	beq.n	10872 <keepAliveReqConfcb+0xe>
   10894:	3b01      	subs	r3, #1
   10896:	b2db      	uxtb	r3, r3
   10898:	7013      	strb	r3, [r2, #0]
   1089a:	2b00      	cmp	r3, #0
   1089c:	d1e9      	bne.n	10872 <keepAliveReqConfcb+0xe>
   1089e:	4a0e      	ldr	r2, [pc, #56]	; (108d8 <keepAliveReqConfcb+0x74>)
   108a0:	480e      	ldr	r0, [pc, #56]	; (108dc <keepAliveReqConfcb+0x78>)
   108a2:	7013      	strb	r3, [r2, #0]
   108a4:	4b0e      	ldr	r3, [pc, #56]	; (108e0 <keepAliveReqConfcb+0x7c>)
   108a6:	4798      	blx	r3
   108a8:	2208      	movs	r2, #8
   108aa:	4b0e      	ldr	r3, [pc, #56]	; (108e4 <keepAliveReqConfcb+0x80>)
   108ac:	480e      	ldr	r0, [pc, #56]	; (108e8 <keepAliveReqConfcb+0x84>)
   108ae:	701a      	strb	r2, [r3, #0]
   108b0:	2301      	movs	r3, #1
   108b2:	425b      	negs	r3, r3
   108b4:	8023      	strh	r3, [r4, #0]
   108b6:	4b0d      	ldr	r3, [pc, #52]	; (108ec <keepAliveReqConfcb+0x88>)
   108b8:	4798      	blx	r3
   108ba:	4b0d      	ldr	r3, [pc, #52]	; (108f0 <keepAliveReqConfcb+0x8c>)
   108bc:	681b      	ldr	r3, [r3, #0]
   108be:	2b00      	cmp	r3, #0
   108c0:	d0d7      	beq.n	10872 <keepAliveReqConfcb+0xe>
   108c2:	4798      	blx	r3
   108c4:	e7d5      	b.n	10872 <keepAliveReqConfcb+0xe>
   108c6:	46c0      	nop			; (mov r8, r8)
   108c8:	200028b8 	.word	0x200028b8
   108cc:	0000bccd 	.word	0x0000bccd
   108d0:	2000285c 	.word	0x2000285c
   108d4:	200028d0 	.word	0x200028d0
   108d8:	20001d0a 	.word	0x20001d0a
   108dc:	200028bc 	.word	0x200028bc
   108e0:	0000bf59 	.word	0x0000bf59
   108e4:	20001ce1 	.word	0x20001ce1
   108e8:	00004001 	.word	0x00004001
   108ec:	0000a5b5 	.word	0x0000a5b5
   108f0:	20002900 	.word	0x20002900

000108f4 <rxOffEdKeepAliveTimerHandler>:
   108f4:	b5f0      	push	{r4, r5, r6, r7, lr}
   108f6:	46de      	mov	lr, fp
   108f8:	4657      	mov	r7, sl
   108fa:	464e      	mov	r6, r9
   108fc:	4645      	mov	r5, r8
   108fe:	b5e0      	push	{r5, r6, r7, lr}
   10900:	b091      	sub	sp, #68	; 0x44
   10902:	aa02      	add	r2, sp, #8
   10904:	4694      	mov	ip, r2
   10906:	2716      	movs	r7, #22
   10908:	22ff      	movs	r2, #255	; 0xff
   1090a:	4e34      	ldr	r6, [pc, #208]	; (109dc <rxOffEdKeepAliveTimerHandler+0xe8>)
   1090c:	4467      	add	r7, ip
   1090e:	8833      	ldrh	r3, [r6, #0]
   10910:	2088      	movs	r0, #136	; 0x88
   10912:	4393      	bics	r3, r2
   10914:	803b      	strh	r3, [r7, #0]
   10916:	4b32      	ldr	r3, [pc, #200]	; (109e0 <rxOffEdKeepAliveTimerHandler+0xec>)
   10918:	4798      	blx	r3
   1091a:	1e05      	subs	r5, r0, #0
   1091c:	d040      	beq.n	109a0 <rxOffEdKeepAliveTimerHandler+0xac>
   1091e:	4c31      	ldr	r4, [pc, #196]	; (109e4 <rxOffEdKeepAliveTimerHandler+0xf0>)
   10920:	4b31      	ldr	r3, [pc, #196]	; (109e8 <rxOffEdKeepAliveTimerHandler+0xf4>)
   10922:	0020      	movs	r0, r4
   10924:	4798      	blx	r3
   10926:	22fa      	movs	r2, #250	; 0xfa
   10928:	4b30      	ldr	r3, [pc, #192]	; (109ec <rxOffEdKeepAliveTimerHandler+0xf8>)
   1092a:	0092      	lsls	r2, r2, #2
   1092c:	6123      	str	r3, [r4, #16]
   1092e:	4b30      	ldr	r3, [pc, #192]	; (109f0 <rxOffEdKeepAliveTimerHandler+0xfc>)
   10930:	0020      	movs	r0, r4
   10932:	469a      	mov	sl, r3
   10934:	681b      	ldr	r3, [r3, #0]
   10936:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   10938:	4353      	muls	r3, r2
   1093a:	6063      	str	r3, [r4, #4]
   1093c:	60a3      	str	r3, [r4, #8]
   1093e:	2300      	movs	r3, #0
   10940:	4699      	mov	r9, r3
   10942:	7323      	strb	r3, [r4, #12]
   10944:	4b2b      	ldr	r3, [pc, #172]	; (109f4 <rxOffEdKeepAliveTimerHandler+0x100>)
   10946:	469b      	mov	fp, r3
   10948:	4798      	blx	r3
   1094a:	4b2b      	ldr	r3, [pc, #172]	; (109f8 <rxOffEdKeepAliveTimerHandler+0x104>)
   1094c:	8831      	ldrh	r1, [r6, #0]
   1094e:	4698      	mov	r8, r3
   10950:	4642      	mov	r2, r8
   10952:	781b      	ldrb	r3, [r3, #0]
   10954:	ae08      	add	r6, sp, #32
   10956:	3301      	adds	r3, #1
   10958:	7013      	strb	r3, [r2, #0]
   1095a:	b289      	uxth	r1, r1
   1095c:	883a      	ldrh	r2, [r7, #0]
   1095e:	0033      	movs	r3, r6
   10960:	9705      	str	r7, [sp, #20]
   10962:	2001      	movs	r0, #1
   10964:	4f25      	ldr	r7, [pc, #148]	; (109fc <rxOffEdKeepAliveTimerHandler+0x108>)
   10966:	47b8      	blx	r7
   10968:	2220      	movs	r2, #32
   1096a:	7873      	ldrb	r3, [r6, #1]
   1096c:	0029      	movs	r1, r5
   1096e:	4313      	orrs	r3, r2
   10970:	22ef      	movs	r2, #239	; 0xef
   10972:	4013      	ands	r3, r2
   10974:	7073      	strb	r3, [r6, #1]
   10976:	0030      	movs	r0, r6
   10978:	4b21      	ldr	r3, [pc, #132]	; (10a00 <rxOffEdKeepAliveTimerHandler+0x10c>)
   1097a:	4798      	blx	r3
   1097c:	2331      	movs	r3, #49	; 0x31
   1097e:	542b      	strb	r3, [r5, r0]
   10980:	4b20      	ldr	r3, [pc, #128]	; (10a04 <rxOffEdKeepAliveTimerHandler+0x110>)
   10982:	0001      	movs	r1, r0
   10984:	9303      	str	r3, [sp, #12]
   10986:	464b      	mov	r3, r9
   10988:	9302      	str	r3, [sp, #8]
   1098a:	9b05      	ldr	r3, [sp, #20]
   1098c:	0030      	movs	r0, r6
   1098e:	9301      	str	r3, [sp, #4]
   10990:	2302      	movs	r3, #2
   10992:	4e1d      	ldr	r6, [pc, #116]	; (10a08 <rxOffEdKeepAliveTimerHandler+0x114>)
   10994:	9300      	str	r3, [sp, #0]
   10996:	2201      	movs	r2, #1
   10998:	002b      	movs	r3, r5
   1099a:	47b0      	blx	r6
   1099c:	1e06      	subs	r6, r0, #0
   1099e:	d006      	beq.n	109ae <rxOffEdKeepAliveTimerHandler+0xba>
   109a0:	b011      	add	sp, #68	; 0x44
   109a2:	bc3c      	pop	{r2, r3, r4, r5}
   109a4:	4690      	mov	r8, r2
   109a6:	4699      	mov	r9, r3
   109a8:	46a2      	mov	sl, r4
   109aa:	46ab      	mov	fp, r5
   109ac:	bdf0      	pop	{r4, r5, r6, r7, pc}
   109ae:	0028      	movs	r0, r5
   109b0:	4b16      	ldr	r3, [pc, #88]	; (10a0c <rxOffEdKeepAliveTimerHandler+0x118>)
   109b2:	4798      	blx	r3
   109b4:	4643      	mov	r3, r8
   109b6:	4642      	mov	r2, r8
   109b8:	781b      	ldrb	r3, [r3, #0]
   109ba:	0020      	movs	r0, r4
   109bc:	3b01      	subs	r3, #1
   109be:	7013      	strb	r3, [r2, #0]
   109c0:	4b0a      	ldr	r3, [pc, #40]	; (109ec <rxOffEdKeepAliveTimerHandler+0xf8>)
   109c2:	22fa      	movs	r2, #250	; 0xfa
   109c4:	6123      	str	r3, [r4, #16]
   109c6:	4653      	mov	r3, sl
   109c8:	681b      	ldr	r3, [r3, #0]
   109ca:	0092      	lsls	r2, r2, #2
   109cc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   109ce:	7326      	strb	r6, [r4, #12]
   109d0:	4353      	muls	r3, r2
   109d2:	6063      	str	r3, [r4, #4]
   109d4:	60a3      	str	r3, [r4, #8]
   109d6:	47d8      	blx	fp
   109d8:	e7e2      	b.n	109a0 <rxOffEdKeepAliveTimerHandler+0xac>
   109da:	46c0      	nop			; (mov r8, r8)
   109dc:	200028b8 	.word	0x200028b8
   109e0:	0000bc11 	.word	0x0000bc11
   109e4:	200028bc 	.word	0x200028bc
   109e8:	0000bf59 	.word	0x0000bf59
   109ec:	000108f5 	.word	0x000108f5
   109f0:	2000285c 	.word	0x2000285c
   109f4:	0000bfc5 	.word	0x0000bfc5
   109f8:	20001ce0 	.word	0x20001ce0
   109fc:	0000f029 	.word	0x0000f029
   10a00:	0000f079 	.word	0x0000f079
   10a04:	00010759 	.word	0x00010759
   10a08:	0000f105 	.word	0x0000f105
   10a0c:	0000bccd 	.word	0x0000bccd

00010a10 <MiApp_EstablishConnection>:
   10a10:	b5f0      	push	{r4, r5, r6, r7, lr}
   10a12:	46c6      	mov	lr, r8
   10a14:	2417      	movs	r4, #23
   10a16:	b500      	push	{lr}
   10a18:	001e      	movs	r6, r3
   10a1a:	4b33      	ldr	r3, [pc, #204]	; (10ae8 <MiApp_EstablishConnection+0xd8>)
   10a1c:	b090      	sub	sp, #64	; 0x40
   10a1e:	681b      	ldr	r3, [r3, #0]
   10a20:	446c      	add	r4, sp
   10a22:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   10a24:	0015      	movs	r5, r2
   10a26:	9307      	str	r3, [sp, #28]
   10a28:	4b30      	ldr	r3, [pc, #192]	; (10aec <MiApp_EstablishConnection+0xdc>)
   10a2a:	7020      	strb	r0, [r4, #0]
   10a2c:	4798      	blx	r3
   10a2e:	7823      	ldrb	r3, [r4, #0]
   10a30:	40d8      	lsrs	r0, r3
   10a32:	0003      	movs	r3, r0
   10a34:	2001      	movs	r0, #1
   10a36:	07db      	lsls	r3, r3, #31
   10a38:	d508      	bpl.n	10a4c <MiApp_EstablishConnection+0x3c>
   10a3a:	9b16      	ldr	r3, [sp, #88]	; 0x58
   10a3c:	2b00      	cmp	r3, #0
   10a3e:	d005      	beq.n	10a4c <MiApp_EstablishConnection+0x3c>
   10a40:	4b2b      	ldr	r3, [pc, #172]	; (10af0 <MiApp_EstablishConnection+0xe0>)
   10a42:	4698      	mov	r8, r3
   10a44:	781b      	ldrb	r3, [r3, #0]
   10a46:	2b00      	cmp	r3, #0
   10a48:	d104      	bne.n	10a54 <MiApp_EstablishConnection+0x44>
   10a4a:	2000      	movs	r0, #0
   10a4c:	b010      	add	sp, #64	; 0x40
   10a4e:	bc04      	pop	{r2}
   10a50:	4690      	mov	r8, r2
   10a52:	bdf0      	pop	{r4, r5, r6, r7, pc}
   10a54:	2088      	movs	r0, #136	; 0x88
   10a56:	4b27      	ldr	r3, [pc, #156]	; (10af4 <MiApp_EstablishConnection+0xe4>)
   10a58:	4798      	blx	r3
   10a5a:	1e07      	subs	r7, r0, #0
   10a5c:	d0f5      	beq.n	10a4a <MiApp_EstablishConnection+0x3a>
   10a5e:	0021      	movs	r1, r4
   10a60:	4b25      	ldr	r3, [pc, #148]	; (10af8 <MiApp_EstablishConnection+0xe8>)
   10a62:	2000      	movs	r0, #0
   10a64:	4798      	blx	r3
   10a66:	4642      	mov	r2, r8
   10a68:	2304      	movs	r3, #4
   10a6a:	7013      	strb	r3, [r2, #0]
   10a6c:	4b23      	ldr	r3, [pc, #140]	; (10afc <MiApp_EstablishConnection+0xec>)
   10a6e:	4924      	ldr	r1, [pc, #144]	; (10b00 <MiApp_EstablishConnection+0xf0>)
   10a70:	701e      	strb	r6, [r3, #0]
   10a72:	786b      	ldrb	r3, [r5, #1]
   10a74:	782a      	ldrb	r2, [r5, #0]
   10a76:	021b      	lsls	r3, r3, #8
   10a78:	18d2      	adds	r2, r2, r3
   10a7a:	b292      	uxth	r2, r2
   10a7c:	ab08      	add	r3, sp, #32
   10a7e:	2001      	movs	r0, #1
   10a80:	4c20      	ldr	r4, [pc, #128]	; (10b04 <MiApp_EstablishConnection+0xf4>)
   10a82:	47a0      	blx	r4
   10a84:	466b      	mov	r3, sp
   10a86:	2221      	movs	r2, #33	; 0x21
   10a88:	189b      	adds	r3, r3, r2
   10a8a:	2220      	movs	r2, #32
   10a8c:	781b      	ldrb	r3, [r3, #0]
   10a8e:	2121      	movs	r1, #33	; 0x21
   10a90:	4313      	orrs	r3, r2
   10a92:	466a      	mov	r2, sp
   10a94:	1852      	adds	r2, r2, r1
   10a96:	7013      	strb	r3, [r2, #0]
   10a98:	0039      	movs	r1, r7
   10a9a:	a808      	add	r0, sp, #32
   10a9c:	4b1a      	ldr	r3, [pc, #104]	; (10b08 <MiApp_EstablishConnection+0xf8>)
   10a9e:	4798      	blx	r3
   10aa0:	0003      	movs	r3, r0
   10aa2:	2203      	movs	r2, #3
   10aa4:	3301      	adds	r3, #1
   10aa6:	b2db      	uxtb	r3, r3
   10aa8:	543a      	strb	r2, [r7, r0]
   10aaa:	54fa      	strb	r2, [r7, r3]
   10aac:	0003      	movs	r3, r0
   10aae:	4680      	mov	r8, r0
   10ab0:	3302      	adds	r3, #2
   10ab2:	3003      	adds	r0, #3
   10ab4:	b2db      	uxtb	r3, r3
   10ab6:	b2c0      	uxtb	r0, r0
   10ab8:	54fe      	strb	r6, [r7, r3]
   10aba:	a907      	add	r1, sp, #28
   10abc:	1838      	adds	r0, r7, r0
   10abe:	3201      	adds	r2, #1
   10ac0:	4b12      	ldr	r3, [pc, #72]	; (10b0c <MiApp_EstablishConnection+0xfc>)
   10ac2:	4798      	blx	r3
   10ac4:	9a16      	ldr	r2, [sp, #88]	; 0x58
   10ac6:	4b12      	ldr	r3, [pc, #72]	; (10b10 <MiApp_EstablishConnection+0x100>)
   10ac8:	4641      	mov	r1, r8
   10aca:	601a      	str	r2, [r3, #0]
   10acc:	4b11      	ldr	r3, [pc, #68]	; (10b14 <MiApp_EstablishConnection+0x104>)
   10ace:	9501      	str	r5, [sp, #4]
   10ad0:	9303      	str	r3, [sp, #12]
   10ad2:	2300      	movs	r3, #0
   10ad4:	9302      	str	r3, [sp, #8]
   10ad6:	3302      	adds	r3, #2
   10ad8:	9300      	str	r3, [sp, #0]
   10ada:	2207      	movs	r2, #7
   10adc:	003b      	movs	r3, r7
   10ade:	a808      	add	r0, sp, #32
   10ae0:	4c0d      	ldr	r4, [pc, #52]	; (10b18 <MiApp_EstablishConnection+0x108>)
   10ae2:	47a0      	blx	r4
   10ae4:	e7b2      	b.n	10a4c <MiApp_EstablishConnection+0x3c>
   10ae6:	46c0      	nop			; (mov r8, r8)
   10ae8:	2000285c 	.word	0x2000285c
   10aec:	0000b321 	.word	0x0000b321
   10af0:	20001ce1 	.word	0x20001ce1
   10af4:	0000bc11 	.word	0x0000bc11
   10af8:	0000d93d 	.word	0x0000d93d
   10afc:	200028fc 	.word	0x200028fc
   10b00:	0000ffff 	.word	0x0000ffff
   10b04:	0000f029 	.word	0x0000f029
   10b08:	0000f079 	.word	0x0000f079
   10b0c:	00014cdf 	.word	0x00014cdf
   10b10:	20001d0c 	.word	0x20001d0c
   10b14:	000105b9 	.word	0x000105b9
   10b18:	0000f105 	.word	0x0000f105

00010b1c <MiApp_SearchConnection>:
   10b1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   10b1e:	0003      	movs	r3, r0
   10b20:	2001      	movs	r0, #1
   10b22:	2b0e      	cmp	r3, #14
   10b24:	d80a      	bhi.n	10b3c <MiApp_SearchConnection+0x20>
   10b26:	2a00      	cmp	r2, #0
   10b28:	d008      	beq.n	10b3c <MiApp_SearchConnection+0x20>
   10b2a:	4d19      	ldr	r5, [pc, #100]	; (10b90 <MiApp_SearchConnection+0x74>)
   10b2c:	2604      	movs	r6, #4
   10b2e:	782c      	ldrb	r4, [r5, #0]
   10b30:	0027      	movs	r7, r4
   10b32:	43b7      	bics	r7, r6
   10b34:	2f01      	cmp	r7, #1
   10b36:	d002      	beq.n	10b3e <MiApp_SearchConnection+0x22>
   10b38:	2c08      	cmp	r4, #8
   10b3a:	d000      	beq.n	10b3e <MiApp_SearchConnection+0x22>
   10b3c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   10b3e:	2003      	movs	r0, #3
   10b40:	7028      	strb	r0, [r5, #0]
   10b42:	2500      	movs	r5, #0
   10b44:	4813      	ldr	r0, [pc, #76]	; (10b94 <MiApp_SearchConnection+0x78>)
   10b46:	4c14      	ldr	r4, [pc, #80]	; (10b98 <MiApp_SearchConnection+0x7c>)
   10b48:	7003      	strb	r3, [r0, #0]
   10b4a:	4b14      	ldr	r3, [pc, #80]	; (10b9c <MiApp_SearchConnection+0x80>)
   10b4c:	6019      	str	r1, [r3, #0]
   10b4e:	4b14      	ldr	r3, [pc, #80]	; (10ba0 <MiApp_SearchConnection+0x84>)
   10b50:	681b      	ldr	r3, [r3, #0]
   10b52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   10b54:	6023      	str	r3, [r4, #0]
   10b56:	705d      	strb	r5, [r3, #1]
   10b58:	2308      	movs	r3, #8
   10b5a:	6820      	ldr	r0, [r4, #0]
   10b5c:	7003      	strb	r3, [r0, #0]
   10b5e:	6823      	ldr	r3, [r4, #0]
   10b60:	6059      	str	r1, [r3, #4]
   10b62:	4b10      	ldr	r3, [pc, #64]	; (10ba4 <MiApp_SearchConnection+0x88>)
   10b64:	601a      	str	r2, [r3, #0]
   10b66:	4b10      	ldr	r3, [pc, #64]	; (10ba8 <MiApp_SearchConnection+0x8c>)
   10b68:	4798      	blx	r3
   10b6a:	4e10      	ldr	r6, [pc, #64]	; (10bac <MiApp_SearchConnection+0x90>)
   10b6c:	2101      	movs	r1, #1
   10b6e:	7035      	strb	r5, [r6, #0]
   10b70:	2201      	movs	r2, #1
   10b72:	07c3      	lsls	r3, r0, #31
   10b74:	d501      	bpl.n	10b7a <MiApp_SearchConnection+0x5e>
   10b76:	e006      	b.n	10b86 <MiApp_SearchConnection+0x6a>
   10b78:	0019      	movs	r1, r3
   10b7a:	1c4b      	adds	r3, r1, #1
   10b7c:	0052      	lsls	r2, r2, #1
   10b7e:	b2db      	uxtb	r3, r3
   10b80:	4202      	tst	r2, r0
   10b82:	d0f9      	beq.n	10b78 <MiApp_SearchConnection+0x5c>
   10b84:	7031      	strb	r1, [r6, #0]
   10b86:	6820      	ldr	r0, [r4, #0]
   10b88:	4b09      	ldr	r3, [pc, #36]	; (10bb0 <MiApp_SearchConnection+0x94>)
   10b8a:	4798      	blx	r3
   10b8c:	e7d6      	b.n	10b3c <MiApp_SearchConnection+0x20>
   10b8e:	46c0      	nop			; (mov r8, r8)
   10b90:	20001ce1 	.word	0x20001ce1
   10b94:	200028d8 	.word	0x200028d8
   10b98:	20001d18 	.word	0x20001d18
   10b9c:	200028f8 	.word	0x200028f8
   10ba0:	2000285c 	.word	0x2000285c
   10ba4:	20001d10 	.word	0x20001d10
   10ba8:	0000b321 	.word	0x0000b321
   10bac:	20002888 	.word	0x20002888
   10bb0:	000102f1 	.word	0x000102f1

00010bb4 <calculatePermitCapacity>:
   10bb4:	b5f0      	push	{r4, r5, r6, r7, lr}
   10bb6:	46de      	mov	lr, fp
   10bb8:	4657      	mov	r7, sl
   10bba:	4645      	mov	r5, r8
   10bbc:	464e      	mov	r6, r9
   10bbe:	b5e0      	push	{r5, r6, r7, lr}
   10bc0:	4b51      	ldr	r3, [pc, #324]	; (10d08 <calculatePermitCapacity+0x154>)
   10bc2:	b089      	sub	sp, #36	; 0x24
   10bc4:	469b      	mov	fp, r3
   10bc6:	681b      	ldr	r3, [r3, #0]
   10bc8:	9002      	str	r0, [sp, #8]
   10bca:	9103      	str	r1, [sp, #12]
   10bcc:	4698      	mov	r8, r3
   10bce:	7e9b      	ldrb	r3, [r3, #26]
   10bd0:	469a      	mov	sl, r3
   10bd2:	2b00      	cmp	r3, #0
   10bd4:	d100      	bne.n	10bd8 <calculatePermitCapacity+0x24>
   10bd6:	e08f      	b.n	10cf8 <calculatePermitCapacity+0x144>
   10bd8:	2300      	movs	r3, #0
   10bda:	4e4c      	ldr	r6, [pc, #304]	; (10d0c <calculatePermitCapacity+0x158>)
   10bdc:	af06      	add	r7, sp, #24
   10bde:	4699      	mov	r9, r3
   10be0:	003a      	movs	r2, r7
   10be2:	9300      	str	r3, [sp, #0]
   10be4:	0033      	movs	r3, r6
   10be6:	4647      	mov	r7, r8
   10be8:	464e      	mov	r6, r9
   10bea:	2500      	movs	r5, #0
   10bec:	4699      	mov	r9, r3
   10bee:	4690      	mov	r8, r2
   10bf0:	e014      	b.n	10c1c <calculatePermitCapacity+0x68>
   10bf2:	2201      	movs	r2, #1
   10bf4:	4252      	negs	r2, r2
   10bf6:	17d3      	asrs	r3, r2, #31
   10bf8:	0021      	movs	r1, r4
   10bfa:	9206      	str	r2, [sp, #24]
   10bfc:	9307      	str	r3, [sp, #28]
   10bfe:	4640      	mov	r0, r8
   10c00:	3209      	adds	r2, #9
   10c02:	47c8      	blx	r9
   10c04:	2800      	cmp	r0, #0
   10c06:	d017      	beq.n	10c38 <calculatePermitCapacity+0x84>
   10c08:	465b      	mov	r3, fp
   10c0a:	681f      	ldr	r7, [r3, #0]
   10c0c:	3501      	adds	r5, #1
   10c0e:	7ebb      	ldrb	r3, [r7, #26]
   10c10:	3601      	adds	r6, #1
   10c12:	469a      	mov	sl, r3
   10c14:	b2ed      	uxtb	r5, r5
   10c16:	b2f6      	uxtb	r6, r6
   10c18:	4555      	cmp	r5, sl
   10c1a:	d213      	bcs.n	10c44 <calculatePermitCapacity+0x90>
   10c1c:	683b      	ldr	r3, [r7, #0]
   10c1e:	2200      	movs	r2, #0
   10c20:	469c      	mov	ip, r3
   10c22:	2300      	movs	r3, #0
   10c24:	012c      	lsls	r4, r5, #4
   10c26:	4464      	add	r4, ip
   10c28:	9206      	str	r2, [sp, #24]
   10c2a:	9307      	str	r3, [sp, #28]
   10c2c:	0021      	movs	r1, r4
   10c2e:	3208      	adds	r2, #8
   10c30:	4640      	mov	r0, r8
   10c32:	47c8      	blx	r9
   10c34:	2800      	cmp	r0, #0
   10c36:	d1dc      	bne.n	10bf2 <calculatePermitCapacity+0x3e>
   10c38:	2301      	movs	r3, #1
   10c3a:	3501      	adds	r5, #1
   10c3c:	b2ed      	uxtb	r5, r5
   10c3e:	9300      	str	r3, [sp, #0]
   10c40:	4555      	cmp	r5, sl
   10c42:	d3eb      	bcc.n	10c1c <calculatePermitCapacity+0x68>
   10c44:	4653      	mov	r3, sl
   10c46:	2264      	movs	r2, #100	; 0x64
   10c48:	46b8      	mov	r8, r7
   10c4a:	9304      	str	r3, [sp, #16]
   10c4c:	1b9b      	subs	r3, r3, r6
   10c4e:	435a      	muls	r2, r3
   10c50:	9205      	str	r2, [sp, #20]
   10c52:	4643      	mov	r3, r8
   10c54:	7edb      	ldrb	r3, [r3, #27]
   10c56:	469a      	mov	sl, r3
   10c58:	2b01      	cmp	r3, #1
   10c5a:	d952      	bls.n	10d02 <calculatePermitCapacity+0x14e>
   10c5c:	4643      	mov	r3, r8
   10c5e:	685b      	ldr	r3, [r3, #4]
   10c60:	4e2a      	ldr	r6, [pc, #168]	; (10d0c <calculatePermitCapacity+0x158>)
   10c62:	9301      	str	r3, [sp, #4]
   10c64:	2300      	movs	r3, #0
   10c66:	4699      	mov	r9, r3
   10c68:	0033      	movs	r3, r6
   10c6a:	2501      	movs	r5, #1
   10c6c:	464e      	mov	r6, r9
   10c6e:	af06      	add	r7, sp, #24
   10c70:	4699      	mov	r9, r3
   10c72:	e013      	b.n	10c9c <calculatePermitCapacity+0xe8>
   10c74:	2201      	movs	r2, #1
   10c76:	4252      	negs	r2, r2
   10c78:	17d3      	asrs	r3, r2, #31
   10c7a:	0021      	movs	r1, r4
   10c7c:	9206      	str	r2, [sp, #24]
   10c7e:	9307      	str	r3, [sp, #28]
   10c80:	0038      	movs	r0, r7
   10c82:	3209      	adds	r2, #9
   10c84:	47c8      	blx	r9
   10c86:	2800      	cmp	r0, #0
   10c88:	d018      	beq.n	10cbc <calculatePermitCapacity+0x108>
   10c8a:	4643      	mov	r3, r8
   10c8c:	7edb      	ldrb	r3, [r3, #27]
   10c8e:	3501      	adds	r5, #1
   10c90:	469a      	mov	sl, r3
   10c92:	3601      	adds	r6, #1
   10c94:	b2ed      	uxtb	r5, r5
   10c96:	b2f6      	uxtb	r6, r6
   10c98:	4555      	cmp	r5, sl
   10c9a:	d215      	bcs.n	10cc8 <calculatePermitCapacity+0x114>
   10c9c:	9b01      	ldr	r3, [sp, #4]
   10c9e:	2200      	movs	r2, #0
   10ca0:	469c      	mov	ip, r3
   10ca2:	2300      	movs	r3, #0
   10ca4:	00ac      	lsls	r4, r5, #2
   10ca6:	1964      	adds	r4, r4, r5
   10ca8:	00a4      	lsls	r4, r4, #2
   10caa:	4464      	add	r4, ip
   10cac:	9206      	str	r2, [sp, #24]
   10cae:	9307      	str	r3, [sp, #28]
   10cb0:	0021      	movs	r1, r4
   10cb2:	3208      	adds	r2, #8
   10cb4:	0038      	movs	r0, r7
   10cb6:	47c8      	blx	r9
   10cb8:	2800      	cmp	r0, #0
   10cba:	d1db      	bne.n	10c74 <calculatePermitCapacity+0xc0>
   10cbc:	2301      	movs	r3, #1
   10cbe:	3501      	adds	r5, #1
   10cc0:	b2ed      	uxtb	r5, r5
   10cc2:	9300      	str	r3, [sp, #0]
   10cc4:	4555      	cmp	r5, sl
   10cc6:	d3e9      	bcc.n	10c9c <calculatePermitCapacity+0xe8>
   10cc8:	0035      	movs	r5, r6
   10cca:	4c11      	ldr	r4, [pc, #68]	; (10d10 <calculatePermitCapacity+0x15c>)
   10ccc:	9904      	ldr	r1, [sp, #16]
   10cce:	9805      	ldr	r0, [sp, #20]
   10cd0:	47a0      	blx	r4
   10cd2:	9b02      	ldr	r3, [sp, #8]
   10cd4:	7018      	strb	r0, [r3, #0]
   10cd6:	465b      	mov	r3, fp
   10cd8:	2064      	movs	r0, #100	; 0x64
   10cda:	681b      	ldr	r3, [r3, #0]
   10cdc:	7ed9      	ldrb	r1, [r3, #27]
   10cde:	1b4d      	subs	r5, r1, r5
   10ce0:	4368      	muls	r0, r5
   10ce2:	47a0      	blx	r4
   10ce4:	9b03      	ldr	r3, [sp, #12]
   10ce6:	7018      	strb	r0, [r3, #0]
   10ce8:	9800      	ldr	r0, [sp, #0]
   10cea:	b009      	add	sp, #36	; 0x24
   10cec:	bc3c      	pop	{r2, r3, r4, r5}
   10cee:	4690      	mov	r8, r2
   10cf0:	4699      	mov	r9, r3
   10cf2:	46a2      	mov	sl, r4
   10cf4:	46ab      	mov	fp, r5
   10cf6:	bdf0      	pop	{r4, r5, r6, r7, pc}
   10cf8:	2300      	movs	r3, #0
   10cfa:	9305      	str	r3, [sp, #20]
   10cfc:	9304      	str	r3, [sp, #16]
   10cfe:	9300      	str	r3, [sp, #0]
   10d00:	e7a7      	b.n	10c52 <calculatePermitCapacity+0x9e>
   10d02:	2500      	movs	r5, #0
   10d04:	e7e1      	b.n	10cca <calculatePermitCapacity+0x116>
   10d06:	46c0      	nop			; (mov r8, r8)
   10d08:	2000285c 	.word	0x2000285c
   10d0c:	00014cc1 	.word	0x00014cc1
   10d10:	0001257d 	.word	0x0001257d

00010d14 <handleJoinMessage>:
   10d14:	b5f0      	push	{r4, r5, r6, r7, lr}
   10d16:	464e      	mov	r6, r9
   10d18:	4657      	mov	r7, sl
   10d1a:	4645      	mov	r5, r8
   10d1c:	46de      	mov	lr, fp
   10d1e:	001c      	movs	r4, r3
   10d20:	b5e0      	push	{r5, r6, r7, lr}
   10d22:	b095      	sub	sp, #84	; 0x54
   10d24:	ab1e      	add	r3, sp, #120	; 0x78
   10d26:	781b      	ldrb	r3, [r3, #0]
   10d28:	0006      	movs	r6, r0
   10d2a:	4699      	mov	r9, r3
   10d2c:	7823      	ldrb	r3, [r4, #0]
   10d2e:	4688      	mov	r8, r1
   10d30:	0017      	movs	r7, r2
   10d32:	2b08      	cmp	r3, #8
   10d34:	d84f      	bhi.n	10dd6 <handleJoinMessage+0xc2>
   10d36:	4ad9      	ldr	r2, [pc, #868]	; (1109c <handleJoinMessage+0x388>)
   10d38:	009b      	lsls	r3, r3, #2
   10d3a:	58d3      	ldr	r3, [r2, r3]
   10d3c:	469f      	mov	pc, r3
   10d3e:	4bd8      	ldr	r3, [pc, #864]	; (110a0 <handleJoinMessage+0x38c>)
   10d40:	781b      	ldrb	r3, [r3, #0]
   10d42:	2b06      	cmp	r3, #6
   10d44:	d147      	bne.n	10dd6 <handleJoinMessage+0xc2>
   10d46:	7863      	ldrb	r3, [r4, #1]
   10d48:	ae0c      	add	r6, sp, #48	; 0x30
   10d4a:	079b      	lsls	r3, r3, #30
   10d4c:	d000      	beq.n	10d50 <handleJoinMessage+0x3c>
   10d4e:	e25a      	b.n	11206 <handleJoinMessage+0x4f2>
   10d50:	4bd4      	ldr	r3, [pc, #848]	; (110a4 <handleJoinMessage+0x390>)
   10d52:	2201      	movs	r2, #1
   10d54:	8819      	ldrh	r1, [r3, #0]
   10d56:	2001      	movs	r0, #1
   10d58:	0033      	movs	r3, r6
   10d5a:	b289      	uxth	r1, r1
   10d5c:	4cd2      	ldr	r4, [pc, #840]	; (110a8 <handleJoinMessage+0x394>)
   10d5e:	47a0      	blx	r4
   10d60:	2220      	movs	r2, #32
   10d62:	7873      	ldrb	r3, [r6, #1]
   10d64:	4313      	orrs	r3, r2
   10d66:	7073      	strb	r3, [r6, #1]
   10d68:	2088      	movs	r0, #136	; 0x88
   10d6a:	4bd0      	ldr	r3, [pc, #832]	; (110ac <handleJoinMessage+0x398>)
   10d6c:	4798      	blx	r3
   10d6e:	4682      	mov	sl, r0
   10d70:	2800      	cmp	r0, #0
   10d72:	d030      	beq.n	10dd6 <handleJoinMessage+0xc2>
   10d74:	4651      	mov	r1, sl
   10d76:	4bce      	ldr	r3, [pc, #824]	; (110b0 <handleJoinMessage+0x39c>)
   10d78:	0030      	movs	r0, r6
   10d7a:	4798      	blx	r3
   10d7c:	0003      	movs	r3, r0
   10d7e:	2204      	movs	r2, #4
   10d80:	4651      	mov	r1, sl
   10d82:	4683      	mov	fp, r0
   10d84:	3301      	adds	r3, #1
   10d86:	b2db      	uxtb	r3, r3
   10d88:	540a      	strb	r2, [r1, r0]
   10d8a:	465a      	mov	r2, fp
   10d8c:	4651      	mov	r1, sl
   10d8e:	1c95      	adds	r5, r2, #2
   10d90:	2201      	movs	r2, #1
   10d92:	24ff      	movs	r4, #255	; 0xff
   10d94:	54ca      	strb	r2, [r1, r3]
   10d96:	23ff      	movs	r3, #255	; 0xff
   10d98:	b2ed      	uxtb	r5, r5
   10d9a:	4652      	mov	r2, sl
   10d9c:	5553      	strb	r3, [r2, r5]
   10d9e:	1c6b      	adds	r3, r5, #1
   10da0:	b2db      	uxtb	r3, r3
   10da2:	54d4      	strb	r4, [r2, r3]
   10da4:	4bc3      	ldr	r3, [pc, #780]	; (110b4 <handleJoinMessage+0x3a0>)
   10da6:	1ca8      	adds	r0, r5, #2
   10da8:	6819      	ldr	r1, [r3, #0]
   10daa:	b2c0      	uxtb	r0, r0
   10dac:	3110      	adds	r1, #16
   10dae:	2210      	movs	r2, #16
   10db0:	4bc1      	ldr	r3, [pc, #772]	; (110b8 <handleJoinMessage+0x3a4>)
   10db2:	4450      	add	r0, sl
   10db4:	4798      	blx	r3
   10db6:	465b      	mov	r3, fp
   10db8:	3512      	adds	r5, #18
   10dba:	1aea      	subs	r2, r5, r3
   10dbc:	4bbf      	ldr	r3, [pc, #764]	; (110bc <handleJoinMessage+0x3a8>)
   10dbe:	b2d2      	uxtb	r2, r2
   10dc0:	9303      	str	r3, [sp, #12]
   10dc2:	2300      	movs	r3, #0
   10dc4:	9302      	str	r3, [sp, #8]
   10dc6:	4643      	mov	r3, r8
   10dc8:	9701      	str	r7, [sp, #4]
   10dca:	9300      	str	r3, [sp, #0]
   10dcc:	4659      	mov	r1, fp
   10dce:	4653      	mov	r3, sl
   10dd0:	0030      	movs	r0, r6
   10dd2:	4cbb      	ldr	r4, [pc, #748]	; (110c0 <handleJoinMessage+0x3ac>)
   10dd4:	47a0      	blx	r4
   10dd6:	b015      	add	sp, #84	; 0x54
   10dd8:	bc3c      	pop	{r2, r3, r4, r5}
   10dda:	4690      	mov	r8, r2
   10ddc:	4699      	mov	r9, r3
   10dde:	46a2      	mov	sl, r4
   10de0:	46ab      	mov	fp, r5
   10de2:	bdf0      	pop	{r4, r5, r6, r7, pc}
   10de4:	2200      	movs	r2, #0
   10de6:	4bb7      	ldr	r3, [pc, #732]	; (110c4 <handleJoinMessage+0x3b0>)
   10de8:	48b7      	ldr	r0, [pc, #732]	; (110c8 <handleJoinMessage+0x3b4>)
   10dea:	701a      	strb	r2, [r3, #0]
   10dec:	4bb7      	ldr	r3, [pc, #732]	; (110cc <handleJoinMessage+0x3b8>)
   10dee:	4798      	blx	r3
   10df0:	2208      	movs	r2, #8
   10df2:	4bab      	ldr	r3, [pc, #684]	; (110a0 <handleJoinMessage+0x38c>)
   10df4:	48b6      	ldr	r0, [pc, #728]	; (110d0 <handleJoinMessage+0x3bc>)
   10df6:	701a      	strb	r2, [r3, #0]
   10df8:	4baa      	ldr	r3, [pc, #680]	; (110a4 <handleJoinMessage+0x390>)
   10dfa:	3a09      	subs	r2, #9
   10dfc:	801a      	strh	r2, [r3, #0]
   10dfe:	4bb5      	ldr	r3, [pc, #724]	; (110d4 <handleJoinMessage+0x3c0>)
   10e00:	4798      	blx	r3
   10e02:	4bb5      	ldr	r3, [pc, #724]	; (110d8 <handleJoinMessage+0x3c4>)
   10e04:	681b      	ldr	r3, [r3, #0]
   10e06:	2b00      	cmp	r3, #0
   10e08:	d0e5      	beq.n	10dd6 <handleJoinMessage+0xc2>
   10e0a:	4798      	blx	r3
   10e0c:	e7e3      	b.n	10dd6 <handleJoinMessage+0xc2>
   10e0e:	4ba4      	ldr	r3, [pc, #656]	; (110a0 <handleJoinMessage+0x38c>)
   10e10:	781b      	ldrb	r3, [r3, #0]
   10e12:	2b06      	cmp	r3, #6
   10e14:	d1df      	bne.n	10dd6 <handleJoinMessage+0xc2>
   10e16:	4bb1      	ldr	r3, [pc, #708]	; (110dc <handleJoinMessage+0x3c8>)
   10e18:	003a      	movs	r2, r7
   10e1a:	4699      	mov	r9, r3
   10e1c:	0018      	movs	r0, r3
   10e1e:	2108      	movs	r1, #8
   10e20:	4baf      	ldr	r3, [pc, #700]	; (110e0 <handleJoinMessage+0x3cc>)
   10e22:	4798      	blx	r3
   10e24:	2800      	cmp	r0, #0
   10e26:	d0d6      	beq.n	10dd6 <handleJoinMessage+0xc2>
   10e28:	2088      	movs	r0, #136	; 0x88
   10e2a:	4ba0      	ldr	r3, [pc, #640]	; (110ac <handleJoinMessage+0x398>)
   10e2c:	4798      	blx	r3
   10e2e:	1e04      	subs	r4, r0, #0
   10e30:	d0d1      	beq.n	10dd6 <handleJoinMessage+0xc2>
   10e32:	4b9c      	ldr	r3, [pc, #624]	; (110a4 <handleJoinMessage+0x390>)
   10e34:	ad0c      	add	r5, sp, #48	; 0x30
   10e36:	8819      	ldrh	r1, [r3, #0]
   10e38:	2200      	movs	r2, #0
   10e3a:	002b      	movs	r3, r5
   10e3c:	b289      	uxth	r1, r1
   10e3e:	2001      	movs	r0, #1
   10e40:	4e99      	ldr	r6, [pc, #612]	; (110a8 <handleJoinMessage+0x394>)
   10e42:	47b0      	blx	r6
   10e44:	2220      	movs	r2, #32
   10e46:	786b      	ldrb	r3, [r5, #1]
   10e48:	0021      	movs	r1, r4
   10e4a:	4313      	orrs	r3, r2
   10e4c:	706b      	strb	r3, [r5, #1]
   10e4e:	0028      	movs	r0, r5
   10e50:	4b97      	ldr	r3, [pc, #604]	; (110b0 <handleJoinMessage+0x39c>)
   10e52:	4798      	blx	r3
   10e54:	2302      	movs	r3, #2
   10e56:	5423      	strb	r3, [r4, r0]
   10e58:	4ba2      	ldr	r3, [pc, #648]	; (110e4 <handleJoinMessage+0x3d0>)
   10e5a:	0006      	movs	r6, r0
   10e5c:	781a      	ldrb	r2, [r3, #0]
   10e5e:	1c43      	adds	r3, r0, #1
   10e60:	b2db      	uxtb	r3, r3
   10e62:	54e2      	strb	r2, [r4, r3]
   10e64:	4ba0      	ldr	r3, [pc, #640]	; (110e8 <handleJoinMessage+0x3d4>)
   10e66:	469a      	mov	sl, r3
   10e68:	4ba0      	ldr	r3, [pc, #640]	; (110ec <handleJoinMessage+0x3d8>)
   10e6a:	4651      	mov	r1, sl
   10e6c:	469b      	mov	fp, r3
   10e6e:	0018      	movs	r0, r3
   10e70:	4b9f      	ldr	r3, [pc, #636]	; (110f0 <handleJoinMessage+0x3dc>)
   10e72:	4798      	blx	r3
   10e74:	4b9f      	ldr	r3, [pc, #636]	; (110f4 <handleJoinMessage+0x3e0>)
   10e76:	4649      	mov	r1, r9
   10e78:	7018      	strb	r0, [r3, #0]
   10e7a:	1cb3      	adds	r3, r6, #2
   10e7c:	b2db      	uxtb	r3, r3
   10e7e:	54e0      	strb	r0, [r4, r3]
   10e80:	465b      	mov	r3, fp
   10e82:	781a      	ldrb	r2, [r3, #0]
   10e84:	1cf3      	adds	r3, r6, #3
   10e86:	b2db      	uxtb	r3, r3
   10e88:	54e2      	strb	r2, [r4, r3]
   10e8a:	4653      	mov	r3, sl
   10e8c:	1d70      	adds	r0, r6, #5
   10e8e:	781a      	ldrb	r2, [r3, #0]
   10e90:	1d33      	adds	r3, r6, #4
   10e92:	b2db      	uxtb	r3, r3
   10e94:	b2c0      	uxtb	r0, r0
   10e96:	54e2      	strb	r2, [r4, r3]
   10e98:	1820      	adds	r0, r4, r0
   10e9a:	2208      	movs	r2, #8
   10e9c:	4b86      	ldr	r3, [pc, #536]	; (110b8 <handleJoinMessage+0x3a4>)
   10e9e:	4798      	blx	r3
   10ea0:	4b86      	ldr	r3, [pc, #536]	; (110bc <handleJoinMessage+0x3a8>)
   10ea2:	9701      	str	r7, [sp, #4]
   10ea4:	9303      	str	r3, [sp, #12]
   10ea6:	2300      	movs	r3, #0
   10ea8:	9302      	str	r3, [sp, #8]
   10eaa:	4643      	mov	r3, r8
   10eac:	220d      	movs	r2, #13
   10eae:	9300      	str	r3, [sp, #0]
   10eb0:	0031      	movs	r1, r6
   10eb2:	0023      	movs	r3, r4
   10eb4:	0028      	movs	r0, r5
   10eb6:	4c82      	ldr	r4, [pc, #520]	; (110c0 <handleJoinMessage+0x3ac>)
   10eb8:	47a0      	blx	r4
   10eba:	e78c      	b.n	10dd6 <handleJoinMessage+0xc2>
   10ebc:	4d78      	ldr	r5, [pc, #480]	; (110a0 <handleJoinMessage+0x38c>)
   10ebe:	782b      	ldrb	r3, [r5, #0]
   10ec0:	2b03      	cmp	r3, #3
   10ec2:	d000      	beq.n	10ec6 <handleJoinMessage+0x1b2>
   10ec4:	e787      	b.n	10dd6 <handleJoinMessage+0xc2>
   10ec6:	4f8c      	ldr	r7, [pc, #560]	; (110f8 <handleJoinMessage+0x3e4>)
   10ec8:	683b      	ldr	r3, [r7, #0]
   10eca:	785a      	ldrb	r2, [r3, #1]
   10ecc:	4b8b      	ldr	r3, [pc, #556]	; (110fc <handleJoinMessage+0x3e8>)
   10ece:	469b      	mov	fp, r3
   10ed0:	4659      	mov	r1, fp
   10ed2:	2344      	movs	r3, #68	; 0x44
   10ed4:	6809      	ldr	r1, [r1, #0]
   10ed6:	5ccb      	ldrb	r3, [r1, r3]
   10ed8:	429a      	cmp	r2, r3
   10eda:	d200      	bcs.n	10ede <handleJoinMessage+0x1ca>
   10edc:	e12c      	b.n	11138 <handleJoinMessage+0x424>
   10ede:	429a      	cmp	r2, r3
   10ee0:	d000      	beq.n	10ee4 <handleJoinMessage+0x1d0>
   10ee2:	e778      	b.n	10dd6 <handleJoinMessage+0xc2>
   10ee4:	4886      	ldr	r0, [pc, #536]	; (11100 <handleJoinMessage+0x3ec>)
   10ee6:	4b79      	ldr	r3, [pc, #484]	; (110cc <handleJoinMessage+0x3b8>)
   10ee8:	4798      	blx	r3
   10eea:	2309      	movs	r3, #9
   10eec:	683a      	ldr	r2, [r7, #0]
   10eee:	4c85      	ldr	r4, [pc, #532]	; (11104 <handleJoinMessage+0x3f0>)
   10ef0:	7013      	strb	r3, [r2, #0]
   10ef2:	6839      	ldr	r1, [r7, #0]
   10ef4:	3b04      	subs	r3, #4
   10ef6:	702b      	strb	r3, [r5, #0]
   10ef8:	7848      	ldrb	r0, [r1, #1]
   10efa:	6823      	ldr	r3, [r4, #0]
   10efc:	4798      	blx	r3
   10efe:	2300      	movs	r3, #0
   10f00:	6023      	str	r3, [r4, #0]
   10f02:	e768      	b.n	10dd6 <handleJoinMessage+0xc2>
   10f04:	4f66      	ldr	r7, [pc, #408]	; (110a0 <handleJoinMessage+0x38c>)
   10f06:	783b      	ldrb	r3, [r7, #0]
   10f08:	2b04      	cmp	r3, #4
   10f0a:	d000      	beq.n	10f0e <handleJoinMessage+0x1fa>
   10f0c:	e763      	b.n	10dd6 <handleJoinMessage+0xc2>
   10f0e:	4b7c      	ldr	r3, [pc, #496]	; (11100 <handleJoinMessage+0x3ec>)
   10f10:	0018      	movs	r0, r3
   10f12:	4698      	mov	r8, r3
   10f14:	4b6d      	ldr	r3, [pc, #436]	; (110cc <handleJoinMessage+0x3b8>)
   10f16:	4798      	blx	r3
   10f18:	7860      	ldrb	r0, [r4, #1]
   10f1a:	2800      	cmp	r0, #0
   10f1c:	d100      	bne.n	10f20 <handleJoinMessage+0x20c>
   10f1e:	e1e2      	b.n	112e6 <handleJoinMessage+0x5d2>
   10f20:	2305      	movs	r3, #5
   10f22:	703b      	strb	r3, [r7, #0]
   10f24:	4c78      	ldr	r4, [pc, #480]	; (11108 <handleJoinMessage+0x3f4>)
   10f26:	6823      	ldr	r3, [r4, #0]
   10f28:	4798      	blx	r3
   10f2a:	2300      	movs	r3, #0
   10f2c:	6023      	str	r3, [r4, #0]
   10f2e:	e752      	b.n	10dd6 <handleJoinMessage+0xc2>
   10f30:	4d5b      	ldr	r5, [pc, #364]	; (110a0 <handleJoinMessage+0x38c>)
   10f32:	782b      	ldrb	r3, [r5, #0]
   10f34:	2b07      	cmp	r3, #7
   10f36:	d000      	beq.n	10f3a <handleJoinMessage+0x226>
   10f38:	e74d      	b.n	10dd6 <handleJoinMessage+0xc2>
   10f3a:	78a2      	ldrb	r2, [r4, #2]
   10f3c:	7863      	ldrb	r3, [r4, #1]
   10f3e:	0212      	lsls	r2, r2, #8
   10f40:	4313      	orrs	r3, r2
   10f42:	4a58      	ldr	r2, [pc, #352]	; (110a4 <handleJoinMessage+0x390>)
   10f44:	4971      	ldr	r1, [pc, #452]	; (1110c <handleJoinMessage+0x3f8>)
   10f46:	4690      	mov	r8, r2
   10f48:	8013      	strh	r3, [r2, #0]
   10f4a:	88c2      	ldrh	r2, [r0, #6]
   10f4c:	4b70      	ldr	r3, [pc, #448]	; (11110 <handleJoinMessage+0x3fc>)
   10f4e:	801a      	strh	r2, [r3, #0]
   10f50:	8843      	ldrh	r3, [r0, #2]
   10f52:	4640      	mov	r0, r8
   10f54:	800b      	strh	r3, [r1, #0]
   10f56:	4b6f      	ldr	r3, [pc, #444]	; (11114 <handleJoinMessage+0x400>)
   10f58:	4798      	blx	r3
   10f5a:	4c5c      	ldr	r4, [pc, #368]	; (110cc <handleJoinMessage+0x3b8>)
   10f5c:	4868      	ldr	r0, [pc, #416]	; (11100 <handleJoinMessage+0x3ec>)
   10f5e:	47a0      	blx	r4
   10f60:	4e59      	ldr	r6, [pc, #356]	; (110c8 <handleJoinMessage+0x3b4>)
   10f62:	0030      	movs	r0, r6
   10f64:	47a0      	blx	r4
   10f66:	21fa      	movs	r1, #250	; 0xfa
   10f68:	4b64      	ldr	r3, [pc, #400]	; (110fc <handleJoinMessage+0x3e8>)
   10f6a:	0089      	lsls	r1, r1, #2
   10f6c:	681b      	ldr	r3, [r3, #0]
   10f6e:	2432      	movs	r4, #50	; 0x32
   10f70:	8a9f      	ldrh	r7, [r3, #20]
   10f72:	4b69      	ldr	r3, [pc, #420]	; (11118 <handleJoinMessage+0x404>)
   10f74:	434f      	muls	r7, r1
   10f76:	0038      	movs	r0, r7
   10f78:	4699      	mov	r9, r3
   10f7a:	4798      	blx	r3
   10f7c:	4b67      	ldr	r3, [pc, #412]	; (1111c <handleJoinMessage+0x408>)
   10f7e:	4344      	muls	r4, r0
   10f80:	4798      	blx	r3
   10f82:	4b67      	ldr	r3, [pc, #412]	; (11120 <handleJoinMessage+0x40c>)
   10f84:	2164      	movs	r1, #100	; 0x64
   10f86:	4798      	blx	r3
   10f88:	20ff      	movs	r0, #255	; 0xff
   10f8a:	4001      	ands	r1, r0
   10f8c:	0060      	lsls	r0, r4, #1
   10f8e:	4348      	muls	r0, r1
   10f90:	2164      	movs	r1, #100	; 0x64
   10f92:	47c8      	blx	r9
   10f94:	4b63      	ldr	r3, [pc, #396]	; (11124 <handleJoinMessage+0x410>)
   10f96:	1b3f      	subs	r7, r7, r4
   10f98:	6133      	str	r3, [r6, #16]
   10f9a:	2301      	movs	r3, #1
   10f9c:	19c7      	adds	r7, r0, r7
   10f9e:	7333      	strb	r3, [r6, #12]
   10fa0:	0030      	movs	r0, r6
   10fa2:	4b61      	ldr	r3, [pc, #388]	; (11128 <handleJoinMessage+0x414>)
   10fa4:	6077      	str	r7, [r6, #4]
   10fa6:	60b7      	str	r7, [r6, #8]
   10fa8:	4798      	blx	r3
   10faa:	2306      	movs	r3, #6
   10fac:	4848      	ldr	r0, [pc, #288]	; (110d0 <handleJoinMessage+0x3bc>)
   10fae:	702b      	strb	r3, [r5, #0]
   10fb0:	4b48      	ldr	r3, [pc, #288]	; (110d4 <handleJoinMessage+0x3c0>)
   10fb2:	4798      	blx	r3
   10fb4:	4b5d      	ldr	r3, [pc, #372]	; (1112c <handleJoinMessage+0x418>)
   10fb6:	681b      	ldr	r3, [r3, #0]
   10fb8:	2b00      	cmp	r3, #0
   10fba:	d100      	bne.n	10fbe <handleJoinMessage+0x2aa>
   10fbc:	e70b      	b.n	10dd6 <handleJoinMessage+0xc2>
   10fbe:	4642      	mov	r2, r8
   10fc0:	8810      	ldrh	r0, [r2, #0]
   10fc2:	b280      	uxth	r0, r0
   10fc4:	4798      	blx	r3
   10fc6:	e706      	b.n	10dd6 <handleJoinMessage+0xc2>
   10fc8:	4b35      	ldr	r3, [pc, #212]	; (110a0 <handleJoinMessage+0x38c>)
   10fca:	781b      	ldrb	r3, [r3, #0]
   10fcc:	2b06      	cmp	r3, #6
   10fce:	d000      	beq.n	10fd2 <handleJoinMessage+0x2be>
   10fd0:	e701      	b.n	10dd6 <handleJoinMessage+0xc2>
   10fd2:	88c7      	ldrh	r7, [r0, #6]
   10fd4:	063b      	lsls	r3, r7, #24
   10fd6:	d400      	bmi.n	10fda <handleJoinMessage+0x2c6>
   10fd8:	e6fd      	b.n	10dd6 <handleJoinMessage+0xc2>
   10fda:	4b48      	ldr	r3, [pc, #288]	; (110fc <handleJoinMessage+0x3e8>)
   10fdc:	469b      	mov	fp, r3
   10fde:	681b      	ldr	r3, [r3, #0]
   10fe0:	7e9a      	ldrb	r2, [r3, #26]
   10fe2:	4699      	mov	r9, r3
   10fe4:	2a00      	cmp	r2, #0
   10fe6:	d100      	bne.n	10fea <handleJoinMessage+0x2d6>
   10fe8:	e6f5      	b.n	10dd6 <handleJoinMessage+0xc2>
   10fea:	4b51      	ldr	r3, [pc, #324]	; (11130 <handleJoinMessage+0x41c>)
   10fec:	46a0      	mov	r8, r4
   10fee:	2500      	movs	r5, #0
   10ff0:	469a      	mov	sl, r3
   10ff2:	464c      	mov	r4, r9
   10ff4:	e005      	b.n	11002 <handleJoinMessage+0x2ee>
   10ff6:	3501      	adds	r5, #1
   10ff8:	b2ed      	uxtb	r5, r5
   10ffa:	4295      	cmp	r5, r2
   10ffc:	d300      	bcc.n	11000 <handleJoinMessage+0x2ec>
   10ffe:	e6ea      	b.n	10dd6 <handleJoinMessage+0xc2>
   11000:	88f7      	ldrh	r7, [r6, #6]
   11002:	2380      	movs	r3, #128	; 0x80
   11004:	403b      	ands	r3, r7
   11006:	429d      	cmp	r5, r3
   11008:	d1f5      	bne.n	10ff6 <handleJoinMessage+0x2e2>
   1100a:	6822      	ldr	r2, [r4, #0]
   1100c:	012b      	lsls	r3, r5, #4
   1100e:	4691      	mov	r9, r2
   11010:	4499      	add	r9, r3
   11012:	4643      	mov	r3, r8
   11014:	2208      	movs	r2, #8
   11016:	1c59      	adds	r1, r3, #1
   11018:	4648      	mov	r0, r9
   1101a:	47d0      	blx	sl
   1101c:	2800      	cmp	r0, #0
   1101e:	d106      	bne.n	1102e <handleJoinMessage+0x31a>
   11020:	464a      	mov	r2, r9
   11022:	8de3      	ldrh	r3, [r4, #46]	; 0x2e
   11024:	6093      	str	r3, [r2, #8]
   11026:	465b      	mov	r3, fp
   11028:	681c      	ldr	r4, [r3, #0]
   1102a:	7ea2      	ldrb	r2, [r4, #26]
   1102c:	e7e3      	b.n	10ff6 <handleJoinMessage+0x2e2>
   1102e:	23ff      	movs	r3, #255	; 0xff
   11030:	423b      	tst	r3, r7
   11032:	d100      	bne.n	11036 <handleJoinMessage+0x322>
   11034:	e1e2      	b.n	113fc <handleJoinMessage+0x6e8>
   11036:	ab06      	add	r3, sp, #24
   11038:	2416      	movs	r4, #22
   1103a:	469c      	mov	ip, r3
   1103c:	0038      	movs	r0, r7
   1103e:	4464      	add	r4, ip
   11040:	8027      	strh	r7, [r4, #0]
   11042:	4b3c      	ldr	r3, [pc, #240]	; (11134 <handleJoinMessage+0x420>)
   11044:	4298      	cmp	r0, r3
   11046:	d025      	beq.n	11094 <handleJoinMessage+0x380>
   11048:	2088      	movs	r0, #136	; 0x88
   1104a:	4b18      	ldr	r3, [pc, #96]	; (110ac <handleJoinMessage+0x398>)
   1104c:	4798      	blx	r3
   1104e:	4681      	mov	r9, r0
   11050:	2800      	cmp	r0, #0
   11052:	d01f      	beq.n	11094 <handleJoinMessage+0x380>
   11054:	4b13      	ldr	r3, [pc, #76]	; (110a4 <handleJoinMessage+0x390>)
   11056:	003a      	movs	r2, r7
   11058:	8819      	ldrh	r1, [r3, #0]
   1105a:	20ff      	movs	r0, #255	; 0xff
   1105c:	b289      	uxth	r1, r1
   1105e:	ab0c      	add	r3, sp, #48	; 0x30
   11060:	4f11      	ldr	r7, [pc, #68]	; (110a8 <handleJoinMessage+0x394>)
   11062:	47b8      	blx	r7
   11064:	4649      	mov	r1, r9
   11066:	4b12      	ldr	r3, [pc, #72]	; (110b0 <handleJoinMessage+0x39c>)
   11068:	a80c      	add	r0, sp, #48	; 0x30
   1106a:	4798      	blx	r3
   1106c:	2308      	movs	r3, #8
   1106e:	464a      	mov	r2, r9
   11070:	5413      	strb	r3, [r2, r0]
   11072:	4b12      	ldr	r3, [pc, #72]	; (110bc <handleJoinMessage+0x3a8>)
   11074:	0001      	movs	r1, r0
   11076:	9303      	str	r3, [sp, #12]
   11078:	2300      	movs	r3, #0
   1107a:	9302      	str	r3, [sp, #8]
   1107c:	3302      	adds	r3, #2
   1107e:	9401      	str	r4, [sp, #4]
   11080:	9300      	str	r3, [sp, #0]
   11082:	2201      	movs	r2, #1
   11084:	464b      	mov	r3, r9
   11086:	4c0e      	ldr	r4, [pc, #56]	; (110c0 <handleJoinMessage+0x3ac>)
   11088:	a80c      	add	r0, sp, #48	; 0x30
   1108a:	47a0      	blx	r4
   1108c:	465b      	mov	r3, fp
   1108e:	681c      	ldr	r4, [r3, #0]
   11090:	7ea2      	ldrb	r2, [r4, #26]
   11092:	e7b0      	b.n	10ff6 <handleJoinMessage+0x2e2>
   11094:	465b      	mov	r3, fp
   11096:	681c      	ldr	r4, [r3, #0]
   11098:	7ea2      	ldrb	r2, [r4, #26]
   1109a:	e7ac      	b.n	10ff6 <handleJoinMessage+0x2e2>
   1109c:	000166a8 	.word	0x000166a8
   110a0:	20001ce1 	.word	0x20001ce1
   110a4:	200028b8 	.word	0x200028b8
   110a8:	0000f029 	.word	0x0000f029
   110ac:	0000bc11 	.word	0x0000bc11
   110b0:	0000f079 	.word	0x0000f079
   110b4:	20002860 	.word	0x20002860
   110b8:	00014cdf 	.word	0x00014cdf
   110bc:	000104a1 	.word	0x000104a1
   110c0:	0000f105 	.word	0x0000f105
   110c4:	20001d0a 	.word	0x20001d0a
   110c8:	200028bc 	.word	0x200028bc
   110cc:	0000bf59 	.word	0x0000bf59
   110d0:	00004001 	.word	0x00004001
   110d4:	0000a5b5 	.word	0x0000a5b5
   110d8:	20002900 	.word	0x20002900
   110dc:	200028f0 	.word	0x200028f0
   110e0:	0000dec1 	.word	0x0000dec1
   110e4:	200028ba 	.word	0x200028ba
   110e8:	20001d08 	.word	0x20001d08
   110ec:	20001d0b 	.word	0x20001d0b
   110f0:	00010bb5 	.word	0x00010bb5
   110f4:	20001d09 	.word	0x20001d09
   110f8:	20001d18 	.word	0x20001d18
   110fc:	2000285c 	.word	0x2000285c
   11100:	200028dc 	.word	0x200028dc
   11104:	20001d10 	.word	0x20001d10
   11108:	20001d0c 	.word	0x20001d0c
   1110c:	200028a8 	.word	0x200028a8
   11110:	2000009c 	.word	0x2000009c
   11114:	0000abfd 	.word	0x0000abfd
   11118:	00012469 	.word	0x00012469
   1111c:	000152f5 	.word	0x000152f5
   11120:	00012749 	.word	0x00012749
   11124:	000104b1 	.word	0x000104b1
   11128:	0000bfc5 	.word	0x0000bfc5
   1112c:	20001d14 	.word	0x20001d14
   11130:	00014cc1 	.word	0x00014cc1
   11134:	0000ffff 	.word	0x0000ffff
   11138:	1de3      	adds	r3, r4, #7
   1113a:	4698      	mov	r8, r3
   1113c:	0018      	movs	r0, r3
   1113e:	4ae1      	ldr	r2, [pc, #900]	; (114c4 <handleJoinMessage+0x7b0>)
   11140:	2108      	movs	r1, #8
   11142:	4be1      	ldr	r3, [pc, #900]	; (114c8 <handleJoinMessage+0x7b4>)
   11144:	4798      	blx	r3
   11146:	2800      	cmp	r0, #0
   11148:	d100      	bne.n	1114c <handleJoinMessage+0x438>
   1114a:	e644      	b.n	10dd6 <handleJoinMessage+0xc2>
   1114c:	2300      	movs	r3, #0
   1114e:	683a      	ldr	r2, [r7, #0]
   11150:	7013      	strb	r3, [r2, #0]
   11152:	683b      	ldr	r3, [r7, #0]
   11154:	88f0      	ldrh	r0, [r6, #6]
   11156:	469c      	mov	ip, r3
   11158:	785b      	ldrb	r3, [r3, #1]
   1115a:	469a      	mov	sl, r3
   1115c:	2b00      	cmp	r3, #0
   1115e:	d018      	beq.n	11192 <handleJoinMessage+0x47e>
   11160:	4663      	mov	r3, ip
   11162:	8a1b      	ldrh	r3, [r3, #16]
   11164:	4283      	cmp	r3, r0
   11166:	d100      	bne.n	1116a <handleJoinMessage+0x456>
   11168:	e635      	b.n	10dd6 <handleJoinMessage+0xc2>
   1116a:	4652      	mov	r2, sl
   1116c:	4663      	mov	r3, ip
   1116e:	3a01      	subs	r2, #1
   11170:	b2d2      	uxtb	r2, r2
   11172:	00d1      	lsls	r1, r2, #3
   11174:	1889      	adds	r1, r1, r2
   11176:	0049      	lsls	r1, r1, #1
   11178:	3122      	adds	r1, #34	; 0x22
   1117a:	3322      	adds	r3, #34	; 0x22
   1117c:	4461      	add	r1, ip
   1117e:	e006      	b.n	1118e <handleJoinMessage+0x47a>
   11180:	3312      	adds	r3, #18
   11182:	001a      	movs	r2, r3
   11184:	3a12      	subs	r2, #18
   11186:	8812      	ldrh	r2, [r2, #0]
   11188:	4282      	cmp	r2, r0
   1118a:	d100      	bne.n	1118e <handleJoinMessage+0x47a>
   1118c:	e623      	b.n	10dd6 <handleJoinMessage+0xc2>
   1118e:	4299      	cmp	r1, r3
   11190:	d1f6      	bne.n	11180 <handleJoinMessage+0x46c>
   11192:	4653      	mov	r3, sl
   11194:	4acd      	ldr	r2, [pc, #820]	; (114cc <handleJoinMessage+0x7b8>)
   11196:	00db      	lsls	r3, r3, #3
   11198:	4453      	add	r3, sl
   1119a:	7812      	ldrb	r2, [r2, #0]
   1119c:	005b      	lsls	r3, r3, #1
   1119e:	4463      	add	r3, ip
   111a0:	8218      	strh	r0, [r3, #16]
   111a2:	731a      	strb	r2, [r3, #12]
   111a4:	8872      	ldrh	r2, [r6, #2]
   111a6:	1d61      	adds	r1, r4, #5
   111a8:	81da      	strh	r2, [r3, #14]
   111aa:	7862      	ldrb	r2, [r4, #1]
   111ac:	721a      	strb	r2, [r3, #8]
   111ae:	78a2      	ldrb	r2, [r4, #2]
   111b0:	725a      	strb	r2, [r3, #9]
   111b2:	78e2      	ldrb	r2, [r4, #3]
   111b4:	729a      	strb	r2, [r3, #10]
   111b6:	7922      	ldrb	r2, [r4, #4]
   111b8:	4cc5      	ldr	r4, [pc, #788]	; (114d0 <handleJoinMessage+0x7bc>)
   111ba:	72da      	strb	r2, [r3, #11]
   111bc:	4653      	mov	r3, sl
   111be:	3301      	adds	r3, #1
   111c0:	00d8      	lsls	r0, r3, #3
   111c2:	18c0      	adds	r0, r0, r3
   111c4:	0040      	lsls	r0, r0, #1
   111c6:	4460      	add	r0, ip
   111c8:	2208      	movs	r2, #8
   111ca:	47a0      	blx	r4
   111cc:	2208      	movs	r2, #8
   111ce:	4641      	mov	r1, r8
   111d0:	48c0      	ldr	r0, [pc, #768]	; (114d4 <handleJoinMessage+0x7c0>)
   111d2:	47a0      	blx	r4
   111d4:	683a      	ldr	r2, [r7, #0]
   111d6:	4cc0      	ldr	r4, [pc, #768]	; (114d8 <handleJoinMessage+0x7c4>)
   111d8:	7851      	ldrb	r1, [r2, #1]
   111da:	00cb      	lsls	r3, r1, #3
   111dc:	185b      	adds	r3, r3, r1
   111de:	005b      	lsls	r3, r3, #1
   111e0:	18d3      	adds	r3, r2, r3
   111e2:	464a      	mov	r2, r9
   111e4:	8a18      	ldrh	r0, [r3, #16]
   111e6:	735a      	strb	r2, [r3, #13]
   111e8:	0001      	movs	r1, r0
   111ea:	464b      	mov	r3, r9
   111ec:	2201      	movs	r2, #1
   111ee:	47a0      	blx	r4
   111f0:	683a      	ldr	r2, [r7, #0]
   111f2:	7853      	ldrb	r3, [r2, #1]
   111f4:	3301      	adds	r3, #1
   111f6:	7053      	strb	r3, [r2, #1]
   111f8:	683b      	ldr	r3, [r7, #0]
   111fa:	785a      	ldrb	r2, [r3, #1]
   111fc:	465b      	mov	r3, fp
   111fe:	6819      	ldr	r1, [r3, #0]
   11200:	2344      	movs	r3, #68	; 0x44
   11202:	5ccb      	ldrb	r3, [r1, r3]
   11204:	e66b      	b.n	10ede <handleJoinMessage+0x1ca>
   11206:	78a3      	ldrb	r3, [r4, #2]
   11208:	9305      	str	r3, [sp, #20]
   1120a:	07db      	lsls	r3, r3, #31
   1120c:	d500      	bpl.n	11210 <handleJoinMessage+0x4fc>
   1120e:	e0fe      	b.n	1140e <handleJoinMessage+0x6fa>
   11210:	4bb2      	ldr	r3, [pc, #712]	; (114dc <handleJoinMessage+0x7c8>)
   11212:	469b      	mov	fp, r3
   11214:	681b      	ldr	r3, [r3, #0]
   11216:	9307      	str	r3, [sp, #28]
   11218:	7edd      	ldrb	r5, [r3, #27]
   1121a:	2d01      	cmp	r5, #1
   1121c:	d800      	bhi.n	11220 <handleJoinMessage+0x50c>
   1121e:	e24b      	b.n	116b8 <handleJoinMessage+0x9a4>
   11220:	1ce3      	adds	r3, r4, #3
   11222:	9308      	str	r3, [sp, #32]
   11224:	9b07      	ldr	r3, [sp, #28]
   11226:	2214      	movs	r2, #20
   11228:	685b      	ldr	r3, [r3, #4]
   1122a:	46aa      	mov	sl, r5
   1122c:	469c      	mov	ip, r3
   1122e:	9306      	str	r3, [sp, #24]
   11230:	4bab      	ldr	r3, [pc, #684]	; (114e0 <handleJoinMessage+0x7cc>)
   11232:	4462      	add	r2, ip
   11234:	0016      	movs	r6, r2
   11236:	2401      	movs	r4, #1
   11238:	9304      	str	r3, [sp, #16]
   1123a:	9209      	str	r2, [sp, #36]	; 0x24
   1123c:	001d      	movs	r5, r3
   1123e:	e005      	b.n	1124c <handleJoinMessage+0x538>
   11240:	3401      	adds	r4, #1
   11242:	b2e4      	uxtb	r4, r4
   11244:	3614      	adds	r6, #20
   11246:	45a2      	cmp	sl, r4
   11248:	d100      	bne.n	1124c <handleJoinMessage+0x538>
   1124a:	e1c0      	b.n	115ce <handleJoinMessage+0x8ba>
   1124c:	2208      	movs	r2, #8
   1124e:	0039      	movs	r1, r7
   11250:	0030      	movs	r0, r6
   11252:	47a8      	blx	r5
   11254:	2800      	cmp	r0, #0
   11256:	d1f3      	bne.n	11240 <handleJoinMessage+0x52c>
   11258:	4aa2      	ldr	r2, [pc, #648]	; (114e4 <handleJoinMessage+0x7d0>)
   1125a:	9b06      	ldr	r3, [sp, #24]
   1125c:	4694      	mov	ip, r2
   1125e:	4463      	add	r3, ip
   11260:	0018      	movs	r0, r3
   11262:	2204      	movs	r2, #4
   11264:	4b9a      	ldr	r3, [pc, #616]	; (114d0 <handleJoinMessage+0x7bc>)
   11266:	9908      	ldr	r1, [sp, #32]
   11268:	4798      	blx	r3
   1126a:	4a9f      	ldr	r2, [pc, #636]	; (114e8 <handleJoinMessage+0x7d4>)
   1126c:	9b07      	ldr	r3, [sp, #28]
   1126e:	4694      	mov	ip, r2
   11270:	685b      	ldr	r3, [r3, #4]
   11272:	4d9e      	ldr	r5, [pc, #632]	; (114ec <handleJoinMessage+0x7d8>)
   11274:	4463      	add	r3, ip
   11276:	689a      	ldr	r2, [r3, #8]
   11278:	ae0c      	add	r6, sp, #48	; 0x30
   1127a:	60da      	str	r2, [r3, #12]
   1127c:	882b      	ldrh	r3, [r5, #0]
   1127e:	191c      	adds	r4, r3, r4
   11280:	b2a3      	uxth	r3, r4
   11282:	9304      	str	r3, [sp, #16]
   11284:	8829      	ldrh	r1, [r5, #0]
   11286:	0033      	movs	r3, r6
   11288:	b289      	uxth	r1, r1
   1128a:	2201      	movs	r2, #1
   1128c:	2001      	movs	r0, #1
   1128e:	4d98      	ldr	r5, [pc, #608]	; (114f0 <handleJoinMessage+0x7dc>)
   11290:	47a8      	blx	r5
   11292:	2220      	movs	r2, #32
   11294:	7873      	ldrb	r3, [r6, #1]
   11296:	2088      	movs	r0, #136	; 0x88
   11298:	4313      	orrs	r3, r2
   1129a:	7073      	strb	r3, [r6, #1]
   1129c:	4b95      	ldr	r3, [pc, #596]	; (114f4 <handleJoinMessage+0x7e0>)
   1129e:	4798      	blx	r3
   112a0:	4682      	mov	sl, r0
   112a2:	2800      	cmp	r0, #0
   112a4:	d100      	bne.n	112a8 <handleJoinMessage+0x594>
   112a6:	e596      	b.n	10dd6 <handleJoinMessage+0xc2>
   112a8:	0001      	movs	r1, r0
   112aa:	4b93      	ldr	r3, [pc, #588]	; (114f8 <handleJoinMessage+0x7e4>)
   112ac:	0030      	movs	r0, r6
   112ae:	4798      	blx	r3
   112b0:	2204      	movs	r2, #4
   112b2:	4651      	mov	r1, sl
   112b4:	0003      	movs	r3, r0
   112b6:	540a      	strb	r2, [r1, r0]
   112b8:	4683      	mov	fp, r0
   112ba:	4a90      	ldr	r2, [pc, #576]	; (114fc <handleJoinMessage+0x7e8>)
   112bc:	9804      	ldr	r0, [sp, #16]
   112be:	3301      	adds	r3, #1
   112c0:	b2db      	uxtb	r3, r3
   112c2:	4290      	cmp	r0, r2
   112c4:	d100      	bne.n	112c8 <handleJoinMessage+0x5b4>
   112c6:	e560      	b.n	10d8a <handleJoinMessage+0x76>
   112c8:	465a      	mov	r2, fp
   112ca:	4651      	mov	r1, sl
   112cc:	1c95      	adds	r5, r2, #2
   112ce:	2200      	movs	r2, #0
   112d0:	4c81      	ldr	r4, [pc, #516]	; (114d8 <handleJoinMessage+0x7c4>)
   112d2:	54ca      	strb	r2, [r1, r3]
   112d4:	464b      	mov	r3, r9
   112d6:	0001      	movs	r1, r0
   112d8:	3201      	adds	r2, #1
   112da:	47a0      	blx	r4
   112dc:	9904      	ldr	r1, [sp, #16]
   112de:	b2ed      	uxtb	r5, r5
   112e0:	b2cb      	uxtb	r3, r1
   112e2:	0a0c      	lsrs	r4, r1, #8
   112e4:	e559      	b.n	10d9a <handleJoinMessage+0x86>
   112e6:	78e2      	ldrb	r2, [r4, #3]
   112e8:	78a3      	ldrb	r3, [r4, #2]
   112ea:	4d80      	ldr	r5, [pc, #512]	; (114ec <handleJoinMessage+0x7d8>)
   112ec:	0212      	lsls	r2, r2, #8
   112ee:	4313      	orrs	r3, r2
   112f0:	802b      	strh	r3, [r5, #0]
   112f2:	88f2      	ldrh	r2, [r6, #6]
   112f4:	4b82      	ldr	r3, [pc, #520]	; (11500 <handleJoinMessage+0x7ec>)
   112f6:	4983      	ldr	r1, [pc, #524]	; (11504 <handleJoinMessage+0x7f0>)
   112f8:	801a      	strh	r2, [r3, #0]
   112fa:	8873      	ldrh	r3, [r6, #2]
   112fc:	0028      	movs	r0, r5
   112fe:	800b      	strh	r3, [r1, #0]
   11300:	4b81      	ldr	r3, [pc, #516]	; (11508 <handleJoinMessage+0x7f4>)
   11302:	4798      	blx	r3
   11304:	4b75      	ldr	r3, [pc, #468]	; (114dc <handleJoinMessage+0x7c8>)
   11306:	1d21      	adds	r1, r4, #4
   11308:	681e      	ldr	r6, [r3, #0]
   1130a:	469b      	mov	fp, r3
   1130c:	233c      	movs	r3, #60	; 0x3c
   1130e:	5cf2      	ldrb	r2, [r6, r3]
   11310:	4b7e      	ldr	r3, [pc, #504]	; (1150c <handleJoinMessage+0x7f8>)
   11312:	701a      	strb	r2, [r3, #0]
   11314:	4b7e      	ldr	r3, [pc, #504]	; (11510 <handleJoinMessage+0x7fc>)
   11316:	2210      	movs	r2, #16
   11318:	6818      	ldr	r0, [r3, #0]
   1131a:	4b6d      	ldr	r3, [pc, #436]	; (114d0 <handleJoinMessage+0x7bc>)
   1131c:	3010      	adds	r0, #16
   1131e:	4798      	blx	r3
   11320:	22ff      	movs	r2, #255	; 0xff
   11322:	882b      	ldrh	r3, [r5, #0]
   11324:	4691      	mov	r9, r2
   11326:	421a      	tst	r2, r3
   11328:	d100      	bne.n	1132c <handleJoinMessage+0x618>
   1132a:	e09d      	b.n	11468 <handleJoinMessage+0x754>
   1132c:	2307      	movs	r3, #7
   1132e:	4642      	mov	r2, r8
   11330:	703b      	strb	r3, [r7, #0]
   11332:	4b78      	ldr	r3, [pc, #480]	; (11514 <handleJoinMessage+0x800>)
   11334:	4640      	mov	r0, r8
   11336:	6113      	str	r3, [r2, #16]
   11338:	7e73      	ldrb	r3, [r6, #25]
   1133a:	26fa      	movs	r6, #250	; 0xfa
   1133c:	00b6      	lsls	r6, r6, #2
   1133e:	4373      	muls	r3, r6
   11340:	6053      	str	r3, [r2, #4]
   11342:	6093      	str	r3, [r2, #8]
   11344:	2301      	movs	r3, #1
   11346:	7313      	strb	r3, [r2, #12]
   11348:	4b73      	ldr	r3, [pc, #460]	; (11518 <handleJoinMessage+0x804>)
   1134a:	4698      	mov	r8, r3
   1134c:	4798      	blx	r3
   1134e:	465b      	mov	r3, fp
   11350:	681b      	ldr	r3, [r3, #0]
   11352:	0031      	movs	r1, r6
   11354:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
   11356:	4f71      	ldr	r7, [pc, #452]	; (1151c <handleJoinMessage+0x808>)
   11358:	4373      	muls	r3, r6
   1135a:	469a      	mov	sl, r3
   1135c:	0018      	movs	r0, r3
   1135e:	47b8      	blx	r7
   11360:	2632      	movs	r6, #50	; 0x32
   11362:	4653      	mov	r3, sl
   11364:	4346      	muls	r6, r0
   11366:	1b9b      	subs	r3, r3, r6
   11368:	469a      	mov	sl, r3
   1136a:	4b6d      	ldr	r3, [pc, #436]	; (11520 <handleJoinMessage+0x80c>)
   1136c:	9304      	str	r3, [sp, #16]
   1136e:	4798      	blx	r3
   11370:	4b6c      	ldr	r3, [pc, #432]	; (11524 <handleJoinMessage+0x810>)
   11372:	2164      	movs	r1, #100	; 0x64
   11374:	9305      	str	r3, [sp, #20]
   11376:	4798      	blx	r3
   11378:	464b      	mov	r3, r9
   1137a:	0070      	lsls	r0, r6, #1
   1137c:	400b      	ands	r3, r1
   1137e:	4358      	muls	r0, r3
   11380:	2164      	movs	r1, #100	; 0x64
   11382:	47b8      	blx	r7
   11384:	4e68      	ldr	r6, [pc, #416]	; (11528 <handleJoinMessage+0x814>)
   11386:	4450      	add	r0, sl
   11388:	6070      	str	r0, [r6, #4]
   1138a:	60b0      	str	r0, [r6, #8]
   1138c:	4b67      	ldr	r3, [pc, #412]	; (1152c <handleJoinMessage+0x818>)
   1138e:	0030      	movs	r0, r6
   11390:	6133      	str	r3, [r6, #16]
   11392:	2301      	movs	r3, #1
   11394:	469a      	mov	sl, r3
   11396:	7333      	strb	r3, [r6, #12]
   11398:	47c0      	blx	r8
   1139a:	4b65      	ldr	r3, [pc, #404]	; (11530 <handleJoinMessage+0x81c>)
   1139c:	4865      	ldr	r0, [pc, #404]	; (11534 <handleJoinMessage+0x820>)
   1139e:	4798      	blx	r3
   113a0:	22ff      	movs	r2, #255	; 0xff
   113a2:	882b      	ldrh	r3, [r5, #0]
   113a4:	4691      	mov	r9, r2
   113a6:	421a      	tst	r2, r3
   113a8:	d026      	beq.n	113f8 <handleJoinMessage+0x6e4>
   113aa:	2380      	movs	r3, #128	; 0x80
   113ac:	882a      	ldrh	r2, [r5, #0]
   113ae:	4013      	ands	r3, r2
   113b0:	d100      	bne.n	113b4 <handleJoinMessage+0x6a0>
   113b2:	e07c      	b.n	114ae <handleJoinMessage+0x79a>
   113b4:	4b5d      	ldr	r3, [pc, #372]	; (1152c <handleJoinMessage+0x818>)
   113b6:	21fa      	movs	r1, #250	; 0xfa
   113b8:	6133      	str	r3, [r6, #16]
   113ba:	465b      	mov	r3, fp
   113bc:	681b      	ldr	r3, [r3, #0]
   113be:	0089      	lsls	r1, r1, #2
   113c0:	8d9d      	ldrh	r5, [r3, #44]	; 0x2c
   113c2:	434d      	muls	r5, r1
   113c4:	0028      	movs	r0, r5
   113c6:	47b8      	blx	r7
   113c8:	2332      	movs	r3, #50	; 0x32
   113ca:	4343      	muls	r3, r0
   113cc:	469b      	mov	fp, r3
   113ce:	1aed      	subs	r5, r5, r3
   113d0:	9b04      	ldr	r3, [sp, #16]
   113d2:	4798      	blx	r3
   113d4:	9b05      	ldr	r3, [sp, #20]
   113d6:	2164      	movs	r1, #100	; 0x64
   113d8:	4798      	blx	r3
   113da:	464b      	mov	r3, r9
   113dc:	400b      	ands	r3, r1
   113de:	0019      	movs	r1, r3
   113e0:	465b      	mov	r3, fp
   113e2:	0058      	lsls	r0, r3, #1
   113e4:	4348      	muls	r0, r1
   113e6:	2164      	movs	r1, #100	; 0x64
   113e8:	47b8      	blx	r7
   113ea:	4653      	mov	r3, sl
   113ec:	1945      	adds	r5, r0, r5
   113ee:	0030      	movs	r0, r6
   113f0:	6075      	str	r5, [r6, #4]
   113f2:	60b5      	str	r5, [r6, #8]
   113f4:	7333      	strb	r3, [r6, #12]
   113f6:	47c0      	blx	r8
   113f8:	7860      	ldrb	r0, [r4, #1]
   113fa:	e593      	b.n	10f24 <handleJoinMessage+0x210>
   113fc:	4b4e      	ldr	r3, [pc, #312]	; (11538 <handleJoinMessage+0x824>)
   113fe:	0038      	movs	r0, r7
   11400:	4798      	blx	r3
   11402:	ab06      	add	r3, sp, #24
   11404:	2416      	movs	r4, #22
   11406:	469c      	mov	ip, r3
   11408:	4464      	add	r4, ip
   1140a:	8020      	strh	r0, [r4, #0]
   1140c:	e619      	b.n	11042 <handleJoinMessage+0x32e>
   1140e:	4b33      	ldr	r3, [pc, #204]	; (114dc <handleJoinMessage+0x7c8>)
   11410:	469b      	mov	fp, r3
   11412:	681b      	ldr	r3, [r3, #0]
   11414:	9308      	str	r3, [sp, #32]
   11416:	7e9d      	ldrb	r5, [r3, #26]
   11418:	2d00      	cmp	r5, #0
   1141a:	d100      	bne.n	1141e <handleJoinMessage+0x70a>
   1141c:	e498      	b.n	10d50 <handleJoinMessage+0x3c>
   1141e:	681b      	ldr	r3, [r3, #0]
   11420:	46aa      	mov	sl, r5
   11422:	9306      	str	r3, [sp, #24]
   11424:	001e      	movs	r6, r3
   11426:	4b2e      	ldr	r3, [pc, #184]	; (114e0 <handleJoinMessage+0x7cc>)
   11428:	2400      	movs	r4, #0
   1142a:	9304      	str	r3, [sp, #16]
   1142c:	001d      	movs	r5, r3
   1142e:	e005      	b.n	1143c <handleJoinMessage+0x728>
   11430:	3401      	adds	r4, #1
   11432:	b2e4      	uxtb	r4, r4
   11434:	3610      	adds	r6, #16
   11436:	4554      	cmp	r4, sl
   11438:	d100      	bne.n	1143c <handleJoinMessage+0x728>
   1143a:	e081      	b.n	11540 <handleJoinMessage+0x82c>
   1143c:	2208      	movs	r2, #8
   1143e:	0039      	movs	r1, r7
   11440:	0030      	movs	r0, r6
   11442:	47a8      	blx	r5
   11444:	2800      	cmp	r0, #0
   11446:	d1f3      	bne.n	11430 <handleJoinMessage+0x71c>
   11448:	22ff      	movs	r2, #255	; 0xff
   1144a:	0112      	lsls	r2, r2, #4
   1144c:	4694      	mov	ip, r2
   1144e:	9a08      	ldr	r2, [sp, #32]
   11450:	9b06      	ldr	r3, [sp, #24]
   11452:	8dd2      	ldrh	r2, [r2, #46]	; 0x2e
   11454:	4d25      	ldr	r5, [pc, #148]	; (114ec <handleJoinMessage+0x7d8>)
   11456:	4463      	add	r3, ip
   11458:	609a      	str	r2, [r3, #8]
   1145a:	882b      	ldrh	r3, [r5, #0]
   1145c:	ae0c      	add	r6, sp, #48	; 0x30
   1145e:	3380      	adds	r3, #128	; 0x80
   11460:	191c      	adds	r4, r3, r4
   11462:	b2a3      	uxth	r3, r4
   11464:	9304      	str	r3, [sp, #16]
   11466:	e70d      	b.n	11284 <handleJoinMessage+0x570>
   11468:	2306      	movs	r3, #6
   1146a:	21fa      	movs	r1, #250	; 0xfa
   1146c:	703b      	strb	r3, [r7, #0]
   1146e:	8ab3      	ldrh	r3, [r6, #20]
   11470:	0089      	lsls	r1, r1, #2
   11472:	434b      	muls	r3, r1
   11474:	4698      	mov	r8, r3
   11476:	4f29      	ldr	r7, [pc, #164]	; (1151c <handleJoinMessage+0x808>)
   11478:	0018      	movs	r0, r3
   1147a:	47b8      	blx	r7
   1147c:	2632      	movs	r6, #50	; 0x32
   1147e:	4643      	mov	r3, r8
   11480:	4346      	muls	r6, r0
   11482:	1b9b      	subs	r3, r3, r6
   11484:	4698      	mov	r8, r3
   11486:	4b26      	ldr	r3, [pc, #152]	; (11520 <handleJoinMessage+0x80c>)
   11488:	9304      	str	r3, [sp, #16]
   1148a:	4798      	blx	r3
   1148c:	4b25      	ldr	r3, [pc, #148]	; (11524 <handleJoinMessage+0x810>)
   1148e:	2164      	movs	r1, #100	; 0x64
   11490:	9305      	str	r3, [sp, #20]
   11492:	4798      	blx	r3
   11494:	464b      	mov	r3, r9
   11496:	0070      	lsls	r0, r6, #1
   11498:	400b      	ands	r3, r1
   1149a:	4358      	muls	r0, r3
   1149c:	2164      	movs	r1, #100	; 0x64
   1149e:	47b8      	blx	r7
   114a0:	4e21      	ldr	r6, [pc, #132]	; (11528 <handleJoinMessage+0x814>)
   114a2:	4b1d      	ldr	r3, [pc, #116]	; (11518 <handleJoinMessage+0x804>)
   114a4:	4440      	add	r0, r8
   114a6:	6070      	str	r0, [r6, #4]
   114a8:	60b0      	str	r0, [r6, #8]
   114aa:	4698      	mov	r8, r3
   114ac:	e76e      	b.n	1138c <handleJoinMessage+0x678>
   114ae:	4a23      	ldr	r2, [pc, #140]	; (1153c <handleJoinMessage+0x828>)
   114b0:	0030      	movs	r0, r6
   114b2:	6132      	str	r2, [r6, #16]
   114b4:	2232      	movs	r2, #50	; 0x32
   114b6:	7333      	strb	r3, [r6, #12]
   114b8:	6072      	str	r2, [r6, #4]
   114ba:	60b2      	str	r2, [r6, #8]
   114bc:	47c0      	blx	r8
   114be:	7860      	ldrb	r0, [r4, #1]
   114c0:	e530      	b.n	10f24 <handleJoinMessage+0x210>
   114c2:	46c0      	nop			; (mov r8, r8)
   114c4:	20000094 	.word	0x20000094
   114c8:	0000dec1 	.word	0x0000dec1
   114cc:	20002888 	.word	0x20002888
   114d0:	00014cdf 	.word	0x00014cdf
   114d4:	200028f0 	.word	0x200028f0
   114d8:	00011ae5 	.word	0x00011ae5
   114dc:	2000285c 	.word	0x2000285c
   114e0:	00014cc1 	.word	0x00014cc1
   114e4:	000013f4 	.word	0x000013f4
   114e8:	000013ec 	.word	0x000013ec
   114ec:	200028b8 	.word	0x200028b8
   114f0:	0000f029 	.word	0x0000f029
   114f4:	0000bc11 	.word	0x0000bc11
   114f8:	0000f079 	.word	0x0000f079
   114fc:	0000ffff 	.word	0x0000ffff
   11500:	2000009c 	.word	0x2000009c
   11504:	200028a8 	.word	0x200028a8
   11508:	0000abfd 	.word	0x0000abfd
   1150c:	200028d0 	.word	0x200028d0
   11510:	20002860 	.word	0x20002860
   11514:	00010421 	.word	0x00010421
   11518:	0000bfc5 	.word	0x0000bfc5
   1151c:	00012469 	.word	0x00012469
   11520:	000152f5 	.word	0x000152f5
   11524:	00012749 	.word	0x00012749
   11528:	200028bc 	.word	0x200028bc
   1152c:	000104b1 	.word	0x000104b1
   11530:	0000a5b5 	.word	0x0000a5b5
   11534:	00004001 	.word	0x00004001
   11538:	00011f69 	.word	0x00011f69
   1153c:	000108f5 	.word	0x000108f5
   11540:	2300      	movs	r3, #0
   11542:	9407      	str	r4, [sp, #28]
   11544:	46ba      	mov	sl, r7
   11546:	9d06      	ldr	r5, [sp, #24]
   11548:	ae0c      	add	r6, sp, #48	; 0x30
   1154a:	001c      	movs	r4, r3
   1154c:	9f04      	ldr	r7, [sp, #16]
   1154e:	e011      	b.n	11574 <handleJoinMessage+0x860>
   11550:	2201      	movs	r2, #1
   11552:	4252      	negs	r2, r2
   11554:	17d3      	asrs	r3, r2, #31
   11556:	0029      	movs	r1, r5
   11558:	920c      	str	r2, [sp, #48]	; 0x30
   1155a:	930d      	str	r3, [sp, #52]	; 0x34
   1155c:	0030      	movs	r0, r6
   1155e:	3209      	adds	r2, #9
   11560:	47b8      	blx	r7
   11562:	2800      	cmp	r0, #0
   11564:	d013      	beq.n	1158e <handleJoinMessage+0x87a>
   11566:	3401      	adds	r4, #1
   11568:	9b07      	ldr	r3, [sp, #28]
   1156a:	b2e4      	uxtb	r4, r4
   1156c:	3510      	adds	r5, #16
   1156e:	42a3      	cmp	r3, r4
   11570:	d100      	bne.n	11574 <handleJoinMessage+0x860>
   11572:	e080      	b.n	11676 <handleJoinMessage+0x962>
   11574:	9b06      	ldr	r3, [sp, #24]
   11576:	2200      	movs	r2, #0
   11578:	1aeb      	subs	r3, r5, r3
   1157a:	9304      	str	r3, [sp, #16]
   1157c:	2300      	movs	r3, #0
   1157e:	0029      	movs	r1, r5
   11580:	920c      	str	r2, [sp, #48]	; 0x30
   11582:	930d      	str	r3, [sp, #52]	; 0x34
   11584:	0030      	movs	r0, r6
   11586:	3208      	adds	r2, #8
   11588:	47b8      	blx	r7
   1158a:	2800      	cmp	r0, #0
   1158c:	d1e0      	bne.n	11550 <handleJoinMessage+0x83c>
   1158e:	4657      	mov	r7, sl
   11590:	2208      	movs	r2, #8
   11592:	0039      	movs	r1, r7
   11594:	0028      	movs	r0, r5
   11596:	4b4e      	ldr	r3, [pc, #312]	; (116d0 <handleJoinMessage+0x9bc>)
   11598:	4798      	blx	r3
   1159a:	465b      	mov	r3, fp
   1159c:	9804      	ldr	r0, [sp, #16]
   1159e:	4669      	mov	r1, sp
   115a0:	4684      	mov	ip, r0
   115a2:	681a      	ldr	r2, [r3, #0]
   115a4:	7d09      	ldrb	r1, [r1, #20]
   115a6:	6813      	ldr	r3, [r2, #0]
   115a8:	46a2      	mov	sl, r4
   115aa:	4463      	add	r3, ip
   115ac:	7319      	strb	r1, [r3, #12]
   115ae:	0001      	movs	r1, r0
   115b0:	6810      	ldr	r0, [r2, #0]
   115b2:	8dd2      	ldrh	r2, [r2, #46]	; 0x2e
   115b4:	4683      	mov	fp, r0
   115b6:	4459      	add	r1, fp
   115b8:	4b46      	ldr	r3, [pc, #280]	; (116d4 <handleJoinMessage+0x9c0>)
   115ba:	608a      	str	r2, [r1, #8]
   115bc:	2006      	movs	r0, #6
   115be:	4798      	blx	r3
   115c0:	4d45      	ldr	r5, [pc, #276]	; (116d8 <handleJoinMessage+0x9c4>)
   115c2:	882c      	ldrh	r4, [r5, #0]
   115c4:	3480      	adds	r4, #128	; 0x80
   115c6:	4454      	add	r4, sl
   115c8:	b2a3      	uxth	r3, r4
   115ca:	9304      	str	r3, [sp, #16]
   115cc:	e65a      	b.n	11284 <handleJoinMessage+0x570>
   115ce:	9b09      	ldr	r3, [sp, #36]	; 0x24
   115d0:	9407      	str	r4, [sp, #28]
   115d2:	469a      	mov	sl, r3
   115d4:	2301      	movs	r3, #1
   115d6:	4655      	mov	r5, sl
   115d8:	ae0c      	add	r6, sp, #48	; 0x30
   115da:	001c      	movs	r4, r3
   115dc:	46ba      	mov	sl, r7
   115de:	e011      	b.n	11604 <handleJoinMessage+0x8f0>
   115e0:	2201      	movs	r2, #1
   115e2:	4252      	negs	r2, r2
   115e4:	17d3      	asrs	r3, r2, #31
   115e6:	0029      	movs	r1, r5
   115e8:	920c      	str	r2, [sp, #48]	; 0x30
   115ea:	930d      	str	r3, [sp, #52]	; 0x34
   115ec:	0030      	movs	r0, r6
   115ee:	3209      	adds	r2, #9
   115f0:	9b04      	ldr	r3, [sp, #16]
   115f2:	4798      	blx	r3
   115f4:	2800      	cmp	r0, #0
   115f6:	d012      	beq.n	1161e <handleJoinMessage+0x90a>
   115f8:	3401      	adds	r4, #1
   115fa:	9b07      	ldr	r3, [sp, #28]
   115fc:	b2e4      	uxtb	r4, r4
   115fe:	3514      	adds	r5, #20
   11600:	42a3      	cmp	r3, r4
   11602:	d035      	beq.n	11670 <handleJoinMessage+0x95c>
   11604:	9b06      	ldr	r3, [sp, #24]
   11606:	2200      	movs	r2, #0
   11608:	1aef      	subs	r7, r5, r3
   1160a:	2300      	movs	r3, #0
   1160c:	0029      	movs	r1, r5
   1160e:	920c      	str	r2, [sp, #48]	; 0x30
   11610:	930d      	str	r3, [sp, #52]	; 0x34
   11612:	0030      	movs	r0, r6
   11614:	3208      	adds	r2, #8
   11616:	9b04      	ldr	r3, [sp, #16]
   11618:	4798      	blx	r3
   1161a:	2800      	cmp	r0, #0
   1161c:	d1e0      	bne.n	115e0 <handleJoinMessage+0x8cc>
   1161e:	4653      	mov	r3, sl
   11620:	46aa      	mov	sl, r5
   11622:	0019      	movs	r1, r3
   11624:	9404      	str	r4, [sp, #16]
   11626:	2208      	movs	r2, #8
   11628:	4c29      	ldr	r4, [pc, #164]	; (116d0 <handleJoinMessage+0x9bc>)
   1162a:	4650      	mov	r0, sl
   1162c:	003d      	movs	r5, r7
   1162e:	001f      	movs	r7, r3
   11630:	47a0      	blx	r4
   11632:	465b      	mov	r3, fp
   11634:	466a      	mov	r2, sp
   11636:	681b      	ldr	r3, [r3, #0]
   11638:	7d12      	ldrb	r2, [r2, #20]
   1163a:	469a      	mov	sl, r3
   1163c:	685b      	ldr	r3, [r3, #4]
   1163e:	9908      	ldr	r1, [sp, #32]
   11640:	195b      	adds	r3, r3, r5
   11642:	741a      	strb	r2, [r3, #16]
   11644:	4653      	mov	r3, sl
   11646:	685b      	ldr	r3, [r3, #4]
   11648:	2204      	movs	r2, #4
   1164a:	1958      	adds	r0, r3, r5
   1164c:	3008      	adds	r0, #8
   1164e:	47a0      	blx	r4
   11650:	4653      	mov	r3, sl
   11652:	685b      	ldr	r3, [r3, #4]
   11654:	2007      	movs	r0, #7
   11656:	195d      	adds	r5, r3, r5
   11658:	68ab      	ldr	r3, [r5, #8]
   1165a:	60eb      	str	r3, [r5, #12]
   1165c:	4b1d      	ldr	r3, [pc, #116]	; (116d4 <handleJoinMessage+0x9c0>)
   1165e:	4798      	blx	r3
   11660:	9b04      	ldr	r3, [sp, #16]
   11662:	4d1d      	ldr	r5, [pc, #116]	; (116d8 <handleJoinMessage+0x9c4>)
   11664:	469c      	mov	ip, r3
   11666:	882c      	ldrh	r4, [r5, #0]
   11668:	4464      	add	r4, ip
   1166a:	b2a3      	uxth	r3, r4
   1166c:	9304      	str	r3, [sp, #16]
   1166e:	e609      	b.n	11284 <handleJoinMessage+0x570>
   11670:	4657      	mov	r7, sl
   11672:	f7ff fb6d 	bl	10d50 <handleJoinMessage+0x3c>
   11676:	9b08      	ldr	r3, [sp, #32]
   11678:	4657      	mov	r7, sl
   1167a:	6818      	ldr	r0, [r3, #0]
   1167c:	23ff      	movs	r3, #255	; 0xff
   1167e:	011b      	lsls	r3, r3, #4
   11680:	18c3      	adds	r3, r0, r3
   11682:	689b      	ldr	r3, [r3, #8]
   11684:	2b00      	cmp	r3, #0
   11686:	d001      	beq.n	1168c <handleJoinMessage+0x978>
   11688:	f7ff fb62 	bl	10d50 <handleJoinMessage+0x3c>
   1168c:	2208      	movs	r2, #8
   1168e:	4651      	mov	r1, sl
   11690:	4b0f      	ldr	r3, [pc, #60]	; (116d0 <handleJoinMessage+0x9bc>)
   11692:	4798      	blx	r3
   11694:	465b      	mov	r3, fp
   11696:	4669      	mov	r1, sp
   11698:	681b      	ldr	r3, [r3, #0]
   1169a:	7d09      	ldrb	r1, [r1, #20]
   1169c:	681a      	ldr	r2, [r3, #0]
   1169e:	2006      	movs	r0, #6
   116a0:	7311      	strb	r1, [r2, #12]
   116a2:	681a      	ldr	r2, [r3, #0]
   116a4:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
   116a6:	6093      	str	r3, [r2, #8]
   116a8:	4b0a      	ldr	r3, [pc, #40]	; (116d4 <handleJoinMessage+0x9c0>)
   116aa:	4798      	blx	r3
   116ac:	4d0a      	ldr	r5, [pc, #40]	; (116d8 <handleJoinMessage+0x9c4>)
   116ae:	882c      	ldrh	r4, [r5, #0]
   116b0:	3480      	adds	r4, #128	; 0x80
   116b2:	b2a3      	uxth	r3, r4
   116b4:	9304      	str	r3, [sp, #16]
   116b6:	e5e5      	b.n	11284 <handleJoinMessage+0x570>
   116b8:	2201      	movs	r2, #1
   116ba:	4b07      	ldr	r3, [pc, #28]	; (116d8 <handleJoinMessage+0x9c4>)
   116bc:	0010      	movs	r0, r2
   116be:	8819      	ldrh	r1, [r3, #0]
   116c0:	4c06      	ldr	r4, [pc, #24]	; (116dc <handleJoinMessage+0x9c8>)
   116c2:	0033      	movs	r3, r6
   116c4:	b289      	uxth	r1, r1
   116c6:	47a0      	blx	r4
   116c8:	7872      	ldrb	r2, [r6, #1]
   116ca:	2320      	movs	r3, #32
   116cc:	f7ff fb4a 	bl	10d64 <handleJoinMessage+0x50>
   116d0:	00014cdf 	.word	0x00014cdf
   116d4:	0000a5b5 	.word	0x0000a5b5
   116d8:	200028b8 	.word	0x200028b8
   116dc:	0000f029 	.word	0x0000f029

000116e0 <deviceTableInit>:
   116e0:	b5f0      	push	{r4, r5, r6, r7, lr}
   116e2:	46c6      	mov	lr, r8
   116e4:	b500      	push	{lr}
   116e6:	4b24      	ldr	r3, [pc, #144]	; (11778 <deviceTableInit+0x98>)
   116e8:	681c      	ldr	r4, [r3, #0]
   116ea:	4698      	mov	r8, r3
   116ec:	7ea3      	ldrb	r3, [r4, #26]
   116ee:	2b00      	cmp	r3, #0
   116f0:	d019      	beq.n	11726 <deviceTableInit+0x46>
   116f2:	2500      	movs	r5, #0
   116f4:	4f21      	ldr	r7, [pc, #132]	; (1177c <deviceTableInit+0x9c>)
   116f6:	6820      	ldr	r0, [r4, #0]
   116f8:	012e      	lsls	r6, r5, #4
   116fa:	1980      	adds	r0, r0, r6
   116fc:	2208      	movs	r2, #8
   116fe:	21ff      	movs	r1, #255	; 0xff
   11700:	47b8      	blx	r7
   11702:	4643      	mov	r3, r8
   11704:	681c      	ldr	r4, [r3, #0]
   11706:	2204      	movs	r2, #4
   11708:	6823      	ldr	r3, [r4, #0]
   1170a:	21ff      	movs	r1, #255	; 0xff
   1170c:	1998      	adds	r0, r3, r6
   1170e:	3008      	adds	r0, #8
   11710:	47b8      	blx	r7
   11712:	6823      	ldr	r3, [r4, #0]
   11714:	22ff      	movs	r2, #255	; 0xff
   11716:	469c      	mov	ip, r3
   11718:	4466      	add	r6, ip
   1171a:	7332      	strb	r2, [r6, #12]
   1171c:	3501      	adds	r5, #1
   1171e:	7ea3      	ldrb	r3, [r4, #26]
   11720:	b2ed      	uxtb	r5, r5
   11722:	42ab      	cmp	r3, r5
   11724:	d8e7      	bhi.n	116f6 <deviceTableInit+0x16>
   11726:	7ee3      	ldrb	r3, [r4, #27]
   11728:	2b00      	cmp	r3, #0
   1172a:	d021      	beq.n	11770 <deviceTableInit+0x90>
   1172c:	2600      	movs	r6, #0
   1172e:	4f13      	ldr	r7, [pc, #76]	; (1177c <deviceTableInit+0x9c>)
   11730:	00b5      	lsls	r5, r6, #2
   11732:	6860      	ldr	r0, [r4, #4]
   11734:	19ad      	adds	r5, r5, r6
   11736:	00ad      	lsls	r5, r5, #2
   11738:	1940      	adds	r0, r0, r5
   1173a:	2208      	movs	r2, #8
   1173c:	21ff      	movs	r1, #255	; 0xff
   1173e:	47b8      	blx	r7
   11740:	4643      	mov	r3, r8
   11742:	681c      	ldr	r4, [r3, #0]
   11744:	2204      	movs	r2, #4
   11746:	6863      	ldr	r3, [r4, #4]
   11748:	21ff      	movs	r1, #255	; 0xff
   1174a:	1958      	adds	r0, r3, r5
   1174c:	3008      	adds	r0, #8
   1174e:	47b8      	blx	r7
   11750:	6863      	ldr	r3, [r4, #4]
   11752:	2204      	movs	r2, #4
   11754:	1958      	adds	r0, r3, r5
   11756:	300c      	adds	r0, #12
   11758:	21ff      	movs	r1, #255	; 0xff
   1175a:	47b8      	blx	r7
   1175c:	6863      	ldr	r3, [r4, #4]
   1175e:	3601      	adds	r6, #1
   11760:	469c      	mov	ip, r3
   11762:	23ff      	movs	r3, #255	; 0xff
   11764:	4465      	add	r5, ip
   11766:	742b      	strb	r3, [r5, #16]
   11768:	7ee3      	ldrb	r3, [r4, #27]
   1176a:	b2f6      	uxtb	r6, r6
   1176c:	42b3      	cmp	r3, r6
   1176e:	d8df      	bhi.n	11730 <deviceTableInit+0x50>
   11770:	bc04      	pop	{r2}
   11772:	4690      	mov	r8, r2
   11774:	bdf0      	pop	{r4, r5, r6, r7, pc}
   11776:	46c0      	nop			; (mov r8, r8)
   11778:	2000285c 	.word	0x2000285c
   1177c:	00014cf1 	.word	0x00014cf1

00011780 <sendForceLeaveNetwork>:
   11780:	23ff      	movs	r3, #255	; 0xff
   11782:	b570      	push	{r4, r5, r6, lr}
   11784:	0004      	movs	r4, r0
   11786:	b08e      	sub	sp, #56	; 0x38
   11788:	4203      	tst	r3, r0
   1178a:	d027      	beq.n	117dc <sendForceLeaveNetwork+0x5c>
   1178c:	2516      	movs	r5, #22
   1178e:	446d      	add	r5, sp
   11790:	8028      	strh	r0, [r5, #0]
   11792:	4b15      	ldr	r3, [pc, #84]	; (117e8 <sendForceLeaveNetwork+0x68>)
   11794:	4298      	cmp	r0, r3
   11796:	d01f      	beq.n	117d8 <sendForceLeaveNetwork+0x58>
   11798:	2088      	movs	r0, #136	; 0x88
   1179a:	4b14      	ldr	r3, [pc, #80]	; (117ec <sendForceLeaveNetwork+0x6c>)
   1179c:	4798      	blx	r3
   1179e:	1e06      	subs	r6, r0, #0
   117a0:	d01a      	beq.n	117d8 <sendForceLeaveNetwork+0x58>
   117a2:	4b13      	ldr	r3, [pc, #76]	; (117f0 <sendForceLeaveNetwork+0x70>)
   117a4:	0022      	movs	r2, r4
   117a6:	8819      	ldrh	r1, [r3, #0]
   117a8:	20ff      	movs	r0, #255	; 0xff
   117aa:	b289      	uxth	r1, r1
   117ac:	ab06      	add	r3, sp, #24
   117ae:	4c11      	ldr	r4, [pc, #68]	; (117f4 <sendForceLeaveNetwork+0x74>)
   117b0:	47a0      	blx	r4
   117b2:	0031      	movs	r1, r6
   117b4:	4b10      	ldr	r3, [pc, #64]	; (117f8 <sendForceLeaveNetwork+0x78>)
   117b6:	a806      	add	r0, sp, #24
   117b8:	4798      	blx	r3
   117ba:	2308      	movs	r3, #8
   117bc:	5433      	strb	r3, [r6, r0]
   117be:	4b0f      	ldr	r3, [pc, #60]	; (117fc <sendForceLeaveNetwork+0x7c>)
   117c0:	0001      	movs	r1, r0
   117c2:	9303      	str	r3, [sp, #12]
   117c4:	2300      	movs	r3, #0
   117c6:	9302      	str	r3, [sp, #8]
   117c8:	3302      	adds	r3, #2
   117ca:	9300      	str	r3, [sp, #0]
   117cc:	9501      	str	r5, [sp, #4]
   117ce:	0033      	movs	r3, r6
   117d0:	2201      	movs	r2, #1
   117d2:	a806      	add	r0, sp, #24
   117d4:	4c0a      	ldr	r4, [pc, #40]	; (11800 <sendForceLeaveNetwork+0x80>)
   117d6:	47a0      	blx	r4
   117d8:	b00e      	add	sp, #56	; 0x38
   117da:	bd70      	pop	{r4, r5, r6, pc}
   117dc:	4b09      	ldr	r3, [pc, #36]	; (11804 <sendForceLeaveNetwork+0x84>)
   117de:	2516      	movs	r5, #22
   117e0:	4798      	blx	r3
   117e2:	446d      	add	r5, sp
   117e4:	8028      	strh	r0, [r5, #0]
   117e6:	e7d4      	b.n	11792 <sendForceLeaveNetwork+0x12>
   117e8:	0000ffff 	.word	0x0000ffff
   117ec:	0000bc11 	.word	0x0000bc11
   117f0:	200028b8 	.word	0x200028b8
   117f4:	0000f029 	.word	0x0000f029
   117f8:	0000f079 	.word	0x0000f079
   117fc:	000104a1 	.word	0x000104a1
   11800:	0000f105 	.word	0x0000f105
   11804:	00011f69 	.word	0x00011f69

00011808 <isCorrectIeeeAddr>:
   11808:	2300      	movs	r3, #0
   1180a:	2200      	movs	r2, #0
   1180c:	b530      	push	{r4, r5, lr}
   1180e:	b083      	sub	sp, #12
   11810:	9200      	str	r2, [sp, #0]
   11812:	9301      	str	r3, [sp, #4]
   11814:	0001      	movs	r1, r0
   11816:	0005      	movs	r5, r0
   11818:	3208      	adds	r2, #8
   1181a:	4668      	mov	r0, sp
   1181c:	4c09      	ldr	r4, [pc, #36]	; (11844 <isCorrectIeeeAddr+0x3c>)
   1181e:	47a0      	blx	r4
   11820:	0003      	movs	r3, r0
   11822:	2000      	movs	r0, #0
   11824:	2b00      	cmp	r3, #0
   11826:	d00b      	beq.n	11840 <isCorrectIeeeAddr+0x38>
   11828:	2201      	movs	r2, #1
   1182a:	4252      	negs	r2, r2
   1182c:	17d3      	asrs	r3, r2, #31
   1182e:	0029      	movs	r1, r5
   11830:	9200      	str	r2, [sp, #0]
   11832:	9301      	str	r3, [sp, #4]
   11834:	4668      	mov	r0, sp
   11836:	3209      	adds	r2, #9
   11838:	47a0      	blx	r4
   1183a:	1e43      	subs	r3, r0, #1
   1183c:	4198      	sbcs	r0, r3
   1183e:	b2c0      	uxtb	r0, r0
   11840:	b003      	add	sp, #12
   11842:	bd30      	pop	{r4, r5, pc}
   11844:	00014cc1 	.word	0x00014cc1

00011848 <keepAliveTimerHandler>:
   11848:	b5f0      	push	{r4, r5, r6, r7, lr}
   1184a:	46de      	mov	lr, fp
   1184c:	4657      	mov	r7, sl
   1184e:	4645      	mov	r5, r8
   11850:	464e      	mov	r6, r9
   11852:	b5e0      	push	{r5, r6, r7, lr}
   11854:	4b3b      	ldr	r3, [pc, #236]	; (11944 <keepAliveTimerHandler+0xfc>)
   11856:	b083      	sub	sp, #12
   11858:	681d      	ldr	r5, [r3, #0]
   1185a:	469b      	mov	fp, r3
   1185c:	7eab      	ldrb	r3, [r5, #26]
   1185e:	469a      	mov	sl, r3
   11860:	2b00      	cmp	r3, #0
   11862:	d02a      	beq.n	118ba <keepAliveTimerHandler+0x72>
   11864:	4b38      	ldr	r3, [pc, #224]	; (11948 <keepAliveTimerHandler+0x100>)
   11866:	2400      	movs	r4, #0
   11868:	46e9      	mov	r9, sp
   1186a:	4698      	mov	r8, r3
   1186c:	682b      	ldr	r3, [r5, #0]
   1186e:	0127      	lsls	r7, r4, #4
   11870:	19de      	adds	r6, r3, r7
   11872:	2200      	movs	r2, #0
   11874:	2300      	movs	r3, #0
   11876:	0031      	movs	r1, r6
   11878:	9200      	str	r2, [sp, #0]
   1187a:	9301      	str	r3, [sp, #4]
   1187c:	4648      	mov	r0, r9
   1187e:	3208      	adds	r2, #8
   11880:	47c0      	blx	r8
   11882:	2800      	cmp	r0, #0
   11884:	d015      	beq.n	118b2 <keepAliveTimerHandler+0x6a>
   11886:	2201      	movs	r2, #1
   11888:	4252      	negs	r2, r2
   1188a:	17d3      	asrs	r3, r2, #31
   1188c:	0031      	movs	r1, r6
   1188e:	9200      	str	r2, [sp, #0]
   11890:	9301      	str	r3, [sp, #4]
   11892:	4648      	mov	r0, r9
   11894:	3209      	adds	r2, #9
   11896:	47c0      	blx	r8
   11898:	2800      	cmp	r0, #0
   1189a:	d00a      	beq.n	118b2 <keepAliveTimerHandler+0x6a>
   1189c:	682b      	ldr	r3, [r5, #0]
   1189e:	19df      	adds	r7, r3, r7
   118a0:	68bb      	ldr	r3, [r7, #8]
   118a2:	2b00      	cmp	r3, #0
   118a4:	d001      	beq.n	118aa <keepAliveTimerHandler+0x62>
   118a6:	3b01      	subs	r3, #1
   118a8:	60bb      	str	r3, [r7, #8]
   118aa:	465b      	mov	r3, fp
   118ac:	681d      	ldr	r5, [r3, #0]
   118ae:	7eab      	ldrb	r3, [r5, #26]
   118b0:	469a      	mov	sl, r3
   118b2:	3401      	adds	r4, #1
   118b4:	b2e4      	uxtb	r4, r4
   118b6:	4554      	cmp	r4, sl
   118b8:	d3d8      	bcc.n	1186c <keepAliveTimerHandler+0x24>
   118ba:	7eeb      	ldrb	r3, [r5, #27]
   118bc:	469a      	mov	sl, r3
   118be:	2b01      	cmp	r3, #1
   118c0:	d92e      	bls.n	11920 <keepAliveTimerHandler+0xd8>
   118c2:	4b21      	ldr	r3, [pc, #132]	; (11948 <keepAliveTimerHandler+0x100>)
   118c4:	2401      	movs	r4, #1
   118c6:	46e9      	mov	r9, sp
   118c8:	4698      	mov	r8, r3
   118ca:	00a6      	lsls	r6, r4, #2
   118cc:	686b      	ldr	r3, [r5, #4]
   118ce:	1936      	adds	r6, r6, r4
   118d0:	00b6      	lsls	r6, r6, #2
   118d2:	199f      	adds	r7, r3, r6
   118d4:	2200      	movs	r2, #0
   118d6:	2300      	movs	r3, #0
   118d8:	0039      	movs	r1, r7
   118da:	9200      	str	r2, [sp, #0]
   118dc:	9301      	str	r3, [sp, #4]
   118de:	4648      	mov	r0, r9
   118e0:	3208      	adds	r2, #8
   118e2:	47c0      	blx	r8
   118e4:	2800      	cmp	r0, #0
   118e6:	d017      	beq.n	11918 <keepAliveTimerHandler+0xd0>
   118e8:	2201      	movs	r2, #1
   118ea:	4252      	negs	r2, r2
   118ec:	17d3      	asrs	r3, r2, #31
   118ee:	0039      	movs	r1, r7
   118f0:	9200      	str	r2, [sp, #0]
   118f2:	9301      	str	r3, [sp, #4]
   118f4:	4648      	mov	r0, r9
   118f6:	3209      	adds	r2, #9
   118f8:	47c0      	blx	r8
   118fa:	2800      	cmp	r0, #0
   118fc:	d00c      	beq.n	11918 <keepAliveTimerHandler+0xd0>
   118fe:	686b      	ldr	r3, [r5, #4]
   11900:	199b      	adds	r3, r3, r6
   11902:	68da      	ldr	r2, [r3, #12]
   11904:	2a00      	cmp	r2, #0
   11906:	d003      	beq.n	11910 <keepAliveTimerHandler+0xc8>
   11908:	3a01      	subs	r2, #1
   1190a:	60da      	str	r2, [r3, #12]
   1190c:	2a00      	cmp	r2, #0
   1190e:	d00e      	beq.n	1192e <keepAliveTimerHandler+0xe6>
   11910:	465b      	mov	r3, fp
   11912:	681d      	ldr	r5, [r3, #0]
   11914:	7eeb      	ldrb	r3, [r5, #27]
   11916:	469a      	mov	sl, r3
   11918:	3401      	adds	r4, #1
   1191a:	b2e4      	uxtb	r4, r4
   1191c:	4554      	cmp	r4, sl
   1191e:	d3d4      	bcc.n	118ca <keepAliveTimerHandler+0x82>
   11920:	b003      	add	sp, #12
   11922:	bc3c      	pop	{r2, r3, r4, r5}
   11924:	4690      	mov	r8, r2
   11926:	4699      	mov	r9, r3
   11928:	46a2      	mov	sl, r4
   1192a:	46ab      	mov	fp, r5
   1192c:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1192e:	6868      	ldr	r0, [r5, #4]
   11930:	2208      	movs	r2, #8
   11932:	1980      	adds	r0, r0, r6
   11934:	21ff      	movs	r1, #255	; 0xff
   11936:	4b05      	ldr	r3, [pc, #20]	; (1194c <keepAliveTimerHandler+0x104>)
   11938:	4798      	blx	r3
   1193a:	4b05      	ldr	r3, [pc, #20]	; (11950 <keepAliveTimerHandler+0x108>)
   1193c:	2007      	movs	r0, #7
   1193e:	4798      	blx	r3
   11940:	e7e6      	b.n	11910 <keepAliveTimerHandler+0xc8>
   11942:	46c0      	nop			; (mov r8, r8)
   11944:	2000285c 	.word	0x2000285c
   11948:	00014cc1 	.word	0x00014cc1
   1194c:	00014cf1 	.word	0x00014cf1
   11950:	0000a5b5 	.word	0x0000a5b5

00011954 <MiApp_SubscribeLinkFailureCallback>:
   11954:	2800      	cmp	r0, #0
   11956:	d003      	beq.n	11960 <MiApp_SubscribeLinkFailureCallback+0xc>
   11958:	4b02      	ldr	r3, [pc, #8]	; (11964 <MiApp_SubscribeLinkFailureCallback+0x10>)
   1195a:	6018      	str	r0, [r3, #0]
   1195c:	2001      	movs	r0, #1
   1195e:	4770      	bx	lr
   11960:	2000      	movs	r0, #0
   11962:	e7fc      	b.n	1195e <MiApp_SubscribeLinkFailureCallback+0xa>
   11964:	20002900 	.word	0x20002900

00011968 <MiApp_SubscribeReConnectionCallback>:
   11968:	2800      	cmp	r0, #0
   1196a:	d003      	beq.n	11974 <MiApp_SubscribeReConnectionCallback+0xc>
   1196c:	4b02      	ldr	r3, [pc, #8]	; (11978 <MiApp_SubscribeReConnectionCallback+0x10>)
   1196e:	6018      	str	r0, [r3, #0]
   11970:	2001      	movs	r0, #1
   11972:	4770      	bx	lr
   11974:	2000      	movs	r0, #0
   11976:	e7fc      	b.n	11972 <MiApp_SubscribeReConnectionCallback+0xa>
   11978:	200028d4 	.word	0x200028d4

0001197c <checkLinkFailureAtNoAck>:
   1197c:	b510      	push	{r4, lr}
   1197e:	2803      	cmp	r0, #3
   11980:	d006      	beq.n	11990 <checkLinkFailureAtNoAck+0x14>
   11982:	4b12      	ldr	r3, [pc, #72]	; (119cc <checkLinkFailureAtNoAck+0x50>)
   11984:	681a      	ldr	r2, [r3, #0]
   11986:	233c      	movs	r3, #60	; 0x3c
   11988:	5cd2      	ldrb	r2, [r2, r3]
   1198a:	4b11      	ldr	r3, [pc, #68]	; (119d0 <checkLinkFailureAtNoAck+0x54>)
   1198c:	701a      	strb	r2, [r3, #0]
   1198e:	bd10      	pop	{r4, pc}
   11990:	4a0f      	ldr	r2, [pc, #60]	; (119d0 <checkLinkFailureAtNoAck+0x54>)
   11992:	7813      	ldrb	r3, [r2, #0]
   11994:	2b00      	cmp	r3, #0
   11996:	d0fa      	beq.n	1198e <checkLinkFailureAtNoAck+0x12>
   11998:	3b01      	subs	r3, #1
   1199a:	b2db      	uxtb	r3, r3
   1199c:	7013      	strb	r3, [r2, #0]
   1199e:	2b00      	cmp	r3, #0
   119a0:	d1f5      	bne.n	1198e <checkLinkFailureAtNoAck+0x12>
   119a2:	4a0c      	ldr	r2, [pc, #48]	; (119d4 <checkLinkFailureAtNoAck+0x58>)
   119a4:	480c      	ldr	r0, [pc, #48]	; (119d8 <checkLinkFailureAtNoAck+0x5c>)
   119a6:	7013      	strb	r3, [r2, #0]
   119a8:	4b0c      	ldr	r3, [pc, #48]	; (119dc <checkLinkFailureAtNoAck+0x60>)
   119aa:	4798      	blx	r3
   119ac:	2208      	movs	r2, #8
   119ae:	4b0c      	ldr	r3, [pc, #48]	; (119e0 <checkLinkFailureAtNoAck+0x64>)
   119b0:	480c      	ldr	r0, [pc, #48]	; (119e4 <checkLinkFailureAtNoAck+0x68>)
   119b2:	701a      	strb	r2, [r3, #0]
   119b4:	4b0c      	ldr	r3, [pc, #48]	; (119e8 <checkLinkFailureAtNoAck+0x6c>)
   119b6:	3a09      	subs	r2, #9
   119b8:	801a      	strh	r2, [r3, #0]
   119ba:	4b0c      	ldr	r3, [pc, #48]	; (119ec <checkLinkFailureAtNoAck+0x70>)
   119bc:	4798      	blx	r3
   119be:	4b0c      	ldr	r3, [pc, #48]	; (119f0 <checkLinkFailureAtNoAck+0x74>)
   119c0:	681b      	ldr	r3, [r3, #0]
   119c2:	2b00      	cmp	r3, #0
   119c4:	d0e3      	beq.n	1198e <checkLinkFailureAtNoAck+0x12>
   119c6:	4798      	blx	r3
   119c8:	e7e1      	b.n	1198e <checkLinkFailureAtNoAck+0x12>
   119ca:	46c0      	nop			; (mov r8, r8)
   119cc:	2000285c 	.word	0x2000285c
   119d0:	200028d0 	.word	0x200028d0
   119d4:	20001d0a 	.word	0x20001d0a
   119d8:	200028bc 	.word	0x200028bc
   119dc:	0000bf59 	.word	0x0000bf59
   119e0:	20001ce1 	.word	0x20001ce1
   119e4:	00004001 	.word	0x00004001
   119e8:	200028b8 	.word	0x200028b8
   119ec:	0000a5b5 	.word	0x0000a5b5
   119f0:	20002900 	.word	0x20002900

000119f4 <generateJitterTimeout>:
   119f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   119f6:	000f      	movs	r7, r1
   119f8:	21fa      	movs	r1, #250	; 0xfa
   119fa:	4d0b      	ldr	r5, [pc, #44]	; (11a28 <generateJitterTimeout+0x34>)
   119fc:	0089      	lsls	r1, r1, #2
   119fe:	0006      	movs	r6, r0
   11a00:	47a8      	blx	r5
   11a02:	00bc      	lsls	r4, r7, #2
   11a04:	19e4      	adds	r4, r4, r7
   11a06:	4b09      	ldr	r3, [pc, #36]	; (11a2c <generateJitterTimeout+0x38>)
   11a08:	0064      	lsls	r4, r4, #1
   11a0a:	4344      	muls	r4, r0
   11a0c:	4798      	blx	r3
   11a0e:	4b08      	ldr	r3, [pc, #32]	; (11a30 <generateJitterTimeout+0x3c>)
   11a10:	2164      	movs	r1, #100	; 0x64
   11a12:	4798      	blx	r3
   11a14:	20ff      	movs	r0, #255	; 0xff
   11a16:	1b36      	subs	r6, r6, r4
   11a18:	4008      	ands	r0, r1
   11a1a:	0064      	lsls	r4, r4, #1
   11a1c:	4360      	muls	r0, r4
   11a1e:	2164      	movs	r1, #100	; 0x64
   11a20:	47a8      	blx	r5
   11a22:	1980      	adds	r0, r0, r6
   11a24:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   11a26:	46c0      	nop			; (mov r8, r8)
   11a28:	00012469 	.word	0x00012469
   11a2c:	000152f5 	.word	0x000152f5
   11a30:	00012749 	.word	0x00012749

00011a34 <routeReplyConfcb>:
   11a34:	b510      	push	{r4, lr}
   11a36:	0010      	movs	r0, r2
   11a38:	4b01      	ldr	r3, [pc, #4]	; (11a40 <routeReplyConfcb+0xc>)
   11a3a:	4798      	blx	r3
   11a3c:	bd10      	pop	{r4, pc}
   11a3e:	46c0      	nop			; (mov r8, r8)
   11a40:	0000bccd 	.word	0x0000bccd

00011a44 <routeUpdateConfcb>:
   11a44:	b570      	push	{r4, r5, r6, lr}
   11a46:	0015      	movs	r5, r2
   11a48:	4c04      	ldr	r4, [pc, #16]	; (11a5c <routeUpdateConfcb+0x18>)
   11a4a:	2008      	movs	r0, #8
   11a4c:	47a0      	blx	r4
   11a4e:	2009      	movs	r0, #9
   11a50:	47a0      	blx	r4
   11a52:	0028      	movs	r0, r5
   11a54:	4b02      	ldr	r3, [pc, #8]	; (11a60 <routeUpdateConfcb+0x1c>)
   11a56:	4798      	blx	r3
   11a58:	bd70      	pop	{r4, r5, r6, pc}
   11a5a:	46c0      	nop			; (mov r8, r8)
   11a5c:	0000a5b5 	.word	0x0000a5b5
   11a60:	0000bccd 	.word	0x0000bccd

00011a64 <routeReqConfcb>:
   11a64:	b510      	push	{r4, lr}
   11a66:	0010      	movs	r0, r2
   11a68:	4b01      	ldr	r3, [pc, #4]	; (11a70 <routeReqConfcb+0xc>)
   11a6a:	4798      	blx	r3
   11a6c:	bd10      	pop	{r4, pc}
   11a6e:	46c0      	nop			; (mov r8, r8)
   11a70:	0000bccd 	.word	0x0000bccd

00011a74 <initRouteTable>:
   11a74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   11a76:	2333      	movs	r3, #51	; 0x33
   11a78:	4c15      	ldr	r4, [pc, #84]	; (11ad0 <initRouteTable+0x5c>)
   11a7a:	6822      	ldr	r2, [r4, #0]
   11a7c:	5cd3      	ldrb	r3, [r2, r3]
   11a7e:	2b00      	cmp	r3, #0
   11a80:	d018      	beq.n	11ab4 <initRouteTable+0x40>
   11a82:	2300      	movs	r3, #0
   11a84:	27ff      	movs	r7, #255	; 0xff
   11a86:	250f      	movs	r5, #15
   11a88:	2633      	movs	r6, #51	; 0x33
   11a8a:	6892      	ldr	r2, [r2, #8]
   11a8c:	0058      	lsls	r0, r3, #1
   11a8e:	5417      	strb	r7, [r2, r0]
   11a90:	6822      	ldr	r2, [r4, #0]
   11a92:	3301      	adds	r3, #1
   11a94:	6891      	ldr	r1, [r2, #8]
   11a96:	b2db      	uxtb	r3, r3
   11a98:	1809      	adds	r1, r1, r0
   11a9a:	784a      	ldrb	r2, [r1, #1]
   11a9c:	43aa      	bics	r2, r5
   11a9e:	704a      	strb	r2, [r1, #1]
   11aa0:	6822      	ldr	r2, [r4, #0]
   11aa2:	6892      	ldr	r2, [r2, #8]
   11aa4:	1812      	adds	r2, r2, r0
   11aa6:	7851      	ldrb	r1, [r2, #1]
   11aa8:	4029      	ands	r1, r5
   11aaa:	7051      	strb	r1, [r2, #1]
   11aac:	6822      	ldr	r2, [r4, #0]
   11aae:	5d91      	ldrb	r1, [r2, r6]
   11ab0:	4299      	cmp	r1, r3
   11ab2:	d8ea      	bhi.n	11a8a <initRouteTable+0x16>
   11ab4:	2100      	movs	r1, #0
   11ab6:	68d0      	ldr	r0, [r2, #12]
   11ab8:	4b06      	ldr	r3, [pc, #24]	; (11ad4 <initRouteTable+0x60>)
   11aba:	2220      	movs	r2, #32
   11abc:	4798      	blx	r3
   11abe:	4806      	ldr	r0, [pc, #24]	; (11ad8 <initRouteTable+0x64>)
   11ac0:	4b06      	ldr	r3, [pc, #24]	; (11adc <initRouteTable+0x68>)
   11ac2:	4798      	blx	r3
   11ac4:	6823      	ldr	r3, [r4, #0]
   11ac6:	7f1a      	ldrb	r2, [r3, #28]
   11ac8:	4b05      	ldr	r3, [pc, #20]	; (11ae0 <initRouteTable+0x6c>)
   11aca:	701a      	strb	r2, [r3, #0]
   11acc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   11ace:	46c0      	nop			; (mov r8, r8)
   11ad0:	2000285c 	.word	0x2000285c
   11ad4:	00014cf1 	.word	0x00014cf1
   11ad8:	20002908 	.word	0x20002908
   11adc:	0000be01 	.word	0x0000be01
   11ae0:	20002904 	.word	0x20002904

00011ae4 <addRoute>:
   11ae4:	b5f0      	push	{r4, r5, r6, r7, lr}
   11ae6:	46ce      	mov	lr, r9
   11ae8:	4647      	mov	r7, r8
   11aea:	2533      	movs	r5, #51	; 0x33
   11aec:	b580      	push	{r7, lr}
   11aee:	4e30      	ldr	r6, [pc, #192]	; (11bb0 <addRoute+0xcc>)
   11af0:	4684      	mov	ip, r0
   11af2:	6837      	ldr	r7, [r6, #0]
   11af4:	0a04      	lsrs	r4, r0, #8
   11af6:	5d7d      	ldrb	r5, [r7, r5]
   11af8:	4699      	mov	r9, r3
   11afa:	2000      	movs	r0, #0
   11afc:	42ac      	cmp	r4, r5
   11afe:	d23c      	bcs.n	11b7a <addRoute+0x96>
   11b00:	0a09      	lsrs	r1, r1, #8
   11b02:	42a9      	cmp	r1, r5
   11b04:	d239      	bcs.n	11b7a <addRoute+0x96>
   11b06:	25ff      	movs	r5, #255	; 0xff
   11b08:	4663      	mov	r3, ip
   11b0a:	421d      	tst	r5, r3
   11b0c:	d135      	bne.n	11b7a <addRoute+0x96>
   11b0e:	1c10      	adds	r0, r2, #0
   11b10:	2a0f      	cmp	r2, #15
   11b12:	d836      	bhi.n	11b82 <addRoute+0x9e>
   11b14:	b2c2      	uxtb	r2, r0
   11b16:	2001      	movs	r0, #1
   11b18:	4020      	ands	r0, r4
   11b1a:	4684      	mov	ip, r0
   11b1c:	d137      	bne.n	11b8e <addRoute+0xaa>
   11b1e:	0863      	lsrs	r3, r4, #1
   11b20:	4698      	mov	r8, r3
   11b22:	4640      	mov	r0, r8
   11b24:	68fb      	ldr	r3, [r7, #12]
   11b26:	5c1d      	ldrb	r5, [r3, r0]
   11b28:	092d      	lsrs	r5, r5, #4
   11b2a:	2d00      	cmp	r5, #0
   11b2c:	d002      	beq.n	11b34 <addRoute+0x50>
   11b2e:	2000      	movs	r0, #0
   11b30:	42aa      	cmp	r2, r5
   11b32:	d222      	bcs.n	11b7a <addRoute+0x96>
   11b34:	4663      	mov	r3, ip
   11b36:	68b8      	ldr	r0, [r7, #8]
   11b38:	0064      	lsls	r4, r4, #1
   11b3a:	5501      	strb	r1, [r0, r4]
   11b3c:	6831      	ldr	r1, [r6, #0]
   11b3e:	68c9      	ldr	r1, [r1, #12]
   11b40:	2b00      	cmp	r3, #0
   11b42:	d02c      	beq.n	11b9e <addRoute+0xba>
   11b44:	200f      	movs	r0, #15
   11b46:	4643      	mov	r3, r8
   11b48:	4002      	ands	r2, r0
   11b4a:	0015      	movs	r5, r2
   11b4c:	5cca      	ldrb	r2, [r1, r3]
   11b4e:	4382      	bics	r2, r0
   11b50:	432a      	orrs	r2, r5
   11b52:	54ca      	strb	r2, [r1, r3]
   11b54:	6832      	ldr	r2, [r6, #0]
   11b56:	464b      	mov	r3, r9
   11b58:	6891      	ldr	r1, [r2, #8]
   11b5a:	220f      	movs	r2, #15
   11b5c:	1909      	adds	r1, r1, r4
   11b5e:	0918      	lsrs	r0, r3, #4
   11b60:	784b      	ldrb	r3, [r1, #1]
   11b62:	4393      	bics	r3, r2
   11b64:	4303      	orrs	r3, r0
   11b66:	704b      	strb	r3, [r1, #1]
   11b68:	6833      	ldr	r3, [r6, #0]
   11b6a:	2001      	movs	r0, #1
   11b6c:	689b      	ldr	r3, [r3, #8]
   11b6e:	191c      	adds	r4, r3, r4
   11b70:	7863      	ldrb	r3, [r4, #1]
   11b72:	401a      	ands	r2, r3
   11b74:	2330      	movs	r3, #48	; 0x30
   11b76:	431a      	orrs	r2, r3
   11b78:	7062      	strb	r2, [r4, #1]
   11b7a:	bc0c      	pop	{r2, r3}
   11b7c:	4690      	mov	r8, r2
   11b7e:	4699      	mov	r9, r3
   11b80:	bdf0      	pop	{r4, r5, r6, r7, pc}
   11b82:	200f      	movs	r0, #15
   11b84:	b2c2      	uxtb	r2, r0
   11b86:	2001      	movs	r0, #1
   11b88:	4020      	ands	r0, r4
   11b8a:	4684      	mov	ip, r0
   11b8c:	d0c7      	beq.n	11b1e <addRoute+0x3a>
   11b8e:	0863      	lsrs	r3, r4, #1
   11b90:	4698      	mov	r8, r3
   11b92:	4640      	mov	r0, r8
   11b94:	68fb      	ldr	r3, [r7, #12]
   11b96:	5c1d      	ldrb	r5, [r3, r0]
   11b98:	072d      	lsls	r5, r5, #28
   11b9a:	0f2d      	lsrs	r5, r5, #28
   11b9c:	e7c5      	b.n	11b2a <addRoute+0x46>
   11b9e:	4643      	mov	r3, r8
   11ba0:	0110      	lsls	r0, r2, #4
   11ba2:	220f      	movs	r2, #15
   11ba4:	5ccd      	ldrb	r5, [r1, r3]
   11ba6:	402a      	ands	r2, r5
   11ba8:	4302      	orrs	r2, r0
   11baa:	54ca      	strb	r2, [r1, r3]
   11bac:	e7d2      	b.n	11b54 <addRoute+0x70>
   11bae:	46c0      	nop			; (mov r8, r8)
   11bb0:	2000285c 	.word	0x2000285c

00011bb4 <handleRouteMessage>:
   11bb4:	b5f0      	push	{r4, r5, r6, r7, lr}
   11bb6:	4657      	mov	r7, sl
   11bb8:	46de      	mov	lr, fp
   11bba:	464e      	mov	r6, r9
   11bbc:	4645      	mov	r5, r8
   11bbe:	b5e0      	push	{r5, r6, r7, lr}
   11bc0:	b093      	sub	sp, #76	; 0x4c
   11bc2:	a91c      	add	r1, sp, #112	; 0x70
   11bc4:	780f      	ldrb	r7, [r1, #0]
   11bc6:	7851      	ldrb	r1, [r2, #1]
   11bc8:	7812      	ldrb	r2, [r2, #0]
   11bca:	468c      	mov	ip, r1
   11bcc:	0209      	lsls	r1, r1, #8
   11bce:	4311      	orrs	r1, r2
   11bd0:	781a      	ldrb	r2, [r3, #0]
   11bd2:	0004      	movs	r4, r0
   11bd4:	2a12      	cmp	r2, #18
   11bd6:	d100      	bne.n	11bda <handleRouteMessage+0x26>
   11bd8:	e149      	b.n	11e6e <handleRouteMessage+0x2ba>
   11bda:	2a13      	cmp	r2, #19
   11bdc:	d100      	bne.n	11be0 <handleRouteMessage+0x2c>
   11bde:	e07b      	b.n	11cd8 <handleRouteMessage+0x124>
   11be0:	2a11      	cmp	r2, #17
   11be2:	d008      	beq.n	11bf6 <handleRouteMessage+0x42>
   11be4:	2600      	movs	r6, #0
   11be6:	0030      	movs	r0, r6
   11be8:	b013      	add	sp, #76	; 0x4c
   11bea:	bc3c      	pop	{r2, r3, r4, r5}
   11bec:	4690      	mov	r8, r2
   11bee:	4699      	mov	r9, r3
   11bf0:	46a2      	mov	sl, r4
   11bf2:	46ab      	mov	fp, r5
   11bf4:	bdf0      	pop	{r4, r5, r6, r7, pc}
   11bf6:	785a      	ldrb	r2, [r3, #1]
   11bf8:	789b      	ldrb	r3, [r3, #2]
   11bfa:	4db6      	ldr	r5, [pc, #728]	; (11ed4 <handleRouteMessage+0x320>)
   11bfc:	4698      	mov	r8, r3
   11bfe:	021b      	lsls	r3, r3, #8
   11c00:	431a      	orrs	r2, r3
   11c02:	4691      	mov	r9, r2
   11c04:	7802      	ldrb	r2, [r0, #0]
   11c06:	003b      	movs	r3, r7
   11c08:	4252      	negs	r2, r2
   11c0a:	b2d2      	uxtb	r2, r2
   11c0c:	b289      	uxth	r1, r1
   11c0e:	88c0      	ldrh	r0, [r0, #6]
   11c10:	47a8      	blx	r5
   11c12:	2233      	movs	r2, #51	; 0x33
   11c14:	4db0      	ldr	r5, [pc, #704]	; (11ed8 <handleRouteMessage+0x324>)
   11c16:	2601      	movs	r6, #1
   11c18:	682b      	ldr	r3, [r5, #0]
   11c1a:	5c9a      	ldrb	r2, [r3, r2]
   11c1c:	4542      	cmp	r2, r8
   11c1e:	d9e2      	bls.n	11be6 <handleRouteMessage+0x32>
   11c20:	4642      	mov	r2, r8
   11c22:	4216      	tst	r6, r2
   11c24:	d000      	beq.n	11c28 <handleRouteMessage+0x74>
   11c26:	e145      	b.n	11eb4 <handleRouteMessage+0x300>
   11c28:	4642      	mov	r2, r8
   11c2a:	68db      	ldr	r3, [r3, #12]
   11c2c:	0852      	lsrs	r2, r2, #1
   11c2e:	5c9f      	ldrb	r7, [r3, r2]
   11c30:	093b      	lsrs	r3, r7, #4
   11c32:	469b      	mov	fp, r3
   11c34:	4ba9      	ldr	r3, [pc, #676]	; (11edc <handleRouteMessage+0x328>)
   11c36:	469a      	mov	sl, r3
   11c38:	881b      	ldrh	r3, [r3, #0]
   11c3a:	4599      	cmp	r9, r3
   11c3c:	d003      	beq.n	11c46 <handleRouteMessage+0x92>
   11c3e:	465b      	mov	r3, fp
   11c40:	2601      	movs	r6, #1
   11c42:	2b00      	cmp	r3, #0
   11c44:	d0cf      	beq.n	11be6 <handleRouteMessage+0x32>
   11c46:	88e3      	ldrh	r3, [r4, #6]
   11c48:	2088      	movs	r0, #136	; 0x88
   11c4a:	4699      	mov	r9, r3
   11c4c:	4ba4      	ldr	r3, [pc, #656]	; (11ee0 <handleRouteMessage+0x32c>)
   11c4e:	4798      	blx	r3
   11c50:	1e06      	subs	r6, r0, #0
   11c52:	d0c7      	beq.n	11be4 <handleRouteMessage+0x30>
   11c54:	4653      	mov	r3, sl
   11c56:	8819      	ldrh	r1, [r3, #0]
   11c58:	ac0a      	add	r4, sp, #40	; 0x28
   11c5a:	b289      	uxth	r1, r1
   11c5c:	0023      	movs	r3, r4
   11c5e:	464a      	mov	r2, r9
   11c60:	20ff      	movs	r0, #255	; 0xff
   11c62:	4fa0      	ldr	r7, [pc, #640]	; (11ee4 <handleRouteMessage+0x330>)
   11c64:	47b8      	blx	r7
   11c66:	2210      	movs	r2, #16
   11c68:	7863      	ldrb	r3, [r4, #1]
   11c6a:	0031      	movs	r1, r6
   11c6c:	4393      	bics	r3, r2
   11c6e:	7063      	strb	r3, [r4, #1]
   11c70:	0020      	movs	r0, r4
   11c72:	4b9d      	ldr	r3, [pc, #628]	; (11ee8 <handleRouteMessage+0x334>)
   11c74:	4798      	blx	r3
   11c76:	2312      	movs	r3, #18
   11c78:	2200      	movs	r2, #0
   11c7a:	5433      	strb	r3, [r6, r0]
   11c7c:	1c43      	adds	r3, r0, #1
   11c7e:	b2db      	uxtb	r3, r3
   11c80:	54f2      	strb	r2, [r6, r3]
   11c82:	4642      	mov	r2, r8
   11c84:	1c83      	adds	r3, r0, #2
   11c86:	b2db      	uxtb	r3, r3
   11c88:	54f2      	strb	r2, [r6, r3]
   11c8a:	465a      	mov	r2, fp
   11c8c:	1cc3      	adds	r3, r0, #3
   11c8e:	0001      	movs	r1, r0
   11c90:	2033      	movs	r0, #51	; 0x33
   11c92:	b2db      	uxtb	r3, r3
   11c94:	54f2      	strb	r2, [r6, r3]
   11c96:	464b      	mov	r3, r9
   11c98:	682a      	ldr	r2, [r5, #0]
   11c9a:	0a1b      	lsrs	r3, r3, #8
   11c9c:	5c10      	ldrb	r0, [r2, r0]
   11c9e:	4298      	cmp	r0, r3
   11ca0:	d800      	bhi.n	11ca4 <handleRouteMessage+0xf0>
   11ca2:	e10e      	b.n	11ec2 <handleRouteMessage+0x30e>
   11ca4:	6892      	ldr	r2, [r2, #8]
   11ca6:	005b      	lsls	r3, r3, #1
   11ca8:	5c9b      	ldrb	r3, [r3, r2]
   11caa:	2bff      	cmp	r3, #255	; 0xff
   11cac:	d100      	bne.n	11cb0 <handleRouteMessage+0xfc>
   11cae:	e108      	b.n	11ec2 <handleRouteMessage+0x30e>
   11cb0:	021b      	lsls	r3, r3, #8
   11cb2:	a804      	add	r0, sp, #16
   11cb4:	4684      	mov	ip, r0
   11cb6:	2216      	movs	r2, #22
   11cb8:	4462      	add	r2, ip
   11cba:	8013      	strh	r3, [r2, #0]
   11cbc:	4b8b      	ldr	r3, [pc, #556]	; (11eec <handleRouteMessage+0x338>)
   11cbe:	9201      	str	r2, [sp, #4]
   11cc0:	9303      	str	r3, [sp, #12]
   11cc2:	2300      	movs	r3, #0
   11cc4:	9302      	str	r3, [sp, #8]
   11cc6:	3302      	adds	r3, #2
   11cc8:	9300      	str	r3, [sp, #0]
   11cca:	0020      	movs	r0, r4
   11ccc:	0033      	movs	r3, r6
   11cce:	2204      	movs	r2, #4
   11cd0:	4c87      	ldr	r4, [pc, #540]	; (11ef0 <handleRouteMessage+0x33c>)
   11cd2:	47a0      	blx	r4
   11cd4:	2600      	movs	r6, #0
   11cd6:	e786      	b.n	11be6 <handleRouteMessage+0x32>
   11cd8:	4a86      	ldr	r2, [pc, #536]	; (11ef4 <handleRouteMessage+0x340>)
   11cda:	7816      	ldrb	r6, [r2, #0]
   11cdc:	2e00      	cmp	r6, #0
   11cde:	d000      	beq.n	11ce2 <handleRouteMessage+0x12e>
   11ce0:	e780      	b.n	11be4 <handleRouteMessage+0x30>
   11ce2:	785a      	ldrb	r2, [r3, #1]
   11ce4:	1c9c      	adds	r4, r3, #2
   11ce6:	4693      	mov	fp, r2
   11ce8:	2a00      	cmp	r2, #0
   11cea:	d100      	bne.n	11cee <handleRouteMessage+0x13a>
   11cec:	e0eb      	b.n	11ec6 <handleRouteMessage+0x312>
   11cee:	4d7a      	ldr	r5, [pc, #488]	; (11ed8 <handleRouteMessage+0x324>)
   11cf0:	200f      	movs	r0, #15
   11cf2:	682b      	ldr	r3, [r5, #0]
   11cf4:	9607      	str	r6, [sp, #28]
   11cf6:	68db      	ldr	r3, [r3, #12]
   11cf8:	4698      	mov	r8, r3
   11cfa:	093b      	lsrs	r3, r7, #4
   11cfc:	001a      	movs	r2, r3
   11cfe:	2702      	movs	r7, #2
   11d00:	9306      	str	r3, [sp, #24]
   11d02:	4646      	mov	r6, r8
   11d04:	2300      	movs	r3, #0
   11d06:	4002      	ands	r2, r0
   11d08:	9205      	str	r2, [sp, #20]
   11d0a:	9704      	str	r7, [sp, #16]
   11d0c:	7822      	ldrb	r2, [r4, #0]
   11d0e:	0011      	movs	r1, r2
   11d10:	4381      	bics	r1, r0
   11d12:	d02d      	beq.n	11d70 <handleRouteMessage+0x1bc>
   11d14:	0911      	lsrs	r1, r2, #4
   11d16:	3101      	adds	r1, #1
   11d18:	2910      	cmp	r1, #16
   11d1a:	d100      	bne.n	11d1e <handleRouteMessage+0x16a>
   11d1c:	3901      	subs	r1, #1
   11d1e:	18f7      	adds	r7, r6, r3
   11d20:	46b8      	mov	r8, r7
   11d22:	783f      	ldrb	r7, [r7, #0]
   11d24:	46b9      	mov	r9, r7
   11d26:	4387      	bics	r7, r0
   11d28:	d003      	beq.n	11d32 <handleRouteMessage+0x17e>
   11d2a:	464f      	mov	r7, r9
   11d2c:	093f      	lsrs	r7, r7, #4
   11d2e:	42b9      	cmp	r1, r7
   11d30:	da1e      	bge.n	11d70 <handleRouteMessage+0x1bc>
   11d32:	4642      	mov	r2, r8
   11d34:	7812      	ldrb	r2, [r2, #0]
   11d36:	0109      	lsls	r1, r1, #4
   11d38:	4002      	ands	r2, r0
   11d3a:	4311      	orrs	r1, r2
   11d3c:	4642      	mov	r2, r8
   11d3e:	4666      	mov	r6, ip
   11d40:	7011      	strb	r1, [r2, #0]
   11d42:	6829      	ldr	r1, [r5, #0]
   11d44:	009a      	lsls	r2, r3, #2
   11d46:	6889      	ldr	r1, [r1, #8]
   11d48:	9f05      	ldr	r7, [sp, #20]
   11d4a:	548e      	strb	r6, [r1, r2]
   11d4c:	6829      	ldr	r1, [r5, #0]
   11d4e:	688e      	ldr	r6, [r1, #8]
   11d50:	18b6      	adds	r6, r6, r2
   11d52:	7871      	ldrb	r1, [r6, #1]
   11d54:	4381      	bics	r1, r0
   11d56:	4339      	orrs	r1, r7
   11d58:	7071      	strb	r1, [r6, #1]
   11d5a:	2630      	movs	r6, #48	; 0x30
   11d5c:	6829      	ldr	r1, [r5, #0]
   11d5e:	6889      	ldr	r1, [r1, #8]
   11d60:	188a      	adds	r2, r1, r2
   11d62:	7851      	ldrb	r1, [r2, #1]
   11d64:	4001      	ands	r1, r0
   11d66:	4331      	orrs	r1, r6
   11d68:	7051      	strb	r1, [r2, #1]
   11d6a:	6829      	ldr	r1, [r5, #0]
   11d6c:	7822      	ldrb	r2, [r4, #0]
   11d6e:	68ce      	ldr	r6, [r1, #12]
   11d70:	4210      	tst	r0, r2
   11d72:	d02a      	beq.n	11dca <handleRouteMessage+0x216>
   11d74:	0712      	lsls	r2, r2, #28
   11d76:	0f12      	lsrs	r2, r2, #28
   11d78:	3201      	adds	r2, #1
   11d7a:	2a10      	cmp	r2, #16
   11d7c:	d100      	bne.n	11d80 <handleRouteMessage+0x1cc>
   11d7e:	3a01      	subs	r2, #1
   11d80:	18f1      	adds	r1, r6, r3
   11d82:	780f      	ldrb	r7, [r1, #0]
   11d84:	4238      	tst	r0, r7
   11d86:	d003      	beq.n	11d90 <handleRouteMessage+0x1dc>
   11d88:	073f      	lsls	r7, r7, #28
   11d8a:	0f3f      	lsrs	r7, r7, #28
   11d8c:	42ba      	cmp	r2, r7
   11d8e:	da1c      	bge.n	11dca <handleRouteMessage+0x216>
   11d90:	780e      	ldrb	r6, [r1, #0]
   11d92:	4002      	ands	r2, r0
   11d94:	4386      	bics	r6, r0
   11d96:	4332      	orrs	r2, r6
   11d98:	700a      	strb	r2, [r1, #0]
   11d9a:	4661      	mov	r1, ip
   11d9c:	9f04      	ldr	r7, [sp, #16]
   11d9e:	682a      	ldr	r2, [r5, #0]
   11da0:	46b8      	mov	r8, r7
   11da2:	6892      	ldr	r2, [r2, #8]
   11da4:	9e05      	ldr	r6, [sp, #20]
   11da6:	55d1      	strb	r1, [r2, r7]
   11da8:	682a      	ldr	r2, [r5, #0]
   11daa:	6891      	ldr	r1, [r2, #8]
   11dac:	4441      	add	r1, r8
   11dae:	784a      	ldrb	r2, [r1, #1]
   11db0:	4382      	bics	r2, r0
   11db2:	4332      	orrs	r2, r6
   11db4:	2630      	movs	r6, #48	; 0x30
   11db6:	704a      	strb	r2, [r1, #1]
   11db8:	682a      	ldr	r2, [r5, #0]
   11dba:	6891      	ldr	r1, [r2, #8]
   11dbc:	4441      	add	r1, r8
   11dbe:	784a      	ldrb	r2, [r1, #1]
   11dc0:	4002      	ands	r2, r0
   11dc2:	4332      	orrs	r2, r6
   11dc4:	704a      	strb	r2, [r1, #1]
   11dc6:	682a      	ldr	r2, [r5, #0]
   11dc8:	68d6      	ldr	r6, [r2, #12]
   11dca:	9a04      	ldr	r2, [sp, #16]
   11dcc:	3301      	adds	r3, #1
   11dce:	3204      	adds	r2, #4
   11dd0:	9204      	str	r2, [sp, #16]
   11dd2:	b2da      	uxtb	r2, r3
   11dd4:	3401      	adds	r4, #1
   11dd6:	4593      	cmp	fp, r2
   11dd8:	d898      	bhi.n	11d0c <handleRouteMessage+0x158>
   11dda:	46b0      	mov	r8, r6
   11ddc:	9e07      	ldr	r6, [sp, #28]
   11dde:	4663      	mov	r3, ip
   11de0:	07db      	lsls	r3, r3, #31
   11de2:	d556      	bpl.n	11e92 <handleRouteMessage+0x2de>
   11de4:	4663      	mov	r3, ip
   11de6:	085a      	lsrs	r2, r3, #1
   11de8:	4643      	mov	r3, r8
   11dea:	210f      	movs	r1, #15
   11dec:	5c9b      	ldrb	r3, [r3, r2]
   11dee:	438b      	bics	r3, r1
   11df0:	2101      	movs	r1, #1
   11df2:	430b      	orrs	r3, r1
   11df4:	4641      	mov	r1, r8
   11df6:	548b      	strb	r3, [r1, r2]
   11df8:	4663      	mov	r3, ip
   11dfa:	4662      	mov	r2, ip
   11dfc:	210f      	movs	r1, #15
   11dfe:	005c      	lsls	r4, r3, #1
   11e00:	682b      	ldr	r3, [r5, #0]
   11e02:	689b      	ldr	r3, [r3, #8]
   11e04:	551a      	strb	r2, [r3, r4]
   11e06:	682b      	ldr	r3, [r5, #0]
   11e08:	9a06      	ldr	r2, [sp, #24]
   11e0a:	6898      	ldr	r0, [r3, #8]
   11e0c:	1900      	adds	r0, r0, r4
   11e0e:	7843      	ldrb	r3, [r0, #1]
   11e10:	438b      	bics	r3, r1
   11e12:	4313      	orrs	r3, r2
   11e14:	7043      	strb	r3, [r0, #1]
   11e16:	2030      	movs	r0, #48	; 0x30
   11e18:	682b      	ldr	r3, [r5, #0]
   11e1a:	689a      	ldr	r2, [r3, #8]
   11e1c:	1912      	adds	r2, r2, r4
   11e1e:	7853      	ldrb	r3, [r2, #1]
   11e20:	400b      	ands	r3, r1
   11e22:	4303      	orrs	r3, r0
   11e24:	7053      	strb	r3, [r2, #1]
   11e26:	4b2d      	ldr	r3, [pc, #180]	; (11edc <handleRouteMessage+0x328>)
   11e28:	6828      	ldr	r0, [r5, #0]
   11e2a:	881b      	ldrh	r3, [r3, #0]
   11e2c:	6884      	ldr	r4, [r0, #8]
   11e2e:	0a1b      	lsrs	r3, r3, #8
   11e30:	b2da      	uxtb	r2, r3
   11e32:	005b      	lsls	r3, r3, #1
   11e34:	5ce4      	ldrb	r4, [r4, r3]
   11e36:	2cff      	cmp	r4, #255	; 0xff
   11e38:	d100      	bne.n	11e3c <handleRouteMessage+0x288>
   11e3a:	e6d3      	b.n	11be4 <handleRouteMessage+0x30>
   11e3c:	07d4      	lsls	r4, r2, #31
   11e3e:	d533      	bpl.n	11ea8 <handleRouteMessage+0x2f4>
   11e40:	68c4      	ldr	r4, [r0, #12]
   11e42:	0852      	lsrs	r2, r2, #1
   11e44:	5ca0      	ldrb	r0, [r4, r2]
   11e46:	4388      	bics	r0, r1
   11e48:	54a0      	strb	r0, [r4, r2]
   11e4a:	21ff      	movs	r1, #255	; 0xff
   11e4c:	682a      	ldr	r2, [r5, #0]
   11e4e:	6892      	ldr	r2, [r2, #8]
   11e50:	54d1      	strb	r1, [r2, r3]
   11e52:	682a      	ldr	r2, [r5, #0]
   11e54:	39f0      	subs	r1, #240	; 0xf0
   11e56:	6892      	ldr	r2, [r2, #8]
   11e58:	18d2      	adds	r2, r2, r3
   11e5a:	7850      	ldrb	r0, [r2, #1]
   11e5c:	4388      	bics	r0, r1
   11e5e:	7050      	strb	r0, [r2, #1]
   11e60:	682a      	ldr	r2, [r5, #0]
   11e62:	6892      	ldr	r2, [r2, #8]
   11e64:	18d3      	adds	r3, r2, r3
   11e66:	785a      	ldrb	r2, [r3, #1]
   11e68:	4011      	ands	r1, r2
   11e6a:	7059      	strb	r1, [r3, #1]
   11e6c:	e6bb      	b.n	11be6 <handleRouteMessage+0x32>
   11e6e:	4a21      	ldr	r2, [pc, #132]	; (11ef4 <handleRouteMessage+0x340>)
   11e70:	7816      	ldrb	r6, [r2, #0]
   11e72:	2e00      	cmp	r6, #0
   11e74:	d000      	beq.n	11e78 <handleRouteMessage+0x2c4>
   11e76:	e6b5      	b.n	11be4 <handleRouteMessage+0x30>
   11e78:	7858      	ldrb	r0, [r3, #1]
   11e7a:	789d      	ldrb	r5, [r3, #2]
   11e7c:	78da      	ldrb	r2, [r3, #3]
   11e7e:	7823      	ldrb	r3, [r4, #0]
   11e80:	022d      	lsls	r5, r5, #8
   11e82:	1ad2      	subs	r2, r2, r3
   11e84:	b2d2      	uxtb	r2, r2
   11e86:	b289      	uxth	r1, r1
   11e88:	4328      	orrs	r0, r5
   11e8a:	003b      	movs	r3, r7
   11e8c:	4c11      	ldr	r4, [pc, #68]	; (11ed4 <handleRouteMessage+0x320>)
   11e8e:	47a0      	blx	r4
   11e90:	e6a9      	b.n	11be6 <handleRouteMessage+0x32>
   11e92:	4663      	mov	r3, ip
   11e94:	085a      	lsrs	r2, r3, #1
   11e96:	4643      	mov	r3, r8
   11e98:	5c99      	ldrb	r1, [r3, r2]
   11e9a:	230f      	movs	r3, #15
   11e9c:	400b      	ands	r3, r1
   11e9e:	2110      	movs	r1, #16
   11ea0:	430b      	orrs	r3, r1
   11ea2:	4641      	mov	r1, r8
   11ea4:	548b      	strb	r3, [r1, r2]
   11ea6:	e7a7      	b.n	11df8 <handleRouteMessage+0x244>
   11ea8:	68c0      	ldr	r0, [r0, #12]
   11eaa:	0852      	lsrs	r2, r2, #1
   11eac:	5c84      	ldrb	r4, [r0, r2]
   11eae:	4021      	ands	r1, r4
   11eb0:	5481      	strb	r1, [r0, r2]
   11eb2:	e7ca      	b.n	11e4a <handleRouteMessage+0x296>
   11eb4:	68db      	ldr	r3, [r3, #12]
   11eb6:	0852      	lsrs	r2, r2, #1
   11eb8:	5c9f      	ldrb	r7, [r3, r2]
   11eba:	073f      	lsls	r7, r7, #28
   11ebc:	0f3b      	lsrs	r3, r7, #28
   11ebe:	469b      	mov	fp, r3
   11ec0:	e6b8      	b.n	11c34 <handleRouteMessage+0x80>
   11ec2:	4b0d      	ldr	r3, [pc, #52]	; (11ef8 <handleRouteMessage+0x344>)
   11ec4:	e6f5      	b.n	11cb2 <handleRouteMessage+0xfe>
   11ec6:	4d04      	ldr	r5, [pc, #16]	; (11ed8 <handleRouteMessage+0x324>)
   11ec8:	093b      	lsrs	r3, r7, #4
   11eca:	9306      	str	r3, [sp, #24]
   11ecc:	682b      	ldr	r3, [r5, #0]
   11ece:	68db      	ldr	r3, [r3, #12]
   11ed0:	4698      	mov	r8, r3
   11ed2:	e784      	b.n	11dde <handleRouteMessage+0x22a>
   11ed4:	00011ae5 	.word	0x00011ae5
   11ed8:	2000285c 	.word	0x2000285c
   11edc:	200028b8 	.word	0x200028b8
   11ee0:	0000bc11 	.word	0x0000bc11
   11ee4:	0000f029 	.word	0x0000f029
   11ee8:	0000f079 	.word	0x0000f079
   11eec:	00011a35 	.word	0x00011a35
   11ef0:	0000f105 	.word	0x0000f105
   11ef4:	20001d1c 	.word	0x20001d1c
   11ef8:	0000ffff 	.word	0x0000ffff

00011efc <removeRoute>:
   11efc:	b530      	push	{r4, r5, lr}
   11efe:	4a18      	ldr	r2, [pc, #96]	; (11f60 <removeRoute+0x64>)
   11f00:	7812      	ldrb	r2, [r2, #0]
   11f02:	2a00      	cmp	r2, #0
   11f04:	d122      	bne.n	11f4c <removeRoute+0x50>
   11f06:	0a03      	lsrs	r3, r0, #8
   11f08:	2033      	movs	r0, #51	; 0x33
   11f0a:	4c16      	ldr	r4, [pc, #88]	; (11f64 <removeRoute+0x68>)
   11f0c:	6821      	ldr	r1, [r4, #0]
   11f0e:	5c08      	ldrb	r0, [r1, r0]
   11f10:	4298      	cmp	r0, r3
   11f12:	d919      	bls.n	11f48 <removeRoute+0x4c>
   11f14:	20ff      	movs	r0, #255	; 0xff
   11f16:	6889      	ldr	r1, [r1, #8]
   11f18:	005a      	lsls	r2, r3, #1
   11f1a:	5488      	strb	r0, [r1, r2]
   11f1c:	6821      	ldr	r1, [r4, #0]
   11f1e:	6888      	ldr	r0, [r1, #8]
   11f20:	210f      	movs	r1, #15
   11f22:	1880      	adds	r0, r0, r2
   11f24:	7845      	ldrb	r5, [r0, #1]
   11f26:	438d      	bics	r5, r1
   11f28:	7045      	strb	r5, [r0, #1]
   11f2a:	6820      	ldr	r0, [r4, #0]
   11f2c:	6880      	ldr	r0, [r0, #8]
   11f2e:	1882      	adds	r2, r0, r2
   11f30:	7850      	ldrb	r0, [r2, #1]
   11f32:	4008      	ands	r0, r1
   11f34:	7050      	strb	r0, [r2, #1]
   11f36:	07da      	lsls	r2, r3, #31
   11f38:	d40a      	bmi.n	11f50 <removeRoute+0x54>
   11f3a:	6822      	ldr	r2, [r4, #0]
   11f3c:	085b      	lsrs	r3, r3, #1
   11f3e:	68d2      	ldr	r2, [r2, #12]
   11f40:	5cd0      	ldrb	r0, [r2, r3]
   11f42:	4001      	ands	r1, r0
   11f44:	54d1      	strb	r1, [r2, r3]
   11f46:	2201      	movs	r2, #1
   11f48:	0010      	movs	r0, r2
   11f4a:	bd30      	pop	{r4, r5, pc}
   11f4c:	2200      	movs	r2, #0
   11f4e:	e7fb      	b.n	11f48 <removeRoute+0x4c>
   11f50:	6822      	ldr	r2, [r4, #0]
   11f52:	085b      	lsrs	r3, r3, #1
   11f54:	68d0      	ldr	r0, [r2, #12]
   11f56:	5cc2      	ldrb	r2, [r0, r3]
   11f58:	438a      	bics	r2, r1
   11f5a:	54c2      	strb	r2, [r0, r3]
   11f5c:	2201      	movs	r2, #1
   11f5e:	e7f3      	b.n	11f48 <removeRoute+0x4c>
   11f60:	20001d1c 	.word	0x20001d1c
   11f64:	2000285c 	.word	0x2000285c

00011f68 <getNextHopAddr>:
   11f68:	2233      	movs	r2, #51	; 0x33
   11f6a:	4b07      	ldr	r3, [pc, #28]	; (11f88 <getNextHopAddr+0x20>)
   11f6c:	0a00      	lsrs	r0, r0, #8
   11f6e:	681b      	ldr	r3, [r3, #0]
   11f70:	5c9a      	ldrb	r2, [r3, r2]
   11f72:	4282      	cmp	r2, r0
   11f74:	d801      	bhi.n	11f7a <getNextHopAddr+0x12>
   11f76:	4805      	ldr	r0, [pc, #20]	; (11f8c <getNextHopAddr+0x24>)
   11f78:	4770      	bx	lr
   11f7a:	689b      	ldr	r3, [r3, #8]
   11f7c:	0040      	lsls	r0, r0, #1
   11f7e:	5cc0      	ldrb	r0, [r0, r3]
   11f80:	28ff      	cmp	r0, #255	; 0xff
   11f82:	d0f8      	beq.n	11f76 <getNextHopAddr+0xe>
   11f84:	0200      	lsls	r0, r0, #8
   11f86:	e7f7      	b.n	11f78 <getNextHopAddr+0x10>
   11f88:	2000285c 	.word	0x2000285c
   11f8c:	0000ffff 	.word	0x0000ffff

00011f90 <routeTimerHandler>:
   11f90:	b5f0      	push	{r4, r5, r6, r7, lr}
   11f92:	464e      	mov	r6, r9
   11f94:	46de      	mov	lr, fp
   11f96:	4657      	mov	r7, sl
   11f98:	4645      	mov	r5, r8
   11f9a:	b5e0      	push	{r5, r6, r7, lr}
   11f9c:	4e70      	ldr	r6, [pc, #448]	; (12160 <routeTimerHandler+0x1d0>)
   11f9e:	b08f      	sub	sp, #60	; 0x3c
   11fa0:	7a33      	ldrb	r3, [r6, #8]
   11fa2:	2b00      	cmp	r3, #0
   11fa4:	d050      	beq.n	12048 <routeTimerHandler+0xb8>
   11fa6:	4b6f      	ldr	r3, [pc, #444]	; (12164 <routeTimerHandler+0x1d4>)
   11fa8:	2500      	movs	r5, #0
   11faa:	4698      	mov	r8, r3
   11fac:	4b6e      	ldr	r3, [pc, #440]	; (12168 <routeTimerHandler+0x1d8>)
   11fae:	4f6f      	ldr	r7, [pc, #444]	; (1216c <routeTimerHandler+0x1dc>)
   11fb0:	4699      	mov	r9, r3
   11fb2:	4b6f      	ldr	r3, [pc, #444]	; (12170 <routeTimerHandler+0x1e0>)
   11fb4:	469a      	mov	sl, r3
   11fb6:	e032      	b.n	1201e <routeTimerHandler+0x8e>
   11fb8:	464b      	mov	r3, r9
   11fba:	681a      	ldr	r2, [r3, #0]
   11fbc:	2333      	movs	r3, #51	; 0x33
   11fbe:	8b81      	ldrh	r1, [r0, #28]
   11fc0:	5cd0      	ldrb	r0, [r2, r3]
   11fc2:	0a0b      	lsrs	r3, r1, #8
   11fc4:	4298      	cmp	r0, r3
   11fc6:	d94f      	bls.n	12068 <routeTimerHandler+0xd8>
   11fc8:	6892      	ldr	r2, [r2, #8]
   11fca:	005b      	lsls	r3, r3, #1
   11fcc:	5c9b      	ldrb	r3, [r3, r2]
   11fce:	2bff      	cmp	r3, #255	; 0xff
   11fd0:	d04a      	beq.n	12068 <routeTimerHandler+0xd8>
   11fd2:	021b      	lsls	r3, r3, #8
   11fd4:	469b      	mov	fp, r3
   11fd6:	2310      	movs	r3, #16
   11fd8:	7e62      	ldrb	r2, [r4, #25]
   11fda:	4013      	ands	r3, r2
   11fdc:	d04e      	beq.n	1207c <routeTimerHandler+0xec>
   11fde:	3001      	adds	r0, #1
   11fe0:	4b64      	ldr	r3, [pc, #400]	; (12174 <routeTimerHandler+0x1e4>)
   11fe2:	b2c0      	uxtb	r0, r0
   11fe4:	4798      	blx	r3
   11fe6:	464a      	mov	r2, r9
   11fe8:	233e      	movs	r3, #62	; 0x3e
   11fea:	6812      	ldr	r2, [r2, #0]
   11fec:	7420      	strb	r0, [r4, #16]
   11fee:	5cd3      	ldrb	r3, [r2, r3]
   11ff0:	4659      	mov	r1, fp
   11ff2:	3301      	adds	r3, #1
   11ff4:	7463      	strb	r3, [r4, #17]
   11ff6:	465b      	mov	r3, fp
   11ff8:	4a5f      	ldr	r2, [pc, #380]	; (12178 <routeTimerHandler+0x1e8>)
   11ffa:	81a3      	strh	r3, [r4, #12]
   11ffc:	0020      	movs	r0, r4
   11ffe:	4b5f      	ldr	r3, [pc, #380]	; (1217c <routeTimerHandler+0x1ec>)
   12000:	4798      	blx	r3
   12002:	2800      	cmp	r0, #0
   12004:	d102      	bne.n	1200c <routeTimerHandler+0x7c>
   12006:	7c63      	ldrb	r3, [r4, #17]
   12008:	3b01      	subs	r3, #1
   1200a:	7463      	strb	r3, [r4, #17]
   1200c:	0021      	movs	r1, r4
   1200e:	485c      	ldr	r0, [pc, #368]	; (12180 <routeTimerHandler+0x1f0>)
   12010:	4b54      	ldr	r3, [pc, #336]	; (12164 <routeTimerHandler+0x1d4>)
   12012:	4798      	blx	r3
   12014:	3501      	adds	r5, #1
   12016:	7a33      	ldrb	r3, [r6, #8]
   12018:	b2ed      	uxtb	r5, r5
   1201a:	42ab      	cmp	r3, r5
   1201c:	d914      	bls.n	12048 <routeTimerHandler+0xb8>
   1201e:	2100      	movs	r1, #0
   12020:	0030      	movs	r0, r6
   12022:	47b8      	blx	r7
   12024:	1e04      	subs	r4, r0, #0
   12026:	d018      	beq.n	1205a <routeTimerHandler+0xca>
   12028:	7c03      	ldrb	r3, [r0, #16]
   1202a:	2b00      	cmp	r3, #0
   1202c:	d004      	beq.n	12038 <routeTimerHandler+0xa8>
   1202e:	3b01      	subs	r3, #1
   12030:	b2db      	uxtb	r3, r3
   12032:	7403      	strb	r3, [r0, #16]
   12034:	2b00      	cmp	r3, #0
   12036:	d0bf      	beq.n	11fb8 <routeTimerHandler+0x28>
   12038:	0021      	movs	r1, r4
   1203a:	0030      	movs	r0, r6
   1203c:	47c0      	blx	r8
   1203e:	3501      	adds	r5, #1
   12040:	7a33      	ldrb	r3, [r6, #8]
   12042:	b2ed      	uxtb	r5, r5
   12044:	42ab      	cmp	r3, r5
   12046:	d8ea      	bhi.n	1201e <routeTimerHandler+0x8e>
   12048:	4b4e      	ldr	r3, [pc, #312]	; (12184 <routeTimerHandler+0x1f4>)
   1204a:	781a      	ldrb	r2, [r3, #0]
   1204c:	2a00      	cmp	r2, #0
   1204e:	d004      	beq.n	1205a <routeTimerHandler+0xca>
   12050:	3a01      	subs	r2, #1
   12052:	b2d2      	uxtb	r2, r2
   12054:	701a      	strb	r2, [r3, #0]
   12056:	2a00      	cmp	r2, #0
   12058:	d023      	beq.n	120a2 <routeTimerHandler+0x112>
   1205a:	b00f      	add	sp, #60	; 0x3c
   1205c:	bc3c      	pop	{r2, r3, r4, r5}
   1205e:	4690      	mov	r8, r2
   12060:	4699      	mov	r9, r3
   12062:	46a2      	mov	sl, r4
   12064:	46ab      	mov	fp, r5
   12066:	bdf0      	pop	{r4, r5, r6, r7, pc}
   12068:	68a3      	ldr	r3, [r4, #8]
   1206a:	2b00      	cmp	r3, #0
   1206c:	d0d2      	beq.n	12014 <routeTimerHandler+0x84>
   1206e:	7ca0      	ldrb	r0, [r4, #18]
   12070:	0022      	movs	r2, r4
   12072:	2107      	movs	r1, #7
   12074:	4798      	blx	r3
   12076:	0020      	movs	r0, r4
   12078:	47d0      	blx	sl
   1207a:	e7cb      	b.n	12014 <routeTimerHandler+0x84>
   1207c:	7463      	strb	r3, [r4, #17]
   1207e:	68a2      	ldr	r2, [r4, #8]
   12080:	4659      	mov	r1, fp
   12082:	0020      	movs	r0, r4
   12084:	4b3d      	ldr	r3, [pc, #244]	; (1217c <routeTimerHandler+0x1ec>)
   12086:	4798      	blx	r3
   12088:	2800      	cmp	r0, #0
   1208a:	d106      	bne.n	1209a <routeTimerHandler+0x10a>
   1208c:	68a3      	ldr	r3, [r4, #8]
   1208e:	2b00      	cmp	r3, #0
   12090:	d003      	beq.n	1209a <routeTimerHandler+0x10a>
   12092:	7ca0      	ldrb	r0, [r4, #18]
   12094:	0022      	movs	r2, r4
   12096:	2101      	movs	r1, #1
   12098:	4798      	blx	r3
   1209a:	0020      	movs	r0, r4
   1209c:	4b34      	ldr	r3, [pc, #208]	; (12170 <routeTimerHandler+0x1e0>)
   1209e:	4798      	blx	r3
   120a0:	e7b8      	b.n	12014 <routeTimerHandler+0x84>
   120a2:	4931      	ldr	r1, [pc, #196]	; (12168 <routeTimerHandler+0x1d8>)
   120a4:	4689      	mov	r9, r1
   120a6:	6809      	ldr	r1, [r1, #0]
   120a8:	7f08      	ldrb	r0, [r1, #28]
   120aa:	7018      	strb	r0, [r3, #0]
   120ac:	2333      	movs	r3, #51	; 0x33
   120ae:	5cce      	ldrb	r6, [r1, r3]
   120b0:	2e00      	cmp	r6, #0
   120b2:	d0d2      	beq.n	1205a <routeTimerHandler+0xca>
   120b4:	3601      	adds	r6, #1
   120b6:	6889      	ldr	r1, [r1, #8]
   120b8:	b2f6      	uxtb	r6, r6
   120ba:	3b32      	subs	r3, #50	; 0x32
   120bc:	e005      	b.n	120ca <routeTimerHandler+0x13a>
   120be:	3301      	adds	r3, #1
   120c0:	b2db      	uxtb	r3, r3
   120c2:	b2c2      	uxtb	r2, r0
   120c4:	3102      	adds	r1, #2
   120c6:	429e      	cmp	r6, r3
   120c8:	d00a      	beq.n	120e0 <routeTimerHandler+0x150>
   120ca:	780c      	ldrb	r4, [r1, #0]
   120cc:	1c18      	adds	r0, r3, #0
   120ce:	2cff      	cmp	r4, #255	; 0xff
   120d0:	d1f5      	bne.n	120be <routeTimerHandler+0x12e>
   120d2:	3301      	adds	r3, #1
   120d4:	1c10      	adds	r0, r2, #0
   120d6:	b2db      	uxtb	r3, r3
   120d8:	b2c2      	uxtb	r2, r0
   120da:	3102      	adds	r1, #2
   120dc:	429e      	cmp	r6, r3
   120de:	d1f4      	bne.n	120ca <routeTimerHandler+0x13a>
   120e0:	2a00      	cmp	r2, #0
   120e2:	d0ba      	beq.n	1205a <routeTimerHandler+0xca>
   120e4:	0854      	lsrs	r4, r2, #1
   120e6:	07d3      	lsls	r3, r2, #31
   120e8:	d501      	bpl.n	120ee <routeTimerHandler+0x15e>
   120ea:	0852      	lsrs	r2, r2, #1
   120ec:	1c54      	adds	r4, r2, #1
   120ee:	2616      	movs	r6, #22
   120f0:	2303      	movs	r3, #3
   120f2:	446e      	add	r6, sp
   120f4:	425b      	negs	r3, r3
   120f6:	8033      	strh	r3, [r6, #0]
   120f8:	2088      	movs	r0, #136	; 0x88
   120fa:	4b23      	ldr	r3, [pc, #140]	; (12188 <routeTimerHandler+0x1f8>)
   120fc:	4798      	blx	r3
   120fe:	1e07      	subs	r7, r0, #0
   12100:	d0ab      	beq.n	1205a <routeTimerHandler+0xca>
   12102:	4b22      	ldr	r3, [pc, #136]	; (1218c <routeTimerHandler+0x1fc>)
   12104:	8832      	ldrh	r2, [r6, #0]
   12106:	8819      	ldrh	r1, [r3, #0]
   12108:	2001      	movs	r0, #1
   1210a:	ab06      	add	r3, sp, #24
   1210c:	b289      	uxth	r1, r1
   1210e:	4d20      	ldr	r5, [pc, #128]	; (12190 <routeTimerHandler+0x200>)
   12110:	47a8      	blx	r5
   12112:	0039      	movs	r1, r7
   12114:	a806      	add	r0, sp, #24
   12116:	4b1f      	ldr	r3, [pc, #124]	; (12194 <routeTimerHandler+0x204>)
   12118:	4798      	blx	r3
   1211a:	2313      	movs	r3, #19
   1211c:	543b      	strb	r3, [r7, r0]
   1211e:	0003      	movs	r3, r0
   12120:	3301      	adds	r3, #1
   12122:	b2db      	uxtb	r3, r3
   12124:	54fc      	strb	r4, [r7, r3]
   12126:	464b      	mov	r3, r9
   12128:	4680      	mov	r8, r0
   1212a:	681b      	ldr	r3, [r3, #0]
   1212c:	3002      	adds	r0, #2
   1212e:	b2c0      	uxtb	r0, r0
   12130:	68d9      	ldr	r1, [r3, #12]
   12132:	0022      	movs	r2, r4
   12134:	1838      	adds	r0, r7, r0
   12136:	4b18      	ldr	r3, [pc, #96]	; (12198 <routeTimerHandler+0x208>)
   12138:	4798      	blx	r3
   1213a:	2301      	movs	r3, #1
   1213c:	425b      	negs	r3, r3
   1213e:	8033      	strh	r3, [r6, #0]
   12140:	4b16      	ldr	r3, [pc, #88]	; (1219c <routeTimerHandler+0x20c>)
   12142:	3402      	adds	r4, #2
   12144:	9303      	str	r3, [sp, #12]
   12146:	2300      	movs	r3, #0
   12148:	9302      	str	r3, [sp, #8]
   1214a:	3302      	adds	r3, #2
   1214c:	b2e2      	uxtb	r2, r4
   1214e:	9300      	str	r3, [sp, #0]
   12150:	9601      	str	r6, [sp, #4]
   12152:	003b      	movs	r3, r7
   12154:	4641      	mov	r1, r8
   12156:	a806      	add	r0, sp, #24
   12158:	4c11      	ldr	r4, [pc, #68]	; (121a0 <routeTimerHandler+0x210>)
   1215a:	47a0      	blx	r4
   1215c:	e77d      	b.n	1205a <routeTimerHandler+0xca>
   1215e:	46c0      	nop			; (mov r8, r8)
   12160:	20002908 	.word	0x20002908
   12164:	0000be0d 	.word	0x0000be0d
   12168:	2000285c 	.word	0x2000285c
   1216c:	0000be45 	.word	0x0000be45
   12170:	0000bccd 	.word	0x0000bccd
   12174:	0000db61 	.word	0x0000db61
   12178:	0000d525 	.word	0x0000d525
   1217c:	0000f255 	.word	0x0000f255
   12180:	2000287c 	.word	0x2000287c
   12184:	20002904 	.word	0x20002904
   12188:	0000bc11 	.word	0x0000bc11
   1218c:	200028b8 	.word	0x200028b8
   12190:	0000f029 	.word	0x0000f029
   12194:	0000f079 	.word	0x0000f079
   12198:	00014cdf 	.word	0x00014cdf
   1219c:	00011a45 	.word	0x00011a45
   121a0:	0000f105 	.word	0x0000f105

000121a4 <initiateRouteReq>:
   121a4:	b5f0      	push	{r4, r5, r6, r7, lr}
   121a6:	4646      	mov	r6, r8
   121a8:	46d6      	mov	lr, sl
   121aa:	464f      	mov	r7, r9
   121ac:	2301      	movs	r3, #1
   121ae:	b5c0      	push	{r6, r7, lr}
   121b0:	2616      	movs	r6, #22
   121b2:	b08e      	sub	sp, #56	; 0x38
   121b4:	425b      	negs	r3, r3
   121b6:	446e      	add	r6, sp
   121b8:	8033      	strh	r3, [r6, #0]
   121ba:	4680      	mov	r8, r0
   121bc:	4b23      	ldr	r3, [pc, #140]	; (1224c <initiateRouteReq+0xa8>)
   121be:	2088      	movs	r0, #136	; 0x88
   121c0:	4798      	blx	r3
   121c2:	1e04      	subs	r4, r0, #0
   121c4:	d03f      	beq.n	12246 <initiateRouteReq+0xa2>
   121c6:	4b22      	ldr	r3, [pc, #136]	; (12250 <initiateRouteReq+0xac>)
   121c8:	ad06      	add	r5, sp, #24
   121ca:	8819      	ldrh	r1, [r3, #0]
   121cc:	469a      	mov	sl, r3
   121ce:	b289      	uxth	r1, r1
   121d0:	8832      	ldrh	r2, [r6, #0]
   121d2:	002b      	movs	r3, r5
   121d4:	20ff      	movs	r0, #255	; 0xff
   121d6:	4f1f      	ldr	r7, [pc, #124]	; (12254 <initiateRouteReq+0xb0>)
   121d8:	47b8      	blx	r7
   121da:	2220      	movs	r2, #32
   121dc:	786b      	ldrb	r3, [r5, #1]
   121de:	0021      	movs	r1, r4
   121e0:	4313      	orrs	r3, r2
   121e2:	706b      	strb	r3, [r5, #1]
   121e4:	0028      	movs	r0, r5
   121e6:	4b1c      	ldr	r3, [pc, #112]	; (12258 <initiateRouteReq+0xb4>)
   121e8:	4798      	blx	r3
   121ea:	4653      	mov	r3, sl
   121ec:	4681      	mov	r9, r0
   121ee:	8818      	ldrh	r0, [r3, #0]
   121f0:	78a1      	ldrb	r1, [r4, #2]
   121f2:	b280      	uxth	r0, r0
   121f4:	4b19      	ldr	r3, [pc, #100]	; (1225c <initiateRouteReq+0xb8>)
   121f6:	4798      	blx	r3
   121f8:	1e07      	subs	r7, r0, #0
   121fa:	d020      	beq.n	1223e <initiateRouteReq+0x9a>
   121fc:	2311      	movs	r3, #17
   121fe:	464a      	mov	r2, r9
   12200:	54a3      	strb	r3, [r4, r2]
   12202:	464b      	mov	r3, r9
   12204:	2100      	movs	r1, #0
   12206:	3301      	adds	r3, #1
   12208:	b2db      	uxtb	r3, r3
   1220a:	54e1      	strb	r1, [r4, r3]
   1220c:	4643      	mov	r3, r8
   1220e:	3202      	adds	r2, #2
   12210:	b2d2      	uxtb	r2, r2
   12212:	0a1b      	lsrs	r3, r3, #8
   12214:	54a3      	strb	r3, [r4, r2]
   12216:	4b12      	ldr	r3, [pc, #72]	; (12260 <initiateRouteReq+0xbc>)
   12218:	9102      	str	r1, [sp, #8]
   1221a:	9303      	str	r3, [sp, #12]
   1221c:	2302      	movs	r3, #2
   1221e:	9601      	str	r6, [sp, #4]
   12220:	9300      	str	r3, [sp, #0]
   12222:	2203      	movs	r2, #3
   12224:	0023      	movs	r3, r4
   12226:	4649      	mov	r1, r9
   12228:	0028      	movs	r0, r5
   1222a:	4c0e      	ldr	r4, [pc, #56]	; (12264 <initiateRouteReq+0xc0>)
   1222c:	47a0      	blx	r4
   1222e:	0007      	movs	r7, r0
   12230:	0038      	movs	r0, r7
   12232:	b00e      	add	sp, #56	; 0x38
   12234:	bc1c      	pop	{r2, r3, r4}
   12236:	4690      	mov	r8, r2
   12238:	4699      	mov	r9, r3
   1223a:	46a2      	mov	sl, r4
   1223c:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1223e:	0020      	movs	r0, r4
   12240:	4b09      	ldr	r3, [pc, #36]	; (12268 <initiateRouteReq+0xc4>)
   12242:	4798      	blx	r3
   12244:	e7f4      	b.n	12230 <initiateRouteReq+0x8c>
   12246:	2700      	movs	r7, #0
   12248:	e7f2      	b.n	12230 <initiateRouteReq+0x8c>
   1224a:	46c0      	nop			; (mov r8, r8)
   1224c:	0000bc11 	.word	0x0000bc11
   12250:	200028b8 	.word	0x200028b8
   12254:	0000f029 	.word	0x0000f029
   12258:	0000f079 	.word	0x0000f079
   1225c:	0000f545 	.word	0x0000f545
   12260:	00011a65 	.word	0x00011a65
   12264:	0000f105 	.word	0x0000f105
   12268:	0000bccd 	.word	0x0000bccd

0001226c <keyDetermineProcedure>:
   1226c:	4b06      	ldr	r3, [pc, #24]	; (12288 <keyDetermineProcedure+0x1c>)
   1226e:	781b      	ldrb	r3, [r3, #0]
   12270:	3b06      	subs	r3, #6
   12272:	2b01      	cmp	r3, #1
   12274:	d902      	bls.n	1227c <keyDetermineProcedure+0x10>
   12276:	4b05      	ldr	r3, [pc, #20]	; (1228c <keyDetermineProcedure+0x20>)
   12278:	6818      	ldr	r0, [r3, #0]
   1227a:	4770      	bx	lr
   1227c:	2808      	cmp	r0, #8
   1227e:	d0fa      	beq.n	12276 <keyDetermineProcedure+0xa>
   12280:	4b02      	ldr	r3, [pc, #8]	; (1228c <keyDetermineProcedure+0x20>)
   12282:	6818      	ldr	r0, [r3, #0]
   12284:	3010      	adds	r0, #16
   12286:	e7f8      	b.n	1227a <keyDetermineProcedure+0xe>
   12288:	20001ce1 	.word	0x20001ce1
   1228c:	20002860 	.word	0x20002860

00012290 <secureFrame>:
   12290:	b5f0      	push	{r4, r5, r6, r7, lr}
   12292:	4657      	mov	r7, sl
   12294:	464e      	mov	r6, r9
   12296:	46de      	mov	lr, fp
   12298:	4645      	mov	r5, r8
   1229a:	4681      	mov	r9, r0
   1229c:	b5e0      	push	{r5, r6, r7, lr}
   1229e:	b0af      	sub	sp, #188	; 0xbc
   122a0:	ac06      	add	r4, sp, #24
   122a2:	000e      	movs	r6, r1
   122a4:	0017      	movs	r7, r2
   122a6:	469a      	mov	sl, r3
   122a8:	2210      	movs	r2, #16
   122aa:	4b3a      	ldr	r3, [pc, #232]	; (12394 <secureFrame+0x104>)
   122ac:	2100      	movs	r1, #0
   122ae:	0020      	movs	r0, r4
   122b0:	4798      	blx	r3
   122b2:	464b      	mov	r3, r9
   122b4:	7c1a      	ldrb	r2, [r3, #16]
   122b6:	2a07      	cmp	r2, #7
   122b8:	d80e      	bhi.n	122d8 <secureFrame+0x48>
   122ba:	2301      	movs	r3, #1
   122bc:	2188      	movs	r1, #136	; 0x88
   122be:	4093      	lsls	r3, r2
   122c0:	4219      	tst	r1, r3
   122c2:	d152      	bne.n	1236a <secureFrame+0xda>
   122c4:	3944      	subs	r1, #68	; 0x44
   122c6:	4219      	tst	r1, r3
   122c8:	d153      	bne.n	12372 <secureFrame+0xe2>
   122ca:	3922      	subs	r1, #34	; 0x22
   122cc:	4219      	tst	r1, r3
   122ce:	d003      	beq.n	122d8 <secureFrame+0x48>
   122d0:	2304      	movs	r3, #4
   122d2:	9305      	str	r3, [sp, #20]
   122d4:	469b      	mov	fp, r3
   122d6:	e002      	b.n	122de <secureFrame+0x4e>
   122d8:	2300      	movs	r3, #0
   122da:	469b      	mov	fp, r3
   122dc:	9305      	str	r3, [sp, #20]
   122de:	4b2e      	ldr	r3, [pc, #184]	; (12398 <secureFrame+0x108>)
   122e0:	4d2e      	ldr	r5, [pc, #184]	; (1239c <secureFrame+0x10c>)
   122e2:	79d9      	ldrb	r1, [r3, #7]
   122e4:	7362      	strb	r2, [r4, #13]
   122e6:	7061      	strb	r1, [r4, #1]
   122e8:	7999      	ldrb	r1, [r3, #6]
   122ea:	0032      	movs	r2, r6
   122ec:	70a1      	strb	r1, [r4, #2]
   122ee:	7959      	ldrb	r1, [r3, #5]
   122f0:	a80a      	add	r0, sp, #40	; 0x28
   122f2:	70e1      	strb	r1, [r4, #3]
   122f4:	7919      	ldrb	r1, [r3, #4]
   122f6:	7121      	strb	r1, [r4, #4]
   122f8:	78d9      	ldrb	r1, [r3, #3]
   122fa:	7161      	strb	r1, [r4, #5]
   122fc:	7899      	ldrb	r1, [r3, #2]
   122fe:	71a1      	strb	r1, [r4, #6]
   12300:	7859      	ldrb	r1, [r3, #1]
   12302:	781b      	ldrb	r3, [r3, #0]
   12304:	71e1      	strb	r1, [r4, #7]
   12306:	7223      	strb	r3, [r4, #8]
   12308:	78eb      	ldrb	r3, [r5, #3]
   1230a:	4651      	mov	r1, sl
   1230c:	7263      	strb	r3, [r4, #9]
   1230e:	78ab      	ldrb	r3, [r5, #2]
   12310:	44b2      	add	sl, r6
   12312:	72a3      	strb	r3, [r4, #10]
   12314:	786b      	ldrb	r3, [r5, #1]
   12316:	72e3      	strb	r3, [r4, #11]
   12318:	782b      	ldrb	r3, [r5, #0]
   1231a:	7323      	strb	r3, [r4, #12]
   1231c:	4b20      	ldr	r3, [pc, #128]	; (123a0 <secureFrame+0x110>)
   1231e:	4698      	mov	r8, r3
   12320:	4798      	blx	r3
   12322:	ab0a      	add	r3, sp, #40	; 0x28
   12324:	469c      	mov	ip, r3
   12326:	44b4      	add	ip, r6
   12328:	4663      	mov	r3, ip
   1232a:	003a      	movs	r2, r7
   1232c:	4651      	mov	r1, sl
   1232e:	4660      	mov	r0, ip
   12330:	9304      	str	r3, [sp, #16]
   12332:	47c0      	blx	r8
   12334:	4b1b      	ldr	r3, [pc, #108]	; (123a4 <secureFrame+0x114>)
   12336:	20ff      	movs	r0, #255	; 0xff
   12338:	4798      	blx	r3
   1233a:	2300      	movs	r3, #0
   1233c:	9302      	str	r3, [sp, #8]
   1233e:	464b      	mov	r3, r9
   12340:	7c1b      	ldrb	r3, [r3, #16]
   12342:	0021      	movs	r1, r4
   12344:	9301      	str	r3, [sp, #4]
   12346:	9700      	str	r7, [sp, #0]
   12348:	0033      	movs	r3, r6
   1234a:	9a38      	ldr	r2, [sp, #224]	; 0xe0
   1234c:	a80a      	add	r0, sp, #40	; 0x28
   1234e:	4c16      	ldr	r4, [pc, #88]	; (123a8 <secureFrame+0x118>)
   12350:	47a0      	blx	r4
   12352:	2800      	cmp	r0, #0
   12354:	d011      	beq.n	1237a <secureFrame+0xea>
   12356:	23ff      	movs	r3, #255	; 0xff
   12358:	469b      	mov	fp, r3
   1235a:	4658      	mov	r0, fp
   1235c:	b02f      	add	sp, #188	; 0xbc
   1235e:	bc3c      	pop	{r2, r3, r4, r5}
   12360:	4690      	mov	r8, r2
   12362:	4699      	mov	r9, r3
   12364:	46a2      	mov	sl, r4
   12366:	46ab      	mov	fp, r5
   12368:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1236a:	2310      	movs	r3, #16
   1236c:	9305      	str	r3, [sp, #20]
   1236e:	469b      	mov	fp, r3
   12370:	e7b5      	b.n	122de <secureFrame+0x4e>
   12372:	2308      	movs	r3, #8
   12374:	9305      	str	r3, [sp, #20]
   12376:	469b      	mov	fp, r3
   12378:	e7b1      	b.n	122de <secureFrame+0x4e>
   1237a:	682b      	ldr	r3, [r5, #0]
   1237c:	3003      	adds	r0, #3
   1237e:	3301      	adds	r3, #1
   12380:	602b      	str	r3, [r5, #0]
   12382:	4b0a      	ldr	r3, [pc, #40]	; (123ac <secureFrame+0x11c>)
   12384:	4798      	blx	r3
   12386:	9b05      	ldr	r3, [sp, #20]
   12388:	9904      	ldr	r1, [sp, #16]
   1238a:	18fa      	adds	r2, r7, r3
   1238c:	4650      	mov	r0, sl
   1238e:	47c0      	blx	r8
   12390:	e7e3      	b.n	1235a <secureFrame+0xca>
   12392:	46c0      	nop			; (mov r8, r8)
   12394:	00014cf1 	.word	0x00014cf1
   12398:	20000094 	.word	0x20000094
   1239c:	20002914 	.word	0x20002914
   123a0:	00014cdf 	.word	0x00014cdf
   123a4:	0000ac35 	.word	0x0000ac35
   123a8:	0000b7c1 	.word	0x0000b7c1
   123ac:	0000a5b5 	.word	0x0000a5b5

000123b0 <unsecureFrame>:
   123b0:	b5f0      	push	{r4, r5, r6, r7, lr}
   123b2:	46ce      	mov	lr, r9
   123b4:	4647      	mov	r7, r8
   123b6:	0006      	movs	r6, r0
   123b8:	b580      	push	{r7, lr}
   123ba:	b089      	sub	sp, #36	; 0x24
   123bc:	ac04      	add	r4, sp, #16
   123be:	000d      	movs	r5, r1
   123c0:	4691      	mov	r9, r2
   123c2:	4698      	mov	r8, r3
   123c4:	2210      	movs	r2, #16
   123c6:	4b25      	ldr	r3, [pc, #148]	; (1245c <unsecureFrame+0xac>)
   123c8:	2100      	movs	r1, #0
   123ca:	0020      	movs	r0, r4
   123cc:	4798      	blx	r3
   123ce:	7c33      	ldrb	r3, [r6, #16]
   123d0:	2700      	movs	r7, #0
   123d2:	2b07      	cmp	r3, #7
   123d4:	d805      	bhi.n	123e2 <unsecureFrame+0x32>
   123d6:	2201      	movs	r2, #1
   123d8:	2188      	movs	r1, #136	; 0x88
   123da:	409a      	lsls	r2, r3
   123dc:	3710      	adds	r7, #16
   123de:	4211      	tst	r1, r2
   123e0:	d032      	beq.n	12448 <unsecureFrame+0x98>
   123e2:	7363      	strb	r3, [r4, #13]
   123e4:	4643      	mov	r3, r8
   123e6:	79ea      	ldrb	r2, [r5, #7]
   123e8:	20ff      	movs	r0, #255	; 0xff
   123ea:	7062      	strb	r2, [r4, #1]
   123ec:	79aa      	ldrb	r2, [r5, #6]
   123ee:	70a2      	strb	r2, [r4, #2]
   123f0:	796a      	ldrb	r2, [r5, #5]
   123f2:	70e2      	strb	r2, [r4, #3]
   123f4:	792a      	ldrb	r2, [r5, #4]
   123f6:	7122      	strb	r2, [r4, #4]
   123f8:	78ea      	ldrb	r2, [r5, #3]
   123fa:	7162      	strb	r2, [r4, #5]
   123fc:	78aa      	ldrb	r2, [r5, #2]
   123fe:	71a2      	strb	r2, [r4, #6]
   12400:	786a      	ldrb	r2, [r5, #1]
   12402:	71e2      	strb	r2, [r4, #7]
   12404:	782a      	ldrb	r2, [r5, #0]
   12406:	1bdd      	subs	r5, r3, r7
   12408:	7222      	strb	r2, [r4, #8]
   1240a:	7df2      	ldrb	r2, [r6, #23]
   1240c:	4b14      	ldr	r3, [pc, #80]	; (12460 <unsecureFrame+0xb0>)
   1240e:	7262      	strb	r2, [r4, #9]
   12410:	7db2      	ldrb	r2, [r6, #22]
   12412:	b2ed      	uxtb	r5, r5
   12414:	72a2      	strb	r2, [r4, #10]
   12416:	7d72      	ldrb	r2, [r6, #21]
   12418:	72e2      	strb	r2, [r4, #11]
   1241a:	7d32      	ldrb	r2, [r6, #20]
   1241c:	7322      	strb	r2, [r4, #12]
   1241e:	4798      	blx	r3
   12420:	2301      	movs	r3, #1
   12422:	9302      	str	r3, [sp, #8]
   12424:	7c33      	ldrb	r3, [r6, #16]
   12426:	0021      	movs	r1, r4
   12428:	9301      	str	r3, [sp, #4]
   1242a:	9500      	str	r5, [sp, #0]
   1242c:	464b      	mov	r3, r9
   1242e:	9a11      	ldr	r2, [sp, #68]	; 0x44
   12430:	9810      	ldr	r0, [sp, #64]	; 0x40
   12432:	4c0c      	ldr	r4, [pc, #48]	; (12464 <unsecureFrame+0xb4>)
   12434:	47a0      	blx	r4
   12436:	2800      	cmp	r0, #0
   12438:	d000      	beq.n	1243c <unsecureFrame+0x8c>
   1243a:	27ff      	movs	r7, #255	; 0xff
   1243c:	0038      	movs	r0, r7
   1243e:	b009      	add	sp, #36	; 0x24
   12440:	bc0c      	pop	{r2, r3}
   12442:	4690      	mov	r8, r2
   12444:	4699      	mov	r9, r3
   12446:	bdf0      	pop	{r4, r5, r6, r7, pc}
   12448:	3944      	subs	r1, #68	; 0x44
   1244a:	3f08      	subs	r7, #8
   1244c:	4211      	tst	r1, r2
   1244e:	d1c8      	bne.n	123e2 <unsecureFrame+0x32>
   12450:	3922      	subs	r1, #34	; 0x22
   12452:	400a      	ands	r2, r1
   12454:	1e51      	subs	r1, r2, #1
   12456:	418a      	sbcs	r2, r1
   12458:	0097      	lsls	r7, r2, #2
   1245a:	e7c2      	b.n	123e2 <unsecureFrame+0x32>
   1245c:	00014cf1 	.word	0x00014cf1
   12460:	0000ac35 	.word	0x0000ac35
   12464:	0000b7c1 	.word	0x0000b7c1

00012468 <__udivsi3>:
   12468:	2200      	movs	r2, #0
   1246a:	0843      	lsrs	r3, r0, #1
   1246c:	428b      	cmp	r3, r1
   1246e:	d374      	bcc.n	1255a <__udivsi3+0xf2>
   12470:	0903      	lsrs	r3, r0, #4
   12472:	428b      	cmp	r3, r1
   12474:	d35f      	bcc.n	12536 <__udivsi3+0xce>
   12476:	0a03      	lsrs	r3, r0, #8
   12478:	428b      	cmp	r3, r1
   1247a:	d344      	bcc.n	12506 <__udivsi3+0x9e>
   1247c:	0b03      	lsrs	r3, r0, #12
   1247e:	428b      	cmp	r3, r1
   12480:	d328      	bcc.n	124d4 <__udivsi3+0x6c>
   12482:	0c03      	lsrs	r3, r0, #16
   12484:	428b      	cmp	r3, r1
   12486:	d30d      	bcc.n	124a4 <__udivsi3+0x3c>
   12488:	22ff      	movs	r2, #255	; 0xff
   1248a:	0209      	lsls	r1, r1, #8
   1248c:	ba12      	rev	r2, r2
   1248e:	0c03      	lsrs	r3, r0, #16
   12490:	428b      	cmp	r3, r1
   12492:	d302      	bcc.n	1249a <__udivsi3+0x32>
   12494:	1212      	asrs	r2, r2, #8
   12496:	0209      	lsls	r1, r1, #8
   12498:	d065      	beq.n	12566 <__udivsi3+0xfe>
   1249a:	0b03      	lsrs	r3, r0, #12
   1249c:	428b      	cmp	r3, r1
   1249e:	d319      	bcc.n	124d4 <__udivsi3+0x6c>
   124a0:	e000      	b.n	124a4 <__udivsi3+0x3c>
   124a2:	0a09      	lsrs	r1, r1, #8
   124a4:	0bc3      	lsrs	r3, r0, #15
   124a6:	428b      	cmp	r3, r1
   124a8:	d301      	bcc.n	124ae <__udivsi3+0x46>
   124aa:	03cb      	lsls	r3, r1, #15
   124ac:	1ac0      	subs	r0, r0, r3
   124ae:	4152      	adcs	r2, r2
   124b0:	0b83      	lsrs	r3, r0, #14
   124b2:	428b      	cmp	r3, r1
   124b4:	d301      	bcc.n	124ba <__udivsi3+0x52>
   124b6:	038b      	lsls	r3, r1, #14
   124b8:	1ac0      	subs	r0, r0, r3
   124ba:	4152      	adcs	r2, r2
   124bc:	0b43      	lsrs	r3, r0, #13
   124be:	428b      	cmp	r3, r1
   124c0:	d301      	bcc.n	124c6 <__udivsi3+0x5e>
   124c2:	034b      	lsls	r3, r1, #13
   124c4:	1ac0      	subs	r0, r0, r3
   124c6:	4152      	adcs	r2, r2
   124c8:	0b03      	lsrs	r3, r0, #12
   124ca:	428b      	cmp	r3, r1
   124cc:	d301      	bcc.n	124d2 <__udivsi3+0x6a>
   124ce:	030b      	lsls	r3, r1, #12
   124d0:	1ac0      	subs	r0, r0, r3
   124d2:	4152      	adcs	r2, r2
   124d4:	0ac3      	lsrs	r3, r0, #11
   124d6:	428b      	cmp	r3, r1
   124d8:	d301      	bcc.n	124de <__udivsi3+0x76>
   124da:	02cb      	lsls	r3, r1, #11
   124dc:	1ac0      	subs	r0, r0, r3
   124de:	4152      	adcs	r2, r2
   124e0:	0a83      	lsrs	r3, r0, #10
   124e2:	428b      	cmp	r3, r1
   124e4:	d301      	bcc.n	124ea <__udivsi3+0x82>
   124e6:	028b      	lsls	r3, r1, #10
   124e8:	1ac0      	subs	r0, r0, r3
   124ea:	4152      	adcs	r2, r2
   124ec:	0a43      	lsrs	r3, r0, #9
   124ee:	428b      	cmp	r3, r1
   124f0:	d301      	bcc.n	124f6 <__udivsi3+0x8e>
   124f2:	024b      	lsls	r3, r1, #9
   124f4:	1ac0      	subs	r0, r0, r3
   124f6:	4152      	adcs	r2, r2
   124f8:	0a03      	lsrs	r3, r0, #8
   124fa:	428b      	cmp	r3, r1
   124fc:	d301      	bcc.n	12502 <__udivsi3+0x9a>
   124fe:	020b      	lsls	r3, r1, #8
   12500:	1ac0      	subs	r0, r0, r3
   12502:	4152      	adcs	r2, r2
   12504:	d2cd      	bcs.n	124a2 <__udivsi3+0x3a>
   12506:	09c3      	lsrs	r3, r0, #7
   12508:	428b      	cmp	r3, r1
   1250a:	d301      	bcc.n	12510 <__udivsi3+0xa8>
   1250c:	01cb      	lsls	r3, r1, #7
   1250e:	1ac0      	subs	r0, r0, r3
   12510:	4152      	adcs	r2, r2
   12512:	0983      	lsrs	r3, r0, #6
   12514:	428b      	cmp	r3, r1
   12516:	d301      	bcc.n	1251c <__udivsi3+0xb4>
   12518:	018b      	lsls	r3, r1, #6
   1251a:	1ac0      	subs	r0, r0, r3
   1251c:	4152      	adcs	r2, r2
   1251e:	0943      	lsrs	r3, r0, #5
   12520:	428b      	cmp	r3, r1
   12522:	d301      	bcc.n	12528 <__udivsi3+0xc0>
   12524:	014b      	lsls	r3, r1, #5
   12526:	1ac0      	subs	r0, r0, r3
   12528:	4152      	adcs	r2, r2
   1252a:	0903      	lsrs	r3, r0, #4
   1252c:	428b      	cmp	r3, r1
   1252e:	d301      	bcc.n	12534 <__udivsi3+0xcc>
   12530:	010b      	lsls	r3, r1, #4
   12532:	1ac0      	subs	r0, r0, r3
   12534:	4152      	adcs	r2, r2
   12536:	08c3      	lsrs	r3, r0, #3
   12538:	428b      	cmp	r3, r1
   1253a:	d301      	bcc.n	12540 <__udivsi3+0xd8>
   1253c:	00cb      	lsls	r3, r1, #3
   1253e:	1ac0      	subs	r0, r0, r3
   12540:	4152      	adcs	r2, r2
   12542:	0883      	lsrs	r3, r0, #2
   12544:	428b      	cmp	r3, r1
   12546:	d301      	bcc.n	1254c <__udivsi3+0xe4>
   12548:	008b      	lsls	r3, r1, #2
   1254a:	1ac0      	subs	r0, r0, r3
   1254c:	4152      	adcs	r2, r2
   1254e:	0843      	lsrs	r3, r0, #1
   12550:	428b      	cmp	r3, r1
   12552:	d301      	bcc.n	12558 <__udivsi3+0xf0>
   12554:	004b      	lsls	r3, r1, #1
   12556:	1ac0      	subs	r0, r0, r3
   12558:	4152      	adcs	r2, r2
   1255a:	1a41      	subs	r1, r0, r1
   1255c:	d200      	bcs.n	12560 <__udivsi3+0xf8>
   1255e:	4601      	mov	r1, r0
   12560:	4152      	adcs	r2, r2
   12562:	4610      	mov	r0, r2
   12564:	4770      	bx	lr
   12566:	e7ff      	b.n	12568 <__udivsi3+0x100>
   12568:	b501      	push	{r0, lr}
   1256a:	2000      	movs	r0, #0
   1256c:	f000 f8f0 	bl	12750 <__aeabi_idiv0>
   12570:	bd02      	pop	{r1, pc}
   12572:	46c0      	nop			; (mov r8, r8)

00012574 <__aeabi_uidivmod>:
   12574:	2900      	cmp	r1, #0
   12576:	d0f7      	beq.n	12568 <__udivsi3+0x100>
   12578:	e776      	b.n	12468 <__udivsi3>
   1257a:	4770      	bx	lr

0001257c <__divsi3>:
   1257c:	4603      	mov	r3, r0
   1257e:	430b      	orrs	r3, r1
   12580:	d47f      	bmi.n	12682 <__divsi3+0x106>
   12582:	2200      	movs	r2, #0
   12584:	0843      	lsrs	r3, r0, #1
   12586:	428b      	cmp	r3, r1
   12588:	d374      	bcc.n	12674 <__divsi3+0xf8>
   1258a:	0903      	lsrs	r3, r0, #4
   1258c:	428b      	cmp	r3, r1
   1258e:	d35f      	bcc.n	12650 <__divsi3+0xd4>
   12590:	0a03      	lsrs	r3, r0, #8
   12592:	428b      	cmp	r3, r1
   12594:	d344      	bcc.n	12620 <__divsi3+0xa4>
   12596:	0b03      	lsrs	r3, r0, #12
   12598:	428b      	cmp	r3, r1
   1259a:	d328      	bcc.n	125ee <__divsi3+0x72>
   1259c:	0c03      	lsrs	r3, r0, #16
   1259e:	428b      	cmp	r3, r1
   125a0:	d30d      	bcc.n	125be <__divsi3+0x42>
   125a2:	22ff      	movs	r2, #255	; 0xff
   125a4:	0209      	lsls	r1, r1, #8
   125a6:	ba12      	rev	r2, r2
   125a8:	0c03      	lsrs	r3, r0, #16
   125aa:	428b      	cmp	r3, r1
   125ac:	d302      	bcc.n	125b4 <__divsi3+0x38>
   125ae:	1212      	asrs	r2, r2, #8
   125b0:	0209      	lsls	r1, r1, #8
   125b2:	d065      	beq.n	12680 <__divsi3+0x104>
   125b4:	0b03      	lsrs	r3, r0, #12
   125b6:	428b      	cmp	r3, r1
   125b8:	d319      	bcc.n	125ee <__divsi3+0x72>
   125ba:	e000      	b.n	125be <__divsi3+0x42>
   125bc:	0a09      	lsrs	r1, r1, #8
   125be:	0bc3      	lsrs	r3, r0, #15
   125c0:	428b      	cmp	r3, r1
   125c2:	d301      	bcc.n	125c8 <__divsi3+0x4c>
   125c4:	03cb      	lsls	r3, r1, #15
   125c6:	1ac0      	subs	r0, r0, r3
   125c8:	4152      	adcs	r2, r2
   125ca:	0b83      	lsrs	r3, r0, #14
   125cc:	428b      	cmp	r3, r1
   125ce:	d301      	bcc.n	125d4 <__divsi3+0x58>
   125d0:	038b      	lsls	r3, r1, #14
   125d2:	1ac0      	subs	r0, r0, r3
   125d4:	4152      	adcs	r2, r2
   125d6:	0b43      	lsrs	r3, r0, #13
   125d8:	428b      	cmp	r3, r1
   125da:	d301      	bcc.n	125e0 <__divsi3+0x64>
   125dc:	034b      	lsls	r3, r1, #13
   125de:	1ac0      	subs	r0, r0, r3
   125e0:	4152      	adcs	r2, r2
   125e2:	0b03      	lsrs	r3, r0, #12
   125e4:	428b      	cmp	r3, r1
   125e6:	d301      	bcc.n	125ec <__divsi3+0x70>
   125e8:	030b      	lsls	r3, r1, #12
   125ea:	1ac0      	subs	r0, r0, r3
   125ec:	4152      	adcs	r2, r2
   125ee:	0ac3      	lsrs	r3, r0, #11
   125f0:	428b      	cmp	r3, r1
   125f2:	d301      	bcc.n	125f8 <__divsi3+0x7c>
   125f4:	02cb      	lsls	r3, r1, #11
   125f6:	1ac0      	subs	r0, r0, r3
   125f8:	4152      	adcs	r2, r2
   125fa:	0a83      	lsrs	r3, r0, #10
   125fc:	428b      	cmp	r3, r1
   125fe:	d301      	bcc.n	12604 <__divsi3+0x88>
   12600:	028b      	lsls	r3, r1, #10
   12602:	1ac0      	subs	r0, r0, r3
   12604:	4152      	adcs	r2, r2
   12606:	0a43      	lsrs	r3, r0, #9
   12608:	428b      	cmp	r3, r1
   1260a:	d301      	bcc.n	12610 <__divsi3+0x94>
   1260c:	024b      	lsls	r3, r1, #9
   1260e:	1ac0      	subs	r0, r0, r3
   12610:	4152      	adcs	r2, r2
   12612:	0a03      	lsrs	r3, r0, #8
   12614:	428b      	cmp	r3, r1
   12616:	d301      	bcc.n	1261c <__divsi3+0xa0>
   12618:	020b      	lsls	r3, r1, #8
   1261a:	1ac0      	subs	r0, r0, r3
   1261c:	4152      	adcs	r2, r2
   1261e:	d2cd      	bcs.n	125bc <__divsi3+0x40>
   12620:	09c3      	lsrs	r3, r0, #7
   12622:	428b      	cmp	r3, r1
   12624:	d301      	bcc.n	1262a <__divsi3+0xae>
   12626:	01cb      	lsls	r3, r1, #7
   12628:	1ac0      	subs	r0, r0, r3
   1262a:	4152      	adcs	r2, r2
   1262c:	0983      	lsrs	r3, r0, #6
   1262e:	428b      	cmp	r3, r1
   12630:	d301      	bcc.n	12636 <__divsi3+0xba>
   12632:	018b      	lsls	r3, r1, #6
   12634:	1ac0      	subs	r0, r0, r3
   12636:	4152      	adcs	r2, r2
   12638:	0943      	lsrs	r3, r0, #5
   1263a:	428b      	cmp	r3, r1
   1263c:	d301      	bcc.n	12642 <__divsi3+0xc6>
   1263e:	014b      	lsls	r3, r1, #5
   12640:	1ac0      	subs	r0, r0, r3
   12642:	4152      	adcs	r2, r2
   12644:	0903      	lsrs	r3, r0, #4
   12646:	428b      	cmp	r3, r1
   12648:	d301      	bcc.n	1264e <__divsi3+0xd2>
   1264a:	010b      	lsls	r3, r1, #4
   1264c:	1ac0      	subs	r0, r0, r3
   1264e:	4152      	adcs	r2, r2
   12650:	08c3      	lsrs	r3, r0, #3
   12652:	428b      	cmp	r3, r1
   12654:	d301      	bcc.n	1265a <__divsi3+0xde>
   12656:	00cb      	lsls	r3, r1, #3
   12658:	1ac0      	subs	r0, r0, r3
   1265a:	4152      	adcs	r2, r2
   1265c:	0883      	lsrs	r3, r0, #2
   1265e:	428b      	cmp	r3, r1
   12660:	d301      	bcc.n	12666 <__divsi3+0xea>
   12662:	008b      	lsls	r3, r1, #2
   12664:	1ac0      	subs	r0, r0, r3
   12666:	4152      	adcs	r2, r2
   12668:	0843      	lsrs	r3, r0, #1
   1266a:	428b      	cmp	r3, r1
   1266c:	d301      	bcc.n	12672 <__divsi3+0xf6>
   1266e:	004b      	lsls	r3, r1, #1
   12670:	1ac0      	subs	r0, r0, r3
   12672:	4152      	adcs	r2, r2
   12674:	1a41      	subs	r1, r0, r1
   12676:	d200      	bcs.n	1267a <__divsi3+0xfe>
   12678:	4601      	mov	r1, r0
   1267a:	4152      	adcs	r2, r2
   1267c:	4610      	mov	r0, r2
   1267e:	4770      	bx	lr
   12680:	e05d      	b.n	1273e <__divsi3+0x1c2>
   12682:	0fca      	lsrs	r2, r1, #31
   12684:	d000      	beq.n	12688 <__divsi3+0x10c>
   12686:	4249      	negs	r1, r1
   12688:	1003      	asrs	r3, r0, #32
   1268a:	d300      	bcc.n	1268e <__divsi3+0x112>
   1268c:	4240      	negs	r0, r0
   1268e:	4053      	eors	r3, r2
   12690:	2200      	movs	r2, #0
   12692:	469c      	mov	ip, r3
   12694:	0903      	lsrs	r3, r0, #4
   12696:	428b      	cmp	r3, r1
   12698:	d32d      	bcc.n	126f6 <__divsi3+0x17a>
   1269a:	0a03      	lsrs	r3, r0, #8
   1269c:	428b      	cmp	r3, r1
   1269e:	d312      	bcc.n	126c6 <__divsi3+0x14a>
   126a0:	22fc      	movs	r2, #252	; 0xfc
   126a2:	0189      	lsls	r1, r1, #6
   126a4:	ba12      	rev	r2, r2
   126a6:	0a03      	lsrs	r3, r0, #8
   126a8:	428b      	cmp	r3, r1
   126aa:	d30c      	bcc.n	126c6 <__divsi3+0x14a>
   126ac:	0189      	lsls	r1, r1, #6
   126ae:	1192      	asrs	r2, r2, #6
   126b0:	428b      	cmp	r3, r1
   126b2:	d308      	bcc.n	126c6 <__divsi3+0x14a>
   126b4:	0189      	lsls	r1, r1, #6
   126b6:	1192      	asrs	r2, r2, #6
   126b8:	428b      	cmp	r3, r1
   126ba:	d304      	bcc.n	126c6 <__divsi3+0x14a>
   126bc:	0189      	lsls	r1, r1, #6
   126be:	d03a      	beq.n	12736 <__divsi3+0x1ba>
   126c0:	1192      	asrs	r2, r2, #6
   126c2:	e000      	b.n	126c6 <__divsi3+0x14a>
   126c4:	0989      	lsrs	r1, r1, #6
   126c6:	09c3      	lsrs	r3, r0, #7
   126c8:	428b      	cmp	r3, r1
   126ca:	d301      	bcc.n	126d0 <__divsi3+0x154>
   126cc:	01cb      	lsls	r3, r1, #7
   126ce:	1ac0      	subs	r0, r0, r3
   126d0:	4152      	adcs	r2, r2
   126d2:	0983      	lsrs	r3, r0, #6
   126d4:	428b      	cmp	r3, r1
   126d6:	d301      	bcc.n	126dc <__divsi3+0x160>
   126d8:	018b      	lsls	r3, r1, #6
   126da:	1ac0      	subs	r0, r0, r3
   126dc:	4152      	adcs	r2, r2
   126de:	0943      	lsrs	r3, r0, #5
   126e0:	428b      	cmp	r3, r1
   126e2:	d301      	bcc.n	126e8 <__divsi3+0x16c>
   126e4:	014b      	lsls	r3, r1, #5
   126e6:	1ac0      	subs	r0, r0, r3
   126e8:	4152      	adcs	r2, r2
   126ea:	0903      	lsrs	r3, r0, #4
   126ec:	428b      	cmp	r3, r1
   126ee:	d301      	bcc.n	126f4 <__divsi3+0x178>
   126f0:	010b      	lsls	r3, r1, #4
   126f2:	1ac0      	subs	r0, r0, r3
   126f4:	4152      	adcs	r2, r2
   126f6:	08c3      	lsrs	r3, r0, #3
   126f8:	428b      	cmp	r3, r1
   126fa:	d301      	bcc.n	12700 <__divsi3+0x184>
   126fc:	00cb      	lsls	r3, r1, #3
   126fe:	1ac0      	subs	r0, r0, r3
   12700:	4152      	adcs	r2, r2
   12702:	0883      	lsrs	r3, r0, #2
   12704:	428b      	cmp	r3, r1
   12706:	d301      	bcc.n	1270c <__divsi3+0x190>
   12708:	008b      	lsls	r3, r1, #2
   1270a:	1ac0      	subs	r0, r0, r3
   1270c:	4152      	adcs	r2, r2
   1270e:	d2d9      	bcs.n	126c4 <__divsi3+0x148>
   12710:	0843      	lsrs	r3, r0, #1
   12712:	428b      	cmp	r3, r1
   12714:	d301      	bcc.n	1271a <__divsi3+0x19e>
   12716:	004b      	lsls	r3, r1, #1
   12718:	1ac0      	subs	r0, r0, r3
   1271a:	4152      	adcs	r2, r2
   1271c:	1a41      	subs	r1, r0, r1
   1271e:	d200      	bcs.n	12722 <__divsi3+0x1a6>
   12720:	4601      	mov	r1, r0
   12722:	4663      	mov	r3, ip
   12724:	4152      	adcs	r2, r2
   12726:	105b      	asrs	r3, r3, #1
   12728:	4610      	mov	r0, r2
   1272a:	d301      	bcc.n	12730 <__divsi3+0x1b4>
   1272c:	4240      	negs	r0, r0
   1272e:	2b00      	cmp	r3, #0
   12730:	d500      	bpl.n	12734 <__divsi3+0x1b8>
   12732:	4249      	negs	r1, r1
   12734:	4770      	bx	lr
   12736:	4663      	mov	r3, ip
   12738:	105b      	asrs	r3, r3, #1
   1273a:	d300      	bcc.n	1273e <__divsi3+0x1c2>
   1273c:	4240      	negs	r0, r0
   1273e:	b501      	push	{r0, lr}
   12740:	2000      	movs	r0, #0
   12742:	f000 f805 	bl	12750 <__aeabi_idiv0>
   12746:	bd02      	pop	{r1, pc}

00012748 <__aeabi_idivmod>:
   12748:	2900      	cmp	r1, #0
   1274a:	d0f8      	beq.n	1273e <__divsi3+0x1c2>
   1274c:	e716      	b.n	1257c <__divsi3>
   1274e:	4770      	bx	lr

00012750 <__aeabi_idiv0>:
   12750:	4770      	bx	lr
   12752:	46c0      	nop			; (mov r8, r8)

00012754 <__aeabi_cfrcmple>:
   12754:	4684      	mov	ip, r0
   12756:	1c08      	adds	r0, r1, #0
   12758:	4661      	mov	r1, ip
   1275a:	e7ff      	b.n	1275c <__aeabi_cfcmpeq>

0001275c <__aeabi_cfcmpeq>:
   1275c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   1275e:	f000 fbb5 	bl	12ecc <__lesf2>
   12762:	2800      	cmp	r0, #0
   12764:	d401      	bmi.n	1276a <__aeabi_cfcmpeq+0xe>
   12766:	2100      	movs	r1, #0
   12768:	42c8      	cmn	r0, r1
   1276a:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

0001276c <__aeabi_fcmpeq>:
   1276c:	b510      	push	{r4, lr}
   1276e:	f000 fb47 	bl	12e00 <__eqsf2>
   12772:	4240      	negs	r0, r0
   12774:	3001      	adds	r0, #1
   12776:	bd10      	pop	{r4, pc}

00012778 <__aeabi_fcmplt>:
   12778:	b510      	push	{r4, lr}
   1277a:	f000 fba7 	bl	12ecc <__lesf2>
   1277e:	2800      	cmp	r0, #0
   12780:	db01      	blt.n	12786 <__aeabi_fcmplt+0xe>
   12782:	2000      	movs	r0, #0
   12784:	bd10      	pop	{r4, pc}
   12786:	2001      	movs	r0, #1
   12788:	bd10      	pop	{r4, pc}
   1278a:	46c0      	nop			; (mov r8, r8)

0001278c <__aeabi_fcmple>:
   1278c:	b510      	push	{r4, lr}
   1278e:	f000 fb9d 	bl	12ecc <__lesf2>
   12792:	2800      	cmp	r0, #0
   12794:	dd01      	ble.n	1279a <__aeabi_fcmple+0xe>
   12796:	2000      	movs	r0, #0
   12798:	bd10      	pop	{r4, pc}
   1279a:	2001      	movs	r0, #1
   1279c:	bd10      	pop	{r4, pc}
   1279e:	46c0      	nop			; (mov r8, r8)

000127a0 <__aeabi_fcmpgt>:
   127a0:	b510      	push	{r4, lr}
   127a2:	f000 fb53 	bl	12e4c <__gesf2>
   127a6:	2800      	cmp	r0, #0
   127a8:	dc01      	bgt.n	127ae <__aeabi_fcmpgt+0xe>
   127aa:	2000      	movs	r0, #0
   127ac:	bd10      	pop	{r4, pc}
   127ae:	2001      	movs	r0, #1
   127b0:	bd10      	pop	{r4, pc}
   127b2:	46c0      	nop			; (mov r8, r8)

000127b4 <__aeabi_fcmpge>:
   127b4:	b510      	push	{r4, lr}
   127b6:	f000 fb49 	bl	12e4c <__gesf2>
   127ba:	2800      	cmp	r0, #0
   127bc:	da01      	bge.n	127c2 <__aeabi_fcmpge+0xe>
   127be:	2000      	movs	r0, #0
   127c0:	bd10      	pop	{r4, pc}
   127c2:	2001      	movs	r0, #1
   127c4:	bd10      	pop	{r4, pc}
   127c6:	46c0      	nop			; (mov r8, r8)

000127c8 <__aeabi_lmul>:
   127c8:	b5f0      	push	{r4, r5, r6, r7, lr}
   127ca:	46ce      	mov	lr, r9
   127cc:	4647      	mov	r7, r8
   127ce:	0415      	lsls	r5, r2, #16
   127d0:	0c2d      	lsrs	r5, r5, #16
   127d2:	002e      	movs	r6, r5
   127d4:	b580      	push	{r7, lr}
   127d6:	0407      	lsls	r7, r0, #16
   127d8:	0c14      	lsrs	r4, r2, #16
   127da:	0c3f      	lsrs	r7, r7, #16
   127dc:	4699      	mov	r9, r3
   127de:	0c03      	lsrs	r3, r0, #16
   127e0:	437e      	muls	r6, r7
   127e2:	435d      	muls	r5, r3
   127e4:	4367      	muls	r7, r4
   127e6:	4363      	muls	r3, r4
   127e8:	197f      	adds	r7, r7, r5
   127ea:	0c34      	lsrs	r4, r6, #16
   127ec:	19e4      	adds	r4, r4, r7
   127ee:	469c      	mov	ip, r3
   127f0:	42a5      	cmp	r5, r4
   127f2:	d903      	bls.n	127fc <__aeabi_lmul+0x34>
   127f4:	2380      	movs	r3, #128	; 0x80
   127f6:	025b      	lsls	r3, r3, #9
   127f8:	4698      	mov	r8, r3
   127fa:	44c4      	add	ip, r8
   127fc:	464b      	mov	r3, r9
   127fe:	4351      	muls	r1, r2
   12800:	4343      	muls	r3, r0
   12802:	0436      	lsls	r6, r6, #16
   12804:	0c36      	lsrs	r6, r6, #16
   12806:	0c25      	lsrs	r5, r4, #16
   12808:	0424      	lsls	r4, r4, #16
   1280a:	4465      	add	r5, ip
   1280c:	19a4      	adds	r4, r4, r6
   1280e:	1859      	adds	r1, r3, r1
   12810:	1949      	adds	r1, r1, r5
   12812:	0020      	movs	r0, r4
   12814:	bc0c      	pop	{r2, r3}
   12816:	4690      	mov	r8, r2
   12818:	4699      	mov	r9, r3
   1281a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0001281c <__aeabi_f2uiz>:
   1281c:	219e      	movs	r1, #158	; 0x9e
   1281e:	b510      	push	{r4, lr}
   12820:	05c9      	lsls	r1, r1, #23
   12822:	1c04      	adds	r4, r0, #0
   12824:	f7ff ffc6 	bl	127b4 <__aeabi_fcmpge>
   12828:	2800      	cmp	r0, #0
   1282a:	d103      	bne.n	12834 <__aeabi_f2uiz+0x18>
   1282c:	1c20      	adds	r0, r4, #0
   1282e:	f000 fd2b 	bl	13288 <__aeabi_f2iz>
   12832:	bd10      	pop	{r4, pc}
   12834:	219e      	movs	r1, #158	; 0x9e
   12836:	1c20      	adds	r0, r4, #0
   12838:	05c9      	lsls	r1, r1, #23
   1283a:	f000 fb89 	bl	12f50 <__aeabi_fsub>
   1283e:	f000 fd23 	bl	13288 <__aeabi_f2iz>
   12842:	2380      	movs	r3, #128	; 0x80
   12844:	061b      	lsls	r3, r3, #24
   12846:	469c      	mov	ip, r3
   12848:	4460      	add	r0, ip
   1284a:	e7f2      	b.n	12832 <__aeabi_f2uiz+0x16>

0001284c <__aeabi_fadd>:
   1284c:	b5f0      	push	{r4, r5, r6, r7, lr}
   1284e:	46c6      	mov	lr, r8
   12850:	024e      	lsls	r6, r1, #9
   12852:	0247      	lsls	r7, r0, #9
   12854:	0a76      	lsrs	r6, r6, #9
   12856:	0a7b      	lsrs	r3, r7, #9
   12858:	0044      	lsls	r4, r0, #1
   1285a:	0fc5      	lsrs	r5, r0, #31
   1285c:	00f7      	lsls	r7, r6, #3
   1285e:	0048      	lsls	r0, r1, #1
   12860:	4698      	mov	r8, r3
   12862:	b500      	push	{lr}
   12864:	0e24      	lsrs	r4, r4, #24
   12866:	002a      	movs	r2, r5
   12868:	00db      	lsls	r3, r3, #3
   1286a:	0e00      	lsrs	r0, r0, #24
   1286c:	0fc9      	lsrs	r1, r1, #31
   1286e:	46bc      	mov	ip, r7
   12870:	428d      	cmp	r5, r1
   12872:	d067      	beq.n	12944 <__aeabi_fadd+0xf8>
   12874:	1a22      	subs	r2, r4, r0
   12876:	2a00      	cmp	r2, #0
   12878:	dc00      	bgt.n	1287c <__aeabi_fadd+0x30>
   1287a:	e0a5      	b.n	129c8 <__aeabi_fadd+0x17c>
   1287c:	2800      	cmp	r0, #0
   1287e:	d13a      	bne.n	128f6 <__aeabi_fadd+0xaa>
   12880:	2f00      	cmp	r7, #0
   12882:	d100      	bne.n	12886 <__aeabi_fadd+0x3a>
   12884:	e093      	b.n	129ae <__aeabi_fadd+0x162>
   12886:	1e51      	subs	r1, r2, #1
   12888:	2900      	cmp	r1, #0
   1288a:	d000      	beq.n	1288e <__aeabi_fadd+0x42>
   1288c:	e0bc      	b.n	12a08 <__aeabi_fadd+0x1bc>
   1288e:	2401      	movs	r4, #1
   12890:	1bdb      	subs	r3, r3, r7
   12892:	015a      	lsls	r2, r3, #5
   12894:	d546      	bpl.n	12924 <__aeabi_fadd+0xd8>
   12896:	019b      	lsls	r3, r3, #6
   12898:	099e      	lsrs	r6, r3, #6
   1289a:	0030      	movs	r0, r6
   1289c:	f002 f9a0 	bl	14be0 <__clzsi2>
   128a0:	3805      	subs	r0, #5
   128a2:	4086      	lsls	r6, r0
   128a4:	4284      	cmp	r4, r0
   128a6:	dd00      	ble.n	128aa <__aeabi_fadd+0x5e>
   128a8:	e09d      	b.n	129e6 <__aeabi_fadd+0x19a>
   128aa:	1b04      	subs	r4, r0, r4
   128ac:	0032      	movs	r2, r6
   128ae:	2020      	movs	r0, #32
   128b0:	3401      	adds	r4, #1
   128b2:	40e2      	lsrs	r2, r4
   128b4:	1b04      	subs	r4, r0, r4
   128b6:	40a6      	lsls	r6, r4
   128b8:	0033      	movs	r3, r6
   128ba:	1e5e      	subs	r6, r3, #1
   128bc:	41b3      	sbcs	r3, r6
   128be:	2400      	movs	r4, #0
   128c0:	4313      	orrs	r3, r2
   128c2:	075a      	lsls	r2, r3, #29
   128c4:	d004      	beq.n	128d0 <__aeabi_fadd+0x84>
   128c6:	220f      	movs	r2, #15
   128c8:	401a      	ands	r2, r3
   128ca:	2a04      	cmp	r2, #4
   128cc:	d000      	beq.n	128d0 <__aeabi_fadd+0x84>
   128ce:	3304      	adds	r3, #4
   128d0:	015a      	lsls	r2, r3, #5
   128d2:	d529      	bpl.n	12928 <__aeabi_fadd+0xdc>
   128d4:	3401      	adds	r4, #1
   128d6:	2cff      	cmp	r4, #255	; 0xff
   128d8:	d100      	bne.n	128dc <__aeabi_fadd+0x90>
   128da:	e081      	b.n	129e0 <__aeabi_fadd+0x194>
   128dc:	002a      	movs	r2, r5
   128de:	019b      	lsls	r3, r3, #6
   128e0:	0a5b      	lsrs	r3, r3, #9
   128e2:	b2e4      	uxtb	r4, r4
   128e4:	025b      	lsls	r3, r3, #9
   128e6:	05e4      	lsls	r4, r4, #23
   128e8:	0a58      	lsrs	r0, r3, #9
   128ea:	07d2      	lsls	r2, r2, #31
   128ec:	4320      	orrs	r0, r4
   128ee:	4310      	orrs	r0, r2
   128f0:	bc04      	pop	{r2}
   128f2:	4690      	mov	r8, r2
   128f4:	bdf0      	pop	{r4, r5, r6, r7, pc}
   128f6:	2cff      	cmp	r4, #255	; 0xff
   128f8:	d0e3      	beq.n	128c2 <__aeabi_fadd+0x76>
   128fa:	2180      	movs	r1, #128	; 0x80
   128fc:	0038      	movs	r0, r7
   128fe:	04c9      	lsls	r1, r1, #19
   12900:	4308      	orrs	r0, r1
   12902:	4684      	mov	ip, r0
   12904:	2a1b      	cmp	r2, #27
   12906:	dd00      	ble.n	1290a <__aeabi_fadd+0xbe>
   12908:	e082      	b.n	12a10 <__aeabi_fadd+0x1c4>
   1290a:	2020      	movs	r0, #32
   1290c:	4661      	mov	r1, ip
   1290e:	40d1      	lsrs	r1, r2
   12910:	1a82      	subs	r2, r0, r2
   12912:	4660      	mov	r0, ip
   12914:	4090      	lsls	r0, r2
   12916:	0002      	movs	r2, r0
   12918:	1e50      	subs	r0, r2, #1
   1291a:	4182      	sbcs	r2, r0
   1291c:	430a      	orrs	r2, r1
   1291e:	1a9b      	subs	r3, r3, r2
   12920:	015a      	lsls	r2, r3, #5
   12922:	d4b8      	bmi.n	12896 <__aeabi_fadd+0x4a>
   12924:	075a      	lsls	r2, r3, #29
   12926:	d1ce      	bne.n	128c6 <__aeabi_fadd+0x7a>
   12928:	08de      	lsrs	r6, r3, #3
   1292a:	002a      	movs	r2, r5
   1292c:	2cff      	cmp	r4, #255	; 0xff
   1292e:	d13a      	bne.n	129a6 <__aeabi_fadd+0x15a>
   12930:	2e00      	cmp	r6, #0
   12932:	d100      	bne.n	12936 <__aeabi_fadd+0xea>
   12934:	e0ae      	b.n	12a94 <__aeabi_fadd+0x248>
   12936:	2380      	movs	r3, #128	; 0x80
   12938:	03db      	lsls	r3, r3, #15
   1293a:	4333      	orrs	r3, r6
   1293c:	025b      	lsls	r3, r3, #9
   1293e:	0a5b      	lsrs	r3, r3, #9
   12940:	24ff      	movs	r4, #255	; 0xff
   12942:	e7cf      	b.n	128e4 <__aeabi_fadd+0x98>
   12944:	1a21      	subs	r1, r4, r0
   12946:	2900      	cmp	r1, #0
   12948:	dd52      	ble.n	129f0 <__aeabi_fadd+0x1a4>
   1294a:	2800      	cmp	r0, #0
   1294c:	d031      	beq.n	129b2 <__aeabi_fadd+0x166>
   1294e:	2cff      	cmp	r4, #255	; 0xff
   12950:	d0b7      	beq.n	128c2 <__aeabi_fadd+0x76>
   12952:	2080      	movs	r0, #128	; 0x80
   12954:	003e      	movs	r6, r7
   12956:	04c0      	lsls	r0, r0, #19
   12958:	4306      	orrs	r6, r0
   1295a:	46b4      	mov	ip, r6
   1295c:	291b      	cmp	r1, #27
   1295e:	dd00      	ble.n	12962 <__aeabi_fadd+0x116>
   12960:	e0aa      	b.n	12ab8 <__aeabi_fadd+0x26c>
   12962:	2620      	movs	r6, #32
   12964:	4660      	mov	r0, ip
   12966:	40c8      	lsrs	r0, r1
   12968:	1a71      	subs	r1, r6, r1
   1296a:	4666      	mov	r6, ip
   1296c:	408e      	lsls	r6, r1
   1296e:	0031      	movs	r1, r6
   12970:	1e4e      	subs	r6, r1, #1
   12972:	41b1      	sbcs	r1, r6
   12974:	4301      	orrs	r1, r0
   12976:	185b      	adds	r3, r3, r1
   12978:	0159      	lsls	r1, r3, #5
   1297a:	d5d3      	bpl.n	12924 <__aeabi_fadd+0xd8>
   1297c:	3401      	adds	r4, #1
   1297e:	2cff      	cmp	r4, #255	; 0xff
   12980:	d100      	bne.n	12984 <__aeabi_fadd+0x138>
   12982:	e087      	b.n	12a94 <__aeabi_fadd+0x248>
   12984:	2201      	movs	r2, #1
   12986:	4978      	ldr	r1, [pc, #480]	; (12b68 <__aeabi_fadd+0x31c>)
   12988:	401a      	ands	r2, r3
   1298a:	085b      	lsrs	r3, r3, #1
   1298c:	400b      	ands	r3, r1
   1298e:	4313      	orrs	r3, r2
   12990:	e797      	b.n	128c2 <__aeabi_fadd+0x76>
   12992:	2c00      	cmp	r4, #0
   12994:	d000      	beq.n	12998 <__aeabi_fadd+0x14c>
   12996:	e0a7      	b.n	12ae8 <__aeabi_fadd+0x29c>
   12998:	2b00      	cmp	r3, #0
   1299a:	d000      	beq.n	1299e <__aeabi_fadd+0x152>
   1299c:	e0b6      	b.n	12b0c <__aeabi_fadd+0x2c0>
   1299e:	1e3b      	subs	r3, r7, #0
   129a0:	d162      	bne.n	12a68 <__aeabi_fadd+0x21c>
   129a2:	2600      	movs	r6, #0
   129a4:	2200      	movs	r2, #0
   129a6:	0273      	lsls	r3, r6, #9
   129a8:	0a5b      	lsrs	r3, r3, #9
   129aa:	b2e4      	uxtb	r4, r4
   129ac:	e79a      	b.n	128e4 <__aeabi_fadd+0x98>
   129ae:	0014      	movs	r4, r2
   129b0:	e787      	b.n	128c2 <__aeabi_fadd+0x76>
   129b2:	2f00      	cmp	r7, #0
   129b4:	d04d      	beq.n	12a52 <__aeabi_fadd+0x206>
   129b6:	1e48      	subs	r0, r1, #1
   129b8:	2800      	cmp	r0, #0
   129ba:	d157      	bne.n	12a6c <__aeabi_fadd+0x220>
   129bc:	4463      	add	r3, ip
   129be:	2401      	movs	r4, #1
   129c0:	015a      	lsls	r2, r3, #5
   129c2:	d5af      	bpl.n	12924 <__aeabi_fadd+0xd8>
   129c4:	2402      	movs	r4, #2
   129c6:	e7dd      	b.n	12984 <__aeabi_fadd+0x138>
   129c8:	2a00      	cmp	r2, #0
   129ca:	d124      	bne.n	12a16 <__aeabi_fadd+0x1ca>
   129cc:	1c62      	adds	r2, r4, #1
   129ce:	b2d2      	uxtb	r2, r2
   129d0:	2a01      	cmp	r2, #1
   129d2:	ddde      	ble.n	12992 <__aeabi_fadd+0x146>
   129d4:	1bde      	subs	r6, r3, r7
   129d6:	0172      	lsls	r2, r6, #5
   129d8:	d535      	bpl.n	12a46 <__aeabi_fadd+0x1fa>
   129da:	1afe      	subs	r6, r7, r3
   129dc:	000d      	movs	r5, r1
   129de:	e75c      	b.n	1289a <__aeabi_fadd+0x4e>
   129e0:	002a      	movs	r2, r5
   129e2:	2300      	movs	r3, #0
   129e4:	e77e      	b.n	128e4 <__aeabi_fadd+0x98>
   129e6:	0033      	movs	r3, r6
   129e8:	4a60      	ldr	r2, [pc, #384]	; (12b6c <__aeabi_fadd+0x320>)
   129ea:	1a24      	subs	r4, r4, r0
   129ec:	4013      	ands	r3, r2
   129ee:	e768      	b.n	128c2 <__aeabi_fadd+0x76>
   129f0:	2900      	cmp	r1, #0
   129f2:	d163      	bne.n	12abc <__aeabi_fadd+0x270>
   129f4:	1c61      	adds	r1, r4, #1
   129f6:	b2c8      	uxtb	r0, r1
   129f8:	2801      	cmp	r0, #1
   129fa:	dd4e      	ble.n	12a9a <__aeabi_fadd+0x24e>
   129fc:	29ff      	cmp	r1, #255	; 0xff
   129fe:	d049      	beq.n	12a94 <__aeabi_fadd+0x248>
   12a00:	4463      	add	r3, ip
   12a02:	085b      	lsrs	r3, r3, #1
   12a04:	000c      	movs	r4, r1
   12a06:	e75c      	b.n	128c2 <__aeabi_fadd+0x76>
   12a08:	2aff      	cmp	r2, #255	; 0xff
   12a0a:	d041      	beq.n	12a90 <__aeabi_fadd+0x244>
   12a0c:	000a      	movs	r2, r1
   12a0e:	e779      	b.n	12904 <__aeabi_fadd+0xb8>
   12a10:	2201      	movs	r2, #1
   12a12:	1a9b      	subs	r3, r3, r2
   12a14:	e784      	b.n	12920 <__aeabi_fadd+0xd4>
   12a16:	2c00      	cmp	r4, #0
   12a18:	d01d      	beq.n	12a56 <__aeabi_fadd+0x20a>
   12a1a:	28ff      	cmp	r0, #255	; 0xff
   12a1c:	d022      	beq.n	12a64 <__aeabi_fadd+0x218>
   12a1e:	2480      	movs	r4, #128	; 0x80
   12a20:	04e4      	lsls	r4, r4, #19
   12a22:	4252      	negs	r2, r2
   12a24:	4323      	orrs	r3, r4
   12a26:	2a1b      	cmp	r2, #27
   12a28:	dd00      	ble.n	12a2c <__aeabi_fadd+0x1e0>
   12a2a:	e08a      	b.n	12b42 <__aeabi_fadd+0x2f6>
   12a2c:	001c      	movs	r4, r3
   12a2e:	2520      	movs	r5, #32
   12a30:	40d4      	lsrs	r4, r2
   12a32:	1aaa      	subs	r2, r5, r2
   12a34:	4093      	lsls	r3, r2
   12a36:	1e5a      	subs	r2, r3, #1
   12a38:	4193      	sbcs	r3, r2
   12a3a:	4323      	orrs	r3, r4
   12a3c:	4662      	mov	r2, ip
   12a3e:	0004      	movs	r4, r0
   12a40:	1ad3      	subs	r3, r2, r3
   12a42:	000d      	movs	r5, r1
   12a44:	e725      	b.n	12892 <__aeabi_fadd+0x46>
   12a46:	2e00      	cmp	r6, #0
   12a48:	d000      	beq.n	12a4c <__aeabi_fadd+0x200>
   12a4a:	e726      	b.n	1289a <__aeabi_fadd+0x4e>
   12a4c:	2200      	movs	r2, #0
   12a4e:	2400      	movs	r4, #0
   12a50:	e7a9      	b.n	129a6 <__aeabi_fadd+0x15a>
   12a52:	000c      	movs	r4, r1
   12a54:	e735      	b.n	128c2 <__aeabi_fadd+0x76>
   12a56:	2b00      	cmp	r3, #0
   12a58:	d04d      	beq.n	12af6 <__aeabi_fadd+0x2aa>
   12a5a:	43d2      	mvns	r2, r2
   12a5c:	2a00      	cmp	r2, #0
   12a5e:	d0ed      	beq.n	12a3c <__aeabi_fadd+0x1f0>
   12a60:	28ff      	cmp	r0, #255	; 0xff
   12a62:	d1e0      	bne.n	12a26 <__aeabi_fadd+0x1da>
   12a64:	4663      	mov	r3, ip
   12a66:	24ff      	movs	r4, #255	; 0xff
   12a68:	000d      	movs	r5, r1
   12a6a:	e72a      	b.n	128c2 <__aeabi_fadd+0x76>
   12a6c:	29ff      	cmp	r1, #255	; 0xff
   12a6e:	d00f      	beq.n	12a90 <__aeabi_fadd+0x244>
   12a70:	0001      	movs	r1, r0
   12a72:	e773      	b.n	1295c <__aeabi_fadd+0x110>
   12a74:	2b00      	cmp	r3, #0
   12a76:	d061      	beq.n	12b3c <__aeabi_fadd+0x2f0>
   12a78:	24ff      	movs	r4, #255	; 0xff
   12a7a:	2f00      	cmp	r7, #0
   12a7c:	d100      	bne.n	12a80 <__aeabi_fadd+0x234>
   12a7e:	e720      	b.n	128c2 <__aeabi_fadd+0x76>
   12a80:	2280      	movs	r2, #128	; 0x80
   12a82:	4641      	mov	r1, r8
   12a84:	03d2      	lsls	r2, r2, #15
   12a86:	4211      	tst	r1, r2
   12a88:	d002      	beq.n	12a90 <__aeabi_fadd+0x244>
   12a8a:	4216      	tst	r6, r2
   12a8c:	d100      	bne.n	12a90 <__aeabi_fadd+0x244>
   12a8e:	003b      	movs	r3, r7
   12a90:	24ff      	movs	r4, #255	; 0xff
   12a92:	e716      	b.n	128c2 <__aeabi_fadd+0x76>
   12a94:	24ff      	movs	r4, #255	; 0xff
   12a96:	2300      	movs	r3, #0
   12a98:	e724      	b.n	128e4 <__aeabi_fadd+0x98>
   12a9a:	2c00      	cmp	r4, #0
   12a9c:	d1ea      	bne.n	12a74 <__aeabi_fadd+0x228>
   12a9e:	2b00      	cmp	r3, #0
   12aa0:	d058      	beq.n	12b54 <__aeabi_fadd+0x308>
   12aa2:	2f00      	cmp	r7, #0
   12aa4:	d100      	bne.n	12aa8 <__aeabi_fadd+0x25c>
   12aa6:	e70c      	b.n	128c2 <__aeabi_fadd+0x76>
   12aa8:	4463      	add	r3, ip
   12aaa:	015a      	lsls	r2, r3, #5
   12aac:	d400      	bmi.n	12ab0 <__aeabi_fadd+0x264>
   12aae:	e739      	b.n	12924 <__aeabi_fadd+0xd8>
   12ab0:	4a2e      	ldr	r2, [pc, #184]	; (12b6c <__aeabi_fadd+0x320>)
   12ab2:	000c      	movs	r4, r1
   12ab4:	4013      	ands	r3, r2
   12ab6:	e704      	b.n	128c2 <__aeabi_fadd+0x76>
   12ab8:	2101      	movs	r1, #1
   12aba:	e75c      	b.n	12976 <__aeabi_fadd+0x12a>
   12abc:	2c00      	cmp	r4, #0
   12abe:	d11e      	bne.n	12afe <__aeabi_fadd+0x2b2>
   12ac0:	2b00      	cmp	r3, #0
   12ac2:	d040      	beq.n	12b46 <__aeabi_fadd+0x2fa>
   12ac4:	43c9      	mvns	r1, r1
   12ac6:	2900      	cmp	r1, #0
   12ac8:	d00b      	beq.n	12ae2 <__aeabi_fadd+0x296>
   12aca:	28ff      	cmp	r0, #255	; 0xff
   12acc:	d036      	beq.n	12b3c <__aeabi_fadd+0x2f0>
   12ace:	291b      	cmp	r1, #27
   12ad0:	dc47      	bgt.n	12b62 <__aeabi_fadd+0x316>
   12ad2:	001c      	movs	r4, r3
   12ad4:	2620      	movs	r6, #32
   12ad6:	40cc      	lsrs	r4, r1
   12ad8:	1a71      	subs	r1, r6, r1
   12ada:	408b      	lsls	r3, r1
   12adc:	1e59      	subs	r1, r3, #1
   12ade:	418b      	sbcs	r3, r1
   12ae0:	4323      	orrs	r3, r4
   12ae2:	4463      	add	r3, ip
   12ae4:	0004      	movs	r4, r0
   12ae6:	e747      	b.n	12978 <__aeabi_fadd+0x12c>
   12ae8:	2b00      	cmp	r3, #0
   12aea:	d118      	bne.n	12b1e <__aeabi_fadd+0x2d2>
   12aec:	1e3b      	subs	r3, r7, #0
   12aee:	d02d      	beq.n	12b4c <__aeabi_fadd+0x300>
   12af0:	000d      	movs	r5, r1
   12af2:	24ff      	movs	r4, #255	; 0xff
   12af4:	e6e5      	b.n	128c2 <__aeabi_fadd+0x76>
   12af6:	003b      	movs	r3, r7
   12af8:	0004      	movs	r4, r0
   12afa:	000d      	movs	r5, r1
   12afc:	e6e1      	b.n	128c2 <__aeabi_fadd+0x76>
   12afe:	28ff      	cmp	r0, #255	; 0xff
   12b00:	d01c      	beq.n	12b3c <__aeabi_fadd+0x2f0>
   12b02:	2480      	movs	r4, #128	; 0x80
   12b04:	04e4      	lsls	r4, r4, #19
   12b06:	4249      	negs	r1, r1
   12b08:	4323      	orrs	r3, r4
   12b0a:	e7e0      	b.n	12ace <__aeabi_fadd+0x282>
   12b0c:	2f00      	cmp	r7, #0
   12b0e:	d100      	bne.n	12b12 <__aeabi_fadd+0x2c6>
   12b10:	e6d7      	b.n	128c2 <__aeabi_fadd+0x76>
   12b12:	1bde      	subs	r6, r3, r7
   12b14:	0172      	lsls	r2, r6, #5
   12b16:	d51f      	bpl.n	12b58 <__aeabi_fadd+0x30c>
   12b18:	1afb      	subs	r3, r7, r3
   12b1a:	000d      	movs	r5, r1
   12b1c:	e6d1      	b.n	128c2 <__aeabi_fadd+0x76>
   12b1e:	24ff      	movs	r4, #255	; 0xff
   12b20:	2f00      	cmp	r7, #0
   12b22:	d100      	bne.n	12b26 <__aeabi_fadd+0x2da>
   12b24:	e6cd      	b.n	128c2 <__aeabi_fadd+0x76>
   12b26:	2280      	movs	r2, #128	; 0x80
   12b28:	4640      	mov	r0, r8
   12b2a:	03d2      	lsls	r2, r2, #15
   12b2c:	4210      	tst	r0, r2
   12b2e:	d0af      	beq.n	12a90 <__aeabi_fadd+0x244>
   12b30:	4216      	tst	r6, r2
   12b32:	d1ad      	bne.n	12a90 <__aeabi_fadd+0x244>
   12b34:	003b      	movs	r3, r7
   12b36:	000d      	movs	r5, r1
   12b38:	24ff      	movs	r4, #255	; 0xff
   12b3a:	e6c2      	b.n	128c2 <__aeabi_fadd+0x76>
   12b3c:	4663      	mov	r3, ip
   12b3e:	24ff      	movs	r4, #255	; 0xff
   12b40:	e6bf      	b.n	128c2 <__aeabi_fadd+0x76>
   12b42:	2301      	movs	r3, #1
   12b44:	e77a      	b.n	12a3c <__aeabi_fadd+0x1f0>
   12b46:	003b      	movs	r3, r7
   12b48:	0004      	movs	r4, r0
   12b4a:	e6ba      	b.n	128c2 <__aeabi_fadd+0x76>
   12b4c:	2680      	movs	r6, #128	; 0x80
   12b4e:	2200      	movs	r2, #0
   12b50:	03f6      	lsls	r6, r6, #15
   12b52:	e6f0      	b.n	12936 <__aeabi_fadd+0xea>
   12b54:	003b      	movs	r3, r7
   12b56:	e6b4      	b.n	128c2 <__aeabi_fadd+0x76>
   12b58:	1e33      	subs	r3, r6, #0
   12b5a:	d000      	beq.n	12b5e <__aeabi_fadd+0x312>
   12b5c:	e6e2      	b.n	12924 <__aeabi_fadd+0xd8>
   12b5e:	2200      	movs	r2, #0
   12b60:	e721      	b.n	129a6 <__aeabi_fadd+0x15a>
   12b62:	2301      	movs	r3, #1
   12b64:	e7bd      	b.n	12ae2 <__aeabi_fadd+0x296>
   12b66:	46c0      	nop			; (mov r8, r8)
   12b68:	7dffffff 	.word	0x7dffffff
   12b6c:	fbffffff 	.word	0xfbffffff

00012b70 <__aeabi_fdiv>:
   12b70:	b5f0      	push	{r4, r5, r6, r7, lr}
   12b72:	4657      	mov	r7, sl
   12b74:	464e      	mov	r6, r9
   12b76:	46de      	mov	lr, fp
   12b78:	4645      	mov	r5, r8
   12b7a:	b5e0      	push	{r5, r6, r7, lr}
   12b7c:	0244      	lsls	r4, r0, #9
   12b7e:	0043      	lsls	r3, r0, #1
   12b80:	0fc6      	lsrs	r6, r0, #31
   12b82:	b083      	sub	sp, #12
   12b84:	1c0f      	adds	r7, r1, #0
   12b86:	0a64      	lsrs	r4, r4, #9
   12b88:	0e1b      	lsrs	r3, r3, #24
   12b8a:	46b2      	mov	sl, r6
   12b8c:	d053      	beq.n	12c36 <__aeabi_fdiv+0xc6>
   12b8e:	2bff      	cmp	r3, #255	; 0xff
   12b90:	d027      	beq.n	12be2 <__aeabi_fdiv+0x72>
   12b92:	2280      	movs	r2, #128	; 0x80
   12b94:	00e4      	lsls	r4, r4, #3
   12b96:	04d2      	lsls	r2, r2, #19
   12b98:	4314      	orrs	r4, r2
   12b9a:	227f      	movs	r2, #127	; 0x7f
   12b9c:	4252      	negs	r2, r2
   12b9e:	4690      	mov	r8, r2
   12ba0:	4498      	add	r8, r3
   12ba2:	2300      	movs	r3, #0
   12ba4:	4699      	mov	r9, r3
   12ba6:	469b      	mov	fp, r3
   12ba8:	027d      	lsls	r5, r7, #9
   12baa:	0078      	lsls	r0, r7, #1
   12bac:	0ffb      	lsrs	r3, r7, #31
   12bae:	0a6d      	lsrs	r5, r5, #9
   12bb0:	0e00      	lsrs	r0, r0, #24
   12bb2:	9300      	str	r3, [sp, #0]
   12bb4:	d024      	beq.n	12c00 <__aeabi_fdiv+0x90>
   12bb6:	28ff      	cmp	r0, #255	; 0xff
   12bb8:	d046      	beq.n	12c48 <__aeabi_fdiv+0xd8>
   12bba:	2380      	movs	r3, #128	; 0x80
   12bbc:	2100      	movs	r1, #0
   12bbe:	00ed      	lsls	r5, r5, #3
   12bc0:	04db      	lsls	r3, r3, #19
   12bc2:	431d      	orrs	r5, r3
   12bc4:	387f      	subs	r0, #127	; 0x7f
   12bc6:	4647      	mov	r7, r8
   12bc8:	1a38      	subs	r0, r7, r0
   12bca:	464f      	mov	r7, r9
   12bcc:	430f      	orrs	r7, r1
   12bce:	00bf      	lsls	r7, r7, #2
   12bd0:	46b9      	mov	r9, r7
   12bd2:	0033      	movs	r3, r6
   12bd4:	9a00      	ldr	r2, [sp, #0]
   12bd6:	4f87      	ldr	r7, [pc, #540]	; (12df4 <__aeabi_fdiv+0x284>)
   12bd8:	4053      	eors	r3, r2
   12bda:	464a      	mov	r2, r9
   12bdc:	58ba      	ldr	r2, [r7, r2]
   12bde:	9301      	str	r3, [sp, #4]
   12be0:	4697      	mov	pc, r2
   12be2:	2c00      	cmp	r4, #0
   12be4:	d14e      	bne.n	12c84 <__aeabi_fdiv+0x114>
   12be6:	2308      	movs	r3, #8
   12be8:	4699      	mov	r9, r3
   12bea:	33f7      	adds	r3, #247	; 0xf7
   12bec:	4698      	mov	r8, r3
   12bee:	3bfd      	subs	r3, #253	; 0xfd
   12bf0:	469b      	mov	fp, r3
   12bf2:	027d      	lsls	r5, r7, #9
   12bf4:	0078      	lsls	r0, r7, #1
   12bf6:	0ffb      	lsrs	r3, r7, #31
   12bf8:	0a6d      	lsrs	r5, r5, #9
   12bfa:	0e00      	lsrs	r0, r0, #24
   12bfc:	9300      	str	r3, [sp, #0]
   12bfe:	d1da      	bne.n	12bb6 <__aeabi_fdiv+0x46>
   12c00:	2d00      	cmp	r5, #0
   12c02:	d126      	bne.n	12c52 <__aeabi_fdiv+0xe2>
   12c04:	2000      	movs	r0, #0
   12c06:	2101      	movs	r1, #1
   12c08:	0033      	movs	r3, r6
   12c0a:	9a00      	ldr	r2, [sp, #0]
   12c0c:	4f7a      	ldr	r7, [pc, #488]	; (12df8 <__aeabi_fdiv+0x288>)
   12c0e:	4053      	eors	r3, r2
   12c10:	4642      	mov	r2, r8
   12c12:	1a10      	subs	r0, r2, r0
   12c14:	464a      	mov	r2, r9
   12c16:	430a      	orrs	r2, r1
   12c18:	0092      	lsls	r2, r2, #2
   12c1a:	58ba      	ldr	r2, [r7, r2]
   12c1c:	001d      	movs	r5, r3
   12c1e:	4697      	mov	pc, r2
   12c20:	9b00      	ldr	r3, [sp, #0]
   12c22:	002c      	movs	r4, r5
   12c24:	469a      	mov	sl, r3
   12c26:	468b      	mov	fp, r1
   12c28:	465b      	mov	r3, fp
   12c2a:	2b02      	cmp	r3, #2
   12c2c:	d131      	bne.n	12c92 <__aeabi_fdiv+0x122>
   12c2e:	4653      	mov	r3, sl
   12c30:	21ff      	movs	r1, #255	; 0xff
   12c32:	2400      	movs	r4, #0
   12c34:	e038      	b.n	12ca8 <__aeabi_fdiv+0x138>
   12c36:	2c00      	cmp	r4, #0
   12c38:	d117      	bne.n	12c6a <__aeabi_fdiv+0xfa>
   12c3a:	2304      	movs	r3, #4
   12c3c:	4699      	mov	r9, r3
   12c3e:	2300      	movs	r3, #0
   12c40:	4698      	mov	r8, r3
   12c42:	3301      	adds	r3, #1
   12c44:	469b      	mov	fp, r3
   12c46:	e7af      	b.n	12ba8 <__aeabi_fdiv+0x38>
   12c48:	20ff      	movs	r0, #255	; 0xff
   12c4a:	2d00      	cmp	r5, #0
   12c4c:	d10b      	bne.n	12c66 <__aeabi_fdiv+0xf6>
   12c4e:	2102      	movs	r1, #2
   12c50:	e7da      	b.n	12c08 <__aeabi_fdiv+0x98>
   12c52:	0028      	movs	r0, r5
   12c54:	f001 ffc4 	bl	14be0 <__clzsi2>
   12c58:	1f43      	subs	r3, r0, #5
   12c5a:	409d      	lsls	r5, r3
   12c5c:	2376      	movs	r3, #118	; 0x76
   12c5e:	425b      	negs	r3, r3
   12c60:	1a18      	subs	r0, r3, r0
   12c62:	2100      	movs	r1, #0
   12c64:	e7af      	b.n	12bc6 <__aeabi_fdiv+0x56>
   12c66:	2103      	movs	r1, #3
   12c68:	e7ad      	b.n	12bc6 <__aeabi_fdiv+0x56>
   12c6a:	0020      	movs	r0, r4
   12c6c:	f001 ffb8 	bl	14be0 <__clzsi2>
   12c70:	1f43      	subs	r3, r0, #5
   12c72:	409c      	lsls	r4, r3
   12c74:	2376      	movs	r3, #118	; 0x76
   12c76:	425b      	negs	r3, r3
   12c78:	1a1b      	subs	r3, r3, r0
   12c7a:	4698      	mov	r8, r3
   12c7c:	2300      	movs	r3, #0
   12c7e:	4699      	mov	r9, r3
   12c80:	469b      	mov	fp, r3
   12c82:	e791      	b.n	12ba8 <__aeabi_fdiv+0x38>
   12c84:	230c      	movs	r3, #12
   12c86:	4699      	mov	r9, r3
   12c88:	33f3      	adds	r3, #243	; 0xf3
   12c8a:	4698      	mov	r8, r3
   12c8c:	3bfc      	subs	r3, #252	; 0xfc
   12c8e:	469b      	mov	fp, r3
   12c90:	e78a      	b.n	12ba8 <__aeabi_fdiv+0x38>
   12c92:	2b03      	cmp	r3, #3
   12c94:	d100      	bne.n	12c98 <__aeabi_fdiv+0x128>
   12c96:	e0a5      	b.n	12de4 <__aeabi_fdiv+0x274>
   12c98:	4655      	mov	r5, sl
   12c9a:	2b01      	cmp	r3, #1
   12c9c:	d000      	beq.n	12ca0 <__aeabi_fdiv+0x130>
   12c9e:	e081      	b.n	12da4 <__aeabi_fdiv+0x234>
   12ca0:	2301      	movs	r3, #1
   12ca2:	2100      	movs	r1, #0
   12ca4:	2400      	movs	r4, #0
   12ca6:	402b      	ands	r3, r5
   12ca8:	0264      	lsls	r4, r4, #9
   12caa:	05c9      	lsls	r1, r1, #23
   12cac:	0a60      	lsrs	r0, r4, #9
   12cae:	07db      	lsls	r3, r3, #31
   12cb0:	4308      	orrs	r0, r1
   12cb2:	4318      	orrs	r0, r3
   12cb4:	b003      	add	sp, #12
   12cb6:	bc3c      	pop	{r2, r3, r4, r5}
   12cb8:	4690      	mov	r8, r2
   12cba:	4699      	mov	r9, r3
   12cbc:	46a2      	mov	sl, r4
   12cbe:	46ab      	mov	fp, r5
   12cc0:	bdf0      	pop	{r4, r5, r6, r7, pc}
   12cc2:	2480      	movs	r4, #128	; 0x80
   12cc4:	2300      	movs	r3, #0
   12cc6:	03e4      	lsls	r4, r4, #15
   12cc8:	21ff      	movs	r1, #255	; 0xff
   12cca:	e7ed      	b.n	12ca8 <__aeabi_fdiv+0x138>
   12ccc:	21ff      	movs	r1, #255	; 0xff
   12cce:	2400      	movs	r4, #0
   12cd0:	e7ea      	b.n	12ca8 <__aeabi_fdiv+0x138>
   12cd2:	2301      	movs	r3, #1
   12cd4:	1a59      	subs	r1, r3, r1
   12cd6:	291b      	cmp	r1, #27
   12cd8:	dd66      	ble.n	12da8 <__aeabi_fdiv+0x238>
   12cda:	9a01      	ldr	r2, [sp, #4]
   12cdc:	4013      	ands	r3, r2
   12cde:	2100      	movs	r1, #0
   12ce0:	2400      	movs	r4, #0
   12ce2:	e7e1      	b.n	12ca8 <__aeabi_fdiv+0x138>
   12ce4:	2380      	movs	r3, #128	; 0x80
   12ce6:	03db      	lsls	r3, r3, #15
   12ce8:	421c      	tst	r4, r3
   12cea:	d038      	beq.n	12d5e <__aeabi_fdiv+0x1ee>
   12cec:	421d      	tst	r5, r3
   12cee:	d051      	beq.n	12d94 <__aeabi_fdiv+0x224>
   12cf0:	431c      	orrs	r4, r3
   12cf2:	0264      	lsls	r4, r4, #9
   12cf4:	0a64      	lsrs	r4, r4, #9
   12cf6:	0033      	movs	r3, r6
   12cf8:	21ff      	movs	r1, #255	; 0xff
   12cfa:	e7d5      	b.n	12ca8 <__aeabi_fdiv+0x138>
   12cfc:	0163      	lsls	r3, r4, #5
   12cfe:	016c      	lsls	r4, r5, #5
   12d00:	42a3      	cmp	r3, r4
   12d02:	d23b      	bcs.n	12d7c <__aeabi_fdiv+0x20c>
   12d04:	261b      	movs	r6, #27
   12d06:	2100      	movs	r1, #0
   12d08:	3801      	subs	r0, #1
   12d0a:	2501      	movs	r5, #1
   12d0c:	001f      	movs	r7, r3
   12d0e:	0049      	lsls	r1, r1, #1
   12d10:	005b      	lsls	r3, r3, #1
   12d12:	2f00      	cmp	r7, #0
   12d14:	db01      	blt.n	12d1a <__aeabi_fdiv+0x1aa>
   12d16:	429c      	cmp	r4, r3
   12d18:	d801      	bhi.n	12d1e <__aeabi_fdiv+0x1ae>
   12d1a:	1b1b      	subs	r3, r3, r4
   12d1c:	4329      	orrs	r1, r5
   12d1e:	3e01      	subs	r6, #1
   12d20:	2e00      	cmp	r6, #0
   12d22:	d1f3      	bne.n	12d0c <__aeabi_fdiv+0x19c>
   12d24:	001c      	movs	r4, r3
   12d26:	1e63      	subs	r3, r4, #1
   12d28:	419c      	sbcs	r4, r3
   12d2a:	430c      	orrs	r4, r1
   12d2c:	0001      	movs	r1, r0
   12d2e:	317f      	adds	r1, #127	; 0x7f
   12d30:	2900      	cmp	r1, #0
   12d32:	ddce      	ble.n	12cd2 <__aeabi_fdiv+0x162>
   12d34:	0763      	lsls	r3, r4, #29
   12d36:	d004      	beq.n	12d42 <__aeabi_fdiv+0x1d2>
   12d38:	230f      	movs	r3, #15
   12d3a:	4023      	ands	r3, r4
   12d3c:	2b04      	cmp	r3, #4
   12d3e:	d000      	beq.n	12d42 <__aeabi_fdiv+0x1d2>
   12d40:	3404      	adds	r4, #4
   12d42:	0123      	lsls	r3, r4, #4
   12d44:	d503      	bpl.n	12d4e <__aeabi_fdiv+0x1de>
   12d46:	0001      	movs	r1, r0
   12d48:	4b2c      	ldr	r3, [pc, #176]	; (12dfc <__aeabi_fdiv+0x28c>)
   12d4a:	3180      	adds	r1, #128	; 0x80
   12d4c:	401c      	ands	r4, r3
   12d4e:	29fe      	cmp	r1, #254	; 0xfe
   12d50:	dd0d      	ble.n	12d6e <__aeabi_fdiv+0x1fe>
   12d52:	2301      	movs	r3, #1
   12d54:	9a01      	ldr	r2, [sp, #4]
   12d56:	21ff      	movs	r1, #255	; 0xff
   12d58:	4013      	ands	r3, r2
   12d5a:	2400      	movs	r4, #0
   12d5c:	e7a4      	b.n	12ca8 <__aeabi_fdiv+0x138>
   12d5e:	2380      	movs	r3, #128	; 0x80
   12d60:	03db      	lsls	r3, r3, #15
   12d62:	431c      	orrs	r4, r3
   12d64:	0264      	lsls	r4, r4, #9
   12d66:	0a64      	lsrs	r4, r4, #9
   12d68:	0033      	movs	r3, r6
   12d6a:	21ff      	movs	r1, #255	; 0xff
   12d6c:	e79c      	b.n	12ca8 <__aeabi_fdiv+0x138>
   12d6e:	2301      	movs	r3, #1
   12d70:	9a01      	ldr	r2, [sp, #4]
   12d72:	01a4      	lsls	r4, r4, #6
   12d74:	0a64      	lsrs	r4, r4, #9
   12d76:	b2c9      	uxtb	r1, r1
   12d78:	4013      	ands	r3, r2
   12d7a:	e795      	b.n	12ca8 <__aeabi_fdiv+0x138>
   12d7c:	1b1b      	subs	r3, r3, r4
   12d7e:	261a      	movs	r6, #26
   12d80:	2101      	movs	r1, #1
   12d82:	e7c2      	b.n	12d0a <__aeabi_fdiv+0x19a>
   12d84:	9b00      	ldr	r3, [sp, #0]
   12d86:	468b      	mov	fp, r1
   12d88:	469a      	mov	sl, r3
   12d8a:	2400      	movs	r4, #0
   12d8c:	e74c      	b.n	12c28 <__aeabi_fdiv+0xb8>
   12d8e:	0263      	lsls	r3, r4, #9
   12d90:	d5e5      	bpl.n	12d5e <__aeabi_fdiv+0x1ee>
   12d92:	2500      	movs	r5, #0
   12d94:	2480      	movs	r4, #128	; 0x80
   12d96:	03e4      	lsls	r4, r4, #15
   12d98:	432c      	orrs	r4, r5
   12d9a:	0264      	lsls	r4, r4, #9
   12d9c:	0a64      	lsrs	r4, r4, #9
   12d9e:	9b00      	ldr	r3, [sp, #0]
   12da0:	21ff      	movs	r1, #255	; 0xff
   12da2:	e781      	b.n	12ca8 <__aeabi_fdiv+0x138>
   12da4:	9501      	str	r5, [sp, #4]
   12da6:	e7c1      	b.n	12d2c <__aeabi_fdiv+0x1bc>
   12da8:	0023      	movs	r3, r4
   12daa:	2020      	movs	r0, #32
   12dac:	40cb      	lsrs	r3, r1
   12dae:	1a41      	subs	r1, r0, r1
   12db0:	408c      	lsls	r4, r1
   12db2:	1e61      	subs	r1, r4, #1
   12db4:	418c      	sbcs	r4, r1
   12db6:	431c      	orrs	r4, r3
   12db8:	0763      	lsls	r3, r4, #29
   12dba:	d004      	beq.n	12dc6 <__aeabi_fdiv+0x256>
   12dbc:	230f      	movs	r3, #15
   12dbe:	4023      	ands	r3, r4
   12dc0:	2b04      	cmp	r3, #4
   12dc2:	d000      	beq.n	12dc6 <__aeabi_fdiv+0x256>
   12dc4:	3404      	adds	r4, #4
   12dc6:	0163      	lsls	r3, r4, #5
   12dc8:	d505      	bpl.n	12dd6 <__aeabi_fdiv+0x266>
   12dca:	2301      	movs	r3, #1
   12dcc:	9a01      	ldr	r2, [sp, #4]
   12dce:	2101      	movs	r1, #1
   12dd0:	4013      	ands	r3, r2
   12dd2:	2400      	movs	r4, #0
   12dd4:	e768      	b.n	12ca8 <__aeabi_fdiv+0x138>
   12dd6:	2301      	movs	r3, #1
   12dd8:	9a01      	ldr	r2, [sp, #4]
   12dda:	01a4      	lsls	r4, r4, #6
   12ddc:	0a64      	lsrs	r4, r4, #9
   12dde:	4013      	ands	r3, r2
   12de0:	2100      	movs	r1, #0
   12de2:	e761      	b.n	12ca8 <__aeabi_fdiv+0x138>
   12de4:	2380      	movs	r3, #128	; 0x80
   12de6:	03db      	lsls	r3, r3, #15
   12de8:	431c      	orrs	r4, r3
   12dea:	0264      	lsls	r4, r4, #9
   12dec:	0a64      	lsrs	r4, r4, #9
   12dee:	4653      	mov	r3, sl
   12df0:	21ff      	movs	r1, #255	; 0xff
   12df2:	e759      	b.n	12ca8 <__aeabi_fdiv+0x138>
   12df4:	000166cc 	.word	0x000166cc
   12df8:	0001670c 	.word	0x0001670c
   12dfc:	f7ffffff 	.word	0xf7ffffff

00012e00 <__eqsf2>:
   12e00:	b570      	push	{r4, r5, r6, lr}
   12e02:	0042      	lsls	r2, r0, #1
   12e04:	0245      	lsls	r5, r0, #9
   12e06:	024e      	lsls	r6, r1, #9
   12e08:	004c      	lsls	r4, r1, #1
   12e0a:	0fc3      	lsrs	r3, r0, #31
   12e0c:	0a6d      	lsrs	r5, r5, #9
   12e0e:	0e12      	lsrs	r2, r2, #24
   12e10:	0a76      	lsrs	r6, r6, #9
   12e12:	0e24      	lsrs	r4, r4, #24
   12e14:	0fc9      	lsrs	r1, r1, #31
   12e16:	2001      	movs	r0, #1
   12e18:	2aff      	cmp	r2, #255	; 0xff
   12e1a:	d006      	beq.n	12e2a <__eqsf2+0x2a>
   12e1c:	2cff      	cmp	r4, #255	; 0xff
   12e1e:	d003      	beq.n	12e28 <__eqsf2+0x28>
   12e20:	42a2      	cmp	r2, r4
   12e22:	d101      	bne.n	12e28 <__eqsf2+0x28>
   12e24:	42b5      	cmp	r5, r6
   12e26:	d006      	beq.n	12e36 <__eqsf2+0x36>
   12e28:	bd70      	pop	{r4, r5, r6, pc}
   12e2a:	2d00      	cmp	r5, #0
   12e2c:	d1fc      	bne.n	12e28 <__eqsf2+0x28>
   12e2e:	2cff      	cmp	r4, #255	; 0xff
   12e30:	d1fa      	bne.n	12e28 <__eqsf2+0x28>
   12e32:	2e00      	cmp	r6, #0
   12e34:	d1f8      	bne.n	12e28 <__eqsf2+0x28>
   12e36:	428b      	cmp	r3, r1
   12e38:	d006      	beq.n	12e48 <__eqsf2+0x48>
   12e3a:	2001      	movs	r0, #1
   12e3c:	2a00      	cmp	r2, #0
   12e3e:	d1f3      	bne.n	12e28 <__eqsf2+0x28>
   12e40:	0028      	movs	r0, r5
   12e42:	1e45      	subs	r5, r0, #1
   12e44:	41a8      	sbcs	r0, r5
   12e46:	e7ef      	b.n	12e28 <__eqsf2+0x28>
   12e48:	2000      	movs	r0, #0
   12e4a:	e7ed      	b.n	12e28 <__eqsf2+0x28>

00012e4c <__gesf2>:
   12e4c:	b5f0      	push	{r4, r5, r6, r7, lr}
   12e4e:	0042      	lsls	r2, r0, #1
   12e50:	0245      	lsls	r5, r0, #9
   12e52:	024c      	lsls	r4, r1, #9
   12e54:	0fc3      	lsrs	r3, r0, #31
   12e56:	0048      	lsls	r0, r1, #1
   12e58:	0a6d      	lsrs	r5, r5, #9
   12e5a:	0e12      	lsrs	r2, r2, #24
   12e5c:	0a64      	lsrs	r4, r4, #9
   12e5e:	0e00      	lsrs	r0, r0, #24
   12e60:	0fc9      	lsrs	r1, r1, #31
   12e62:	2aff      	cmp	r2, #255	; 0xff
   12e64:	d01e      	beq.n	12ea4 <__gesf2+0x58>
   12e66:	28ff      	cmp	r0, #255	; 0xff
   12e68:	d021      	beq.n	12eae <__gesf2+0x62>
   12e6a:	2a00      	cmp	r2, #0
   12e6c:	d10a      	bne.n	12e84 <__gesf2+0x38>
   12e6e:	426e      	negs	r6, r5
   12e70:	416e      	adcs	r6, r5
   12e72:	b2f6      	uxtb	r6, r6
   12e74:	2800      	cmp	r0, #0
   12e76:	d10f      	bne.n	12e98 <__gesf2+0x4c>
   12e78:	2c00      	cmp	r4, #0
   12e7a:	d10d      	bne.n	12e98 <__gesf2+0x4c>
   12e7c:	2000      	movs	r0, #0
   12e7e:	2d00      	cmp	r5, #0
   12e80:	d009      	beq.n	12e96 <__gesf2+0x4a>
   12e82:	e005      	b.n	12e90 <__gesf2+0x44>
   12e84:	2800      	cmp	r0, #0
   12e86:	d101      	bne.n	12e8c <__gesf2+0x40>
   12e88:	2c00      	cmp	r4, #0
   12e8a:	d001      	beq.n	12e90 <__gesf2+0x44>
   12e8c:	428b      	cmp	r3, r1
   12e8e:	d011      	beq.n	12eb4 <__gesf2+0x68>
   12e90:	2101      	movs	r1, #1
   12e92:	4258      	negs	r0, r3
   12e94:	4308      	orrs	r0, r1
   12e96:	bdf0      	pop	{r4, r5, r6, r7, pc}
   12e98:	2e00      	cmp	r6, #0
   12e9a:	d0f7      	beq.n	12e8c <__gesf2+0x40>
   12e9c:	2001      	movs	r0, #1
   12e9e:	3901      	subs	r1, #1
   12ea0:	4308      	orrs	r0, r1
   12ea2:	e7f8      	b.n	12e96 <__gesf2+0x4a>
   12ea4:	2d00      	cmp	r5, #0
   12ea6:	d0de      	beq.n	12e66 <__gesf2+0x1a>
   12ea8:	2002      	movs	r0, #2
   12eaa:	4240      	negs	r0, r0
   12eac:	e7f3      	b.n	12e96 <__gesf2+0x4a>
   12eae:	2c00      	cmp	r4, #0
   12eb0:	d0db      	beq.n	12e6a <__gesf2+0x1e>
   12eb2:	e7f9      	b.n	12ea8 <__gesf2+0x5c>
   12eb4:	4282      	cmp	r2, r0
   12eb6:	dceb      	bgt.n	12e90 <__gesf2+0x44>
   12eb8:	db04      	blt.n	12ec4 <__gesf2+0x78>
   12eba:	42a5      	cmp	r5, r4
   12ebc:	d8e8      	bhi.n	12e90 <__gesf2+0x44>
   12ebe:	2000      	movs	r0, #0
   12ec0:	42a5      	cmp	r5, r4
   12ec2:	d2e8      	bcs.n	12e96 <__gesf2+0x4a>
   12ec4:	2101      	movs	r1, #1
   12ec6:	1e58      	subs	r0, r3, #1
   12ec8:	4308      	orrs	r0, r1
   12eca:	e7e4      	b.n	12e96 <__gesf2+0x4a>

00012ecc <__lesf2>:
   12ecc:	b5f0      	push	{r4, r5, r6, r7, lr}
   12ece:	0042      	lsls	r2, r0, #1
   12ed0:	024d      	lsls	r5, r1, #9
   12ed2:	004c      	lsls	r4, r1, #1
   12ed4:	0246      	lsls	r6, r0, #9
   12ed6:	0a76      	lsrs	r6, r6, #9
   12ed8:	0e12      	lsrs	r2, r2, #24
   12eda:	0fc3      	lsrs	r3, r0, #31
   12edc:	0a6d      	lsrs	r5, r5, #9
   12ede:	0e24      	lsrs	r4, r4, #24
   12ee0:	0fc9      	lsrs	r1, r1, #31
   12ee2:	2aff      	cmp	r2, #255	; 0xff
   12ee4:	d016      	beq.n	12f14 <__lesf2+0x48>
   12ee6:	2cff      	cmp	r4, #255	; 0xff
   12ee8:	d018      	beq.n	12f1c <__lesf2+0x50>
   12eea:	2a00      	cmp	r2, #0
   12eec:	d10a      	bne.n	12f04 <__lesf2+0x38>
   12eee:	4270      	negs	r0, r6
   12ef0:	4170      	adcs	r0, r6
   12ef2:	b2c0      	uxtb	r0, r0
   12ef4:	2c00      	cmp	r4, #0
   12ef6:	d015      	beq.n	12f24 <__lesf2+0x58>
   12ef8:	2800      	cmp	r0, #0
   12efa:	d005      	beq.n	12f08 <__lesf2+0x3c>
   12efc:	2001      	movs	r0, #1
   12efe:	3901      	subs	r1, #1
   12f00:	4308      	orrs	r0, r1
   12f02:	bdf0      	pop	{r4, r5, r6, r7, pc}
   12f04:	2c00      	cmp	r4, #0
   12f06:	d013      	beq.n	12f30 <__lesf2+0x64>
   12f08:	4299      	cmp	r1, r3
   12f0a:	d014      	beq.n	12f36 <__lesf2+0x6a>
   12f0c:	2001      	movs	r0, #1
   12f0e:	425b      	negs	r3, r3
   12f10:	4318      	orrs	r0, r3
   12f12:	e7f6      	b.n	12f02 <__lesf2+0x36>
   12f14:	2002      	movs	r0, #2
   12f16:	2e00      	cmp	r6, #0
   12f18:	d1f3      	bne.n	12f02 <__lesf2+0x36>
   12f1a:	e7e4      	b.n	12ee6 <__lesf2+0x1a>
   12f1c:	2002      	movs	r0, #2
   12f1e:	2d00      	cmp	r5, #0
   12f20:	d1ef      	bne.n	12f02 <__lesf2+0x36>
   12f22:	e7e2      	b.n	12eea <__lesf2+0x1e>
   12f24:	2d00      	cmp	r5, #0
   12f26:	d1e7      	bne.n	12ef8 <__lesf2+0x2c>
   12f28:	2000      	movs	r0, #0
   12f2a:	2e00      	cmp	r6, #0
   12f2c:	d0e9      	beq.n	12f02 <__lesf2+0x36>
   12f2e:	e7ed      	b.n	12f0c <__lesf2+0x40>
   12f30:	2d00      	cmp	r5, #0
   12f32:	d1e9      	bne.n	12f08 <__lesf2+0x3c>
   12f34:	e7ea      	b.n	12f0c <__lesf2+0x40>
   12f36:	42a2      	cmp	r2, r4
   12f38:	dc06      	bgt.n	12f48 <__lesf2+0x7c>
   12f3a:	dbdf      	blt.n	12efc <__lesf2+0x30>
   12f3c:	42ae      	cmp	r6, r5
   12f3e:	d803      	bhi.n	12f48 <__lesf2+0x7c>
   12f40:	2000      	movs	r0, #0
   12f42:	42ae      	cmp	r6, r5
   12f44:	d3da      	bcc.n	12efc <__lesf2+0x30>
   12f46:	e7dc      	b.n	12f02 <__lesf2+0x36>
   12f48:	2001      	movs	r0, #1
   12f4a:	4249      	negs	r1, r1
   12f4c:	4308      	orrs	r0, r1
   12f4e:	e7d8      	b.n	12f02 <__lesf2+0x36>

00012f50 <__aeabi_fsub>:
   12f50:	b5f0      	push	{r4, r5, r6, r7, lr}
   12f52:	464f      	mov	r7, r9
   12f54:	46d6      	mov	lr, sl
   12f56:	4646      	mov	r6, r8
   12f58:	0044      	lsls	r4, r0, #1
   12f5a:	b5c0      	push	{r6, r7, lr}
   12f5c:	0fc2      	lsrs	r2, r0, #31
   12f5e:	0247      	lsls	r7, r0, #9
   12f60:	0248      	lsls	r0, r1, #9
   12f62:	0a40      	lsrs	r0, r0, #9
   12f64:	4684      	mov	ip, r0
   12f66:	4666      	mov	r6, ip
   12f68:	0a7b      	lsrs	r3, r7, #9
   12f6a:	0048      	lsls	r0, r1, #1
   12f6c:	0fc9      	lsrs	r1, r1, #31
   12f6e:	469a      	mov	sl, r3
   12f70:	0e24      	lsrs	r4, r4, #24
   12f72:	0015      	movs	r5, r2
   12f74:	00db      	lsls	r3, r3, #3
   12f76:	0e00      	lsrs	r0, r0, #24
   12f78:	4689      	mov	r9, r1
   12f7a:	00f6      	lsls	r6, r6, #3
   12f7c:	28ff      	cmp	r0, #255	; 0xff
   12f7e:	d100      	bne.n	12f82 <__aeabi_fsub+0x32>
   12f80:	e08f      	b.n	130a2 <__aeabi_fsub+0x152>
   12f82:	2101      	movs	r1, #1
   12f84:	464f      	mov	r7, r9
   12f86:	404f      	eors	r7, r1
   12f88:	0039      	movs	r1, r7
   12f8a:	4291      	cmp	r1, r2
   12f8c:	d066      	beq.n	1305c <__aeabi_fsub+0x10c>
   12f8e:	1a22      	subs	r2, r4, r0
   12f90:	2a00      	cmp	r2, #0
   12f92:	dc00      	bgt.n	12f96 <__aeabi_fsub+0x46>
   12f94:	e09d      	b.n	130d2 <__aeabi_fsub+0x182>
   12f96:	2800      	cmp	r0, #0
   12f98:	d13d      	bne.n	13016 <__aeabi_fsub+0xc6>
   12f9a:	2e00      	cmp	r6, #0
   12f9c:	d100      	bne.n	12fa0 <__aeabi_fsub+0x50>
   12f9e:	e08b      	b.n	130b8 <__aeabi_fsub+0x168>
   12fa0:	1e51      	subs	r1, r2, #1
   12fa2:	2900      	cmp	r1, #0
   12fa4:	d000      	beq.n	12fa8 <__aeabi_fsub+0x58>
   12fa6:	e0b5      	b.n	13114 <__aeabi_fsub+0x1c4>
   12fa8:	2401      	movs	r4, #1
   12faa:	1b9b      	subs	r3, r3, r6
   12fac:	015a      	lsls	r2, r3, #5
   12fae:	d544      	bpl.n	1303a <__aeabi_fsub+0xea>
   12fb0:	019b      	lsls	r3, r3, #6
   12fb2:	099f      	lsrs	r7, r3, #6
   12fb4:	0038      	movs	r0, r7
   12fb6:	f001 fe13 	bl	14be0 <__clzsi2>
   12fba:	3805      	subs	r0, #5
   12fbc:	4087      	lsls	r7, r0
   12fbe:	4284      	cmp	r4, r0
   12fc0:	dd00      	ble.n	12fc4 <__aeabi_fsub+0x74>
   12fc2:	e096      	b.n	130f2 <__aeabi_fsub+0x1a2>
   12fc4:	1b04      	subs	r4, r0, r4
   12fc6:	003a      	movs	r2, r7
   12fc8:	2020      	movs	r0, #32
   12fca:	3401      	adds	r4, #1
   12fcc:	40e2      	lsrs	r2, r4
   12fce:	1b04      	subs	r4, r0, r4
   12fd0:	40a7      	lsls	r7, r4
   12fd2:	003b      	movs	r3, r7
   12fd4:	1e5f      	subs	r7, r3, #1
   12fd6:	41bb      	sbcs	r3, r7
   12fd8:	2400      	movs	r4, #0
   12fda:	4313      	orrs	r3, r2
   12fdc:	075a      	lsls	r2, r3, #29
   12fde:	d004      	beq.n	12fea <__aeabi_fsub+0x9a>
   12fe0:	220f      	movs	r2, #15
   12fe2:	401a      	ands	r2, r3
   12fe4:	2a04      	cmp	r2, #4
   12fe6:	d000      	beq.n	12fea <__aeabi_fsub+0x9a>
   12fe8:	3304      	adds	r3, #4
   12fea:	015a      	lsls	r2, r3, #5
   12fec:	d527      	bpl.n	1303e <__aeabi_fsub+0xee>
   12fee:	3401      	adds	r4, #1
   12ff0:	2cff      	cmp	r4, #255	; 0xff
   12ff2:	d100      	bne.n	12ff6 <__aeabi_fsub+0xa6>
   12ff4:	e079      	b.n	130ea <__aeabi_fsub+0x19a>
   12ff6:	2201      	movs	r2, #1
   12ff8:	019b      	lsls	r3, r3, #6
   12ffa:	0a5b      	lsrs	r3, r3, #9
   12ffc:	b2e4      	uxtb	r4, r4
   12ffe:	402a      	ands	r2, r5
   13000:	025b      	lsls	r3, r3, #9
   13002:	05e4      	lsls	r4, r4, #23
   13004:	0a58      	lsrs	r0, r3, #9
   13006:	07d2      	lsls	r2, r2, #31
   13008:	4320      	orrs	r0, r4
   1300a:	4310      	orrs	r0, r2
   1300c:	bc1c      	pop	{r2, r3, r4}
   1300e:	4690      	mov	r8, r2
   13010:	4699      	mov	r9, r3
   13012:	46a2      	mov	sl, r4
   13014:	bdf0      	pop	{r4, r5, r6, r7, pc}
   13016:	2cff      	cmp	r4, #255	; 0xff
   13018:	d0e0      	beq.n	12fdc <__aeabi_fsub+0x8c>
   1301a:	2180      	movs	r1, #128	; 0x80
   1301c:	04c9      	lsls	r1, r1, #19
   1301e:	430e      	orrs	r6, r1
   13020:	2a1b      	cmp	r2, #27
   13022:	dc7b      	bgt.n	1311c <__aeabi_fsub+0x1cc>
   13024:	0031      	movs	r1, r6
   13026:	2020      	movs	r0, #32
   13028:	40d1      	lsrs	r1, r2
   1302a:	1a82      	subs	r2, r0, r2
   1302c:	4096      	lsls	r6, r2
   1302e:	1e72      	subs	r2, r6, #1
   13030:	4196      	sbcs	r6, r2
   13032:	430e      	orrs	r6, r1
   13034:	1b9b      	subs	r3, r3, r6
   13036:	015a      	lsls	r2, r3, #5
   13038:	d4ba      	bmi.n	12fb0 <__aeabi_fsub+0x60>
   1303a:	075a      	lsls	r2, r3, #29
   1303c:	d1d0      	bne.n	12fe0 <__aeabi_fsub+0x90>
   1303e:	2201      	movs	r2, #1
   13040:	08df      	lsrs	r7, r3, #3
   13042:	402a      	ands	r2, r5
   13044:	2cff      	cmp	r4, #255	; 0xff
   13046:	d133      	bne.n	130b0 <__aeabi_fsub+0x160>
   13048:	2f00      	cmp	r7, #0
   1304a:	d100      	bne.n	1304e <__aeabi_fsub+0xfe>
   1304c:	e0a8      	b.n	131a0 <__aeabi_fsub+0x250>
   1304e:	2380      	movs	r3, #128	; 0x80
   13050:	03db      	lsls	r3, r3, #15
   13052:	433b      	orrs	r3, r7
   13054:	025b      	lsls	r3, r3, #9
   13056:	0a5b      	lsrs	r3, r3, #9
   13058:	24ff      	movs	r4, #255	; 0xff
   1305a:	e7d1      	b.n	13000 <__aeabi_fsub+0xb0>
   1305c:	1a21      	subs	r1, r4, r0
   1305e:	2900      	cmp	r1, #0
   13060:	dd4c      	ble.n	130fc <__aeabi_fsub+0x1ac>
   13062:	2800      	cmp	r0, #0
   13064:	d02a      	beq.n	130bc <__aeabi_fsub+0x16c>
   13066:	2cff      	cmp	r4, #255	; 0xff
   13068:	d0b8      	beq.n	12fdc <__aeabi_fsub+0x8c>
   1306a:	2080      	movs	r0, #128	; 0x80
   1306c:	04c0      	lsls	r0, r0, #19
   1306e:	4306      	orrs	r6, r0
   13070:	291b      	cmp	r1, #27
   13072:	dd00      	ble.n	13076 <__aeabi_fsub+0x126>
   13074:	e0af      	b.n	131d6 <__aeabi_fsub+0x286>
   13076:	0030      	movs	r0, r6
   13078:	2720      	movs	r7, #32
   1307a:	40c8      	lsrs	r0, r1
   1307c:	1a79      	subs	r1, r7, r1
   1307e:	408e      	lsls	r6, r1
   13080:	1e71      	subs	r1, r6, #1
   13082:	418e      	sbcs	r6, r1
   13084:	4306      	orrs	r6, r0
   13086:	199b      	adds	r3, r3, r6
   13088:	0159      	lsls	r1, r3, #5
   1308a:	d5d6      	bpl.n	1303a <__aeabi_fsub+0xea>
   1308c:	3401      	adds	r4, #1
   1308e:	2cff      	cmp	r4, #255	; 0xff
   13090:	d100      	bne.n	13094 <__aeabi_fsub+0x144>
   13092:	e085      	b.n	131a0 <__aeabi_fsub+0x250>
   13094:	2201      	movs	r2, #1
   13096:	497a      	ldr	r1, [pc, #488]	; (13280 <__aeabi_fsub+0x330>)
   13098:	401a      	ands	r2, r3
   1309a:	085b      	lsrs	r3, r3, #1
   1309c:	400b      	ands	r3, r1
   1309e:	4313      	orrs	r3, r2
   130a0:	e79c      	b.n	12fdc <__aeabi_fsub+0x8c>
   130a2:	2e00      	cmp	r6, #0
   130a4:	d000      	beq.n	130a8 <__aeabi_fsub+0x158>
   130a6:	e770      	b.n	12f8a <__aeabi_fsub+0x3a>
   130a8:	e76b      	b.n	12f82 <__aeabi_fsub+0x32>
   130aa:	1e3b      	subs	r3, r7, #0
   130ac:	d1c5      	bne.n	1303a <__aeabi_fsub+0xea>
   130ae:	2200      	movs	r2, #0
   130b0:	027b      	lsls	r3, r7, #9
   130b2:	0a5b      	lsrs	r3, r3, #9
   130b4:	b2e4      	uxtb	r4, r4
   130b6:	e7a3      	b.n	13000 <__aeabi_fsub+0xb0>
   130b8:	0014      	movs	r4, r2
   130ba:	e78f      	b.n	12fdc <__aeabi_fsub+0x8c>
   130bc:	2e00      	cmp	r6, #0
   130be:	d04d      	beq.n	1315c <__aeabi_fsub+0x20c>
   130c0:	1e48      	subs	r0, r1, #1
   130c2:	2800      	cmp	r0, #0
   130c4:	d157      	bne.n	13176 <__aeabi_fsub+0x226>
   130c6:	199b      	adds	r3, r3, r6
   130c8:	2401      	movs	r4, #1
   130ca:	015a      	lsls	r2, r3, #5
   130cc:	d5b5      	bpl.n	1303a <__aeabi_fsub+0xea>
   130ce:	2402      	movs	r4, #2
   130d0:	e7e0      	b.n	13094 <__aeabi_fsub+0x144>
   130d2:	2a00      	cmp	r2, #0
   130d4:	d125      	bne.n	13122 <__aeabi_fsub+0x1d2>
   130d6:	1c62      	adds	r2, r4, #1
   130d8:	b2d2      	uxtb	r2, r2
   130da:	2a01      	cmp	r2, #1
   130dc:	dd72      	ble.n	131c4 <__aeabi_fsub+0x274>
   130de:	1b9f      	subs	r7, r3, r6
   130e0:	017a      	lsls	r2, r7, #5
   130e2:	d535      	bpl.n	13150 <__aeabi_fsub+0x200>
   130e4:	1af7      	subs	r7, r6, r3
   130e6:	000d      	movs	r5, r1
   130e8:	e764      	b.n	12fb4 <__aeabi_fsub+0x64>
   130ea:	2201      	movs	r2, #1
   130ec:	2300      	movs	r3, #0
   130ee:	402a      	ands	r2, r5
   130f0:	e786      	b.n	13000 <__aeabi_fsub+0xb0>
   130f2:	003b      	movs	r3, r7
   130f4:	4a63      	ldr	r2, [pc, #396]	; (13284 <__aeabi_fsub+0x334>)
   130f6:	1a24      	subs	r4, r4, r0
   130f8:	4013      	ands	r3, r2
   130fa:	e76f      	b.n	12fdc <__aeabi_fsub+0x8c>
   130fc:	2900      	cmp	r1, #0
   130fe:	d16c      	bne.n	131da <__aeabi_fsub+0x28a>
   13100:	1c61      	adds	r1, r4, #1
   13102:	b2c8      	uxtb	r0, r1
   13104:	2801      	cmp	r0, #1
   13106:	dd4e      	ble.n	131a6 <__aeabi_fsub+0x256>
   13108:	29ff      	cmp	r1, #255	; 0xff
   1310a:	d049      	beq.n	131a0 <__aeabi_fsub+0x250>
   1310c:	199b      	adds	r3, r3, r6
   1310e:	085b      	lsrs	r3, r3, #1
   13110:	000c      	movs	r4, r1
   13112:	e763      	b.n	12fdc <__aeabi_fsub+0x8c>
   13114:	2aff      	cmp	r2, #255	; 0xff
   13116:	d041      	beq.n	1319c <__aeabi_fsub+0x24c>
   13118:	000a      	movs	r2, r1
   1311a:	e781      	b.n	13020 <__aeabi_fsub+0xd0>
   1311c:	2601      	movs	r6, #1
   1311e:	1b9b      	subs	r3, r3, r6
   13120:	e789      	b.n	13036 <__aeabi_fsub+0xe6>
   13122:	2c00      	cmp	r4, #0
   13124:	d01c      	beq.n	13160 <__aeabi_fsub+0x210>
   13126:	28ff      	cmp	r0, #255	; 0xff
   13128:	d021      	beq.n	1316e <__aeabi_fsub+0x21e>
   1312a:	2480      	movs	r4, #128	; 0x80
   1312c:	04e4      	lsls	r4, r4, #19
   1312e:	4252      	negs	r2, r2
   13130:	4323      	orrs	r3, r4
   13132:	2a1b      	cmp	r2, #27
   13134:	dd00      	ble.n	13138 <__aeabi_fsub+0x1e8>
   13136:	e096      	b.n	13266 <__aeabi_fsub+0x316>
   13138:	001c      	movs	r4, r3
   1313a:	2520      	movs	r5, #32
   1313c:	40d4      	lsrs	r4, r2
   1313e:	1aaa      	subs	r2, r5, r2
   13140:	4093      	lsls	r3, r2
   13142:	1e5a      	subs	r2, r3, #1
   13144:	4193      	sbcs	r3, r2
   13146:	4323      	orrs	r3, r4
   13148:	1af3      	subs	r3, r6, r3
   1314a:	0004      	movs	r4, r0
   1314c:	000d      	movs	r5, r1
   1314e:	e72d      	b.n	12fac <__aeabi_fsub+0x5c>
   13150:	2f00      	cmp	r7, #0
   13152:	d000      	beq.n	13156 <__aeabi_fsub+0x206>
   13154:	e72e      	b.n	12fb4 <__aeabi_fsub+0x64>
   13156:	2200      	movs	r2, #0
   13158:	2400      	movs	r4, #0
   1315a:	e7a9      	b.n	130b0 <__aeabi_fsub+0x160>
   1315c:	000c      	movs	r4, r1
   1315e:	e73d      	b.n	12fdc <__aeabi_fsub+0x8c>
   13160:	2b00      	cmp	r3, #0
   13162:	d058      	beq.n	13216 <__aeabi_fsub+0x2c6>
   13164:	43d2      	mvns	r2, r2
   13166:	2a00      	cmp	r2, #0
   13168:	d0ee      	beq.n	13148 <__aeabi_fsub+0x1f8>
   1316a:	28ff      	cmp	r0, #255	; 0xff
   1316c:	d1e1      	bne.n	13132 <__aeabi_fsub+0x1e2>
   1316e:	0033      	movs	r3, r6
   13170:	24ff      	movs	r4, #255	; 0xff
   13172:	000d      	movs	r5, r1
   13174:	e732      	b.n	12fdc <__aeabi_fsub+0x8c>
   13176:	29ff      	cmp	r1, #255	; 0xff
   13178:	d010      	beq.n	1319c <__aeabi_fsub+0x24c>
   1317a:	0001      	movs	r1, r0
   1317c:	e778      	b.n	13070 <__aeabi_fsub+0x120>
   1317e:	2b00      	cmp	r3, #0
   13180:	d06e      	beq.n	13260 <__aeabi_fsub+0x310>
   13182:	24ff      	movs	r4, #255	; 0xff
   13184:	2e00      	cmp	r6, #0
   13186:	d100      	bne.n	1318a <__aeabi_fsub+0x23a>
   13188:	e728      	b.n	12fdc <__aeabi_fsub+0x8c>
   1318a:	2280      	movs	r2, #128	; 0x80
   1318c:	4651      	mov	r1, sl
   1318e:	03d2      	lsls	r2, r2, #15
   13190:	4211      	tst	r1, r2
   13192:	d003      	beq.n	1319c <__aeabi_fsub+0x24c>
   13194:	4661      	mov	r1, ip
   13196:	4211      	tst	r1, r2
   13198:	d100      	bne.n	1319c <__aeabi_fsub+0x24c>
   1319a:	0033      	movs	r3, r6
   1319c:	24ff      	movs	r4, #255	; 0xff
   1319e:	e71d      	b.n	12fdc <__aeabi_fsub+0x8c>
   131a0:	24ff      	movs	r4, #255	; 0xff
   131a2:	2300      	movs	r3, #0
   131a4:	e72c      	b.n	13000 <__aeabi_fsub+0xb0>
   131a6:	2c00      	cmp	r4, #0
   131a8:	d1e9      	bne.n	1317e <__aeabi_fsub+0x22e>
   131aa:	2b00      	cmp	r3, #0
   131ac:	d063      	beq.n	13276 <__aeabi_fsub+0x326>
   131ae:	2e00      	cmp	r6, #0
   131b0:	d100      	bne.n	131b4 <__aeabi_fsub+0x264>
   131b2:	e713      	b.n	12fdc <__aeabi_fsub+0x8c>
   131b4:	199b      	adds	r3, r3, r6
   131b6:	015a      	lsls	r2, r3, #5
   131b8:	d400      	bmi.n	131bc <__aeabi_fsub+0x26c>
   131ba:	e73e      	b.n	1303a <__aeabi_fsub+0xea>
   131bc:	4a31      	ldr	r2, [pc, #196]	; (13284 <__aeabi_fsub+0x334>)
   131be:	000c      	movs	r4, r1
   131c0:	4013      	ands	r3, r2
   131c2:	e70b      	b.n	12fdc <__aeabi_fsub+0x8c>
   131c4:	2c00      	cmp	r4, #0
   131c6:	d11e      	bne.n	13206 <__aeabi_fsub+0x2b6>
   131c8:	2b00      	cmp	r3, #0
   131ca:	d12f      	bne.n	1322c <__aeabi_fsub+0x2dc>
   131cc:	2e00      	cmp	r6, #0
   131ce:	d04f      	beq.n	13270 <__aeabi_fsub+0x320>
   131d0:	0033      	movs	r3, r6
   131d2:	000d      	movs	r5, r1
   131d4:	e702      	b.n	12fdc <__aeabi_fsub+0x8c>
   131d6:	2601      	movs	r6, #1
   131d8:	e755      	b.n	13086 <__aeabi_fsub+0x136>
   131da:	2c00      	cmp	r4, #0
   131dc:	d11f      	bne.n	1321e <__aeabi_fsub+0x2ce>
   131de:	2b00      	cmp	r3, #0
   131e0:	d043      	beq.n	1326a <__aeabi_fsub+0x31a>
   131e2:	43c9      	mvns	r1, r1
   131e4:	2900      	cmp	r1, #0
   131e6:	d00b      	beq.n	13200 <__aeabi_fsub+0x2b0>
   131e8:	28ff      	cmp	r0, #255	; 0xff
   131ea:	d039      	beq.n	13260 <__aeabi_fsub+0x310>
   131ec:	291b      	cmp	r1, #27
   131ee:	dc44      	bgt.n	1327a <__aeabi_fsub+0x32a>
   131f0:	001c      	movs	r4, r3
   131f2:	2720      	movs	r7, #32
   131f4:	40cc      	lsrs	r4, r1
   131f6:	1a79      	subs	r1, r7, r1
   131f8:	408b      	lsls	r3, r1
   131fa:	1e59      	subs	r1, r3, #1
   131fc:	418b      	sbcs	r3, r1
   131fe:	4323      	orrs	r3, r4
   13200:	199b      	adds	r3, r3, r6
   13202:	0004      	movs	r4, r0
   13204:	e740      	b.n	13088 <__aeabi_fsub+0x138>
   13206:	2b00      	cmp	r3, #0
   13208:	d11a      	bne.n	13240 <__aeabi_fsub+0x2f0>
   1320a:	2e00      	cmp	r6, #0
   1320c:	d124      	bne.n	13258 <__aeabi_fsub+0x308>
   1320e:	2780      	movs	r7, #128	; 0x80
   13210:	2200      	movs	r2, #0
   13212:	03ff      	lsls	r7, r7, #15
   13214:	e71b      	b.n	1304e <__aeabi_fsub+0xfe>
   13216:	0033      	movs	r3, r6
   13218:	0004      	movs	r4, r0
   1321a:	000d      	movs	r5, r1
   1321c:	e6de      	b.n	12fdc <__aeabi_fsub+0x8c>
   1321e:	28ff      	cmp	r0, #255	; 0xff
   13220:	d01e      	beq.n	13260 <__aeabi_fsub+0x310>
   13222:	2480      	movs	r4, #128	; 0x80
   13224:	04e4      	lsls	r4, r4, #19
   13226:	4249      	negs	r1, r1
   13228:	4323      	orrs	r3, r4
   1322a:	e7df      	b.n	131ec <__aeabi_fsub+0x29c>
   1322c:	2e00      	cmp	r6, #0
   1322e:	d100      	bne.n	13232 <__aeabi_fsub+0x2e2>
   13230:	e6d4      	b.n	12fdc <__aeabi_fsub+0x8c>
   13232:	1b9f      	subs	r7, r3, r6
   13234:	017a      	lsls	r2, r7, #5
   13236:	d400      	bmi.n	1323a <__aeabi_fsub+0x2ea>
   13238:	e737      	b.n	130aa <__aeabi_fsub+0x15a>
   1323a:	1af3      	subs	r3, r6, r3
   1323c:	000d      	movs	r5, r1
   1323e:	e6cd      	b.n	12fdc <__aeabi_fsub+0x8c>
   13240:	24ff      	movs	r4, #255	; 0xff
   13242:	2e00      	cmp	r6, #0
   13244:	d100      	bne.n	13248 <__aeabi_fsub+0x2f8>
   13246:	e6c9      	b.n	12fdc <__aeabi_fsub+0x8c>
   13248:	2280      	movs	r2, #128	; 0x80
   1324a:	4650      	mov	r0, sl
   1324c:	03d2      	lsls	r2, r2, #15
   1324e:	4210      	tst	r0, r2
   13250:	d0a4      	beq.n	1319c <__aeabi_fsub+0x24c>
   13252:	4660      	mov	r0, ip
   13254:	4210      	tst	r0, r2
   13256:	d1a1      	bne.n	1319c <__aeabi_fsub+0x24c>
   13258:	0033      	movs	r3, r6
   1325a:	000d      	movs	r5, r1
   1325c:	24ff      	movs	r4, #255	; 0xff
   1325e:	e6bd      	b.n	12fdc <__aeabi_fsub+0x8c>
   13260:	0033      	movs	r3, r6
   13262:	24ff      	movs	r4, #255	; 0xff
   13264:	e6ba      	b.n	12fdc <__aeabi_fsub+0x8c>
   13266:	2301      	movs	r3, #1
   13268:	e76e      	b.n	13148 <__aeabi_fsub+0x1f8>
   1326a:	0033      	movs	r3, r6
   1326c:	0004      	movs	r4, r0
   1326e:	e6b5      	b.n	12fdc <__aeabi_fsub+0x8c>
   13270:	2700      	movs	r7, #0
   13272:	2200      	movs	r2, #0
   13274:	e71c      	b.n	130b0 <__aeabi_fsub+0x160>
   13276:	0033      	movs	r3, r6
   13278:	e6b0      	b.n	12fdc <__aeabi_fsub+0x8c>
   1327a:	2301      	movs	r3, #1
   1327c:	e7c0      	b.n	13200 <__aeabi_fsub+0x2b0>
   1327e:	46c0      	nop			; (mov r8, r8)
   13280:	7dffffff 	.word	0x7dffffff
   13284:	fbffffff 	.word	0xfbffffff

00013288 <__aeabi_f2iz>:
   13288:	0241      	lsls	r1, r0, #9
   1328a:	0043      	lsls	r3, r0, #1
   1328c:	0fc2      	lsrs	r2, r0, #31
   1328e:	0a49      	lsrs	r1, r1, #9
   13290:	0e1b      	lsrs	r3, r3, #24
   13292:	2000      	movs	r0, #0
   13294:	2b7e      	cmp	r3, #126	; 0x7e
   13296:	dd0d      	ble.n	132b4 <__aeabi_f2iz+0x2c>
   13298:	2b9d      	cmp	r3, #157	; 0x9d
   1329a:	dc0c      	bgt.n	132b6 <__aeabi_f2iz+0x2e>
   1329c:	2080      	movs	r0, #128	; 0x80
   1329e:	0400      	lsls	r0, r0, #16
   132a0:	4301      	orrs	r1, r0
   132a2:	2b95      	cmp	r3, #149	; 0x95
   132a4:	dc0a      	bgt.n	132bc <__aeabi_f2iz+0x34>
   132a6:	2096      	movs	r0, #150	; 0x96
   132a8:	1ac3      	subs	r3, r0, r3
   132aa:	40d9      	lsrs	r1, r3
   132ac:	4248      	negs	r0, r1
   132ae:	2a00      	cmp	r2, #0
   132b0:	d100      	bne.n	132b4 <__aeabi_f2iz+0x2c>
   132b2:	0008      	movs	r0, r1
   132b4:	4770      	bx	lr
   132b6:	4b03      	ldr	r3, [pc, #12]	; (132c4 <__aeabi_f2iz+0x3c>)
   132b8:	18d0      	adds	r0, r2, r3
   132ba:	e7fb      	b.n	132b4 <__aeabi_f2iz+0x2c>
   132bc:	3b96      	subs	r3, #150	; 0x96
   132be:	4099      	lsls	r1, r3
   132c0:	e7f4      	b.n	132ac <__aeabi_f2iz+0x24>
   132c2:	46c0      	nop			; (mov r8, r8)
   132c4:	7fffffff 	.word	0x7fffffff

000132c8 <__aeabi_ui2f>:
   132c8:	b510      	push	{r4, lr}
   132ca:	1e04      	subs	r4, r0, #0
   132cc:	d027      	beq.n	1331e <__aeabi_ui2f+0x56>
   132ce:	f001 fc87 	bl	14be0 <__clzsi2>
   132d2:	239e      	movs	r3, #158	; 0x9e
   132d4:	1a1b      	subs	r3, r3, r0
   132d6:	2b96      	cmp	r3, #150	; 0x96
   132d8:	dc0a      	bgt.n	132f0 <__aeabi_ui2f+0x28>
   132da:	2296      	movs	r2, #150	; 0x96
   132dc:	1ad2      	subs	r2, r2, r3
   132de:	4094      	lsls	r4, r2
   132e0:	0264      	lsls	r4, r4, #9
   132e2:	0a64      	lsrs	r4, r4, #9
   132e4:	b2db      	uxtb	r3, r3
   132e6:	0264      	lsls	r4, r4, #9
   132e8:	05db      	lsls	r3, r3, #23
   132ea:	0a60      	lsrs	r0, r4, #9
   132ec:	4318      	orrs	r0, r3
   132ee:	bd10      	pop	{r4, pc}
   132f0:	2b99      	cmp	r3, #153	; 0x99
   132f2:	dc17      	bgt.n	13324 <__aeabi_ui2f+0x5c>
   132f4:	2299      	movs	r2, #153	; 0x99
   132f6:	1ad2      	subs	r2, r2, r3
   132f8:	2a00      	cmp	r2, #0
   132fa:	dd27      	ble.n	1334c <__aeabi_ui2f+0x84>
   132fc:	4094      	lsls	r4, r2
   132fe:	0022      	movs	r2, r4
   13300:	4c13      	ldr	r4, [pc, #76]	; (13350 <__aeabi_ui2f+0x88>)
   13302:	4014      	ands	r4, r2
   13304:	0751      	lsls	r1, r2, #29
   13306:	d004      	beq.n	13312 <__aeabi_ui2f+0x4a>
   13308:	210f      	movs	r1, #15
   1330a:	400a      	ands	r2, r1
   1330c:	2a04      	cmp	r2, #4
   1330e:	d000      	beq.n	13312 <__aeabi_ui2f+0x4a>
   13310:	3404      	adds	r4, #4
   13312:	0162      	lsls	r2, r4, #5
   13314:	d412      	bmi.n	1333c <__aeabi_ui2f+0x74>
   13316:	01a4      	lsls	r4, r4, #6
   13318:	0a64      	lsrs	r4, r4, #9
   1331a:	b2db      	uxtb	r3, r3
   1331c:	e7e3      	b.n	132e6 <__aeabi_ui2f+0x1e>
   1331e:	2300      	movs	r3, #0
   13320:	2400      	movs	r4, #0
   13322:	e7e0      	b.n	132e6 <__aeabi_ui2f+0x1e>
   13324:	22b9      	movs	r2, #185	; 0xb9
   13326:	0021      	movs	r1, r4
   13328:	1ad2      	subs	r2, r2, r3
   1332a:	4091      	lsls	r1, r2
   1332c:	000a      	movs	r2, r1
   1332e:	1e51      	subs	r1, r2, #1
   13330:	418a      	sbcs	r2, r1
   13332:	2105      	movs	r1, #5
   13334:	1a09      	subs	r1, r1, r0
   13336:	40cc      	lsrs	r4, r1
   13338:	4314      	orrs	r4, r2
   1333a:	e7db      	b.n	132f4 <__aeabi_ui2f+0x2c>
   1333c:	4b04      	ldr	r3, [pc, #16]	; (13350 <__aeabi_ui2f+0x88>)
   1333e:	401c      	ands	r4, r3
   13340:	239f      	movs	r3, #159	; 0x9f
   13342:	01a4      	lsls	r4, r4, #6
   13344:	1a1b      	subs	r3, r3, r0
   13346:	0a64      	lsrs	r4, r4, #9
   13348:	b2db      	uxtb	r3, r3
   1334a:	e7cc      	b.n	132e6 <__aeabi_ui2f+0x1e>
   1334c:	0022      	movs	r2, r4
   1334e:	e7d7      	b.n	13300 <__aeabi_ui2f+0x38>
   13350:	fbffffff 	.word	0xfbffffff

00013354 <__aeabi_dadd>:
   13354:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   13356:	4645      	mov	r5, r8
   13358:	46de      	mov	lr, fp
   1335a:	4657      	mov	r7, sl
   1335c:	464e      	mov	r6, r9
   1335e:	030c      	lsls	r4, r1, #12
   13360:	b5e0      	push	{r5, r6, r7, lr}
   13362:	004e      	lsls	r6, r1, #1
   13364:	0fc9      	lsrs	r1, r1, #31
   13366:	4688      	mov	r8, r1
   13368:	000d      	movs	r5, r1
   1336a:	0a61      	lsrs	r1, r4, #9
   1336c:	0f44      	lsrs	r4, r0, #29
   1336e:	430c      	orrs	r4, r1
   13370:	00c7      	lsls	r7, r0, #3
   13372:	0319      	lsls	r1, r3, #12
   13374:	0058      	lsls	r0, r3, #1
   13376:	0fdb      	lsrs	r3, r3, #31
   13378:	469b      	mov	fp, r3
   1337a:	0a4b      	lsrs	r3, r1, #9
   1337c:	0f51      	lsrs	r1, r2, #29
   1337e:	430b      	orrs	r3, r1
   13380:	0d76      	lsrs	r6, r6, #21
   13382:	0d40      	lsrs	r0, r0, #21
   13384:	0019      	movs	r1, r3
   13386:	00d2      	lsls	r2, r2, #3
   13388:	45d8      	cmp	r8, fp
   1338a:	d100      	bne.n	1338e <__aeabi_dadd+0x3a>
   1338c:	e0ae      	b.n	134ec <__aeabi_dadd+0x198>
   1338e:	1a35      	subs	r5, r6, r0
   13390:	2d00      	cmp	r5, #0
   13392:	dc00      	bgt.n	13396 <__aeabi_dadd+0x42>
   13394:	e0f6      	b.n	13584 <__aeabi_dadd+0x230>
   13396:	2800      	cmp	r0, #0
   13398:	d10f      	bne.n	133ba <__aeabi_dadd+0x66>
   1339a:	4313      	orrs	r3, r2
   1339c:	d100      	bne.n	133a0 <__aeabi_dadd+0x4c>
   1339e:	e0db      	b.n	13558 <__aeabi_dadd+0x204>
   133a0:	1e6b      	subs	r3, r5, #1
   133a2:	2b00      	cmp	r3, #0
   133a4:	d000      	beq.n	133a8 <__aeabi_dadd+0x54>
   133a6:	e137      	b.n	13618 <__aeabi_dadd+0x2c4>
   133a8:	1aba      	subs	r2, r7, r2
   133aa:	4297      	cmp	r7, r2
   133ac:	41bf      	sbcs	r7, r7
   133ae:	1a64      	subs	r4, r4, r1
   133b0:	427f      	negs	r7, r7
   133b2:	1be4      	subs	r4, r4, r7
   133b4:	2601      	movs	r6, #1
   133b6:	0017      	movs	r7, r2
   133b8:	e024      	b.n	13404 <__aeabi_dadd+0xb0>
   133ba:	4bc6      	ldr	r3, [pc, #792]	; (136d4 <__aeabi_dadd+0x380>)
   133bc:	429e      	cmp	r6, r3
   133be:	d04d      	beq.n	1345c <__aeabi_dadd+0x108>
   133c0:	2380      	movs	r3, #128	; 0x80
   133c2:	041b      	lsls	r3, r3, #16
   133c4:	4319      	orrs	r1, r3
   133c6:	2d38      	cmp	r5, #56	; 0x38
   133c8:	dd00      	ble.n	133cc <__aeabi_dadd+0x78>
   133ca:	e107      	b.n	135dc <__aeabi_dadd+0x288>
   133cc:	2d1f      	cmp	r5, #31
   133ce:	dd00      	ble.n	133d2 <__aeabi_dadd+0x7e>
   133d0:	e138      	b.n	13644 <__aeabi_dadd+0x2f0>
   133d2:	2020      	movs	r0, #32
   133d4:	1b43      	subs	r3, r0, r5
   133d6:	469a      	mov	sl, r3
   133d8:	000b      	movs	r3, r1
   133da:	4650      	mov	r0, sl
   133dc:	4083      	lsls	r3, r0
   133de:	4699      	mov	r9, r3
   133e0:	0013      	movs	r3, r2
   133e2:	4648      	mov	r0, r9
   133e4:	40eb      	lsrs	r3, r5
   133e6:	4318      	orrs	r0, r3
   133e8:	0003      	movs	r3, r0
   133ea:	4650      	mov	r0, sl
   133ec:	4082      	lsls	r2, r0
   133ee:	1e50      	subs	r0, r2, #1
   133f0:	4182      	sbcs	r2, r0
   133f2:	40e9      	lsrs	r1, r5
   133f4:	431a      	orrs	r2, r3
   133f6:	1aba      	subs	r2, r7, r2
   133f8:	1a61      	subs	r1, r4, r1
   133fa:	4297      	cmp	r7, r2
   133fc:	41a4      	sbcs	r4, r4
   133fe:	0017      	movs	r7, r2
   13400:	4264      	negs	r4, r4
   13402:	1b0c      	subs	r4, r1, r4
   13404:	0223      	lsls	r3, r4, #8
   13406:	d562      	bpl.n	134ce <__aeabi_dadd+0x17a>
   13408:	0264      	lsls	r4, r4, #9
   1340a:	0a65      	lsrs	r5, r4, #9
   1340c:	2d00      	cmp	r5, #0
   1340e:	d100      	bne.n	13412 <__aeabi_dadd+0xbe>
   13410:	e0df      	b.n	135d2 <__aeabi_dadd+0x27e>
   13412:	0028      	movs	r0, r5
   13414:	f001 fbe4 	bl	14be0 <__clzsi2>
   13418:	0003      	movs	r3, r0
   1341a:	3b08      	subs	r3, #8
   1341c:	2b1f      	cmp	r3, #31
   1341e:	dd00      	ble.n	13422 <__aeabi_dadd+0xce>
   13420:	e0d2      	b.n	135c8 <__aeabi_dadd+0x274>
   13422:	2220      	movs	r2, #32
   13424:	003c      	movs	r4, r7
   13426:	1ad2      	subs	r2, r2, r3
   13428:	409d      	lsls	r5, r3
   1342a:	40d4      	lsrs	r4, r2
   1342c:	409f      	lsls	r7, r3
   1342e:	4325      	orrs	r5, r4
   13430:	429e      	cmp	r6, r3
   13432:	dd00      	ble.n	13436 <__aeabi_dadd+0xe2>
   13434:	e0c4      	b.n	135c0 <__aeabi_dadd+0x26c>
   13436:	1b9e      	subs	r6, r3, r6
   13438:	1c73      	adds	r3, r6, #1
   1343a:	2b1f      	cmp	r3, #31
   1343c:	dd00      	ble.n	13440 <__aeabi_dadd+0xec>
   1343e:	e0f1      	b.n	13624 <__aeabi_dadd+0x2d0>
   13440:	2220      	movs	r2, #32
   13442:	0038      	movs	r0, r7
   13444:	0029      	movs	r1, r5
   13446:	1ad2      	subs	r2, r2, r3
   13448:	40d8      	lsrs	r0, r3
   1344a:	4091      	lsls	r1, r2
   1344c:	4097      	lsls	r7, r2
   1344e:	002c      	movs	r4, r5
   13450:	4301      	orrs	r1, r0
   13452:	1e78      	subs	r0, r7, #1
   13454:	4187      	sbcs	r7, r0
   13456:	40dc      	lsrs	r4, r3
   13458:	2600      	movs	r6, #0
   1345a:	430f      	orrs	r7, r1
   1345c:	077b      	lsls	r3, r7, #29
   1345e:	d009      	beq.n	13474 <__aeabi_dadd+0x120>
   13460:	230f      	movs	r3, #15
   13462:	403b      	ands	r3, r7
   13464:	2b04      	cmp	r3, #4
   13466:	d005      	beq.n	13474 <__aeabi_dadd+0x120>
   13468:	1d3b      	adds	r3, r7, #4
   1346a:	42bb      	cmp	r3, r7
   1346c:	41bf      	sbcs	r7, r7
   1346e:	427f      	negs	r7, r7
   13470:	19e4      	adds	r4, r4, r7
   13472:	001f      	movs	r7, r3
   13474:	0223      	lsls	r3, r4, #8
   13476:	d52c      	bpl.n	134d2 <__aeabi_dadd+0x17e>
   13478:	4b96      	ldr	r3, [pc, #600]	; (136d4 <__aeabi_dadd+0x380>)
   1347a:	3601      	adds	r6, #1
   1347c:	429e      	cmp	r6, r3
   1347e:	d100      	bne.n	13482 <__aeabi_dadd+0x12e>
   13480:	e09a      	b.n	135b8 <__aeabi_dadd+0x264>
   13482:	4645      	mov	r5, r8
   13484:	4b94      	ldr	r3, [pc, #592]	; (136d8 <__aeabi_dadd+0x384>)
   13486:	08ff      	lsrs	r7, r7, #3
   13488:	401c      	ands	r4, r3
   1348a:	0760      	lsls	r0, r4, #29
   1348c:	0576      	lsls	r6, r6, #21
   1348e:	0264      	lsls	r4, r4, #9
   13490:	4307      	orrs	r7, r0
   13492:	0b24      	lsrs	r4, r4, #12
   13494:	0d76      	lsrs	r6, r6, #21
   13496:	2100      	movs	r1, #0
   13498:	0324      	lsls	r4, r4, #12
   1349a:	0b23      	lsrs	r3, r4, #12
   1349c:	0d0c      	lsrs	r4, r1, #20
   1349e:	4a8f      	ldr	r2, [pc, #572]	; (136dc <__aeabi_dadd+0x388>)
   134a0:	0524      	lsls	r4, r4, #20
   134a2:	431c      	orrs	r4, r3
   134a4:	4014      	ands	r4, r2
   134a6:	0533      	lsls	r3, r6, #20
   134a8:	4323      	orrs	r3, r4
   134aa:	005b      	lsls	r3, r3, #1
   134ac:	07ed      	lsls	r5, r5, #31
   134ae:	085b      	lsrs	r3, r3, #1
   134b0:	432b      	orrs	r3, r5
   134b2:	0038      	movs	r0, r7
   134b4:	0019      	movs	r1, r3
   134b6:	bc3c      	pop	{r2, r3, r4, r5}
   134b8:	4690      	mov	r8, r2
   134ba:	4699      	mov	r9, r3
   134bc:	46a2      	mov	sl, r4
   134be:	46ab      	mov	fp, r5
   134c0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   134c2:	4664      	mov	r4, ip
   134c4:	4304      	orrs	r4, r0
   134c6:	d100      	bne.n	134ca <__aeabi_dadd+0x176>
   134c8:	e211      	b.n	138ee <__aeabi_dadd+0x59a>
   134ca:	0004      	movs	r4, r0
   134cc:	4667      	mov	r7, ip
   134ce:	077b      	lsls	r3, r7, #29
   134d0:	d1c6      	bne.n	13460 <__aeabi_dadd+0x10c>
   134d2:	4645      	mov	r5, r8
   134d4:	0760      	lsls	r0, r4, #29
   134d6:	08ff      	lsrs	r7, r7, #3
   134d8:	4307      	orrs	r7, r0
   134da:	08e4      	lsrs	r4, r4, #3
   134dc:	4b7d      	ldr	r3, [pc, #500]	; (136d4 <__aeabi_dadd+0x380>)
   134de:	429e      	cmp	r6, r3
   134e0:	d030      	beq.n	13544 <__aeabi_dadd+0x1f0>
   134e2:	0324      	lsls	r4, r4, #12
   134e4:	0576      	lsls	r6, r6, #21
   134e6:	0b24      	lsrs	r4, r4, #12
   134e8:	0d76      	lsrs	r6, r6, #21
   134ea:	e7d4      	b.n	13496 <__aeabi_dadd+0x142>
   134ec:	1a33      	subs	r3, r6, r0
   134ee:	469a      	mov	sl, r3
   134f0:	2b00      	cmp	r3, #0
   134f2:	dd78      	ble.n	135e6 <__aeabi_dadd+0x292>
   134f4:	2800      	cmp	r0, #0
   134f6:	d031      	beq.n	1355c <__aeabi_dadd+0x208>
   134f8:	4876      	ldr	r0, [pc, #472]	; (136d4 <__aeabi_dadd+0x380>)
   134fa:	4286      	cmp	r6, r0
   134fc:	d0ae      	beq.n	1345c <__aeabi_dadd+0x108>
   134fe:	2080      	movs	r0, #128	; 0x80
   13500:	0400      	lsls	r0, r0, #16
   13502:	4301      	orrs	r1, r0
   13504:	4653      	mov	r3, sl
   13506:	2b38      	cmp	r3, #56	; 0x38
   13508:	dc00      	bgt.n	1350c <__aeabi_dadd+0x1b8>
   1350a:	e0e9      	b.n	136e0 <__aeabi_dadd+0x38c>
   1350c:	430a      	orrs	r2, r1
   1350e:	1e51      	subs	r1, r2, #1
   13510:	418a      	sbcs	r2, r1
   13512:	2100      	movs	r1, #0
   13514:	19d2      	adds	r2, r2, r7
   13516:	42ba      	cmp	r2, r7
   13518:	41bf      	sbcs	r7, r7
   1351a:	1909      	adds	r1, r1, r4
   1351c:	427c      	negs	r4, r7
   1351e:	0017      	movs	r7, r2
   13520:	190c      	adds	r4, r1, r4
   13522:	0223      	lsls	r3, r4, #8
   13524:	d5d3      	bpl.n	134ce <__aeabi_dadd+0x17a>
   13526:	4b6b      	ldr	r3, [pc, #428]	; (136d4 <__aeabi_dadd+0x380>)
   13528:	3601      	adds	r6, #1
   1352a:	429e      	cmp	r6, r3
   1352c:	d100      	bne.n	13530 <__aeabi_dadd+0x1dc>
   1352e:	e13a      	b.n	137a6 <__aeabi_dadd+0x452>
   13530:	2001      	movs	r0, #1
   13532:	4b69      	ldr	r3, [pc, #420]	; (136d8 <__aeabi_dadd+0x384>)
   13534:	401c      	ands	r4, r3
   13536:	087b      	lsrs	r3, r7, #1
   13538:	4007      	ands	r7, r0
   1353a:	431f      	orrs	r7, r3
   1353c:	07e0      	lsls	r0, r4, #31
   1353e:	4307      	orrs	r7, r0
   13540:	0864      	lsrs	r4, r4, #1
   13542:	e78b      	b.n	1345c <__aeabi_dadd+0x108>
   13544:	0023      	movs	r3, r4
   13546:	433b      	orrs	r3, r7
   13548:	d100      	bne.n	1354c <__aeabi_dadd+0x1f8>
   1354a:	e1cb      	b.n	138e4 <__aeabi_dadd+0x590>
   1354c:	2280      	movs	r2, #128	; 0x80
   1354e:	0312      	lsls	r2, r2, #12
   13550:	4314      	orrs	r4, r2
   13552:	0324      	lsls	r4, r4, #12
   13554:	0b24      	lsrs	r4, r4, #12
   13556:	e79e      	b.n	13496 <__aeabi_dadd+0x142>
   13558:	002e      	movs	r6, r5
   1355a:	e77f      	b.n	1345c <__aeabi_dadd+0x108>
   1355c:	0008      	movs	r0, r1
   1355e:	4310      	orrs	r0, r2
   13560:	d100      	bne.n	13564 <__aeabi_dadd+0x210>
   13562:	e0b4      	b.n	136ce <__aeabi_dadd+0x37a>
   13564:	1e58      	subs	r0, r3, #1
   13566:	2800      	cmp	r0, #0
   13568:	d000      	beq.n	1356c <__aeabi_dadd+0x218>
   1356a:	e0de      	b.n	1372a <__aeabi_dadd+0x3d6>
   1356c:	18ba      	adds	r2, r7, r2
   1356e:	42ba      	cmp	r2, r7
   13570:	419b      	sbcs	r3, r3
   13572:	1864      	adds	r4, r4, r1
   13574:	425b      	negs	r3, r3
   13576:	18e4      	adds	r4, r4, r3
   13578:	0017      	movs	r7, r2
   1357a:	2601      	movs	r6, #1
   1357c:	0223      	lsls	r3, r4, #8
   1357e:	d5a6      	bpl.n	134ce <__aeabi_dadd+0x17a>
   13580:	2602      	movs	r6, #2
   13582:	e7d5      	b.n	13530 <__aeabi_dadd+0x1dc>
   13584:	2d00      	cmp	r5, #0
   13586:	d16e      	bne.n	13666 <__aeabi_dadd+0x312>
   13588:	1c70      	adds	r0, r6, #1
   1358a:	0540      	lsls	r0, r0, #21
   1358c:	0d40      	lsrs	r0, r0, #21
   1358e:	2801      	cmp	r0, #1
   13590:	dc00      	bgt.n	13594 <__aeabi_dadd+0x240>
   13592:	e0f9      	b.n	13788 <__aeabi_dadd+0x434>
   13594:	1ab8      	subs	r0, r7, r2
   13596:	4684      	mov	ip, r0
   13598:	4287      	cmp	r7, r0
   1359a:	4180      	sbcs	r0, r0
   1359c:	1ae5      	subs	r5, r4, r3
   1359e:	4240      	negs	r0, r0
   135a0:	1a2d      	subs	r5, r5, r0
   135a2:	0228      	lsls	r0, r5, #8
   135a4:	d400      	bmi.n	135a8 <__aeabi_dadd+0x254>
   135a6:	e089      	b.n	136bc <__aeabi_dadd+0x368>
   135a8:	1bd7      	subs	r7, r2, r7
   135aa:	42ba      	cmp	r2, r7
   135ac:	4192      	sbcs	r2, r2
   135ae:	1b1c      	subs	r4, r3, r4
   135b0:	4252      	negs	r2, r2
   135b2:	1aa5      	subs	r5, r4, r2
   135b4:	46d8      	mov	r8, fp
   135b6:	e729      	b.n	1340c <__aeabi_dadd+0xb8>
   135b8:	4645      	mov	r5, r8
   135ba:	2400      	movs	r4, #0
   135bc:	2700      	movs	r7, #0
   135be:	e76a      	b.n	13496 <__aeabi_dadd+0x142>
   135c0:	4c45      	ldr	r4, [pc, #276]	; (136d8 <__aeabi_dadd+0x384>)
   135c2:	1af6      	subs	r6, r6, r3
   135c4:	402c      	ands	r4, r5
   135c6:	e749      	b.n	1345c <__aeabi_dadd+0x108>
   135c8:	003d      	movs	r5, r7
   135ca:	3828      	subs	r0, #40	; 0x28
   135cc:	4085      	lsls	r5, r0
   135ce:	2700      	movs	r7, #0
   135d0:	e72e      	b.n	13430 <__aeabi_dadd+0xdc>
   135d2:	0038      	movs	r0, r7
   135d4:	f001 fb04 	bl	14be0 <__clzsi2>
   135d8:	3020      	adds	r0, #32
   135da:	e71d      	b.n	13418 <__aeabi_dadd+0xc4>
   135dc:	430a      	orrs	r2, r1
   135de:	1e51      	subs	r1, r2, #1
   135e0:	418a      	sbcs	r2, r1
   135e2:	2100      	movs	r1, #0
   135e4:	e707      	b.n	133f6 <__aeabi_dadd+0xa2>
   135e6:	2b00      	cmp	r3, #0
   135e8:	d000      	beq.n	135ec <__aeabi_dadd+0x298>
   135ea:	e0f3      	b.n	137d4 <__aeabi_dadd+0x480>
   135ec:	1c70      	adds	r0, r6, #1
   135ee:	0543      	lsls	r3, r0, #21
   135f0:	0d5b      	lsrs	r3, r3, #21
   135f2:	2b01      	cmp	r3, #1
   135f4:	dc00      	bgt.n	135f8 <__aeabi_dadd+0x2a4>
   135f6:	e0ad      	b.n	13754 <__aeabi_dadd+0x400>
   135f8:	4b36      	ldr	r3, [pc, #216]	; (136d4 <__aeabi_dadd+0x380>)
   135fa:	4298      	cmp	r0, r3
   135fc:	d100      	bne.n	13600 <__aeabi_dadd+0x2ac>
   135fe:	e0d1      	b.n	137a4 <__aeabi_dadd+0x450>
   13600:	18ba      	adds	r2, r7, r2
   13602:	42ba      	cmp	r2, r7
   13604:	41bf      	sbcs	r7, r7
   13606:	1864      	adds	r4, r4, r1
   13608:	427f      	negs	r7, r7
   1360a:	19e4      	adds	r4, r4, r7
   1360c:	07e7      	lsls	r7, r4, #31
   1360e:	0852      	lsrs	r2, r2, #1
   13610:	4317      	orrs	r7, r2
   13612:	0864      	lsrs	r4, r4, #1
   13614:	0006      	movs	r6, r0
   13616:	e721      	b.n	1345c <__aeabi_dadd+0x108>
   13618:	482e      	ldr	r0, [pc, #184]	; (136d4 <__aeabi_dadd+0x380>)
   1361a:	4285      	cmp	r5, r0
   1361c:	d100      	bne.n	13620 <__aeabi_dadd+0x2cc>
   1361e:	e093      	b.n	13748 <__aeabi_dadd+0x3f4>
   13620:	001d      	movs	r5, r3
   13622:	e6d0      	b.n	133c6 <__aeabi_dadd+0x72>
   13624:	0029      	movs	r1, r5
   13626:	3e1f      	subs	r6, #31
   13628:	40f1      	lsrs	r1, r6
   1362a:	2b20      	cmp	r3, #32
   1362c:	d100      	bne.n	13630 <__aeabi_dadd+0x2dc>
   1362e:	e08d      	b.n	1374c <__aeabi_dadd+0x3f8>
   13630:	2240      	movs	r2, #64	; 0x40
   13632:	1ad3      	subs	r3, r2, r3
   13634:	409d      	lsls	r5, r3
   13636:	432f      	orrs	r7, r5
   13638:	1e7d      	subs	r5, r7, #1
   1363a:	41af      	sbcs	r7, r5
   1363c:	2400      	movs	r4, #0
   1363e:	430f      	orrs	r7, r1
   13640:	2600      	movs	r6, #0
   13642:	e744      	b.n	134ce <__aeabi_dadd+0x17a>
   13644:	002b      	movs	r3, r5
   13646:	0008      	movs	r0, r1
   13648:	3b20      	subs	r3, #32
   1364a:	40d8      	lsrs	r0, r3
   1364c:	0003      	movs	r3, r0
   1364e:	2d20      	cmp	r5, #32
   13650:	d100      	bne.n	13654 <__aeabi_dadd+0x300>
   13652:	e07d      	b.n	13750 <__aeabi_dadd+0x3fc>
   13654:	2040      	movs	r0, #64	; 0x40
   13656:	1b45      	subs	r5, r0, r5
   13658:	40a9      	lsls	r1, r5
   1365a:	430a      	orrs	r2, r1
   1365c:	1e51      	subs	r1, r2, #1
   1365e:	418a      	sbcs	r2, r1
   13660:	2100      	movs	r1, #0
   13662:	431a      	orrs	r2, r3
   13664:	e6c7      	b.n	133f6 <__aeabi_dadd+0xa2>
   13666:	2e00      	cmp	r6, #0
   13668:	d050      	beq.n	1370c <__aeabi_dadd+0x3b8>
   1366a:	4e1a      	ldr	r6, [pc, #104]	; (136d4 <__aeabi_dadd+0x380>)
   1366c:	42b0      	cmp	r0, r6
   1366e:	d057      	beq.n	13720 <__aeabi_dadd+0x3cc>
   13670:	2680      	movs	r6, #128	; 0x80
   13672:	426b      	negs	r3, r5
   13674:	4699      	mov	r9, r3
   13676:	0436      	lsls	r6, r6, #16
   13678:	4334      	orrs	r4, r6
   1367a:	464b      	mov	r3, r9
   1367c:	2b38      	cmp	r3, #56	; 0x38
   1367e:	dd00      	ble.n	13682 <__aeabi_dadd+0x32e>
   13680:	e0d6      	b.n	13830 <__aeabi_dadd+0x4dc>
   13682:	2b1f      	cmp	r3, #31
   13684:	dd00      	ble.n	13688 <__aeabi_dadd+0x334>
   13686:	e135      	b.n	138f4 <__aeabi_dadd+0x5a0>
   13688:	2620      	movs	r6, #32
   1368a:	1af5      	subs	r5, r6, r3
   1368c:	0026      	movs	r6, r4
   1368e:	40ae      	lsls	r6, r5
   13690:	46b2      	mov	sl, r6
   13692:	003e      	movs	r6, r7
   13694:	40de      	lsrs	r6, r3
   13696:	46ac      	mov	ip, r5
   13698:	0035      	movs	r5, r6
   1369a:	4656      	mov	r6, sl
   1369c:	432e      	orrs	r6, r5
   1369e:	4665      	mov	r5, ip
   136a0:	40af      	lsls	r7, r5
   136a2:	1e7d      	subs	r5, r7, #1
   136a4:	41af      	sbcs	r7, r5
   136a6:	40dc      	lsrs	r4, r3
   136a8:	4337      	orrs	r7, r6
   136aa:	1bd7      	subs	r7, r2, r7
   136ac:	42ba      	cmp	r2, r7
   136ae:	4192      	sbcs	r2, r2
   136b0:	1b0c      	subs	r4, r1, r4
   136b2:	4252      	negs	r2, r2
   136b4:	1aa4      	subs	r4, r4, r2
   136b6:	0006      	movs	r6, r0
   136b8:	46d8      	mov	r8, fp
   136ba:	e6a3      	b.n	13404 <__aeabi_dadd+0xb0>
   136bc:	4664      	mov	r4, ip
   136be:	4667      	mov	r7, ip
   136c0:	432c      	orrs	r4, r5
   136c2:	d000      	beq.n	136c6 <__aeabi_dadd+0x372>
   136c4:	e6a2      	b.n	1340c <__aeabi_dadd+0xb8>
   136c6:	2500      	movs	r5, #0
   136c8:	2600      	movs	r6, #0
   136ca:	2700      	movs	r7, #0
   136cc:	e706      	b.n	134dc <__aeabi_dadd+0x188>
   136ce:	001e      	movs	r6, r3
   136d0:	e6c4      	b.n	1345c <__aeabi_dadd+0x108>
   136d2:	46c0      	nop			; (mov r8, r8)
   136d4:	000007ff 	.word	0x000007ff
   136d8:	ff7fffff 	.word	0xff7fffff
   136dc:	800fffff 	.word	0x800fffff
   136e0:	2b1f      	cmp	r3, #31
   136e2:	dc63      	bgt.n	137ac <__aeabi_dadd+0x458>
   136e4:	2020      	movs	r0, #32
   136e6:	1ac3      	subs	r3, r0, r3
   136e8:	0008      	movs	r0, r1
   136ea:	4098      	lsls	r0, r3
   136ec:	469c      	mov	ip, r3
   136ee:	4683      	mov	fp, r0
   136f0:	4653      	mov	r3, sl
   136f2:	0010      	movs	r0, r2
   136f4:	40d8      	lsrs	r0, r3
   136f6:	0003      	movs	r3, r0
   136f8:	4658      	mov	r0, fp
   136fa:	4318      	orrs	r0, r3
   136fc:	4663      	mov	r3, ip
   136fe:	409a      	lsls	r2, r3
   13700:	1e53      	subs	r3, r2, #1
   13702:	419a      	sbcs	r2, r3
   13704:	4653      	mov	r3, sl
   13706:	4302      	orrs	r2, r0
   13708:	40d9      	lsrs	r1, r3
   1370a:	e703      	b.n	13514 <__aeabi_dadd+0x1c0>
   1370c:	0026      	movs	r6, r4
   1370e:	433e      	orrs	r6, r7
   13710:	d006      	beq.n	13720 <__aeabi_dadd+0x3cc>
   13712:	43eb      	mvns	r3, r5
   13714:	4699      	mov	r9, r3
   13716:	2b00      	cmp	r3, #0
   13718:	d0c7      	beq.n	136aa <__aeabi_dadd+0x356>
   1371a:	4e94      	ldr	r6, [pc, #592]	; (1396c <__aeabi_dadd+0x618>)
   1371c:	42b0      	cmp	r0, r6
   1371e:	d1ac      	bne.n	1367a <__aeabi_dadd+0x326>
   13720:	000c      	movs	r4, r1
   13722:	0017      	movs	r7, r2
   13724:	0006      	movs	r6, r0
   13726:	46d8      	mov	r8, fp
   13728:	e698      	b.n	1345c <__aeabi_dadd+0x108>
   1372a:	4b90      	ldr	r3, [pc, #576]	; (1396c <__aeabi_dadd+0x618>)
   1372c:	459a      	cmp	sl, r3
   1372e:	d00b      	beq.n	13748 <__aeabi_dadd+0x3f4>
   13730:	4682      	mov	sl, r0
   13732:	e6e7      	b.n	13504 <__aeabi_dadd+0x1b0>
   13734:	2800      	cmp	r0, #0
   13736:	d000      	beq.n	1373a <__aeabi_dadd+0x3e6>
   13738:	e09e      	b.n	13878 <__aeabi_dadd+0x524>
   1373a:	0018      	movs	r0, r3
   1373c:	4310      	orrs	r0, r2
   1373e:	d100      	bne.n	13742 <__aeabi_dadd+0x3ee>
   13740:	e0e9      	b.n	13916 <__aeabi_dadd+0x5c2>
   13742:	001c      	movs	r4, r3
   13744:	0017      	movs	r7, r2
   13746:	46d8      	mov	r8, fp
   13748:	4e88      	ldr	r6, [pc, #544]	; (1396c <__aeabi_dadd+0x618>)
   1374a:	e687      	b.n	1345c <__aeabi_dadd+0x108>
   1374c:	2500      	movs	r5, #0
   1374e:	e772      	b.n	13636 <__aeabi_dadd+0x2e2>
   13750:	2100      	movs	r1, #0
   13752:	e782      	b.n	1365a <__aeabi_dadd+0x306>
   13754:	0023      	movs	r3, r4
   13756:	433b      	orrs	r3, r7
   13758:	2e00      	cmp	r6, #0
   1375a:	d000      	beq.n	1375e <__aeabi_dadd+0x40a>
   1375c:	e0ab      	b.n	138b6 <__aeabi_dadd+0x562>
   1375e:	2b00      	cmp	r3, #0
   13760:	d100      	bne.n	13764 <__aeabi_dadd+0x410>
   13762:	e0e7      	b.n	13934 <__aeabi_dadd+0x5e0>
   13764:	000b      	movs	r3, r1
   13766:	4313      	orrs	r3, r2
   13768:	d100      	bne.n	1376c <__aeabi_dadd+0x418>
   1376a:	e677      	b.n	1345c <__aeabi_dadd+0x108>
   1376c:	18ba      	adds	r2, r7, r2
   1376e:	42ba      	cmp	r2, r7
   13770:	41bf      	sbcs	r7, r7
   13772:	1864      	adds	r4, r4, r1
   13774:	427f      	negs	r7, r7
   13776:	19e4      	adds	r4, r4, r7
   13778:	0223      	lsls	r3, r4, #8
   1377a:	d400      	bmi.n	1377e <__aeabi_dadd+0x42a>
   1377c:	e0f2      	b.n	13964 <__aeabi_dadd+0x610>
   1377e:	4b7c      	ldr	r3, [pc, #496]	; (13970 <__aeabi_dadd+0x61c>)
   13780:	0017      	movs	r7, r2
   13782:	401c      	ands	r4, r3
   13784:	0006      	movs	r6, r0
   13786:	e669      	b.n	1345c <__aeabi_dadd+0x108>
   13788:	0020      	movs	r0, r4
   1378a:	4338      	orrs	r0, r7
   1378c:	2e00      	cmp	r6, #0
   1378e:	d1d1      	bne.n	13734 <__aeabi_dadd+0x3e0>
   13790:	2800      	cmp	r0, #0
   13792:	d15b      	bne.n	1384c <__aeabi_dadd+0x4f8>
   13794:	001c      	movs	r4, r3
   13796:	4314      	orrs	r4, r2
   13798:	d100      	bne.n	1379c <__aeabi_dadd+0x448>
   1379a:	e0a8      	b.n	138ee <__aeabi_dadd+0x59a>
   1379c:	001c      	movs	r4, r3
   1379e:	0017      	movs	r7, r2
   137a0:	46d8      	mov	r8, fp
   137a2:	e65b      	b.n	1345c <__aeabi_dadd+0x108>
   137a4:	0006      	movs	r6, r0
   137a6:	2400      	movs	r4, #0
   137a8:	2700      	movs	r7, #0
   137aa:	e697      	b.n	134dc <__aeabi_dadd+0x188>
   137ac:	4650      	mov	r0, sl
   137ae:	000b      	movs	r3, r1
   137b0:	3820      	subs	r0, #32
   137b2:	40c3      	lsrs	r3, r0
   137b4:	4699      	mov	r9, r3
   137b6:	4653      	mov	r3, sl
   137b8:	2b20      	cmp	r3, #32
   137ba:	d100      	bne.n	137be <__aeabi_dadd+0x46a>
   137bc:	e095      	b.n	138ea <__aeabi_dadd+0x596>
   137be:	2340      	movs	r3, #64	; 0x40
   137c0:	4650      	mov	r0, sl
   137c2:	1a1b      	subs	r3, r3, r0
   137c4:	4099      	lsls	r1, r3
   137c6:	430a      	orrs	r2, r1
   137c8:	1e51      	subs	r1, r2, #1
   137ca:	418a      	sbcs	r2, r1
   137cc:	464b      	mov	r3, r9
   137ce:	2100      	movs	r1, #0
   137d0:	431a      	orrs	r2, r3
   137d2:	e69f      	b.n	13514 <__aeabi_dadd+0x1c0>
   137d4:	2e00      	cmp	r6, #0
   137d6:	d130      	bne.n	1383a <__aeabi_dadd+0x4e6>
   137d8:	0026      	movs	r6, r4
   137da:	433e      	orrs	r6, r7
   137dc:	d067      	beq.n	138ae <__aeabi_dadd+0x55a>
   137de:	43db      	mvns	r3, r3
   137e0:	469a      	mov	sl, r3
   137e2:	2b00      	cmp	r3, #0
   137e4:	d01c      	beq.n	13820 <__aeabi_dadd+0x4cc>
   137e6:	4e61      	ldr	r6, [pc, #388]	; (1396c <__aeabi_dadd+0x618>)
   137e8:	42b0      	cmp	r0, r6
   137ea:	d060      	beq.n	138ae <__aeabi_dadd+0x55a>
   137ec:	4653      	mov	r3, sl
   137ee:	2b38      	cmp	r3, #56	; 0x38
   137f0:	dd00      	ble.n	137f4 <__aeabi_dadd+0x4a0>
   137f2:	e096      	b.n	13922 <__aeabi_dadd+0x5ce>
   137f4:	2b1f      	cmp	r3, #31
   137f6:	dd00      	ble.n	137fa <__aeabi_dadd+0x4a6>
   137f8:	e09f      	b.n	1393a <__aeabi_dadd+0x5e6>
   137fa:	2620      	movs	r6, #32
   137fc:	1af3      	subs	r3, r6, r3
   137fe:	0026      	movs	r6, r4
   13800:	409e      	lsls	r6, r3
   13802:	469c      	mov	ip, r3
   13804:	46b3      	mov	fp, r6
   13806:	4653      	mov	r3, sl
   13808:	003e      	movs	r6, r7
   1380a:	40de      	lsrs	r6, r3
   1380c:	0033      	movs	r3, r6
   1380e:	465e      	mov	r6, fp
   13810:	431e      	orrs	r6, r3
   13812:	4663      	mov	r3, ip
   13814:	409f      	lsls	r7, r3
   13816:	1e7b      	subs	r3, r7, #1
   13818:	419f      	sbcs	r7, r3
   1381a:	4653      	mov	r3, sl
   1381c:	40dc      	lsrs	r4, r3
   1381e:	4337      	orrs	r7, r6
   13820:	18bf      	adds	r7, r7, r2
   13822:	4297      	cmp	r7, r2
   13824:	4192      	sbcs	r2, r2
   13826:	1864      	adds	r4, r4, r1
   13828:	4252      	negs	r2, r2
   1382a:	18a4      	adds	r4, r4, r2
   1382c:	0006      	movs	r6, r0
   1382e:	e678      	b.n	13522 <__aeabi_dadd+0x1ce>
   13830:	4327      	orrs	r7, r4
   13832:	1e7c      	subs	r4, r7, #1
   13834:	41a7      	sbcs	r7, r4
   13836:	2400      	movs	r4, #0
   13838:	e737      	b.n	136aa <__aeabi_dadd+0x356>
   1383a:	4e4c      	ldr	r6, [pc, #304]	; (1396c <__aeabi_dadd+0x618>)
   1383c:	42b0      	cmp	r0, r6
   1383e:	d036      	beq.n	138ae <__aeabi_dadd+0x55a>
   13840:	2680      	movs	r6, #128	; 0x80
   13842:	425b      	negs	r3, r3
   13844:	0436      	lsls	r6, r6, #16
   13846:	469a      	mov	sl, r3
   13848:	4334      	orrs	r4, r6
   1384a:	e7cf      	b.n	137ec <__aeabi_dadd+0x498>
   1384c:	0018      	movs	r0, r3
   1384e:	4310      	orrs	r0, r2
   13850:	d100      	bne.n	13854 <__aeabi_dadd+0x500>
   13852:	e603      	b.n	1345c <__aeabi_dadd+0x108>
   13854:	1ab8      	subs	r0, r7, r2
   13856:	4684      	mov	ip, r0
   13858:	4567      	cmp	r7, ip
   1385a:	41ad      	sbcs	r5, r5
   1385c:	1ae0      	subs	r0, r4, r3
   1385e:	426d      	negs	r5, r5
   13860:	1b40      	subs	r0, r0, r5
   13862:	0205      	lsls	r5, r0, #8
   13864:	d400      	bmi.n	13868 <__aeabi_dadd+0x514>
   13866:	e62c      	b.n	134c2 <__aeabi_dadd+0x16e>
   13868:	1bd7      	subs	r7, r2, r7
   1386a:	42ba      	cmp	r2, r7
   1386c:	4192      	sbcs	r2, r2
   1386e:	1b1c      	subs	r4, r3, r4
   13870:	4252      	negs	r2, r2
   13872:	1aa4      	subs	r4, r4, r2
   13874:	46d8      	mov	r8, fp
   13876:	e5f1      	b.n	1345c <__aeabi_dadd+0x108>
   13878:	0018      	movs	r0, r3
   1387a:	4310      	orrs	r0, r2
   1387c:	d100      	bne.n	13880 <__aeabi_dadd+0x52c>
   1387e:	e763      	b.n	13748 <__aeabi_dadd+0x3f4>
   13880:	08f8      	lsrs	r0, r7, #3
   13882:	0767      	lsls	r7, r4, #29
   13884:	4307      	orrs	r7, r0
   13886:	2080      	movs	r0, #128	; 0x80
   13888:	08e4      	lsrs	r4, r4, #3
   1388a:	0300      	lsls	r0, r0, #12
   1388c:	4204      	tst	r4, r0
   1388e:	d008      	beq.n	138a2 <__aeabi_dadd+0x54e>
   13890:	08dd      	lsrs	r5, r3, #3
   13892:	4205      	tst	r5, r0
   13894:	d105      	bne.n	138a2 <__aeabi_dadd+0x54e>
   13896:	08d2      	lsrs	r2, r2, #3
   13898:	0759      	lsls	r1, r3, #29
   1389a:	4311      	orrs	r1, r2
   1389c:	000f      	movs	r7, r1
   1389e:	002c      	movs	r4, r5
   138a0:	46d8      	mov	r8, fp
   138a2:	0f7b      	lsrs	r3, r7, #29
   138a4:	00e4      	lsls	r4, r4, #3
   138a6:	431c      	orrs	r4, r3
   138a8:	00ff      	lsls	r7, r7, #3
   138aa:	4e30      	ldr	r6, [pc, #192]	; (1396c <__aeabi_dadd+0x618>)
   138ac:	e5d6      	b.n	1345c <__aeabi_dadd+0x108>
   138ae:	000c      	movs	r4, r1
   138b0:	0017      	movs	r7, r2
   138b2:	0006      	movs	r6, r0
   138b4:	e5d2      	b.n	1345c <__aeabi_dadd+0x108>
   138b6:	2b00      	cmp	r3, #0
   138b8:	d038      	beq.n	1392c <__aeabi_dadd+0x5d8>
   138ba:	000b      	movs	r3, r1
   138bc:	4313      	orrs	r3, r2
   138be:	d100      	bne.n	138c2 <__aeabi_dadd+0x56e>
   138c0:	e742      	b.n	13748 <__aeabi_dadd+0x3f4>
   138c2:	08f8      	lsrs	r0, r7, #3
   138c4:	0767      	lsls	r7, r4, #29
   138c6:	4307      	orrs	r7, r0
   138c8:	2080      	movs	r0, #128	; 0x80
   138ca:	08e4      	lsrs	r4, r4, #3
   138cc:	0300      	lsls	r0, r0, #12
   138ce:	4204      	tst	r4, r0
   138d0:	d0e7      	beq.n	138a2 <__aeabi_dadd+0x54e>
   138d2:	08cb      	lsrs	r3, r1, #3
   138d4:	4203      	tst	r3, r0
   138d6:	d1e4      	bne.n	138a2 <__aeabi_dadd+0x54e>
   138d8:	08d2      	lsrs	r2, r2, #3
   138da:	0749      	lsls	r1, r1, #29
   138dc:	4311      	orrs	r1, r2
   138de:	000f      	movs	r7, r1
   138e0:	001c      	movs	r4, r3
   138e2:	e7de      	b.n	138a2 <__aeabi_dadd+0x54e>
   138e4:	2700      	movs	r7, #0
   138e6:	2400      	movs	r4, #0
   138e8:	e5d5      	b.n	13496 <__aeabi_dadd+0x142>
   138ea:	2100      	movs	r1, #0
   138ec:	e76b      	b.n	137c6 <__aeabi_dadd+0x472>
   138ee:	2500      	movs	r5, #0
   138f0:	2700      	movs	r7, #0
   138f2:	e5f3      	b.n	134dc <__aeabi_dadd+0x188>
   138f4:	464e      	mov	r6, r9
   138f6:	0025      	movs	r5, r4
   138f8:	3e20      	subs	r6, #32
   138fa:	40f5      	lsrs	r5, r6
   138fc:	464b      	mov	r3, r9
   138fe:	002e      	movs	r6, r5
   13900:	2b20      	cmp	r3, #32
   13902:	d02d      	beq.n	13960 <__aeabi_dadd+0x60c>
   13904:	2540      	movs	r5, #64	; 0x40
   13906:	1aed      	subs	r5, r5, r3
   13908:	40ac      	lsls	r4, r5
   1390a:	4327      	orrs	r7, r4
   1390c:	1e7c      	subs	r4, r7, #1
   1390e:	41a7      	sbcs	r7, r4
   13910:	2400      	movs	r4, #0
   13912:	4337      	orrs	r7, r6
   13914:	e6c9      	b.n	136aa <__aeabi_dadd+0x356>
   13916:	2480      	movs	r4, #128	; 0x80
   13918:	2500      	movs	r5, #0
   1391a:	0324      	lsls	r4, r4, #12
   1391c:	4e13      	ldr	r6, [pc, #76]	; (1396c <__aeabi_dadd+0x618>)
   1391e:	2700      	movs	r7, #0
   13920:	e5dc      	b.n	134dc <__aeabi_dadd+0x188>
   13922:	4327      	orrs	r7, r4
   13924:	1e7c      	subs	r4, r7, #1
   13926:	41a7      	sbcs	r7, r4
   13928:	2400      	movs	r4, #0
   1392a:	e779      	b.n	13820 <__aeabi_dadd+0x4cc>
   1392c:	000c      	movs	r4, r1
   1392e:	0017      	movs	r7, r2
   13930:	4e0e      	ldr	r6, [pc, #56]	; (1396c <__aeabi_dadd+0x618>)
   13932:	e593      	b.n	1345c <__aeabi_dadd+0x108>
   13934:	000c      	movs	r4, r1
   13936:	0017      	movs	r7, r2
   13938:	e590      	b.n	1345c <__aeabi_dadd+0x108>
   1393a:	4656      	mov	r6, sl
   1393c:	0023      	movs	r3, r4
   1393e:	3e20      	subs	r6, #32
   13940:	40f3      	lsrs	r3, r6
   13942:	4699      	mov	r9, r3
   13944:	4653      	mov	r3, sl
   13946:	2b20      	cmp	r3, #32
   13948:	d00e      	beq.n	13968 <__aeabi_dadd+0x614>
   1394a:	2340      	movs	r3, #64	; 0x40
   1394c:	4656      	mov	r6, sl
   1394e:	1b9b      	subs	r3, r3, r6
   13950:	409c      	lsls	r4, r3
   13952:	4327      	orrs	r7, r4
   13954:	1e7c      	subs	r4, r7, #1
   13956:	41a7      	sbcs	r7, r4
   13958:	464b      	mov	r3, r9
   1395a:	2400      	movs	r4, #0
   1395c:	431f      	orrs	r7, r3
   1395e:	e75f      	b.n	13820 <__aeabi_dadd+0x4cc>
   13960:	2400      	movs	r4, #0
   13962:	e7d2      	b.n	1390a <__aeabi_dadd+0x5b6>
   13964:	0017      	movs	r7, r2
   13966:	e5b2      	b.n	134ce <__aeabi_dadd+0x17a>
   13968:	2400      	movs	r4, #0
   1396a:	e7f2      	b.n	13952 <__aeabi_dadd+0x5fe>
   1396c:	000007ff 	.word	0x000007ff
   13970:	ff7fffff 	.word	0xff7fffff

00013974 <__aeabi_ddiv>:
   13974:	b5f0      	push	{r4, r5, r6, r7, lr}
   13976:	4657      	mov	r7, sl
   13978:	4645      	mov	r5, r8
   1397a:	46de      	mov	lr, fp
   1397c:	464e      	mov	r6, r9
   1397e:	b5e0      	push	{r5, r6, r7, lr}
   13980:	004c      	lsls	r4, r1, #1
   13982:	030e      	lsls	r6, r1, #12
   13984:	b087      	sub	sp, #28
   13986:	4683      	mov	fp, r0
   13988:	4692      	mov	sl, r2
   1398a:	001d      	movs	r5, r3
   1398c:	4680      	mov	r8, r0
   1398e:	0b36      	lsrs	r6, r6, #12
   13990:	0d64      	lsrs	r4, r4, #21
   13992:	0fcf      	lsrs	r7, r1, #31
   13994:	2c00      	cmp	r4, #0
   13996:	d04f      	beq.n	13a38 <__aeabi_ddiv+0xc4>
   13998:	4b6f      	ldr	r3, [pc, #444]	; (13b58 <__aeabi_ddiv+0x1e4>)
   1399a:	429c      	cmp	r4, r3
   1399c:	d035      	beq.n	13a0a <__aeabi_ddiv+0x96>
   1399e:	2380      	movs	r3, #128	; 0x80
   139a0:	0f42      	lsrs	r2, r0, #29
   139a2:	041b      	lsls	r3, r3, #16
   139a4:	00f6      	lsls	r6, r6, #3
   139a6:	4313      	orrs	r3, r2
   139a8:	4333      	orrs	r3, r6
   139aa:	4699      	mov	r9, r3
   139ac:	00c3      	lsls	r3, r0, #3
   139ae:	4698      	mov	r8, r3
   139b0:	4b6a      	ldr	r3, [pc, #424]	; (13b5c <__aeabi_ddiv+0x1e8>)
   139b2:	2600      	movs	r6, #0
   139b4:	469c      	mov	ip, r3
   139b6:	2300      	movs	r3, #0
   139b8:	4464      	add	r4, ip
   139ba:	9303      	str	r3, [sp, #12]
   139bc:	032b      	lsls	r3, r5, #12
   139be:	0b1b      	lsrs	r3, r3, #12
   139c0:	469b      	mov	fp, r3
   139c2:	006b      	lsls	r3, r5, #1
   139c4:	0fed      	lsrs	r5, r5, #31
   139c6:	4650      	mov	r0, sl
   139c8:	0d5b      	lsrs	r3, r3, #21
   139ca:	9501      	str	r5, [sp, #4]
   139cc:	d05e      	beq.n	13a8c <__aeabi_ddiv+0x118>
   139ce:	4a62      	ldr	r2, [pc, #392]	; (13b58 <__aeabi_ddiv+0x1e4>)
   139d0:	4293      	cmp	r3, r2
   139d2:	d053      	beq.n	13a7c <__aeabi_ddiv+0x108>
   139d4:	465a      	mov	r2, fp
   139d6:	00d1      	lsls	r1, r2, #3
   139d8:	2280      	movs	r2, #128	; 0x80
   139da:	0f40      	lsrs	r0, r0, #29
   139dc:	0412      	lsls	r2, r2, #16
   139de:	4302      	orrs	r2, r0
   139e0:	430a      	orrs	r2, r1
   139e2:	4693      	mov	fp, r2
   139e4:	4652      	mov	r2, sl
   139e6:	00d1      	lsls	r1, r2, #3
   139e8:	4a5c      	ldr	r2, [pc, #368]	; (13b5c <__aeabi_ddiv+0x1e8>)
   139ea:	4694      	mov	ip, r2
   139ec:	2200      	movs	r2, #0
   139ee:	4463      	add	r3, ip
   139f0:	0038      	movs	r0, r7
   139f2:	4068      	eors	r0, r5
   139f4:	4684      	mov	ip, r0
   139f6:	9002      	str	r0, [sp, #8]
   139f8:	1ae4      	subs	r4, r4, r3
   139fa:	4316      	orrs	r6, r2
   139fc:	2e0f      	cmp	r6, #15
   139fe:	d900      	bls.n	13a02 <__aeabi_ddiv+0x8e>
   13a00:	e0b4      	b.n	13b6c <__aeabi_ddiv+0x1f8>
   13a02:	4b57      	ldr	r3, [pc, #348]	; (13b60 <__aeabi_ddiv+0x1ec>)
   13a04:	00b6      	lsls	r6, r6, #2
   13a06:	599b      	ldr	r3, [r3, r6]
   13a08:	469f      	mov	pc, r3
   13a0a:	0003      	movs	r3, r0
   13a0c:	4333      	orrs	r3, r6
   13a0e:	4699      	mov	r9, r3
   13a10:	d16c      	bne.n	13aec <__aeabi_ddiv+0x178>
   13a12:	2300      	movs	r3, #0
   13a14:	4698      	mov	r8, r3
   13a16:	3302      	adds	r3, #2
   13a18:	2608      	movs	r6, #8
   13a1a:	9303      	str	r3, [sp, #12]
   13a1c:	e7ce      	b.n	139bc <__aeabi_ddiv+0x48>
   13a1e:	46cb      	mov	fp, r9
   13a20:	4641      	mov	r1, r8
   13a22:	9a03      	ldr	r2, [sp, #12]
   13a24:	9701      	str	r7, [sp, #4]
   13a26:	2a02      	cmp	r2, #2
   13a28:	d165      	bne.n	13af6 <__aeabi_ddiv+0x182>
   13a2a:	9b01      	ldr	r3, [sp, #4]
   13a2c:	4c4a      	ldr	r4, [pc, #296]	; (13b58 <__aeabi_ddiv+0x1e4>)
   13a2e:	469c      	mov	ip, r3
   13a30:	2300      	movs	r3, #0
   13a32:	2200      	movs	r2, #0
   13a34:	4698      	mov	r8, r3
   13a36:	e06b      	b.n	13b10 <__aeabi_ddiv+0x19c>
   13a38:	0003      	movs	r3, r0
   13a3a:	4333      	orrs	r3, r6
   13a3c:	4699      	mov	r9, r3
   13a3e:	d04e      	beq.n	13ade <__aeabi_ddiv+0x16a>
   13a40:	2e00      	cmp	r6, #0
   13a42:	d100      	bne.n	13a46 <__aeabi_ddiv+0xd2>
   13a44:	e1bc      	b.n	13dc0 <__aeabi_ddiv+0x44c>
   13a46:	0030      	movs	r0, r6
   13a48:	f001 f8ca 	bl	14be0 <__clzsi2>
   13a4c:	0003      	movs	r3, r0
   13a4e:	3b0b      	subs	r3, #11
   13a50:	2b1c      	cmp	r3, #28
   13a52:	dd00      	ble.n	13a56 <__aeabi_ddiv+0xe2>
   13a54:	e1ac      	b.n	13db0 <__aeabi_ddiv+0x43c>
   13a56:	221d      	movs	r2, #29
   13a58:	1ad3      	subs	r3, r2, r3
   13a5a:	465a      	mov	r2, fp
   13a5c:	0001      	movs	r1, r0
   13a5e:	40da      	lsrs	r2, r3
   13a60:	3908      	subs	r1, #8
   13a62:	408e      	lsls	r6, r1
   13a64:	0013      	movs	r3, r2
   13a66:	4333      	orrs	r3, r6
   13a68:	4699      	mov	r9, r3
   13a6a:	465b      	mov	r3, fp
   13a6c:	408b      	lsls	r3, r1
   13a6e:	4698      	mov	r8, r3
   13a70:	2300      	movs	r3, #0
   13a72:	4c3c      	ldr	r4, [pc, #240]	; (13b64 <__aeabi_ddiv+0x1f0>)
   13a74:	2600      	movs	r6, #0
   13a76:	1a24      	subs	r4, r4, r0
   13a78:	9303      	str	r3, [sp, #12]
   13a7a:	e79f      	b.n	139bc <__aeabi_ddiv+0x48>
   13a7c:	4651      	mov	r1, sl
   13a7e:	465a      	mov	r2, fp
   13a80:	4311      	orrs	r1, r2
   13a82:	d129      	bne.n	13ad8 <__aeabi_ddiv+0x164>
   13a84:	2200      	movs	r2, #0
   13a86:	4693      	mov	fp, r2
   13a88:	3202      	adds	r2, #2
   13a8a:	e7b1      	b.n	139f0 <__aeabi_ddiv+0x7c>
   13a8c:	4659      	mov	r1, fp
   13a8e:	4301      	orrs	r1, r0
   13a90:	d01e      	beq.n	13ad0 <__aeabi_ddiv+0x15c>
   13a92:	465b      	mov	r3, fp
   13a94:	2b00      	cmp	r3, #0
   13a96:	d100      	bne.n	13a9a <__aeabi_ddiv+0x126>
   13a98:	e19e      	b.n	13dd8 <__aeabi_ddiv+0x464>
   13a9a:	4658      	mov	r0, fp
   13a9c:	f001 f8a0 	bl	14be0 <__clzsi2>
   13aa0:	0003      	movs	r3, r0
   13aa2:	3b0b      	subs	r3, #11
   13aa4:	2b1c      	cmp	r3, #28
   13aa6:	dd00      	ble.n	13aaa <__aeabi_ddiv+0x136>
   13aa8:	e18f      	b.n	13dca <__aeabi_ddiv+0x456>
   13aaa:	0002      	movs	r2, r0
   13aac:	4659      	mov	r1, fp
   13aae:	3a08      	subs	r2, #8
   13ab0:	4091      	lsls	r1, r2
   13ab2:	468b      	mov	fp, r1
   13ab4:	211d      	movs	r1, #29
   13ab6:	1acb      	subs	r3, r1, r3
   13ab8:	4651      	mov	r1, sl
   13aba:	40d9      	lsrs	r1, r3
   13abc:	000b      	movs	r3, r1
   13abe:	4659      	mov	r1, fp
   13ac0:	430b      	orrs	r3, r1
   13ac2:	4651      	mov	r1, sl
   13ac4:	469b      	mov	fp, r3
   13ac6:	4091      	lsls	r1, r2
   13ac8:	4b26      	ldr	r3, [pc, #152]	; (13b64 <__aeabi_ddiv+0x1f0>)
   13aca:	2200      	movs	r2, #0
   13acc:	1a1b      	subs	r3, r3, r0
   13ace:	e78f      	b.n	139f0 <__aeabi_ddiv+0x7c>
   13ad0:	2300      	movs	r3, #0
   13ad2:	2201      	movs	r2, #1
   13ad4:	469b      	mov	fp, r3
   13ad6:	e78b      	b.n	139f0 <__aeabi_ddiv+0x7c>
   13ad8:	4651      	mov	r1, sl
   13ada:	2203      	movs	r2, #3
   13adc:	e788      	b.n	139f0 <__aeabi_ddiv+0x7c>
   13ade:	2300      	movs	r3, #0
   13ae0:	4698      	mov	r8, r3
   13ae2:	3301      	adds	r3, #1
   13ae4:	2604      	movs	r6, #4
   13ae6:	2400      	movs	r4, #0
   13ae8:	9303      	str	r3, [sp, #12]
   13aea:	e767      	b.n	139bc <__aeabi_ddiv+0x48>
   13aec:	2303      	movs	r3, #3
   13aee:	46b1      	mov	r9, r6
   13af0:	9303      	str	r3, [sp, #12]
   13af2:	260c      	movs	r6, #12
   13af4:	e762      	b.n	139bc <__aeabi_ddiv+0x48>
   13af6:	2a03      	cmp	r2, #3
   13af8:	d100      	bne.n	13afc <__aeabi_ddiv+0x188>
   13afa:	e25c      	b.n	13fb6 <__aeabi_ddiv+0x642>
   13afc:	9b01      	ldr	r3, [sp, #4]
   13afe:	2a01      	cmp	r2, #1
   13b00:	d000      	beq.n	13b04 <__aeabi_ddiv+0x190>
   13b02:	e1e4      	b.n	13ece <__aeabi_ddiv+0x55a>
   13b04:	4013      	ands	r3, r2
   13b06:	469c      	mov	ip, r3
   13b08:	2300      	movs	r3, #0
   13b0a:	2400      	movs	r4, #0
   13b0c:	2200      	movs	r2, #0
   13b0e:	4698      	mov	r8, r3
   13b10:	2100      	movs	r1, #0
   13b12:	0312      	lsls	r2, r2, #12
   13b14:	0b13      	lsrs	r3, r2, #12
   13b16:	0d0a      	lsrs	r2, r1, #20
   13b18:	0512      	lsls	r2, r2, #20
   13b1a:	431a      	orrs	r2, r3
   13b1c:	0523      	lsls	r3, r4, #20
   13b1e:	4c12      	ldr	r4, [pc, #72]	; (13b68 <__aeabi_ddiv+0x1f4>)
   13b20:	4640      	mov	r0, r8
   13b22:	4022      	ands	r2, r4
   13b24:	4313      	orrs	r3, r2
   13b26:	4662      	mov	r2, ip
   13b28:	005b      	lsls	r3, r3, #1
   13b2a:	07d2      	lsls	r2, r2, #31
   13b2c:	085b      	lsrs	r3, r3, #1
   13b2e:	4313      	orrs	r3, r2
   13b30:	0019      	movs	r1, r3
   13b32:	b007      	add	sp, #28
   13b34:	bc3c      	pop	{r2, r3, r4, r5}
   13b36:	4690      	mov	r8, r2
   13b38:	4699      	mov	r9, r3
   13b3a:	46a2      	mov	sl, r4
   13b3c:	46ab      	mov	fp, r5
   13b3e:	bdf0      	pop	{r4, r5, r6, r7, pc}
   13b40:	2300      	movs	r3, #0
   13b42:	2280      	movs	r2, #128	; 0x80
   13b44:	469c      	mov	ip, r3
   13b46:	0312      	lsls	r2, r2, #12
   13b48:	4698      	mov	r8, r3
   13b4a:	4c03      	ldr	r4, [pc, #12]	; (13b58 <__aeabi_ddiv+0x1e4>)
   13b4c:	e7e0      	b.n	13b10 <__aeabi_ddiv+0x19c>
   13b4e:	2300      	movs	r3, #0
   13b50:	4c01      	ldr	r4, [pc, #4]	; (13b58 <__aeabi_ddiv+0x1e4>)
   13b52:	2200      	movs	r2, #0
   13b54:	4698      	mov	r8, r3
   13b56:	e7db      	b.n	13b10 <__aeabi_ddiv+0x19c>
   13b58:	000007ff 	.word	0x000007ff
   13b5c:	fffffc01 	.word	0xfffffc01
   13b60:	0001674c 	.word	0x0001674c
   13b64:	fffffc0d 	.word	0xfffffc0d
   13b68:	800fffff 	.word	0x800fffff
   13b6c:	45d9      	cmp	r9, fp
   13b6e:	d900      	bls.n	13b72 <__aeabi_ddiv+0x1fe>
   13b70:	e139      	b.n	13de6 <__aeabi_ddiv+0x472>
   13b72:	d100      	bne.n	13b76 <__aeabi_ddiv+0x202>
   13b74:	e134      	b.n	13de0 <__aeabi_ddiv+0x46c>
   13b76:	2300      	movs	r3, #0
   13b78:	4646      	mov	r6, r8
   13b7a:	464d      	mov	r5, r9
   13b7c:	469a      	mov	sl, r3
   13b7e:	3c01      	subs	r4, #1
   13b80:	465b      	mov	r3, fp
   13b82:	0e0a      	lsrs	r2, r1, #24
   13b84:	021b      	lsls	r3, r3, #8
   13b86:	431a      	orrs	r2, r3
   13b88:	020b      	lsls	r3, r1, #8
   13b8a:	0c17      	lsrs	r7, r2, #16
   13b8c:	9303      	str	r3, [sp, #12]
   13b8e:	0413      	lsls	r3, r2, #16
   13b90:	0c1b      	lsrs	r3, r3, #16
   13b92:	0039      	movs	r1, r7
   13b94:	0028      	movs	r0, r5
   13b96:	4690      	mov	r8, r2
   13b98:	9301      	str	r3, [sp, #4]
   13b9a:	f7fe fc65 	bl	12468 <__udivsi3>
   13b9e:	0002      	movs	r2, r0
   13ba0:	9b01      	ldr	r3, [sp, #4]
   13ba2:	4683      	mov	fp, r0
   13ba4:	435a      	muls	r2, r3
   13ba6:	0028      	movs	r0, r5
   13ba8:	0039      	movs	r1, r7
   13baa:	4691      	mov	r9, r2
   13bac:	f7fe fce2 	bl	12574 <__aeabi_uidivmod>
   13bb0:	0c35      	lsrs	r5, r6, #16
   13bb2:	0409      	lsls	r1, r1, #16
   13bb4:	430d      	orrs	r5, r1
   13bb6:	45a9      	cmp	r9, r5
   13bb8:	d90d      	bls.n	13bd6 <__aeabi_ddiv+0x262>
   13bba:	465b      	mov	r3, fp
   13bbc:	4445      	add	r5, r8
   13bbe:	3b01      	subs	r3, #1
   13bc0:	45a8      	cmp	r8, r5
   13bc2:	d900      	bls.n	13bc6 <__aeabi_ddiv+0x252>
   13bc4:	e13a      	b.n	13e3c <__aeabi_ddiv+0x4c8>
   13bc6:	45a9      	cmp	r9, r5
   13bc8:	d800      	bhi.n	13bcc <__aeabi_ddiv+0x258>
   13bca:	e137      	b.n	13e3c <__aeabi_ddiv+0x4c8>
   13bcc:	2302      	movs	r3, #2
   13bce:	425b      	negs	r3, r3
   13bd0:	469c      	mov	ip, r3
   13bd2:	4445      	add	r5, r8
   13bd4:	44e3      	add	fp, ip
   13bd6:	464b      	mov	r3, r9
   13bd8:	1aeb      	subs	r3, r5, r3
   13bda:	0039      	movs	r1, r7
   13bdc:	0018      	movs	r0, r3
   13bde:	9304      	str	r3, [sp, #16]
   13be0:	f7fe fc42 	bl	12468 <__udivsi3>
   13be4:	9b01      	ldr	r3, [sp, #4]
   13be6:	0005      	movs	r5, r0
   13be8:	4343      	muls	r3, r0
   13bea:	0039      	movs	r1, r7
   13bec:	9804      	ldr	r0, [sp, #16]
   13bee:	4699      	mov	r9, r3
   13bf0:	f7fe fcc0 	bl	12574 <__aeabi_uidivmod>
   13bf4:	0433      	lsls	r3, r6, #16
   13bf6:	0409      	lsls	r1, r1, #16
   13bf8:	0c1b      	lsrs	r3, r3, #16
   13bfa:	430b      	orrs	r3, r1
   13bfc:	4599      	cmp	r9, r3
   13bfe:	d909      	bls.n	13c14 <__aeabi_ddiv+0x2a0>
   13c00:	4443      	add	r3, r8
   13c02:	1e6a      	subs	r2, r5, #1
   13c04:	4598      	cmp	r8, r3
   13c06:	d900      	bls.n	13c0a <__aeabi_ddiv+0x296>
   13c08:	e11a      	b.n	13e40 <__aeabi_ddiv+0x4cc>
   13c0a:	4599      	cmp	r9, r3
   13c0c:	d800      	bhi.n	13c10 <__aeabi_ddiv+0x29c>
   13c0e:	e117      	b.n	13e40 <__aeabi_ddiv+0x4cc>
   13c10:	3d02      	subs	r5, #2
   13c12:	4443      	add	r3, r8
   13c14:	464a      	mov	r2, r9
   13c16:	1a9b      	subs	r3, r3, r2
   13c18:	465a      	mov	r2, fp
   13c1a:	0412      	lsls	r2, r2, #16
   13c1c:	432a      	orrs	r2, r5
   13c1e:	9903      	ldr	r1, [sp, #12]
   13c20:	4693      	mov	fp, r2
   13c22:	0c10      	lsrs	r0, r2, #16
   13c24:	0c0a      	lsrs	r2, r1, #16
   13c26:	4691      	mov	r9, r2
   13c28:	0409      	lsls	r1, r1, #16
   13c2a:	465a      	mov	r2, fp
   13c2c:	0c09      	lsrs	r1, r1, #16
   13c2e:	464e      	mov	r6, r9
   13c30:	000d      	movs	r5, r1
   13c32:	0412      	lsls	r2, r2, #16
   13c34:	0c12      	lsrs	r2, r2, #16
   13c36:	4345      	muls	r5, r0
   13c38:	9105      	str	r1, [sp, #20]
   13c3a:	4351      	muls	r1, r2
   13c3c:	4372      	muls	r2, r6
   13c3e:	4370      	muls	r0, r6
   13c40:	1952      	adds	r2, r2, r5
   13c42:	0c0e      	lsrs	r6, r1, #16
   13c44:	18b2      	adds	r2, r6, r2
   13c46:	4295      	cmp	r5, r2
   13c48:	d903      	bls.n	13c52 <__aeabi_ddiv+0x2de>
   13c4a:	2580      	movs	r5, #128	; 0x80
   13c4c:	026d      	lsls	r5, r5, #9
   13c4e:	46ac      	mov	ip, r5
   13c50:	4460      	add	r0, ip
   13c52:	0c15      	lsrs	r5, r2, #16
   13c54:	0409      	lsls	r1, r1, #16
   13c56:	0412      	lsls	r2, r2, #16
   13c58:	0c09      	lsrs	r1, r1, #16
   13c5a:	1828      	adds	r0, r5, r0
   13c5c:	1852      	adds	r2, r2, r1
   13c5e:	4283      	cmp	r3, r0
   13c60:	d200      	bcs.n	13c64 <__aeabi_ddiv+0x2f0>
   13c62:	e0ce      	b.n	13e02 <__aeabi_ddiv+0x48e>
   13c64:	d100      	bne.n	13c68 <__aeabi_ddiv+0x2f4>
   13c66:	e0c8      	b.n	13dfa <__aeabi_ddiv+0x486>
   13c68:	1a1d      	subs	r5, r3, r0
   13c6a:	4653      	mov	r3, sl
   13c6c:	1a9e      	subs	r6, r3, r2
   13c6e:	45b2      	cmp	sl, r6
   13c70:	4192      	sbcs	r2, r2
   13c72:	4252      	negs	r2, r2
   13c74:	1aab      	subs	r3, r5, r2
   13c76:	469a      	mov	sl, r3
   13c78:	4598      	cmp	r8, r3
   13c7a:	d100      	bne.n	13c7e <__aeabi_ddiv+0x30a>
   13c7c:	e117      	b.n	13eae <__aeabi_ddiv+0x53a>
   13c7e:	0039      	movs	r1, r7
   13c80:	0018      	movs	r0, r3
   13c82:	f7fe fbf1 	bl	12468 <__udivsi3>
   13c86:	9b01      	ldr	r3, [sp, #4]
   13c88:	0005      	movs	r5, r0
   13c8a:	4343      	muls	r3, r0
   13c8c:	0039      	movs	r1, r7
   13c8e:	4650      	mov	r0, sl
   13c90:	9304      	str	r3, [sp, #16]
   13c92:	f7fe fc6f 	bl	12574 <__aeabi_uidivmod>
   13c96:	9804      	ldr	r0, [sp, #16]
   13c98:	040b      	lsls	r3, r1, #16
   13c9a:	0c31      	lsrs	r1, r6, #16
   13c9c:	4319      	orrs	r1, r3
   13c9e:	4288      	cmp	r0, r1
   13ca0:	d909      	bls.n	13cb6 <__aeabi_ddiv+0x342>
   13ca2:	4441      	add	r1, r8
   13ca4:	1e6b      	subs	r3, r5, #1
   13ca6:	4588      	cmp	r8, r1
   13ca8:	d900      	bls.n	13cac <__aeabi_ddiv+0x338>
   13caa:	e107      	b.n	13ebc <__aeabi_ddiv+0x548>
   13cac:	4288      	cmp	r0, r1
   13cae:	d800      	bhi.n	13cb2 <__aeabi_ddiv+0x33e>
   13cb0:	e104      	b.n	13ebc <__aeabi_ddiv+0x548>
   13cb2:	3d02      	subs	r5, #2
   13cb4:	4441      	add	r1, r8
   13cb6:	9b04      	ldr	r3, [sp, #16]
   13cb8:	1acb      	subs	r3, r1, r3
   13cba:	0018      	movs	r0, r3
   13cbc:	0039      	movs	r1, r7
   13cbe:	9304      	str	r3, [sp, #16]
   13cc0:	f7fe fbd2 	bl	12468 <__udivsi3>
   13cc4:	9b01      	ldr	r3, [sp, #4]
   13cc6:	4682      	mov	sl, r0
   13cc8:	4343      	muls	r3, r0
   13cca:	0039      	movs	r1, r7
   13ccc:	9804      	ldr	r0, [sp, #16]
   13cce:	9301      	str	r3, [sp, #4]
   13cd0:	f7fe fc50 	bl	12574 <__aeabi_uidivmod>
   13cd4:	9801      	ldr	r0, [sp, #4]
   13cd6:	040b      	lsls	r3, r1, #16
   13cd8:	0431      	lsls	r1, r6, #16
   13cda:	0c09      	lsrs	r1, r1, #16
   13cdc:	4319      	orrs	r1, r3
   13cde:	4288      	cmp	r0, r1
   13ce0:	d90d      	bls.n	13cfe <__aeabi_ddiv+0x38a>
   13ce2:	4653      	mov	r3, sl
   13ce4:	4441      	add	r1, r8
   13ce6:	3b01      	subs	r3, #1
   13ce8:	4588      	cmp	r8, r1
   13cea:	d900      	bls.n	13cee <__aeabi_ddiv+0x37a>
   13cec:	e0e8      	b.n	13ec0 <__aeabi_ddiv+0x54c>
   13cee:	4288      	cmp	r0, r1
   13cf0:	d800      	bhi.n	13cf4 <__aeabi_ddiv+0x380>
   13cf2:	e0e5      	b.n	13ec0 <__aeabi_ddiv+0x54c>
   13cf4:	2302      	movs	r3, #2
   13cf6:	425b      	negs	r3, r3
   13cf8:	469c      	mov	ip, r3
   13cfa:	4441      	add	r1, r8
   13cfc:	44e2      	add	sl, ip
   13cfe:	9b01      	ldr	r3, [sp, #4]
   13d00:	042d      	lsls	r5, r5, #16
   13d02:	1ace      	subs	r6, r1, r3
   13d04:	4651      	mov	r1, sl
   13d06:	4329      	orrs	r1, r5
   13d08:	9d05      	ldr	r5, [sp, #20]
   13d0a:	464f      	mov	r7, r9
   13d0c:	002a      	movs	r2, r5
   13d0e:	040b      	lsls	r3, r1, #16
   13d10:	0c08      	lsrs	r0, r1, #16
   13d12:	0c1b      	lsrs	r3, r3, #16
   13d14:	435a      	muls	r2, r3
   13d16:	4345      	muls	r5, r0
   13d18:	437b      	muls	r3, r7
   13d1a:	4378      	muls	r0, r7
   13d1c:	195b      	adds	r3, r3, r5
   13d1e:	0c17      	lsrs	r7, r2, #16
   13d20:	18fb      	adds	r3, r7, r3
   13d22:	429d      	cmp	r5, r3
   13d24:	d903      	bls.n	13d2e <__aeabi_ddiv+0x3ba>
   13d26:	2580      	movs	r5, #128	; 0x80
   13d28:	026d      	lsls	r5, r5, #9
   13d2a:	46ac      	mov	ip, r5
   13d2c:	4460      	add	r0, ip
   13d2e:	0c1d      	lsrs	r5, r3, #16
   13d30:	0412      	lsls	r2, r2, #16
   13d32:	041b      	lsls	r3, r3, #16
   13d34:	0c12      	lsrs	r2, r2, #16
   13d36:	1828      	adds	r0, r5, r0
   13d38:	189b      	adds	r3, r3, r2
   13d3a:	4286      	cmp	r6, r0
   13d3c:	d200      	bcs.n	13d40 <__aeabi_ddiv+0x3cc>
   13d3e:	e093      	b.n	13e68 <__aeabi_ddiv+0x4f4>
   13d40:	d100      	bne.n	13d44 <__aeabi_ddiv+0x3d0>
   13d42:	e08e      	b.n	13e62 <__aeabi_ddiv+0x4ee>
   13d44:	2301      	movs	r3, #1
   13d46:	4319      	orrs	r1, r3
   13d48:	4ba0      	ldr	r3, [pc, #640]	; (13fcc <__aeabi_ddiv+0x658>)
   13d4a:	18e3      	adds	r3, r4, r3
   13d4c:	2b00      	cmp	r3, #0
   13d4e:	dc00      	bgt.n	13d52 <__aeabi_ddiv+0x3de>
   13d50:	e099      	b.n	13e86 <__aeabi_ddiv+0x512>
   13d52:	074a      	lsls	r2, r1, #29
   13d54:	d000      	beq.n	13d58 <__aeabi_ddiv+0x3e4>
   13d56:	e09e      	b.n	13e96 <__aeabi_ddiv+0x522>
   13d58:	465a      	mov	r2, fp
   13d5a:	01d2      	lsls	r2, r2, #7
   13d5c:	d506      	bpl.n	13d6c <__aeabi_ddiv+0x3f8>
   13d5e:	465a      	mov	r2, fp
   13d60:	4b9b      	ldr	r3, [pc, #620]	; (13fd0 <__aeabi_ddiv+0x65c>)
   13d62:	401a      	ands	r2, r3
   13d64:	2380      	movs	r3, #128	; 0x80
   13d66:	4693      	mov	fp, r2
   13d68:	00db      	lsls	r3, r3, #3
   13d6a:	18e3      	adds	r3, r4, r3
   13d6c:	4a99      	ldr	r2, [pc, #612]	; (13fd4 <__aeabi_ddiv+0x660>)
   13d6e:	4293      	cmp	r3, r2
   13d70:	dd68      	ble.n	13e44 <__aeabi_ddiv+0x4d0>
   13d72:	2301      	movs	r3, #1
   13d74:	9a02      	ldr	r2, [sp, #8]
   13d76:	4c98      	ldr	r4, [pc, #608]	; (13fd8 <__aeabi_ddiv+0x664>)
   13d78:	401a      	ands	r2, r3
   13d7a:	2300      	movs	r3, #0
   13d7c:	4694      	mov	ip, r2
   13d7e:	4698      	mov	r8, r3
   13d80:	2200      	movs	r2, #0
   13d82:	e6c5      	b.n	13b10 <__aeabi_ddiv+0x19c>
   13d84:	2280      	movs	r2, #128	; 0x80
   13d86:	464b      	mov	r3, r9
   13d88:	0312      	lsls	r2, r2, #12
   13d8a:	4213      	tst	r3, r2
   13d8c:	d00a      	beq.n	13da4 <__aeabi_ddiv+0x430>
   13d8e:	465b      	mov	r3, fp
   13d90:	4213      	tst	r3, r2
   13d92:	d106      	bne.n	13da2 <__aeabi_ddiv+0x42e>
   13d94:	431a      	orrs	r2, r3
   13d96:	0312      	lsls	r2, r2, #12
   13d98:	0b12      	lsrs	r2, r2, #12
   13d9a:	46ac      	mov	ip, r5
   13d9c:	4688      	mov	r8, r1
   13d9e:	4c8e      	ldr	r4, [pc, #568]	; (13fd8 <__aeabi_ddiv+0x664>)
   13da0:	e6b6      	b.n	13b10 <__aeabi_ddiv+0x19c>
   13da2:	464b      	mov	r3, r9
   13da4:	431a      	orrs	r2, r3
   13da6:	0312      	lsls	r2, r2, #12
   13da8:	0b12      	lsrs	r2, r2, #12
   13daa:	46bc      	mov	ip, r7
   13dac:	4c8a      	ldr	r4, [pc, #552]	; (13fd8 <__aeabi_ddiv+0x664>)
   13dae:	e6af      	b.n	13b10 <__aeabi_ddiv+0x19c>
   13db0:	0003      	movs	r3, r0
   13db2:	465a      	mov	r2, fp
   13db4:	3b28      	subs	r3, #40	; 0x28
   13db6:	409a      	lsls	r2, r3
   13db8:	2300      	movs	r3, #0
   13dba:	4691      	mov	r9, r2
   13dbc:	4698      	mov	r8, r3
   13dbe:	e657      	b.n	13a70 <__aeabi_ddiv+0xfc>
   13dc0:	4658      	mov	r0, fp
   13dc2:	f000 ff0d 	bl	14be0 <__clzsi2>
   13dc6:	3020      	adds	r0, #32
   13dc8:	e640      	b.n	13a4c <__aeabi_ddiv+0xd8>
   13dca:	0003      	movs	r3, r0
   13dcc:	4652      	mov	r2, sl
   13dce:	3b28      	subs	r3, #40	; 0x28
   13dd0:	409a      	lsls	r2, r3
   13dd2:	2100      	movs	r1, #0
   13dd4:	4693      	mov	fp, r2
   13dd6:	e677      	b.n	13ac8 <__aeabi_ddiv+0x154>
   13dd8:	f000 ff02 	bl	14be0 <__clzsi2>
   13ddc:	3020      	adds	r0, #32
   13dde:	e65f      	b.n	13aa0 <__aeabi_ddiv+0x12c>
   13de0:	4588      	cmp	r8, r1
   13de2:	d200      	bcs.n	13de6 <__aeabi_ddiv+0x472>
   13de4:	e6c7      	b.n	13b76 <__aeabi_ddiv+0x202>
   13de6:	464b      	mov	r3, r9
   13de8:	07de      	lsls	r6, r3, #31
   13dea:	085d      	lsrs	r5, r3, #1
   13dec:	4643      	mov	r3, r8
   13dee:	085b      	lsrs	r3, r3, #1
   13df0:	431e      	orrs	r6, r3
   13df2:	4643      	mov	r3, r8
   13df4:	07db      	lsls	r3, r3, #31
   13df6:	469a      	mov	sl, r3
   13df8:	e6c2      	b.n	13b80 <__aeabi_ddiv+0x20c>
   13dfa:	2500      	movs	r5, #0
   13dfc:	4592      	cmp	sl, r2
   13dfe:	d300      	bcc.n	13e02 <__aeabi_ddiv+0x48e>
   13e00:	e733      	b.n	13c6a <__aeabi_ddiv+0x2f6>
   13e02:	9e03      	ldr	r6, [sp, #12]
   13e04:	4659      	mov	r1, fp
   13e06:	46b4      	mov	ip, r6
   13e08:	44e2      	add	sl, ip
   13e0a:	45b2      	cmp	sl, r6
   13e0c:	41ad      	sbcs	r5, r5
   13e0e:	426d      	negs	r5, r5
   13e10:	4445      	add	r5, r8
   13e12:	18eb      	adds	r3, r5, r3
   13e14:	3901      	subs	r1, #1
   13e16:	4598      	cmp	r8, r3
   13e18:	d207      	bcs.n	13e2a <__aeabi_ddiv+0x4b6>
   13e1a:	4298      	cmp	r0, r3
   13e1c:	d900      	bls.n	13e20 <__aeabi_ddiv+0x4ac>
   13e1e:	e07f      	b.n	13f20 <__aeabi_ddiv+0x5ac>
   13e20:	d100      	bne.n	13e24 <__aeabi_ddiv+0x4b0>
   13e22:	e0bc      	b.n	13f9e <__aeabi_ddiv+0x62a>
   13e24:	1a1d      	subs	r5, r3, r0
   13e26:	468b      	mov	fp, r1
   13e28:	e71f      	b.n	13c6a <__aeabi_ddiv+0x2f6>
   13e2a:	4598      	cmp	r8, r3
   13e2c:	d1fa      	bne.n	13e24 <__aeabi_ddiv+0x4b0>
   13e2e:	9d03      	ldr	r5, [sp, #12]
   13e30:	4555      	cmp	r5, sl
   13e32:	d9f2      	bls.n	13e1a <__aeabi_ddiv+0x4a6>
   13e34:	4643      	mov	r3, r8
   13e36:	468b      	mov	fp, r1
   13e38:	1a1d      	subs	r5, r3, r0
   13e3a:	e716      	b.n	13c6a <__aeabi_ddiv+0x2f6>
   13e3c:	469b      	mov	fp, r3
   13e3e:	e6ca      	b.n	13bd6 <__aeabi_ddiv+0x262>
   13e40:	0015      	movs	r5, r2
   13e42:	e6e7      	b.n	13c14 <__aeabi_ddiv+0x2a0>
   13e44:	465a      	mov	r2, fp
   13e46:	08c9      	lsrs	r1, r1, #3
   13e48:	0752      	lsls	r2, r2, #29
   13e4a:	430a      	orrs	r2, r1
   13e4c:	055b      	lsls	r3, r3, #21
   13e4e:	4690      	mov	r8, r2
   13e50:	0d5c      	lsrs	r4, r3, #21
   13e52:	465a      	mov	r2, fp
   13e54:	2301      	movs	r3, #1
   13e56:	9902      	ldr	r1, [sp, #8]
   13e58:	0252      	lsls	r2, r2, #9
   13e5a:	4019      	ands	r1, r3
   13e5c:	0b12      	lsrs	r2, r2, #12
   13e5e:	468c      	mov	ip, r1
   13e60:	e656      	b.n	13b10 <__aeabi_ddiv+0x19c>
   13e62:	2b00      	cmp	r3, #0
   13e64:	d100      	bne.n	13e68 <__aeabi_ddiv+0x4f4>
   13e66:	e76f      	b.n	13d48 <__aeabi_ddiv+0x3d4>
   13e68:	4446      	add	r6, r8
   13e6a:	1e4a      	subs	r2, r1, #1
   13e6c:	45b0      	cmp	r8, r6
   13e6e:	d929      	bls.n	13ec4 <__aeabi_ddiv+0x550>
   13e70:	0011      	movs	r1, r2
   13e72:	4286      	cmp	r6, r0
   13e74:	d000      	beq.n	13e78 <__aeabi_ddiv+0x504>
   13e76:	e765      	b.n	13d44 <__aeabi_ddiv+0x3d0>
   13e78:	9a03      	ldr	r2, [sp, #12]
   13e7a:	4293      	cmp	r3, r2
   13e7c:	d000      	beq.n	13e80 <__aeabi_ddiv+0x50c>
   13e7e:	e761      	b.n	13d44 <__aeabi_ddiv+0x3d0>
   13e80:	e762      	b.n	13d48 <__aeabi_ddiv+0x3d4>
   13e82:	2101      	movs	r1, #1
   13e84:	4249      	negs	r1, r1
   13e86:	2001      	movs	r0, #1
   13e88:	1ac2      	subs	r2, r0, r3
   13e8a:	2a38      	cmp	r2, #56	; 0x38
   13e8c:	dd21      	ble.n	13ed2 <__aeabi_ddiv+0x55e>
   13e8e:	9b02      	ldr	r3, [sp, #8]
   13e90:	4003      	ands	r3, r0
   13e92:	469c      	mov	ip, r3
   13e94:	e638      	b.n	13b08 <__aeabi_ddiv+0x194>
   13e96:	220f      	movs	r2, #15
   13e98:	400a      	ands	r2, r1
   13e9a:	2a04      	cmp	r2, #4
   13e9c:	d100      	bne.n	13ea0 <__aeabi_ddiv+0x52c>
   13e9e:	e75b      	b.n	13d58 <__aeabi_ddiv+0x3e4>
   13ea0:	000a      	movs	r2, r1
   13ea2:	1d11      	adds	r1, r2, #4
   13ea4:	4291      	cmp	r1, r2
   13ea6:	4192      	sbcs	r2, r2
   13ea8:	4252      	negs	r2, r2
   13eaa:	4493      	add	fp, r2
   13eac:	e754      	b.n	13d58 <__aeabi_ddiv+0x3e4>
   13eae:	4b47      	ldr	r3, [pc, #284]	; (13fcc <__aeabi_ddiv+0x658>)
   13eb0:	18e3      	adds	r3, r4, r3
   13eb2:	2b00      	cmp	r3, #0
   13eb4:	dde5      	ble.n	13e82 <__aeabi_ddiv+0x50e>
   13eb6:	2201      	movs	r2, #1
   13eb8:	4252      	negs	r2, r2
   13eba:	e7f2      	b.n	13ea2 <__aeabi_ddiv+0x52e>
   13ebc:	001d      	movs	r5, r3
   13ebe:	e6fa      	b.n	13cb6 <__aeabi_ddiv+0x342>
   13ec0:	469a      	mov	sl, r3
   13ec2:	e71c      	b.n	13cfe <__aeabi_ddiv+0x38a>
   13ec4:	42b0      	cmp	r0, r6
   13ec6:	d839      	bhi.n	13f3c <__aeabi_ddiv+0x5c8>
   13ec8:	d06e      	beq.n	13fa8 <__aeabi_ddiv+0x634>
   13eca:	0011      	movs	r1, r2
   13ecc:	e73a      	b.n	13d44 <__aeabi_ddiv+0x3d0>
   13ece:	9302      	str	r3, [sp, #8]
   13ed0:	e73a      	b.n	13d48 <__aeabi_ddiv+0x3d4>
   13ed2:	2a1f      	cmp	r2, #31
   13ed4:	dc3c      	bgt.n	13f50 <__aeabi_ddiv+0x5dc>
   13ed6:	2320      	movs	r3, #32
   13ed8:	1a9b      	subs	r3, r3, r2
   13eda:	000c      	movs	r4, r1
   13edc:	4658      	mov	r0, fp
   13ede:	4099      	lsls	r1, r3
   13ee0:	4098      	lsls	r0, r3
   13ee2:	1e4b      	subs	r3, r1, #1
   13ee4:	4199      	sbcs	r1, r3
   13ee6:	465b      	mov	r3, fp
   13ee8:	40d4      	lsrs	r4, r2
   13eea:	40d3      	lsrs	r3, r2
   13eec:	4320      	orrs	r0, r4
   13eee:	4308      	orrs	r0, r1
   13ef0:	001a      	movs	r2, r3
   13ef2:	0743      	lsls	r3, r0, #29
   13ef4:	d009      	beq.n	13f0a <__aeabi_ddiv+0x596>
   13ef6:	230f      	movs	r3, #15
   13ef8:	4003      	ands	r3, r0
   13efa:	2b04      	cmp	r3, #4
   13efc:	d005      	beq.n	13f0a <__aeabi_ddiv+0x596>
   13efe:	0001      	movs	r1, r0
   13f00:	1d08      	adds	r0, r1, #4
   13f02:	4288      	cmp	r0, r1
   13f04:	419b      	sbcs	r3, r3
   13f06:	425b      	negs	r3, r3
   13f08:	18d2      	adds	r2, r2, r3
   13f0a:	0213      	lsls	r3, r2, #8
   13f0c:	d53a      	bpl.n	13f84 <__aeabi_ddiv+0x610>
   13f0e:	2301      	movs	r3, #1
   13f10:	9a02      	ldr	r2, [sp, #8]
   13f12:	2401      	movs	r4, #1
   13f14:	401a      	ands	r2, r3
   13f16:	2300      	movs	r3, #0
   13f18:	4694      	mov	ip, r2
   13f1a:	4698      	mov	r8, r3
   13f1c:	2200      	movs	r2, #0
   13f1e:	e5f7      	b.n	13b10 <__aeabi_ddiv+0x19c>
   13f20:	2102      	movs	r1, #2
   13f22:	4249      	negs	r1, r1
   13f24:	468c      	mov	ip, r1
   13f26:	9d03      	ldr	r5, [sp, #12]
   13f28:	44e3      	add	fp, ip
   13f2a:	46ac      	mov	ip, r5
   13f2c:	44e2      	add	sl, ip
   13f2e:	45aa      	cmp	sl, r5
   13f30:	41ad      	sbcs	r5, r5
   13f32:	426d      	negs	r5, r5
   13f34:	4445      	add	r5, r8
   13f36:	18ed      	adds	r5, r5, r3
   13f38:	1a2d      	subs	r5, r5, r0
   13f3a:	e696      	b.n	13c6a <__aeabi_ddiv+0x2f6>
   13f3c:	1e8a      	subs	r2, r1, #2
   13f3e:	9903      	ldr	r1, [sp, #12]
   13f40:	004d      	lsls	r5, r1, #1
   13f42:	428d      	cmp	r5, r1
   13f44:	4189      	sbcs	r1, r1
   13f46:	4249      	negs	r1, r1
   13f48:	4441      	add	r1, r8
   13f4a:	1876      	adds	r6, r6, r1
   13f4c:	9503      	str	r5, [sp, #12]
   13f4e:	e78f      	b.n	13e70 <__aeabi_ddiv+0x4fc>
   13f50:	201f      	movs	r0, #31
   13f52:	4240      	negs	r0, r0
   13f54:	1ac3      	subs	r3, r0, r3
   13f56:	4658      	mov	r0, fp
   13f58:	40d8      	lsrs	r0, r3
   13f5a:	0003      	movs	r3, r0
   13f5c:	2a20      	cmp	r2, #32
   13f5e:	d028      	beq.n	13fb2 <__aeabi_ddiv+0x63e>
   13f60:	2040      	movs	r0, #64	; 0x40
   13f62:	465d      	mov	r5, fp
   13f64:	1a82      	subs	r2, r0, r2
   13f66:	4095      	lsls	r5, r2
   13f68:	4329      	orrs	r1, r5
   13f6a:	1e4a      	subs	r2, r1, #1
   13f6c:	4191      	sbcs	r1, r2
   13f6e:	4319      	orrs	r1, r3
   13f70:	2307      	movs	r3, #7
   13f72:	2200      	movs	r2, #0
   13f74:	400b      	ands	r3, r1
   13f76:	d009      	beq.n	13f8c <__aeabi_ddiv+0x618>
   13f78:	230f      	movs	r3, #15
   13f7a:	2200      	movs	r2, #0
   13f7c:	400b      	ands	r3, r1
   13f7e:	0008      	movs	r0, r1
   13f80:	2b04      	cmp	r3, #4
   13f82:	d1bd      	bne.n	13f00 <__aeabi_ddiv+0x58c>
   13f84:	0001      	movs	r1, r0
   13f86:	0753      	lsls	r3, r2, #29
   13f88:	0252      	lsls	r2, r2, #9
   13f8a:	0b12      	lsrs	r2, r2, #12
   13f8c:	08c9      	lsrs	r1, r1, #3
   13f8e:	4319      	orrs	r1, r3
   13f90:	2301      	movs	r3, #1
   13f92:	4688      	mov	r8, r1
   13f94:	9902      	ldr	r1, [sp, #8]
   13f96:	2400      	movs	r4, #0
   13f98:	4019      	ands	r1, r3
   13f9a:	468c      	mov	ip, r1
   13f9c:	e5b8      	b.n	13b10 <__aeabi_ddiv+0x19c>
   13f9e:	4552      	cmp	r2, sl
   13fa0:	d8be      	bhi.n	13f20 <__aeabi_ddiv+0x5ac>
   13fa2:	468b      	mov	fp, r1
   13fa4:	2500      	movs	r5, #0
   13fa6:	e660      	b.n	13c6a <__aeabi_ddiv+0x2f6>
   13fa8:	9d03      	ldr	r5, [sp, #12]
   13faa:	429d      	cmp	r5, r3
   13fac:	d3c6      	bcc.n	13f3c <__aeabi_ddiv+0x5c8>
   13fae:	0011      	movs	r1, r2
   13fb0:	e762      	b.n	13e78 <__aeabi_ddiv+0x504>
   13fb2:	2500      	movs	r5, #0
   13fb4:	e7d8      	b.n	13f68 <__aeabi_ddiv+0x5f4>
   13fb6:	2280      	movs	r2, #128	; 0x80
   13fb8:	465b      	mov	r3, fp
   13fba:	0312      	lsls	r2, r2, #12
   13fbc:	431a      	orrs	r2, r3
   13fbe:	9b01      	ldr	r3, [sp, #4]
   13fc0:	0312      	lsls	r2, r2, #12
   13fc2:	0b12      	lsrs	r2, r2, #12
   13fc4:	469c      	mov	ip, r3
   13fc6:	4688      	mov	r8, r1
   13fc8:	4c03      	ldr	r4, [pc, #12]	; (13fd8 <__aeabi_ddiv+0x664>)
   13fca:	e5a1      	b.n	13b10 <__aeabi_ddiv+0x19c>
   13fcc:	000003ff 	.word	0x000003ff
   13fd0:	feffffff 	.word	0xfeffffff
   13fd4:	000007fe 	.word	0x000007fe
   13fd8:	000007ff 	.word	0x000007ff

00013fdc <__aeabi_dmul>:
   13fdc:	b5f0      	push	{r4, r5, r6, r7, lr}
   13fde:	4657      	mov	r7, sl
   13fe0:	4645      	mov	r5, r8
   13fe2:	46de      	mov	lr, fp
   13fe4:	464e      	mov	r6, r9
   13fe6:	b5e0      	push	{r5, r6, r7, lr}
   13fe8:	030c      	lsls	r4, r1, #12
   13fea:	4698      	mov	r8, r3
   13fec:	004e      	lsls	r6, r1, #1
   13fee:	0b23      	lsrs	r3, r4, #12
   13ff0:	b087      	sub	sp, #28
   13ff2:	0007      	movs	r7, r0
   13ff4:	4692      	mov	sl, r2
   13ff6:	469b      	mov	fp, r3
   13ff8:	0d76      	lsrs	r6, r6, #21
   13ffa:	0fcd      	lsrs	r5, r1, #31
   13ffc:	2e00      	cmp	r6, #0
   13ffe:	d06b      	beq.n	140d8 <__aeabi_dmul+0xfc>
   14000:	4b6d      	ldr	r3, [pc, #436]	; (141b8 <__aeabi_dmul+0x1dc>)
   14002:	429e      	cmp	r6, r3
   14004:	d035      	beq.n	14072 <__aeabi_dmul+0x96>
   14006:	2480      	movs	r4, #128	; 0x80
   14008:	465b      	mov	r3, fp
   1400a:	0f42      	lsrs	r2, r0, #29
   1400c:	0424      	lsls	r4, r4, #16
   1400e:	00db      	lsls	r3, r3, #3
   14010:	4314      	orrs	r4, r2
   14012:	431c      	orrs	r4, r3
   14014:	00c3      	lsls	r3, r0, #3
   14016:	4699      	mov	r9, r3
   14018:	4b68      	ldr	r3, [pc, #416]	; (141bc <__aeabi_dmul+0x1e0>)
   1401a:	46a3      	mov	fp, r4
   1401c:	469c      	mov	ip, r3
   1401e:	2300      	movs	r3, #0
   14020:	2700      	movs	r7, #0
   14022:	4466      	add	r6, ip
   14024:	9302      	str	r3, [sp, #8]
   14026:	4643      	mov	r3, r8
   14028:	031c      	lsls	r4, r3, #12
   1402a:	005a      	lsls	r2, r3, #1
   1402c:	0fdb      	lsrs	r3, r3, #31
   1402e:	4650      	mov	r0, sl
   14030:	0b24      	lsrs	r4, r4, #12
   14032:	0d52      	lsrs	r2, r2, #21
   14034:	4698      	mov	r8, r3
   14036:	d100      	bne.n	1403a <__aeabi_dmul+0x5e>
   14038:	e076      	b.n	14128 <__aeabi_dmul+0x14c>
   1403a:	4b5f      	ldr	r3, [pc, #380]	; (141b8 <__aeabi_dmul+0x1dc>)
   1403c:	429a      	cmp	r2, r3
   1403e:	d06d      	beq.n	1411c <__aeabi_dmul+0x140>
   14040:	2380      	movs	r3, #128	; 0x80
   14042:	0f41      	lsrs	r1, r0, #29
   14044:	041b      	lsls	r3, r3, #16
   14046:	430b      	orrs	r3, r1
   14048:	495c      	ldr	r1, [pc, #368]	; (141bc <__aeabi_dmul+0x1e0>)
   1404a:	00e4      	lsls	r4, r4, #3
   1404c:	468c      	mov	ip, r1
   1404e:	431c      	orrs	r4, r3
   14050:	00c3      	lsls	r3, r0, #3
   14052:	2000      	movs	r0, #0
   14054:	4462      	add	r2, ip
   14056:	4641      	mov	r1, r8
   14058:	18b6      	adds	r6, r6, r2
   1405a:	4069      	eors	r1, r5
   1405c:	1c72      	adds	r2, r6, #1
   1405e:	9101      	str	r1, [sp, #4]
   14060:	4694      	mov	ip, r2
   14062:	4307      	orrs	r7, r0
   14064:	2f0f      	cmp	r7, #15
   14066:	d900      	bls.n	1406a <__aeabi_dmul+0x8e>
   14068:	e0b0      	b.n	141cc <__aeabi_dmul+0x1f0>
   1406a:	4a55      	ldr	r2, [pc, #340]	; (141c0 <__aeabi_dmul+0x1e4>)
   1406c:	00bf      	lsls	r7, r7, #2
   1406e:	59d2      	ldr	r2, [r2, r7]
   14070:	4697      	mov	pc, r2
   14072:	465b      	mov	r3, fp
   14074:	4303      	orrs	r3, r0
   14076:	4699      	mov	r9, r3
   14078:	d000      	beq.n	1407c <__aeabi_dmul+0xa0>
   1407a:	e087      	b.n	1418c <__aeabi_dmul+0x1b0>
   1407c:	2300      	movs	r3, #0
   1407e:	469b      	mov	fp, r3
   14080:	3302      	adds	r3, #2
   14082:	2708      	movs	r7, #8
   14084:	9302      	str	r3, [sp, #8]
   14086:	e7ce      	b.n	14026 <__aeabi_dmul+0x4a>
   14088:	4642      	mov	r2, r8
   1408a:	9201      	str	r2, [sp, #4]
   1408c:	2802      	cmp	r0, #2
   1408e:	d067      	beq.n	14160 <__aeabi_dmul+0x184>
   14090:	2803      	cmp	r0, #3
   14092:	d100      	bne.n	14096 <__aeabi_dmul+0xba>
   14094:	e20e      	b.n	144b4 <__aeabi_dmul+0x4d8>
   14096:	2801      	cmp	r0, #1
   14098:	d000      	beq.n	1409c <__aeabi_dmul+0xc0>
   1409a:	e162      	b.n	14362 <__aeabi_dmul+0x386>
   1409c:	2300      	movs	r3, #0
   1409e:	2400      	movs	r4, #0
   140a0:	2200      	movs	r2, #0
   140a2:	4699      	mov	r9, r3
   140a4:	9901      	ldr	r1, [sp, #4]
   140a6:	4001      	ands	r1, r0
   140a8:	b2cd      	uxtb	r5, r1
   140aa:	2100      	movs	r1, #0
   140ac:	0312      	lsls	r2, r2, #12
   140ae:	0d0b      	lsrs	r3, r1, #20
   140b0:	0b12      	lsrs	r2, r2, #12
   140b2:	051b      	lsls	r3, r3, #20
   140b4:	4313      	orrs	r3, r2
   140b6:	4a43      	ldr	r2, [pc, #268]	; (141c4 <__aeabi_dmul+0x1e8>)
   140b8:	0524      	lsls	r4, r4, #20
   140ba:	4013      	ands	r3, r2
   140bc:	431c      	orrs	r4, r3
   140be:	0064      	lsls	r4, r4, #1
   140c0:	07ed      	lsls	r5, r5, #31
   140c2:	0864      	lsrs	r4, r4, #1
   140c4:	432c      	orrs	r4, r5
   140c6:	4648      	mov	r0, r9
   140c8:	0021      	movs	r1, r4
   140ca:	b007      	add	sp, #28
   140cc:	bc3c      	pop	{r2, r3, r4, r5}
   140ce:	4690      	mov	r8, r2
   140d0:	4699      	mov	r9, r3
   140d2:	46a2      	mov	sl, r4
   140d4:	46ab      	mov	fp, r5
   140d6:	bdf0      	pop	{r4, r5, r6, r7, pc}
   140d8:	4303      	orrs	r3, r0
   140da:	4699      	mov	r9, r3
   140dc:	d04f      	beq.n	1417e <__aeabi_dmul+0x1a2>
   140de:	465b      	mov	r3, fp
   140e0:	2b00      	cmp	r3, #0
   140e2:	d100      	bne.n	140e6 <__aeabi_dmul+0x10a>
   140e4:	e189      	b.n	143fa <__aeabi_dmul+0x41e>
   140e6:	4658      	mov	r0, fp
   140e8:	f000 fd7a 	bl	14be0 <__clzsi2>
   140ec:	0003      	movs	r3, r0
   140ee:	3b0b      	subs	r3, #11
   140f0:	2b1c      	cmp	r3, #28
   140f2:	dd00      	ble.n	140f6 <__aeabi_dmul+0x11a>
   140f4:	e17a      	b.n	143ec <__aeabi_dmul+0x410>
   140f6:	221d      	movs	r2, #29
   140f8:	1ad3      	subs	r3, r2, r3
   140fa:	003a      	movs	r2, r7
   140fc:	0001      	movs	r1, r0
   140fe:	465c      	mov	r4, fp
   14100:	40da      	lsrs	r2, r3
   14102:	3908      	subs	r1, #8
   14104:	408c      	lsls	r4, r1
   14106:	0013      	movs	r3, r2
   14108:	408f      	lsls	r7, r1
   1410a:	4323      	orrs	r3, r4
   1410c:	469b      	mov	fp, r3
   1410e:	46b9      	mov	r9, r7
   14110:	2300      	movs	r3, #0
   14112:	4e2d      	ldr	r6, [pc, #180]	; (141c8 <__aeabi_dmul+0x1ec>)
   14114:	2700      	movs	r7, #0
   14116:	1a36      	subs	r6, r6, r0
   14118:	9302      	str	r3, [sp, #8]
   1411a:	e784      	b.n	14026 <__aeabi_dmul+0x4a>
   1411c:	4653      	mov	r3, sl
   1411e:	4323      	orrs	r3, r4
   14120:	d12a      	bne.n	14178 <__aeabi_dmul+0x19c>
   14122:	2400      	movs	r4, #0
   14124:	2002      	movs	r0, #2
   14126:	e796      	b.n	14056 <__aeabi_dmul+0x7a>
   14128:	4653      	mov	r3, sl
   1412a:	4323      	orrs	r3, r4
   1412c:	d020      	beq.n	14170 <__aeabi_dmul+0x194>
   1412e:	2c00      	cmp	r4, #0
   14130:	d100      	bne.n	14134 <__aeabi_dmul+0x158>
   14132:	e157      	b.n	143e4 <__aeabi_dmul+0x408>
   14134:	0020      	movs	r0, r4
   14136:	f000 fd53 	bl	14be0 <__clzsi2>
   1413a:	0003      	movs	r3, r0
   1413c:	3b0b      	subs	r3, #11
   1413e:	2b1c      	cmp	r3, #28
   14140:	dd00      	ble.n	14144 <__aeabi_dmul+0x168>
   14142:	e149      	b.n	143d8 <__aeabi_dmul+0x3fc>
   14144:	211d      	movs	r1, #29
   14146:	1acb      	subs	r3, r1, r3
   14148:	4651      	mov	r1, sl
   1414a:	0002      	movs	r2, r0
   1414c:	40d9      	lsrs	r1, r3
   1414e:	4653      	mov	r3, sl
   14150:	3a08      	subs	r2, #8
   14152:	4094      	lsls	r4, r2
   14154:	4093      	lsls	r3, r2
   14156:	430c      	orrs	r4, r1
   14158:	4a1b      	ldr	r2, [pc, #108]	; (141c8 <__aeabi_dmul+0x1ec>)
   1415a:	1a12      	subs	r2, r2, r0
   1415c:	2000      	movs	r0, #0
   1415e:	e77a      	b.n	14056 <__aeabi_dmul+0x7a>
   14160:	2501      	movs	r5, #1
   14162:	9b01      	ldr	r3, [sp, #4]
   14164:	4c14      	ldr	r4, [pc, #80]	; (141b8 <__aeabi_dmul+0x1dc>)
   14166:	401d      	ands	r5, r3
   14168:	2300      	movs	r3, #0
   1416a:	2200      	movs	r2, #0
   1416c:	4699      	mov	r9, r3
   1416e:	e79c      	b.n	140aa <__aeabi_dmul+0xce>
   14170:	2400      	movs	r4, #0
   14172:	2200      	movs	r2, #0
   14174:	2001      	movs	r0, #1
   14176:	e76e      	b.n	14056 <__aeabi_dmul+0x7a>
   14178:	4653      	mov	r3, sl
   1417a:	2003      	movs	r0, #3
   1417c:	e76b      	b.n	14056 <__aeabi_dmul+0x7a>
   1417e:	2300      	movs	r3, #0
   14180:	469b      	mov	fp, r3
   14182:	3301      	adds	r3, #1
   14184:	2704      	movs	r7, #4
   14186:	2600      	movs	r6, #0
   14188:	9302      	str	r3, [sp, #8]
   1418a:	e74c      	b.n	14026 <__aeabi_dmul+0x4a>
   1418c:	2303      	movs	r3, #3
   1418e:	4681      	mov	r9, r0
   14190:	270c      	movs	r7, #12
   14192:	9302      	str	r3, [sp, #8]
   14194:	e747      	b.n	14026 <__aeabi_dmul+0x4a>
   14196:	2280      	movs	r2, #128	; 0x80
   14198:	2300      	movs	r3, #0
   1419a:	2500      	movs	r5, #0
   1419c:	0312      	lsls	r2, r2, #12
   1419e:	4699      	mov	r9, r3
   141a0:	4c05      	ldr	r4, [pc, #20]	; (141b8 <__aeabi_dmul+0x1dc>)
   141a2:	e782      	b.n	140aa <__aeabi_dmul+0xce>
   141a4:	465c      	mov	r4, fp
   141a6:	464b      	mov	r3, r9
   141a8:	9802      	ldr	r0, [sp, #8]
   141aa:	e76f      	b.n	1408c <__aeabi_dmul+0xb0>
   141ac:	465c      	mov	r4, fp
   141ae:	464b      	mov	r3, r9
   141b0:	9501      	str	r5, [sp, #4]
   141b2:	9802      	ldr	r0, [sp, #8]
   141b4:	e76a      	b.n	1408c <__aeabi_dmul+0xb0>
   141b6:	46c0      	nop			; (mov r8, r8)
   141b8:	000007ff 	.word	0x000007ff
   141bc:	fffffc01 	.word	0xfffffc01
   141c0:	0001678c 	.word	0x0001678c
   141c4:	800fffff 	.word	0x800fffff
   141c8:	fffffc0d 	.word	0xfffffc0d
   141cc:	464a      	mov	r2, r9
   141ce:	4649      	mov	r1, r9
   141d0:	0c17      	lsrs	r7, r2, #16
   141d2:	0c1a      	lsrs	r2, r3, #16
   141d4:	041b      	lsls	r3, r3, #16
   141d6:	0c1b      	lsrs	r3, r3, #16
   141d8:	0408      	lsls	r0, r1, #16
   141da:	0019      	movs	r1, r3
   141dc:	0c00      	lsrs	r0, r0, #16
   141de:	4341      	muls	r1, r0
   141e0:	0015      	movs	r5, r2
   141e2:	4688      	mov	r8, r1
   141e4:	0019      	movs	r1, r3
   141e6:	437d      	muls	r5, r7
   141e8:	4379      	muls	r1, r7
   141ea:	9503      	str	r5, [sp, #12]
   141ec:	4689      	mov	r9, r1
   141ee:	0029      	movs	r1, r5
   141f0:	0015      	movs	r5, r2
   141f2:	4345      	muls	r5, r0
   141f4:	444d      	add	r5, r9
   141f6:	9502      	str	r5, [sp, #8]
   141f8:	4645      	mov	r5, r8
   141fa:	0c2d      	lsrs	r5, r5, #16
   141fc:	46aa      	mov	sl, r5
   141fe:	9d02      	ldr	r5, [sp, #8]
   14200:	4455      	add	r5, sl
   14202:	45a9      	cmp	r9, r5
   14204:	d906      	bls.n	14214 <__aeabi_dmul+0x238>
   14206:	468a      	mov	sl, r1
   14208:	2180      	movs	r1, #128	; 0x80
   1420a:	0249      	lsls	r1, r1, #9
   1420c:	4689      	mov	r9, r1
   1420e:	44ca      	add	sl, r9
   14210:	4651      	mov	r1, sl
   14212:	9103      	str	r1, [sp, #12]
   14214:	0c29      	lsrs	r1, r5, #16
   14216:	9104      	str	r1, [sp, #16]
   14218:	4641      	mov	r1, r8
   1421a:	0409      	lsls	r1, r1, #16
   1421c:	042d      	lsls	r5, r5, #16
   1421e:	0c09      	lsrs	r1, r1, #16
   14220:	4688      	mov	r8, r1
   14222:	0029      	movs	r1, r5
   14224:	0c25      	lsrs	r5, r4, #16
   14226:	0424      	lsls	r4, r4, #16
   14228:	4441      	add	r1, r8
   1422a:	0c24      	lsrs	r4, r4, #16
   1422c:	9105      	str	r1, [sp, #20]
   1422e:	0021      	movs	r1, r4
   14230:	4341      	muls	r1, r0
   14232:	4688      	mov	r8, r1
   14234:	0021      	movs	r1, r4
   14236:	4379      	muls	r1, r7
   14238:	468a      	mov	sl, r1
   1423a:	4368      	muls	r0, r5
   1423c:	4641      	mov	r1, r8
   1423e:	4450      	add	r0, sl
   14240:	4681      	mov	r9, r0
   14242:	0c08      	lsrs	r0, r1, #16
   14244:	4448      	add	r0, r9
   14246:	436f      	muls	r7, r5
   14248:	4582      	cmp	sl, r0
   1424a:	d903      	bls.n	14254 <__aeabi_dmul+0x278>
   1424c:	2180      	movs	r1, #128	; 0x80
   1424e:	0249      	lsls	r1, r1, #9
   14250:	4689      	mov	r9, r1
   14252:	444f      	add	r7, r9
   14254:	0c01      	lsrs	r1, r0, #16
   14256:	4689      	mov	r9, r1
   14258:	0039      	movs	r1, r7
   1425a:	4449      	add	r1, r9
   1425c:	9102      	str	r1, [sp, #8]
   1425e:	4641      	mov	r1, r8
   14260:	040f      	lsls	r7, r1, #16
   14262:	9904      	ldr	r1, [sp, #16]
   14264:	0c3f      	lsrs	r7, r7, #16
   14266:	4688      	mov	r8, r1
   14268:	0400      	lsls	r0, r0, #16
   1426a:	19c0      	adds	r0, r0, r7
   1426c:	4480      	add	r8, r0
   1426e:	4641      	mov	r1, r8
   14270:	9104      	str	r1, [sp, #16]
   14272:	4659      	mov	r1, fp
   14274:	0c0f      	lsrs	r7, r1, #16
   14276:	0409      	lsls	r1, r1, #16
   14278:	0c09      	lsrs	r1, r1, #16
   1427a:	4688      	mov	r8, r1
   1427c:	4359      	muls	r1, r3
   1427e:	468a      	mov	sl, r1
   14280:	0039      	movs	r1, r7
   14282:	4351      	muls	r1, r2
   14284:	4689      	mov	r9, r1
   14286:	4641      	mov	r1, r8
   14288:	434a      	muls	r2, r1
   1428a:	4651      	mov	r1, sl
   1428c:	0c09      	lsrs	r1, r1, #16
   1428e:	468b      	mov	fp, r1
   14290:	437b      	muls	r3, r7
   14292:	18d2      	adds	r2, r2, r3
   14294:	445a      	add	r2, fp
   14296:	4293      	cmp	r3, r2
   14298:	d903      	bls.n	142a2 <__aeabi_dmul+0x2c6>
   1429a:	2380      	movs	r3, #128	; 0x80
   1429c:	025b      	lsls	r3, r3, #9
   1429e:	469b      	mov	fp, r3
   142a0:	44d9      	add	r9, fp
   142a2:	4651      	mov	r1, sl
   142a4:	0409      	lsls	r1, r1, #16
   142a6:	0c09      	lsrs	r1, r1, #16
   142a8:	468a      	mov	sl, r1
   142aa:	4641      	mov	r1, r8
   142ac:	4361      	muls	r1, r4
   142ae:	437c      	muls	r4, r7
   142b0:	0c13      	lsrs	r3, r2, #16
   142b2:	0412      	lsls	r2, r2, #16
   142b4:	444b      	add	r3, r9
   142b6:	4452      	add	r2, sl
   142b8:	46a1      	mov	r9, r4
   142ba:	468a      	mov	sl, r1
   142bc:	003c      	movs	r4, r7
   142be:	4641      	mov	r1, r8
   142c0:	436c      	muls	r4, r5
   142c2:	434d      	muls	r5, r1
   142c4:	4651      	mov	r1, sl
   142c6:	444d      	add	r5, r9
   142c8:	0c0f      	lsrs	r7, r1, #16
   142ca:	197d      	adds	r5, r7, r5
   142cc:	45a9      	cmp	r9, r5
   142ce:	d903      	bls.n	142d8 <__aeabi_dmul+0x2fc>
   142d0:	2180      	movs	r1, #128	; 0x80
   142d2:	0249      	lsls	r1, r1, #9
   142d4:	4688      	mov	r8, r1
   142d6:	4444      	add	r4, r8
   142d8:	9f04      	ldr	r7, [sp, #16]
   142da:	9903      	ldr	r1, [sp, #12]
   142dc:	46b8      	mov	r8, r7
   142de:	4441      	add	r1, r8
   142e0:	468b      	mov	fp, r1
   142e2:	4583      	cmp	fp, r0
   142e4:	4180      	sbcs	r0, r0
   142e6:	4241      	negs	r1, r0
   142e8:	4688      	mov	r8, r1
   142ea:	4651      	mov	r1, sl
   142ec:	0408      	lsls	r0, r1, #16
   142ee:	042f      	lsls	r7, r5, #16
   142f0:	0c00      	lsrs	r0, r0, #16
   142f2:	183f      	adds	r7, r7, r0
   142f4:	4658      	mov	r0, fp
   142f6:	9902      	ldr	r1, [sp, #8]
   142f8:	1810      	adds	r0, r2, r0
   142fa:	4689      	mov	r9, r1
   142fc:	4290      	cmp	r0, r2
   142fe:	4192      	sbcs	r2, r2
   14300:	444f      	add	r7, r9
   14302:	46ba      	mov	sl, r7
   14304:	4252      	negs	r2, r2
   14306:	4699      	mov	r9, r3
   14308:	4693      	mov	fp, r2
   1430a:	44c2      	add	sl, r8
   1430c:	44d1      	add	r9, sl
   1430e:	44cb      	add	fp, r9
   14310:	428f      	cmp	r7, r1
   14312:	41bf      	sbcs	r7, r7
   14314:	45c2      	cmp	sl, r8
   14316:	4189      	sbcs	r1, r1
   14318:	4599      	cmp	r9, r3
   1431a:	419b      	sbcs	r3, r3
   1431c:	4593      	cmp	fp, r2
   1431e:	4192      	sbcs	r2, r2
   14320:	427f      	negs	r7, r7
   14322:	4249      	negs	r1, r1
   14324:	0c2d      	lsrs	r5, r5, #16
   14326:	4252      	negs	r2, r2
   14328:	430f      	orrs	r7, r1
   1432a:	425b      	negs	r3, r3
   1432c:	4313      	orrs	r3, r2
   1432e:	197f      	adds	r7, r7, r5
   14330:	18ff      	adds	r7, r7, r3
   14332:	465b      	mov	r3, fp
   14334:	193c      	adds	r4, r7, r4
   14336:	0ddb      	lsrs	r3, r3, #23
   14338:	9a05      	ldr	r2, [sp, #20]
   1433a:	0264      	lsls	r4, r4, #9
   1433c:	431c      	orrs	r4, r3
   1433e:	0243      	lsls	r3, r0, #9
   14340:	4313      	orrs	r3, r2
   14342:	1e5d      	subs	r5, r3, #1
   14344:	41ab      	sbcs	r3, r5
   14346:	465a      	mov	r2, fp
   14348:	0dc0      	lsrs	r0, r0, #23
   1434a:	4303      	orrs	r3, r0
   1434c:	0252      	lsls	r2, r2, #9
   1434e:	4313      	orrs	r3, r2
   14350:	01e2      	lsls	r2, r4, #7
   14352:	d556      	bpl.n	14402 <__aeabi_dmul+0x426>
   14354:	2001      	movs	r0, #1
   14356:	085a      	lsrs	r2, r3, #1
   14358:	4003      	ands	r3, r0
   1435a:	4313      	orrs	r3, r2
   1435c:	07e2      	lsls	r2, r4, #31
   1435e:	4313      	orrs	r3, r2
   14360:	0864      	lsrs	r4, r4, #1
   14362:	485a      	ldr	r0, [pc, #360]	; (144cc <__aeabi_dmul+0x4f0>)
   14364:	4460      	add	r0, ip
   14366:	2800      	cmp	r0, #0
   14368:	dd4d      	ble.n	14406 <__aeabi_dmul+0x42a>
   1436a:	075a      	lsls	r2, r3, #29
   1436c:	d009      	beq.n	14382 <__aeabi_dmul+0x3a6>
   1436e:	220f      	movs	r2, #15
   14370:	401a      	ands	r2, r3
   14372:	2a04      	cmp	r2, #4
   14374:	d005      	beq.n	14382 <__aeabi_dmul+0x3a6>
   14376:	1d1a      	adds	r2, r3, #4
   14378:	429a      	cmp	r2, r3
   1437a:	419b      	sbcs	r3, r3
   1437c:	425b      	negs	r3, r3
   1437e:	18e4      	adds	r4, r4, r3
   14380:	0013      	movs	r3, r2
   14382:	01e2      	lsls	r2, r4, #7
   14384:	d504      	bpl.n	14390 <__aeabi_dmul+0x3b4>
   14386:	2080      	movs	r0, #128	; 0x80
   14388:	4a51      	ldr	r2, [pc, #324]	; (144d0 <__aeabi_dmul+0x4f4>)
   1438a:	00c0      	lsls	r0, r0, #3
   1438c:	4014      	ands	r4, r2
   1438e:	4460      	add	r0, ip
   14390:	4a50      	ldr	r2, [pc, #320]	; (144d4 <__aeabi_dmul+0x4f8>)
   14392:	4290      	cmp	r0, r2
   14394:	dd00      	ble.n	14398 <__aeabi_dmul+0x3bc>
   14396:	e6e3      	b.n	14160 <__aeabi_dmul+0x184>
   14398:	2501      	movs	r5, #1
   1439a:	08db      	lsrs	r3, r3, #3
   1439c:	0762      	lsls	r2, r4, #29
   1439e:	431a      	orrs	r2, r3
   143a0:	0264      	lsls	r4, r4, #9
   143a2:	9b01      	ldr	r3, [sp, #4]
   143a4:	4691      	mov	r9, r2
   143a6:	0b22      	lsrs	r2, r4, #12
   143a8:	0544      	lsls	r4, r0, #21
   143aa:	0d64      	lsrs	r4, r4, #21
   143ac:	401d      	ands	r5, r3
   143ae:	e67c      	b.n	140aa <__aeabi_dmul+0xce>
   143b0:	2280      	movs	r2, #128	; 0x80
   143b2:	4659      	mov	r1, fp
   143b4:	0312      	lsls	r2, r2, #12
   143b6:	4211      	tst	r1, r2
   143b8:	d008      	beq.n	143cc <__aeabi_dmul+0x3f0>
   143ba:	4214      	tst	r4, r2
   143bc:	d106      	bne.n	143cc <__aeabi_dmul+0x3f0>
   143be:	4322      	orrs	r2, r4
   143c0:	0312      	lsls	r2, r2, #12
   143c2:	0b12      	lsrs	r2, r2, #12
   143c4:	4645      	mov	r5, r8
   143c6:	4699      	mov	r9, r3
   143c8:	4c43      	ldr	r4, [pc, #268]	; (144d8 <__aeabi_dmul+0x4fc>)
   143ca:	e66e      	b.n	140aa <__aeabi_dmul+0xce>
   143cc:	465b      	mov	r3, fp
   143ce:	431a      	orrs	r2, r3
   143d0:	0312      	lsls	r2, r2, #12
   143d2:	0b12      	lsrs	r2, r2, #12
   143d4:	4c40      	ldr	r4, [pc, #256]	; (144d8 <__aeabi_dmul+0x4fc>)
   143d6:	e668      	b.n	140aa <__aeabi_dmul+0xce>
   143d8:	0003      	movs	r3, r0
   143da:	4654      	mov	r4, sl
   143dc:	3b28      	subs	r3, #40	; 0x28
   143de:	409c      	lsls	r4, r3
   143e0:	2300      	movs	r3, #0
   143e2:	e6b9      	b.n	14158 <__aeabi_dmul+0x17c>
   143e4:	f000 fbfc 	bl	14be0 <__clzsi2>
   143e8:	3020      	adds	r0, #32
   143ea:	e6a6      	b.n	1413a <__aeabi_dmul+0x15e>
   143ec:	0003      	movs	r3, r0
   143ee:	3b28      	subs	r3, #40	; 0x28
   143f0:	409f      	lsls	r7, r3
   143f2:	2300      	movs	r3, #0
   143f4:	46bb      	mov	fp, r7
   143f6:	4699      	mov	r9, r3
   143f8:	e68a      	b.n	14110 <__aeabi_dmul+0x134>
   143fa:	f000 fbf1 	bl	14be0 <__clzsi2>
   143fe:	3020      	adds	r0, #32
   14400:	e674      	b.n	140ec <__aeabi_dmul+0x110>
   14402:	46b4      	mov	ip, r6
   14404:	e7ad      	b.n	14362 <__aeabi_dmul+0x386>
   14406:	2501      	movs	r5, #1
   14408:	1a2a      	subs	r2, r5, r0
   1440a:	2a38      	cmp	r2, #56	; 0x38
   1440c:	dd06      	ble.n	1441c <__aeabi_dmul+0x440>
   1440e:	9b01      	ldr	r3, [sp, #4]
   14410:	2400      	movs	r4, #0
   14412:	401d      	ands	r5, r3
   14414:	2300      	movs	r3, #0
   14416:	2200      	movs	r2, #0
   14418:	4699      	mov	r9, r3
   1441a:	e646      	b.n	140aa <__aeabi_dmul+0xce>
   1441c:	2a1f      	cmp	r2, #31
   1441e:	dc21      	bgt.n	14464 <__aeabi_dmul+0x488>
   14420:	2520      	movs	r5, #32
   14422:	0020      	movs	r0, r4
   14424:	1aad      	subs	r5, r5, r2
   14426:	001e      	movs	r6, r3
   14428:	40ab      	lsls	r3, r5
   1442a:	40a8      	lsls	r0, r5
   1442c:	40d6      	lsrs	r6, r2
   1442e:	1e5d      	subs	r5, r3, #1
   14430:	41ab      	sbcs	r3, r5
   14432:	4330      	orrs	r0, r6
   14434:	4318      	orrs	r0, r3
   14436:	40d4      	lsrs	r4, r2
   14438:	0743      	lsls	r3, r0, #29
   1443a:	d009      	beq.n	14450 <__aeabi_dmul+0x474>
   1443c:	230f      	movs	r3, #15
   1443e:	4003      	ands	r3, r0
   14440:	2b04      	cmp	r3, #4
   14442:	d005      	beq.n	14450 <__aeabi_dmul+0x474>
   14444:	0003      	movs	r3, r0
   14446:	1d18      	adds	r0, r3, #4
   14448:	4298      	cmp	r0, r3
   1444a:	419b      	sbcs	r3, r3
   1444c:	425b      	negs	r3, r3
   1444e:	18e4      	adds	r4, r4, r3
   14450:	0223      	lsls	r3, r4, #8
   14452:	d521      	bpl.n	14498 <__aeabi_dmul+0x4bc>
   14454:	2501      	movs	r5, #1
   14456:	9b01      	ldr	r3, [sp, #4]
   14458:	2401      	movs	r4, #1
   1445a:	401d      	ands	r5, r3
   1445c:	2300      	movs	r3, #0
   1445e:	2200      	movs	r2, #0
   14460:	4699      	mov	r9, r3
   14462:	e622      	b.n	140aa <__aeabi_dmul+0xce>
   14464:	251f      	movs	r5, #31
   14466:	0021      	movs	r1, r4
   14468:	426d      	negs	r5, r5
   1446a:	1a28      	subs	r0, r5, r0
   1446c:	40c1      	lsrs	r1, r0
   1446e:	0008      	movs	r0, r1
   14470:	2a20      	cmp	r2, #32
   14472:	d01d      	beq.n	144b0 <__aeabi_dmul+0x4d4>
   14474:	355f      	adds	r5, #95	; 0x5f
   14476:	1aaa      	subs	r2, r5, r2
   14478:	4094      	lsls	r4, r2
   1447a:	4323      	orrs	r3, r4
   1447c:	1e5c      	subs	r4, r3, #1
   1447e:	41a3      	sbcs	r3, r4
   14480:	2507      	movs	r5, #7
   14482:	4303      	orrs	r3, r0
   14484:	401d      	ands	r5, r3
   14486:	2200      	movs	r2, #0
   14488:	2d00      	cmp	r5, #0
   1448a:	d009      	beq.n	144a0 <__aeabi_dmul+0x4c4>
   1448c:	220f      	movs	r2, #15
   1448e:	2400      	movs	r4, #0
   14490:	401a      	ands	r2, r3
   14492:	0018      	movs	r0, r3
   14494:	2a04      	cmp	r2, #4
   14496:	d1d6      	bne.n	14446 <__aeabi_dmul+0x46a>
   14498:	0003      	movs	r3, r0
   1449a:	0765      	lsls	r5, r4, #29
   1449c:	0264      	lsls	r4, r4, #9
   1449e:	0b22      	lsrs	r2, r4, #12
   144a0:	08db      	lsrs	r3, r3, #3
   144a2:	432b      	orrs	r3, r5
   144a4:	2501      	movs	r5, #1
   144a6:	4699      	mov	r9, r3
   144a8:	9b01      	ldr	r3, [sp, #4]
   144aa:	2400      	movs	r4, #0
   144ac:	401d      	ands	r5, r3
   144ae:	e5fc      	b.n	140aa <__aeabi_dmul+0xce>
   144b0:	2400      	movs	r4, #0
   144b2:	e7e2      	b.n	1447a <__aeabi_dmul+0x49e>
   144b4:	2280      	movs	r2, #128	; 0x80
   144b6:	2501      	movs	r5, #1
   144b8:	0312      	lsls	r2, r2, #12
   144ba:	4322      	orrs	r2, r4
   144bc:	9901      	ldr	r1, [sp, #4]
   144be:	0312      	lsls	r2, r2, #12
   144c0:	0b12      	lsrs	r2, r2, #12
   144c2:	400d      	ands	r5, r1
   144c4:	4699      	mov	r9, r3
   144c6:	4c04      	ldr	r4, [pc, #16]	; (144d8 <__aeabi_dmul+0x4fc>)
   144c8:	e5ef      	b.n	140aa <__aeabi_dmul+0xce>
   144ca:	46c0      	nop			; (mov r8, r8)
   144cc:	000003ff 	.word	0x000003ff
   144d0:	feffffff 	.word	0xfeffffff
   144d4:	000007fe 	.word	0x000007fe
   144d8:	000007ff 	.word	0x000007ff

000144dc <__aeabi_dsub>:
   144dc:	b5f0      	push	{r4, r5, r6, r7, lr}
   144de:	4646      	mov	r6, r8
   144e0:	46d6      	mov	lr, sl
   144e2:	464f      	mov	r7, r9
   144e4:	030c      	lsls	r4, r1, #12
   144e6:	b5c0      	push	{r6, r7, lr}
   144e8:	0fcd      	lsrs	r5, r1, #31
   144ea:	004e      	lsls	r6, r1, #1
   144ec:	0a61      	lsrs	r1, r4, #9
   144ee:	0f44      	lsrs	r4, r0, #29
   144f0:	430c      	orrs	r4, r1
   144f2:	00c1      	lsls	r1, r0, #3
   144f4:	0058      	lsls	r0, r3, #1
   144f6:	0d40      	lsrs	r0, r0, #21
   144f8:	4684      	mov	ip, r0
   144fa:	468a      	mov	sl, r1
   144fc:	000f      	movs	r7, r1
   144fe:	0319      	lsls	r1, r3, #12
   14500:	0f50      	lsrs	r0, r2, #29
   14502:	0a49      	lsrs	r1, r1, #9
   14504:	4301      	orrs	r1, r0
   14506:	48c6      	ldr	r0, [pc, #792]	; (14820 <__aeabi_dsub+0x344>)
   14508:	0d76      	lsrs	r6, r6, #21
   1450a:	46a8      	mov	r8, r5
   1450c:	0fdb      	lsrs	r3, r3, #31
   1450e:	00d2      	lsls	r2, r2, #3
   14510:	4584      	cmp	ip, r0
   14512:	d100      	bne.n	14516 <__aeabi_dsub+0x3a>
   14514:	e0d8      	b.n	146c8 <__aeabi_dsub+0x1ec>
   14516:	2001      	movs	r0, #1
   14518:	4043      	eors	r3, r0
   1451a:	42ab      	cmp	r3, r5
   1451c:	d100      	bne.n	14520 <__aeabi_dsub+0x44>
   1451e:	e0a6      	b.n	1466e <__aeabi_dsub+0x192>
   14520:	4660      	mov	r0, ip
   14522:	1a35      	subs	r5, r6, r0
   14524:	2d00      	cmp	r5, #0
   14526:	dc00      	bgt.n	1452a <__aeabi_dsub+0x4e>
   14528:	e105      	b.n	14736 <__aeabi_dsub+0x25a>
   1452a:	2800      	cmp	r0, #0
   1452c:	d110      	bne.n	14550 <__aeabi_dsub+0x74>
   1452e:	000b      	movs	r3, r1
   14530:	4313      	orrs	r3, r2
   14532:	d100      	bne.n	14536 <__aeabi_dsub+0x5a>
   14534:	e0d7      	b.n	146e6 <__aeabi_dsub+0x20a>
   14536:	1e6b      	subs	r3, r5, #1
   14538:	2b00      	cmp	r3, #0
   1453a:	d000      	beq.n	1453e <__aeabi_dsub+0x62>
   1453c:	e14b      	b.n	147d6 <__aeabi_dsub+0x2fa>
   1453e:	4653      	mov	r3, sl
   14540:	1a9f      	subs	r7, r3, r2
   14542:	45ba      	cmp	sl, r7
   14544:	4180      	sbcs	r0, r0
   14546:	1a64      	subs	r4, r4, r1
   14548:	4240      	negs	r0, r0
   1454a:	1a24      	subs	r4, r4, r0
   1454c:	2601      	movs	r6, #1
   1454e:	e01e      	b.n	1458e <__aeabi_dsub+0xb2>
   14550:	4bb3      	ldr	r3, [pc, #716]	; (14820 <__aeabi_dsub+0x344>)
   14552:	429e      	cmp	r6, r3
   14554:	d048      	beq.n	145e8 <__aeabi_dsub+0x10c>
   14556:	2380      	movs	r3, #128	; 0x80
   14558:	041b      	lsls	r3, r3, #16
   1455a:	4319      	orrs	r1, r3
   1455c:	2d38      	cmp	r5, #56	; 0x38
   1455e:	dd00      	ble.n	14562 <__aeabi_dsub+0x86>
   14560:	e119      	b.n	14796 <__aeabi_dsub+0x2ba>
   14562:	2d1f      	cmp	r5, #31
   14564:	dd00      	ble.n	14568 <__aeabi_dsub+0x8c>
   14566:	e14c      	b.n	14802 <__aeabi_dsub+0x326>
   14568:	2320      	movs	r3, #32
   1456a:	000f      	movs	r7, r1
   1456c:	1b5b      	subs	r3, r3, r5
   1456e:	0010      	movs	r0, r2
   14570:	409a      	lsls	r2, r3
   14572:	409f      	lsls	r7, r3
   14574:	40e8      	lsrs	r0, r5
   14576:	1e53      	subs	r3, r2, #1
   14578:	419a      	sbcs	r2, r3
   1457a:	40e9      	lsrs	r1, r5
   1457c:	4307      	orrs	r7, r0
   1457e:	4317      	orrs	r7, r2
   14580:	4653      	mov	r3, sl
   14582:	1bdf      	subs	r7, r3, r7
   14584:	1a61      	subs	r1, r4, r1
   14586:	45ba      	cmp	sl, r7
   14588:	41a4      	sbcs	r4, r4
   1458a:	4264      	negs	r4, r4
   1458c:	1b0c      	subs	r4, r1, r4
   1458e:	0223      	lsls	r3, r4, #8
   14590:	d400      	bmi.n	14594 <__aeabi_dsub+0xb8>
   14592:	e0c5      	b.n	14720 <__aeabi_dsub+0x244>
   14594:	0264      	lsls	r4, r4, #9
   14596:	0a65      	lsrs	r5, r4, #9
   14598:	2d00      	cmp	r5, #0
   1459a:	d100      	bne.n	1459e <__aeabi_dsub+0xc2>
   1459c:	e0f6      	b.n	1478c <__aeabi_dsub+0x2b0>
   1459e:	0028      	movs	r0, r5
   145a0:	f000 fb1e 	bl	14be0 <__clzsi2>
   145a4:	0003      	movs	r3, r0
   145a6:	3b08      	subs	r3, #8
   145a8:	2b1f      	cmp	r3, #31
   145aa:	dd00      	ble.n	145ae <__aeabi_dsub+0xd2>
   145ac:	e0e9      	b.n	14782 <__aeabi_dsub+0x2a6>
   145ae:	2220      	movs	r2, #32
   145b0:	003c      	movs	r4, r7
   145b2:	1ad2      	subs	r2, r2, r3
   145b4:	409d      	lsls	r5, r3
   145b6:	40d4      	lsrs	r4, r2
   145b8:	409f      	lsls	r7, r3
   145ba:	4325      	orrs	r5, r4
   145bc:	429e      	cmp	r6, r3
   145be:	dd00      	ble.n	145c2 <__aeabi_dsub+0xe6>
   145c0:	e0db      	b.n	1477a <__aeabi_dsub+0x29e>
   145c2:	1b9e      	subs	r6, r3, r6
   145c4:	1c73      	adds	r3, r6, #1
   145c6:	2b1f      	cmp	r3, #31
   145c8:	dd00      	ble.n	145cc <__aeabi_dsub+0xf0>
   145ca:	e10a      	b.n	147e2 <__aeabi_dsub+0x306>
   145cc:	2220      	movs	r2, #32
   145ce:	0038      	movs	r0, r7
   145d0:	1ad2      	subs	r2, r2, r3
   145d2:	0029      	movs	r1, r5
   145d4:	4097      	lsls	r7, r2
   145d6:	002c      	movs	r4, r5
   145d8:	4091      	lsls	r1, r2
   145da:	40d8      	lsrs	r0, r3
   145dc:	1e7a      	subs	r2, r7, #1
   145de:	4197      	sbcs	r7, r2
   145e0:	40dc      	lsrs	r4, r3
   145e2:	2600      	movs	r6, #0
   145e4:	4301      	orrs	r1, r0
   145e6:	430f      	orrs	r7, r1
   145e8:	077b      	lsls	r3, r7, #29
   145ea:	d009      	beq.n	14600 <__aeabi_dsub+0x124>
   145ec:	230f      	movs	r3, #15
   145ee:	403b      	ands	r3, r7
   145f0:	2b04      	cmp	r3, #4
   145f2:	d005      	beq.n	14600 <__aeabi_dsub+0x124>
   145f4:	1d3b      	adds	r3, r7, #4
   145f6:	42bb      	cmp	r3, r7
   145f8:	41bf      	sbcs	r7, r7
   145fa:	427f      	negs	r7, r7
   145fc:	19e4      	adds	r4, r4, r7
   145fe:	001f      	movs	r7, r3
   14600:	0223      	lsls	r3, r4, #8
   14602:	d525      	bpl.n	14650 <__aeabi_dsub+0x174>
   14604:	4b86      	ldr	r3, [pc, #536]	; (14820 <__aeabi_dsub+0x344>)
   14606:	3601      	adds	r6, #1
   14608:	429e      	cmp	r6, r3
   1460a:	d100      	bne.n	1460e <__aeabi_dsub+0x132>
   1460c:	e0af      	b.n	1476e <__aeabi_dsub+0x292>
   1460e:	4b85      	ldr	r3, [pc, #532]	; (14824 <__aeabi_dsub+0x348>)
   14610:	2501      	movs	r5, #1
   14612:	401c      	ands	r4, r3
   14614:	4643      	mov	r3, r8
   14616:	0762      	lsls	r2, r4, #29
   14618:	08ff      	lsrs	r7, r7, #3
   1461a:	0264      	lsls	r4, r4, #9
   1461c:	0576      	lsls	r6, r6, #21
   1461e:	4317      	orrs	r7, r2
   14620:	0b24      	lsrs	r4, r4, #12
   14622:	0d76      	lsrs	r6, r6, #21
   14624:	401d      	ands	r5, r3
   14626:	2100      	movs	r1, #0
   14628:	0324      	lsls	r4, r4, #12
   1462a:	0b23      	lsrs	r3, r4, #12
   1462c:	0d0c      	lsrs	r4, r1, #20
   1462e:	4a7e      	ldr	r2, [pc, #504]	; (14828 <__aeabi_dsub+0x34c>)
   14630:	0524      	lsls	r4, r4, #20
   14632:	431c      	orrs	r4, r3
   14634:	4014      	ands	r4, r2
   14636:	0533      	lsls	r3, r6, #20
   14638:	4323      	orrs	r3, r4
   1463a:	005b      	lsls	r3, r3, #1
   1463c:	07ed      	lsls	r5, r5, #31
   1463e:	085b      	lsrs	r3, r3, #1
   14640:	432b      	orrs	r3, r5
   14642:	0038      	movs	r0, r7
   14644:	0019      	movs	r1, r3
   14646:	bc1c      	pop	{r2, r3, r4}
   14648:	4690      	mov	r8, r2
   1464a:	4699      	mov	r9, r3
   1464c:	46a2      	mov	sl, r4
   1464e:	bdf0      	pop	{r4, r5, r6, r7, pc}
   14650:	2501      	movs	r5, #1
   14652:	4643      	mov	r3, r8
   14654:	0762      	lsls	r2, r4, #29
   14656:	08ff      	lsrs	r7, r7, #3
   14658:	4317      	orrs	r7, r2
   1465a:	08e4      	lsrs	r4, r4, #3
   1465c:	401d      	ands	r5, r3
   1465e:	4b70      	ldr	r3, [pc, #448]	; (14820 <__aeabi_dsub+0x344>)
   14660:	429e      	cmp	r6, r3
   14662:	d036      	beq.n	146d2 <__aeabi_dsub+0x1f6>
   14664:	0324      	lsls	r4, r4, #12
   14666:	0576      	lsls	r6, r6, #21
   14668:	0b24      	lsrs	r4, r4, #12
   1466a:	0d76      	lsrs	r6, r6, #21
   1466c:	e7db      	b.n	14626 <__aeabi_dsub+0x14a>
   1466e:	4663      	mov	r3, ip
   14670:	1af3      	subs	r3, r6, r3
   14672:	2b00      	cmp	r3, #0
   14674:	dc00      	bgt.n	14678 <__aeabi_dsub+0x19c>
   14676:	e094      	b.n	147a2 <__aeabi_dsub+0x2c6>
   14678:	4660      	mov	r0, ip
   1467a:	2800      	cmp	r0, #0
   1467c:	d035      	beq.n	146ea <__aeabi_dsub+0x20e>
   1467e:	4868      	ldr	r0, [pc, #416]	; (14820 <__aeabi_dsub+0x344>)
   14680:	4286      	cmp	r6, r0
   14682:	d0b1      	beq.n	145e8 <__aeabi_dsub+0x10c>
   14684:	2780      	movs	r7, #128	; 0x80
   14686:	043f      	lsls	r7, r7, #16
   14688:	4339      	orrs	r1, r7
   1468a:	2b38      	cmp	r3, #56	; 0x38
   1468c:	dc00      	bgt.n	14690 <__aeabi_dsub+0x1b4>
   1468e:	e0fd      	b.n	1488c <__aeabi_dsub+0x3b0>
   14690:	430a      	orrs	r2, r1
   14692:	0017      	movs	r7, r2
   14694:	2100      	movs	r1, #0
   14696:	1e7a      	subs	r2, r7, #1
   14698:	4197      	sbcs	r7, r2
   1469a:	4457      	add	r7, sl
   1469c:	4557      	cmp	r7, sl
   1469e:	4180      	sbcs	r0, r0
   146a0:	1909      	adds	r1, r1, r4
   146a2:	4244      	negs	r4, r0
   146a4:	190c      	adds	r4, r1, r4
   146a6:	0223      	lsls	r3, r4, #8
   146a8:	d53a      	bpl.n	14720 <__aeabi_dsub+0x244>
   146aa:	4b5d      	ldr	r3, [pc, #372]	; (14820 <__aeabi_dsub+0x344>)
   146ac:	3601      	adds	r6, #1
   146ae:	429e      	cmp	r6, r3
   146b0:	d100      	bne.n	146b4 <__aeabi_dsub+0x1d8>
   146b2:	e14b      	b.n	1494c <__aeabi_dsub+0x470>
   146b4:	2201      	movs	r2, #1
   146b6:	4b5b      	ldr	r3, [pc, #364]	; (14824 <__aeabi_dsub+0x348>)
   146b8:	401c      	ands	r4, r3
   146ba:	087b      	lsrs	r3, r7, #1
   146bc:	4017      	ands	r7, r2
   146be:	431f      	orrs	r7, r3
   146c0:	07e2      	lsls	r2, r4, #31
   146c2:	4317      	orrs	r7, r2
   146c4:	0864      	lsrs	r4, r4, #1
   146c6:	e78f      	b.n	145e8 <__aeabi_dsub+0x10c>
   146c8:	0008      	movs	r0, r1
   146ca:	4310      	orrs	r0, r2
   146cc:	d000      	beq.n	146d0 <__aeabi_dsub+0x1f4>
   146ce:	e724      	b.n	1451a <__aeabi_dsub+0x3e>
   146d0:	e721      	b.n	14516 <__aeabi_dsub+0x3a>
   146d2:	0023      	movs	r3, r4
   146d4:	433b      	orrs	r3, r7
   146d6:	d100      	bne.n	146da <__aeabi_dsub+0x1fe>
   146d8:	e1b9      	b.n	14a4e <__aeabi_dsub+0x572>
   146da:	2280      	movs	r2, #128	; 0x80
   146dc:	0312      	lsls	r2, r2, #12
   146de:	4314      	orrs	r4, r2
   146e0:	0324      	lsls	r4, r4, #12
   146e2:	0b24      	lsrs	r4, r4, #12
   146e4:	e79f      	b.n	14626 <__aeabi_dsub+0x14a>
   146e6:	002e      	movs	r6, r5
   146e8:	e77e      	b.n	145e8 <__aeabi_dsub+0x10c>
   146ea:	0008      	movs	r0, r1
   146ec:	4310      	orrs	r0, r2
   146ee:	d100      	bne.n	146f2 <__aeabi_dsub+0x216>
   146f0:	e0ca      	b.n	14888 <__aeabi_dsub+0x3ac>
   146f2:	1e58      	subs	r0, r3, #1
   146f4:	4684      	mov	ip, r0
   146f6:	2800      	cmp	r0, #0
   146f8:	d000      	beq.n	146fc <__aeabi_dsub+0x220>
   146fa:	e0e7      	b.n	148cc <__aeabi_dsub+0x3f0>
   146fc:	4452      	add	r2, sl
   146fe:	4552      	cmp	r2, sl
   14700:	4180      	sbcs	r0, r0
   14702:	1864      	adds	r4, r4, r1
   14704:	4240      	negs	r0, r0
   14706:	1824      	adds	r4, r4, r0
   14708:	0017      	movs	r7, r2
   1470a:	2601      	movs	r6, #1
   1470c:	0223      	lsls	r3, r4, #8
   1470e:	d507      	bpl.n	14720 <__aeabi_dsub+0x244>
   14710:	2602      	movs	r6, #2
   14712:	e7cf      	b.n	146b4 <__aeabi_dsub+0x1d8>
   14714:	4664      	mov	r4, ip
   14716:	432c      	orrs	r4, r5
   14718:	d100      	bne.n	1471c <__aeabi_dsub+0x240>
   1471a:	e1b3      	b.n	14a84 <__aeabi_dsub+0x5a8>
   1471c:	002c      	movs	r4, r5
   1471e:	4667      	mov	r7, ip
   14720:	077b      	lsls	r3, r7, #29
   14722:	d000      	beq.n	14726 <__aeabi_dsub+0x24a>
   14724:	e762      	b.n	145ec <__aeabi_dsub+0x110>
   14726:	0763      	lsls	r3, r4, #29
   14728:	08ff      	lsrs	r7, r7, #3
   1472a:	431f      	orrs	r7, r3
   1472c:	2501      	movs	r5, #1
   1472e:	4643      	mov	r3, r8
   14730:	08e4      	lsrs	r4, r4, #3
   14732:	401d      	ands	r5, r3
   14734:	e793      	b.n	1465e <__aeabi_dsub+0x182>
   14736:	2d00      	cmp	r5, #0
   14738:	d178      	bne.n	1482c <__aeabi_dsub+0x350>
   1473a:	1c75      	adds	r5, r6, #1
   1473c:	056d      	lsls	r5, r5, #21
   1473e:	0d6d      	lsrs	r5, r5, #21
   14740:	2d01      	cmp	r5, #1
   14742:	dc00      	bgt.n	14746 <__aeabi_dsub+0x26a>
   14744:	e0f2      	b.n	1492c <__aeabi_dsub+0x450>
   14746:	4650      	mov	r0, sl
   14748:	1a80      	subs	r0, r0, r2
   1474a:	4582      	cmp	sl, r0
   1474c:	41bf      	sbcs	r7, r7
   1474e:	1a65      	subs	r5, r4, r1
   14750:	427f      	negs	r7, r7
   14752:	1bed      	subs	r5, r5, r7
   14754:	4684      	mov	ip, r0
   14756:	0228      	lsls	r0, r5, #8
   14758:	d400      	bmi.n	1475c <__aeabi_dsub+0x280>
   1475a:	e08c      	b.n	14876 <__aeabi_dsub+0x39a>
   1475c:	4650      	mov	r0, sl
   1475e:	1a17      	subs	r7, r2, r0
   14760:	42ba      	cmp	r2, r7
   14762:	4192      	sbcs	r2, r2
   14764:	1b0c      	subs	r4, r1, r4
   14766:	4255      	negs	r5, r2
   14768:	1b65      	subs	r5, r4, r5
   1476a:	4698      	mov	r8, r3
   1476c:	e714      	b.n	14598 <__aeabi_dsub+0xbc>
   1476e:	2501      	movs	r5, #1
   14770:	4643      	mov	r3, r8
   14772:	2400      	movs	r4, #0
   14774:	401d      	ands	r5, r3
   14776:	2700      	movs	r7, #0
   14778:	e755      	b.n	14626 <__aeabi_dsub+0x14a>
   1477a:	4c2a      	ldr	r4, [pc, #168]	; (14824 <__aeabi_dsub+0x348>)
   1477c:	1af6      	subs	r6, r6, r3
   1477e:	402c      	ands	r4, r5
   14780:	e732      	b.n	145e8 <__aeabi_dsub+0x10c>
   14782:	003d      	movs	r5, r7
   14784:	3828      	subs	r0, #40	; 0x28
   14786:	4085      	lsls	r5, r0
   14788:	2700      	movs	r7, #0
   1478a:	e717      	b.n	145bc <__aeabi_dsub+0xe0>
   1478c:	0038      	movs	r0, r7
   1478e:	f000 fa27 	bl	14be0 <__clzsi2>
   14792:	3020      	adds	r0, #32
   14794:	e706      	b.n	145a4 <__aeabi_dsub+0xc8>
   14796:	430a      	orrs	r2, r1
   14798:	0017      	movs	r7, r2
   1479a:	2100      	movs	r1, #0
   1479c:	1e7a      	subs	r2, r7, #1
   1479e:	4197      	sbcs	r7, r2
   147a0:	e6ee      	b.n	14580 <__aeabi_dsub+0xa4>
   147a2:	2b00      	cmp	r3, #0
   147a4:	d000      	beq.n	147a8 <__aeabi_dsub+0x2cc>
   147a6:	e0e5      	b.n	14974 <__aeabi_dsub+0x498>
   147a8:	1c73      	adds	r3, r6, #1
   147aa:	469c      	mov	ip, r3
   147ac:	055b      	lsls	r3, r3, #21
   147ae:	0d5b      	lsrs	r3, r3, #21
   147b0:	2b01      	cmp	r3, #1
   147b2:	dc00      	bgt.n	147b6 <__aeabi_dsub+0x2da>
   147b4:	e09f      	b.n	148f6 <__aeabi_dsub+0x41a>
   147b6:	4b1a      	ldr	r3, [pc, #104]	; (14820 <__aeabi_dsub+0x344>)
   147b8:	459c      	cmp	ip, r3
   147ba:	d100      	bne.n	147be <__aeabi_dsub+0x2e2>
   147bc:	e0c5      	b.n	1494a <__aeabi_dsub+0x46e>
   147be:	4452      	add	r2, sl
   147c0:	4552      	cmp	r2, sl
   147c2:	4180      	sbcs	r0, r0
   147c4:	1864      	adds	r4, r4, r1
   147c6:	4240      	negs	r0, r0
   147c8:	1824      	adds	r4, r4, r0
   147ca:	07e7      	lsls	r7, r4, #31
   147cc:	0852      	lsrs	r2, r2, #1
   147ce:	4317      	orrs	r7, r2
   147d0:	0864      	lsrs	r4, r4, #1
   147d2:	4666      	mov	r6, ip
   147d4:	e708      	b.n	145e8 <__aeabi_dsub+0x10c>
   147d6:	4812      	ldr	r0, [pc, #72]	; (14820 <__aeabi_dsub+0x344>)
   147d8:	4285      	cmp	r5, r0
   147da:	d100      	bne.n	147de <__aeabi_dsub+0x302>
   147dc:	e085      	b.n	148ea <__aeabi_dsub+0x40e>
   147de:	001d      	movs	r5, r3
   147e0:	e6bc      	b.n	1455c <__aeabi_dsub+0x80>
   147e2:	0029      	movs	r1, r5
   147e4:	3e1f      	subs	r6, #31
   147e6:	40f1      	lsrs	r1, r6
   147e8:	2b20      	cmp	r3, #32
   147ea:	d100      	bne.n	147ee <__aeabi_dsub+0x312>
   147ec:	e07f      	b.n	148ee <__aeabi_dsub+0x412>
   147ee:	2240      	movs	r2, #64	; 0x40
   147f0:	1ad3      	subs	r3, r2, r3
   147f2:	409d      	lsls	r5, r3
   147f4:	432f      	orrs	r7, r5
   147f6:	1e7d      	subs	r5, r7, #1
   147f8:	41af      	sbcs	r7, r5
   147fa:	2400      	movs	r4, #0
   147fc:	430f      	orrs	r7, r1
   147fe:	2600      	movs	r6, #0
   14800:	e78e      	b.n	14720 <__aeabi_dsub+0x244>
   14802:	002b      	movs	r3, r5
   14804:	000f      	movs	r7, r1
   14806:	3b20      	subs	r3, #32
   14808:	40df      	lsrs	r7, r3
   1480a:	2d20      	cmp	r5, #32
   1480c:	d071      	beq.n	148f2 <__aeabi_dsub+0x416>
   1480e:	2340      	movs	r3, #64	; 0x40
   14810:	1b5d      	subs	r5, r3, r5
   14812:	40a9      	lsls	r1, r5
   14814:	430a      	orrs	r2, r1
   14816:	1e51      	subs	r1, r2, #1
   14818:	418a      	sbcs	r2, r1
   1481a:	2100      	movs	r1, #0
   1481c:	4317      	orrs	r7, r2
   1481e:	e6af      	b.n	14580 <__aeabi_dsub+0xa4>
   14820:	000007ff 	.word	0x000007ff
   14824:	ff7fffff 	.word	0xff7fffff
   14828:	800fffff 	.word	0x800fffff
   1482c:	2e00      	cmp	r6, #0
   1482e:	d03e      	beq.n	148ae <__aeabi_dsub+0x3d2>
   14830:	4eb3      	ldr	r6, [pc, #716]	; (14b00 <__aeabi_dsub+0x624>)
   14832:	45b4      	cmp	ip, r6
   14834:	d045      	beq.n	148c2 <__aeabi_dsub+0x3e6>
   14836:	2680      	movs	r6, #128	; 0x80
   14838:	0436      	lsls	r6, r6, #16
   1483a:	426d      	negs	r5, r5
   1483c:	4334      	orrs	r4, r6
   1483e:	2d38      	cmp	r5, #56	; 0x38
   14840:	dd00      	ble.n	14844 <__aeabi_dsub+0x368>
   14842:	e0a8      	b.n	14996 <__aeabi_dsub+0x4ba>
   14844:	2d1f      	cmp	r5, #31
   14846:	dd00      	ble.n	1484a <__aeabi_dsub+0x36e>
   14848:	e11f      	b.n	14a8a <__aeabi_dsub+0x5ae>
   1484a:	2620      	movs	r6, #32
   1484c:	0027      	movs	r7, r4
   1484e:	4650      	mov	r0, sl
   14850:	1b76      	subs	r6, r6, r5
   14852:	40b7      	lsls	r7, r6
   14854:	40e8      	lsrs	r0, r5
   14856:	4307      	orrs	r7, r0
   14858:	4650      	mov	r0, sl
   1485a:	40b0      	lsls	r0, r6
   1485c:	1e46      	subs	r6, r0, #1
   1485e:	41b0      	sbcs	r0, r6
   14860:	40ec      	lsrs	r4, r5
   14862:	4338      	orrs	r0, r7
   14864:	1a17      	subs	r7, r2, r0
   14866:	42ba      	cmp	r2, r7
   14868:	4192      	sbcs	r2, r2
   1486a:	1b0c      	subs	r4, r1, r4
   1486c:	4252      	negs	r2, r2
   1486e:	1aa4      	subs	r4, r4, r2
   14870:	4666      	mov	r6, ip
   14872:	4698      	mov	r8, r3
   14874:	e68b      	b.n	1458e <__aeabi_dsub+0xb2>
   14876:	4664      	mov	r4, ip
   14878:	4667      	mov	r7, ip
   1487a:	432c      	orrs	r4, r5
   1487c:	d000      	beq.n	14880 <__aeabi_dsub+0x3a4>
   1487e:	e68b      	b.n	14598 <__aeabi_dsub+0xbc>
   14880:	2500      	movs	r5, #0
   14882:	2600      	movs	r6, #0
   14884:	2700      	movs	r7, #0
   14886:	e6ea      	b.n	1465e <__aeabi_dsub+0x182>
   14888:	001e      	movs	r6, r3
   1488a:	e6ad      	b.n	145e8 <__aeabi_dsub+0x10c>
   1488c:	2b1f      	cmp	r3, #31
   1488e:	dc60      	bgt.n	14952 <__aeabi_dsub+0x476>
   14890:	2720      	movs	r7, #32
   14892:	1af8      	subs	r0, r7, r3
   14894:	000f      	movs	r7, r1
   14896:	4684      	mov	ip, r0
   14898:	4087      	lsls	r7, r0
   1489a:	0010      	movs	r0, r2
   1489c:	40d8      	lsrs	r0, r3
   1489e:	4307      	orrs	r7, r0
   148a0:	4660      	mov	r0, ip
   148a2:	4082      	lsls	r2, r0
   148a4:	1e50      	subs	r0, r2, #1
   148a6:	4182      	sbcs	r2, r0
   148a8:	40d9      	lsrs	r1, r3
   148aa:	4317      	orrs	r7, r2
   148ac:	e6f5      	b.n	1469a <__aeabi_dsub+0x1be>
   148ae:	0026      	movs	r6, r4
   148b0:	4650      	mov	r0, sl
   148b2:	4306      	orrs	r6, r0
   148b4:	d005      	beq.n	148c2 <__aeabi_dsub+0x3e6>
   148b6:	43ed      	mvns	r5, r5
   148b8:	2d00      	cmp	r5, #0
   148ba:	d0d3      	beq.n	14864 <__aeabi_dsub+0x388>
   148bc:	4e90      	ldr	r6, [pc, #576]	; (14b00 <__aeabi_dsub+0x624>)
   148be:	45b4      	cmp	ip, r6
   148c0:	d1bd      	bne.n	1483e <__aeabi_dsub+0x362>
   148c2:	000c      	movs	r4, r1
   148c4:	0017      	movs	r7, r2
   148c6:	4666      	mov	r6, ip
   148c8:	4698      	mov	r8, r3
   148ca:	e68d      	b.n	145e8 <__aeabi_dsub+0x10c>
   148cc:	488c      	ldr	r0, [pc, #560]	; (14b00 <__aeabi_dsub+0x624>)
   148ce:	4283      	cmp	r3, r0
   148d0:	d00b      	beq.n	148ea <__aeabi_dsub+0x40e>
   148d2:	4663      	mov	r3, ip
   148d4:	e6d9      	b.n	1468a <__aeabi_dsub+0x1ae>
   148d6:	2d00      	cmp	r5, #0
   148d8:	d000      	beq.n	148dc <__aeabi_dsub+0x400>
   148da:	e096      	b.n	14a0a <__aeabi_dsub+0x52e>
   148dc:	0008      	movs	r0, r1
   148de:	4310      	orrs	r0, r2
   148e0:	d100      	bne.n	148e4 <__aeabi_dsub+0x408>
   148e2:	e0e2      	b.n	14aaa <__aeabi_dsub+0x5ce>
   148e4:	000c      	movs	r4, r1
   148e6:	0017      	movs	r7, r2
   148e8:	4698      	mov	r8, r3
   148ea:	4e85      	ldr	r6, [pc, #532]	; (14b00 <__aeabi_dsub+0x624>)
   148ec:	e67c      	b.n	145e8 <__aeabi_dsub+0x10c>
   148ee:	2500      	movs	r5, #0
   148f0:	e780      	b.n	147f4 <__aeabi_dsub+0x318>
   148f2:	2100      	movs	r1, #0
   148f4:	e78e      	b.n	14814 <__aeabi_dsub+0x338>
   148f6:	0023      	movs	r3, r4
   148f8:	4650      	mov	r0, sl
   148fa:	4303      	orrs	r3, r0
   148fc:	2e00      	cmp	r6, #0
   148fe:	d000      	beq.n	14902 <__aeabi_dsub+0x426>
   14900:	e0a8      	b.n	14a54 <__aeabi_dsub+0x578>
   14902:	2b00      	cmp	r3, #0
   14904:	d100      	bne.n	14908 <__aeabi_dsub+0x42c>
   14906:	e0de      	b.n	14ac6 <__aeabi_dsub+0x5ea>
   14908:	000b      	movs	r3, r1
   1490a:	4313      	orrs	r3, r2
   1490c:	d100      	bne.n	14910 <__aeabi_dsub+0x434>
   1490e:	e66b      	b.n	145e8 <__aeabi_dsub+0x10c>
   14910:	4452      	add	r2, sl
   14912:	4552      	cmp	r2, sl
   14914:	4180      	sbcs	r0, r0
   14916:	1864      	adds	r4, r4, r1
   14918:	4240      	negs	r0, r0
   1491a:	1824      	adds	r4, r4, r0
   1491c:	0017      	movs	r7, r2
   1491e:	0223      	lsls	r3, r4, #8
   14920:	d400      	bmi.n	14924 <__aeabi_dsub+0x448>
   14922:	e6fd      	b.n	14720 <__aeabi_dsub+0x244>
   14924:	4b77      	ldr	r3, [pc, #476]	; (14b04 <__aeabi_dsub+0x628>)
   14926:	4666      	mov	r6, ip
   14928:	401c      	ands	r4, r3
   1492a:	e65d      	b.n	145e8 <__aeabi_dsub+0x10c>
   1492c:	0025      	movs	r5, r4
   1492e:	4650      	mov	r0, sl
   14930:	4305      	orrs	r5, r0
   14932:	2e00      	cmp	r6, #0
   14934:	d1cf      	bne.n	148d6 <__aeabi_dsub+0x3fa>
   14936:	2d00      	cmp	r5, #0
   14938:	d14f      	bne.n	149da <__aeabi_dsub+0x4fe>
   1493a:	000c      	movs	r4, r1
   1493c:	4314      	orrs	r4, r2
   1493e:	d100      	bne.n	14942 <__aeabi_dsub+0x466>
   14940:	e0a0      	b.n	14a84 <__aeabi_dsub+0x5a8>
   14942:	000c      	movs	r4, r1
   14944:	0017      	movs	r7, r2
   14946:	4698      	mov	r8, r3
   14948:	e64e      	b.n	145e8 <__aeabi_dsub+0x10c>
   1494a:	4666      	mov	r6, ip
   1494c:	2400      	movs	r4, #0
   1494e:	2700      	movs	r7, #0
   14950:	e685      	b.n	1465e <__aeabi_dsub+0x182>
   14952:	001f      	movs	r7, r3
   14954:	0008      	movs	r0, r1
   14956:	3f20      	subs	r7, #32
   14958:	40f8      	lsrs	r0, r7
   1495a:	0007      	movs	r7, r0
   1495c:	2b20      	cmp	r3, #32
   1495e:	d100      	bne.n	14962 <__aeabi_dsub+0x486>
   14960:	e08e      	b.n	14a80 <__aeabi_dsub+0x5a4>
   14962:	2040      	movs	r0, #64	; 0x40
   14964:	1ac3      	subs	r3, r0, r3
   14966:	4099      	lsls	r1, r3
   14968:	430a      	orrs	r2, r1
   1496a:	1e51      	subs	r1, r2, #1
   1496c:	418a      	sbcs	r2, r1
   1496e:	2100      	movs	r1, #0
   14970:	4317      	orrs	r7, r2
   14972:	e692      	b.n	1469a <__aeabi_dsub+0x1be>
   14974:	2e00      	cmp	r6, #0
   14976:	d114      	bne.n	149a2 <__aeabi_dsub+0x4c6>
   14978:	0026      	movs	r6, r4
   1497a:	4650      	mov	r0, sl
   1497c:	4306      	orrs	r6, r0
   1497e:	d062      	beq.n	14a46 <__aeabi_dsub+0x56a>
   14980:	43db      	mvns	r3, r3
   14982:	2b00      	cmp	r3, #0
   14984:	d15c      	bne.n	14a40 <__aeabi_dsub+0x564>
   14986:	1887      	adds	r7, r0, r2
   14988:	4297      	cmp	r7, r2
   1498a:	4192      	sbcs	r2, r2
   1498c:	1864      	adds	r4, r4, r1
   1498e:	4252      	negs	r2, r2
   14990:	18a4      	adds	r4, r4, r2
   14992:	4666      	mov	r6, ip
   14994:	e687      	b.n	146a6 <__aeabi_dsub+0x1ca>
   14996:	4650      	mov	r0, sl
   14998:	4320      	orrs	r0, r4
   1499a:	1e44      	subs	r4, r0, #1
   1499c:	41a0      	sbcs	r0, r4
   1499e:	2400      	movs	r4, #0
   149a0:	e760      	b.n	14864 <__aeabi_dsub+0x388>
   149a2:	4e57      	ldr	r6, [pc, #348]	; (14b00 <__aeabi_dsub+0x624>)
   149a4:	45b4      	cmp	ip, r6
   149a6:	d04e      	beq.n	14a46 <__aeabi_dsub+0x56a>
   149a8:	2680      	movs	r6, #128	; 0x80
   149aa:	0436      	lsls	r6, r6, #16
   149ac:	425b      	negs	r3, r3
   149ae:	4334      	orrs	r4, r6
   149b0:	2b38      	cmp	r3, #56	; 0x38
   149b2:	dd00      	ble.n	149b6 <__aeabi_dsub+0x4da>
   149b4:	e07f      	b.n	14ab6 <__aeabi_dsub+0x5da>
   149b6:	2b1f      	cmp	r3, #31
   149b8:	dd00      	ble.n	149bc <__aeabi_dsub+0x4e0>
   149ba:	e08b      	b.n	14ad4 <__aeabi_dsub+0x5f8>
   149bc:	2620      	movs	r6, #32
   149be:	0027      	movs	r7, r4
   149c0:	4650      	mov	r0, sl
   149c2:	1af6      	subs	r6, r6, r3
   149c4:	40b7      	lsls	r7, r6
   149c6:	40d8      	lsrs	r0, r3
   149c8:	4307      	orrs	r7, r0
   149ca:	4650      	mov	r0, sl
   149cc:	40b0      	lsls	r0, r6
   149ce:	1e46      	subs	r6, r0, #1
   149d0:	41b0      	sbcs	r0, r6
   149d2:	4307      	orrs	r7, r0
   149d4:	40dc      	lsrs	r4, r3
   149d6:	18bf      	adds	r7, r7, r2
   149d8:	e7d6      	b.n	14988 <__aeabi_dsub+0x4ac>
   149da:	000d      	movs	r5, r1
   149dc:	4315      	orrs	r5, r2
   149de:	d100      	bne.n	149e2 <__aeabi_dsub+0x506>
   149e0:	e602      	b.n	145e8 <__aeabi_dsub+0x10c>
   149e2:	4650      	mov	r0, sl
   149e4:	1a80      	subs	r0, r0, r2
   149e6:	4582      	cmp	sl, r0
   149e8:	41bf      	sbcs	r7, r7
   149ea:	1a65      	subs	r5, r4, r1
   149ec:	427f      	negs	r7, r7
   149ee:	1bed      	subs	r5, r5, r7
   149f0:	4684      	mov	ip, r0
   149f2:	0228      	lsls	r0, r5, #8
   149f4:	d400      	bmi.n	149f8 <__aeabi_dsub+0x51c>
   149f6:	e68d      	b.n	14714 <__aeabi_dsub+0x238>
   149f8:	4650      	mov	r0, sl
   149fa:	1a17      	subs	r7, r2, r0
   149fc:	42ba      	cmp	r2, r7
   149fe:	4192      	sbcs	r2, r2
   14a00:	1b0c      	subs	r4, r1, r4
   14a02:	4252      	negs	r2, r2
   14a04:	1aa4      	subs	r4, r4, r2
   14a06:	4698      	mov	r8, r3
   14a08:	e5ee      	b.n	145e8 <__aeabi_dsub+0x10c>
   14a0a:	000d      	movs	r5, r1
   14a0c:	4315      	orrs	r5, r2
   14a0e:	d100      	bne.n	14a12 <__aeabi_dsub+0x536>
   14a10:	e76b      	b.n	148ea <__aeabi_dsub+0x40e>
   14a12:	4650      	mov	r0, sl
   14a14:	0767      	lsls	r7, r4, #29
   14a16:	08c0      	lsrs	r0, r0, #3
   14a18:	4307      	orrs	r7, r0
   14a1a:	2080      	movs	r0, #128	; 0x80
   14a1c:	08e4      	lsrs	r4, r4, #3
   14a1e:	0300      	lsls	r0, r0, #12
   14a20:	4204      	tst	r4, r0
   14a22:	d007      	beq.n	14a34 <__aeabi_dsub+0x558>
   14a24:	08cd      	lsrs	r5, r1, #3
   14a26:	4205      	tst	r5, r0
   14a28:	d104      	bne.n	14a34 <__aeabi_dsub+0x558>
   14a2a:	002c      	movs	r4, r5
   14a2c:	4698      	mov	r8, r3
   14a2e:	08d7      	lsrs	r7, r2, #3
   14a30:	0749      	lsls	r1, r1, #29
   14a32:	430f      	orrs	r7, r1
   14a34:	0f7b      	lsrs	r3, r7, #29
   14a36:	00e4      	lsls	r4, r4, #3
   14a38:	431c      	orrs	r4, r3
   14a3a:	00ff      	lsls	r7, r7, #3
   14a3c:	4e30      	ldr	r6, [pc, #192]	; (14b00 <__aeabi_dsub+0x624>)
   14a3e:	e5d3      	b.n	145e8 <__aeabi_dsub+0x10c>
   14a40:	4e2f      	ldr	r6, [pc, #188]	; (14b00 <__aeabi_dsub+0x624>)
   14a42:	45b4      	cmp	ip, r6
   14a44:	d1b4      	bne.n	149b0 <__aeabi_dsub+0x4d4>
   14a46:	000c      	movs	r4, r1
   14a48:	0017      	movs	r7, r2
   14a4a:	4666      	mov	r6, ip
   14a4c:	e5cc      	b.n	145e8 <__aeabi_dsub+0x10c>
   14a4e:	2700      	movs	r7, #0
   14a50:	2400      	movs	r4, #0
   14a52:	e5e8      	b.n	14626 <__aeabi_dsub+0x14a>
   14a54:	2b00      	cmp	r3, #0
   14a56:	d039      	beq.n	14acc <__aeabi_dsub+0x5f0>
   14a58:	000b      	movs	r3, r1
   14a5a:	4313      	orrs	r3, r2
   14a5c:	d100      	bne.n	14a60 <__aeabi_dsub+0x584>
   14a5e:	e744      	b.n	148ea <__aeabi_dsub+0x40e>
   14a60:	08c0      	lsrs	r0, r0, #3
   14a62:	0767      	lsls	r7, r4, #29
   14a64:	4307      	orrs	r7, r0
   14a66:	2080      	movs	r0, #128	; 0x80
   14a68:	08e4      	lsrs	r4, r4, #3
   14a6a:	0300      	lsls	r0, r0, #12
   14a6c:	4204      	tst	r4, r0
   14a6e:	d0e1      	beq.n	14a34 <__aeabi_dsub+0x558>
   14a70:	08cb      	lsrs	r3, r1, #3
   14a72:	4203      	tst	r3, r0
   14a74:	d1de      	bne.n	14a34 <__aeabi_dsub+0x558>
   14a76:	08d7      	lsrs	r7, r2, #3
   14a78:	0749      	lsls	r1, r1, #29
   14a7a:	430f      	orrs	r7, r1
   14a7c:	001c      	movs	r4, r3
   14a7e:	e7d9      	b.n	14a34 <__aeabi_dsub+0x558>
   14a80:	2100      	movs	r1, #0
   14a82:	e771      	b.n	14968 <__aeabi_dsub+0x48c>
   14a84:	2500      	movs	r5, #0
   14a86:	2700      	movs	r7, #0
   14a88:	e5e9      	b.n	1465e <__aeabi_dsub+0x182>
   14a8a:	002e      	movs	r6, r5
   14a8c:	0027      	movs	r7, r4
   14a8e:	3e20      	subs	r6, #32
   14a90:	40f7      	lsrs	r7, r6
   14a92:	2d20      	cmp	r5, #32
   14a94:	d02f      	beq.n	14af6 <__aeabi_dsub+0x61a>
   14a96:	2640      	movs	r6, #64	; 0x40
   14a98:	1b75      	subs	r5, r6, r5
   14a9a:	40ac      	lsls	r4, r5
   14a9c:	4650      	mov	r0, sl
   14a9e:	4320      	orrs	r0, r4
   14aa0:	1e44      	subs	r4, r0, #1
   14aa2:	41a0      	sbcs	r0, r4
   14aa4:	2400      	movs	r4, #0
   14aa6:	4338      	orrs	r0, r7
   14aa8:	e6dc      	b.n	14864 <__aeabi_dsub+0x388>
   14aaa:	2480      	movs	r4, #128	; 0x80
   14aac:	2500      	movs	r5, #0
   14aae:	0324      	lsls	r4, r4, #12
   14ab0:	4e13      	ldr	r6, [pc, #76]	; (14b00 <__aeabi_dsub+0x624>)
   14ab2:	2700      	movs	r7, #0
   14ab4:	e5d3      	b.n	1465e <__aeabi_dsub+0x182>
   14ab6:	4650      	mov	r0, sl
   14ab8:	4320      	orrs	r0, r4
   14aba:	0007      	movs	r7, r0
   14abc:	1e78      	subs	r0, r7, #1
   14abe:	4187      	sbcs	r7, r0
   14ac0:	2400      	movs	r4, #0
   14ac2:	18bf      	adds	r7, r7, r2
   14ac4:	e760      	b.n	14988 <__aeabi_dsub+0x4ac>
   14ac6:	000c      	movs	r4, r1
   14ac8:	0017      	movs	r7, r2
   14aca:	e58d      	b.n	145e8 <__aeabi_dsub+0x10c>
   14acc:	000c      	movs	r4, r1
   14ace:	0017      	movs	r7, r2
   14ad0:	4e0b      	ldr	r6, [pc, #44]	; (14b00 <__aeabi_dsub+0x624>)
   14ad2:	e589      	b.n	145e8 <__aeabi_dsub+0x10c>
   14ad4:	001e      	movs	r6, r3
   14ad6:	0027      	movs	r7, r4
   14ad8:	3e20      	subs	r6, #32
   14ada:	40f7      	lsrs	r7, r6
   14adc:	2b20      	cmp	r3, #32
   14ade:	d00c      	beq.n	14afa <__aeabi_dsub+0x61e>
   14ae0:	2640      	movs	r6, #64	; 0x40
   14ae2:	1af3      	subs	r3, r6, r3
   14ae4:	409c      	lsls	r4, r3
   14ae6:	4650      	mov	r0, sl
   14ae8:	4320      	orrs	r0, r4
   14aea:	1e44      	subs	r4, r0, #1
   14aec:	41a0      	sbcs	r0, r4
   14aee:	4307      	orrs	r7, r0
   14af0:	2400      	movs	r4, #0
   14af2:	18bf      	adds	r7, r7, r2
   14af4:	e748      	b.n	14988 <__aeabi_dsub+0x4ac>
   14af6:	2400      	movs	r4, #0
   14af8:	e7d0      	b.n	14a9c <__aeabi_dsub+0x5c0>
   14afa:	2400      	movs	r4, #0
   14afc:	e7f3      	b.n	14ae6 <__aeabi_dsub+0x60a>
   14afe:	46c0      	nop			; (mov r8, r8)
   14b00:	000007ff 	.word	0x000007ff
   14b04:	ff7fffff 	.word	0xff7fffff

00014b08 <__aeabi_d2iz>:
   14b08:	b530      	push	{r4, r5, lr}
   14b0a:	4d13      	ldr	r5, [pc, #76]	; (14b58 <__aeabi_d2iz+0x50>)
   14b0c:	030a      	lsls	r2, r1, #12
   14b0e:	004b      	lsls	r3, r1, #1
   14b10:	0b12      	lsrs	r2, r2, #12
   14b12:	0d5b      	lsrs	r3, r3, #21
   14b14:	0fc9      	lsrs	r1, r1, #31
   14b16:	2400      	movs	r4, #0
   14b18:	42ab      	cmp	r3, r5
   14b1a:	dd10      	ble.n	14b3e <__aeabi_d2iz+0x36>
   14b1c:	4c0f      	ldr	r4, [pc, #60]	; (14b5c <__aeabi_d2iz+0x54>)
   14b1e:	42a3      	cmp	r3, r4
   14b20:	dc0f      	bgt.n	14b42 <__aeabi_d2iz+0x3a>
   14b22:	2480      	movs	r4, #128	; 0x80
   14b24:	4d0e      	ldr	r5, [pc, #56]	; (14b60 <__aeabi_d2iz+0x58>)
   14b26:	0364      	lsls	r4, r4, #13
   14b28:	4322      	orrs	r2, r4
   14b2a:	1aed      	subs	r5, r5, r3
   14b2c:	2d1f      	cmp	r5, #31
   14b2e:	dd0b      	ble.n	14b48 <__aeabi_d2iz+0x40>
   14b30:	480c      	ldr	r0, [pc, #48]	; (14b64 <__aeabi_d2iz+0x5c>)
   14b32:	1ac3      	subs	r3, r0, r3
   14b34:	40da      	lsrs	r2, r3
   14b36:	4254      	negs	r4, r2
   14b38:	2900      	cmp	r1, #0
   14b3a:	d100      	bne.n	14b3e <__aeabi_d2iz+0x36>
   14b3c:	0014      	movs	r4, r2
   14b3e:	0020      	movs	r0, r4
   14b40:	bd30      	pop	{r4, r5, pc}
   14b42:	4b09      	ldr	r3, [pc, #36]	; (14b68 <__aeabi_d2iz+0x60>)
   14b44:	18cc      	adds	r4, r1, r3
   14b46:	e7fa      	b.n	14b3e <__aeabi_d2iz+0x36>
   14b48:	4c08      	ldr	r4, [pc, #32]	; (14b6c <__aeabi_d2iz+0x64>)
   14b4a:	40e8      	lsrs	r0, r5
   14b4c:	46a4      	mov	ip, r4
   14b4e:	4463      	add	r3, ip
   14b50:	409a      	lsls	r2, r3
   14b52:	4302      	orrs	r2, r0
   14b54:	e7ef      	b.n	14b36 <__aeabi_d2iz+0x2e>
   14b56:	46c0      	nop			; (mov r8, r8)
   14b58:	000003fe 	.word	0x000003fe
   14b5c:	0000041d 	.word	0x0000041d
   14b60:	00000433 	.word	0x00000433
   14b64:	00000413 	.word	0x00000413
   14b68:	7fffffff 	.word	0x7fffffff
   14b6c:	fffffbed 	.word	0xfffffbed

00014b70 <__aeabi_ui2d>:
   14b70:	b510      	push	{r4, lr}
   14b72:	1e04      	subs	r4, r0, #0
   14b74:	d028      	beq.n	14bc8 <__aeabi_ui2d+0x58>
   14b76:	f000 f833 	bl	14be0 <__clzsi2>
   14b7a:	4b15      	ldr	r3, [pc, #84]	; (14bd0 <__aeabi_ui2d+0x60>)
   14b7c:	4a15      	ldr	r2, [pc, #84]	; (14bd4 <__aeabi_ui2d+0x64>)
   14b7e:	1a1b      	subs	r3, r3, r0
   14b80:	1ad2      	subs	r2, r2, r3
   14b82:	2a1f      	cmp	r2, #31
   14b84:	dd15      	ble.n	14bb2 <__aeabi_ui2d+0x42>
   14b86:	4a14      	ldr	r2, [pc, #80]	; (14bd8 <__aeabi_ui2d+0x68>)
   14b88:	1ad2      	subs	r2, r2, r3
   14b8a:	4094      	lsls	r4, r2
   14b8c:	2200      	movs	r2, #0
   14b8e:	0324      	lsls	r4, r4, #12
   14b90:	055b      	lsls	r3, r3, #21
   14b92:	0b24      	lsrs	r4, r4, #12
   14b94:	0d5b      	lsrs	r3, r3, #21
   14b96:	2100      	movs	r1, #0
   14b98:	0010      	movs	r0, r2
   14b9a:	0324      	lsls	r4, r4, #12
   14b9c:	0d0a      	lsrs	r2, r1, #20
   14b9e:	0b24      	lsrs	r4, r4, #12
   14ba0:	0512      	lsls	r2, r2, #20
   14ba2:	4322      	orrs	r2, r4
   14ba4:	4c0d      	ldr	r4, [pc, #52]	; (14bdc <__aeabi_ui2d+0x6c>)
   14ba6:	051b      	lsls	r3, r3, #20
   14ba8:	4022      	ands	r2, r4
   14baa:	4313      	orrs	r3, r2
   14bac:	005b      	lsls	r3, r3, #1
   14bae:	0859      	lsrs	r1, r3, #1
   14bb0:	bd10      	pop	{r4, pc}
   14bb2:	0021      	movs	r1, r4
   14bb4:	4091      	lsls	r1, r2
   14bb6:	000a      	movs	r2, r1
   14bb8:	210b      	movs	r1, #11
   14bba:	1a08      	subs	r0, r1, r0
   14bbc:	40c4      	lsrs	r4, r0
   14bbe:	055b      	lsls	r3, r3, #21
   14bc0:	0324      	lsls	r4, r4, #12
   14bc2:	0b24      	lsrs	r4, r4, #12
   14bc4:	0d5b      	lsrs	r3, r3, #21
   14bc6:	e7e6      	b.n	14b96 <__aeabi_ui2d+0x26>
   14bc8:	2300      	movs	r3, #0
   14bca:	2400      	movs	r4, #0
   14bcc:	2200      	movs	r2, #0
   14bce:	e7e2      	b.n	14b96 <__aeabi_ui2d+0x26>
   14bd0:	0000041e 	.word	0x0000041e
   14bd4:	00000433 	.word	0x00000433
   14bd8:	00000413 	.word	0x00000413
   14bdc:	800fffff 	.word	0x800fffff

00014be0 <__clzsi2>:
   14be0:	211c      	movs	r1, #28
   14be2:	2301      	movs	r3, #1
   14be4:	041b      	lsls	r3, r3, #16
   14be6:	4298      	cmp	r0, r3
   14be8:	d301      	bcc.n	14bee <__clzsi2+0xe>
   14bea:	0c00      	lsrs	r0, r0, #16
   14bec:	3910      	subs	r1, #16
   14bee:	0a1b      	lsrs	r3, r3, #8
   14bf0:	4298      	cmp	r0, r3
   14bf2:	d301      	bcc.n	14bf8 <__clzsi2+0x18>
   14bf4:	0a00      	lsrs	r0, r0, #8
   14bf6:	3908      	subs	r1, #8
   14bf8:	091b      	lsrs	r3, r3, #4
   14bfa:	4298      	cmp	r0, r3
   14bfc:	d301      	bcc.n	14c02 <__clzsi2+0x22>
   14bfe:	0900      	lsrs	r0, r0, #4
   14c00:	3904      	subs	r1, #4
   14c02:	a202      	add	r2, pc, #8	; (adr r2, 14c0c <__clzsi2+0x2c>)
   14c04:	5c10      	ldrb	r0, [r2, r0]
   14c06:	1840      	adds	r0, r0, r1
   14c08:	4770      	bx	lr
   14c0a:	46c0      	nop			; (mov r8, r8)
   14c0c:	02020304 	.word	0x02020304
   14c10:	01010101 	.word	0x01010101
	...

00014c1c <__assert_func>:
   14c1c:	b530      	push	{r4, r5, lr}
   14c1e:	001c      	movs	r4, r3
   14c20:	4b09      	ldr	r3, [pc, #36]	; (14c48 <__assert_func+0x2c>)
   14c22:	0005      	movs	r5, r0
   14c24:	681b      	ldr	r3, [r3, #0]
   14c26:	b085      	sub	sp, #20
   14c28:	68d8      	ldr	r0, [r3, #12]
   14c2a:	4b08      	ldr	r3, [pc, #32]	; (14c4c <__assert_func+0x30>)
   14c2c:	2a00      	cmp	r2, #0
   14c2e:	d101      	bne.n	14c34 <__assert_func+0x18>
   14c30:	4b07      	ldr	r3, [pc, #28]	; (14c50 <__assert_func+0x34>)
   14c32:	001a      	movs	r2, r3
   14c34:	9202      	str	r2, [sp, #8]
   14c36:	9301      	str	r3, [sp, #4]
   14c38:	9100      	str	r1, [sp, #0]
   14c3a:	002b      	movs	r3, r5
   14c3c:	0022      	movs	r2, r4
   14c3e:	4905      	ldr	r1, [pc, #20]	; (14c54 <__assert_func+0x38>)
   14c40:	f000 f80a 	bl	14c58 <fiprintf>
   14c44:	f000 fd14 	bl	15670 <abort>
   14c48:	200000a0 	.word	0x200000a0
   14c4c:	000167cc 	.word	0x000167cc
   14c50:	00016807 	.word	0x00016807
   14c54:	000167d9 	.word	0x000167d9

00014c58 <fiprintf>:
   14c58:	b40e      	push	{r1, r2, r3}
   14c5a:	b503      	push	{r0, r1, lr}
   14c5c:	0001      	movs	r1, r0
   14c5e:	ab03      	add	r3, sp, #12
   14c60:	4804      	ldr	r0, [pc, #16]	; (14c74 <fiprintf+0x1c>)
   14c62:	cb04      	ldmia	r3!, {r2}
   14c64:	6800      	ldr	r0, [r0, #0]
   14c66:	9301      	str	r3, [sp, #4]
   14c68:	f000 f872 	bl	14d50 <_vfiprintf_r>
   14c6c:	b002      	add	sp, #8
   14c6e:	bc08      	pop	{r3}
   14c70:	b003      	add	sp, #12
   14c72:	4718      	bx	r3
   14c74:	200000a0 	.word	0x200000a0

00014c78 <__libc_init_array>:
   14c78:	b570      	push	{r4, r5, r6, lr}
   14c7a:	2600      	movs	r6, #0
   14c7c:	4d0c      	ldr	r5, [pc, #48]	; (14cb0 <__libc_init_array+0x38>)
   14c7e:	4c0d      	ldr	r4, [pc, #52]	; (14cb4 <__libc_init_array+0x3c>)
   14c80:	1b64      	subs	r4, r4, r5
   14c82:	10a4      	asrs	r4, r4, #2
   14c84:	42a6      	cmp	r6, r4
   14c86:	d109      	bne.n	14c9c <__libc_init_array+0x24>
   14c88:	2600      	movs	r6, #0
   14c8a:	f001 fe09 	bl	168a0 <_init>
   14c8e:	4d0a      	ldr	r5, [pc, #40]	; (14cb8 <__libc_init_array+0x40>)
   14c90:	4c0a      	ldr	r4, [pc, #40]	; (14cbc <__libc_init_array+0x44>)
   14c92:	1b64      	subs	r4, r4, r5
   14c94:	10a4      	asrs	r4, r4, #2
   14c96:	42a6      	cmp	r6, r4
   14c98:	d105      	bne.n	14ca6 <__libc_init_array+0x2e>
   14c9a:	bd70      	pop	{r4, r5, r6, pc}
   14c9c:	00b3      	lsls	r3, r6, #2
   14c9e:	58eb      	ldr	r3, [r5, r3]
   14ca0:	4798      	blx	r3
   14ca2:	3601      	adds	r6, #1
   14ca4:	e7ee      	b.n	14c84 <__libc_init_array+0xc>
   14ca6:	00b3      	lsls	r3, r6, #2
   14ca8:	58eb      	ldr	r3, [r5, r3]
   14caa:	4798      	blx	r3
   14cac:	3601      	adds	r6, #1
   14cae:	e7f2      	b.n	14c96 <__libc_init_array+0x1e>
   14cb0:	000168ac 	.word	0x000168ac
   14cb4:	000168ac 	.word	0x000168ac
   14cb8:	000168ac 	.word	0x000168ac
   14cbc:	000168b0 	.word	0x000168b0

00014cc0 <memcmp>:
   14cc0:	b530      	push	{r4, r5, lr}
   14cc2:	2400      	movs	r4, #0
   14cc4:	42a2      	cmp	r2, r4
   14cc6:	d101      	bne.n	14ccc <memcmp+0xc>
   14cc8:	2000      	movs	r0, #0
   14cca:	e005      	b.n	14cd8 <memcmp+0x18>
   14ccc:	5d03      	ldrb	r3, [r0, r4]
   14cce:	1c65      	adds	r5, r4, #1
   14cd0:	5d0c      	ldrb	r4, [r1, r4]
   14cd2:	42a3      	cmp	r3, r4
   14cd4:	d001      	beq.n	14cda <memcmp+0x1a>
   14cd6:	1b18      	subs	r0, r3, r4
   14cd8:	bd30      	pop	{r4, r5, pc}
   14cda:	002c      	movs	r4, r5
   14cdc:	e7f2      	b.n	14cc4 <memcmp+0x4>

00014cde <memcpy>:
   14cde:	2300      	movs	r3, #0
   14ce0:	b510      	push	{r4, lr}
   14ce2:	429a      	cmp	r2, r3
   14ce4:	d100      	bne.n	14ce8 <memcpy+0xa>
   14ce6:	bd10      	pop	{r4, pc}
   14ce8:	5ccc      	ldrb	r4, [r1, r3]
   14cea:	54c4      	strb	r4, [r0, r3]
   14cec:	3301      	adds	r3, #1
   14cee:	e7f8      	b.n	14ce2 <memcpy+0x4>

00014cf0 <memset>:
   14cf0:	0003      	movs	r3, r0
   14cf2:	1882      	adds	r2, r0, r2
   14cf4:	4293      	cmp	r3, r2
   14cf6:	d100      	bne.n	14cfa <memset+0xa>
   14cf8:	4770      	bx	lr
   14cfa:	7019      	strb	r1, [r3, #0]
   14cfc:	3301      	adds	r3, #1
   14cfe:	e7f9      	b.n	14cf4 <memset+0x4>

00014d00 <__sfputc_r>:
   14d00:	6893      	ldr	r3, [r2, #8]
   14d02:	b510      	push	{r4, lr}
   14d04:	3b01      	subs	r3, #1
   14d06:	6093      	str	r3, [r2, #8]
   14d08:	2b00      	cmp	r3, #0
   14d0a:	da05      	bge.n	14d18 <__sfputc_r+0x18>
   14d0c:	6994      	ldr	r4, [r2, #24]
   14d0e:	42a3      	cmp	r3, r4
   14d10:	db08      	blt.n	14d24 <__sfputc_r+0x24>
   14d12:	b2cb      	uxtb	r3, r1
   14d14:	2b0a      	cmp	r3, #10
   14d16:	d005      	beq.n	14d24 <__sfputc_r+0x24>
   14d18:	6813      	ldr	r3, [r2, #0]
   14d1a:	1c58      	adds	r0, r3, #1
   14d1c:	6010      	str	r0, [r2, #0]
   14d1e:	7019      	strb	r1, [r3, #0]
   14d20:	b2c8      	uxtb	r0, r1
   14d22:	bd10      	pop	{r4, pc}
   14d24:	f000 fbd8 	bl	154d8 <__swbuf_r>
   14d28:	e7fb      	b.n	14d22 <__sfputc_r+0x22>

00014d2a <__sfputs_r>:
   14d2a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   14d2c:	0006      	movs	r6, r0
   14d2e:	000f      	movs	r7, r1
   14d30:	0014      	movs	r4, r2
   14d32:	18d5      	adds	r5, r2, r3
   14d34:	42ac      	cmp	r4, r5
   14d36:	d101      	bne.n	14d3c <__sfputs_r+0x12>
   14d38:	2000      	movs	r0, #0
   14d3a:	e007      	b.n	14d4c <__sfputs_r+0x22>
   14d3c:	7821      	ldrb	r1, [r4, #0]
   14d3e:	003a      	movs	r2, r7
   14d40:	0030      	movs	r0, r6
   14d42:	f7ff ffdd 	bl	14d00 <__sfputc_r>
   14d46:	3401      	adds	r4, #1
   14d48:	1c43      	adds	r3, r0, #1
   14d4a:	d1f3      	bne.n	14d34 <__sfputs_r+0xa>
   14d4c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   14d4e:	Address 0x00014d4e is out of bounds.


00014d50 <_vfiprintf_r>:
   14d50:	b5f0      	push	{r4, r5, r6, r7, lr}
   14d52:	b09f      	sub	sp, #124	; 0x7c
   14d54:	0006      	movs	r6, r0
   14d56:	000f      	movs	r7, r1
   14d58:	0014      	movs	r4, r2
   14d5a:	9305      	str	r3, [sp, #20]
   14d5c:	2800      	cmp	r0, #0
   14d5e:	d004      	beq.n	14d6a <_vfiprintf_r+0x1a>
   14d60:	6983      	ldr	r3, [r0, #24]
   14d62:	2b00      	cmp	r3, #0
   14d64:	d101      	bne.n	14d6a <_vfiprintf_r+0x1a>
   14d66:	f000 fd83 	bl	15870 <__sinit>
   14d6a:	4b7f      	ldr	r3, [pc, #508]	; (14f68 <_vfiprintf_r+0x218>)
   14d6c:	429f      	cmp	r7, r3
   14d6e:	d15c      	bne.n	14e2a <_vfiprintf_r+0xda>
   14d70:	6877      	ldr	r7, [r6, #4]
   14d72:	89bb      	ldrh	r3, [r7, #12]
   14d74:	071b      	lsls	r3, r3, #28
   14d76:	d562      	bpl.n	14e3e <_vfiprintf_r+0xee>
   14d78:	693b      	ldr	r3, [r7, #16]
   14d7a:	2b00      	cmp	r3, #0
   14d7c:	d05f      	beq.n	14e3e <_vfiprintf_r+0xee>
   14d7e:	2300      	movs	r3, #0
   14d80:	ad06      	add	r5, sp, #24
   14d82:	616b      	str	r3, [r5, #20]
   14d84:	3320      	adds	r3, #32
   14d86:	766b      	strb	r3, [r5, #25]
   14d88:	3310      	adds	r3, #16
   14d8a:	76ab      	strb	r3, [r5, #26]
   14d8c:	9402      	str	r4, [sp, #8]
   14d8e:	9c02      	ldr	r4, [sp, #8]
   14d90:	7823      	ldrb	r3, [r4, #0]
   14d92:	2b00      	cmp	r3, #0
   14d94:	d15d      	bne.n	14e52 <_vfiprintf_r+0x102>
   14d96:	9b02      	ldr	r3, [sp, #8]
   14d98:	1ae3      	subs	r3, r4, r3
   14d9a:	9304      	str	r3, [sp, #16]
   14d9c:	d00d      	beq.n	14dba <_vfiprintf_r+0x6a>
   14d9e:	9b04      	ldr	r3, [sp, #16]
   14da0:	9a02      	ldr	r2, [sp, #8]
   14da2:	0039      	movs	r1, r7
   14da4:	0030      	movs	r0, r6
   14da6:	f7ff ffc0 	bl	14d2a <__sfputs_r>
   14daa:	1c43      	adds	r3, r0, #1
   14dac:	d100      	bne.n	14db0 <_vfiprintf_r+0x60>
   14dae:	e0cc      	b.n	14f4a <_vfiprintf_r+0x1fa>
   14db0:	696a      	ldr	r2, [r5, #20]
   14db2:	9b04      	ldr	r3, [sp, #16]
   14db4:	4694      	mov	ip, r2
   14db6:	4463      	add	r3, ip
   14db8:	616b      	str	r3, [r5, #20]
   14dba:	7823      	ldrb	r3, [r4, #0]
   14dbc:	2b00      	cmp	r3, #0
   14dbe:	d100      	bne.n	14dc2 <_vfiprintf_r+0x72>
   14dc0:	e0c3      	b.n	14f4a <_vfiprintf_r+0x1fa>
   14dc2:	2201      	movs	r2, #1
   14dc4:	2300      	movs	r3, #0
   14dc6:	4252      	negs	r2, r2
   14dc8:	606a      	str	r2, [r5, #4]
   14dca:	a902      	add	r1, sp, #8
   14dcc:	3254      	adds	r2, #84	; 0x54
   14dce:	1852      	adds	r2, r2, r1
   14dd0:	3401      	adds	r4, #1
   14dd2:	602b      	str	r3, [r5, #0]
   14dd4:	60eb      	str	r3, [r5, #12]
   14dd6:	60ab      	str	r3, [r5, #8]
   14dd8:	7013      	strb	r3, [r2, #0]
   14dda:	65ab      	str	r3, [r5, #88]	; 0x58
   14ddc:	7821      	ldrb	r1, [r4, #0]
   14dde:	2205      	movs	r2, #5
   14de0:	4862      	ldr	r0, [pc, #392]	; (14f6c <_vfiprintf_r+0x21c>)
   14de2:	f000 fe51 	bl	15a88 <memchr>
   14de6:	1c63      	adds	r3, r4, #1
   14de8:	469c      	mov	ip, r3
   14dea:	2800      	cmp	r0, #0
   14dec:	d135      	bne.n	14e5a <_vfiprintf_r+0x10a>
   14dee:	6829      	ldr	r1, [r5, #0]
   14df0:	06cb      	lsls	r3, r1, #27
   14df2:	d504      	bpl.n	14dfe <_vfiprintf_r+0xae>
   14df4:	2353      	movs	r3, #83	; 0x53
   14df6:	aa02      	add	r2, sp, #8
   14df8:	3020      	adds	r0, #32
   14dfa:	189b      	adds	r3, r3, r2
   14dfc:	7018      	strb	r0, [r3, #0]
   14dfe:	070b      	lsls	r3, r1, #28
   14e00:	d504      	bpl.n	14e0c <_vfiprintf_r+0xbc>
   14e02:	2353      	movs	r3, #83	; 0x53
   14e04:	202b      	movs	r0, #43	; 0x2b
   14e06:	aa02      	add	r2, sp, #8
   14e08:	189b      	adds	r3, r3, r2
   14e0a:	7018      	strb	r0, [r3, #0]
   14e0c:	7823      	ldrb	r3, [r4, #0]
   14e0e:	2b2a      	cmp	r3, #42	; 0x2a
   14e10:	d02c      	beq.n	14e6c <_vfiprintf_r+0x11c>
   14e12:	2000      	movs	r0, #0
   14e14:	210a      	movs	r1, #10
   14e16:	9b09      	ldr	r3, [sp, #36]	; 0x24
   14e18:	7822      	ldrb	r2, [r4, #0]
   14e1a:	3a30      	subs	r2, #48	; 0x30
   14e1c:	2a09      	cmp	r2, #9
   14e1e:	d800      	bhi.n	14e22 <_vfiprintf_r+0xd2>
   14e20:	e06b      	b.n	14efa <_vfiprintf_r+0x1aa>
   14e22:	2800      	cmp	r0, #0
   14e24:	d02a      	beq.n	14e7c <_vfiprintf_r+0x12c>
   14e26:	9309      	str	r3, [sp, #36]	; 0x24
   14e28:	e028      	b.n	14e7c <_vfiprintf_r+0x12c>
   14e2a:	4b51      	ldr	r3, [pc, #324]	; (14f70 <_vfiprintf_r+0x220>)
   14e2c:	429f      	cmp	r7, r3
   14e2e:	d101      	bne.n	14e34 <_vfiprintf_r+0xe4>
   14e30:	68b7      	ldr	r7, [r6, #8]
   14e32:	e79e      	b.n	14d72 <_vfiprintf_r+0x22>
   14e34:	4b4f      	ldr	r3, [pc, #316]	; (14f74 <_vfiprintf_r+0x224>)
   14e36:	429f      	cmp	r7, r3
   14e38:	d19b      	bne.n	14d72 <_vfiprintf_r+0x22>
   14e3a:	68f7      	ldr	r7, [r6, #12]
   14e3c:	e799      	b.n	14d72 <_vfiprintf_r+0x22>
   14e3e:	0039      	movs	r1, r7
   14e40:	0030      	movs	r0, r6
   14e42:	f000 fb9f 	bl	15584 <__swsetup_r>
   14e46:	2800      	cmp	r0, #0
   14e48:	d099      	beq.n	14d7e <_vfiprintf_r+0x2e>
   14e4a:	2001      	movs	r0, #1
   14e4c:	4240      	negs	r0, r0
   14e4e:	b01f      	add	sp, #124	; 0x7c
   14e50:	bdf0      	pop	{r4, r5, r6, r7, pc}
   14e52:	2b25      	cmp	r3, #37	; 0x25
   14e54:	d09f      	beq.n	14d96 <_vfiprintf_r+0x46>
   14e56:	3401      	adds	r4, #1
   14e58:	e79a      	b.n	14d90 <_vfiprintf_r+0x40>
   14e5a:	4b44      	ldr	r3, [pc, #272]	; (14f6c <_vfiprintf_r+0x21c>)
   14e5c:	6829      	ldr	r1, [r5, #0]
   14e5e:	1ac0      	subs	r0, r0, r3
   14e60:	2301      	movs	r3, #1
   14e62:	4083      	lsls	r3, r0
   14e64:	430b      	orrs	r3, r1
   14e66:	602b      	str	r3, [r5, #0]
   14e68:	4664      	mov	r4, ip
   14e6a:	e7b7      	b.n	14ddc <_vfiprintf_r+0x8c>
   14e6c:	9b05      	ldr	r3, [sp, #20]
   14e6e:	1d18      	adds	r0, r3, #4
   14e70:	681b      	ldr	r3, [r3, #0]
   14e72:	9005      	str	r0, [sp, #20]
   14e74:	2b00      	cmp	r3, #0
   14e76:	db3a      	blt.n	14eee <_vfiprintf_r+0x19e>
   14e78:	9309      	str	r3, [sp, #36]	; 0x24
   14e7a:	4664      	mov	r4, ip
   14e7c:	7823      	ldrb	r3, [r4, #0]
   14e7e:	2b2e      	cmp	r3, #46	; 0x2e
   14e80:	d10b      	bne.n	14e9a <_vfiprintf_r+0x14a>
   14e82:	7863      	ldrb	r3, [r4, #1]
   14e84:	1c62      	adds	r2, r4, #1
   14e86:	2b2a      	cmp	r3, #42	; 0x2a
   14e88:	d13f      	bne.n	14f0a <_vfiprintf_r+0x1ba>
   14e8a:	9b05      	ldr	r3, [sp, #20]
   14e8c:	3402      	adds	r4, #2
   14e8e:	1d1a      	adds	r2, r3, #4
   14e90:	681b      	ldr	r3, [r3, #0]
   14e92:	9205      	str	r2, [sp, #20]
   14e94:	2b00      	cmp	r3, #0
   14e96:	db35      	blt.n	14f04 <_vfiprintf_r+0x1b4>
   14e98:	9307      	str	r3, [sp, #28]
   14e9a:	7821      	ldrb	r1, [r4, #0]
   14e9c:	2203      	movs	r2, #3
   14e9e:	4836      	ldr	r0, [pc, #216]	; (14f78 <_vfiprintf_r+0x228>)
   14ea0:	f000 fdf2 	bl	15a88 <memchr>
   14ea4:	2800      	cmp	r0, #0
   14ea6:	d007      	beq.n	14eb8 <_vfiprintf_r+0x168>
   14ea8:	4b33      	ldr	r3, [pc, #204]	; (14f78 <_vfiprintf_r+0x228>)
   14eaa:	682a      	ldr	r2, [r5, #0]
   14eac:	1ac0      	subs	r0, r0, r3
   14eae:	2340      	movs	r3, #64	; 0x40
   14eb0:	4083      	lsls	r3, r0
   14eb2:	4313      	orrs	r3, r2
   14eb4:	602b      	str	r3, [r5, #0]
   14eb6:	3401      	adds	r4, #1
   14eb8:	7821      	ldrb	r1, [r4, #0]
   14eba:	1c63      	adds	r3, r4, #1
   14ebc:	2206      	movs	r2, #6
   14ebe:	482f      	ldr	r0, [pc, #188]	; (14f7c <_vfiprintf_r+0x22c>)
   14ec0:	9302      	str	r3, [sp, #8]
   14ec2:	7629      	strb	r1, [r5, #24]
   14ec4:	f000 fde0 	bl	15a88 <memchr>
   14ec8:	2800      	cmp	r0, #0
   14eca:	d044      	beq.n	14f56 <_vfiprintf_r+0x206>
   14ecc:	4b2c      	ldr	r3, [pc, #176]	; (14f80 <_vfiprintf_r+0x230>)
   14ece:	2b00      	cmp	r3, #0
   14ed0:	d12f      	bne.n	14f32 <_vfiprintf_r+0x1e2>
   14ed2:	6829      	ldr	r1, [r5, #0]
   14ed4:	9b05      	ldr	r3, [sp, #20]
   14ed6:	2207      	movs	r2, #7
   14ed8:	05c9      	lsls	r1, r1, #23
   14eda:	d528      	bpl.n	14f2e <_vfiprintf_r+0x1de>
   14edc:	189b      	adds	r3, r3, r2
   14ede:	4393      	bics	r3, r2
   14ee0:	3308      	adds	r3, #8
   14ee2:	9305      	str	r3, [sp, #20]
   14ee4:	696b      	ldr	r3, [r5, #20]
   14ee6:	9a03      	ldr	r2, [sp, #12]
   14ee8:	189b      	adds	r3, r3, r2
   14eea:	616b      	str	r3, [r5, #20]
   14eec:	e74f      	b.n	14d8e <_vfiprintf_r+0x3e>
   14eee:	425b      	negs	r3, r3
   14ef0:	60eb      	str	r3, [r5, #12]
   14ef2:	2302      	movs	r3, #2
   14ef4:	430b      	orrs	r3, r1
   14ef6:	602b      	str	r3, [r5, #0]
   14ef8:	e7bf      	b.n	14e7a <_vfiprintf_r+0x12a>
   14efa:	434b      	muls	r3, r1
   14efc:	3401      	adds	r4, #1
   14efe:	189b      	adds	r3, r3, r2
   14f00:	2001      	movs	r0, #1
   14f02:	e789      	b.n	14e18 <_vfiprintf_r+0xc8>
   14f04:	2301      	movs	r3, #1
   14f06:	425b      	negs	r3, r3
   14f08:	e7c6      	b.n	14e98 <_vfiprintf_r+0x148>
   14f0a:	2300      	movs	r3, #0
   14f0c:	0014      	movs	r4, r2
   14f0e:	200a      	movs	r0, #10
   14f10:	001a      	movs	r2, r3
   14f12:	606b      	str	r3, [r5, #4]
   14f14:	7821      	ldrb	r1, [r4, #0]
   14f16:	3930      	subs	r1, #48	; 0x30
   14f18:	2909      	cmp	r1, #9
   14f1a:	d903      	bls.n	14f24 <_vfiprintf_r+0x1d4>
   14f1c:	2b00      	cmp	r3, #0
   14f1e:	d0bc      	beq.n	14e9a <_vfiprintf_r+0x14a>
   14f20:	9207      	str	r2, [sp, #28]
   14f22:	e7ba      	b.n	14e9a <_vfiprintf_r+0x14a>
   14f24:	4342      	muls	r2, r0
   14f26:	3401      	adds	r4, #1
   14f28:	1852      	adds	r2, r2, r1
   14f2a:	2301      	movs	r3, #1
   14f2c:	e7f2      	b.n	14f14 <_vfiprintf_r+0x1c4>
   14f2e:	3307      	adds	r3, #7
   14f30:	e7d5      	b.n	14ede <_vfiprintf_r+0x18e>
   14f32:	ab05      	add	r3, sp, #20
   14f34:	9300      	str	r3, [sp, #0]
   14f36:	003a      	movs	r2, r7
   14f38:	4b12      	ldr	r3, [pc, #72]	; (14f84 <_vfiprintf_r+0x234>)
   14f3a:	0029      	movs	r1, r5
   14f3c:	0030      	movs	r0, r6
   14f3e:	e000      	b.n	14f42 <_vfiprintf_r+0x1f2>
   14f40:	bf00      	nop
   14f42:	9003      	str	r0, [sp, #12]
   14f44:	9b03      	ldr	r3, [sp, #12]
   14f46:	3301      	adds	r3, #1
   14f48:	d1cc      	bne.n	14ee4 <_vfiprintf_r+0x194>
   14f4a:	89bb      	ldrh	r3, [r7, #12]
   14f4c:	065b      	lsls	r3, r3, #25
   14f4e:	d500      	bpl.n	14f52 <_vfiprintf_r+0x202>
   14f50:	e77b      	b.n	14e4a <_vfiprintf_r+0xfa>
   14f52:	980b      	ldr	r0, [sp, #44]	; 0x2c
   14f54:	e77b      	b.n	14e4e <_vfiprintf_r+0xfe>
   14f56:	ab05      	add	r3, sp, #20
   14f58:	9300      	str	r3, [sp, #0]
   14f5a:	003a      	movs	r2, r7
   14f5c:	4b09      	ldr	r3, [pc, #36]	; (14f84 <_vfiprintf_r+0x234>)
   14f5e:	0029      	movs	r1, r5
   14f60:	0030      	movs	r0, r6
   14f62:	f000 f87f 	bl	15064 <_printf_i>
   14f66:	e7ec      	b.n	14f42 <_vfiprintf_r+0x1f2>
   14f68:	00016860 	.word	0x00016860
   14f6c:	0001680c 	.word	0x0001680c
   14f70:	00016880 	.word	0x00016880
   14f74:	00016840 	.word	0x00016840
   14f78:	00016812 	.word	0x00016812
   14f7c:	00016816 	.word	0x00016816
   14f80:	00000000 	.word	0x00000000
   14f84:	00014d2b 	.word	0x00014d2b

00014f88 <_printf_common>:
   14f88:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   14f8a:	0015      	movs	r5, r2
   14f8c:	9301      	str	r3, [sp, #4]
   14f8e:	688a      	ldr	r2, [r1, #8]
   14f90:	690b      	ldr	r3, [r1, #16]
   14f92:	9000      	str	r0, [sp, #0]
   14f94:	000c      	movs	r4, r1
   14f96:	4293      	cmp	r3, r2
   14f98:	da00      	bge.n	14f9c <_printf_common+0x14>
   14f9a:	0013      	movs	r3, r2
   14f9c:	0022      	movs	r2, r4
   14f9e:	602b      	str	r3, [r5, #0]
   14fa0:	3243      	adds	r2, #67	; 0x43
   14fa2:	7812      	ldrb	r2, [r2, #0]
   14fa4:	2a00      	cmp	r2, #0
   14fa6:	d001      	beq.n	14fac <_printf_common+0x24>
   14fa8:	3301      	adds	r3, #1
   14faa:	602b      	str	r3, [r5, #0]
   14fac:	6823      	ldr	r3, [r4, #0]
   14fae:	069b      	lsls	r3, r3, #26
   14fb0:	d502      	bpl.n	14fb8 <_printf_common+0x30>
   14fb2:	682b      	ldr	r3, [r5, #0]
   14fb4:	3302      	adds	r3, #2
   14fb6:	602b      	str	r3, [r5, #0]
   14fb8:	2706      	movs	r7, #6
   14fba:	6823      	ldr	r3, [r4, #0]
   14fbc:	401f      	ands	r7, r3
   14fbe:	d027      	beq.n	15010 <_printf_common+0x88>
   14fc0:	0023      	movs	r3, r4
   14fc2:	3343      	adds	r3, #67	; 0x43
   14fc4:	781b      	ldrb	r3, [r3, #0]
   14fc6:	1e5a      	subs	r2, r3, #1
   14fc8:	4193      	sbcs	r3, r2
   14fca:	6822      	ldr	r2, [r4, #0]
   14fcc:	0692      	lsls	r2, r2, #26
   14fce:	d430      	bmi.n	15032 <_printf_common+0xaa>
   14fd0:	0022      	movs	r2, r4
   14fd2:	9901      	ldr	r1, [sp, #4]
   14fd4:	3243      	adds	r2, #67	; 0x43
   14fd6:	9800      	ldr	r0, [sp, #0]
   14fd8:	9e08      	ldr	r6, [sp, #32]
   14fda:	47b0      	blx	r6
   14fdc:	1c43      	adds	r3, r0, #1
   14fde:	d025      	beq.n	1502c <_printf_common+0xa4>
   14fe0:	2306      	movs	r3, #6
   14fe2:	6820      	ldr	r0, [r4, #0]
   14fe4:	682a      	ldr	r2, [r5, #0]
   14fe6:	68e1      	ldr	r1, [r4, #12]
   14fe8:	4003      	ands	r3, r0
   14fea:	2500      	movs	r5, #0
   14fec:	2b04      	cmp	r3, #4
   14fee:	d103      	bne.n	14ff8 <_printf_common+0x70>
   14ff0:	1a8d      	subs	r5, r1, r2
   14ff2:	43eb      	mvns	r3, r5
   14ff4:	17db      	asrs	r3, r3, #31
   14ff6:	401d      	ands	r5, r3
   14ff8:	68a3      	ldr	r3, [r4, #8]
   14ffa:	6922      	ldr	r2, [r4, #16]
   14ffc:	4293      	cmp	r3, r2
   14ffe:	dd01      	ble.n	15004 <_printf_common+0x7c>
   15000:	1a9b      	subs	r3, r3, r2
   15002:	18ed      	adds	r5, r5, r3
   15004:	2700      	movs	r7, #0
   15006:	42bd      	cmp	r5, r7
   15008:	d120      	bne.n	1504c <_printf_common+0xc4>
   1500a:	2000      	movs	r0, #0
   1500c:	e010      	b.n	15030 <_printf_common+0xa8>
   1500e:	3701      	adds	r7, #1
   15010:	68e3      	ldr	r3, [r4, #12]
   15012:	682a      	ldr	r2, [r5, #0]
   15014:	1a9b      	subs	r3, r3, r2
   15016:	429f      	cmp	r7, r3
   15018:	dad2      	bge.n	14fc0 <_printf_common+0x38>
   1501a:	0022      	movs	r2, r4
   1501c:	2301      	movs	r3, #1
   1501e:	3219      	adds	r2, #25
   15020:	9901      	ldr	r1, [sp, #4]
   15022:	9800      	ldr	r0, [sp, #0]
   15024:	9e08      	ldr	r6, [sp, #32]
   15026:	47b0      	blx	r6
   15028:	1c43      	adds	r3, r0, #1
   1502a:	d1f0      	bne.n	1500e <_printf_common+0x86>
   1502c:	2001      	movs	r0, #1
   1502e:	4240      	negs	r0, r0
   15030:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
   15032:	2030      	movs	r0, #48	; 0x30
   15034:	18e1      	adds	r1, r4, r3
   15036:	3143      	adds	r1, #67	; 0x43
   15038:	7008      	strb	r0, [r1, #0]
   1503a:	0021      	movs	r1, r4
   1503c:	1c5a      	adds	r2, r3, #1
   1503e:	3145      	adds	r1, #69	; 0x45
   15040:	7809      	ldrb	r1, [r1, #0]
   15042:	18a2      	adds	r2, r4, r2
   15044:	3243      	adds	r2, #67	; 0x43
   15046:	3302      	adds	r3, #2
   15048:	7011      	strb	r1, [r2, #0]
   1504a:	e7c1      	b.n	14fd0 <_printf_common+0x48>
   1504c:	0022      	movs	r2, r4
   1504e:	2301      	movs	r3, #1
   15050:	321a      	adds	r2, #26
   15052:	9901      	ldr	r1, [sp, #4]
   15054:	9800      	ldr	r0, [sp, #0]
   15056:	9e08      	ldr	r6, [sp, #32]
   15058:	47b0      	blx	r6
   1505a:	1c43      	adds	r3, r0, #1
   1505c:	d0e6      	beq.n	1502c <_printf_common+0xa4>
   1505e:	3701      	adds	r7, #1
   15060:	e7d1      	b.n	15006 <_printf_common+0x7e>
   15062:	Address 0x00015062 is out of bounds.


00015064 <_printf_i>:
   15064:	b5f0      	push	{r4, r5, r6, r7, lr}
   15066:	b08b      	sub	sp, #44	; 0x2c
   15068:	9206      	str	r2, [sp, #24]
   1506a:	000a      	movs	r2, r1
   1506c:	3243      	adds	r2, #67	; 0x43
   1506e:	9307      	str	r3, [sp, #28]
   15070:	9005      	str	r0, [sp, #20]
   15072:	9204      	str	r2, [sp, #16]
   15074:	7e0a      	ldrb	r2, [r1, #24]
   15076:	000c      	movs	r4, r1
   15078:	9b10      	ldr	r3, [sp, #64]	; 0x40
   1507a:	2a6e      	cmp	r2, #110	; 0x6e
   1507c:	d100      	bne.n	15080 <_printf_i+0x1c>
   1507e:	e08f      	b.n	151a0 <_printf_i+0x13c>
   15080:	d817      	bhi.n	150b2 <_printf_i+0x4e>
   15082:	2a63      	cmp	r2, #99	; 0x63
   15084:	d02c      	beq.n	150e0 <_printf_i+0x7c>
   15086:	d808      	bhi.n	1509a <_printf_i+0x36>
   15088:	2a00      	cmp	r2, #0
   1508a:	d100      	bne.n	1508e <_printf_i+0x2a>
   1508c:	e099      	b.n	151c2 <_printf_i+0x15e>
   1508e:	2a58      	cmp	r2, #88	; 0x58
   15090:	d054      	beq.n	1513c <_printf_i+0xd8>
   15092:	0026      	movs	r6, r4
   15094:	3642      	adds	r6, #66	; 0x42
   15096:	7032      	strb	r2, [r6, #0]
   15098:	e029      	b.n	150ee <_printf_i+0x8a>
   1509a:	2a64      	cmp	r2, #100	; 0x64
   1509c:	d001      	beq.n	150a2 <_printf_i+0x3e>
   1509e:	2a69      	cmp	r2, #105	; 0x69
   150a0:	d1f7      	bne.n	15092 <_printf_i+0x2e>
   150a2:	6821      	ldr	r1, [r4, #0]
   150a4:	681a      	ldr	r2, [r3, #0]
   150a6:	0608      	lsls	r0, r1, #24
   150a8:	d523      	bpl.n	150f2 <_printf_i+0x8e>
   150aa:	1d11      	adds	r1, r2, #4
   150ac:	6019      	str	r1, [r3, #0]
   150ae:	6815      	ldr	r5, [r2, #0]
   150b0:	e025      	b.n	150fe <_printf_i+0x9a>
   150b2:	2a73      	cmp	r2, #115	; 0x73
   150b4:	d100      	bne.n	150b8 <_printf_i+0x54>
   150b6:	e088      	b.n	151ca <_printf_i+0x166>
   150b8:	d808      	bhi.n	150cc <_printf_i+0x68>
   150ba:	2a6f      	cmp	r2, #111	; 0x6f
   150bc:	d029      	beq.n	15112 <_printf_i+0xae>
   150be:	2a70      	cmp	r2, #112	; 0x70
   150c0:	d1e7      	bne.n	15092 <_printf_i+0x2e>
   150c2:	2220      	movs	r2, #32
   150c4:	6809      	ldr	r1, [r1, #0]
   150c6:	430a      	orrs	r2, r1
   150c8:	6022      	str	r2, [r4, #0]
   150ca:	e003      	b.n	150d4 <_printf_i+0x70>
   150cc:	2a75      	cmp	r2, #117	; 0x75
   150ce:	d020      	beq.n	15112 <_printf_i+0xae>
   150d0:	2a78      	cmp	r2, #120	; 0x78
   150d2:	d1de      	bne.n	15092 <_printf_i+0x2e>
   150d4:	0022      	movs	r2, r4
   150d6:	2178      	movs	r1, #120	; 0x78
   150d8:	3245      	adds	r2, #69	; 0x45
   150da:	7011      	strb	r1, [r2, #0]
   150dc:	4a6c      	ldr	r2, [pc, #432]	; (15290 <_printf_i+0x22c>)
   150de:	e030      	b.n	15142 <_printf_i+0xde>
   150e0:	000e      	movs	r6, r1
   150e2:	681a      	ldr	r2, [r3, #0]
   150e4:	3642      	adds	r6, #66	; 0x42
   150e6:	1d11      	adds	r1, r2, #4
   150e8:	6019      	str	r1, [r3, #0]
   150ea:	6813      	ldr	r3, [r2, #0]
   150ec:	7033      	strb	r3, [r6, #0]
   150ee:	2301      	movs	r3, #1
   150f0:	e079      	b.n	151e6 <_printf_i+0x182>
   150f2:	0649      	lsls	r1, r1, #25
   150f4:	d5d9      	bpl.n	150aa <_printf_i+0x46>
   150f6:	1d11      	adds	r1, r2, #4
   150f8:	6019      	str	r1, [r3, #0]
   150fa:	2300      	movs	r3, #0
   150fc:	5ed5      	ldrsh	r5, [r2, r3]
   150fe:	2d00      	cmp	r5, #0
   15100:	da03      	bge.n	1510a <_printf_i+0xa6>
   15102:	232d      	movs	r3, #45	; 0x2d
   15104:	9a04      	ldr	r2, [sp, #16]
   15106:	426d      	negs	r5, r5
   15108:	7013      	strb	r3, [r2, #0]
   1510a:	4b62      	ldr	r3, [pc, #392]	; (15294 <_printf_i+0x230>)
   1510c:	270a      	movs	r7, #10
   1510e:	9303      	str	r3, [sp, #12]
   15110:	e02f      	b.n	15172 <_printf_i+0x10e>
   15112:	6820      	ldr	r0, [r4, #0]
   15114:	6819      	ldr	r1, [r3, #0]
   15116:	0605      	lsls	r5, r0, #24
   15118:	d503      	bpl.n	15122 <_printf_i+0xbe>
   1511a:	1d08      	adds	r0, r1, #4
   1511c:	6018      	str	r0, [r3, #0]
   1511e:	680d      	ldr	r5, [r1, #0]
   15120:	e005      	b.n	1512e <_printf_i+0xca>
   15122:	0640      	lsls	r0, r0, #25
   15124:	d5f9      	bpl.n	1511a <_printf_i+0xb6>
   15126:	680d      	ldr	r5, [r1, #0]
   15128:	1d08      	adds	r0, r1, #4
   1512a:	6018      	str	r0, [r3, #0]
   1512c:	b2ad      	uxth	r5, r5
   1512e:	4b59      	ldr	r3, [pc, #356]	; (15294 <_printf_i+0x230>)
   15130:	2708      	movs	r7, #8
   15132:	9303      	str	r3, [sp, #12]
   15134:	2a6f      	cmp	r2, #111	; 0x6f
   15136:	d018      	beq.n	1516a <_printf_i+0x106>
   15138:	270a      	movs	r7, #10
   1513a:	e016      	b.n	1516a <_printf_i+0x106>
   1513c:	3145      	adds	r1, #69	; 0x45
   1513e:	700a      	strb	r2, [r1, #0]
   15140:	4a54      	ldr	r2, [pc, #336]	; (15294 <_printf_i+0x230>)
   15142:	9203      	str	r2, [sp, #12]
   15144:	681a      	ldr	r2, [r3, #0]
   15146:	6821      	ldr	r1, [r4, #0]
   15148:	1d10      	adds	r0, r2, #4
   1514a:	6018      	str	r0, [r3, #0]
   1514c:	6815      	ldr	r5, [r2, #0]
   1514e:	0608      	lsls	r0, r1, #24
   15150:	d522      	bpl.n	15198 <_printf_i+0x134>
   15152:	07cb      	lsls	r3, r1, #31
   15154:	d502      	bpl.n	1515c <_printf_i+0xf8>
   15156:	2320      	movs	r3, #32
   15158:	4319      	orrs	r1, r3
   1515a:	6021      	str	r1, [r4, #0]
   1515c:	2710      	movs	r7, #16
   1515e:	2d00      	cmp	r5, #0
   15160:	d103      	bne.n	1516a <_printf_i+0x106>
   15162:	2320      	movs	r3, #32
   15164:	6822      	ldr	r2, [r4, #0]
   15166:	439a      	bics	r2, r3
   15168:	6022      	str	r2, [r4, #0]
   1516a:	0023      	movs	r3, r4
   1516c:	2200      	movs	r2, #0
   1516e:	3343      	adds	r3, #67	; 0x43
   15170:	701a      	strb	r2, [r3, #0]
   15172:	6863      	ldr	r3, [r4, #4]
   15174:	60a3      	str	r3, [r4, #8]
   15176:	2b00      	cmp	r3, #0
   15178:	db5c      	blt.n	15234 <_printf_i+0x1d0>
   1517a:	2204      	movs	r2, #4
   1517c:	6821      	ldr	r1, [r4, #0]
   1517e:	4391      	bics	r1, r2
   15180:	6021      	str	r1, [r4, #0]
   15182:	2d00      	cmp	r5, #0
   15184:	d158      	bne.n	15238 <_printf_i+0x1d4>
   15186:	9e04      	ldr	r6, [sp, #16]
   15188:	2b00      	cmp	r3, #0
   1518a:	d064      	beq.n	15256 <_printf_i+0x1f2>
   1518c:	0026      	movs	r6, r4
   1518e:	9b03      	ldr	r3, [sp, #12]
   15190:	3642      	adds	r6, #66	; 0x42
   15192:	781b      	ldrb	r3, [r3, #0]
   15194:	7033      	strb	r3, [r6, #0]
   15196:	e05e      	b.n	15256 <_printf_i+0x1f2>
   15198:	0648      	lsls	r0, r1, #25
   1519a:	d5da      	bpl.n	15152 <_printf_i+0xee>
   1519c:	b2ad      	uxth	r5, r5
   1519e:	e7d8      	b.n	15152 <_printf_i+0xee>
   151a0:	6809      	ldr	r1, [r1, #0]
   151a2:	681a      	ldr	r2, [r3, #0]
   151a4:	0608      	lsls	r0, r1, #24
   151a6:	d505      	bpl.n	151b4 <_printf_i+0x150>
   151a8:	1d11      	adds	r1, r2, #4
   151aa:	6019      	str	r1, [r3, #0]
   151ac:	6813      	ldr	r3, [r2, #0]
   151ae:	6962      	ldr	r2, [r4, #20]
   151b0:	601a      	str	r2, [r3, #0]
   151b2:	e006      	b.n	151c2 <_printf_i+0x15e>
   151b4:	0649      	lsls	r1, r1, #25
   151b6:	d5f7      	bpl.n	151a8 <_printf_i+0x144>
   151b8:	1d11      	adds	r1, r2, #4
   151ba:	6019      	str	r1, [r3, #0]
   151bc:	6813      	ldr	r3, [r2, #0]
   151be:	8aa2      	ldrh	r2, [r4, #20]
   151c0:	801a      	strh	r2, [r3, #0]
   151c2:	2300      	movs	r3, #0
   151c4:	9e04      	ldr	r6, [sp, #16]
   151c6:	6123      	str	r3, [r4, #16]
   151c8:	e054      	b.n	15274 <_printf_i+0x210>
   151ca:	681a      	ldr	r2, [r3, #0]
   151cc:	1d11      	adds	r1, r2, #4
   151ce:	6019      	str	r1, [r3, #0]
   151d0:	6816      	ldr	r6, [r2, #0]
   151d2:	2100      	movs	r1, #0
   151d4:	6862      	ldr	r2, [r4, #4]
   151d6:	0030      	movs	r0, r6
   151d8:	f000 fc56 	bl	15a88 <memchr>
   151dc:	2800      	cmp	r0, #0
   151de:	d001      	beq.n	151e4 <_printf_i+0x180>
   151e0:	1b80      	subs	r0, r0, r6
   151e2:	6060      	str	r0, [r4, #4]
   151e4:	6863      	ldr	r3, [r4, #4]
   151e6:	6123      	str	r3, [r4, #16]
   151e8:	2300      	movs	r3, #0
   151ea:	9a04      	ldr	r2, [sp, #16]
   151ec:	7013      	strb	r3, [r2, #0]
   151ee:	e041      	b.n	15274 <_printf_i+0x210>
   151f0:	6923      	ldr	r3, [r4, #16]
   151f2:	0032      	movs	r2, r6
   151f4:	9906      	ldr	r1, [sp, #24]
   151f6:	9805      	ldr	r0, [sp, #20]
   151f8:	9d07      	ldr	r5, [sp, #28]
   151fa:	47a8      	blx	r5
   151fc:	1c43      	adds	r3, r0, #1
   151fe:	d043      	beq.n	15288 <_printf_i+0x224>
   15200:	6823      	ldr	r3, [r4, #0]
   15202:	2500      	movs	r5, #0
   15204:	079b      	lsls	r3, r3, #30
   15206:	d40f      	bmi.n	15228 <_printf_i+0x1c4>
   15208:	9b09      	ldr	r3, [sp, #36]	; 0x24
   1520a:	68e0      	ldr	r0, [r4, #12]
   1520c:	4298      	cmp	r0, r3
   1520e:	da3d      	bge.n	1528c <_printf_i+0x228>
   15210:	0018      	movs	r0, r3
   15212:	e03b      	b.n	1528c <_printf_i+0x228>
   15214:	0022      	movs	r2, r4
   15216:	2301      	movs	r3, #1
   15218:	3219      	adds	r2, #25
   1521a:	9906      	ldr	r1, [sp, #24]
   1521c:	9805      	ldr	r0, [sp, #20]
   1521e:	9e07      	ldr	r6, [sp, #28]
   15220:	47b0      	blx	r6
   15222:	1c43      	adds	r3, r0, #1
   15224:	d030      	beq.n	15288 <_printf_i+0x224>
   15226:	3501      	adds	r5, #1
   15228:	68e3      	ldr	r3, [r4, #12]
   1522a:	9a09      	ldr	r2, [sp, #36]	; 0x24
   1522c:	1a9b      	subs	r3, r3, r2
   1522e:	429d      	cmp	r5, r3
   15230:	dbf0      	blt.n	15214 <_printf_i+0x1b0>
   15232:	e7e9      	b.n	15208 <_printf_i+0x1a4>
   15234:	2d00      	cmp	r5, #0
   15236:	d0a9      	beq.n	1518c <_printf_i+0x128>
   15238:	9e04      	ldr	r6, [sp, #16]
   1523a:	0028      	movs	r0, r5
   1523c:	0039      	movs	r1, r7
   1523e:	f7fd f999 	bl	12574 <__aeabi_uidivmod>
   15242:	9b03      	ldr	r3, [sp, #12]
   15244:	3e01      	subs	r6, #1
   15246:	5c5b      	ldrb	r3, [r3, r1]
   15248:	0028      	movs	r0, r5
   1524a:	7033      	strb	r3, [r6, #0]
   1524c:	0039      	movs	r1, r7
   1524e:	f7fd f90b 	bl	12468 <__udivsi3>
   15252:	1e05      	subs	r5, r0, #0
   15254:	d1f1      	bne.n	1523a <_printf_i+0x1d6>
   15256:	2f08      	cmp	r7, #8
   15258:	d109      	bne.n	1526e <_printf_i+0x20a>
   1525a:	6823      	ldr	r3, [r4, #0]
   1525c:	07db      	lsls	r3, r3, #31
   1525e:	d506      	bpl.n	1526e <_printf_i+0x20a>
   15260:	6863      	ldr	r3, [r4, #4]
   15262:	6922      	ldr	r2, [r4, #16]
   15264:	4293      	cmp	r3, r2
   15266:	dc02      	bgt.n	1526e <_printf_i+0x20a>
   15268:	2330      	movs	r3, #48	; 0x30
   1526a:	3e01      	subs	r6, #1
   1526c:	7033      	strb	r3, [r6, #0]
   1526e:	9b04      	ldr	r3, [sp, #16]
   15270:	1b9b      	subs	r3, r3, r6
   15272:	6123      	str	r3, [r4, #16]
   15274:	9b07      	ldr	r3, [sp, #28]
   15276:	aa09      	add	r2, sp, #36	; 0x24
   15278:	9300      	str	r3, [sp, #0]
   1527a:	0021      	movs	r1, r4
   1527c:	9b06      	ldr	r3, [sp, #24]
   1527e:	9805      	ldr	r0, [sp, #20]
   15280:	f7ff fe82 	bl	14f88 <_printf_common>
   15284:	1c43      	adds	r3, r0, #1
   15286:	d1b3      	bne.n	151f0 <_printf_i+0x18c>
   15288:	2001      	movs	r0, #1
   1528a:	4240      	negs	r0, r0
   1528c:	b00b      	add	sp, #44	; 0x2c
   1528e:	bdf0      	pop	{r4, r5, r6, r7, pc}
   15290:	0001682e 	.word	0x0001682e
   15294:	0001681d 	.word	0x0001681d

00015298 <srand>:
   15298:	4b10      	ldr	r3, [pc, #64]	; (152dc <srand+0x44>)
   1529a:	b570      	push	{r4, r5, r6, lr}
   1529c:	681c      	ldr	r4, [r3, #0]
   1529e:	0005      	movs	r5, r0
   152a0:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   152a2:	2b00      	cmp	r3, #0
   152a4:	d115      	bne.n	152d2 <srand+0x3a>
   152a6:	2018      	movs	r0, #24
   152a8:	f000 fbe4 	bl	15a74 <malloc>
   152ac:	4b0c      	ldr	r3, [pc, #48]	; (152e0 <srand+0x48>)
   152ae:	63a0      	str	r0, [r4, #56]	; 0x38
   152b0:	8003      	strh	r3, [r0, #0]
   152b2:	4b0c      	ldr	r3, [pc, #48]	; (152e4 <srand+0x4c>)
   152b4:	2201      	movs	r2, #1
   152b6:	8043      	strh	r3, [r0, #2]
   152b8:	4b0b      	ldr	r3, [pc, #44]	; (152e8 <srand+0x50>)
   152ba:	8083      	strh	r3, [r0, #4]
   152bc:	4b0b      	ldr	r3, [pc, #44]	; (152ec <srand+0x54>)
   152be:	80c3      	strh	r3, [r0, #6]
   152c0:	4b0b      	ldr	r3, [pc, #44]	; (152f0 <srand+0x58>)
   152c2:	8103      	strh	r3, [r0, #8]
   152c4:	2305      	movs	r3, #5
   152c6:	8143      	strh	r3, [r0, #10]
   152c8:	3306      	adds	r3, #6
   152ca:	8183      	strh	r3, [r0, #12]
   152cc:	2300      	movs	r3, #0
   152ce:	6102      	str	r2, [r0, #16]
   152d0:	6143      	str	r3, [r0, #20]
   152d2:	2200      	movs	r2, #0
   152d4:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   152d6:	611d      	str	r5, [r3, #16]
   152d8:	615a      	str	r2, [r3, #20]
   152da:	bd70      	pop	{r4, r5, r6, pc}
   152dc:	200000a0 	.word	0x200000a0
   152e0:	0000330e 	.word	0x0000330e
   152e4:	ffffabcd 	.word	0xffffabcd
   152e8:	00001234 	.word	0x00001234
   152ec:	ffffe66d 	.word	0xffffe66d
   152f0:	ffffdeec 	.word	0xffffdeec

000152f4 <rand>:
   152f4:	4b15      	ldr	r3, [pc, #84]	; (1534c <rand+0x58>)
   152f6:	b510      	push	{r4, lr}
   152f8:	681c      	ldr	r4, [r3, #0]
   152fa:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   152fc:	2b00      	cmp	r3, #0
   152fe:	d115      	bne.n	1532c <rand+0x38>
   15300:	2018      	movs	r0, #24
   15302:	f000 fbb7 	bl	15a74 <malloc>
   15306:	4b12      	ldr	r3, [pc, #72]	; (15350 <rand+0x5c>)
   15308:	63a0      	str	r0, [r4, #56]	; 0x38
   1530a:	8003      	strh	r3, [r0, #0]
   1530c:	4b11      	ldr	r3, [pc, #68]	; (15354 <rand+0x60>)
   1530e:	2201      	movs	r2, #1
   15310:	8043      	strh	r3, [r0, #2]
   15312:	4b11      	ldr	r3, [pc, #68]	; (15358 <rand+0x64>)
   15314:	8083      	strh	r3, [r0, #4]
   15316:	4b11      	ldr	r3, [pc, #68]	; (1535c <rand+0x68>)
   15318:	80c3      	strh	r3, [r0, #6]
   1531a:	4b11      	ldr	r3, [pc, #68]	; (15360 <rand+0x6c>)
   1531c:	8103      	strh	r3, [r0, #8]
   1531e:	2305      	movs	r3, #5
   15320:	8143      	strh	r3, [r0, #10]
   15322:	3306      	adds	r3, #6
   15324:	8183      	strh	r3, [r0, #12]
   15326:	2300      	movs	r3, #0
   15328:	6102      	str	r2, [r0, #16]
   1532a:	6143      	str	r3, [r0, #20]
   1532c:	6ba4      	ldr	r4, [r4, #56]	; 0x38
   1532e:	4a0d      	ldr	r2, [pc, #52]	; (15364 <rand+0x70>)
   15330:	6920      	ldr	r0, [r4, #16]
   15332:	6961      	ldr	r1, [r4, #20]
   15334:	4b0c      	ldr	r3, [pc, #48]	; (15368 <rand+0x74>)
   15336:	f7fd fa47 	bl	127c8 <__aeabi_lmul>
   1533a:	2201      	movs	r2, #1
   1533c:	2300      	movs	r3, #0
   1533e:	1880      	adds	r0, r0, r2
   15340:	4159      	adcs	r1, r3
   15342:	6120      	str	r0, [r4, #16]
   15344:	6161      	str	r1, [r4, #20]
   15346:	0048      	lsls	r0, r1, #1
   15348:	0840      	lsrs	r0, r0, #1
   1534a:	bd10      	pop	{r4, pc}
   1534c:	200000a0 	.word	0x200000a0
   15350:	0000330e 	.word	0x0000330e
   15354:	ffffabcd 	.word	0xffffabcd
   15358:	00001234 	.word	0x00001234
   1535c:	ffffe66d 	.word	0xffffe66d
   15360:	ffffdeec 	.word	0xffffdeec
   15364:	4c957f2d 	.word	0x4c957f2d
   15368:	5851f42d 	.word	0x5851f42d

0001536c <setbuf>:
   1536c:	424a      	negs	r2, r1
   1536e:	414a      	adcs	r2, r1
   15370:	2380      	movs	r3, #128	; 0x80
   15372:	b510      	push	{r4, lr}
   15374:	0052      	lsls	r2, r2, #1
   15376:	00db      	lsls	r3, r3, #3
   15378:	f000 f802 	bl	15380 <setvbuf>
   1537c:	bd10      	pop	{r4, pc}
   1537e:	Address 0x0001537e is out of bounds.


00015380 <setvbuf>:
   15380:	b5f0      	push	{r4, r5, r6, r7, lr}
   15382:	001d      	movs	r5, r3
   15384:	4b4f      	ldr	r3, [pc, #316]	; (154c4 <setvbuf+0x144>)
   15386:	b085      	sub	sp, #20
   15388:	681e      	ldr	r6, [r3, #0]
   1538a:	0004      	movs	r4, r0
   1538c:	000f      	movs	r7, r1
   1538e:	9200      	str	r2, [sp, #0]
   15390:	2e00      	cmp	r6, #0
   15392:	d005      	beq.n	153a0 <setvbuf+0x20>
   15394:	69b3      	ldr	r3, [r6, #24]
   15396:	2b00      	cmp	r3, #0
   15398:	d102      	bne.n	153a0 <setvbuf+0x20>
   1539a:	0030      	movs	r0, r6
   1539c:	f000 fa68 	bl	15870 <__sinit>
   153a0:	4b49      	ldr	r3, [pc, #292]	; (154c8 <setvbuf+0x148>)
   153a2:	429c      	cmp	r4, r3
   153a4:	d150      	bne.n	15448 <setvbuf+0xc8>
   153a6:	6874      	ldr	r4, [r6, #4]
   153a8:	9b00      	ldr	r3, [sp, #0]
   153aa:	2b02      	cmp	r3, #2
   153ac:	d005      	beq.n	153ba <setvbuf+0x3a>
   153ae:	2b01      	cmp	r3, #1
   153b0:	d900      	bls.n	153b4 <setvbuf+0x34>
   153b2:	e084      	b.n	154be <setvbuf+0x13e>
   153b4:	2d00      	cmp	r5, #0
   153b6:	da00      	bge.n	153ba <setvbuf+0x3a>
   153b8:	e081      	b.n	154be <setvbuf+0x13e>
   153ba:	0021      	movs	r1, r4
   153bc:	0030      	movs	r0, r6
   153be:	f000 f9e9 	bl	15794 <_fflush_r>
   153c2:	6b61      	ldr	r1, [r4, #52]	; 0x34
   153c4:	2900      	cmp	r1, #0
   153c6:	d008      	beq.n	153da <setvbuf+0x5a>
   153c8:	0023      	movs	r3, r4
   153ca:	3344      	adds	r3, #68	; 0x44
   153cc:	4299      	cmp	r1, r3
   153ce:	d002      	beq.n	153d6 <setvbuf+0x56>
   153d0:	0030      	movs	r0, r6
   153d2:	f000 fb65 	bl	15aa0 <_free_r>
   153d6:	2300      	movs	r3, #0
   153d8:	6363      	str	r3, [r4, #52]	; 0x34
   153da:	2300      	movs	r3, #0
   153dc:	61a3      	str	r3, [r4, #24]
   153de:	6063      	str	r3, [r4, #4]
   153e0:	89a3      	ldrh	r3, [r4, #12]
   153e2:	061b      	lsls	r3, r3, #24
   153e4:	d503      	bpl.n	153ee <setvbuf+0x6e>
   153e6:	6921      	ldr	r1, [r4, #16]
   153e8:	0030      	movs	r0, r6
   153ea:	f000 fb59 	bl	15aa0 <_free_r>
   153ee:	89a3      	ldrh	r3, [r4, #12]
   153f0:	4a36      	ldr	r2, [pc, #216]	; (154cc <setvbuf+0x14c>)
   153f2:	4013      	ands	r3, r2
   153f4:	81a3      	strh	r3, [r4, #12]
   153f6:	9b00      	ldr	r3, [sp, #0]
   153f8:	2b02      	cmp	r3, #2
   153fa:	d05a      	beq.n	154b2 <setvbuf+0x132>
   153fc:	ab03      	add	r3, sp, #12
   153fe:	aa02      	add	r2, sp, #8
   15400:	0021      	movs	r1, r4
   15402:	0030      	movs	r0, r6
   15404:	f000 faca 	bl	1599c <__swhatbuf_r>
   15408:	89a3      	ldrh	r3, [r4, #12]
   1540a:	4318      	orrs	r0, r3
   1540c:	81a0      	strh	r0, [r4, #12]
   1540e:	2d00      	cmp	r5, #0
   15410:	d124      	bne.n	1545c <setvbuf+0xdc>
   15412:	9d02      	ldr	r5, [sp, #8]
   15414:	0028      	movs	r0, r5
   15416:	f000 fb2d 	bl	15a74 <malloc>
   1541a:	9501      	str	r5, [sp, #4]
   1541c:	1e07      	subs	r7, r0, #0
   1541e:	d142      	bne.n	154a6 <setvbuf+0x126>
   15420:	9b02      	ldr	r3, [sp, #8]
   15422:	9301      	str	r3, [sp, #4]
   15424:	42ab      	cmp	r3, r5
   15426:	d139      	bne.n	1549c <setvbuf+0x11c>
   15428:	2001      	movs	r0, #1
   1542a:	4240      	negs	r0, r0
   1542c:	2302      	movs	r3, #2
   1542e:	89a2      	ldrh	r2, [r4, #12]
   15430:	4313      	orrs	r3, r2
   15432:	81a3      	strh	r3, [r4, #12]
   15434:	2300      	movs	r3, #0
   15436:	60a3      	str	r3, [r4, #8]
   15438:	0023      	movs	r3, r4
   1543a:	3347      	adds	r3, #71	; 0x47
   1543c:	6023      	str	r3, [r4, #0]
   1543e:	6123      	str	r3, [r4, #16]
   15440:	2301      	movs	r3, #1
   15442:	6163      	str	r3, [r4, #20]
   15444:	b005      	add	sp, #20
   15446:	bdf0      	pop	{r4, r5, r6, r7, pc}
   15448:	4b21      	ldr	r3, [pc, #132]	; (154d0 <setvbuf+0x150>)
   1544a:	429c      	cmp	r4, r3
   1544c:	d101      	bne.n	15452 <setvbuf+0xd2>
   1544e:	68b4      	ldr	r4, [r6, #8]
   15450:	e7aa      	b.n	153a8 <setvbuf+0x28>
   15452:	4b20      	ldr	r3, [pc, #128]	; (154d4 <setvbuf+0x154>)
   15454:	429c      	cmp	r4, r3
   15456:	d1a7      	bne.n	153a8 <setvbuf+0x28>
   15458:	68f4      	ldr	r4, [r6, #12]
   1545a:	e7a5      	b.n	153a8 <setvbuf+0x28>
   1545c:	2f00      	cmp	r7, #0
   1545e:	d0d9      	beq.n	15414 <setvbuf+0x94>
   15460:	69b3      	ldr	r3, [r6, #24]
   15462:	2b00      	cmp	r3, #0
   15464:	d102      	bne.n	1546c <setvbuf+0xec>
   15466:	0030      	movs	r0, r6
   15468:	f000 fa02 	bl	15870 <__sinit>
   1546c:	9b00      	ldr	r3, [sp, #0]
   1546e:	2b01      	cmp	r3, #1
   15470:	d103      	bne.n	1547a <setvbuf+0xfa>
   15472:	89a3      	ldrh	r3, [r4, #12]
   15474:	9a00      	ldr	r2, [sp, #0]
   15476:	431a      	orrs	r2, r3
   15478:	81a2      	strh	r2, [r4, #12]
   1547a:	2008      	movs	r0, #8
   1547c:	89a3      	ldrh	r3, [r4, #12]
   1547e:	6027      	str	r7, [r4, #0]
   15480:	6127      	str	r7, [r4, #16]
   15482:	6165      	str	r5, [r4, #20]
   15484:	4018      	ands	r0, r3
   15486:	d018      	beq.n	154ba <setvbuf+0x13a>
   15488:	2001      	movs	r0, #1
   1548a:	4018      	ands	r0, r3
   1548c:	2300      	movs	r3, #0
   1548e:	4298      	cmp	r0, r3
   15490:	d011      	beq.n	154b6 <setvbuf+0x136>
   15492:	426d      	negs	r5, r5
   15494:	60a3      	str	r3, [r4, #8]
   15496:	61a5      	str	r5, [r4, #24]
   15498:	0018      	movs	r0, r3
   1549a:	e7d3      	b.n	15444 <setvbuf+0xc4>
   1549c:	9801      	ldr	r0, [sp, #4]
   1549e:	f000 fae9 	bl	15a74 <malloc>
   154a2:	1e07      	subs	r7, r0, #0
   154a4:	d0c0      	beq.n	15428 <setvbuf+0xa8>
   154a6:	2380      	movs	r3, #128	; 0x80
   154a8:	89a2      	ldrh	r2, [r4, #12]
   154aa:	9d01      	ldr	r5, [sp, #4]
   154ac:	4313      	orrs	r3, r2
   154ae:	81a3      	strh	r3, [r4, #12]
   154b0:	e7d6      	b.n	15460 <setvbuf+0xe0>
   154b2:	2000      	movs	r0, #0
   154b4:	e7ba      	b.n	1542c <setvbuf+0xac>
   154b6:	60a5      	str	r5, [r4, #8]
   154b8:	e7c4      	b.n	15444 <setvbuf+0xc4>
   154ba:	60a0      	str	r0, [r4, #8]
   154bc:	e7c2      	b.n	15444 <setvbuf+0xc4>
   154be:	2001      	movs	r0, #1
   154c0:	4240      	negs	r0, r0
   154c2:	e7bf      	b.n	15444 <setvbuf+0xc4>
   154c4:	200000a0 	.word	0x200000a0
   154c8:	00016860 	.word	0x00016860
   154cc:	fffff35c 	.word	0xfffff35c
   154d0:	00016880 	.word	0x00016880
   154d4:	00016840 	.word	0x00016840

000154d8 <__swbuf_r>:
   154d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   154da:	0005      	movs	r5, r0
   154dc:	000e      	movs	r6, r1
   154de:	0014      	movs	r4, r2
   154e0:	2800      	cmp	r0, #0
   154e2:	d004      	beq.n	154ee <__swbuf_r+0x16>
   154e4:	6983      	ldr	r3, [r0, #24]
   154e6:	2b00      	cmp	r3, #0
   154e8:	d101      	bne.n	154ee <__swbuf_r+0x16>
   154ea:	f000 f9c1 	bl	15870 <__sinit>
   154ee:	4b22      	ldr	r3, [pc, #136]	; (15578 <__swbuf_r+0xa0>)
   154f0:	429c      	cmp	r4, r3
   154f2:	d12d      	bne.n	15550 <__swbuf_r+0x78>
   154f4:	686c      	ldr	r4, [r5, #4]
   154f6:	69a3      	ldr	r3, [r4, #24]
   154f8:	60a3      	str	r3, [r4, #8]
   154fa:	89a3      	ldrh	r3, [r4, #12]
   154fc:	071b      	lsls	r3, r3, #28
   154fe:	d531      	bpl.n	15564 <__swbuf_r+0x8c>
   15500:	6923      	ldr	r3, [r4, #16]
   15502:	2b00      	cmp	r3, #0
   15504:	d02e      	beq.n	15564 <__swbuf_r+0x8c>
   15506:	6823      	ldr	r3, [r4, #0]
   15508:	6922      	ldr	r2, [r4, #16]
   1550a:	b2f7      	uxtb	r7, r6
   1550c:	1a98      	subs	r0, r3, r2
   1550e:	6963      	ldr	r3, [r4, #20]
   15510:	b2f6      	uxtb	r6, r6
   15512:	4298      	cmp	r0, r3
   15514:	db05      	blt.n	15522 <__swbuf_r+0x4a>
   15516:	0021      	movs	r1, r4
   15518:	0028      	movs	r0, r5
   1551a:	f000 f93b 	bl	15794 <_fflush_r>
   1551e:	2800      	cmp	r0, #0
   15520:	d126      	bne.n	15570 <__swbuf_r+0x98>
   15522:	68a3      	ldr	r3, [r4, #8]
   15524:	3001      	adds	r0, #1
   15526:	3b01      	subs	r3, #1
   15528:	60a3      	str	r3, [r4, #8]
   1552a:	6823      	ldr	r3, [r4, #0]
   1552c:	1c5a      	adds	r2, r3, #1
   1552e:	6022      	str	r2, [r4, #0]
   15530:	701f      	strb	r7, [r3, #0]
   15532:	6963      	ldr	r3, [r4, #20]
   15534:	4298      	cmp	r0, r3
   15536:	d004      	beq.n	15542 <__swbuf_r+0x6a>
   15538:	89a3      	ldrh	r3, [r4, #12]
   1553a:	07db      	lsls	r3, r3, #31
   1553c:	d51a      	bpl.n	15574 <__swbuf_r+0x9c>
   1553e:	2e0a      	cmp	r6, #10
   15540:	d118      	bne.n	15574 <__swbuf_r+0x9c>
   15542:	0021      	movs	r1, r4
   15544:	0028      	movs	r0, r5
   15546:	f000 f925 	bl	15794 <_fflush_r>
   1554a:	2800      	cmp	r0, #0
   1554c:	d012      	beq.n	15574 <__swbuf_r+0x9c>
   1554e:	e00f      	b.n	15570 <__swbuf_r+0x98>
   15550:	4b0a      	ldr	r3, [pc, #40]	; (1557c <__swbuf_r+0xa4>)
   15552:	429c      	cmp	r4, r3
   15554:	d101      	bne.n	1555a <__swbuf_r+0x82>
   15556:	68ac      	ldr	r4, [r5, #8]
   15558:	e7cd      	b.n	154f6 <__swbuf_r+0x1e>
   1555a:	4b09      	ldr	r3, [pc, #36]	; (15580 <__swbuf_r+0xa8>)
   1555c:	429c      	cmp	r4, r3
   1555e:	d1ca      	bne.n	154f6 <__swbuf_r+0x1e>
   15560:	68ec      	ldr	r4, [r5, #12]
   15562:	e7c8      	b.n	154f6 <__swbuf_r+0x1e>
   15564:	0021      	movs	r1, r4
   15566:	0028      	movs	r0, r5
   15568:	f000 f80c 	bl	15584 <__swsetup_r>
   1556c:	2800      	cmp	r0, #0
   1556e:	d0ca      	beq.n	15506 <__swbuf_r+0x2e>
   15570:	2601      	movs	r6, #1
   15572:	4276      	negs	r6, r6
   15574:	0030      	movs	r0, r6
   15576:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   15578:	00016860 	.word	0x00016860
   1557c:	00016880 	.word	0x00016880
   15580:	00016840 	.word	0x00016840

00015584 <__swsetup_r>:
   15584:	4b36      	ldr	r3, [pc, #216]	; (15660 <__swsetup_r+0xdc>)
   15586:	b570      	push	{r4, r5, r6, lr}
   15588:	681d      	ldr	r5, [r3, #0]
   1558a:	0006      	movs	r6, r0
   1558c:	000c      	movs	r4, r1
   1558e:	2d00      	cmp	r5, #0
   15590:	d005      	beq.n	1559e <__swsetup_r+0x1a>
   15592:	69ab      	ldr	r3, [r5, #24]
   15594:	2b00      	cmp	r3, #0
   15596:	d102      	bne.n	1559e <__swsetup_r+0x1a>
   15598:	0028      	movs	r0, r5
   1559a:	f000 f969 	bl	15870 <__sinit>
   1559e:	4b31      	ldr	r3, [pc, #196]	; (15664 <__swsetup_r+0xe0>)
   155a0:	429c      	cmp	r4, r3
   155a2:	d10f      	bne.n	155c4 <__swsetup_r+0x40>
   155a4:	686c      	ldr	r4, [r5, #4]
   155a6:	230c      	movs	r3, #12
   155a8:	5ee2      	ldrsh	r2, [r4, r3]
   155aa:	b293      	uxth	r3, r2
   155ac:	0719      	lsls	r1, r3, #28
   155ae:	d42d      	bmi.n	1560c <__swsetup_r+0x88>
   155b0:	06d9      	lsls	r1, r3, #27
   155b2:	d411      	bmi.n	155d8 <__swsetup_r+0x54>
   155b4:	2309      	movs	r3, #9
   155b6:	2001      	movs	r0, #1
   155b8:	6033      	str	r3, [r6, #0]
   155ba:	3337      	adds	r3, #55	; 0x37
   155bc:	4313      	orrs	r3, r2
   155be:	81a3      	strh	r3, [r4, #12]
   155c0:	4240      	negs	r0, r0
   155c2:	bd70      	pop	{r4, r5, r6, pc}
   155c4:	4b28      	ldr	r3, [pc, #160]	; (15668 <__swsetup_r+0xe4>)
   155c6:	429c      	cmp	r4, r3
   155c8:	d101      	bne.n	155ce <__swsetup_r+0x4a>
   155ca:	68ac      	ldr	r4, [r5, #8]
   155cc:	e7eb      	b.n	155a6 <__swsetup_r+0x22>
   155ce:	4b27      	ldr	r3, [pc, #156]	; (1566c <__swsetup_r+0xe8>)
   155d0:	429c      	cmp	r4, r3
   155d2:	d1e8      	bne.n	155a6 <__swsetup_r+0x22>
   155d4:	68ec      	ldr	r4, [r5, #12]
   155d6:	e7e6      	b.n	155a6 <__swsetup_r+0x22>
   155d8:	075b      	lsls	r3, r3, #29
   155da:	d513      	bpl.n	15604 <__swsetup_r+0x80>
   155dc:	6b61      	ldr	r1, [r4, #52]	; 0x34
   155de:	2900      	cmp	r1, #0
   155e0:	d008      	beq.n	155f4 <__swsetup_r+0x70>
   155e2:	0023      	movs	r3, r4
   155e4:	3344      	adds	r3, #68	; 0x44
   155e6:	4299      	cmp	r1, r3
   155e8:	d002      	beq.n	155f0 <__swsetup_r+0x6c>
   155ea:	0030      	movs	r0, r6
   155ec:	f000 fa58 	bl	15aa0 <_free_r>
   155f0:	2300      	movs	r3, #0
   155f2:	6363      	str	r3, [r4, #52]	; 0x34
   155f4:	2224      	movs	r2, #36	; 0x24
   155f6:	89a3      	ldrh	r3, [r4, #12]
   155f8:	4393      	bics	r3, r2
   155fa:	81a3      	strh	r3, [r4, #12]
   155fc:	2300      	movs	r3, #0
   155fe:	6063      	str	r3, [r4, #4]
   15600:	6923      	ldr	r3, [r4, #16]
   15602:	6023      	str	r3, [r4, #0]
   15604:	2308      	movs	r3, #8
   15606:	89a2      	ldrh	r2, [r4, #12]
   15608:	4313      	orrs	r3, r2
   1560a:	81a3      	strh	r3, [r4, #12]
   1560c:	6923      	ldr	r3, [r4, #16]
   1560e:	2b00      	cmp	r3, #0
   15610:	d10b      	bne.n	1562a <__swsetup_r+0xa6>
   15612:	21a0      	movs	r1, #160	; 0xa0
   15614:	2280      	movs	r2, #128	; 0x80
   15616:	89a3      	ldrh	r3, [r4, #12]
   15618:	0089      	lsls	r1, r1, #2
   1561a:	0092      	lsls	r2, r2, #2
   1561c:	400b      	ands	r3, r1
   1561e:	4293      	cmp	r3, r2
   15620:	d003      	beq.n	1562a <__swsetup_r+0xa6>
   15622:	0021      	movs	r1, r4
   15624:	0030      	movs	r0, r6
   15626:	f000 f9e1 	bl	159ec <__smakebuf_r>
   1562a:	2301      	movs	r3, #1
   1562c:	89a2      	ldrh	r2, [r4, #12]
   1562e:	4013      	ands	r3, r2
   15630:	d011      	beq.n	15656 <__swsetup_r+0xd2>
   15632:	2300      	movs	r3, #0
   15634:	60a3      	str	r3, [r4, #8]
   15636:	6963      	ldr	r3, [r4, #20]
   15638:	425b      	negs	r3, r3
   1563a:	61a3      	str	r3, [r4, #24]
   1563c:	2000      	movs	r0, #0
   1563e:	6923      	ldr	r3, [r4, #16]
   15640:	4283      	cmp	r3, r0
   15642:	d1be      	bne.n	155c2 <__swsetup_r+0x3e>
   15644:	230c      	movs	r3, #12
   15646:	5ee2      	ldrsh	r2, [r4, r3]
   15648:	0613      	lsls	r3, r2, #24
   1564a:	d5ba      	bpl.n	155c2 <__swsetup_r+0x3e>
   1564c:	2340      	movs	r3, #64	; 0x40
   1564e:	4313      	orrs	r3, r2
   15650:	81a3      	strh	r3, [r4, #12]
   15652:	3801      	subs	r0, #1
   15654:	e7b5      	b.n	155c2 <__swsetup_r+0x3e>
   15656:	0792      	lsls	r2, r2, #30
   15658:	d400      	bmi.n	1565c <__swsetup_r+0xd8>
   1565a:	6963      	ldr	r3, [r4, #20]
   1565c:	60a3      	str	r3, [r4, #8]
   1565e:	e7ed      	b.n	1563c <__swsetup_r+0xb8>
   15660:	200000a0 	.word	0x200000a0
   15664:	00016860 	.word	0x00016860
   15668:	00016880 	.word	0x00016880
   1566c:	00016840 	.word	0x00016840

00015670 <abort>:
   15670:	b510      	push	{r4, lr}
   15672:	2006      	movs	r0, #6
   15674:	f000 faf8 	bl	15c68 <raise>
   15678:	2001      	movs	r0, #1
   1567a:	f7f3 fb0d 	bl	8c98 <_exit>
   1567e:	Address 0x0001567e is out of bounds.


00015680 <__sflush_r>:
   15680:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   15682:	898a      	ldrh	r2, [r1, #12]
   15684:	0005      	movs	r5, r0
   15686:	000c      	movs	r4, r1
   15688:	0713      	lsls	r3, r2, #28
   1568a:	d460      	bmi.n	1574e <__sflush_r+0xce>
   1568c:	684b      	ldr	r3, [r1, #4]
   1568e:	2b00      	cmp	r3, #0
   15690:	dc04      	bgt.n	1569c <__sflush_r+0x1c>
   15692:	6c0b      	ldr	r3, [r1, #64]	; 0x40
   15694:	2b00      	cmp	r3, #0
   15696:	dc01      	bgt.n	1569c <__sflush_r+0x1c>
   15698:	2000      	movs	r0, #0
   1569a:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
   1569c:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
   1569e:	2f00      	cmp	r7, #0
   156a0:	d0fa      	beq.n	15698 <__sflush_r+0x18>
   156a2:	2300      	movs	r3, #0
   156a4:	682e      	ldr	r6, [r5, #0]
   156a6:	602b      	str	r3, [r5, #0]
   156a8:	2380      	movs	r3, #128	; 0x80
   156aa:	015b      	lsls	r3, r3, #5
   156ac:	401a      	ands	r2, r3
   156ae:	d034      	beq.n	1571a <__sflush_r+0x9a>
   156b0:	6d60      	ldr	r0, [r4, #84]	; 0x54
   156b2:	89a3      	ldrh	r3, [r4, #12]
   156b4:	075b      	lsls	r3, r3, #29
   156b6:	d506      	bpl.n	156c6 <__sflush_r+0x46>
   156b8:	6863      	ldr	r3, [r4, #4]
   156ba:	1ac0      	subs	r0, r0, r3
   156bc:	6b63      	ldr	r3, [r4, #52]	; 0x34
   156be:	2b00      	cmp	r3, #0
   156c0:	d001      	beq.n	156c6 <__sflush_r+0x46>
   156c2:	6c23      	ldr	r3, [r4, #64]	; 0x40
   156c4:	1ac0      	subs	r0, r0, r3
   156c6:	0002      	movs	r2, r0
   156c8:	6a21      	ldr	r1, [r4, #32]
   156ca:	2300      	movs	r3, #0
   156cc:	0028      	movs	r0, r5
   156ce:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
   156d0:	47b8      	blx	r7
   156d2:	89a1      	ldrh	r1, [r4, #12]
   156d4:	1c43      	adds	r3, r0, #1
   156d6:	d106      	bne.n	156e6 <__sflush_r+0x66>
   156d8:	682b      	ldr	r3, [r5, #0]
   156da:	2b1d      	cmp	r3, #29
   156dc:	d831      	bhi.n	15742 <__sflush_r+0xc2>
   156de:	4a2c      	ldr	r2, [pc, #176]	; (15790 <__sflush_r+0x110>)
   156e0:	40da      	lsrs	r2, r3
   156e2:	07d3      	lsls	r3, r2, #31
   156e4:	d52d      	bpl.n	15742 <__sflush_r+0xc2>
   156e6:	2300      	movs	r3, #0
   156e8:	6063      	str	r3, [r4, #4]
   156ea:	6923      	ldr	r3, [r4, #16]
   156ec:	6023      	str	r3, [r4, #0]
   156ee:	04cb      	lsls	r3, r1, #19
   156f0:	d505      	bpl.n	156fe <__sflush_r+0x7e>
   156f2:	1c43      	adds	r3, r0, #1
   156f4:	d102      	bne.n	156fc <__sflush_r+0x7c>
   156f6:	682b      	ldr	r3, [r5, #0]
   156f8:	2b00      	cmp	r3, #0
   156fa:	d100      	bne.n	156fe <__sflush_r+0x7e>
   156fc:	6560      	str	r0, [r4, #84]	; 0x54
   156fe:	6b61      	ldr	r1, [r4, #52]	; 0x34
   15700:	602e      	str	r6, [r5, #0]
   15702:	2900      	cmp	r1, #0
   15704:	d0c8      	beq.n	15698 <__sflush_r+0x18>
   15706:	0023      	movs	r3, r4
   15708:	3344      	adds	r3, #68	; 0x44
   1570a:	4299      	cmp	r1, r3
   1570c:	d002      	beq.n	15714 <__sflush_r+0x94>
   1570e:	0028      	movs	r0, r5
   15710:	f000 f9c6 	bl	15aa0 <_free_r>
   15714:	2000      	movs	r0, #0
   15716:	6360      	str	r0, [r4, #52]	; 0x34
   15718:	e7bf      	b.n	1569a <__sflush_r+0x1a>
   1571a:	2301      	movs	r3, #1
   1571c:	6a21      	ldr	r1, [r4, #32]
   1571e:	0028      	movs	r0, r5
   15720:	47b8      	blx	r7
   15722:	1c43      	adds	r3, r0, #1
   15724:	d1c5      	bne.n	156b2 <__sflush_r+0x32>
   15726:	682b      	ldr	r3, [r5, #0]
   15728:	2b00      	cmp	r3, #0
   1572a:	d0c2      	beq.n	156b2 <__sflush_r+0x32>
   1572c:	2b1d      	cmp	r3, #29
   1572e:	d001      	beq.n	15734 <__sflush_r+0xb4>
   15730:	2b16      	cmp	r3, #22
   15732:	d101      	bne.n	15738 <__sflush_r+0xb8>
   15734:	602e      	str	r6, [r5, #0]
   15736:	e7af      	b.n	15698 <__sflush_r+0x18>
   15738:	2340      	movs	r3, #64	; 0x40
   1573a:	89a2      	ldrh	r2, [r4, #12]
   1573c:	4313      	orrs	r3, r2
   1573e:	81a3      	strh	r3, [r4, #12]
   15740:	e7ab      	b.n	1569a <__sflush_r+0x1a>
   15742:	2340      	movs	r3, #64	; 0x40
   15744:	430b      	orrs	r3, r1
   15746:	2001      	movs	r0, #1
   15748:	81a3      	strh	r3, [r4, #12]
   1574a:	4240      	negs	r0, r0
   1574c:	e7a5      	b.n	1569a <__sflush_r+0x1a>
   1574e:	690f      	ldr	r7, [r1, #16]
   15750:	2f00      	cmp	r7, #0
   15752:	d0a1      	beq.n	15698 <__sflush_r+0x18>
   15754:	680b      	ldr	r3, [r1, #0]
   15756:	600f      	str	r7, [r1, #0]
   15758:	1bdb      	subs	r3, r3, r7
   1575a:	9301      	str	r3, [sp, #4]
   1575c:	2300      	movs	r3, #0
   1575e:	0792      	lsls	r2, r2, #30
   15760:	d100      	bne.n	15764 <__sflush_r+0xe4>
   15762:	694b      	ldr	r3, [r1, #20]
   15764:	60a3      	str	r3, [r4, #8]
   15766:	9b01      	ldr	r3, [sp, #4]
   15768:	2b00      	cmp	r3, #0
   1576a:	dc00      	bgt.n	1576e <__sflush_r+0xee>
   1576c:	e794      	b.n	15698 <__sflush_r+0x18>
   1576e:	9b01      	ldr	r3, [sp, #4]
   15770:	003a      	movs	r2, r7
   15772:	6a21      	ldr	r1, [r4, #32]
   15774:	0028      	movs	r0, r5
   15776:	6aa6      	ldr	r6, [r4, #40]	; 0x28
   15778:	47b0      	blx	r6
   1577a:	2800      	cmp	r0, #0
   1577c:	dc03      	bgt.n	15786 <__sflush_r+0x106>
   1577e:	2340      	movs	r3, #64	; 0x40
   15780:	89a2      	ldrh	r2, [r4, #12]
   15782:	4313      	orrs	r3, r2
   15784:	e7df      	b.n	15746 <__sflush_r+0xc6>
   15786:	9b01      	ldr	r3, [sp, #4]
   15788:	183f      	adds	r7, r7, r0
   1578a:	1a1b      	subs	r3, r3, r0
   1578c:	9301      	str	r3, [sp, #4]
   1578e:	e7ea      	b.n	15766 <__sflush_r+0xe6>
   15790:	20400001 	.word	0x20400001

00015794 <_fflush_r>:
   15794:	690b      	ldr	r3, [r1, #16]
   15796:	b570      	push	{r4, r5, r6, lr}
   15798:	0005      	movs	r5, r0
   1579a:	000c      	movs	r4, r1
   1579c:	2b00      	cmp	r3, #0
   1579e:	d101      	bne.n	157a4 <_fflush_r+0x10>
   157a0:	2000      	movs	r0, #0
   157a2:	bd70      	pop	{r4, r5, r6, pc}
   157a4:	2800      	cmp	r0, #0
   157a6:	d004      	beq.n	157b2 <_fflush_r+0x1e>
   157a8:	6983      	ldr	r3, [r0, #24]
   157aa:	2b00      	cmp	r3, #0
   157ac:	d101      	bne.n	157b2 <_fflush_r+0x1e>
   157ae:	f000 f85f 	bl	15870 <__sinit>
   157b2:	4b0b      	ldr	r3, [pc, #44]	; (157e0 <_fflush_r+0x4c>)
   157b4:	429c      	cmp	r4, r3
   157b6:	d109      	bne.n	157cc <_fflush_r+0x38>
   157b8:	686c      	ldr	r4, [r5, #4]
   157ba:	220c      	movs	r2, #12
   157bc:	5ea3      	ldrsh	r3, [r4, r2]
   157be:	2b00      	cmp	r3, #0
   157c0:	d0ee      	beq.n	157a0 <_fflush_r+0xc>
   157c2:	0021      	movs	r1, r4
   157c4:	0028      	movs	r0, r5
   157c6:	f7ff ff5b 	bl	15680 <__sflush_r>
   157ca:	e7ea      	b.n	157a2 <_fflush_r+0xe>
   157cc:	4b05      	ldr	r3, [pc, #20]	; (157e4 <_fflush_r+0x50>)
   157ce:	429c      	cmp	r4, r3
   157d0:	d101      	bne.n	157d6 <_fflush_r+0x42>
   157d2:	68ac      	ldr	r4, [r5, #8]
   157d4:	e7f1      	b.n	157ba <_fflush_r+0x26>
   157d6:	4b04      	ldr	r3, [pc, #16]	; (157e8 <_fflush_r+0x54>)
   157d8:	429c      	cmp	r4, r3
   157da:	d1ee      	bne.n	157ba <_fflush_r+0x26>
   157dc:	68ec      	ldr	r4, [r5, #12]
   157de:	e7ec      	b.n	157ba <_fflush_r+0x26>
   157e0:	00016860 	.word	0x00016860
   157e4:	00016880 	.word	0x00016880
   157e8:	00016840 	.word	0x00016840

000157ec <_cleanup_r>:
   157ec:	b510      	push	{r4, lr}
   157ee:	4902      	ldr	r1, [pc, #8]	; (157f8 <_cleanup_r+0xc>)
   157f0:	f000 f8b2 	bl	15958 <_fwalk_reent>
   157f4:	bd10      	pop	{r4, pc}
   157f6:	46c0      	nop			; (mov r8, r8)
   157f8:	00015795 	.word	0x00015795

000157fc <std.isra.0>:
   157fc:	2300      	movs	r3, #0
   157fe:	b510      	push	{r4, lr}
   15800:	0004      	movs	r4, r0
   15802:	6003      	str	r3, [r0, #0]
   15804:	6043      	str	r3, [r0, #4]
   15806:	6083      	str	r3, [r0, #8]
   15808:	8181      	strh	r1, [r0, #12]
   1580a:	6643      	str	r3, [r0, #100]	; 0x64
   1580c:	81c2      	strh	r2, [r0, #14]
   1580e:	6103      	str	r3, [r0, #16]
   15810:	6143      	str	r3, [r0, #20]
   15812:	6183      	str	r3, [r0, #24]
   15814:	0019      	movs	r1, r3
   15816:	2208      	movs	r2, #8
   15818:	305c      	adds	r0, #92	; 0x5c
   1581a:	f7ff fa69 	bl	14cf0 <memset>
   1581e:	4b05      	ldr	r3, [pc, #20]	; (15834 <std.isra.0+0x38>)
   15820:	6224      	str	r4, [r4, #32]
   15822:	6263      	str	r3, [r4, #36]	; 0x24
   15824:	4b04      	ldr	r3, [pc, #16]	; (15838 <std.isra.0+0x3c>)
   15826:	62a3      	str	r3, [r4, #40]	; 0x28
   15828:	4b04      	ldr	r3, [pc, #16]	; (1583c <std.isra.0+0x40>)
   1582a:	62e3      	str	r3, [r4, #44]	; 0x2c
   1582c:	4b04      	ldr	r3, [pc, #16]	; (15840 <std.isra.0+0x44>)
   1582e:	6323      	str	r3, [r4, #48]	; 0x30
   15830:	bd10      	pop	{r4, pc}
   15832:	46c0      	nop			; (mov r8, r8)
   15834:	00015ca9 	.word	0x00015ca9
   15838:	00015cd1 	.word	0x00015cd1
   1583c:	00015d09 	.word	0x00015d09
   15840:	00015d35 	.word	0x00015d35

00015844 <__sfmoreglue>:
   15844:	b570      	push	{r4, r5, r6, lr}
   15846:	2568      	movs	r5, #104	; 0x68
   15848:	1e4a      	subs	r2, r1, #1
   1584a:	4355      	muls	r5, r2
   1584c:	000e      	movs	r6, r1
   1584e:	0029      	movs	r1, r5
   15850:	3174      	adds	r1, #116	; 0x74
   15852:	f000 f96f 	bl	15b34 <_malloc_r>
   15856:	1e04      	subs	r4, r0, #0
   15858:	d008      	beq.n	1586c <__sfmoreglue+0x28>
   1585a:	2100      	movs	r1, #0
   1585c:	002a      	movs	r2, r5
   1585e:	6001      	str	r1, [r0, #0]
   15860:	6046      	str	r6, [r0, #4]
   15862:	300c      	adds	r0, #12
   15864:	60a0      	str	r0, [r4, #8]
   15866:	3268      	adds	r2, #104	; 0x68
   15868:	f7ff fa42 	bl	14cf0 <memset>
   1586c:	0020      	movs	r0, r4
   1586e:	bd70      	pop	{r4, r5, r6, pc}

00015870 <__sinit>:
   15870:	6983      	ldr	r3, [r0, #24]
   15872:	b513      	push	{r0, r1, r4, lr}
   15874:	0004      	movs	r4, r0
   15876:	2b00      	cmp	r3, #0
   15878:	d128      	bne.n	158cc <__sinit+0x5c>
   1587a:	6483      	str	r3, [r0, #72]	; 0x48
   1587c:	64c3      	str	r3, [r0, #76]	; 0x4c
   1587e:	6503      	str	r3, [r0, #80]	; 0x50
   15880:	4b13      	ldr	r3, [pc, #76]	; (158d0 <__sinit+0x60>)
   15882:	4a14      	ldr	r2, [pc, #80]	; (158d4 <__sinit+0x64>)
   15884:	681b      	ldr	r3, [r3, #0]
   15886:	6282      	str	r2, [r0, #40]	; 0x28
   15888:	9301      	str	r3, [sp, #4]
   1588a:	4298      	cmp	r0, r3
   1588c:	d101      	bne.n	15892 <__sinit+0x22>
   1588e:	2301      	movs	r3, #1
   15890:	6183      	str	r3, [r0, #24]
   15892:	0020      	movs	r0, r4
   15894:	f000 f820 	bl	158d8 <__sfp>
   15898:	6060      	str	r0, [r4, #4]
   1589a:	0020      	movs	r0, r4
   1589c:	f000 f81c 	bl	158d8 <__sfp>
   158a0:	60a0      	str	r0, [r4, #8]
   158a2:	0020      	movs	r0, r4
   158a4:	f000 f818 	bl	158d8 <__sfp>
   158a8:	2200      	movs	r2, #0
   158aa:	60e0      	str	r0, [r4, #12]
   158ac:	2104      	movs	r1, #4
   158ae:	6860      	ldr	r0, [r4, #4]
   158b0:	f7ff ffa4 	bl	157fc <std.isra.0>
   158b4:	2201      	movs	r2, #1
   158b6:	2109      	movs	r1, #9
   158b8:	68a0      	ldr	r0, [r4, #8]
   158ba:	f7ff ff9f 	bl	157fc <std.isra.0>
   158be:	2202      	movs	r2, #2
   158c0:	2112      	movs	r1, #18
   158c2:	68e0      	ldr	r0, [r4, #12]
   158c4:	f7ff ff9a 	bl	157fc <std.isra.0>
   158c8:	2301      	movs	r3, #1
   158ca:	61a3      	str	r3, [r4, #24]
   158cc:	bd13      	pop	{r0, r1, r4, pc}
   158ce:	46c0      	nop			; (mov r8, r8)
   158d0:	00016808 	.word	0x00016808
   158d4:	000157ed 	.word	0x000157ed

000158d8 <__sfp>:
   158d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   158da:	4b1e      	ldr	r3, [pc, #120]	; (15954 <__sfp+0x7c>)
   158dc:	0007      	movs	r7, r0
   158de:	681e      	ldr	r6, [r3, #0]
   158e0:	69b3      	ldr	r3, [r6, #24]
   158e2:	2b00      	cmp	r3, #0
   158e4:	d102      	bne.n	158ec <__sfp+0x14>
   158e6:	0030      	movs	r0, r6
   158e8:	f7ff ffc2 	bl	15870 <__sinit>
   158ec:	3648      	adds	r6, #72	; 0x48
   158ee:	68b4      	ldr	r4, [r6, #8]
   158f0:	6873      	ldr	r3, [r6, #4]
   158f2:	3b01      	subs	r3, #1
   158f4:	d504      	bpl.n	15900 <__sfp+0x28>
   158f6:	6833      	ldr	r3, [r6, #0]
   158f8:	2b00      	cmp	r3, #0
   158fa:	d007      	beq.n	1590c <__sfp+0x34>
   158fc:	6836      	ldr	r6, [r6, #0]
   158fe:	e7f6      	b.n	158ee <__sfp+0x16>
   15900:	220c      	movs	r2, #12
   15902:	5ea5      	ldrsh	r5, [r4, r2]
   15904:	2d00      	cmp	r5, #0
   15906:	d00d      	beq.n	15924 <__sfp+0x4c>
   15908:	3468      	adds	r4, #104	; 0x68
   1590a:	e7f2      	b.n	158f2 <__sfp+0x1a>
   1590c:	2104      	movs	r1, #4
   1590e:	0038      	movs	r0, r7
   15910:	f7ff ff98 	bl	15844 <__sfmoreglue>
   15914:	6030      	str	r0, [r6, #0]
   15916:	2800      	cmp	r0, #0
   15918:	d1f0      	bne.n	158fc <__sfp+0x24>
   1591a:	230c      	movs	r3, #12
   1591c:	0004      	movs	r4, r0
   1591e:	603b      	str	r3, [r7, #0]
   15920:	0020      	movs	r0, r4
   15922:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   15924:	2301      	movs	r3, #1
   15926:	0020      	movs	r0, r4
   15928:	425b      	negs	r3, r3
   1592a:	81e3      	strh	r3, [r4, #14]
   1592c:	3302      	adds	r3, #2
   1592e:	81a3      	strh	r3, [r4, #12]
   15930:	6665      	str	r5, [r4, #100]	; 0x64
   15932:	6025      	str	r5, [r4, #0]
   15934:	60a5      	str	r5, [r4, #8]
   15936:	6065      	str	r5, [r4, #4]
   15938:	6125      	str	r5, [r4, #16]
   1593a:	6165      	str	r5, [r4, #20]
   1593c:	61a5      	str	r5, [r4, #24]
   1593e:	2208      	movs	r2, #8
   15940:	0029      	movs	r1, r5
   15942:	305c      	adds	r0, #92	; 0x5c
   15944:	f7ff f9d4 	bl	14cf0 <memset>
   15948:	6365      	str	r5, [r4, #52]	; 0x34
   1594a:	63a5      	str	r5, [r4, #56]	; 0x38
   1594c:	64a5      	str	r5, [r4, #72]	; 0x48
   1594e:	64e5      	str	r5, [r4, #76]	; 0x4c
   15950:	e7e6      	b.n	15920 <__sfp+0x48>
   15952:	46c0      	nop			; (mov r8, r8)
   15954:	00016808 	.word	0x00016808

00015958 <_fwalk_reent>:
   15958:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   1595a:	0004      	movs	r4, r0
   1595c:	0007      	movs	r7, r0
   1595e:	2600      	movs	r6, #0
   15960:	9101      	str	r1, [sp, #4]
   15962:	3448      	adds	r4, #72	; 0x48
   15964:	2c00      	cmp	r4, #0
   15966:	d101      	bne.n	1596c <_fwalk_reent+0x14>
   15968:	0030      	movs	r0, r6
   1596a:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
   1596c:	6863      	ldr	r3, [r4, #4]
   1596e:	68a5      	ldr	r5, [r4, #8]
   15970:	9300      	str	r3, [sp, #0]
   15972:	9b00      	ldr	r3, [sp, #0]
   15974:	3b01      	subs	r3, #1
   15976:	9300      	str	r3, [sp, #0]
   15978:	d501      	bpl.n	1597e <_fwalk_reent+0x26>
   1597a:	6824      	ldr	r4, [r4, #0]
   1597c:	e7f2      	b.n	15964 <_fwalk_reent+0xc>
   1597e:	89ab      	ldrh	r3, [r5, #12]
   15980:	2b01      	cmp	r3, #1
   15982:	d908      	bls.n	15996 <_fwalk_reent+0x3e>
   15984:	220e      	movs	r2, #14
   15986:	5eab      	ldrsh	r3, [r5, r2]
   15988:	3301      	adds	r3, #1
   1598a:	d004      	beq.n	15996 <_fwalk_reent+0x3e>
   1598c:	0029      	movs	r1, r5
   1598e:	0038      	movs	r0, r7
   15990:	9b01      	ldr	r3, [sp, #4]
   15992:	4798      	blx	r3
   15994:	4306      	orrs	r6, r0
   15996:	3568      	adds	r5, #104	; 0x68
   15998:	e7eb      	b.n	15972 <_fwalk_reent+0x1a>
   1599a:	Address 0x0001599a is out of bounds.


0001599c <__swhatbuf_r>:
   1599c:	b570      	push	{r4, r5, r6, lr}
   1599e:	000e      	movs	r6, r1
   159a0:	001d      	movs	r5, r3
   159a2:	230e      	movs	r3, #14
   159a4:	5ec9      	ldrsh	r1, [r1, r3]
   159a6:	b090      	sub	sp, #64	; 0x40
   159a8:	0014      	movs	r4, r2
   159aa:	2900      	cmp	r1, #0
   159ac:	da07      	bge.n	159be <__swhatbuf_r+0x22>
   159ae:	2300      	movs	r3, #0
   159b0:	602b      	str	r3, [r5, #0]
   159b2:	89b3      	ldrh	r3, [r6, #12]
   159b4:	061b      	lsls	r3, r3, #24
   159b6:	d411      	bmi.n	159dc <__swhatbuf_r+0x40>
   159b8:	2380      	movs	r3, #128	; 0x80
   159ba:	00db      	lsls	r3, r3, #3
   159bc:	e00f      	b.n	159de <__swhatbuf_r+0x42>
   159be:	aa01      	add	r2, sp, #4
   159c0:	f000 f9e4 	bl	15d8c <_fstat_r>
   159c4:	2800      	cmp	r0, #0
   159c6:	dbf2      	blt.n	159ae <__swhatbuf_r+0x12>
   159c8:	22f0      	movs	r2, #240	; 0xf0
   159ca:	9b02      	ldr	r3, [sp, #8]
   159cc:	0212      	lsls	r2, r2, #8
   159ce:	4013      	ands	r3, r2
   159d0:	4a05      	ldr	r2, [pc, #20]	; (159e8 <__swhatbuf_r+0x4c>)
   159d2:	189b      	adds	r3, r3, r2
   159d4:	425a      	negs	r2, r3
   159d6:	4153      	adcs	r3, r2
   159d8:	602b      	str	r3, [r5, #0]
   159da:	e7ed      	b.n	159b8 <__swhatbuf_r+0x1c>
   159dc:	2340      	movs	r3, #64	; 0x40
   159de:	2000      	movs	r0, #0
   159e0:	6023      	str	r3, [r4, #0]
   159e2:	b010      	add	sp, #64	; 0x40
   159e4:	bd70      	pop	{r4, r5, r6, pc}
   159e6:	46c0      	nop			; (mov r8, r8)
   159e8:	ffffe000 	.word	0xffffe000

000159ec <__smakebuf_r>:
   159ec:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   159ee:	2602      	movs	r6, #2
   159f0:	898b      	ldrh	r3, [r1, #12]
   159f2:	0005      	movs	r5, r0
   159f4:	000c      	movs	r4, r1
   159f6:	4233      	tst	r3, r6
   159f8:	d006      	beq.n	15a08 <__smakebuf_r+0x1c>
   159fa:	0023      	movs	r3, r4
   159fc:	3347      	adds	r3, #71	; 0x47
   159fe:	6023      	str	r3, [r4, #0]
   15a00:	6123      	str	r3, [r4, #16]
   15a02:	2301      	movs	r3, #1
   15a04:	6163      	str	r3, [r4, #20]
   15a06:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
   15a08:	ab01      	add	r3, sp, #4
   15a0a:	466a      	mov	r2, sp
   15a0c:	f7ff ffc6 	bl	1599c <__swhatbuf_r>
   15a10:	9900      	ldr	r1, [sp, #0]
   15a12:	0007      	movs	r7, r0
   15a14:	0028      	movs	r0, r5
   15a16:	f000 f88d 	bl	15b34 <_malloc_r>
   15a1a:	2800      	cmp	r0, #0
   15a1c:	d108      	bne.n	15a30 <__smakebuf_r+0x44>
   15a1e:	220c      	movs	r2, #12
   15a20:	5ea3      	ldrsh	r3, [r4, r2]
   15a22:	059a      	lsls	r2, r3, #22
   15a24:	d4ef      	bmi.n	15a06 <__smakebuf_r+0x1a>
   15a26:	2203      	movs	r2, #3
   15a28:	4393      	bics	r3, r2
   15a2a:	431e      	orrs	r6, r3
   15a2c:	81a6      	strh	r6, [r4, #12]
   15a2e:	e7e4      	b.n	159fa <__smakebuf_r+0xe>
   15a30:	4b0f      	ldr	r3, [pc, #60]	; (15a70 <__smakebuf_r+0x84>)
   15a32:	62ab      	str	r3, [r5, #40]	; 0x28
   15a34:	2380      	movs	r3, #128	; 0x80
   15a36:	89a2      	ldrh	r2, [r4, #12]
   15a38:	6020      	str	r0, [r4, #0]
   15a3a:	4313      	orrs	r3, r2
   15a3c:	81a3      	strh	r3, [r4, #12]
   15a3e:	9b00      	ldr	r3, [sp, #0]
   15a40:	6120      	str	r0, [r4, #16]
   15a42:	6163      	str	r3, [r4, #20]
   15a44:	9b01      	ldr	r3, [sp, #4]
   15a46:	2b00      	cmp	r3, #0
   15a48:	d00d      	beq.n	15a66 <__smakebuf_r+0x7a>
   15a4a:	230e      	movs	r3, #14
   15a4c:	5ee1      	ldrsh	r1, [r4, r3]
   15a4e:	0028      	movs	r0, r5
   15a50:	f000 f9ae 	bl	15db0 <_isatty_r>
   15a54:	2800      	cmp	r0, #0
   15a56:	d006      	beq.n	15a66 <__smakebuf_r+0x7a>
   15a58:	2203      	movs	r2, #3
   15a5a:	89a3      	ldrh	r3, [r4, #12]
   15a5c:	4393      	bics	r3, r2
   15a5e:	001a      	movs	r2, r3
   15a60:	2301      	movs	r3, #1
   15a62:	4313      	orrs	r3, r2
   15a64:	81a3      	strh	r3, [r4, #12]
   15a66:	89a0      	ldrh	r0, [r4, #12]
   15a68:	4338      	orrs	r0, r7
   15a6a:	81a0      	strh	r0, [r4, #12]
   15a6c:	e7cb      	b.n	15a06 <__smakebuf_r+0x1a>
   15a6e:	46c0      	nop			; (mov r8, r8)
   15a70:	000157ed 	.word	0x000157ed

00015a74 <malloc>:
   15a74:	b510      	push	{r4, lr}
   15a76:	4b03      	ldr	r3, [pc, #12]	; (15a84 <malloc+0x10>)
   15a78:	0001      	movs	r1, r0
   15a7a:	6818      	ldr	r0, [r3, #0]
   15a7c:	f000 f85a 	bl	15b34 <_malloc_r>
   15a80:	bd10      	pop	{r4, pc}
   15a82:	46c0      	nop			; (mov r8, r8)
   15a84:	200000a0 	.word	0x200000a0

00015a88 <memchr>:
   15a88:	b2c9      	uxtb	r1, r1
   15a8a:	1882      	adds	r2, r0, r2
   15a8c:	4290      	cmp	r0, r2
   15a8e:	d101      	bne.n	15a94 <memchr+0xc>
   15a90:	2000      	movs	r0, #0
   15a92:	4770      	bx	lr
   15a94:	7803      	ldrb	r3, [r0, #0]
   15a96:	428b      	cmp	r3, r1
   15a98:	d0fb      	beq.n	15a92 <memchr+0xa>
   15a9a:	3001      	adds	r0, #1
   15a9c:	e7f6      	b.n	15a8c <memchr+0x4>
   15a9e:	Address 0x00015a9e is out of bounds.


00015aa0 <_free_r>:
   15aa0:	b570      	push	{r4, r5, r6, lr}
   15aa2:	0005      	movs	r5, r0
   15aa4:	2900      	cmp	r1, #0
   15aa6:	d010      	beq.n	15aca <_free_r+0x2a>
   15aa8:	1f0c      	subs	r4, r1, #4
   15aaa:	6823      	ldr	r3, [r4, #0]
   15aac:	2b00      	cmp	r3, #0
   15aae:	da00      	bge.n	15ab2 <_free_r+0x12>
   15ab0:	18e4      	adds	r4, r4, r3
   15ab2:	0028      	movs	r0, r5
   15ab4:	f000 f9a2 	bl	15dfc <__malloc_lock>
   15ab8:	4a1d      	ldr	r2, [pc, #116]	; (15b30 <_free_r+0x90>)
   15aba:	6813      	ldr	r3, [r2, #0]
   15abc:	2b00      	cmp	r3, #0
   15abe:	d105      	bne.n	15acc <_free_r+0x2c>
   15ac0:	6063      	str	r3, [r4, #4]
   15ac2:	6014      	str	r4, [r2, #0]
   15ac4:	0028      	movs	r0, r5
   15ac6:	f000 f99a 	bl	15dfe <__malloc_unlock>
   15aca:	bd70      	pop	{r4, r5, r6, pc}
   15acc:	42a3      	cmp	r3, r4
   15ace:	d909      	bls.n	15ae4 <_free_r+0x44>
   15ad0:	6821      	ldr	r1, [r4, #0]
   15ad2:	1860      	adds	r0, r4, r1
   15ad4:	4283      	cmp	r3, r0
   15ad6:	d1f3      	bne.n	15ac0 <_free_r+0x20>
   15ad8:	6818      	ldr	r0, [r3, #0]
   15ada:	685b      	ldr	r3, [r3, #4]
   15adc:	1841      	adds	r1, r0, r1
   15ade:	6021      	str	r1, [r4, #0]
   15ae0:	e7ee      	b.n	15ac0 <_free_r+0x20>
   15ae2:	0013      	movs	r3, r2
   15ae4:	685a      	ldr	r2, [r3, #4]
   15ae6:	2a00      	cmp	r2, #0
   15ae8:	d001      	beq.n	15aee <_free_r+0x4e>
   15aea:	42a2      	cmp	r2, r4
   15aec:	d9f9      	bls.n	15ae2 <_free_r+0x42>
   15aee:	6819      	ldr	r1, [r3, #0]
   15af0:	1858      	adds	r0, r3, r1
   15af2:	42a0      	cmp	r0, r4
   15af4:	d10b      	bne.n	15b0e <_free_r+0x6e>
   15af6:	6820      	ldr	r0, [r4, #0]
   15af8:	1809      	adds	r1, r1, r0
   15afa:	1858      	adds	r0, r3, r1
   15afc:	6019      	str	r1, [r3, #0]
   15afe:	4282      	cmp	r2, r0
   15b00:	d1e0      	bne.n	15ac4 <_free_r+0x24>
   15b02:	6810      	ldr	r0, [r2, #0]
   15b04:	6852      	ldr	r2, [r2, #4]
   15b06:	1841      	adds	r1, r0, r1
   15b08:	6019      	str	r1, [r3, #0]
   15b0a:	605a      	str	r2, [r3, #4]
   15b0c:	e7da      	b.n	15ac4 <_free_r+0x24>
   15b0e:	42a0      	cmp	r0, r4
   15b10:	d902      	bls.n	15b18 <_free_r+0x78>
   15b12:	230c      	movs	r3, #12
   15b14:	602b      	str	r3, [r5, #0]
   15b16:	e7d5      	b.n	15ac4 <_free_r+0x24>
   15b18:	6821      	ldr	r1, [r4, #0]
   15b1a:	1860      	adds	r0, r4, r1
   15b1c:	4282      	cmp	r2, r0
   15b1e:	d103      	bne.n	15b28 <_free_r+0x88>
   15b20:	6810      	ldr	r0, [r2, #0]
   15b22:	6852      	ldr	r2, [r2, #4]
   15b24:	1841      	adds	r1, r0, r1
   15b26:	6021      	str	r1, [r4, #0]
   15b28:	6062      	str	r2, [r4, #4]
   15b2a:	605c      	str	r4, [r3, #4]
   15b2c:	e7ca      	b.n	15ac4 <_free_r+0x24>
   15b2e:	46c0      	nop			; (mov r8, r8)
   15b30:	20001d20 	.word	0x20001d20

00015b34 <_malloc_r>:
   15b34:	2303      	movs	r3, #3
   15b36:	b570      	push	{r4, r5, r6, lr}
   15b38:	1ccd      	adds	r5, r1, #3
   15b3a:	439d      	bics	r5, r3
   15b3c:	3508      	adds	r5, #8
   15b3e:	0006      	movs	r6, r0
   15b40:	2d0c      	cmp	r5, #12
   15b42:	d21e      	bcs.n	15b82 <_malloc_r+0x4e>
   15b44:	250c      	movs	r5, #12
   15b46:	42a9      	cmp	r1, r5
   15b48:	d81d      	bhi.n	15b86 <_malloc_r+0x52>
   15b4a:	0030      	movs	r0, r6
   15b4c:	f000 f956 	bl	15dfc <__malloc_lock>
   15b50:	4a25      	ldr	r2, [pc, #148]	; (15be8 <_malloc_r+0xb4>)
   15b52:	6814      	ldr	r4, [r2, #0]
   15b54:	0021      	movs	r1, r4
   15b56:	2900      	cmp	r1, #0
   15b58:	d119      	bne.n	15b8e <_malloc_r+0x5a>
   15b5a:	4c24      	ldr	r4, [pc, #144]	; (15bec <_malloc_r+0xb8>)
   15b5c:	6823      	ldr	r3, [r4, #0]
   15b5e:	2b00      	cmp	r3, #0
   15b60:	d103      	bne.n	15b6a <_malloc_r+0x36>
   15b62:	0030      	movs	r0, r6
   15b64:	f000 f844 	bl	15bf0 <_sbrk_r>
   15b68:	6020      	str	r0, [r4, #0]
   15b6a:	0029      	movs	r1, r5
   15b6c:	0030      	movs	r0, r6
   15b6e:	f000 f83f 	bl	15bf0 <_sbrk_r>
   15b72:	1c43      	adds	r3, r0, #1
   15b74:	d12c      	bne.n	15bd0 <_malloc_r+0x9c>
   15b76:	230c      	movs	r3, #12
   15b78:	0030      	movs	r0, r6
   15b7a:	6033      	str	r3, [r6, #0]
   15b7c:	f000 f93f 	bl	15dfe <__malloc_unlock>
   15b80:	e003      	b.n	15b8a <_malloc_r+0x56>
   15b82:	2d00      	cmp	r5, #0
   15b84:	dadf      	bge.n	15b46 <_malloc_r+0x12>
   15b86:	230c      	movs	r3, #12
   15b88:	6033      	str	r3, [r6, #0]
   15b8a:	2000      	movs	r0, #0
   15b8c:	bd70      	pop	{r4, r5, r6, pc}
   15b8e:	680b      	ldr	r3, [r1, #0]
   15b90:	1b5b      	subs	r3, r3, r5
   15b92:	d41a      	bmi.n	15bca <_malloc_r+0x96>
   15b94:	2b0b      	cmp	r3, #11
   15b96:	d903      	bls.n	15ba0 <_malloc_r+0x6c>
   15b98:	600b      	str	r3, [r1, #0]
   15b9a:	18cc      	adds	r4, r1, r3
   15b9c:	6025      	str	r5, [r4, #0]
   15b9e:	e003      	b.n	15ba8 <_malloc_r+0x74>
   15ba0:	428c      	cmp	r4, r1
   15ba2:	d10e      	bne.n	15bc2 <_malloc_r+0x8e>
   15ba4:	6863      	ldr	r3, [r4, #4]
   15ba6:	6013      	str	r3, [r2, #0]
   15ba8:	0030      	movs	r0, r6
   15baa:	f000 f928 	bl	15dfe <__malloc_unlock>
   15bae:	0020      	movs	r0, r4
   15bb0:	2207      	movs	r2, #7
   15bb2:	300b      	adds	r0, #11
   15bb4:	1d23      	adds	r3, r4, #4
   15bb6:	4390      	bics	r0, r2
   15bb8:	1ac3      	subs	r3, r0, r3
   15bba:	d0e7      	beq.n	15b8c <_malloc_r+0x58>
   15bbc:	425a      	negs	r2, r3
   15bbe:	50e2      	str	r2, [r4, r3]
   15bc0:	e7e4      	b.n	15b8c <_malloc_r+0x58>
   15bc2:	684b      	ldr	r3, [r1, #4]
   15bc4:	6063      	str	r3, [r4, #4]
   15bc6:	000c      	movs	r4, r1
   15bc8:	e7ee      	b.n	15ba8 <_malloc_r+0x74>
   15bca:	000c      	movs	r4, r1
   15bcc:	6849      	ldr	r1, [r1, #4]
   15bce:	e7c2      	b.n	15b56 <_malloc_r+0x22>
   15bd0:	2303      	movs	r3, #3
   15bd2:	1cc4      	adds	r4, r0, #3
   15bd4:	439c      	bics	r4, r3
   15bd6:	42a0      	cmp	r0, r4
   15bd8:	d0e0      	beq.n	15b9c <_malloc_r+0x68>
   15bda:	1a21      	subs	r1, r4, r0
   15bdc:	0030      	movs	r0, r6
   15bde:	f000 f807 	bl	15bf0 <_sbrk_r>
   15be2:	1c43      	adds	r3, r0, #1
   15be4:	d1da      	bne.n	15b9c <_malloc_r+0x68>
   15be6:	e7c6      	b.n	15b76 <_malloc_r+0x42>
   15be8:	20001d20 	.word	0x20001d20
   15bec:	20001d24 	.word	0x20001d24

00015bf0 <_sbrk_r>:
   15bf0:	2300      	movs	r3, #0
   15bf2:	b570      	push	{r4, r5, r6, lr}
   15bf4:	4c06      	ldr	r4, [pc, #24]	; (15c10 <_sbrk_r+0x20>)
   15bf6:	0005      	movs	r5, r0
   15bf8:	0008      	movs	r0, r1
   15bfa:	6023      	str	r3, [r4, #0]
   15bfc:	f7f3 f82e 	bl	8c5c <_sbrk>
   15c00:	1c43      	adds	r3, r0, #1
   15c02:	d103      	bne.n	15c0c <_sbrk_r+0x1c>
   15c04:	6823      	ldr	r3, [r4, #0]
   15c06:	2b00      	cmp	r3, #0
   15c08:	d000      	beq.n	15c0c <_sbrk_r+0x1c>
   15c0a:	602b      	str	r3, [r5, #0]
   15c0c:	bd70      	pop	{r4, r5, r6, pc}
   15c0e:	46c0      	nop			; (mov r8, r8)
   15c10:	20002918 	.word	0x20002918

00015c14 <_raise_r>:
   15c14:	b570      	push	{r4, r5, r6, lr}
   15c16:	0004      	movs	r4, r0
   15c18:	000d      	movs	r5, r1
   15c1a:	291f      	cmp	r1, #31
   15c1c:	d904      	bls.n	15c28 <_raise_r+0x14>
   15c1e:	2316      	movs	r3, #22
   15c20:	6003      	str	r3, [r0, #0]
   15c22:	2001      	movs	r0, #1
   15c24:	4240      	negs	r0, r0
   15c26:	bd70      	pop	{r4, r5, r6, pc}
   15c28:	6c43      	ldr	r3, [r0, #68]	; 0x44
   15c2a:	2b00      	cmp	r3, #0
   15c2c:	d004      	beq.n	15c38 <_raise_r+0x24>
   15c2e:	008a      	lsls	r2, r1, #2
   15c30:	189b      	adds	r3, r3, r2
   15c32:	681a      	ldr	r2, [r3, #0]
   15c34:	2a00      	cmp	r2, #0
   15c36:	d108      	bne.n	15c4a <_raise_r+0x36>
   15c38:	0020      	movs	r0, r4
   15c3a:	f000 f831 	bl	15ca0 <_getpid_r>
   15c3e:	002a      	movs	r2, r5
   15c40:	0001      	movs	r1, r0
   15c42:	0020      	movs	r0, r4
   15c44:	f000 f81a 	bl	15c7c <_kill_r>
   15c48:	e7ed      	b.n	15c26 <_raise_r+0x12>
   15c4a:	2000      	movs	r0, #0
   15c4c:	2a01      	cmp	r2, #1
   15c4e:	d0ea      	beq.n	15c26 <_raise_r+0x12>
   15c50:	1c51      	adds	r1, r2, #1
   15c52:	d103      	bne.n	15c5c <_raise_r+0x48>
   15c54:	2316      	movs	r3, #22
   15c56:	3001      	adds	r0, #1
   15c58:	6023      	str	r3, [r4, #0]
   15c5a:	e7e4      	b.n	15c26 <_raise_r+0x12>
   15c5c:	2400      	movs	r4, #0
   15c5e:	0028      	movs	r0, r5
   15c60:	601c      	str	r4, [r3, #0]
   15c62:	4790      	blx	r2
   15c64:	0020      	movs	r0, r4
   15c66:	e7de      	b.n	15c26 <_raise_r+0x12>

00015c68 <raise>:
   15c68:	b510      	push	{r4, lr}
   15c6a:	4b03      	ldr	r3, [pc, #12]	; (15c78 <raise+0x10>)
   15c6c:	0001      	movs	r1, r0
   15c6e:	6818      	ldr	r0, [r3, #0]
   15c70:	f7ff ffd0 	bl	15c14 <_raise_r>
   15c74:	bd10      	pop	{r4, pc}
   15c76:	46c0      	nop			; (mov r8, r8)
   15c78:	200000a0 	.word	0x200000a0

00015c7c <_kill_r>:
   15c7c:	2300      	movs	r3, #0
   15c7e:	b570      	push	{r4, r5, r6, lr}
   15c80:	4c06      	ldr	r4, [pc, #24]	; (15c9c <_kill_r+0x20>)
   15c82:	0005      	movs	r5, r0
   15c84:	0008      	movs	r0, r1
   15c86:	0011      	movs	r1, r2
   15c88:	6023      	str	r3, [r4, #0]
   15c8a:	f7f3 f807 	bl	8c9c <_kill>
   15c8e:	1c43      	adds	r3, r0, #1
   15c90:	d103      	bne.n	15c9a <_kill_r+0x1e>
   15c92:	6823      	ldr	r3, [r4, #0]
   15c94:	2b00      	cmp	r3, #0
   15c96:	d000      	beq.n	15c9a <_kill_r+0x1e>
   15c98:	602b      	str	r3, [r5, #0]
   15c9a:	bd70      	pop	{r4, r5, r6, pc}
   15c9c:	20002918 	.word	0x20002918

00015ca0 <_getpid_r>:
   15ca0:	b510      	push	{r4, lr}
   15ca2:	f7f2 fffc 	bl	8c9e <_getpid>
   15ca6:	bd10      	pop	{r4, pc}

00015ca8 <__sread>:
   15ca8:	b570      	push	{r4, r5, r6, lr}
   15caa:	000c      	movs	r4, r1
   15cac:	250e      	movs	r5, #14
   15cae:	5f49      	ldrsh	r1, [r1, r5]
   15cb0:	f000 f8a6 	bl	15e00 <_read_r>
   15cb4:	2800      	cmp	r0, #0
   15cb6:	db03      	blt.n	15cc0 <__sread+0x18>
   15cb8:	6d63      	ldr	r3, [r4, #84]	; 0x54
   15cba:	181b      	adds	r3, r3, r0
   15cbc:	6563      	str	r3, [r4, #84]	; 0x54
   15cbe:	bd70      	pop	{r4, r5, r6, pc}
   15cc0:	89a3      	ldrh	r3, [r4, #12]
   15cc2:	4a02      	ldr	r2, [pc, #8]	; (15ccc <__sread+0x24>)
   15cc4:	4013      	ands	r3, r2
   15cc6:	81a3      	strh	r3, [r4, #12]
   15cc8:	e7f9      	b.n	15cbe <__sread+0x16>
   15cca:	46c0      	nop			; (mov r8, r8)
   15ccc:	ffffefff 	.word	0xffffefff

00015cd0 <__swrite>:
   15cd0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   15cd2:	001f      	movs	r7, r3
   15cd4:	898b      	ldrh	r3, [r1, #12]
   15cd6:	0005      	movs	r5, r0
   15cd8:	000c      	movs	r4, r1
   15cda:	0016      	movs	r6, r2
   15cdc:	05db      	lsls	r3, r3, #23
   15cde:	d505      	bpl.n	15cec <__swrite+0x1c>
   15ce0:	230e      	movs	r3, #14
   15ce2:	5ec9      	ldrsh	r1, [r1, r3]
   15ce4:	2200      	movs	r2, #0
   15ce6:	2302      	movs	r3, #2
   15ce8:	f000 f874 	bl	15dd4 <_lseek_r>
   15cec:	89a3      	ldrh	r3, [r4, #12]
   15cee:	4a05      	ldr	r2, [pc, #20]	; (15d04 <__swrite+0x34>)
   15cf0:	0028      	movs	r0, r5
   15cf2:	4013      	ands	r3, r2
   15cf4:	81a3      	strh	r3, [r4, #12]
   15cf6:	0032      	movs	r2, r6
   15cf8:	230e      	movs	r3, #14
   15cfa:	5ee1      	ldrsh	r1, [r4, r3]
   15cfc:	003b      	movs	r3, r7
   15cfe:	f000 f81f 	bl	15d40 <_write_r>
   15d02:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   15d04:	ffffefff 	.word	0xffffefff

00015d08 <__sseek>:
   15d08:	b570      	push	{r4, r5, r6, lr}
   15d0a:	000c      	movs	r4, r1
   15d0c:	250e      	movs	r5, #14
   15d0e:	5f49      	ldrsh	r1, [r1, r5]
   15d10:	f000 f860 	bl	15dd4 <_lseek_r>
   15d14:	89a3      	ldrh	r3, [r4, #12]
   15d16:	1c42      	adds	r2, r0, #1
   15d18:	d103      	bne.n	15d22 <__sseek+0x1a>
   15d1a:	4a05      	ldr	r2, [pc, #20]	; (15d30 <__sseek+0x28>)
   15d1c:	4013      	ands	r3, r2
   15d1e:	81a3      	strh	r3, [r4, #12]
   15d20:	bd70      	pop	{r4, r5, r6, pc}
   15d22:	2280      	movs	r2, #128	; 0x80
   15d24:	0152      	lsls	r2, r2, #5
   15d26:	4313      	orrs	r3, r2
   15d28:	81a3      	strh	r3, [r4, #12]
   15d2a:	6560      	str	r0, [r4, #84]	; 0x54
   15d2c:	e7f8      	b.n	15d20 <__sseek+0x18>
   15d2e:	46c0      	nop			; (mov r8, r8)
   15d30:	ffffefff 	.word	0xffffefff

00015d34 <__sclose>:
   15d34:	b510      	push	{r4, lr}
   15d36:	230e      	movs	r3, #14
   15d38:	5ec9      	ldrsh	r1, [r1, r3]
   15d3a:	f000 f815 	bl	15d68 <_close_r>
   15d3e:	bd10      	pop	{r4, pc}

00015d40 <_write_r>:
   15d40:	b570      	push	{r4, r5, r6, lr}
   15d42:	0005      	movs	r5, r0
   15d44:	0008      	movs	r0, r1
   15d46:	0011      	movs	r1, r2
   15d48:	2200      	movs	r2, #0
   15d4a:	4c06      	ldr	r4, [pc, #24]	; (15d64 <_write_r+0x24>)
   15d4c:	6022      	str	r2, [r4, #0]
   15d4e:	001a      	movs	r2, r3
   15d50:	f7f2 ff5c 	bl	8c0c <_write>
   15d54:	1c43      	adds	r3, r0, #1
   15d56:	d103      	bne.n	15d60 <_write_r+0x20>
   15d58:	6823      	ldr	r3, [r4, #0]
   15d5a:	2b00      	cmp	r3, #0
   15d5c:	d000      	beq.n	15d60 <_write_r+0x20>
   15d5e:	602b      	str	r3, [r5, #0]
   15d60:	bd70      	pop	{r4, r5, r6, pc}
   15d62:	46c0      	nop			; (mov r8, r8)
   15d64:	20002918 	.word	0x20002918

00015d68 <_close_r>:
   15d68:	2300      	movs	r3, #0
   15d6a:	b570      	push	{r4, r5, r6, lr}
   15d6c:	4c06      	ldr	r4, [pc, #24]	; (15d88 <_close_r+0x20>)
   15d6e:	0005      	movs	r5, r0
   15d70:	0008      	movs	r0, r1
   15d72:	6023      	str	r3, [r4, #0]
   15d74:	f7f2 ff84 	bl	8c80 <_close>
   15d78:	1c43      	adds	r3, r0, #1
   15d7a:	d103      	bne.n	15d84 <_close_r+0x1c>
   15d7c:	6823      	ldr	r3, [r4, #0]
   15d7e:	2b00      	cmp	r3, #0
   15d80:	d000      	beq.n	15d84 <_close_r+0x1c>
   15d82:	602b      	str	r3, [r5, #0]
   15d84:	bd70      	pop	{r4, r5, r6, pc}
   15d86:	46c0      	nop			; (mov r8, r8)
   15d88:	20002918 	.word	0x20002918

00015d8c <_fstat_r>:
   15d8c:	2300      	movs	r3, #0
   15d8e:	b570      	push	{r4, r5, r6, lr}
   15d90:	4c06      	ldr	r4, [pc, #24]	; (15dac <_fstat_r+0x20>)
   15d92:	0005      	movs	r5, r0
   15d94:	0008      	movs	r0, r1
   15d96:	0011      	movs	r1, r2
   15d98:	6023      	str	r3, [r4, #0]
   15d9a:	f7f2 ff74 	bl	8c86 <_fstat>
   15d9e:	1c43      	adds	r3, r0, #1
   15da0:	d103      	bne.n	15daa <_fstat_r+0x1e>
   15da2:	6823      	ldr	r3, [r4, #0]
   15da4:	2b00      	cmp	r3, #0
   15da6:	d000      	beq.n	15daa <_fstat_r+0x1e>
   15da8:	602b      	str	r3, [r5, #0]
   15daa:	bd70      	pop	{r4, r5, r6, pc}
   15dac:	20002918 	.word	0x20002918

00015db0 <_isatty_r>:
   15db0:	2300      	movs	r3, #0
   15db2:	b570      	push	{r4, r5, r6, lr}
   15db4:	4c06      	ldr	r4, [pc, #24]	; (15dd0 <_isatty_r+0x20>)
   15db6:	0005      	movs	r5, r0
   15db8:	0008      	movs	r0, r1
   15dba:	6023      	str	r3, [r4, #0]
   15dbc:	f7f2 ff68 	bl	8c90 <_isatty>
   15dc0:	1c43      	adds	r3, r0, #1
   15dc2:	d103      	bne.n	15dcc <_isatty_r+0x1c>
   15dc4:	6823      	ldr	r3, [r4, #0]
   15dc6:	2b00      	cmp	r3, #0
   15dc8:	d000      	beq.n	15dcc <_isatty_r+0x1c>
   15dca:	602b      	str	r3, [r5, #0]
   15dcc:	bd70      	pop	{r4, r5, r6, pc}
   15dce:	46c0      	nop			; (mov r8, r8)
   15dd0:	20002918 	.word	0x20002918

00015dd4 <_lseek_r>:
   15dd4:	b570      	push	{r4, r5, r6, lr}
   15dd6:	0005      	movs	r5, r0
   15dd8:	0008      	movs	r0, r1
   15dda:	0011      	movs	r1, r2
   15ddc:	2200      	movs	r2, #0
   15dde:	4c06      	ldr	r4, [pc, #24]	; (15df8 <_lseek_r+0x24>)
   15de0:	6022      	str	r2, [r4, #0]
   15de2:	001a      	movs	r2, r3
   15de4:	f7f2 ff56 	bl	8c94 <_lseek>
   15de8:	1c43      	adds	r3, r0, #1
   15dea:	d103      	bne.n	15df4 <_lseek_r+0x20>
   15dec:	6823      	ldr	r3, [r4, #0]
   15dee:	2b00      	cmp	r3, #0
   15df0:	d000      	beq.n	15df4 <_lseek_r+0x20>
   15df2:	602b      	str	r3, [r5, #0]
   15df4:	bd70      	pop	{r4, r5, r6, pc}
   15df6:	46c0      	nop			; (mov r8, r8)
   15df8:	20002918 	.word	0x20002918

00015dfc <__malloc_lock>:
   15dfc:	4770      	bx	lr

00015dfe <__malloc_unlock>:
   15dfe:	4770      	bx	lr

00015e00 <_read_r>:
   15e00:	b570      	push	{r4, r5, r6, lr}
   15e02:	0005      	movs	r5, r0
   15e04:	0008      	movs	r0, r1
   15e06:	0011      	movs	r1, r2
   15e08:	2200      	movs	r2, #0
   15e0a:	4c06      	ldr	r4, [pc, #24]	; (15e24 <_read_r+0x24>)
   15e0c:	6022      	str	r2, [r4, #0]
   15e0e:	001a      	movs	r2, r3
   15e10:	f7f2 feda 	bl	8bc8 <_read>
   15e14:	1c43      	adds	r3, r0, #1
   15e16:	d103      	bne.n	15e20 <_read_r+0x20>
   15e18:	6823      	ldr	r3, [r4, #0]
   15e1a:	2b00      	cmp	r3, #0
   15e1c:	d000      	beq.n	15e20 <_read_r+0x20>
   15e1e:	602b      	str	r3, [r5, #0]
   15e20:	bd70      	pop	{r4, r5, r6, pc}
   15e22:	46c0      	nop			; (mov r8, r8)
   15e24:	20002918 	.word	0x20002918
   15e28:	000063ac 	.word	0x000063ac
   15e2c:	000063f0 	.word	0x000063f0
   15e30:	000063de 	.word	0x000063de
   15e34:	000063f0 	.word	0x000063f0
   15e38:	000063f0 	.word	0x000063f0
   15e3c:	000063f0 	.word	0x000063f0
   15e40:	000063ac 	.word	0x000063ac
   15e44:	000063ac 	.word	0x000063ac
   15e48:	000063f4 	.word	0x000063f4
   15e4c:	000063f0 	.word	0x000063f0
   15e50:	00006432 	.word	0x00006432
   15e54:	00006918 	.word	0x00006918
   15e58:	00006918 	.word	0x00006918
   15e5c:	000068f4 	.word	0x000068f4
   15e60:	00006918 	.word	0x00006918
   15e64:	000068f4 	.word	0x000068f4
   15e68:	000068da 	.word	0x000068da
   15e6c:	000068da 	.word	0x000068da
   15e70:	00006918 	.word	0x00006918
   15e74:	00006918 	.word	0x00006918
   15e78:	00006918 	.word	0x00006918
   15e7c:	00006918 	.word	0x00006918
   15e80:	00006918 	.word	0x00006918
   15e84:	00006918 	.word	0x00006918
   15e88:	00006918 	.word	0x00006918
   15e8c:	00006918 	.word	0x00006918
   15e90:	00006918 	.word	0x00006918
   15e94:	00006918 	.word	0x00006918
   15e98:	00006918 	.word	0x00006918
   15e9c:	00006918 	.word	0x00006918
   15ea0:	00006918 	.word	0x00006918
   15ea4:	00006918 	.word	0x00006918
   15ea8:	00006918 	.word	0x00006918
   15eac:	00006918 	.word	0x00006918
   15eb0:	00006918 	.word	0x00006918
   15eb4:	00006918 	.word	0x00006918
   15eb8:	00006918 	.word	0x00006918
   15ebc:	00006918 	.word	0x00006918
   15ec0:	00006918 	.word	0x00006918
   15ec4:	00006918 	.word	0x00006918
   15ec8:	00006918 	.word	0x00006918
   15ecc:	00006918 	.word	0x00006918
   15ed0:	00006918 	.word	0x00006918
   15ed4:	00006918 	.word	0x00006918
   15ed8:	00006918 	.word	0x00006918
   15edc:	00006918 	.word	0x00006918
   15ee0:	00006918 	.word	0x00006918
   15ee4:	00006918 	.word	0x00006918
   15ee8:	00006918 	.word	0x00006918
   15eec:	00006918 	.word	0x00006918
   15ef0:	00006918 	.word	0x00006918
   15ef4:	00006918 	.word	0x00006918
   15ef8:	00006918 	.word	0x00006918
   15efc:	00006918 	.word	0x00006918
   15f00:	00006918 	.word	0x00006918
   15f04:	00006918 	.word	0x00006918
   15f08:	00006918 	.word	0x00006918
   15f0c:	00006918 	.word	0x00006918
   15f10:	00006918 	.word	0x00006918
   15f14:	00006918 	.word	0x00006918
   15f18:	00006918 	.word	0x00006918
   15f1c:	00006918 	.word	0x00006918
   15f20:	00006918 	.word	0x00006918
   15f24:	00006918 	.word	0x00006918
   15f28:	00006918 	.word	0x00006918
   15f2c:	00006918 	.word	0x00006918
   15f30:	00006918 	.word	0x00006918
   15f34:	00006918 	.word	0x00006918
   15f38:	00006918 	.word	0x00006918
   15f3c:	00006918 	.word	0x00006918
   15f40:	00006918 	.word	0x00006918
   15f44:	00006918 	.word	0x00006918
   15f48:	00006918 	.word	0x00006918
   15f4c:	00006918 	.word	0x00006918
   15f50:	00006918 	.word	0x00006918
   15f54:	000068f4 	.word	0x000068f4
   15f58:	000068f4 	.word	0x000068f4
   15f5c:	000068fc 	.word	0x000068fc
   15f60:	000068fc 	.word	0x000068fc
   15f64:	000068fc 	.word	0x000068fc
   15f68:	000068fc 	.word	0x000068fc
   15f6c:	42000800 	.word	0x42000800
   15f70:	42000c00 	.word	0x42000c00
   15f74:	42001000 	.word	0x42001000
   15f78:	42001400 	.word	0x42001400
   15f7c:	42001800 	.word	0x42001800
   15f80:	42001c00 	.word	0x42001c00
   15f84:	00007e96 	.word	0x00007e96
   15f88:	00007e92 	.word	0x00007e92
   15f8c:	00007e92 	.word	0x00007e92
   15f90:	00007ef8 	.word	0x00007ef8
   15f94:	00007ef8 	.word	0x00007ef8
   15f98:	00007eaa 	.word	0x00007eaa
   15f9c:	00007e9c 	.word	0x00007e9c
   15fa0:	00007eb0 	.word	0x00007eb0
   15fa4:	00007ee6 	.word	0x00007ee6
   15fa8:	00008134 	.word	0x00008134
   15fac:	00008114 	.word	0x00008114
   15fb0:	00008114 	.word	0x00008114
   15fb4:	000081a0 	.word	0x000081a0
   15fb8:	00008126 	.word	0x00008126
   15fbc:	00008142 	.word	0x00008142
   15fc0:	00008118 	.word	0x00008118
   15fc4:	00008150 	.word	0x00008150
   15fc8:	00008190 	.word	0x00008190
   15fcc:	42002c00 	.word	0x42002c00
   15fd0:	42003000 	.word	0x42003000
   15fd4:	42003400 	.word	0x42003400
   15fd8:	626d756e 	.word	0x626d756e
   15fdc:	664f7265 	.word	0x664f7265
   15fe0:	65747942 	.word	0x65747942
   15fe4:	00000073 	.word	0x00000073
   15fe8:	732f2e2e 	.word	0x732f2e2e
   15fec:	412f6372 	.word	0x412f6372
   15ff0:	742f4653 	.word	0x742f4653
   15ff4:	64726968 	.word	0x64726968
   15ff8:	74726170 	.word	0x74726170
   15ffc:	69772f79 	.word	0x69772f79
   16000:	656c6572 	.word	0x656c6572
   16004:	6d2f7373 	.word	0x6d2f7373
   16008:	2f697769 	.word	0x2f697769
   1600c:	76726573 	.word	0x76726573
   16010:	73656369 	.word	0x73656369
   16014:	7364702f 	.word	0x7364702f
   16018:	6372732f 	.word	0x6372732f
   1601c:	2f766e2f 	.word	0x2f766e2f
   16020:	764e5f44 	.word	0x764e5f44
   16024:	0000632e 	.word	0x0000632e
   16028:	72646461 	.word	0x72646461
   1602c:	20737365 	.word	0x20737365
   16030:	44203d3c 	.word	0x44203d3c
   16034:	5f564e5f 	.word	0x5f564e5f
   16038:	4f4d454d 	.word	0x4f4d454d
   1603c:	455f5952 	.word	0x455f5952
   16040:	0000444e 	.word	0x0000444e
   16044:	64646128 	.word	0x64646128
   16048:	73736572 	.word	0x73736572
   1604c:	6e202b20 	.word	0x6e202b20
   16050:	65626d75 	.word	0x65626d75
   16054:	42664f72 	.word	0x42664f72
   16058:	73657479 	.word	0x73657479
   1605c:	3d3c2029 	.word	0x3d3c2029
   16060:	5f442820 	.word	0x5f442820
   16064:	4d5f564e 	.word	0x4d5f564e
   16068:	524f4d45 	.word	0x524f4d45
   1606c:	4e455f59 	.word	0x4e455f59
   16070:	202b2044 	.word	0x202b2044
   16074:	00295531 	.word	0x00295531
   16078:	66666f28 	.word	0x66666f28
   1607c:	20746573 	.word	0x20746573
   16080:	756e202b 	.word	0x756e202b
   16084:	7265626d 	.word	0x7265626d
   16088:	7942664f 	.word	0x7942664f
   1608c:	29736574 	.word	0x29736574
   16090:	203d3c20 	.word	0x203d3c20
   16094:	564e5f44 	.word	0x564e5f44
   16098:	4345535f 	.word	0x4345535f
   1609c:	5f524f54 	.word	0x5f524f54
   160a0:	455a4953 	.word	0x455a4953
   160a4:	ffffff00 	.word	0xffffff00
   160a8:	4e5f4428 	.word	0x4e5f4428
   160ac:	454d5f56 	.word	0x454d5f56
   160b0:	59524f4d 	.word	0x59524f4d
   160b4:	4154535f 	.word	0x4154535f
   160b8:	25205452 	.word	0x25205452
   160bc:	4d564e20 	.word	0x4d564e20
   160c0:	4c525443 	.word	0x4c525443
   160c4:	574f525f 	.word	0x574f525f
   160c8:	5a49535f 	.word	0x5a49535f
   160cc:	3d202945 	.word	0x3d202945
   160d0:	5530203d 	.word	0x5530203d
   160d4:	00000000 	.word	0x00000000
   160d8:	4e5f4428 	.word	0x4e5f4428
   160dc:	454d5f56 	.word	0x454d5f56
   160e0:	59524f4d 	.word	0x59524f4d
   160e4:	444e455f 	.word	0x444e455f
   160e8:	44202d20 	.word	0x44202d20
   160ec:	5f564e5f 	.word	0x5f564e5f
   160f0:	4f4d454d 	.word	0x4f4d454d
   160f4:	535f5952 	.word	0x535f5952
   160f8:	54524154 	.word	0x54524154
   160fc:	31202b20 	.word	0x31202b20
   16100:	3d202955 	.word	0x3d202955
   16104:	5f44203d 	.word	0x5f44203d
   16108:	4d5f564e 	.word	0x4d5f564e
   1610c:	524f4d45 	.word	0x524f4d45
   16110:	49535f59 	.word	0x49535f59
   16114:	ff00455a 	.word	0xff00455a

00016118 <__func__.11827>:
   16118:	764e5f44 696e495f ffff0074              D_Nv_Init...

00016124 <__func__.11839>:
   16124:	764e5f44 6165525f 6d495f64 ff006c70     D_Nv_Read_Impl..

00016134 <__func__.11852>:
   16134:	764e5f44 6972575f 495f6574 006c706d     D_Nv_Write_Impl.

00016144 <__func__.11864>:
   16144:	764e5f44 6172455f 65536573 726f7463     D_Nv_EraseSector
   16154:	706d495f ffff006c                       _Impl...

0001615c <__func__.11877>:
   1615c:	706d6f43 44657261 00617461 68636163     CompareData.cach
   1616c:	3d212065 4c554e20 ffff004c 736c6166     e != NULL...fals
   1617c:	ffff0065 646e6946 6d657449 68636143     e...FindItemCach
   1618c:	64692865 3d3d2029 4c554e20 0000004c     e(id) == NULL...
   1619c:	74695f73 6f436d65 20746e75 414d203c     s_itemCount < MA
   161ac:	54495f58 435f4d45 544e554f ffffff00     X_ITEM_COUNT....
   161bc:	646e6946 6d657449 68636143 64692865     FindItemCache(id
   161cc:	3d212029 4c554e20 ffff004c 68636163     ) != NULL...cach
   161dc:	6c3e2d65 42747361 6b636f6c 203d2120     e->lastBlock != 
   161ec:	30307830 00003030 732f2e2e 412f6372     0x0000..../src/A
   161fc:	742f4653 64726968 74726170 69772f79     SF/thirdparty/wi
   1620c:	656c6572 6d2f7373 2f697769 76726573     reless/miwi/serv
   1621c:	73656369 7364702f 6372732f 2f766e2f     ices/pds/src/nv/
   1622c:	764e5f53 6d61532d 2e313252 ffff0063     S_Nv-SamR21.c...
   1623c:	20646928 30203d21 26202975 69282026     (id != 0u) && (i
   1624c:	203c2064 30467830 29753030 20262620     d < 0xF000u) && 
   1625c:	65746928 6e654c6d 20687467 4d203d3c     (itemLength <= M
   1626c:	495f5841 5f4d4554 474e454c 00294854     AX_ITEM_LENGTH).
   1627c:	21206469 7530203d ffffff00 20646928     id != 0u....(id 
   1628c:	30203d21 26202975 70282026 61746144     != 0u) && (pData
   1629c:	203d2120 4c4c554e ffff0029               != NULL)...

000162a8 <__func__.11868>:
   162a8:	706d6f63 53746361 6f746365 6d695472     compactSectorTim
   162b8:	69467265 00646572                       erFired.

000162c0 <__func__.11904>:
   162c0:	646e6946 6d657449 68636143 ffff0065     FindItemCache...

000162d0 <__func__.11911>:
   162d0:	61657243 74496574 61436d65 00656863     CreateItemCache.

000162e0 <__func__.11916>:
   162e0:	656c6544 74496574 61436d65 00656863     DeleteItemCache.

000162f0 <__func__.12009>:
   162f0:	64616f4c 74636553 ff00726f              LoadSector..

000162fc <__func__.12031>:
   162fc:	706d6f43 53746361 6f746365 ffff0072     CompactSector...

0001630c <__func__.12051>:
   1630c:	706d6f43 53746361 6f746365 4e664972     CompactSectorIfN
   1631c:	65646565 ffff0064                       eeded...

00016324 <__func__.12058>:
   16324:	706d6f43 49746361 006d6574              CompactItem.

00016330 <__func__.12082>:
   16330:	764e5f53 7261455f 6e49796c ff007469     S_Nv_EarlyInit..

00016340 <__func__.12092>:
   16340:	764e5f53 6574495f 696e496d 6d495f74     S_Nv_ItemInit_Im
   16350:	ff006c70                                pl..

00016354 <__func__.12105>:
   16354:	764e5f53 6972575f 495f6574 006c706d     S_Nv_Write_Impl.

00016364 <__func__.12116>:
   16364:	764e5f53 6165525f 6d495f64 ff006c70     S_Nv_Read_Impl..

00016374 <__func__.12121>:
   16374:	764e5f53 6574495f 6e654c6d 5f687467     S_Nv_ItemLength_
   16384:	6c706d49 ffffff00 20553028 69203d21     Impl....(0U != i
   16394:	446d6574 72637365 6574692e 7a69536d     temDescr.itemSiz
   163a4:	26202965 4e282026 204c4c55 69203d21     e) && (NULL != i
   163b4:	446d6574 72637365 6574692e 7461446d     temDescr.itemDat
   163c4:	00002961 732f2e2e 412f6372 742f4653     a)..../src/ASF/t
   163d4:	64726968 74726170 69772f79 656c6572     hirdparty/wirele
   163e4:	6d2f7373 2f697769 76726573 73656369     ss/miwi/services
   163f4:	7364702f 6372732f 2f6c772f 64506c77     /pds/src/wl/wlPd
   16404:	74614473 72655361 2e726576 00000063     sDataServer.c...
   16414:	4e5f5328 65525f76 6e727574 756c6156     (S_Nv_ReturnValu
   16424:	69445f65 746f4e64 73697845 3d3d2074     e_DidNotExist ==
   16434:	74657220 7c7c2029 5f532820 525f764e      ret) || (S_Nv_R
   16444:	72757465 6c61566e 4f5f6575 3d3d206b     eturnValue_Ok ==
   16454:	74657220 ffff0029                        ret)...

0001645c <__func__.11783>:
   1645c:	53736470 65726f74 6d657449 6b736154     pdsStoreItemTask
   1646c:	646e6148 0072656c                       Handler.

00016474 <__func__.11803>:
   16474:	53736470 65726f74 6d657449 ffffff00     pdsStoreItem....

00016484 <__func__.11810>:
   16484:	52736470 6f747365 74496572 ff006d65     pdsRestoreItem..
   16494:	20746572 53203d3d 5f764e5f 75746552     ret == S_Nv_Retu
   164a4:	61566e72 5f65756c ff006b4f 6d657469     rnValue_Ok..item
   164b4:	63736544 6574692e 7a69536d 00000065     Desc.itemSize...
   164c4:	732f2e2e 412f6372 742f4653 64726968     ../src/ASF/third
   164d4:	74726170 69772f79 656c6572 6d2f7373     party/wireless/m
   164e4:	2f697769 76726573 73656369 7364702f     iwi/services/pds
   164f4:	6372732f 2f6c772f 64506c77 696e4973     /src/wl/wlPdsIni
   16504:	00632e74                                t.c.

00016508 <__func__.11541>:
   16508:	5f534450 74696e49 6d657449 ffff0073     PDS_InitItems...
   16518:	0000ab4c 0000aa12 0000ab4c 0000ab4c     L.......L...L...
   16528:	0000ab4c 0000ab4c 0000aa2c 0000aa7e     L...L...,...~...
   16538:	0000aacc 0000a9c0 0000ab4c 0000aa12     ........L.......
   16548:	0000ab4c 0000ab4c 0000ab4c 0000ab4c     L...L...L...L...
   16558:	0000aa2c 0000aa7a 0000aacc 0000a9c6     ,...z...........

00016568 <__func__.11989>:
   16568:	61647075 6f4e6574 656c536e 65447065     updateNonSleepDe
   16578:	62615476 ff00656c                       vTable..

00016580 <__func__.12001>:
   16580:	61647075 6c536574 44706565 61547665     updateSleepDevTa
   16590:	00656c62                                ble.

00016594 <__func__.12013>:
   16594:	61647075 6f436574 5264726f 6574756f     updateCoordRoute
   165a4:	6c626154 ffff0065                       Table...

000165ac <__func__.12025>:
   165ac:	61647075 6f436574 4864726f 6154706f     updateCoordHopTa
   165bc:	00656c62                                ble.

000165c0 <__func__.12045>:
   165c0:	69726576 74497966 69536d65 0073657a     verifyItemSizes.
   165d0:	4970616d 2e6d6574 67616c66 20262073     mapItem.flags & 
   165e0:	455a4953 444f4d5f 43494649 4f495441     SIZE_MODIFICATIO
   165f0:	4c415f4e 45574f4c 00000044 732f2e2e     N_ALLOWED...../s
   16600:	412f6372 742f4653 64726968 74726170     rc/ASF/thirdpart
   16610:	69772f79 656c6572 6d2f7373 2f697769     y/wireless/miwi/
   16620:	76726573 73656369 7364702f 6372732f     services/pds/src
   16630:	2f6c772f 64506c77 70795473 6f437365     /wl/wlPdsTypesCo
   16640:	7265766e 2e726574 00000063              nverter.c...

0001664c <MiWiItemIdsTable>:
   1664c:	00020001 00040003 00070006 00090008     ................
   1665c:	0000b830 0000b97a 0000b808 0000b982     0...z...........
   1666c:	0000b810 0000b818 0000b820 0000b828     ........ ...(...

0001667c <tc_interrupt_vectors.11960>:
   1667c:	ff141312 00020028 2000008c 00000000     ....(...... ....
   1668c:	0000db0a 0000db14 0000db24 0000db28     ........$...(...
   1669c:	0000db3a 0000db2c 0000db00 00010dd6     :...,...........
   166ac:	00010e0e 00010ebc 00010d3e 00010f04     ........>.......
   166bc:	00010dd6 00010f30 00010fc8 00010de4     ....0...........
   166cc:	00012cfc 00012ccc 00012cde 00012c20     .,...,...,.. ,..
   166dc:	00012cde 00012cc2 00012cde 00012c20     .,...,...,.. ,..
   166ec:	00012ccc 00012ccc 00012cc2 00012c20     .,...,...,.. ,..
   166fc:	00012c28 00012c28 00012c28 00012ce4     (,..(,..(,...,..
   1670c:	00012ccc 00012ccc 00012ca0 00012d84     .,...,...,...-..
   1671c:	00012ca0 00012cc2 00012ca0 00012d84     .,...,...,...-..
   1672c:	00012ccc 00012ccc 00012cc2 00012d84     .,...,...,...-..
   1673c:	00012c28 00012c28 00012c28 00012d8e     (,..(,..(,...-..
   1674c:	00013b6c 00013b4e 00013b08 00013a26     l;..N;...;..&:..
   1675c:	00013b08 00013b40 00013b08 00013a26     .;..@;...;..&:..
   1676c:	00013b4e 00013b4e 00013b40 00013a26     N;..N;..@;..&:..
   1677c:	00013a1e 00013a1e 00013a1e 00013d84     .:...:...:...=..
   1678c:	000141cc 0001408c 0001408c 00014088     .A...@...@...@..
   1679c:	000141a4 000141a4 00014196 00014088     .A...A...A...@..
   167ac:	000141a4 00014196 000141a4 00014088     .A...A...A...@..
   167bc:	000141ac 000141ac 000141ac 000143b0     .A...A...A...C..
   167cc:	7566202c 6974636e 203a6e6f 73736100     , function: .ass
   167dc:	69747265 22206e6f 20227325 6c696166     ertion "%s" fail
   167ec:	203a6465 656c6966 73252220 6c202c22     ed: file "%s", l
   167fc:	20656e69 73256425 000a7325              ine %d%s%s..

00016808 <_global_impure_ptr>:
   16808:	200000a4 2b302d23 6c680020 6665004c     ... #-0+ .hlL.ef
   16818:	47464567 32313000 36353433 41393837     gEFG.0123456789A
   16828:	45444342 31300046 35343332 39383736     BCDEF.0123456789
   16838:	64636261 ff006665                       abcdef..

00016840 <__sf_fake_stderr>:
	...

00016860 <__sf_fake_stdin>:
	...

00016880 <__sf_fake_stdout>:
	...

000168a0 <_init>:
   168a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   168a2:	46c0      	nop			; (mov r8, r8)
   168a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
   168a6:	bc08      	pop	{r3}
   168a8:	469e      	mov	lr, r3
   168aa:	4770      	bx	lr

000168ac <__init_array_start>:
   168ac:	000061c1 	.word	0x000061c1

000168b0 <_fini>:
   168b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   168b2:	46c0      	nop			; (mov r8, r8)
   168b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
   168b6:	bc08      	pop	{r3}
   168b8:	469e      	mov	lr, r3
   168ba:	4770      	bx	lr

000168bc <__fini_array_start>:
   168bc:	00006199 	.word	0x00006199
