
MASTERS_LIGHTDEVICE.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00016960  00000000  00000000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     00000104  20000000  00016960  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00002814  20000108  00016a68  00030104  2**3
                  ALLOC
  3 .stack        00000e04  2000291c  0001927c  00030104  2**0
                  ALLOC
  4 .ARM.attributes 00000028  00000000  00000000  00030104  2**0
                  CONTENTS, READONLY
  5 .comment      0000008c  00000000  00000000  0003012c  2**0
                  CONTENTS, READONLY
  6 .debug_info   00060a9e  00000000  00000000  000301b8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00009f43  00000000  00000000  00090c56  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    00014306  00000000  00000000  0009ab99  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_aranges 00000eb0  00000000  00000000  000aee9f  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 000019f0  00000000  00000000  000afd4f  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_macro  00025b9c  00000000  00000000  000b173f  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   00022ae0  00000000  00000000  000d72db  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    0008fd66  00000000  00000000  000f9dbb  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_frame  000031e0  00000000  00000000  00189b24  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <exception_table>:
       0:	20 37 00 20 3d 8b 00 00 39 8b 00 00 39 8b 00 00      7. =...9...9...
	...
      2c:	39 8b 00 00 00 00 00 00 00 00 00 00 39 8b 00 00     9...........9...
      3c:	39 8b 00 00 39 8b 00 00 39 8b 00 00 39 8b 00 00     9...9...9...9...
      4c:	39 8b 00 00 fd 66 00 00 39 8b 00 00 39 8b 00 00     9....f..9...9...
      5c:	39 8b 00 00 39 8b 00 00 cd 74 00 00 dd 74 00 00     9...9....t...t..
      6c:	ed 74 00 00 fd 74 00 00 0d 75 00 00 1d 75 00 00     .t...t...u...u..
      7c:	39 8b 00 00 39 8b 00 00 39 8b 00 00 19 88 00 00     9...9...9.......
      8c:	29 88 00 00 39 88 00 00 00 00 00 00 00 00 00 00     )...9...........
      9c:	39 8b 00 00 39 8b 00 00 00 00 00 00 39 8b 00 00     9...9.......9...
	...

00002100 <__d_nv_mem_start>:
    2100:	ffffffff 	.word	0xffffffff
    2104:	ffffffff 	.word	0xffffffff
    2108:	ffffffff 	.word	0xffffffff
    210c:	ffffffff 	.word	0xffffffff
    2110:	ffffffff 	.word	0xffffffff
    2114:	ffffffff 	.word	0xffffffff
    2118:	ffffffff 	.word	0xffffffff
    211c:	ffffffff 	.word	0xffffffff
    2120:	ffffffff 	.word	0xffffffff
    2124:	ffffffff 	.word	0xffffffff
    2128:	ffffffff 	.word	0xffffffff
    212c:	ffffffff 	.word	0xffffffff
    2130:	ffffffff 	.word	0xffffffff
    2134:	ffffffff 	.word	0xffffffff
    2138:	ffffffff 	.word	0xffffffff
    213c:	ffffffff 	.word	0xffffffff
    2140:	ffffffff 	.word	0xffffffff
    2144:	ffffffff 	.word	0xffffffff
    2148:	ffffffff 	.word	0xffffffff
    214c:	ffffffff 	.word	0xffffffff
    2150:	ffffffff 	.word	0xffffffff
    2154:	ffffffff 	.word	0xffffffff
    2158:	ffffffff 	.word	0xffffffff
    215c:	ffffffff 	.word	0xffffffff
    2160:	ffffffff 	.word	0xffffffff
    2164:	ffffffff 	.word	0xffffffff
    2168:	ffffffff 	.word	0xffffffff
    216c:	ffffffff 	.word	0xffffffff
    2170:	ffffffff 	.word	0xffffffff
    2174:	ffffffff 	.word	0xffffffff
    2178:	ffffffff 	.word	0xffffffff
    217c:	ffffffff 	.word	0xffffffff
    2180:	ffffffff 	.word	0xffffffff
    2184:	ffffffff 	.word	0xffffffff
    2188:	ffffffff 	.word	0xffffffff
    218c:	ffffffff 	.word	0xffffffff
    2190:	ffffffff 	.word	0xffffffff
    2194:	ffffffff 	.word	0xffffffff
    2198:	ffffffff 	.word	0xffffffff
    219c:	ffffffff 	.word	0xffffffff
    21a0:	ffffffff 	.word	0xffffffff
    21a4:	ffffffff 	.word	0xffffffff
    21a8:	ffffffff 	.word	0xffffffff
    21ac:	ffffffff 	.word	0xffffffff
    21b0:	ffffffff 	.word	0xffffffff
    21b4:	ffffffff 	.word	0xffffffff
    21b8:	ffffffff 	.word	0xffffffff
    21bc:	ffffffff 	.word	0xffffffff
    21c0:	ffffffff 	.word	0xffffffff
    21c4:	ffffffff 	.word	0xffffffff
    21c8:	ffffffff 	.word	0xffffffff
    21cc:	ffffffff 	.word	0xffffffff
    21d0:	ffffffff 	.word	0xffffffff
    21d4:	ffffffff 	.word	0xffffffff
    21d8:	ffffffff 	.word	0xffffffff
    21dc:	ffffffff 	.word	0xffffffff
    21e0:	ffffffff 	.word	0xffffffff
    21e4:	ffffffff 	.word	0xffffffff
    21e8:	ffffffff 	.word	0xffffffff
    21ec:	ffffffff 	.word	0xffffffff
    21f0:	ffffffff 	.word	0xffffffff
    21f4:	ffffffff 	.word	0xffffffff
    21f8:	ffffffff 	.word	0xffffffff
    21fc:	ffffffff 	.word	0xffffffff
    2200:	ffffffff 	.word	0xffffffff
    2204:	ffffffff 	.word	0xffffffff
    2208:	ffffffff 	.word	0xffffffff
    220c:	ffffffff 	.word	0xffffffff
    2210:	ffffffff 	.word	0xffffffff
    2214:	ffffffff 	.word	0xffffffff
    2218:	ffffffff 	.word	0xffffffff
    221c:	ffffffff 	.word	0xffffffff
    2220:	ffffffff 	.word	0xffffffff
    2224:	ffffffff 	.word	0xffffffff
    2228:	ffffffff 	.word	0xffffffff
    222c:	ffffffff 	.word	0xffffffff
    2230:	ffffffff 	.word	0xffffffff
    2234:	ffffffff 	.word	0xffffffff
    2238:	ffffffff 	.word	0xffffffff
    223c:	ffffffff 	.word	0xffffffff
    2240:	ffffffff 	.word	0xffffffff
    2244:	ffffffff 	.word	0xffffffff
    2248:	ffffffff 	.word	0xffffffff
    224c:	ffffffff 	.word	0xffffffff
    2250:	ffffffff 	.word	0xffffffff
    2254:	ffffffff 	.word	0xffffffff
    2258:	ffffffff 	.word	0xffffffff
    225c:	ffffffff 	.word	0xffffffff
    2260:	ffffffff 	.word	0xffffffff
    2264:	ffffffff 	.word	0xffffffff
    2268:	ffffffff 	.word	0xffffffff
    226c:	ffffffff 	.word	0xffffffff
    2270:	ffffffff 	.word	0xffffffff
    2274:	ffffffff 	.word	0xffffffff
    2278:	ffffffff 	.word	0xffffffff
    227c:	ffffffff 	.word	0xffffffff
    2280:	ffffffff 	.word	0xffffffff
    2284:	ffffffff 	.word	0xffffffff
    2288:	ffffffff 	.word	0xffffffff
    228c:	ffffffff 	.word	0xffffffff
    2290:	ffffffff 	.word	0xffffffff
    2294:	ffffffff 	.word	0xffffffff
    2298:	ffffffff 	.word	0xffffffff
    229c:	ffffffff 	.word	0xffffffff
    22a0:	ffffffff 	.word	0xffffffff
    22a4:	ffffffff 	.word	0xffffffff
    22a8:	ffffffff 	.word	0xffffffff
    22ac:	ffffffff 	.word	0xffffffff
    22b0:	ffffffff 	.word	0xffffffff
    22b4:	ffffffff 	.word	0xffffffff
    22b8:	ffffffff 	.word	0xffffffff
    22bc:	ffffffff 	.word	0xffffffff
    22c0:	ffffffff 	.word	0xffffffff
    22c4:	ffffffff 	.word	0xffffffff
    22c8:	ffffffff 	.word	0xffffffff
    22cc:	ffffffff 	.word	0xffffffff
    22d0:	ffffffff 	.word	0xffffffff
    22d4:	ffffffff 	.word	0xffffffff
    22d8:	ffffffff 	.word	0xffffffff
    22dc:	ffffffff 	.word	0xffffffff
    22e0:	ffffffff 	.word	0xffffffff
    22e4:	ffffffff 	.word	0xffffffff
    22e8:	ffffffff 	.word	0xffffffff
    22ec:	ffffffff 	.word	0xffffffff
    22f0:	ffffffff 	.word	0xffffffff
    22f4:	ffffffff 	.word	0xffffffff
    22f8:	ffffffff 	.word	0xffffffff
    22fc:	ffffffff 	.word	0xffffffff
    2300:	ffffffff 	.word	0xffffffff
    2304:	ffffffff 	.word	0xffffffff
    2308:	ffffffff 	.word	0xffffffff
    230c:	ffffffff 	.word	0xffffffff
    2310:	ffffffff 	.word	0xffffffff
    2314:	ffffffff 	.word	0xffffffff
    2318:	ffffffff 	.word	0xffffffff
    231c:	ffffffff 	.word	0xffffffff
    2320:	ffffffff 	.word	0xffffffff
    2324:	ffffffff 	.word	0xffffffff
    2328:	ffffffff 	.word	0xffffffff
    232c:	ffffffff 	.word	0xffffffff
    2330:	ffffffff 	.word	0xffffffff
    2334:	ffffffff 	.word	0xffffffff
    2338:	ffffffff 	.word	0xffffffff
    233c:	ffffffff 	.word	0xffffffff
    2340:	ffffffff 	.word	0xffffffff
    2344:	ffffffff 	.word	0xffffffff
    2348:	ffffffff 	.word	0xffffffff
    234c:	ffffffff 	.word	0xffffffff
    2350:	ffffffff 	.word	0xffffffff
    2354:	ffffffff 	.word	0xffffffff
    2358:	ffffffff 	.word	0xffffffff
    235c:	ffffffff 	.word	0xffffffff
    2360:	ffffffff 	.word	0xffffffff
    2364:	ffffffff 	.word	0xffffffff
    2368:	ffffffff 	.word	0xffffffff
    236c:	ffffffff 	.word	0xffffffff
    2370:	ffffffff 	.word	0xffffffff
    2374:	ffffffff 	.word	0xffffffff
    2378:	ffffffff 	.word	0xffffffff
    237c:	ffffffff 	.word	0xffffffff
    2380:	ffffffff 	.word	0xffffffff
    2384:	ffffffff 	.word	0xffffffff
    2388:	ffffffff 	.word	0xffffffff
    238c:	ffffffff 	.word	0xffffffff
    2390:	ffffffff 	.word	0xffffffff
    2394:	ffffffff 	.word	0xffffffff
    2398:	ffffffff 	.word	0xffffffff
    239c:	ffffffff 	.word	0xffffffff
    23a0:	ffffffff 	.word	0xffffffff
    23a4:	ffffffff 	.word	0xffffffff
    23a8:	ffffffff 	.word	0xffffffff
    23ac:	ffffffff 	.word	0xffffffff
    23b0:	ffffffff 	.word	0xffffffff
    23b4:	ffffffff 	.word	0xffffffff
    23b8:	ffffffff 	.word	0xffffffff
    23bc:	ffffffff 	.word	0xffffffff
    23c0:	ffffffff 	.word	0xffffffff
    23c4:	ffffffff 	.word	0xffffffff
    23c8:	ffffffff 	.word	0xffffffff
    23cc:	ffffffff 	.word	0xffffffff
    23d0:	ffffffff 	.word	0xffffffff
    23d4:	ffffffff 	.word	0xffffffff
    23d8:	ffffffff 	.word	0xffffffff
    23dc:	ffffffff 	.word	0xffffffff
    23e0:	ffffffff 	.word	0xffffffff
    23e4:	ffffffff 	.word	0xffffffff
    23e8:	ffffffff 	.word	0xffffffff
    23ec:	ffffffff 	.word	0xffffffff
    23f0:	ffffffff 	.word	0xffffffff
    23f4:	ffffffff 	.word	0xffffffff
    23f8:	ffffffff 	.word	0xffffffff
    23fc:	ffffffff 	.word	0xffffffff
    2400:	ffffffff 	.word	0xffffffff
    2404:	ffffffff 	.word	0xffffffff
    2408:	ffffffff 	.word	0xffffffff
    240c:	ffffffff 	.word	0xffffffff
    2410:	ffffffff 	.word	0xffffffff
    2414:	ffffffff 	.word	0xffffffff
    2418:	ffffffff 	.word	0xffffffff
    241c:	ffffffff 	.word	0xffffffff
    2420:	ffffffff 	.word	0xffffffff
    2424:	ffffffff 	.word	0xffffffff
    2428:	ffffffff 	.word	0xffffffff
    242c:	ffffffff 	.word	0xffffffff
    2430:	ffffffff 	.word	0xffffffff
    2434:	ffffffff 	.word	0xffffffff
    2438:	ffffffff 	.word	0xffffffff
    243c:	ffffffff 	.word	0xffffffff
    2440:	ffffffff 	.word	0xffffffff
    2444:	ffffffff 	.word	0xffffffff
    2448:	ffffffff 	.word	0xffffffff
    244c:	ffffffff 	.word	0xffffffff
    2450:	ffffffff 	.word	0xffffffff
    2454:	ffffffff 	.word	0xffffffff
    2458:	ffffffff 	.word	0xffffffff
    245c:	ffffffff 	.word	0xffffffff
    2460:	ffffffff 	.word	0xffffffff
    2464:	ffffffff 	.word	0xffffffff
    2468:	ffffffff 	.word	0xffffffff
    246c:	ffffffff 	.word	0xffffffff
    2470:	ffffffff 	.word	0xffffffff
    2474:	ffffffff 	.word	0xffffffff
    2478:	ffffffff 	.word	0xffffffff
    247c:	ffffffff 	.word	0xffffffff
    2480:	ffffffff 	.word	0xffffffff
    2484:	ffffffff 	.word	0xffffffff
    2488:	ffffffff 	.word	0xffffffff
    248c:	ffffffff 	.word	0xffffffff
    2490:	ffffffff 	.word	0xffffffff
    2494:	ffffffff 	.word	0xffffffff
    2498:	ffffffff 	.word	0xffffffff
    249c:	ffffffff 	.word	0xffffffff
    24a0:	ffffffff 	.word	0xffffffff
    24a4:	ffffffff 	.word	0xffffffff
    24a8:	ffffffff 	.word	0xffffffff
    24ac:	ffffffff 	.word	0xffffffff
    24b0:	ffffffff 	.word	0xffffffff
    24b4:	ffffffff 	.word	0xffffffff
    24b8:	ffffffff 	.word	0xffffffff
    24bc:	ffffffff 	.word	0xffffffff
    24c0:	ffffffff 	.word	0xffffffff
    24c4:	ffffffff 	.word	0xffffffff
    24c8:	ffffffff 	.word	0xffffffff
    24cc:	ffffffff 	.word	0xffffffff
    24d0:	ffffffff 	.word	0xffffffff
    24d4:	ffffffff 	.word	0xffffffff
    24d8:	ffffffff 	.word	0xffffffff
    24dc:	ffffffff 	.word	0xffffffff
    24e0:	ffffffff 	.word	0xffffffff
    24e4:	ffffffff 	.word	0xffffffff
    24e8:	ffffffff 	.word	0xffffffff
    24ec:	ffffffff 	.word	0xffffffff
    24f0:	ffffffff 	.word	0xffffffff
    24f4:	ffffffff 	.word	0xffffffff
    24f8:	ffffffff 	.word	0xffffffff
    24fc:	ffffffff 	.word	0xffffffff
    2500:	ffffffff 	.word	0xffffffff
    2504:	ffffffff 	.word	0xffffffff
    2508:	ffffffff 	.word	0xffffffff
    250c:	ffffffff 	.word	0xffffffff
    2510:	ffffffff 	.word	0xffffffff
    2514:	ffffffff 	.word	0xffffffff
    2518:	ffffffff 	.word	0xffffffff
    251c:	ffffffff 	.word	0xffffffff
    2520:	ffffffff 	.word	0xffffffff
    2524:	ffffffff 	.word	0xffffffff
    2528:	ffffffff 	.word	0xffffffff
    252c:	ffffffff 	.word	0xffffffff
    2530:	ffffffff 	.word	0xffffffff
    2534:	ffffffff 	.word	0xffffffff
    2538:	ffffffff 	.word	0xffffffff
    253c:	ffffffff 	.word	0xffffffff
    2540:	ffffffff 	.word	0xffffffff
    2544:	ffffffff 	.word	0xffffffff
    2548:	ffffffff 	.word	0xffffffff
    254c:	ffffffff 	.word	0xffffffff
    2550:	ffffffff 	.word	0xffffffff
    2554:	ffffffff 	.word	0xffffffff
    2558:	ffffffff 	.word	0xffffffff
    255c:	ffffffff 	.word	0xffffffff
    2560:	ffffffff 	.word	0xffffffff
    2564:	ffffffff 	.word	0xffffffff
    2568:	ffffffff 	.word	0xffffffff
    256c:	ffffffff 	.word	0xffffffff
    2570:	ffffffff 	.word	0xffffffff
    2574:	ffffffff 	.word	0xffffffff
    2578:	ffffffff 	.word	0xffffffff
    257c:	ffffffff 	.word	0xffffffff
    2580:	ffffffff 	.word	0xffffffff
    2584:	ffffffff 	.word	0xffffffff
    2588:	ffffffff 	.word	0xffffffff
    258c:	ffffffff 	.word	0xffffffff
    2590:	ffffffff 	.word	0xffffffff
    2594:	ffffffff 	.word	0xffffffff
    2598:	ffffffff 	.word	0xffffffff
    259c:	ffffffff 	.word	0xffffffff
    25a0:	ffffffff 	.word	0xffffffff
    25a4:	ffffffff 	.word	0xffffffff
    25a8:	ffffffff 	.word	0xffffffff
    25ac:	ffffffff 	.word	0xffffffff
    25b0:	ffffffff 	.word	0xffffffff
    25b4:	ffffffff 	.word	0xffffffff
    25b8:	ffffffff 	.word	0xffffffff
    25bc:	ffffffff 	.word	0xffffffff
    25c0:	ffffffff 	.word	0xffffffff
    25c4:	ffffffff 	.word	0xffffffff
    25c8:	ffffffff 	.word	0xffffffff
    25cc:	ffffffff 	.word	0xffffffff
    25d0:	ffffffff 	.word	0xffffffff
    25d4:	ffffffff 	.word	0xffffffff
    25d8:	ffffffff 	.word	0xffffffff
    25dc:	ffffffff 	.word	0xffffffff
    25e0:	ffffffff 	.word	0xffffffff
    25e4:	ffffffff 	.word	0xffffffff
    25e8:	ffffffff 	.word	0xffffffff
    25ec:	ffffffff 	.word	0xffffffff
    25f0:	ffffffff 	.word	0xffffffff
    25f4:	ffffffff 	.word	0xffffffff
    25f8:	ffffffff 	.word	0xffffffff
    25fc:	ffffffff 	.word	0xffffffff
    2600:	ffffffff 	.word	0xffffffff
    2604:	ffffffff 	.word	0xffffffff
    2608:	ffffffff 	.word	0xffffffff
    260c:	ffffffff 	.word	0xffffffff
    2610:	ffffffff 	.word	0xffffffff
    2614:	ffffffff 	.word	0xffffffff
    2618:	ffffffff 	.word	0xffffffff
    261c:	ffffffff 	.word	0xffffffff
    2620:	ffffffff 	.word	0xffffffff
    2624:	ffffffff 	.word	0xffffffff
    2628:	ffffffff 	.word	0xffffffff
    262c:	ffffffff 	.word	0xffffffff
    2630:	ffffffff 	.word	0xffffffff
    2634:	ffffffff 	.word	0xffffffff
    2638:	ffffffff 	.word	0xffffffff
    263c:	ffffffff 	.word	0xffffffff
    2640:	ffffffff 	.word	0xffffffff
    2644:	ffffffff 	.word	0xffffffff
    2648:	ffffffff 	.word	0xffffffff
    264c:	ffffffff 	.word	0xffffffff
    2650:	ffffffff 	.word	0xffffffff
    2654:	ffffffff 	.word	0xffffffff
    2658:	ffffffff 	.word	0xffffffff
    265c:	ffffffff 	.word	0xffffffff
    2660:	ffffffff 	.word	0xffffffff
    2664:	ffffffff 	.word	0xffffffff
    2668:	ffffffff 	.word	0xffffffff
    266c:	ffffffff 	.word	0xffffffff
    2670:	ffffffff 	.word	0xffffffff
    2674:	ffffffff 	.word	0xffffffff
    2678:	ffffffff 	.word	0xffffffff
    267c:	ffffffff 	.word	0xffffffff
    2680:	ffffffff 	.word	0xffffffff
    2684:	ffffffff 	.word	0xffffffff
    2688:	ffffffff 	.word	0xffffffff
    268c:	ffffffff 	.word	0xffffffff
    2690:	ffffffff 	.word	0xffffffff
    2694:	ffffffff 	.word	0xffffffff
    2698:	ffffffff 	.word	0xffffffff
    269c:	ffffffff 	.word	0xffffffff
    26a0:	ffffffff 	.word	0xffffffff
    26a4:	ffffffff 	.word	0xffffffff
    26a8:	ffffffff 	.word	0xffffffff
    26ac:	ffffffff 	.word	0xffffffff
    26b0:	ffffffff 	.word	0xffffffff
    26b4:	ffffffff 	.word	0xffffffff
    26b8:	ffffffff 	.word	0xffffffff
    26bc:	ffffffff 	.word	0xffffffff
    26c0:	ffffffff 	.word	0xffffffff
    26c4:	ffffffff 	.word	0xffffffff
    26c8:	ffffffff 	.word	0xffffffff
    26cc:	ffffffff 	.word	0xffffffff
    26d0:	ffffffff 	.word	0xffffffff
    26d4:	ffffffff 	.word	0xffffffff
    26d8:	ffffffff 	.word	0xffffffff
    26dc:	ffffffff 	.word	0xffffffff
    26e0:	ffffffff 	.word	0xffffffff
    26e4:	ffffffff 	.word	0xffffffff
    26e8:	ffffffff 	.word	0xffffffff
    26ec:	ffffffff 	.word	0xffffffff
    26f0:	ffffffff 	.word	0xffffffff
    26f4:	ffffffff 	.word	0xffffffff
    26f8:	ffffffff 	.word	0xffffffff
    26fc:	ffffffff 	.word	0xffffffff
    2700:	ffffffff 	.word	0xffffffff
    2704:	ffffffff 	.word	0xffffffff
    2708:	ffffffff 	.word	0xffffffff
    270c:	ffffffff 	.word	0xffffffff
    2710:	ffffffff 	.word	0xffffffff
    2714:	ffffffff 	.word	0xffffffff
    2718:	ffffffff 	.word	0xffffffff
    271c:	ffffffff 	.word	0xffffffff
    2720:	ffffffff 	.word	0xffffffff
    2724:	ffffffff 	.word	0xffffffff
    2728:	ffffffff 	.word	0xffffffff
    272c:	ffffffff 	.word	0xffffffff
    2730:	ffffffff 	.word	0xffffffff
    2734:	ffffffff 	.word	0xffffffff
    2738:	ffffffff 	.word	0xffffffff
    273c:	ffffffff 	.word	0xffffffff
    2740:	ffffffff 	.word	0xffffffff
    2744:	ffffffff 	.word	0xffffffff
    2748:	ffffffff 	.word	0xffffffff
    274c:	ffffffff 	.word	0xffffffff
    2750:	ffffffff 	.word	0xffffffff
    2754:	ffffffff 	.word	0xffffffff
    2758:	ffffffff 	.word	0xffffffff
    275c:	ffffffff 	.word	0xffffffff
    2760:	ffffffff 	.word	0xffffffff
    2764:	ffffffff 	.word	0xffffffff
    2768:	ffffffff 	.word	0xffffffff
    276c:	ffffffff 	.word	0xffffffff
    2770:	ffffffff 	.word	0xffffffff
    2774:	ffffffff 	.word	0xffffffff
    2778:	ffffffff 	.word	0xffffffff
    277c:	ffffffff 	.word	0xffffffff
    2780:	ffffffff 	.word	0xffffffff
    2784:	ffffffff 	.word	0xffffffff
    2788:	ffffffff 	.word	0xffffffff
    278c:	ffffffff 	.word	0xffffffff
    2790:	ffffffff 	.word	0xffffffff
    2794:	ffffffff 	.word	0xffffffff
    2798:	ffffffff 	.word	0xffffffff
    279c:	ffffffff 	.word	0xffffffff
    27a0:	ffffffff 	.word	0xffffffff
    27a4:	ffffffff 	.word	0xffffffff
    27a8:	ffffffff 	.word	0xffffffff
    27ac:	ffffffff 	.word	0xffffffff
    27b0:	ffffffff 	.word	0xffffffff
    27b4:	ffffffff 	.word	0xffffffff
    27b8:	ffffffff 	.word	0xffffffff
    27bc:	ffffffff 	.word	0xffffffff
    27c0:	ffffffff 	.word	0xffffffff
    27c4:	ffffffff 	.word	0xffffffff
    27c8:	ffffffff 	.word	0xffffffff
    27cc:	ffffffff 	.word	0xffffffff
    27d0:	ffffffff 	.word	0xffffffff
    27d4:	ffffffff 	.word	0xffffffff
    27d8:	ffffffff 	.word	0xffffffff
    27dc:	ffffffff 	.word	0xffffffff
    27e0:	ffffffff 	.word	0xffffffff
    27e4:	ffffffff 	.word	0xffffffff
    27e8:	ffffffff 	.word	0xffffffff
    27ec:	ffffffff 	.word	0xffffffff
    27f0:	ffffffff 	.word	0xffffffff
    27f4:	ffffffff 	.word	0xffffffff
    27f8:	ffffffff 	.word	0xffffffff
    27fc:	ffffffff 	.word	0xffffffff
    2800:	ffffffff 	.word	0xffffffff
    2804:	ffffffff 	.word	0xffffffff
    2808:	ffffffff 	.word	0xffffffff
    280c:	ffffffff 	.word	0xffffffff
    2810:	ffffffff 	.word	0xffffffff
    2814:	ffffffff 	.word	0xffffffff
    2818:	ffffffff 	.word	0xffffffff
    281c:	ffffffff 	.word	0xffffffff
    2820:	ffffffff 	.word	0xffffffff
    2824:	ffffffff 	.word	0xffffffff
    2828:	ffffffff 	.word	0xffffffff
    282c:	ffffffff 	.word	0xffffffff
    2830:	ffffffff 	.word	0xffffffff
    2834:	ffffffff 	.word	0xffffffff
    2838:	ffffffff 	.word	0xffffffff
    283c:	ffffffff 	.word	0xffffffff
    2840:	ffffffff 	.word	0xffffffff
    2844:	ffffffff 	.word	0xffffffff
    2848:	ffffffff 	.word	0xffffffff
    284c:	ffffffff 	.word	0xffffffff
    2850:	ffffffff 	.word	0xffffffff
    2854:	ffffffff 	.word	0xffffffff
    2858:	ffffffff 	.word	0xffffffff
    285c:	ffffffff 	.word	0xffffffff
    2860:	ffffffff 	.word	0xffffffff
    2864:	ffffffff 	.word	0xffffffff
    2868:	ffffffff 	.word	0xffffffff
    286c:	ffffffff 	.word	0xffffffff
    2870:	ffffffff 	.word	0xffffffff
    2874:	ffffffff 	.word	0xffffffff
    2878:	ffffffff 	.word	0xffffffff
    287c:	ffffffff 	.word	0xffffffff
    2880:	ffffffff 	.word	0xffffffff
    2884:	ffffffff 	.word	0xffffffff
    2888:	ffffffff 	.word	0xffffffff
    288c:	ffffffff 	.word	0xffffffff
    2890:	ffffffff 	.word	0xffffffff
    2894:	ffffffff 	.word	0xffffffff
    2898:	ffffffff 	.word	0xffffffff
    289c:	ffffffff 	.word	0xffffffff
    28a0:	ffffffff 	.word	0xffffffff
    28a4:	ffffffff 	.word	0xffffffff
    28a8:	ffffffff 	.word	0xffffffff
    28ac:	ffffffff 	.word	0xffffffff
    28b0:	ffffffff 	.word	0xffffffff
    28b4:	ffffffff 	.word	0xffffffff
    28b8:	ffffffff 	.word	0xffffffff
    28bc:	ffffffff 	.word	0xffffffff
    28c0:	ffffffff 	.word	0xffffffff
    28c4:	ffffffff 	.word	0xffffffff
    28c8:	ffffffff 	.word	0xffffffff
    28cc:	ffffffff 	.word	0xffffffff
    28d0:	ffffffff 	.word	0xffffffff
    28d4:	ffffffff 	.word	0xffffffff
    28d8:	ffffffff 	.word	0xffffffff
    28dc:	ffffffff 	.word	0xffffffff
    28e0:	ffffffff 	.word	0xffffffff
    28e4:	ffffffff 	.word	0xffffffff
    28e8:	ffffffff 	.word	0xffffffff
    28ec:	ffffffff 	.word	0xffffffff
    28f0:	ffffffff 	.word	0xffffffff
    28f4:	ffffffff 	.word	0xffffffff
    28f8:	ffffffff 	.word	0xffffffff
    28fc:	ffffffff 	.word	0xffffffff
    2900:	ffffffff 	.word	0xffffffff
    2904:	ffffffff 	.word	0xffffffff
    2908:	ffffffff 	.word	0xffffffff
    290c:	ffffffff 	.word	0xffffffff
    2910:	ffffffff 	.word	0xffffffff
    2914:	ffffffff 	.word	0xffffffff
    2918:	ffffffff 	.word	0xffffffff
    291c:	ffffffff 	.word	0xffffffff
    2920:	ffffffff 	.word	0xffffffff
    2924:	ffffffff 	.word	0xffffffff
    2928:	ffffffff 	.word	0xffffffff
    292c:	ffffffff 	.word	0xffffffff
    2930:	ffffffff 	.word	0xffffffff
    2934:	ffffffff 	.word	0xffffffff
    2938:	ffffffff 	.word	0xffffffff
    293c:	ffffffff 	.word	0xffffffff
    2940:	ffffffff 	.word	0xffffffff
    2944:	ffffffff 	.word	0xffffffff
    2948:	ffffffff 	.word	0xffffffff
    294c:	ffffffff 	.word	0xffffffff
    2950:	ffffffff 	.word	0xffffffff
    2954:	ffffffff 	.word	0xffffffff
    2958:	ffffffff 	.word	0xffffffff
    295c:	ffffffff 	.word	0xffffffff
    2960:	ffffffff 	.word	0xffffffff
    2964:	ffffffff 	.word	0xffffffff
    2968:	ffffffff 	.word	0xffffffff
    296c:	ffffffff 	.word	0xffffffff
    2970:	ffffffff 	.word	0xffffffff
    2974:	ffffffff 	.word	0xffffffff
    2978:	ffffffff 	.word	0xffffffff
    297c:	ffffffff 	.word	0xffffffff
    2980:	ffffffff 	.word	0xffffffff
    2984:	ffffffff 	.word	0xffffffff
    2988:	ffffffff 	.word	0xffffffff
    298c:	ffffffff 	.word	0xffffffff
    2990:	ffffffff 	.word	0xffffffff
    2994:	ffffffff 	.word	0xffffffff
    2998:	ffffffff 	.word	0xffffffff
    299c:	ffffffff 	.word	0xffffffff
    29a0:	ffffffff 	.word	0xffffffff
    29a4:	ffffffff 	.word	0xffffffff
    29a8:	ffffffff 	.word	0xffffffff
    29ac:	ffffffff 	.word	0xffffffff
    29b0:	ffffffff 	.word	0xffffffff
    29b4:	ffffffff 	.word	0xffffffff
    29b8:	ffffffff 	.word	0xffffffff
    29bc:	ffffffff 	.word	0xffffffff
    29c0:	ffffffff 	.word	0xffffffff
    29c4:	ffffffff 	.word	0xffffffff
    29c8:	ffffffff 	.word	0xffffffff
    29cc:	ffffffff 	.word	0xffffffff
    29d0:	ffffffff 	.word	0xffffffff
    29d4:	ffffffff 	.word	0xffffffff
    29d8:	ffffffff 	.word	0xffffffff
    29dc:	ffffffff 	.word	0xffffffff
    29e0:	ffffffff 	.word	0xffffffff
    29e4:	ffffffff 	.word	0xffffffff
    29e8:	ffffffff 	.word	0xffffffff
    29ec:	ffffffff 	.word	0xffffffff
    29f0:	ffffffff 	.word	0xffffffff
    29f4:	ffffffff 	.word	0xffffffff
    29f8:	ffffffff 	.word	0xffffffff
    29fc:	ffffffff 	.word	0xffffffff
    2a00:	ffffffff 	.word	0xffffffff
    2a04:	ffffffff 	.word	0xffffffff
    2a08:	ffffffff 	.word	0xffffffff
    2a0c:	ffffffff 	.word	0xffffffff
    2a10:	ffffffff 	.word	0xffffffff
    2a14:	ffffffff 	.word	0xffffffff
    2a18:	ffffffff 	.word	0xffffffff
    2a1c:	ffffffff 	.word	0xffffffff
    2a20:	ffffffff 	.word	0xffffffff
    2a24:	ffffffff 	.word	0xffffffff
    2a28:	ffffffff 	.word	0xffffffff
    2a2c:	ffffffff 	.word	0xffffffff
    2a30:	ffffffff 	.word	0xffffffff
    2a34:	ffffffff 	.word	0xffffffff
    2a38:	ffffffff 	.word	0xffffffff
    2a3c:	ffffffff 	.word	0xffffffff
    2a40:	ffffffff 	.word	0xffffffff
    2a44:	ffffffff 	.word	0xffffffff
    2a48:	ffffffff 	.word	0xffffffff
    2a4c:	ffffffff 	.word	0xffffffff
    2a50:	ffffffff 	.word	0xffffffff
    2a54:	ffffffff 	.word	0xffffffff
    2a58:	ffffffff 	.word	0xffffffff
    2a5c:	ffffffff 	.word	0xffffffff
    2a60:	ffffffff 	.word	0xffffffff
    2a64:	ffffffff 	.word	0xffffffff
    2a68:	ffffffff 	.word	0xffffffff
    2a6c:	ffffffff 	.word	0xffffffff
    2a70:	ffffffff 	.word	0xffffffff
    2a74:	ffffffff 	.word	0xffffffff
    2a78:	ffffffff 	.word	0xffffffff
    2a7c:	ffffffff 	.word	0xffffffff
    2a80:	ffffffff 	.word	0xffffffff
    2a84:	ffffffff 	.word	0xffffffff
    2a88:	ffffffff 	.word	0xffffffff
    2a8c:	ffffffff 	.word	0xffffffff
    2a90:	ffffffff 	.word	0xffffffff
    2a94:	ffffffff 	.word	0xffffffff
    2a98:	ffffffff 	.word	0xffffffff
    2a9c:	ffffffff 	.word	0xffffffff
    2aa0:	ffffffff 	.word	0xffffffff
    2aa4:	ffffffff 	.word	0xffffffff
    2aa8:	ffffffff 	.word	0xffffffff
    2aac:	ffffffff 	.word	0xffffffff
    2ab0:	ffffffff 	.word	0xffffffff
    2ab4:	ffffffff 	.word	0xffffffff
    2ab8:	ffffffff 	.word	0xffffffff
    2abc:	ffffffff 	.word	0xffffffff
    2ac0:	ffffffff 	.word	0xffffffff
    2ac4:	ffffffff 	.word	0xffffffff
    2ac8:	ffffffff 	.word	0xffffffff
    2acc:	ffffffff 	.word	0xffffffff
    2ad0:	ffffffff 	.word	0xffffffff
    2ad4:	ffffffff 	.word	0xffffffff
    2ad8:	ffffffff 	.word	0xffffffff
    2adc:	ffffffff 	.word	0xffffffff
    2ae0:	ffffffff 	.word	0xffffffff
    2ae4:	ffffffff 	.word	0xffffffff
    2ae8:	ffffffff 	.word	0xffffffff
    2aec:	ffffffff 	.word	0xffffffff
    2af0:	ffffffff 	.word	0xffffffff
    2af4:	ffffffff 	.word	0xffffffff
    2af8:	ffffffff 	.word	0xffffffff
    2afc:	ffffffff 	.word	0xffffffff
    2b00:	ffffffff 	.word	0xffffffff
    2b04:	ffffffff 	.word	0xffffffff
    2b08:	ffffffff 	.word	0xffffffff
    2b0c:	ffffffff 	.word	0xffffffff
    2b10:	ffffffff 	.word	0xffffffff
    2b14:	ffffffff 	.word	0xffffffff
    2b18:	ffffffff 	.word	0xffffffff
    2b1c:	ffffffff 	.word	0xffffffff
    2b20:	ffffffff 	.word	0xffffffff
    2b24:	ffffffff 	.word	0xffffffff
    2b28:	ffffffff 	.word	0xffffffff
    2b2c:	ffffffff 	.word	0xffffffff
    2b30:	ffffffff 	.word	0xffffffff
    2b34:	ffffffff 	.word	0xffffffff
    2b38:	ffffffff 	.word	0xffffffff
    2b3c:	ffffffff 	.word	0xffffffff
    2b40:	ffffffff 	.word	0xffffffff
    2b44:	ffffffff 	.word	0xffffffff
    2b48:	ffffffff 	.word	0xffffffff
    2b4c:	ffffffff 	.word	0xffffffff
    2b50:	ffffffff 	.word	0xffffffff
    2b54:	ffffffff 	.word	0xffffffff
    2b58:	ffffffff 	.word	0xffffffff
    2b5c:	ffffffff 	.word	0xffffffff
    2b60:	ffffffff 	.word	0xffffffff
    2b64:	ffffffff 	.word	0xffffffff
    2b68:	ffffffff 	.word	0xffffffff
    2b6c:	ffffffff 	.word	0xffffffff
    2b70:	ffffffff 	.word	0xffffffff
    2b74:	ffffffff 	.word	0xffffffff
    2b78:	ffffffff 	.word	0xffffffff
    2b7c:	ffffffff 	.word	0xffffffff
    2b80:	ffffffff 	.word	0xffffffff
    2b84:	ffffffff 	.word	0xffffffff
    2b88:	ffffffff 	.word	0xffffffff
    2b8c:	ffffffff 	.word	0xffffffff
    2b90:	ffffffff 	.word	0xffffffff
    2b94:	ffffffff 	.word	0xffffffff
    2b98:	ffffffff 	.word	0xffffffff
    2b9c:	ffffffff 	.word	0xffffffff
    2ba0:	ffffffff 	.word	0xffffffff
    2ba4:	ffffffff 	.word	0xffffffff
    2ba8:	ffffffff 	.word	0xffffffff
    2bac:	ffffffff 	.word	0xffffffff
    2bb0:	ffffffff 	.word	0xffffffff
    2bb4:	ffffffff 	.word	0xffffffff
    2bb8:	ffffffff 	.word	0xffffffff
    2bbc:	ffffffff 	.word	0xffffffff
    2bc0:	ffffffff 	.word	0xffffffff
    2bc4:	ffffffff 	.word	0xffffffff
    2bc8:	ffffffff 	.word	0xffffffff
    2bcc:	ffffffff 	.word	0xffffffff
    2bd0:	ffffffff 	.word	0xffffffff
    2bd4:	ffffffff 	.word	0xffffffff
    2bd8:	ffffffff 	.word	0xffffffff
    2bdc:	ffffffff 	.word	0xffffffff
    2be0:	ffffffff 	.word	0xffffffff
    2be4:	ffffffff 	.word	0xffffffff
    2be8:	ffffffff 	.word	0xffffffff
    2bec:	ffffffff 	.word	0xffffffff
    2bf0:	ffffffff 	.word	0xffffffff
    2bf4:	ffffffff 	.word	0xffffffff
    2bf8:	ffffffff 	.word	0xffffffff
    2bfc:	ffffffff 	.word	0xffffffff
    2c00:	ffffffff 	.word	0xffffffff
    2c04:	ffffffff 	.word	0xffffffff
    2c08:	ffffffff 	.word	0xffffffff
    2c0c:	ffffffff 	.word	0xffffffff
    2c10:	ffffffff 	.word	0xffffffff
    2c14:	ffffffff 	.word	0xffffffff
    2c18:	ffffffff 	.word	0xffffffff
    2c1c:	ffffffff 	.word	0xffffffff
    2c20:	ffffffff 	.word	0xffffffff
    2c24:	ffffffff 	.word	0xffffffff
    2c28:	ffffffff 	.word	0xffffffff
    2c2c:	ffffffff 	.word	0xffffffff
    2c30:	ffffffff 	.word	0xffffffff
    2c34:	ffffffff 	.word	0xffffffff
    2c38:	ffffffff 	.word	0xffffffff
    2c3c:	ffffffff 	.word	0xffffffff
    2c40:	ffffffff 	.word	0xffffffff
    2c44:	ffffffff 	.word	0xffffffff
    2c48:	ffffffff 	.word	0xffffffff
    2c4c:	ffffffff 	.word	0xffffffff
    2c50:	ffffffff 	.word	0xffffffff
    2c54:	ffffffff 	.word	0xffffffff
    2c58:	ffffffff 	.word	0xffffffff
    2c5c:	ffffffff 	.word	0xffffffff
    2c60:	ffffffff 	.word	0xffffffff
    2c64:	ffffffff 	.word	0xffffffff
    2c68:	ffffffff 	.word	0xffffffff
    2c6c:	ffffffff 	.word	0xffffffff
    2c70:	ffffffff 	.word	0xffffffff
    2c74:	ffffffff 	.word	0xffffffff
    2c78:	ffffffff 	.word	0xffffffff
    2c7c:	ffffffff 	.word	0xffffffff
    2c80:	ffffffff 	.word	0xffffffff
    2c84:	ffffffff 	.word	0xffffffff
    2c88:	ffffffff 	.word	0xffffffff
    2c8c:	ffffffff 	.word	0xffffffff
    2c90:	ffffffff 	.word	0xffffffff
    2c94:	ffffffff 	.word	0xffffffff
    2c98:	ffffffff 	.word	0xffffffff
    2c9c:	ffffffff 	.word	0xffffffff
    2ca0:	ffffffff 	.word	0xffffffff
    2ca4:	ffffffff 	.word	0xffffffff
    2ca8:	ffffffff 	.word	0xffffffff
    2cac:	ffffffff 	.word	0xffffffff
    2cb0:	ffffffff 	.word	0xffffffff
    2cb4:	ffffffff 	.word	0xffffffff
    2cb8:	ffffffff 	.word	0xffffffff
    2cbc:	ffffffff 	.word	0xffffffff
    2cc0:	ffffffff 	.word	0xffffffff
    2cc4:	ffffffff 	.word	0xffffffff
    2cc8:	ffffffff 	.word	0xffffffff
    2ccc:	ffffffff 	.word	0xffffffff
    2cd0:	ffffffff 	.word	0xffffffff
    2cd4:	ffffffff 	.word	0xffffffff
    2cd8:	ffffffff 	.word	0xffffffff
    2cdc:	ffffffff 	.word	0xffffffff
    2ce0:	ffffffff 	.word	0xffffffff
    2ce4:	ffffffff 	.word	0xffffffff
    2ce8:	ffffffff 	.word	0xffffffff
    2cec:	ffffffff 	.word	0xffffffff
    2cf0:	ffffffff 	.word	0xffffffff
    2cf4:	ffffffff 	.word	0xffffffff
    2cf8:	ffffffff 	.word	0xffffffff
    2cfc:	ffffffff 	.word	0xffffffff
    2d00:	ffffffff 	.word	0xffffffff
    2d04:	ffffffff 	.word	0xffffffff
    2d08:	ffffffff 	.word	0xffffffff
    2d0c:	ffffffff 	.word	0xffffffff
    2d10:	ffffffff 	.word	0xffffffff
    2d14:	ffffffff 	.word	0xffffffff
    2d18:	ffffffff 	.word	0xffffffff
    2d1c:	ffffffff 	.word	0xffffffff
    2d20:	ffffffff 	.word	0xffffffff
    2d24:	ffffffff 	.word	0xffffffff
    2d28:	ffffffff 	.word	0xffffffff
    2d2c:	ffffffff 	.word	0xffffffff
    2d30:	ffffffff 	.word	0xffffffff
    2d34:	ffffffff 	.word	0xffffffff
    2d38:	ffffffff 	.word	0xffffffff
    2d3c:	ffffffff 	.word	0xffffffff
    2d40:	ffffffff 	.word	0xffffffff
    2d44:	ffffffff 	.word	0xffffffff
    2d48:	ffffffff 	.word	0xffffffff
    2d4c:	ffffffff 	.word	0xffffffff
    2d50:	ffffffff 	.word	0xffffffff
    2d54:	ffffffff 	.word	0xffffffff
    2d58:	ffffffff 	.word	0xffffffff
    2d5c:	ffffffff 	.word	0xffffffff
    2d60:	ffffffff 	.word	0xffffffff
    2d64:	ffffffff 	.word	0xffffffff
    2d68:	ffffffff 	.word	0xffffffff
    2d6c:	ffffffff 	.word	0xffffffff
    2d70:	ffffffff 	.word	0xffffffff
    2d74:	ffffffff 	.word	0xffffffff
    2d78:	ffffffff 	.word	0xffffffff
    2d7c:	ffffffff 	.word	0xffffffff
    2d80:	ffffffff 	.word	0xffffffff
    2d84:	ffffffff 	.word	0xffffffff
    2d88:	ffffffff 	.word	0xffffffff
    2d8c:	ffffffff 	.word	0xffffffff
    2d90:	ffffffff 	.word	0xffffffff
    2d94:	ffffffff 	.word	0xffffffff
    2d98:	ffffffff 	.word	0xffffffff
    2d9c:	ffffffff 	.word	0xffffffff
    2da0:	ffffffff 	.word	0xffffffff
    2da4:	ffffffff 	.word	0xffffffff
    2da8:	ffffffff 	.word	0xffffffff
    2dac:	ffffffff 	.word	0xffffffff
    2db0:	ffffffff 	.word	0xffffffff
    2db4:	ffffffff 	.word	0xffffffff
    2db8:	ffffffff 	.word	0xffffffff
    2dbc:	ffffffff 	.word	0xffffffff
    2dc0:	ffffffff 	.word	0xffffffff
    2dc4:	ffffffff 	.word	0xffffffff
    2dc8:	ffffffff 	.word	0xffffffff
    2dcc:	ffffffff 	.word	0xffffffff
    2dd0:	ffffffff 	.word	0xffffffff
    2dd4:	ffffffff 	.word	0xffffffff
    2dd8:	ffffffff 	.word	0xffffffff
    2ddc:	ffffffff 	.word	0xffffffff
    2de0:	ffffffff 	.word	0xffffffff
    2de4:	ffffffff 	.word	0xffffffff
    2de8:	ffffffff 	.word	0xffffffff
    2dec:	ffffffff 	.word	0xffffffff
    2df0:	ffffffff 	.word	0xffffffff
    2df4:	ffffffff 	.word	0xffffffff
    2df8:	ffffffff 	.word	0xffffffff
    2dfc:	ffffffff 	.word	0xffffffff
    2e00:	ffffffff 	.word	0xffffffff
    2e04:	ffffffff 	.word	0xffffffff
    2e08:	ffffffff 	.word	0xffffffff
    2e0c:	ffffffff 	.word	0xffffffff
    2e10:	ffffffff 	.word	0xffffffff
    2e14:	ffffffff 	.word	0xffffffff
    2e18:	ffffffff 	.word	0xffffffff
    2e1c:	ffffffff 	.word	0xffffffff
    2e20:	ffffffff 	.word	0xffffffff
    2e24:	ffffffff 	.word	0xffffffff
    2e28:	ffffffff 	.word	0xffffffff
    2e2c:	ffffffff 	.word	0xffffffff
    2e30:	ffffffff 	.word	0xffffffff
    2e34:	ffffffff 	.word	0xffffffff
    2e38:	ffffffff 	.word	0xffffffff
    2e3c:	ffffffff 	.word	0xffffffff
    2e40:	ffffffff 	.word	0xffffffff
    2e44:	ffffffff 	.word	0xffffffff
    2e48:	ffffffff 	.word	0xffffffff
    2e4c:	ffffffff 	.word	0xffffffff
    2e50:	ffffffff 	.word	0xffffffff
    2e54:	ffffffff 	.word	0xffffffff
    2e58:	ffffffff 	.word	0xffffffff
    2e5c:	ffffffff 	.word	0xffffffff
    2e60:	ffffffff 	.word	0xffffffff
    2e64:	ffffffff 	.word	0xffffffff
    2e68:	ffffffff 	.word	0xffffffff
    2e6c:	ffffffff 	.word	0xffffffff
    2e70:	ffffffff 	.word	0xffffffff
    2e74:	ffffffff 	.word	0xffffffff
    2e78:	ffffffff 	.word	0xffffffff
    2e7c:	ffffffff 	.word	0xffffffff
    2e80:	ffffffff 	.word	0xffffffff
    2e84:	ffffffff 	.word	0xffffffff
    2e88:	ffffffff 	.word	0xffffffff
    2e8c:	ffffffff 	.word	0xffffffff
    2e90:	ffffffff 	.word	0xffffffff
    2e94:	ffffffff 	.word	0xffffffff
    2e98:	ffffffff 	.word	0xffffffff
    2e9c:	ffffffff 	.word	0xffffffff
    2ea0:	ffffffff 	.word	0xffffffff
    2ea4:	ffffffff 	.word	0xffffffff
    2ea8:	ffffffff 	.word	0xffffffff
    2eac:	ffffffff 	.word	0xffffffff
    2eb0:	ffffffff 	.word	0xffffffff
    2eb4:	ffffffff 	.word	0xffffffff
    2eb8:	ffffffff 	.word	0xffffffff
    2ebc:	ffffffff 	.word	0xffffffff
    2ec0:	ffffffff 	.word	0xffffffff
    2ec4:	ffffffff 	.word	0xffffffff
    2ec8:	ffffffff 	.word	0xffffffff
    2ecc:	ffffffff 	.word	0xffffffff
    2ed0:	ffffffff 	.word	0xffffffff
    2ed4:	ffffffff 	.word	0xffffffff
    2ed8:	ffffffff 	.word	0xffffffff
    2edc:	ffffffff 	.word	0xffffffff
    2ee0:	ffffffff 	.word	0xffffffff
    2ee4:	ffffffff 	.word	0xffffffff
    2ee8:	ffffffff 	.word	0xffffffff
    2eec:	ffffffff 	.word	0xffffffff
    2ef0:	ffffffff 	.word	0xffffffff
    2ef4:	ffffffff 	.word	0xffffffff
    2ef8:	ffffffff 	.word	0xffffffff
    2efc:	ffffffff 	.word	0xffffffff
    2f00:	ffffffff 	.word	0xffffffff
    2f04:	ffffffff 	.word	0xffffffff
    2f08:	ffffffff 	.word	0xffffffff
    2f0c:	ffffffff 	.word	0xffffffff
    2f10:	ffffffff 	.word	0xffffffff
    2f14:	ffffffff 	.word	0xffffffff
    2f18:	ffffffff 	.word	0xffffffff
    2f1c:	ffffffff 	.word	0xffffffff
    2f20:	ffffffff 	.word	0xffffffff
    2f24:	ffffffff 	.word	0xffffffff
    2f28:	ffffffff 	.word	0xffffffff
    2f2c:	ffffffff 	.word	0xffffffff
    2f30:	ffffffff 	.word	0xffffffff
    2f34:	ffffffff 	.word	0xffffffff
    2f38:	ffffffff 	.word	0xffffffff
    2f3c:	ffffffff 	.word	0xffffffff
    2f40:	ffffffff 	.word	0xffffffff
    2f44:	ffffffff 	.word	0xffffffff
    2f48:	ffffffff 	.word	0xffffffff
    2f4c:	ffffffff 	.word	0xffffffff
    2f50:	ffffffff 	.word	0xffffffff
    2f54:	ffffffff 	.word	0xffffffff
    2f58:	ffffffff 	.word	0xffffffff
    2f5c:	ffffffff 	.word	0xffffffff
    2f60:	ffffffff 	.word	0xffffffff
    2f64:	ffffffff 	.word	0xffffffff
    2f68:	ffffffff 	.word	0xffffffff
    2f6c:	ffffffff 	.word	0xffffffff
    2f70:	ffffffff 	.word	0xffffffff
    2f74:	ffffffff 	.word	0xffffffff
    2f78:	ffffffff 	.word	0xffffffff
    2f7c:	ffffffff 	.word	0xffffffff
    2f80:	ffffffff 	.word	0xffffffff
    2f84:	ffffffff 	.word	0xffffffff
    2f88:	ffffffff 	.word	0xffffffff
    2f8c:	ffffffff 	.word	0xffffffff
    2f90:	ffffffff 	.word	0xffffffff
    2f94:	ffffffff 	.word	0xffffffff
    2f98:	ffffffff 	.word	0xffffffff
    2f9c:	ffffffff 	.word	0xffffffff
    2fa0:	ffffffff 	.word	0xffffffff
    2fa4:	ffffffff 	.word	0xffffffff
    2fa8:	ffffffff 	.word	0xffffffff
    2fac:	ffffffff 	.word	0xffffffff
    2fb0:	ffffffff 	.word	0xffffffff
    2fb4:	ffffffff 	.word	0xffffffff
    2fb8:	ffffffff 	.word	0xffffffff
    2fbc:	ffffffff 	.word	0xffffffff
    2fc0:	ffffffff 	.word	0xffffffff
    2fc4:	ffffffff 	.word	0xffffffff
    2fc8:	ffffffff 	.word	0xffffffff
    2fcc:	ffffffff 	.word	0xffffffff
    2fd0:	ffffffff 	.word	0xffffffff
    2fd4:	ffffffff 	.word	0xffffffff
    2fd8:	ffffffff 	.word	0xffffffff
    2fdc:	ffffffff 	.word	0xffffffff
    2fe0:	ffffffff 	.word	0xffffffff
    2fe4:	ffffffff 	.word	0xffffffff
    2fe8:	ffffffff 	.word	0xffffffff
    2fec:	ffffffff 	.word	0xffffffff
    2ff0:	ffffffff 	.word	0xffffffff
    2ff4:	ffffffff 	.word	0xffffffff
    2ff8:	ffffffff 	.word	0xffffffff
    2ffc:	ffffffff 	.word	0xffffffff
    3000:	ffffffff 	.word	0xffffffff
    3004:	ffffffff 	.word	0xffffffff
    3008:	ffffffff 	.word	0xffffffff
    300c:	ffffffff 	.word	0xffffffff
    3010:	ffffffff 	.word	0xffffffff
    3014:	ffffffff 	.word	0xffffffff
    3018:	ffffffff 	.word	0xffffffff
    301c:	ffffffff 	.word	0xffffffff
    3020:	ffffffff 	.word	0xffffffff
    3024:	ffffffff 	.word	0xffffffff
    3028:	ffffffff 	.word	0xffffffff
    302c:	ffffffff 	.word	0xffffffff
    3030:	ffffffff 	.word	0xffffffff
    3034:	ffffffff 	.word	0xffffffff
    3038:	ffffffff 	.word	0xffffffff
    303c:	ffffffff 	.word	0xffffffff
    3040:	ffffffff 	.word	0xffffffff
    3044:	ffffffff 	.word	0xffffffff
    3048:	ffffffff 	.word	0xffffffff
    304c:	ffffffff 	.word	0xffffffff
    3050:	ffffffff 	.word	0xffffffff
    3054:	ffffffff 	.word	0xffffffff
    3058:	ffffffff 	.word	0xffffffff
    305c:	ffffffff 	.word	0xffffffff
    3060:	ffffffff 	.word	0xffffffff
    3064:	ffffffff 	.word	0xffffffff
    3068:	ffffffff 	.word	0xffffffff
    306c:	ffffffff 	.word	0xffffffff
    3070:	ffffffff 	.word	0xffffffff
    3074:	ffffffff 	.word	0xffffffff
    3078:	ffffffff 	.word	0xffffffff
    307c:	ffffffff 	.word	0xffffffff
    3080:	ffffffff 	.word	0xffffffff
    3084:	ffffffff 	.word	0xffffffff
    3088:	ffffffff 	.word	0xffffffff
    308c:	ffffffff 	.word	0xffffffff
    3090:	ffffffff 	.word	0xffffffff
    3094:	ffffffff 	.word	0xffffffff
    3098:	ffffffff 	.word	0xffffffff
    309c:	ffffffff 	.word	0xffffffff
    30a0:	ffffffff 	.word	0xffffffff
    30a4:	ffffffff 	.word	0xffffffff
    30a8:	ffffffff 	.word	0xffffffff
    30ac:	ffffffff 	.word	0xffffffff
    30b0:	ffffffff 	.word	0xffffffff
    30b4:	ffffffff 	.word	0xffffffff
    30b8:	ffffffff 	.word	0xffffffff
    30bc:	ffffffff 	.word	0xffffffff
    30c0:	ffffffff 	.word	0xffffffff
    30c4:	ffffffff 	.word	0xffffffff
    30c8:	ffffffff 	.word	0xffffffff
    30cc:	ffffffff 	.word	0xffffffff
    30d0:	ffffffff 	.word	0xffffffff
    30d4:	ffffffff 	.word	0xffffffff
    30d8:	ffffffff 	.word	0xffffffff
    30dc:	ffffffff 	.word	0xffffffff
    30e0:	ffffffff 	.word	0xffffffff
    30e4:	ffffffff 	.word	0xffffffff
    30e8:	ffffffff 	.word	0xffffffff
    30ec:	ffffffff 	.word	0xffffffff
    30f0:	ffffffff 	.word	0xffffffff
    30f4:	ffffffff 	.word	0xffffffff
    30f8:	ffffffff 	.word	0xffffffff
    30fc:	ffffffff 	.word	0xffffffff
    3100:	ffffffff 	.word	0xffffffff
    3104:	ffffffff 	.word	0xffffffff
    3108:	ffffffff 	.word	0xffffffff
    310c:	ffffffff 	.word	0xffffffff
    3110:	ffffffff 	.word	0xffffffff
    3114:	ffffffff 	.word	0xffffffff
    3118:	ffffffff 	.word	0xffffffff
    311c:	ffffffff 	.word	0xffffffff
    3120:	ffffffff 	.word	0xffffffff
    3124:	ffffffff 	.word	0xffffffff
    3128:	ffffffff 	.word	0xffffffff
    312c:	ffffffff 	.word	0xffffffff
    3130:	ffffffff 	.word	0xffffffff
    3134:	ffffffff 	.word	0xffffffff
    3138:	ffffffff 	.word	0xffffffff
    313c:	ffffffff 	.word	0xffffffff
    3140:	ffffffff 	.word	0xffffffff
    3144:	ffffffff 	.word	0xffffffff
    3148:	ffffffff 	.word	0xffffffff
    314c:	ffffffff 	.word	0xffffffff
    3150:	ffffffff 	.word	0xffffffff
    3154:	ffffffff 	.word	0xffffffff
    3158:	ffffffff 	.word	0xffffffff
    315c:	ffffffff 	.word	0xffffffff
    3160:	ffffffff 	.word	0xffffffff
    3164:	ffffffff 	.word	0xffffffff
    3168:	ffffffff 	.word	0xffffffff
    316c:	ffffffff 	.word	0xffffffff
    3170:	ffffffff 	.word	0xffffffff
    3174:	ffffffff 	.word	0xffffffff
    3178:	ffffffff 	.word	0xffffffff
    317c:	ffffffff 	.word	0xffffffff
    3180:	ffffffff 	.word	0xffffffff
    3184:	ffffffff 	.word	0xffffffff
    3188:	ffffffff 	.word	0xffffffff
    318c:	ffffffff 	.word	0xffffffff
    3190:	ffffffff 	.word	0xffffffff
    3194:	ffffffff 	.word	0xffffffff
    3198:	ffffffff 	.word	0xffffffff
    319c:	ffffffff 	.word	0xffffffff
    31a0:	ffffffff 	.word	0xffffffff
    31a4:	ffffffff 	.word	0xffffffff
    31a8:	ffffffff 	.word	0xffffffff
    31ac:	ffffffff 	.word	0xffffffff
    31b0:	ffffffff 	.word	0xffffffff
    31b4:	ffffffff 	.word	0xffffffff
    31b8:	ffffffff 	.word	0xffffffff
    31bc:	ffffffff 	.word	0xffffffff
    31c0:	ffffffff 	.word	0xffffffff
    31c4:	ffffffff 	.word	0xffffffff
    31c8:	ffffffff 	.word	0xffffffff
    31cc:	ffffffff 	.word	0xffffffff
    31d0:	ffffffff 	.word	0xffffffff
    31d4:	ffffffff 	.word	0xffffffff
    31d8:	ffffffff 	.word	0xffffffff
    31dc:	ffffffff 	.word	0xffffffff
    31e0:	ffffffff 	.word	0xffffffff
    31e4:	ffffffff 	.word	0xffffffff
    31e8:	ffffffff 	.word	0xffffffff
    31ec:	ffffffff 	.word	0xffffffff
    31f0:	ffffffff 	.word	0xffffffff
    31f4:	ffffffff 	.word	0xffffffff
    31f8:	ffffffff 	.word	0xffffffff
    31fc:	ffffffff 	.word	0xffffffff
    3200:	ffffffff 	.word	0xffffffff
    3204:	ffffffff 	.word	0xffffffff
    3208:	ffffffff 	.word	0xffffffff
    320c:	ffffffff 	.word	0xffffffff
    3210:	ffffffff 	.word	0xffffffff
    3214:	ffffffff 	.word	0xffffffff
    3218:	ffffffff 	.word	0xffffffff
    321c:	ffffffff 	.word	0xffffffff
    3220:	ffffffff 	.word	0xffffffff
    3224:	ffffffff 	.word	0xffffffff
    3228:	ffffffff 	.word	0xffffffff
    322c:	ffffffff 	.word	0xffffffff
    3230:	ffffffff 	.word	0xffffffff
    3234:	ffffffff 	.word	0xffffffff
    3238:	ffffffff 	.word	0xffffffff
    323c:	ffffffff 	.word	0xffffffff
    3240:	ffffffff 	.word	0xffffffff
    3244:	ffffffff 	.word	0xffffffff
    3248:	ffffffff 	.word	0xffffffff
    324c:	ffffffff 	.word	0xffffffff
    3250:	ffffffff 	.word	0xffffffff
    3254:	ffffffff 	.word	0xffffffff
    3258:	ffffffff 	.word	0xffffffff
    325c:	ffffffff 	.word	0xffffffff
    3260:	ffffffff 	.word	0xffffffff
    3264:	ffffffff 	.word	0xffffffff
    3268:	ffffffff 	.word	0xffffffff
    326c:	ffffffff 	.word	0xffffffff
    3270:	ffffffff 	.word	0xffffffff
    3274:	ffffffff 	.word	0xffffffff
    3278:	ffffffff 	.word	0xffffffff
    327c:	ffffffff 	.word	0xffffffff
    3280:	ffffffff 	.word	0xffffffff
    3284:	ffffffff 	.word	0xffffffff
    3288:	ffffffff 	.word	0xffffffff
    328c:	ffffffff 	.word	0xffffffff
    3290:	ffffffff 	.word	0xffffffff
    3294:	ffffffff 	.word	0xffffffff
    3298:	ffffffff 	.word	0xffffffff
    329c:	ffffffff 	.word	0xffffffff
    32a0:	ffffffff 	.word	0xffffffff
    32a4:	ffffffff 	.word	0xffffffff
    32a8:	ffffffff 	.word	0xffffffff
    32ac:	ffffffff 	.word	0xffffffff
    32b0:	ffffffff 	.word	0xffffffff
    32b4:	ffffffff 	.word	0xffffffff
    32b8:	ffffffff 	.word	0xffffffff
    32bc:	ffffffff 	.word	0xffffffff
    32c0:	ffffffff 	.word	0xffffffff
    32c4:	ffffffff 	.word	0xffffffff
    32c8:	ffffffff 	.word	0xffffffff
    32cc:	ffffffff 	.word	0xffffffff
    32d0:	ffffffff 	.word	0xffffffff
    32d4:	ffffffff 	.word	0xffffffff
    32d8:	ffffffff 	.word	0xffffffff
    32dc:	ffffffff 	.word	0xffffffff
    32e0:	ffffffff 	.word	0xffffffff
    32e4:	ffffffff 	.word	0xffffffff
    32e8:	ffffffff 	.word	0xffffffff
    32ec:	ffffffff 	.word	0xffffffff
    32f0:	ffffffff 	.word	0xffffffff
    32f4:	ffffffff 	.word	0xffffffff
    32f8:	ffffffff 	.word	0xffffffff
    32fc:	ffffffff 	.word	0xffffffff
    3300:	ffffffff 	.word	0xffffffff
    3304:	ffffffff 	.word	0xffffffff
    3308:	ffffffff 	.word	0xffffffff
    330c:	ffffffff 	.word	0xffffffff
    3310:	ffffffff 	.word	0xffffffff
    3314:	ffffffff 	.word	0xffffffff
    3318:	ffffffff 	.word	0xffffffff
    331c:	ffffffff 	.word	0xffffffff
    3320:	ffffffff 	.word	0xffffffff
    3324:	ffffffff 	.word	0xffffffff
    3328:	ffffffff 	.word	0xffffffff
    332c:	ffffffff 	.word	0xffffffff
    3330:	ffffffff 	.word	0xffffffff
    3334:	ffffffff 	.word	0xffffffff
    3338:	ffffffff 	.word	0xffffffff
    333c:	ffffffff 	.word	0xffffffff
    3340:	ffffffff 	.word	0xffffffff
    3344:	ffffffff 	.word	0xffffffff
    3348:	ffffffff 	.word	0xffffffff
    334c:	ffffffff 	.word	0xffffffff
    3350:	ffffffff 	.word	0xffffffff
    3354:	ffffffff 	.word	0xffffffff
    3358:	ffffffff 	.word	0xffffffff
    335c:	ffffffff 	.word	0xffffffff
    3360:	ffffffff 	.word	0xffffffff
    3364:	ffffffff 	.word	0xffffffff
    3368:	ffffffff 	.word	0xffffffff
    336c:	ffffffff 	.word	0xffffffff
    3370:	ffffffff 	.word	0xffffffff
    3374:	ffffffff 	.word	0xffffffff
    3378:	ffffffff 	.word	0xffffffff
    337c:	ffffffff 	.word	0xffffffff
    3380:	ffffffff 	.word	0xffffffff
    3384:	ffffffff 	.word	0xffffffff
    3388:	ffffffff 	.word	0xffffffff
    338c:	ffffffff 	.word	0xffffffff
    3390:	ffffffff 	.word	0xffffffff
    3394:	ffffffff 	.word	0xffffffff
    3398:	ffffffff 	.word	0xffffffff
    339c:	ffffffff 	.word	0xffffffff
    33a0:	ffffffff 	.word	0xffffffff
    33a4:	ffffffff 	.word	0xffffffff
    33a8:	ffffffff 	.word	0xffffffff
    33ac:	ffffffff 	.word	0xffffffff
    33b0:	ffffffff 	.word	0xffffffff
    33b4:	ffffffff 	.word	0xffffffff
    33b8:	ffffffff 	.word	0xffffffff
    33bc:	ffffffff 	.word	0xffffffff
    33c0:	ffffffff 	.word	0xffffffff
    33c4:	ffffffff 	.word	0xffffffff
    33c8:	ffffffff 	.word	0xffffffff
    33cc:	ffffffff 	.word	0xffffffff
    33d0:	ffffffff 	.word	0xffffffff
    33d4:	ffffffff 	.word	0xffffffff
    33d8:	ffffffff 	.word	0xffffffff
    33dc:	ffffffff 	.word	0xffffffff
    33e0:	ffffffff 	.word	0xffffffff
    33e4:	ffffffff 	.word	0xffffffff
    33e8:	ffffffff 	.word	0xffffffff
    33ec:	ffffffff 	.word	0xffffffff
    33f0:	ffffffff 	.word	0xffffffff
    33f4:	ffffffff 	.word	0xffffffff
    33f8:	ffffffff 	.word	0xffffffff
    33fc:	ffffffff 	.word	0xffffffff
    3400:	ffffffff 	.word	0xffffffff
    3404:	ffffffff 	.word	0xffffffff
    3408:	ffffffff 	.word	0xffffffff
    340c:	ffffffff 	.word	0xffffffff
    3410:	ffffffff 	.word	0xffffffff
    3414:	ffffffff 	.word	0xffffffff
    3418:	ffffffff 	.word	0xffffffff
    341c:	ffffffff 	.word	0xffffffff
    3420:	ffffffff 	.word	0xffffffff
    3424:	ffffffff 	.word	0xffffffff
    3428:	ffffffff 	.word	0xffffffff
    342c:	ffffffff 	.word	0xffffffff
    3430:	ffffffff 	.word	0xffffffff
    3434:	ffffffff 	.word	0xffffffff
    3438:	ffffffff 	.word	0xffffffff
    343c:	ffffffff 	.word	0xffffffff
    3440:	ffffffff 	.word	0xffffffff
    3444:	ffffffff 	.word	0xffffffff
    3448:	ffffffff 	.word	0xffffffff
    344c:	ffffffff 	.word	0xffffffff
    3450:	ffffffff 	.word	0xffffffff
    3454:	ffffffff 	.word	0xffffffff
    3458:	ffffffff 	.word	0xffffffff
    345c:	ffffffff 	.word	0xffffffff
    3460:	ffffffff 	.word	0xffffffff
    3464:	ffffffff 	.word	0xffffffff
    3468:	ffffffff 	.word	0xffffffff
    346c:	ffffffff 	.word	0xffffffff
    3470:	ffffffff 	.word	0xffffffff
    3474:	ffffffff 	.word	0xffffffff
    3478:	ffffffff 	.word	0xffffffff
    347c:	ffffffff 	.word	0xffffffff
    3480:	ffffffff 	.word	0xffffffff
    3484:	ffffffff 	.word	0xffffffff
    3488:	ffffffff 	.word	0xffffffff
    348c:	ffffffff 	.word	0xffffffff
    3490:	ffffffff 	.word	0xffffffff
    3494:	ffffffff 	.word	0xffffffff
    3498:	ffffffff 	.word	0xffffffff
    349c:	ffffffff 	.word	0xffffffff
    34a0:	ffffffff 	.word	0xffffffff
    34a4:	ffffffff 	.word	0xffffffff
    34a8:	ffffffff 	.word	0xffffffff
    34ac:	ffffffff 	.word	0xffffffff
    34b0:	ffffffff 	.word	0xffffffff
    34b4:	ffffffff 	.word	0xffffffff
    34b8:	ffffffff 	.word	0xffffffff
    34bc:	ffffffff 	.word	0xffffffff
    34c0:	ffffffff 	.word	0xffffffff
    34c4:	ffffffff 	.word	0xffffffff
    34c8:	ffffffff 	.word	0xffffffff
    34cc:	ffffffff 	.word	0xffffffff
    34d0:	ffffffff 	.word	0xffffffff
    34d4:	ffffffff 	.word	0xffffffff
    34d8:	ffffffff 	.word	0xffffffff
    34dc:	ffffffff 	.word	0xffffffff
    34e0:	ffffffff 	.word	0xffffffff
    34e4:	ffffffff 	.word	0xffffffff
    34e8:	ffffffff 	.word	0xffffffff
    34ec:	ffffffff 	.word	0xffffffff
    34f0:	ffffffff 	.word	0xffffffff
    34f4:	ffffffff 	.word	0xffffffff
    34f8:	ffffffff 	.word	0xffffffff
    34fc:	ffffffff 	.word	0xffffffff
    3500:	ffffffff 	.word	0xffffffff
    3504:	ffffffff 	.word	0xffffffff
    3508:	ffffffff 	.word	0xffffffff
    350c:	ffffffff 	.word	0xffffffff
    3510:	ffffffff 	.word	0xffffffff
    3514:	ffffffff 	.word	0xffffffff
    3518:	ffffffff 	.word	0xffffffff
    351c:	ffffffff 	.word	0xffffffff
    3520:	ffffffff 	.word	0xffffffff
    3524:	ffffffff 	.word	0xffffffff
    3528:	ffffffff 	.word	0xffffffff
    352c:	ffffffff 	.word	0xffffffff
    3530:	ffffffff 	.word	0xffffffff
    3534:	ffffffff 	.word	0xffffffff
    3538:	ffffffff 	.word	0xffffffff
    353c:	ffffffff 	.word	0xffffffff
    3540:	ffffffff 	.word	0xffffffff
    3544:	ffffffff 	.word	0xffffffff
    3548:	ffffffff 	.word	0xffffffff
    354c:	ffffffff 	.word	0xffffffff
    3550:	ffffffff 	.word	0xffffffff
    3554:	ffffffff 	.word	0xffffffff
    3558:	ffffffff 	.word	0xffffffff
    355c:	ffffffff 	.word	0xffffffff
    3560:	ffffffff 	.word	0xffffffff
    3564:	ffffffff 	.word	0xffffffff
    3568:	ffffffff 	.word	0xffffffff
    356c:	ffffffff 	.word	0xffffffff
    3570:	ffffffff 	.word	0xffffffff
    3574:	ffffffff 	.word	0xffffffff
    3578:	ffffffff 	.word	0xffffffff
    357c:	ffffffff 	.word	0xffffffff
    3580:	ffffffff 	.word	0xffffffff
    3584:	ffffffff 	.word	0xffffffff
    3588:	ffffffff 	.word	0xffffffff
    358c:	ffffffff 	.word	0xffffffff
    3590:	ffffffff 	.word	0xffffffff
    3594:	ffffffff 	.word	0xffffffff
    3598:	ffffffff 	.word	0xffffffff
    359c:	ffffffff 	.word	0xffffffff
    35a0:	ffffffff 	.word	0xffffffff
    35a4:	ffffffff 	.word	0xffffffff
    35a8:	ffffffff 	.word	0xffffffff
    35ac:	ffffffff 	.word	0xffffffff
    35b0:	ffffffff 	.word	0xffffffff
    35b4:	ffffffff 	.word	0xffffffff
    35b8:	ffffffff 	.word	0xffffffff
    35bc:	ffffffff 	.word	0xffffffff
    35c0:	ffffffff 	.word	0xffffffff
    35c4:	ffffffff 	.word	0xffffffff
    35c8:	ffffffff 	.word	0xffffffff
    35cc:	ffffffff 	.word	0xffffffff
    35d0:	ffffffff 	.word	0xffffffff
    35d4:	ffffffff 	.word	0xffffffff
    35d8:	ffffffff 	.word	0xffffffff
    35dc:	ffffffff 	.word	0xffffffff
    35e0:	ffffffff 	.word	0xffffffff
    35e4:	ffffffff 	.word	0xffffffff
    35e8:	ffffffff 	.word	0xffffffff
    35ec:	ffffffff 	.word	0xffffffff
    35f0:	ffffffff 	.word	0xffffffff
    35f4:	ffffffff 	.word	0xffffffff
    35f8:	ffffffff 	.word	0xffffffff
    35fc:	ffffffff 	.word	0xffffffff
    3600:	ffffffff 	.word	0xffffffff
    3604:	ffffffff 	.word	0xffffffff
    3608:	ffffffff 	.word	0xffffffff
    360c:	ffffffff 	.word	0xffffffff
    3610:	ffffffff 	.word	0xffffffff
    3614:	ffffffff 	.word	0xffffffff
    3618:	ffffffff 	.word	0xffffffff
    361c:	ffffffff 	.word	0xffffffff
    3620:	ffffffff 	.word	0xffffffff
    3624:	ffffffff 	.word	0xffffffff
    3628:	ffffffff 	.word	0xffffffff
    362c:	ffffffff 	.word	0xffffffff
    3630:	ffffffff 	.word	0xffffffff
    3634:	ffffffff 	.word	0xffffffff
    3638:	ffffffff 	.word	0xffffffff
    363c:	ffffffff 	.word	0xffffffff
    3640:	ffffffff 	.word	0xffffffff
    3644:	ffffffff 	.word	0xffffffff
    3648:	ffffffff 	.word	0xffffffff
    364c:	ffffffff 	.word	0xffffffff
    3650:	ffffffff 	.word	0xffffffff
    3654:	ffffffff 	.word	0xffffffff
    3658:	ffffffff 	.word	0xffffffff
    365c:	ffffffff 	.word	0xffffffff
    3660:	ffffffff 	.word	0xffffffff
    3664:	ffffffff 	.word	0xffffffff
    3668:	ffffffff 	.word	0xffffffff
    366c:	ffffffff 	.word	0xffffffff
    3670:	ffffffff 	.word	0xffffffff
    3674:	ffffffff 	.word	0xffffffff
    3678:	ffffffff 	.word	0xffffffff
    367c:	ffffffff 	.word	0xffffffff
    3680:	ffffffff 	.word	0xffffffff
    3684:	ffffffff 	.word	0xffffffff
    3688:	ffffffff 	.word	0xffffffff
    368c:	ffffffff 	.word	0xffffffff
    3690:	ffffffff 	.word	0xffffffff
    3694:	ffffffff 	.word	0xffffffff
    3698:	ffffffff 	.word	0xffffffff
    369c:	ffffffff 	.word	0xffffffff
    36a0:	ffffffff 	.word	0xffffffff
    36a4:	ffffffff 	.word	0xffffffff
    36a8:	ffffffff 	.word	0xffffffff
    36ac:	ffffffff 	.word	0xffffffff
    36b0:	ffffffff 	.word	0xffffffff
    36b4:	ffffffff 	.word	0xffffffff
    36b8:	ffffffff 	.word	0xffffffff
    36bc:	ffffffff 	.word	0xffffffff
    36c0:	ffffffff 	.word	0xffffffff
    36c4:	ffffffff 	.word	0xffffffff
    36c8:	ffffffff 	.word	0xffffffff
    36cc:	ffffffff 	.word	0xffffffff
    36d0:	ffffffff 	.word	0xffffffff
    36d4:	ffffffff 	.word	0xffffffff
    36d8:	ffffffff 	.word	0xffffffff
    36dc:	ffffffff 	.word	0xffffffff
    36e0:	ffffffff 	.word	0xffffffff
    36e4:	ffffffff 	.word	0xffffffff
    36e8:	ffffffff 	.word	0xffffffff
    36ec:	ffffffff 	.word	0xffffffff
    36f0:	ffffffff 	.word	0xffffffff
    36f4:	ffffffff 	.word	0xffffffff
    36f8:	ffffffff 	.word	0xffffffff
    36fc:	ffffffff 	.word	0xffffffff
    3700:	ffffffff 	.word	0xffffffff
    3704:	ffffffff 	.word	0xffffffff
    3708:	ffffffff 	.word	0xffffffff
    370c:	ffffffff 	.word	0xffffffff
    3710:	ffffffff 	.word	0xffffffff
    3714:	ffffffff 	.word	0xffffffff
    3718:	ffffffff 	.word	0xffffffff
    371c:	ffffffff 	.word	0xffffffff
    3720:	ffffffff 	.word	0xffffffff
    3724:	ffffffff 	.word	0xffffffff
    3728:	ffffffff 	.word	0xffffffff
    372c:	ffffffff 	.word	0xffffffff
    3730:	ffffffff 	.word	0xffffffff
    3734:	ffffffff 	.word	0xffffffff
    3738:	ffffffff 	.word	0xffffffff
    373c:	ffffffff 	.word	0xffffffff
    3740:	ffffffff 	.word	0xffffffff
    3744:	ffffffff 	.word	0xffffffff
    3748:	ffffffff 	.word	0xffffffff
    374c:	ffffffff 	.word	0xffffffff
    3750:	ffffffff 	.word	0xffffffff
    3754:	ffffffff 	.word	0xffffffff
    3758:	ffffffff 	.word	0xffffffff
    375c:	ffffffff 	.word	0xffffffff
    3760:	ffffffff 	.word	0xffffffff
    3764:	ffffffff 	.word	0xffffffff
    3768:	ffffffff 	.word	0xffffffff
    376c:	ffffffff 	.word	0xffffffff
    3770:	ffffffff 	.word	0xffffffff
    3774:	ffffffff 	.word	0xffffffff
    3778:	ffffffff 	.word	0xffffffff
    377c:	ffffffff 	.word	0xffffffff
    3780:	ffffffff 	.word	0xffffffff
    3784:	ffffffff 	.word	0xffffffff
    3788:	ffffffff 	.word	0xffffffff
    378c:	ffffffff 	.word	0xffffffff
    3790:	ffffffff 	.word	0xffffffff
    3794:	ffffffff 	.word	0xffffffff
    3798:	ffffffff 	.word	0xffffffff
    379c:	ffffffff 	.word	0xffffffff
    37a0:	ffffffff 	.word	0xffffffff
    37a4:	ffffffff 	.word	0xffffffff
    37a8:	ffffffff 	.word	0xffffffff
    37ac:	ffffffff 	.word	0xffffffff
    37b0:	ffffffff 	.word	0xffffffff
    37b4:	ffffffff 	.word	0xffffffff
    37b8:	ffffffff 	.word	0xffffffff
    37bc:	ffffffff 	.word	0xffffffff
    37c0:	ffffffff 	.word	0xffffffff
    37c4:	ffffffff 	.word	0xffffffff
    37c8:	ffffffff 	.word	0xffffffff
    37cc:	ffffffff 	.word	0xffffffff
    37d0:	ffffffff 	.word	0xffffffff
    37d4:	ffffffff 	.word	0xffffffff
    37d8:	ffffffff 	.word	0xffffffff
    37dc:	ffffffff 	.word	0xffffffff
    37e0:	ffffffff 	.word	0xffffffff
    37e4:	ffffffff 	.word	0xffffffff
    37e8:	ffffffff 	.word	0xffffffff
    37ec:	ffffffff 	.word	0xffffffff
    37f0:	ffffffff 	.word	0xffffffff
    37f4:	ffffffff 	.word	0xffffffff
    37f8:	ffffffff 	.word	0xffffffff
    37fc:	ffffffff 	.word	0xffffffff
    3800:	ffffffff 	.word	0xffffffff
    3804:	ffffffff 	.word	0xffffffff
    3808:	ffffffff 	.word	0xffffffff
    380c:	ffffffff 	.word	0xffffffff
    3810:	ffffffff 	.word	0xffffffff
    3814:	ffffffff 	.word	0xffffffff
    3818:	ffffffff 	.word	0xffffffff
    381c:	ffffffff 	.word	0xffffffff
    3820:	ffffffff 	.word	0xffffffff
    3824:	ffffffff 	.word	0xffffffff
    3828:	ffffffff 	.word	0xffffffff
    382c:	ffffffff 	.word	0xffffffff
    3830:	ffffffff 	.word	0xffffffff
    3834:	ffffffff 	.word	0xffffffff
    3838:	ffffffff 	.word	0xffffffff
    383c:	ffffffff 	.word	0xffffffff
    3840:	ffffffff 	.word	0xffffffff
    3844:	ffffffff 	.word	0xffffffff
    3848:	ffffffff 	.word	0xffffffff
    384c:	ffffffff 	.word	0xffffffff
    3850:	ffffffff 	.word	0xffffffff
    3854:	ffffffff 	.word	0xffffffff
    3858:	ffffffff 	.word	0xffffffff
    385c:	ffffffff 	.word	0xffffffff
    3860:	ffffffff 	.word	0xffffffff
    3864:	ffffffff 	.word	0xffffffff
    3868:	ffffffff 	.word	0xffffffff
    386c:	ffffffff 	.word	0xffffffff
    3870:	ffffffff 	.word	0xffffffff
    3874:	ffffffff 	.word	0xffffffff
    3878:	ffffffff 	.word	0xffffffff
    387c:	ffffffff 	.word	0xffffffff
    3880:	ffffffff 	.word	0xffffffff
    3884:	ffffffff 	.word	0xffffffff
    3888:	ffffffff 	.word	0xffffffff
    388c:	ffffffff 	.word	0xffffffff
    3890:	ffffffff 	.word	0xffffffff
    3894:	ffffffff 	.word	0xffffffff
    3898:	ffffffff 	.word	0xffffffff
    389c:	ffffffff 	.word	0xffffffff
    38a0:	ffffffff 	.word	0xffffffff
    38a4:	ffffffff 	.word	0xffffffff
    38a8:	ffffffff 	.word	0xffffffff
    38ac:	ffffffff 	.word	0xffffffff
    38b0:	ffffffff 	.word	0xffffffff
    38b4:	ffffffff 	.word	0xffffffff
    38b8:	ffffffff 	.word	0xffffffff
    38bc:	ffffffff 	.word	0xffffffff
    38c0:	ffffffff 	.word	0xffffffff
    38c4:	ffffffff 	.word	0xffffffff
    38c8:	ffffffff 	.word	0xffffffff
    38cc:	ffffffff 	.word	0xffffffff
    38d0:	ffffffff 	.word	0xffffffff
    38d4:	ffffffff 	.word	0xffffffff
    38d8:	ffffffff 	.word	0xffffffff
    38dc:	ffffffff 	.word	0xffffffff
    38e0:	ffffffff 	.word	0xffffffff
    38e4:	ffffffff 	.word	0xffffffff
    38e8:	ffffffff 	.word	0xffffffff
    38ec:	ffffffff 	.word	0xffffffff
    38f0:	ffffffff 	.word	0xffffffff
    38f4:	ffffffff 	.word	0xffffffff
    38f8:	ffffffff 	.word	0xffffffff
    38fc:	ffffffff 	.word	0xffffffff
    3900:	ffffffff 	.word	0xffffffff
    3904:	ffffffff 	.word	0xffffffff
    3908:	ffffffff 	.word	0xffffffff
    390c:	ffffffff 	.word	0xffffffff
    3910:	ffffffff 	.word	0xffffffff
    3914:	ffffffff 	.word	0xffffffff
    3918:	ffffffff 	.word	0xffffffff
    391c:	ffffffff 	.word	0xffffffff
    3920:	ffffffff 	.word	0xffffffff
    3924:	ffffffff 	.word	0xffffffff
    3928:	ffffffff 	.word	0xffffffff
    392c:	ffffffff 	.word	0xffffffff
    3930:	ffffffff 	.word	0xffffffff
    3934:	ffffffff 	.word	0xffffffff
    3938:	ffffffff 	.word	0xffffffff
    393c:	ffffffff 	.word	0xffffffff
    3940:	ffffffff 	.word	0xffffffff
    3944:	ffffffff 	.word	0xffffffff
    3948:	ffffffff 	.word	0xffffffff
    394c:	ffffffff 	.word	0xffffffff
    3950:	ffffffff 	.word	0xffffffff
    3954:	ffffffff 	.word	0xffffffff
    3958:	ffffffff 	.word	0xffffffff
    395c:	ffffffff 	.word	0xffffffff
    3960:	ffffffff 	.word	0xffffffff
    3964:	ffffffff 	.word	0xffffffff
    3968:	ffffffff 	.word	0xffffffff
    396c:	ffffffff 	.word	0xffffffff
    3970:	ffffffff 	.word	0xffffffff
    3974:	ffffffff 	.word	0xffffffff
    3978:	ffffffff 	.word	0xffffffff
    397c:	ffffffff 	.word	0xffffffff
    3980:	ffffffff 	.word	0xffffffff
    3984:	ffffffff 	.word	0xffffffff
    3988:	ffffffff 	.word	0xffffffff
    398c:	ffffffff 	.word	0xffffffff
    3990:	ffffffff 	.word	0xffffffff
    3994:	ffffffff 	.word	0xffffffff
    3998:	ffffffff 	.word	0xffffffff
    399c:	ffffffff 	.word	0xffffffff
    39a0:	ffffffff 	.word	0xffffffff
    39a4:	ffffffff 	.word	0xffffffff
    39a8:	ffffffff 	.word	0xffffffff
    39ac:	ffffffff 	.word	0xffffffff
    39b0:	ffffffff 	.word	0xffffffff
    39b4:	ffffffff 	.word	0xffffffff
    39b8:	ffffffff 	.word	0xffffffff
    39bc:	ffffffff 	.word	0xffffffff
    39c0:	ffffffff 	.word	0xffffffff
    39c4:	ffffffff 	.word	0xffffffff
    39c8:	ffffffff 	.word	0xffffffff
    39cc:	ffffffff 	.word	0xffffffff
    39d0:	ffffffff 	.word	0xffffffff
    39d4:	ffffffff 	.word	0xffffffff
    39d8:	ffffffff 	.word	0xffffffff
    39dc:	ffffffff 	.word	0xffffffff
    39e0:	ffffffff 	.word	0xffffffff
    39e4:	ffffffff 	.word	0xffffffff
    39e8:	ffffffff 	.word	0xffffffff
    39ec:	ffffffff 	.word	0xffffffff
    39f0:	ffffffff 	.word	0xffffffff
    39f4:	ffffffff 	.word	0xffffffff
    39f8:	ffffffff 	.word	0xffffffff
    39fc:	ffffffff 	.word	0xffffffff
    3a00:	ffffffff 	.word	0xffffffff
    3a04:	ffffffff 	.word	0xffffffff
    3a08:	ffffffff 	.word	0xffffffff
    3a0c:	ffffffff 	.word	0xffffffff
    3a10:	ffffffff 	.word	0xffffffff
    3a14:	ffffffff 	.word	0xffffffff
    3a18:	ffffffff 	.word	0xffffffff
    3a1c:	ffffffff 	.word	0xffffffff
    3a20:	ffffffff 	.word	0xffffffff
    3a24:	ffffffff 	.word	0xffffffff
    3a28:	ffffffff 	.word	0xffffffff
    3a2c:	ffffffff 	.word	0xffffffff
    3a30:	ffffffff 	.word	0xffffffff
    3a34:	ffffffff 	.word	0xffffffff
    3a38:	ffffffff 	.word	0xffffffff
    3a3c:	ffffffff 	.word	0xffffffff
    3a40:	ffffffff 	.word	0xffffffff
    3a44:	ffffffff 	.word	0xffffffff
    3a48:	ffffffff 	.word	0xffffffff
    3a4c:	ffffffff 	.word	0xffffffff
    3a50:	ffffffff 	.word	0xffffffff
    3a54:	ffffffff 	.word	0xffffffff
    3a58:	ffffffff 	.word	0xffffffff
    3a5c:	ffffffff 	.word	0xffffffff
    3a60:	ffffffff 	.word	0xffffffff
    3a64:	ffffffff 	.word	0xffffffff
    3a68:	ffffffff 	.word	0xffffffff
    3a6c:	ffffffff 	.word	0xffffffff
    3a70:	ffffffff 	.word	0xffffffff
    3a74:	ffffffff 	.word	0xffffffff
    3a78:	ffffffff 	.word	0xffffffff
    3a7c:	ffffffff 	.word	0xffffffff
    3a80:	ffffffff 	.word	0xffffffff
    3a84:	ffffffff 	.word	0xffffffff
    3a88:	ffffffff 	.word	0xffffffff
    3a8c:	ffffffff 	.word	0xffffffff
    3a90:	ffffffff 	.word	0xffffffff
    3a94:	ffffffff 	.word	0xffffffff
    3a98:	ffffffff 	.word	0xffffffff
    3a9c:	ffffffff 	.word	0xffffffff
    3aa0:	ffffffff 	.word	0xffffffff
    3aa4:	ffffffff 	.word	0xffffffff
    3aa8:	ffffffff 	.word	0xffffffff
    3aac:	ffffffff 	.word	0xffffffff
    3ab0:	ffffffff 	.word	0xffffffff
    3ab4:	ffffffff 	.word	0xffffffff
    3ab8:	ffffffff 	.word	0xffffffff
    3abc:	ffffffff 	.word	0xffffffff
    3ac0:	ffffffff 	.word	0xffffffff
    3ac4:	ffffffff 	.word	0xffffffff
    3ac8:	ffffffff 	.word	0xffffffff
    3acc:	ffffffff 	.word	0xffffffff
    3ad0:	ffffffff 	.word	0xffffffff
    3ad4:	ffffffff 	.word	0xffffffff
    3ad8:	ffffffff 	.word	0xffffffff
    3adc:	ffffffff 	.word	0xffffffff
    3ae0:	ffffffff 	.word	0xffffffff
    3ae4:	ffffffff 	.word	0xffffffff
    3ae8:	ffffffff 	.word	0xffffffff
    3aec:	ffffffff 	.word	0xffffffff
    3af0:	ffffffff 	.word	0xffffffff
    3af4:	ffffffff 	.word	0xffffffff
    3af8:	ffffffff 	.word	0xffffffff
    3afc:	ffffffff 	.word	0xffffffff
    3b00:	ffffffff 	.word	0xffffffff
    3b04:	ffffffff 	.word	0xffffffff
    3b08:	ffffffff 	.word	0xffffffff
    3b0c:	ffffffff 	.word	0xffffffff
    3b10:	ffffffff 	.word	0xffffffff
    3b14:	ffffffff 	.word	0xffffffff
    3b18:	ffffffff 	.word	0xffffffff
    3b1c:	ffffffff 	.word	0xffffffff
    3b20:	ffffffff 	.word	0xffffffff
    3b24:	ffffffff 	.word	0xffffffff
    3b28:	ffffffff 	.word	0xffffffff
    3b2c:	ffffffff 	.word	0xffffffff
    3b30:	ffffffff 	.word	0xffffffff
    3b34:	ffffffff 	.word	0xffffffff
    3b38:	ffffffff 	.word	0xffffffff
    3b3c:	ffffffff 	.word	0xffffffff
    3b40:	ffffffff 	.word	0xffffffff
    3b44:	ffffffff 	.word	0xffffffff
    3b48:	ffffffff 	.word	0xffffffff
    3b4c:	ffffffff 	.word	0xffffffff
    3b50:	ffffffff 	.word	0xffffffff
    3b54:	ffffffff 	.word	0xffffffff
    3b58:	ffffffff 	.word	0xffffffff
    3b5c:	ffffffff 	.word	0xffffffff
    3b60:	ffffffff 	.word	0xffffffff
    3b64:	ffffffff 	.word	0xffffffff
    3b68:	ffffffff 	.word	0xffffffff
    3b6c:	ffffffff 	.word	0xffffffff
    3b70:	ffffffff 	.word	0xffffffff
    3b74:	ffffffff 	.word	0xffffffff
    3b78:	ffffffff 	.word	0xffffffff
    3b7c:	ffffffff 	.word	0xffffffff
    3b80:	ffffffff 	.word	0xffffffff
    3b84:	ffffffff 	.word	0xffffffff
    3b88:	ffffffff 	.word	0xffffffff
    3b8c:	ffffffff 	.word	0xffffffff
    3b90:	ffffffff 	.word	0xffffffff
    3b94:	ffffffff 	.word	0xffffffff
    3b98:	ffffffff 	.word	0xffffffff
    3b9c:	ffffffff 	.word	0xffffffff
    3ba0:	ffffffff 	.word	0xffffffff
    3ba4:	ffffffff 	.word	0xffffffff
    3ba8:	ffffffff 	.word	0xffffffff
    3bac:	ffffffff 	.word	0xffffffff
    3bb0:	ffffffff 	.word	0xffffffff
    3bb4:	ffffffff 	.word	0xffffffff
    3bb8:	ffffffff 	.word	0xffffffff
    3bbc:	ffffffff 	.word	0xffffffff
    3bc0:	ffffffff 	.word	0xffffffff
    3bc4:	ffffffff 	.word	0xffffffff
    3bc8:	ffffffff 	.word	0xffffffff
    3bcc:	ffffffff 	.word	0xffffffff
    3bd0:	ffffffff 	.word	0xffffffff
    3bd4:	ffffffff 	.word	0xffffffff
    3bd8:	ffffffff 	.word	0xffffffff
    3bdc:	ffffffff 	.word	0xffffffff
    3be0:	ffffffff 	.word	0xffffffff
    3be4:	ffffffff 	.word	0xffffffff
    3be8:	ffffffff 	.word	0xffffffff
    3bec:	ffffffff 	.word	0xffffffff
    3bf0:	ffffffff 	.word	0xffffffff
    3bf4:	ffffffff 	.word	0xffffffff
    3bf8:	ffffffff 	.word	0xffffffff
    3bfc:	ffffffff 	.word	0xffffffff
    3c00:	ffffffff 	.word	0xffffffff
    3c04:	ffffffff 	.word	0xffffffff
    3c08:	ffffffff 	.word	0xffffffff
    3c0c:	ffffffff 	.word	0xffffffff
    3c10:	ffffffff 	.word	0xffffffff
    3c14:	ffffffff 	.word	0xffffffff
    3c18:	ffffffff 	.word	0xffffffff
    3c1c:	ffffffff 	.word	0xffffffff
    3c20:	ffffffff 	.word	0xffffffff
    3c24:	ffffffff 	.word	0xffffffff
    3c28:	ffffffff 	.word	0xffffffff
    3c2c:	ffffffff 	.word	0xffffffff
    3c30:	ffffffff 	.word	0xffffffff
    3c34:	ffffffff 	.word	0xffffffff
    3c38:	ffffffff 	.word	0xffffffff
    3c3c:	ffffffff 	.word	0xffffffff
    3c40:	ffffffff 	.word	0xffffffff
    3c44:	ffffffff 	.word	0xffffffff
    3c48:	ffffffff 	.word	0xffffffff
    3c4c:	ffffffff 	.word	0xffffffff
    3c50:	ffffffff 	.word	0xffffffff
    3c54:	ffffffff 	.word	0xffffffff
    3c58:	ffffffff 	.word	0xffffffff
    3c5c:	ffffffff 	.word	0xffffffff
    3c60:	ffffffff 	.word	0xffffffff
    3c64:	ffffffff 	.word	0xffffffff
    3c68:	ffffffff 	.word	0xffffffff
    3c6c:	ffffffff 	.word	0xffffffff
    3c70:	ffffffff 	.word	0xffffffff
    3c74:	ffffffff 	.word	0xffffffff
    3c78:	ffffffff 	.word	0xffffffff
    3c7c:	ffffffff 	.word	0xffffffff
    3c80:	ffffffff 	.word	0xffffffff
    3c84:	ffffffff 	.word	0xffffffff
    3c88:	ffffffff 	.word	0xffffffff
    3c8c:	ffffffff 	.word	0xffffffff
    3c90:	ffffffff 	.word	0xffffffff
    3c94:	ffffffff 	.word	0xffffffff
    3c98:	ffffffff 	.word	0xffffffff
    3c9c:	ffffffff 	.word	0xffffffff
    3ca0:	ffffffff 	.word	0xffffffff
    3ca4:	ffffffff 	.word	0xffffffff
    3ca8:	ffffffff 	.word	0xffffffff
    3cac:	ffffffff 	.word	0xffffffff
    3cb0:	ffffffff 	.word	0xffffffff
    3cb4:	ffffffff 	.word	0xffffffff
    3cb8:	ffffffff 	.word	0xffffffff
    3cbc:	ffffffff 	.word	0xffffffff
    3cc0:	ffffffff 	.word	0xffffffff
    3cc4:	ffffffff 	.word	0xffffffff
    3cc8:	ffffffff 	.word	0xffffffff
    3ccc:	ffffffff 	.word	0xffffffff
    3cd0:	ffffffff 	.word	0xffffffff
    3cd4:	ffffffff 	.word	0xffffffff
    3cd8:	ffffffff 	.word	0xffffffff
    3cdc:	ffffffff 	.word	0xffffffff
    3ce0:	ffffffff 	.word	0xffffffff
    3ce4:	ffffffff 	.word	0xffffffff
    3ce8:	ffffffff 	.word	0xffffffff
    3cec:	ffffffff 	.word	0xffffffff
    3cf0:	ffffffff 	.word	0xffffffff
    3cf4:	ffffffff 	.word	0xffffffff
    3cf8:	ffffffff 	.word	0xffffffff
    3cfc:	ffffffff 	.word	0xffffffff
    3d00:	ffffffff 	.word	0xffffffff
    3d04:	ffffffff 	.word	0xffffffff
    3d08:	ffffffff 	.word	0xffffffff
    3d0c:	ffffffff 	.word	0xffffffff
    3d10:	ffffffff 	.word	0xffffffff
    3d14:	ffffffff 	.word	0xffffffff
    3d18:	ffffffff 	.word	0xffffffff
    3d1c:	ffffffff 	.word	0xffffffff
    3d20:	ffffffff 	.word	0xffffffff
    3d24:	ffffffff 	.word	0xffffffff
    3d28:	ffffffff 	.word	0xffffffff
    3d2c:	ffffffff 	.word	0xffffffff
    3d30:	ffffffff 	.word	0xffffffff
    3d34:	ffffffff 	.word	0xffffffff
    3d38:	ffffffff 	.word	0xffffffff
    3d3c:	ffffffff 	.word	0xffffffff
    3d40:	ffffffff 	.word	0xffffffff
    3d44:	ffffffff 	.word	0xffffffff
    3d48:	ffffffff 	.word	0xffffffff
    3d4c:	ffffffff 	.word	0xffffffff
    3d50:	ffffffff 	.word	0xffffffff
    3d54:	ffffffff 	.word	0xffffffff
    3d58:	ffffffff 	.word	0xffffffff
    3d5c:	ffffffff 	.word	0xffffffff
    3d60:	ffffffff 	.word	0xffffffff
    3d64:	ffffffff 	.word	0xffffffff
    3d68:	ffffffff 	.word	0xffffffff
    3d6c:	ffffffff 	.word	0xffffffff
    3d70:	ffffffff 	.word	0xffffffff
    3d74:	ffffffff 	.word	0xffffffff
    3d78:	ffffffff 	.word	0xffffffff
    3d7c:	ffffffff 	.word	0xffffffff
    3d80:	ffffffff 	.word	0xffffffff
    3d84:	ffffffff 	.word	0xffffffff
    3d88:	ffffffff 	.word	0xffffffff
    3d8c:	ffffffff 	.word	0xffffffff
    3d90:	ffffffff 	.word	0xffffffff
    3d94:	ffffffff 	.word	0xffffffff
    3d98:	ffffffff 	.word	0xffffffff
    3d9c:	ffffffff 	.word	0xffffffff
    3da0:	ffffffff 	.word	0xffffffff
    3da4:	ffffffff 	.word	0xffffffff
    3da8:	ffffffff 	.word	0xffffffff
    3dac:	ffffffff 	.word	0xffffffff
    3db0:	ffffffff 	.word	0xffffffff
    3db4:	ffffffff 	.word	0xffffffff
    3db8:	ffffffff 	.word	0xffffffff
    3dbc:	ffffffff 	.word	0xffffffff
    3dc0:	ffffffff 	.word	0xffffffff
    3dc4:	ffffffff 	.word	0xffffffff
    3dc8:	ffffffff 	.word	0xffffffff
    3dcc:	ffffffff 	.word	0xffffffff
    3dd0:	ffffffff 	.word	0xffffffff
    3dd4:	ffffffff 	.word	0xffffffff
    3dd8:	ffffffff 	.word	0xffffffff
    3ddc:	ffffffff 	.word	0xffffffff
    3de0:	ffffffff 	.word	0xffffffff
    3de4:	ffffffff 	.word	0xffffffff
    3de8:	ffffffff 	.word	0xffffffff
    3dec:	ffffffff 	.word	0xffffffff
    3df0:	ffffffff 	.word	0xffffffff
    3df4:	ffffffff 	.word	0xffffffff
    3df8:	ffffffff 	.word	0xffffffff
    3dfc:	ffffffff 	.word	0xffffffff
    3e00:	ffffffff 	.word	0xffffffff
    3e04:	ffffffff 	.word	0xffffffff
    3e08:	ffffffff 	.word	0xffffffff
    3e0c:	ffffffff 	.word	0xffffffff
    3e10:	ffffffff 	.word	0xffffffff
    3e14:	ffffffff 	.word	0xffffffff
    3e18:	ffffffff 	.word	0xffffffff
    3e1c:	ffffffff 	.word	0xffffffff
    3e20:	ffffffff 	.word	0xffffffff
    3e24:	ffffffff 	.word	0xffffffff
    3e28:	ffffffff 	.word	0xffffffff
    3e2c:	ffffffff 	.word	0xffffffff
    3e30:	ffffffff 	.word	0xffffffff
    3e34:	ffffffff 	.word	0xffffffff
    3e38:	ffffffff 	.word	0xffffffff
    3e3c:	ffffffff 	.word	0xffffffff
    3e40:	ffffffff 	.word	0xffffffff
    3e44:	ffffffff 	.word	0xffffffff
    3e48:	ffffffff 	.word	0xffffffff
    3e4c:	ffffffff 	.word	0xffffffff
    3e50:	ffffffff 	.word	0xffffffff
    3e54:	ffffffff 	.word	0xffffffff
    3e58:	ffffffff 	.word	0xffffffff
    3e5c:	ffffffff 	.word	0xffffffff
    3e60:	ffffffff 	.word	0xffffffff
    3e64:	ffffffff 	.word	0xffffffff
    3e68:	ffffffff 	.word	0xffffffff
    3e6c:	ffffffff 	.word	0xffffffff
    3e70:	ffffffff 	.word	0xffffffff
    3e74:	ffffffff 	.word	0xffffffff
    3e78:	ffffffff 	.word	0xffffffff
    3e7c:	ffffffff 	.word	0xffffffff
    3e80:	ffffffff 	.word	0xffffffff
    3e84:	ffffffff 	.word	0xffffffff
    3e88:	ffffffff 	.word	0xffffffff
    3e8c:	ffffffff 	.word	0xffffffff
    3e90:	ffffffff 	.word	0xffffffff
    3e94:	ffffffff 	.word	0xffffffff
    3e98:	ffffffff 	.word	0xffffffff
    3e9c:	ffffffff 	.word	0xffffffff
    3ea0:	ffffffff 	.word	0xffffffff
    3ea4:	ffffffff 	.word	0xffffffff
    3ea8:	ffffffff 	.word	0xffffffff
    3eac:	ffffffff 	.word	0xffffffff
    3eb0:	ffffffff 	.word	0xffffffff
    3eb4:	ffffffff 	.word	0xffffffff
    3eb8:	ffffffff 	.word	0xffffffff
    3ebc:	ffffffff 	.word	0xffffffff
    3ec0:	ffffffff 	.word	0xffffffff
    3ec4:	ffffffff 	.word	0xffffffff
    3ec8:	ffffffff 	.word	0xffffffff
    3ecc:	ffffffff 	.word	0xffffffff
    3ed0:	ffffffff 	.word	0xffffffff
    3ed4:	ffffffff 	.word	0xffffffff
    3ed8:	ffffffff 	.word	0xffffffff
    3edc:	ffffffff 	.word	0xffffffff
    3ee0:	ffffffff 	.word	0xffffffff
    3ee4:	ffffffff 	.word	0xffffffff
    3ee8:	ffffffff 	.word	0xffffffff
    3eec:	ffffffff 	.word	0xffffffff
    3ef0:	ffffffff 	.word	0xffffffff
    3ef4:	ffffffff 	.word	0xffffffff
    3ef8:	ffffffff 	.word	0xffffffff
    3efc:	ffffffff 	.word	0xffffffff
    3f00:	ffffffff 	.word	0xffffffff
    3f04:	ffffffff 	.word	0xffffffff
    3f08:	ffffffff 	.word	0xffffffff
    3f0c:	ffffffff 	.word	0xffffffff
    3f10:	ffffffff 	.word	0xffffffff
    3f14:	ffffffff 	.word	0xffffffff
    3f18:	ffffffff 	.word	0xffffffff
    3f1c:	ffffffff 	.word	0xffffffff
    3f20:	ffffffff 	.word	0xffffffff
    3f24:	ffffffff 	.word	0xffffffff
    3f28:	ffffffff 	.word	0xffffffff
    3f2c:	ffffffff 	.word	0xffffffff
    3f30:	ffffffff 	.word	0xffffffff
    3f34:	ffffffff 	.word	0xffffffff
    3f38:	ffffffff 	.word	0xffffffff
    3f3c:	ffffffff 	.word	0xffffffff
    3f40:	ffffffff 	.word	0xffffffff
    3f44:	ffffffff 	.word	0xffffffff
    3f48:	ffffffff 	.word	0xffffffff
    3f4c:	ffffffff 	.word	0xffffffff
    3f50:	ffffffff 	.word	0xffffffff
    3f54:	ffffffff 	.word	0xffffffff
    3f58:	ffffffff 	.word	0xffffffff
    3f5c:	ffffffff 	.word	0xffffffff
    3f60:	ffffffff 	.word	0xffffffff
    3f64:	ffffffff 	.word	0xffffffff
    3f68:	ffffffff 	.word	0xffffffff
    3f6c:	ffffffff 	.word	0xffffffff
    3f70:	ffffffff 	.word	0xffffffff
    3f74:	ffffffff 	.word	0xffffffff
    3f78:	ffffffff 	.word	0xffffffff
    3f7c:	ffffffff 	.word	0xffffffff
    3f80:	ffffffff 	.word	0xffffffff
    3f84:	ffffffff 	.word	0xffffffff
    3f88:	ffffffff 	.word	0xffffffff
    3f8c:	ffffffff 	.word	0xffffffff
    3f90:	ffffffff 	.word	0xffffffff
    3f94:	ffffffff 	.word	0xffffffff
    3f98:	ffffffff 	.word	0xffffffff
    3f9c:	ffffffff 	.word	0xffffffff
    3fa0:	ffffffff 	.word	0xffffffff
    3fa4:	ffffffff 	.word	0xffffffff
    3fa8:	ffffffff 	.word	0xffffffff
    3fac:	ffffffff 	.word	0xffffffff
    3fb0:	ffffffff 	.word	0xffffffff
    3fb4:	ffffffff 	.word	0xffffffff
    3fb8:	ffffffff 	.word	0xffffffff
    3fbc:	ffffffff 	.word	0xffffffff
    3fc0:	ffffffff 	.word	0xffffffff
    3fc4:	ffffffff 	.word	0xffffffff
    3fc8:	ffffffff 	.word	0xffffffff
    3fcc:	ffffffff 	.word	0xffffffff
    3fd0:	ffffffff 	.word	0xffffffff
    3fd4:	ffffffff 	.word	0xffffffff
    3fd8:	ffffffff 	.word	0xffffffff
    3fdc:	ffffffff 	.word	0xffffffff
    3fe0:	ffffffff 	.word	0xffffffff
    3fe4:	ffffffff 	.word	0xffffffff
    3fe8:	ffffffff 	.word	0xffffffff
    3fec:	ffffffff 	.word	0xffffffff
    3ff0:	ffffffff 	.word	0xffffffff
    3ff4:	ffffffff 	.word	0xffffffff
    3ff8:	ffffffff 	.word	0xffffffff
    3ffc:	ffffffff 	.word	0xffffffff
    4000:	ffffffff 	.word	0xffffffff
    4004:	ffffffff 	.word	0xffffffff
    4008:	ffffffff 	.word	0xffffffff
    400c:	ffffffff 	.word	0xffffffff
    4010:	ffffffff 	.word	0xffffffff
    4014:	ffffffff 	.word	0xffffffff
    4018:	ffffffff 	.word	0xffffffff
    401c:	ffffffff 	.word	0xffffffff
    4020:	ffffffff 	.word	0xffffffff
    4024:	ffffffff 	.word	0xffffffff
    4028:	ffffffff 	.word	0xffffffff
    402c:	ffffffff 	.word	0xffffffff
    4030:	ffffffff 	.word	0xffffffff
    4034:	ffffffff 	.word	0xffffffff
    4038:	ffffffff 	.word	0xffffffff
    403c:	ffffffff 	.word	0xffffffff
    4040:	ffffffff 	.word	0xffffffff
    4044:	ffffffff 	.word	0xffffffff
    4048:	ffffffff 	.word	0xffffffff
    404c:	ffffffff 	.word	0xffffffff
    4050:	ffffffff 	.word	0xffffffff
    4054:	ffffffff 	.word	0xffffffff
    4058:	ffffffff 	.word	0xffffffff
    405c:	ffffffff 	.word	0xffffffff
    4060:	ffffffff 	.word	0xffffffff
    4064:	ffffffff 	.word	0xffffffff
    4068:	ffffffff 	.word	0xffffffff
    406c:	ffffffff 	.word	0xffffffff
    4070:	ffffffff 	.word	0xffffffff
    4074:	ffffffff 	.word	0xffffffff
    4078:	ffffffff 	.word	0xffffffff
    407c:	ffffffff 	.word	0xffffffff
    4080:	ffffffff 	.word	0xffffffff
    4084:	ffffffff 	.word	0xffffffff
    4088:	ffffffff 	.word	0xffffffff
    408c:	ffffffff 	.word	0xffffffff
    4090:	ffffffff 	.word	0xffffffff
    4094:	ffffffff 	.word	0xffffffff
    4098:	ffffffff 	.word	0xffffffff
    409c:	ffffffff 	.word	0xffffffff
    40a0:	ffffffff 	.word	0xffffffff
    40a4:	ffffffff 	.word	0xffffffff
    40a8:	ffffffff 	.word	0xffffffff
    40ac:	ffffffff 	.word	0xffffffff
    40b0:	ffffffff 	.word	0xffffffff
    40b4:	ffffffff 	.word	0xffffffff
    40b8:	ffffffff 	.word	0xffffffff
    40bc:	ffffffff 	.word	0xffffffff
    40c0:	ffffffff 	.word	0xffffffff
    40c4:	ffffffff 	.word	0xffffffff
    40c8:	ffffffff 	.word	0xffffffff
    40cc:	ffffffff 	.word	0xffffffff
    40d0:	ffffffff 	.word	0xffffffff
    40d4:	ffffffff 	.word	0xffffffff
    40d8:	ffffffff 	.word	0xffffffff
    40dc:	ffffffff 	.word	0xffffffff
    40e0:	ffffffff 	.word	0xffffffff
    40e4:	ffffffff 	.word	0xffffffff
    40e8:	ffffffff 	.word	0xffffffff
    40ec:	ffffffff 	.word	0xffffffff
    40f0:	ffffffff 	.word	0xffffffff
    40f4:	ffffffff 	.word	0xffffffff
    40f8:	ffffffff 	.word	0xffffffff
    40fc:	ffffffff 	.word	0xffffffff
    4100:	ffffffff 	.word	0xffffffff
    4104:	ffffffff 	.word	0xffffffff
    4108:	ffffffff 	.word	0xffffffff
    410c:	ffffffff 	.word	0xffffffff
    4110:	ffffffff 	.word	0xffffffff
    4114:	ffffffff 	.word	0xffffffff
    4118:	ffffffff 	.word	0xffffffff
    411c:	ffffffff 	.word	0xffffffff
    4120:	ffffffff 	.word	0xffffffff
    4124:	ffffffff 	.word	0xffffffff
    4128:	ffffffff 	.word	0xffffffff
    412c:	ffffffff 	.word	0xffffffff
    4130:	ffffffff 	.word	0xffffffff
    4134:	ffffffff 	.word	0xffffffff
    4138:	ffffffff 	.word	0xffffffff
    413c:	ffffffff 	.word	0xffffffff
    4140:	ffffffff 	.word	0xffffffff
    4144:	ffffffff 	.word	0xffffffff
    4148:	ffffffff 	.word	0xffffffff
    414c:	ffffffff 	.word	0xffffffff
    4150:	ffffffff 	.word	0xffffffff
    4154:	ffffffff 	.word	0xffffffff
    4158:	ffffffff 	.word	0xffffffff
    415c:	ffffffff 	.word	0xffffffff
    4160:	ffffffff 	.word	0xffffffff
    4164:	ffffffff 	.word	0xffffffff
    4168:	ffffffff 	.word	0xffffffff
    416c:	ffffffff 	.word	0xffffffff
    4170:	ffffffff 	.word	0xffffffff
    4174:	ffffffff 	.word	0xffffffff
    4178:	ffffffff 	.word	0xffffffff
    417c:	ffffffff 	.word	0xffffffff
    4180:	ffffffff 	.word	0xffffffff
    4184:	ffffffff 	.word	0xffffffff
    4188:	ffffffff 	.word	0xffffffff
    418c:	ffffffff 	.word	0xffffffff
    4190:	ffffffff 	.word	0xffffffff
    4194:	ffffffff 	.word	0xffffffff
    4198:	ffffffff 	.word	0xffffffff
    419c:	ffffffff 	.word	0xffffffff
    41a0:	ffffffff 	.word	0xffffffff
    41a4:	ffffffff 	.word	0xffffffff
    41a8:	ffffffff 	.word	0xffffffff
    41ac:	ffffffff 	.word	0xffffffff
    41b0:	ffffffff 	.word	0xffffffff
    41b4:	ffffffff 	.word	0xffffffff
    41b8:	ffffffff 	.word	0xffffffff
    41bc:	ffffffff 	.word	0xffffffff
    41c0:	ffffffff 	.word	0xffffffff
    41c4:	ffffffff 	.word	0xffffffff
    41c8:	ffffffff 	.word	0xffffffff
    41cc:	ffffffff 	.word	0xffffffff
    41d0:	ffffffff 	.word	0xffffffff
    41d4:	ffffffff 	.word	0xffffffff
    41d8:	ffffffff 	.word	0xffffffff
    41dc:	ffffffff 	.word	0xffffffff
    41e0:	ffffffff 	.word	0xffffffff
    41e4:	ffffffff 	.word	0xffffffff
    41e8:	ffffffff 	.word	0xffffffff
    41ec:	ffffffff 	.word	0xffffffff
    41f0:	ffffffff 	.word	0xffffffff
    41f4:	ffffffff 	.word	0xffffffff
    41f8:	ffffffff 	.word	0xffffffff
    41fc:	ffffffff 	.word	0xffffffff
    4200:	ffffffff 	.word	0xffffffff
    4204:	ffffffff 	.word	0xffffffff
    4208:	ffffffff 	.word	0xffffffff
    420c:	ffffffff 	.word	0xffffffff
    4210:	ffffffff 	.word	0xffffffff
    4214:	ffffffff 	.word	0xffffffff
    4218:	ffffffff 	.word	0xffffffff
    421c:	ffffffff 	.word	0xffffffff
    4220:	ffffffff 	.word	0xffffffff
    4224:	ffffffff 	.word	0xffffffff
    4228:	ffffffff 	.word	0xffffffff
    422c:	ffffffff 	.word	0xffffffff
    4230:	ffffffff 	.word	0xffffffff
    4234:	ffffffff 	.word	0xffffffff
    4238:	ffffffff 	.word	0xffffffff
    423c:	ffffffff 	.word	0xffffffff
    4240:	ffffffff 	.word	0xffffffff
    4244:	ffffffff 	.word	0xffffffff
    4248:	ffffffff 	.word	0xffffffff
    424c:	ffffffff 	.word	0xffffffff
    4250:	ffffffff 	.word	0xffffffff
    4254:	ffffffff 	.word	0xffffffff
    4258:	ffffffff 	.word	0xffffffff
    425c:	ffffffff 	.word	0xffffffff
    4260:	ffffffff 	.word	0xffffffff
    4264:	ffffffff 	.word	0xffffffff
    4268:	ffffffff 	.word	0xffffffff
    426c:	ffffffff 	.word	0xffffffff
    4270:	ffffffff 	.word	0xffffffff
    4274:	ffffffff 	.word	0xffffffff
    4278:	ffffffff 	.word	0xffffffff
    427c:	ffffffff 	.word	0xffffffff
    4280:	ffffffff 	.word	0xffffffff
    4284:	ffffffff 	.word	0xffffffff
    4288:	ffffffff 	.word	0xffffffff
    428c:	ffffffff 	.word	0xffffffff
    4290:	ffffffff 	.word	0xffffffff
    4294:	ffffffff 	.word	0xffffffff
    4298:	ffffffff 	.word	0xffffffff
    429c:	ffffffff 	.word	0xffffffff
    42a0:	ffffffff 	.word	0xffffffff
    42a4:	ffffffff 	.word	0xffffffff
    42a8:	ffffffff 	.word	0xffffffff
    42ac:	ffffffff 	.word	0xffffffff
    42b0:	ffffffff 	.word	0xffffffff
    42b4:	ffffffff 	.word	0xffffffff
    42b8:	ffffffff 	.word	0xffffffff
    42bc:	ffffffff 	.word	0xffffffff
    42c0:	ffffffff 	.word	0xffffffff
    42c4:	ffffffff 	.word	0xffffffff
    42c8:	ffffffff 	.word	0xffffffff
    42cc:	ffffffff 	.word	0xffffffff
    42d0:	ffffffff 	.word	0xffffffff
    42d4:	ffffffff 	.word	0xffffffff
    42d8:	ffffffff 	.word	0xffffffff
    42dc:	ffffffff 	.word	0xffffffff
    42e0:	ffffffff 	.word	0xffffffff
    42e4:	ffffffff 	.word	0xffffffff
    42e8:	ffffffff 	.word	0xffffffff
    42ec:	ffffffff 	.word	0xffffffff
    42f0:	ffffffff 	.word	0xffffffff
    42f4:	ffffffff 	.word	0xffffffff
    42f8:	ffffffff 	.word	0xffffffff
    42fc:	ffffffff 	.word	0xffffffff
    4300:	ffffffff 	.word	0xffffffff
    4304:	ffffffff 	.word	0xffffffff
    4308:	ffffffff 	.word	0xffffffff
    430c:	ffffffff 	.word	0xffffffff
    4310:	ffffffff 	.word	0xffffffff
    4314:	ffffffff 	.word	0xffffffff
    4318:	ffffffff 	.word	0xffffffff
    431c:	ffffffff 	.word	0xffffffff
    4320:	ffffffff 	.word	0xffffffff
    4324:	ffffffff 	.word	0xffffffff
    4328:	ffffffff 	.word	0xffffffff
    432c:	ffffffff 	.word	0xffffffff
    4330:	ffffffff 	.word	0xffffffff
    4334:	ffffffff 	.word	0xffffffff
    4338:	ffffffff 	.word	0xffffffff
    433c:	ffffffff 	.word	0xffffffff
    4340:	ffffffff 	.word	0xffffffff
    4344:	ffffffff 	.word	0xffffffff
    4348:	ffffffff 	.word	0xffffffff
    434c:	ffffffff 	.word	0xffffffff
    4350:	ffffffff 	.word	0xffffffff
    4354:	ffffffff 	.word	0xffffffff
    4358:	ffffffff 	.word	0xffffffff
    435c:	ffffffff 	.word	0xffffffff
    4360:	ffffffff 	.word	0xffffffff
    4364:	ffffffff 	.word	0xffffffff
    4368:	ffffffff 	.word	0xffffffff
    436c:	ffffffff 	.word	0xffffffff
    4370:	ffffffff 	.word	0xffffffff
    4374:	ffffffff 	.word	0xffffffff
    4378:	ffffffff 	.word	0xffffffff
    437c:	ffffffff 	.word	0xffffffff
    4380:	ffffffff 	.word	0xffffffff
    4384:	ffffffff 	.word	0xffffffff
    4388:	ffffffff 	.word	0xffffffff
    438c:	ffffffff 	.word	0xffffffff
    4390:	ffffffff 	.word	0xffffffff
    4394:	ffffffff 	.word	0xffffffff
    4398:	ffffffff 	.word	0xffffffff
    439c:	ffffffff 	.word	0xffffffff
    43a0:	ffffffff 	.word	0xffffffff
    43a4:	ffffffff 	.word	0xffffffff
    43a8:	ffffffff 	.word	0xffffffff
    43ac:	ffffffff 	.word	0xffffffff
    43b0:	ffffffff 	.word	0xffffffff
    43b4:	ffffffff 	.word	0xffffffff
    43b8:	ffffffff 	.word	0xffffffff
    43bc:	ffffffff 	.word	0xffffffff
    43c0:	ffffffff 	.word	0xffffffff
    43c4:	ffffffff 	.word	0xffffffff
    43c8:	ffffffff 	.word	0xffffffff
    43cc:	ffffffff 	.word	0xffffffff
    43d0:	ffffffff 	.word	0xffffffff
    43d4:	ffffffff 	.word	0xffffffff
    43d8:	ffffffff 	.word	0xffffffff
    43dc:	ffffffff 	.word	0xffffffff
    43e0:	ffffffff 	.word	0xffffffff
    43e4:	ffffffff 	.word	0xffffffff
    43e8:	ffffffff 	.word	0xffffffff
    43ec:	ffffffff 	.word	0xffffffff
    43f0:	ffffffff 	.word	0xffffffff
    43f4:	ffffffff 	.word	0xffffffff
    43f8:	ffffffff 	.word	0xffffffff
    43fc:	ffffffff 	.word	0xffffffff
    4400:	ffffffff 	.word	0xffffffff
    4404:	ffffffff 	.word	0xffffffff
    4408:	ffffffff 	.word	0xffffffff
    440c:	ffffffff 	.word	0xffffffff
    4410:	ffffffff 	.word	0xffffffff
    4414:	ffffffff 	.word	0xffffffff
    4418:	ffffffff 	.word	0xffffffff
    441c:	ffffffff 	.word	0xffffffff
    4420:	ffffffff 	.word	0xffffffff
    4424:	ffffffff 	.word	0xffffffff
    4428:	ffffffff 	.word	0xffffffff
    442c:	ffffffff 	.word	0xffffffff
    4430:	ffffffff 	.word	0xffffffff
    4434:	ffffffff 	.word	0xffffffff
    4438:	ffffffff 	.word	0xffffffff
    443c:	ffffffff 	.word	0xffffffff
    4440:	ffffffff 	.word	0xffffffff
    4444:	ffffffff 	.word	0xffffffff
    4448:	ffffffff 	.word	0xffffffff
    444c:	ffffffff 	.word	0xffffffff
    4450:	ffffffff 	.word	0xffffffff
    4454:	ffffffff 	.word	0xffffffff
    4458:	ffffffff 	.word	0xffffffff
    445c:	ffffffff 	.word	0xffffffff
    4460:	ffffffff 	.word	0xffffffff
    4464:	ffffffff 	.word	0xffffffff
    4468:	ffffffff 	.word	0xffffffff
    446c:	ffffffff 	.word	0xffffffff
    4470:	ffffffff 	.word	0xffffffff
    4474:	ffffffff 	.word	0xffffffff
    4478:	ffffffff 	.word	0xffffffff
    447c:	ffffffff 	.word	0xffffffff
    4480:	ffffffff 	.word	0xffffffff
    4484:	ffffffff 	.word	0xffffffff
    4488:	ffffffff 	.word	0xffffffff
    448c:	ffffffff 	.word	0xffffffff
    4490:	ffffffff 	.word	0xffffffff
    4494:	ffffffff 	.word	0xffffffff
    4498:	ffffffff 	.word	0xffffffff
    449c:	ffffffff 	.word	0xffffffff
    44a0:	ffffffff 	.word	0xffffffff
    44a4:	ffffffff 	.word	0xffffffff
    44a8:	ffffffff 	.word	0xffffffff
    44ac:	ffffffff 	.word	0xffffffff
    44b0:	ffffffff 	.word	0xffffffff
    44b4:	ffffffff 	.word	0xffffffff
    44b8:	ffffffff 	.word	0xffffffff
    44bc:	ffffffff 	.word	0xffffffff
    44c0:	ffffffff 	.word	0xffffffff
    44c4:	ffffffff 	.word	0xffffffff
    44c8:	ffffffff 	.word	0xffffffff
    44cc:	ffffffff 	.word	0xffffffff
    44d0:	ffffffff 	.word	0xffffffff
    44d4:	ffffffff 	.word	0xffffffff
    44d8:	ffffffff 	.word	0xffffffff
    44dc:	ffffffff 	.word	0xffffffff
    44e0:	ffffffff 	.word	0xffffffff
    44e4:	ffffffff 	.word	0xffffffff
    44e8:	ffffffff 	.word	0xffffffff
    44ec:	ffffffff 	.word	0xffffffff
    44f0:	ffffffff 	.word	0xffffffff
    44f4:	ffffffff 	.word	0xffffffff
    44f8:	ffffffff 	.word	0xffffffff
    44fc:	ffffffff 	.word	0xffffffff
    4500:	ffffffff 	.word	0xffffffff
    4504:	ffffffff 	.word	0xffffffff
    4508:	ffffffff 	.word	0xffffffff
    450c:	ffffffff 	.word	0xffffffff
    4510:	ffffffff 	.word	0xffffffff
    4514:	ffffffff 	.word	0xffffffff
    4518:	ffffffff 	.word	0xffffffff
    451c:	ffffffff 	.word	0xffffffff
    4520:	ffffffff 	.word	0xffffffff
    4524:	ffffffff 	.word	0xffffffff
    4528:	ffffffff 	.word	0xffffffff
    452c:	ffffffff 	.word	0xffffffff
    4530:	ffffffff 	.word	0xffffffff
    4534:	ffffffff 	.word	0xffffffff
    4538:	ffffffff 	.word	0xffffffff
    453c:	ffffffff 	.word	0xffffffff
    4540:	ffffffff 	.word	0xffffffff
    4544:	ffffffff 	.word	0xffffffff
    4548:	ffffffff 	.word	0xffffffff
    454c:	ffffffff 	.word	0xffffffff
    4550:	ffffffff 	.word	0xffffffff
    4554:	ffffffff 	.word	0xffffffff
    4558:	ffffffff 	.word	0xffffffff
    455c:	ffffffff 	.word	0xffffffff
    4560:	ffffffff 	.word	0xffffffff
    4564:	ffffffff 	.word	0xffffffff
    4568:	ffffffff 	.word	0xffffffff
    456c:	ffffffff 	.word	0xffffffff
    4570:	ffffffff 	.word	0xffffffff
    4574:	ffffffff 	.word	0xffffffff
    4578:	ffffffff 	.word	0xffffffff
    457c:	ffffffff 	.word	0xffffffff
    4580:	ffffffff 	.word	0xffffffff
    4584:	ffffffff 	.word	0xffffffff
    4588:	ffffffff 	.word	0xffffffff
    458c:	ffffffff 	.word	0xffffffff
    4590:	ffffffff 	.word	0xffffffff
    4594:	ffffffff 	.word	0xffffffff
    4598:	ffffffff 	.word	0xffffffff
    459c:	ffffffff 	.word	0xffffffff
    45a0:	ffffffff 	.word	0xffffffff
    45a4:	ffffffff 	.word	0xffffffff
    45a8:	ffffffff 	.word	0xffffffff
    45ac:	ffffffff 	.word	0xffffffff
    45b0:	ffffffff 	.word	0xffffffff
    45b4:	ffffffff 	.word	0xffffffff
    45b8:	ffffffff 	.word	0xffffffff
    45bc:	ffffffff 	.word	0xffffffff
    45c0:	ffffffff 	.word	0xffffffff
    45c4:	ffffffff 	.word	0xffffffff
    45c8:	ffffffff 	.word	0xffffffff
    45cc:	ffffffff 	.word	0xffffffff
    45d0:	ffffffff 	.word	0xffffffff
    45d4:	ffffffff 	.word	0xffffffff
    45d8:	ffffffff 	.word	0xffffffff
    45dc:	ffffffff 	.word	0xffffffff
    45e0:	ffffffff 	.word	0xffffffff
    45e4:	ffffffff 	.word	0xffffffff
    45e8:	ffffffff 	.word	0xffffffff
    45ec:	ffffffff 	.word	0xffffffff
    45f0:	ffffffff 	.word	0xffffffff
    45f4:	ffffffff 	.word	0xffffffff
    45f8:	ffffffff 	.word	0xffffffff
    45fc:	ffffffff 	.word	0xffffffff
    4600:	ffffffff 	.word	0xffffffff
    4604:	ffffffff 	.word	0xffffffff
    4608:	ffffffff 	.word	0xffffffff
    460c:	ffffffff 	.word	0xffffffff
    4610:	ffffffff 	.word	0xffffffff
    4614:	ffffffff 	.word	0xffffffff
    4618:	ffffffff 	.word	0xffffffff
    461c:	ffffffff 	.word	0xffffffff
    4620:	ffffffff 	.word	0xffffffff
    4624:	ffffffff 	.word	0xffffffff
    4628:	ffffffff 	.word	0xffffffff
    462c:	ffffffff 	.word	0xffffffff
    4630:	ffffffff 	.word	0xffffffff
    4634:	ffffffff 	.word	0xffffffff
    4638:	ffffffff 	.word	0xffffffff
    463c:	ffffffff 	.word	0xffffffff
    4640:	ffffffff 	.word	0xffffffff
    4644:	ffffffff 	.word	0xffffffff
    4648:	ffffffff 	.word	0xffffffff
    464c:	ffffffff 	.word	0xffffffff
    4650:	ffffffff 	.word	0xffffffff
    4654:	ffffffff 	.word	0xffffffff
    4658:	ffffffff 	.word	0xffffffff
    465c:	ffffffff 	.word	0xffffffff
    4660:	ffffffff 	.word	0xffffffff
    4664:	ffffffff 	.word	0xffffffff
    4668:	ffffffff 	.word	0xffffffff
    466c:	ffffffff 	.word	0xffffffff
    4670:	ffffffff 	.word	0xffffffff
    4674:	ffffffff 	.word	0xffffffff
    4678:	ffffffff 	.word	0xffffffff
    467c:	ffffffff 	.word	0xffffffff
    4680:	ffffffff 	.word	0xffffffff
    4684:	ffffffff 	.word	0xffffffff
    4688:	ffffffff 	.word	0xffffffff
    468c:	ffffffff 	.word	0xffffffff
    4690:	ffffffff 	.word	0xffffffff
    4694:	ffffffff 	.word	0xffffffff
    4698:	ffffffff 	.word	0xffffffff
    469c:	ffffffff 	.word	0xffffffff
    46a0:	ffffffff 	.word	0xffffffff
    46a4:	ffffffff 	.word	0xffffffff
    46a8:	ffffffff 	.word	0xffffffff
    46ac:	ffffffff 	.word	0xffffffff
    46b0:	ffffffff 	.word	0xffffffff
    46b4:	ffffffff 	.word	0xffffffff
    46b8:	ffffffff 	.word	0xffffffff
    46bc:	ffffffff 	.word	0xffffffff
    46c0:	ffffffff 	.word	0xffffffff
    46c4:	ffffffff 	.word	0xffffffff
    46c8:	ffffffff 	.word	0xffffffff
    46cc:	ffffffff 	.word	0xffffffff
    46d0:	ffffffff 	.word	0xffffffff
    46d4:	ffffffff 	.word	0xffffffff
    46d8:	ffffffff 	.word	0xffffffff
    46dc:	ffffffff 	.word	0xffffffff
    46e0:	ffffffff 	.word	0xffffffff
    46e4:	ffffffff 	.word	0xffffffff
    46e8:	ffffffff 	.word	0xffffffff
    46ec:	ffffffff 	.word	0xffffffff
    46f0:	ffffffff 	.word	0xffffffff
    46f4:	ffffffff 	.word	0xffffffff
    46f8:	ffffffff 	.word	0xffffffff
    46fc:	ffffffff 	.word	0xffffffff
    4700:	ffffffff 	.word	0xffffffff
    4704:	ffffffff 	.word	0xffffffff
    4708:	ffffffff 	.word	0xffffffff
    470c:	ffffffff 	.word	0xffffffff
    4710:	ffffffff 	.word	0xffffffff
    4714:	ffffffff 	.word	0xffffffff
    4718:	ffffffff 	.word	0xffffffff
    471c:	ffffffff 	.word	0xffffffff
    4720:	ffffffff 	.word	0xffffffff
    4724:	ffffffff 	.word	0xffffffff
    4728:	ffffffff 	.word	0xffffffff
    472c:	ffffffff 	.word	0xffffffff
    4730:	ffffffff 	.word	0xffffffff
    4734:	ffffffff 	.word	0xffffffff
    4738:	ffffffff 	.word	0xffffffff
    473c:	ffffffff 	.word	0xffffffff
    4740:	ffffffff 	.word	0xffffffff
    4744:	ffffffff 	.word	0xffffffff
    4748:	ffffffff 	.word	0xffffffff
    474c:	ffffffff 	.word	0xffffffff
    4750:	ffffffff 	.word	0xffffffff
    4754:	ffffffff 	.word	0xffffffff
    4758:	ffffffff 	.word	0xffffffff
    475c:	ffffffff 	.word	0xffffffff
    4760:	ffffffff 	.word	0xffffffff
    4764:	ffffffff 	.word	0xffffffff
    4768:	ffffffff 	.word	0xffffffff
    476c:	ffffffff 	.word	0xffffffff
    4770:	ffffffff 	.word	0xffffffff
    4774:	ffffffff 	.word	0xffffffff
    4778:	ffffffff 	.word	0xffffffff
    477c:	ffffffff 	.word	0xffffffff
    4780:	ffffffff 	.word	0xffffffff
    4784:	ffffffff 	.word	0xffffffff
    4788:	ffffffff 	.word	0xffffffff
    478c:	ffffffff 	.word	0xffffffff
    4790:	ffffffff 	.word	0xffffffff
    4794:	ffffffff 	.word	0xffffffff
    4798:	ffffffff 	.word	0xffffffff
    479c:	ffffffff 	.word	0xffffffff
    47a0:	ffffffff 	.word	0xffffffff
    47a4:	ffffffff 	.word	0xffffffff
    47a8:	ffffffff 	.word	0xffffffff
    47ac:	ffffffff 	.word	0xffffffff
    47b0:	ffffffff 	.word	0xffffffff
    47b4:	ffffffff 	.word	0xffffffff
    47b8:	ffffffff 	.word	0xffffffff
    47bc:	ffffffff 	.word	0xffffffff
    47c0:	ffffffff 	.word	0xffffffff
    47c4:	ffffffff 	.word	0xffffffff
    47c8:	ffffffff 	.word	0xffffffff
    47cc:	ffffffff 	.word	0xffffffff
    47d0:	ffffffff 	.word	0xffffffff
    47d4:	ffffffff 	.word	0xffffffff
    47d8:	ffffffff 	.word	0xffffffff
    47dc:	ffffffff 	.word	0xffffffff
    47e0:	ffffffff 	.word	0xffffffff
    47e4:	ffffffff 	.word	0xffffffff
    47e8:	ffffffff 	.word	0xffffffff
    47ec:	ffffffff 	.word	0xffffffff
    47f0:	ffffffff 	.word	0xffffffff
    47f4:	ffffffff 	.word	0xffffffff
    47f8:	ffffffff 	.word	0xffffffff
    47fc:	ffffffff 	.word	0xffffffff
    4800:	ffffffff 	.word	0xffffffff
    4804:	ffffffff 	.word	0xffffffff
    4808:	ffffffff 	.word	0xffffffff
    480c:	ffffffff 	.word	0xffffffff
    4810:	ffffffff 	.word	0xffffffff
    4814:	ffffffff 	.word	0xffffffff
    4818:	ffffffff 	.word	0xffffffff
    481c:	ffffffff 	.word	0xffffffff
    4820:	ffffffff 	.word	0xffffffff
    4824:	ffffffff 	.word	0xffffffff
    4828:	ffffffff 	.word	0xffffffff
    482c:	ffffffff 	.word	0xffffffff
    4830:	ffffffff 	.word	0xffffffff
    4834:	ffffffff 	.word	0xffffffff
    4838:	ffffffff 	.word	0xffffffff
    483c:	ffffffff 	.word	0xffffffff
    4840:	ffffffff 	.word	0xffffffff
    4844:	ffffffff 	.word	0xffffffff
    4848:	ffffffff 	.word	0xffffffff
    484c:	ffffffff 	.word	0xffffffff
    4850:	ffffffff 	.word	0xffffffff
    4854:	ffffffff 	.word	0xffffffff
    4858:	ffffffff 	.word	0xffffffff
    485c:	ffffffff 	.word	0xffffffff
    4860:	ffffffff 	.word	0xffffffff
    4864:	ffffffff 	.word	0xffffffff
    4868:	ffffffff 	.word	0xffffffff
    486c:	ffffffff 	.word	0xffffffff
    4870:	ffffffff 	.word	0xffffffff
    4874:	ffffffff 	.word	0xffffffff
    4878:	ffffffff 	.word	0xffffffff
    487c:	ffffffff 	.word	0xffffffff
    4880:	ffffffff 	.word	0xffffffff
    4884:	ffffffff 	.word	0xffffffff
    4888:	ffffffff 	.word	0xffffffff
    488c:	ffffffff 	.word	0xffffffff
    4890:	ffffffff 	.word	0xffffffff
    4894:	ffffffff 	.word	0xffffffff
    4898:	ffffffff 	.word	0xffffffff
    489c:	ffffffff 	.word	0xffffffff
    48a0:	ffffffff 	.word	0xffffffff
    48a4:	ffffffff 	.word	0xffffffff
    48a8:	ffffffff 	.word	0xffffffff
    48ac:	ffffffff 	.word	0xffffffff
    48b0:	ffffffff 	.word	0xffffffff
    48b4:	ffffffff 	.word	0xffffffff
    48b8:	ffffffff 	.word	0xffffffff
    48bc:	ffffffff 	.word	0xffffffff
    48c0:	ffffffff 	.word	0xffffffff
    48c4:	ffffffff 	.word	0xffffffff
    48c8:	ffffffff 	.word	0xffffffff
    48cc:	ffffffff 	.word	0xffffffff
    48d0:	ffffffff 	.word	0xffffffff
    48d4:	ffffffff 	.word	0xffffffff
    48d8:	ffffffff 	.word	0xffffffff
    48dc:	ffffffff 	.word	0xffffffff
    48e0:	ffffffff 	.word	0xffffffff
    48e4:	ffffffff 	.word	0xffffffff
    48e8:	ffffffff 	.word	0xffffffff
    48ec:	ffffffff 	.word	0xffffffff
    48f0:	ffffffff 	.word	0xffffffff
    48f4:	ffffffff 	.word	0xffffffff
    48f8:	ffffffff 	.word	0xffffffff
    48fc:	ffffffff 	.word	0xffffffff
    4900:	ffffffff 	.word	0xffffffff
    4904:	ffffffff 	.word	0xffffffff
    4908:	ffffffff 	.word	0xffffffff
    490c:	ffffffff 	.word	0xffffffff
    4910:	ffffffff 	.word	0xffffffff
    4914:	ffffffff 	.word	0xffffffff
    4918:	ffffffff 	.word	0xffffffff
    491c:	ffffffff 	.word	0xffffffff
    4920:	ffffffff 	.word	0xffffffff
    4924:	ffffffff 	.word	0xffffffff
    4928:	ffffffff 	.word	0xffffffff
    492c:	ffffffff 	.word	0xffffffff
    4930:	ffffffff 	.word	0xffffffff
    4934:	ffffffff 	.word	0xffffffff
    4938:	ffffffff 	.word	0xffffffff
    493c:	ffffffff 	.word	0xffffffff
    4940:	ffffffff 	.word	0xffffffff
    4944:	ffffffff 	.word	0xffffffff
    4948:	ffffffff 	.word	0xffffffff
    494c:	ffffffff 	.word	0xffffffff
    4950:	ffffffff 	.word	0xffffffff
    4954:	ffffffff 	.word	0xffffffff
    4958:	ffffffff 	.word	0xffffffff
    495c:	ffffffff 	.word	0xffffffff
    4960:	ffffffff 	.word	0xffffffff
    4964:	ffffffff 	.word	0xffffffff
    4968:	ffffffff 	.word	0xffffffff
    496c:	ffffffff 	.word	0xffffffff
    4970:	ffffffff 	.word	0xffffffff
    4974:	ffffffff 	.word	0xffffffff
    4978:	ffffffff 	.word	0xffffffff
    497c:	ffffffff 	.word	0xffffffff
    4980:	ffffffff 	.word	0xffffffff
    4984:	ffffffff 	.word	0xffffffff
    4988:	ffffffff 	.word	0xffffffff
    498c:	ffffffff 	.word	0xffffffff
    4990:	ffffffff 	.word	0xffffffff
    4994:	ffffffff 	.word	0xffffffff
    4998:	ffffffff 	.word	0xffffffff
    499c:	ffffffff 	.word	0xffffffff
    49a0:	ffffffff 	.word	0xffffffff
    49a4:	ffffffff 	.word	0xffffffff
    49a8:	ffffffff 	.word	0xffffffff
    49ac:	ffffffff 	.word	0xffffffff
    49b0:	ffffffff 	.word	0xffffffff
    49b4:	ffffffff 	.word	0xffffffff
    49b8:	ffffffff 	.word	0xffffffff
    49bc:	ffffffff 	.word	0xffffffff
    49c0:	ffffffff 	.word	0xffffffff
    49c4:	ffffffff 	.word	0xffffffff
    49c8:	ffffffff 	.word	0xffffffff
    49cc:	ffffffff 	.word	0xffffffff
    49d0:	ffffffff 	.word	0xffffffff
    49d4:	ffffffff 	.word	0xffffffff
    49d8:	ffffffff 	.word	0xffffffff
    49dc:	ffffffff 	.word	0xffffffff
    49e0:	ffffffff 	.word	0xffffffff
    49e4:	ffffffff 	.word	0xffffffff
    49e8:	ffffffff 	.word	0xffffffff
    49ec:	ffffffff 	.word	0xffffffff
    49f0:	ffffffff 	.word	0xffffffff
    49f4:	ffffffff 	.word	0xffffffff
    49f8:	ffffffff 	.word	0xffffffff
    49fc:	ffffffff 	.word	0xffffffff
    4a00:	ffffffff 	.word	0xffffffff
    4a04:	ffffffff 	.word	0xffffffff
    4a08:	ffffffff 	.word	0xffffffff
    4a0c:	ffffffff 	.word	0xffffffff
    4a10:	ffffffff 	.word	0xffffffff
    4a14:	ffffffff 	.word	0xffffffff
    4a18:	ffffffff 	.word	0xffffffff
    4a1c:	ffffffff 	.word	0xffffffff
    4a20:	ffffffff 	.word	0xffffffff
    4a24:	ffffffff 	.word	0xffffffff
    4a28:	ffffffff 	.word	0xffffffff
    4a2c:	ffffffff 	.word	0xffffffff
    4a30:	ffffffff 	.word	0xffffffff
    4a34:	ffffffff 	.word	0xffffffff
    4a38:	ffffffff 	.word	0xffffffff
    4a3c:	ffffffff 	.word	0xffffffff
    4a40:	ffffffff 	.word	0xffffffff
    4a44:	ffffffff 	.word	0xffffffff
    4a48:	ffffffff 	.word	0xffffffff
    4a4c:	ffffffff 	.word	0xffffffff
    4a50:	ffffffff 	.word	0xffffffff
    4a54:	ffffffff 	.word	0xffffffff
    4a58:	ffffffff 	.word	0xffffffff
    4a5c:	ffffffff 	.word	0xffffffff
    4a60:	ffffffff 	.word	0xffffffff
    4a64:	ffffffff 	.word	0xffffffff
    4a68:	ffffffff 	.word	0xffffffff
    4a6c:	ffffffff 	.word	0xffffffff
    4a70:	ffffffff 	.word	0xffffffff
    4a74:	ffffffff 	.word	0xffffffff
    4a78:	ffffffff 	.word	0xffffffff
    4a7c:	ffffffff 	.word	0xffffffff
    4a80:	ffffffff 	.word	0xffffffff
    4a84:	ffffffff 	.word	0xffffffff
    4a88:	ffffffff 	.word	0xffffffff
    4a8c:	ffffffff 	.word	0xffffffff
    4a90:	ffffffff 	.word	0xffffffff
    4a94:	ffffffff 	.word	0xffffffff
    4a98:	ffffffff 	.word	0xffffffff
    4a9c:	ffffffff 	.word	0xffffffff
    4aa0:	ffffffff 	.word	0xffffffff
    4aa4:	ffffffff 	.word	0xffffffff
    4aa8:	ffffffff 	.word	0xffffffff
    4aac:	ffffffff 	.word	0xffffffff
    4ab0:	ffffffff 	.word	0xffffffff
    4ab4:	ffffffff 	.word	0xffffffff
    4ab8:	ffffffff 	.word	0xffffffff
    4abc:	ffffffff 	.word	0xffffffff
    4ac0:	ffffffff 	.word	0xffffffff
    4ac4:	ffffffff 	.word	0xffffffff
    4ac8:	ffffffff 	.word	0xffffffff
    4acc:	ffffffff 	.word	0xffffffff
    4ad0:	ffffffff 	.word	0xffffffff
    4ad4:	ffffffff 	.word	0xffffffff
    4ad8:	ffffffff 	.word	0xffffffff
    4adc:	ffffffff 	.word	0xffffffff
    4ae0:	ffffffff 	.word	0xffffffff
    4ae4:	ffffffff 	.word	0xffffffff
    4ae8:	ffffffff 	.word	0xffffffff
    4aec:	ffffffff 	.word	0xffffffff
    4af0:	ffffffff 	.word	0xffffffff
    4af4:	ffffffff 	.word	0xffffffff
    4af8:	ffffffff 	.word	0xffffffff
    4afc:	ffffffff 	.word	0xffffffff
    4b00:	ffffffff 	.word	0xffffffff
    4b04:	ffffffff 	.word	0xffffffff
    4b08:	ffffffff 	.word	0xffffffff
    4b0c:	ffffffff 	.word	0xffffffff
    4b10:	ffffffff 	.word	0xffffffff
    4b14:	ffffffff 	.word	0xffffffff
    4b18:	ffffffff 	.word	0xffffffff
    4b1c:	ffffffff 	.word	0xffffffff
    4b20:	ffffffff 	.word	0xffffffff
    4b24:	ffffffff 	.word	0xffffffff
    4b28:	ffffffff 	.word	0xffffffff
    4b2c:	ffffffff 	.word	0xffffffff
    4b30:	ffffffff 	.word	0xffffffff
    4b34:	ffffffff 	.word	0xffffffff
    4b38:	ffffffff 	.word	0xffffffff
    4b3c:	ffffffff 	.word	0xffffffff
    4b40:	ffffffff 	.word	0xffffffff
    4b44:	ffffffff 	.word	0xffffffff
    4b48:	ffffffff 	.word	0xffffffff
    4b4c:	ffffffff 	.word	0xffffffff
    4b50:	ffffffff 	.word	0xffffffff
    4b54:	ffffffff 	.word	0xffffffff
    4b58:	ffffffff 	.word	0xffffffff
    4b5c:	ffffffff 	.word	0xffffffff
    4b60:	ffffffff 	.word	0xffffffff
    4b64:	ffffffff 	.word	0xffffffff
    4b68:	ffffffff 	.word	0xffffffff
    4b6c:	ffffffff 	.word	0xffffffff
    4b70:	ffffffff 	.word	0xffffffff
    4b74:	ffffffff 	.word	0xffffffff
    4b78:	ffffffff 	.word	0xffffffff
    4b7c:	ffffffff 	.word	0xffffffff
    4b80:	ffffffff 	.word	0xffffffff
    4b84:	ffffffff 	.word	0xffffffff
    4b88:	ffffffff 	.word	0xffffffff
    4b8c:	ffffffff 	.word	0xffffffff
    4b90:	ffffffff 	.word	0xffffffff
    4b94:	ffffffff 	.word	0xffffffff
    4b98:	ffffffff 	.word	0xffffffff
    4b9c:	ffffffff 	.word	0xffffffff
    4ba0:	ffffffff 	.word	0xffffffff
    4ba4:	ffffffff 	.word	0xffffffff
    4ba8:	ffffffff 	.word	0xffffffff
    4bac:	ffffffff 	.word	0xffffffff
    4bb0:	ffffffff 	.word	0xffffffff
    4bb4:	ffffffff 	.word	0xffffffff
    4bb8:	ffffffff 	.word	0xffffffff
    4bbc:	ffffffff 	.word	0xffffffff
    4bc0:	ffffffff 	.word	0xffffffff
    4bc4:	ffffffff 	.word	0xffffffff
    4bc8:	ffffffff 	.word	0xffffffff
    4bcc:	ffffffff 	.word	0xffffffff
    4bd0:	ffffffff 	.word	0xffffffff
    4bd4:	ffffffff 	.word	0xffffffff
    4bd8:	ffffffff 	.word	0xffffffff
    4bdc:	ffffffff 	.word	0xffffffff
    4be0:	ffffffff 	.word	0xffffffff
    4be4:	ffffffff 	.word	0xffffffff
    4be8:	ffffffff 	.word	0xffffffff
    4bec:	ffffffff 	.word	0xffffffff
    4bf0:	ffffffff 	.word	0xffffffff
    4bf4:	ffffffff 	.word	0xffffffff
    4bf8:	ffffffff 	.word	0xffffffff
    4bfc:	ffffffff 	.word	0xffffffff
    4c00:	ffffffff 	.word	0xffffffff
    4c04:	ffffffff 	.word	0xffffffff
    4c08:	ffffffff 	.word	0xffffffff
    4c0c:	ffffffff 	.word	0xffffffff
    4c10:	ffffffff 	.word	0xffffffff
    4c14:	ffffffff 	.word	0xffffffff
    4c18:	ffffffff 	.word	0xffffffff
    4c1c:	ffffffff 	.word	0xffffffff
    4c20:	ffffffff 	.word	0xffffffff
    4c24:	ffffffff 	.word	0xffffffff
    4c28:	ffffffff 	.word	0xffffffff
    4c2c:	ffffffff 	.word	0xffffffff
    4c30:	ffffffff 	.word	0xffffffff
    4c34:	ffffffff 	.word	0xffffffff
    4c38:	ffffffff 	.word	0xffffffff
    4c3c:	ffffffff 	.word	0xffffffff
    4c40:	ffffffff 	.word	0xffffffff
    4c44:	ffffffff 	.word	0xffffffff
    4c48:	ffffffff 	.word	0xffffffff
    4c4c:	ffffffff 	.word	0xffffffff
    4c50:	ffffffff 	.word	0xffffffff
    4c54:	ffffffff 	.word	0xffffffff
    4c58:	ffffffff 	.word	0xffffffff
    4c5c:	ffffffff 	.word	0xffffffff
    4c60:	ffffffff 	.word	0xffffffff
    4c64:	ffffffff 	.word	0xffffffff
    4c68:	ffffffff 	.word	0xffffffff
    4c6c:	ffffffff 	.word	0xffffffff
    4c70:	ffffffff 	.word	0xffffffff
    4c74:	ffffffff 	.word	0xffffffff
    4c78:	ffffffff 	.word	0xffffffff
    4c7c:	ffffffff 	.word	0xffffffff
    4c80:	ffffffff 	.word	0xffffffff
    4c84:	ffffffff 	.word	0xffffffff
    4c88:	ffffffff 	.word	0xffffffff
    4c8c:	ffffffff 	.word	0xffffffff
    4c90:	ffffffff 	.word	0xffffffff
    4c94:	ffffffff 	.word	0xffffffff
    4c98:	ffffffff 	.word	0xffffffff
    4c9c:	ffffffff 	.word	0xffffffff
    4ca0:	ffffffff 	.word	0xffffffff
    4ca4:	ffffffff 	.word	0xffffffff
    4ca8:	ffffffff 	.word	0xffffffff
    4cac:	ffffffff 	.word	0xffffffff
    4cb0:	ffffffff 	.word	0xffffffff
    4cb4:	ffffffff 	.word	0xffffffff
    4cb8:	ffffffff 	.word	0xffffffff
    4cbc:	ffffffff 	.word	0xffffffff
    4cc0:	ffffffff 	.word	0xffffffff
    4cc4:	ffffffff 	.word	0xffffffff
    4cc8:	ffffffff 	.word	0xffffffff
    4ccc:	ffffffff 	.word	0xffffffff
    4cd0:	ffffffff 	.word	0xffffffff
    4cd4:	ffffffff 	.word	0xffffffff
    4cd8:	ffffffff 	.word	0xffffffff
    4cdc:	ffffffff 	.word	0xffffffff
    4ce0:	ffffffff 	.word	0xffffffff
    4ce4:	ffffffff 	.word	0xffffffff
    4ce8:	ffffffff 	.word	0xffffffff
    4cec:	ffffffff 	.word	0xffffffff
    4cf0:	ffffffff 	.word	0xffffffff
    4cf4:	ffffffff 	.word	0xffffffff
    4cf8:	ffffffff 	.word	0xffffffff
    4cfc:	ffffffff 	.word	0xffffffff
    4d00:	ffffffff 	.word	0xffffffff
    4d04:	ffffffff 	.word	0xffffffff
    4d08:	ffffffff 	.word	0xffffffff
    4d0c:	ffffffff 	.word	0xffffffff
    4d10:	ffffffff 	.word	0xffffffff
    4d14:	ffffffff 	.word	0xffffffff
    4d18:	ffffffff 	.word	0xffffffff
    4d1c:	ffffffff 	.word	0xffffffff
    4d20:	ffffffff 	.word	0xffffffff
    4d24:	ffffffff 	.word	0xffffffff
    4d28:	ffffffff 	.word	0xffffffff
    4d2c:	ffffffff 	.word	0xffffffff
    4d30:	ffffffff 	.word	0xffffffff
    4d34:	ffffffff 	.word	0xffffffff
    4d38:	ffffffff 	.word	0xffffffff
    4d3c:	ffffffff 	.word	0xffffffff
    4d40:	ffffffff 	.word	0xffffffff
    4d44:	ffffffff 	.word	0xffffffff
    4d48:	ffffffff 	.word	0xffffffff
    4d4c:	ffffffff 	.word	0xffffffff
    4d50:	ffffffff 	.word	0xffffffff
    4d54:	ffffffff 	.word	0xffffffff
    4d58:	ffffffff 	.word	0xffffffff
    4d5c:	ffffffff 	.word	0xffffffff
    4d60:	ffffffff 	.word	0xffffffff
    4d64:	ffffffff 	.word	0xffffffff
    4d68:	ffffffff 	.word	0xffffffff
    4d6c:	ffffffff 	.word	0xffffffff
    4d70:	ffffffff 	.word	0xffffffff
    4d74:	ffffffff 	.word	0xffffffff
    4d78:	ffffffff 	.word	0xffffffff
    4d7c:	ffffffff 	.word	0xffffffff
    4d80:	ffffffff 	.word	0xffffffff
    4d84:	ffffffff 	.word	0xffffffff
    4d88:	ffffffff 	.word	0xffffffff
    4d8c:	ffffffff 	.word	0xffffffff
    4d90:	ffffffff 	.word	0xffffffff
    4d94:	ffffffff 	.word	0xffffffff
    4d98:	ffffffff 	.word	0xffffffff
    4d9c:	ffffffff 	.word	0xffffffff
    4da0:	ffffffff 	.word	0xffffffff
    4da4:	ffffffff 	.word	0xffffffff
    4da8:	ffffffff 	.word	0xffffffff
    4dac:	ffffffff 	.word	0xffffffff
    4db0:	ffffffff 	.word	0xffffffff
    4db4:	ffffffff 	.word	0xffffffff
    4db8:	ffffffff 	.word	0xffffffff
    4dbc:	ffffffff 	.word	0xffffffff
    4dc0:	ffffffff 	.word	0xffffffff
    4dc4:	ffffffff 	.word	0xffffffff
    4dc8:	ffffffff 	.word	0xffffffff
    4dcc:	ffffffff 	.word	0xffffffff
    4dd0:	ffffffff 	.word	0xffffffff
    4dd4:	ffffffff 	.word	0xffffffff
    4dd8:	ffffffff 	.word	0xffffffff
    4ddc:	ffffffff 	.word	0xffffffff
    4de0:	ffffffff 	.word	0xffffffff
    4de4:	ffffffff 	.word	0xffffffff
    4de8:	ffffffff 	.word	0xffffffff
    4dec:	ffffffff 	.word	0xffffffff
    4df0:	ffffffff 	.word	0xffffffff
    4df4:	ffffffff 	.word	0xffffffff
    4df8:	ffffffff 	.word	0xffffffff
    4dfc:	ffffffff 	.word	0xffffffff
    4e00:	ffffffff 	.word	0xffffffff
    4e04:	ffffffff 	.word	0xffffffff
    4e08:	ffffffff 	.word	0xffffffff
    4e0c:	ffffffff 	.word	0xffffffff
    4e10:	ffffffff 	.word	0xffffffff
    4e14:	ffffffff 	.word	0xffffffff
    4e18:	ffffffff 	.word	0xffffffff
    4e1c:	ffffffff 	.word	0xffffffff
    4e20:	ffffffff 	.word	0xffffffff
    4e24:	ffffffff 	.word	0xffffffff
    4e28:	ffffffff 	.word	0xffffffff
    4e2c:	ffffffff 	.word	0xffffffff
    4e30:	ffffffff 	.word	0xffffffff
    4e34:	ffffffff 	.word	0xffffffff
    4e38:	ffffffff 	.word	0xffffffff
    4e3c:	ffffffff 	.word	0xffffffff
    4e40:	ffffffff 	.word	0xffffffff
    4e44:	ffffffff 	.word	0xffffffff
    4e48:	ffffffff 	.word	0xffffffff
    4e4c:	ffffffff 	.word	0xffffffff
    4e50:	ffffffff 	.word	0xffffffff
    4e54:	ffffffff 	.word	0xffffffff
    4e58:	ffffffff 	.word	0xffffffff
    4e5c:	ffffffff 	.word	0xffffffff
    4e60:	ffffffff 	.word	0xffffffff
    4e64:	ffffffff 	.word	0xffffffff
    4e68:	ffffffff 	.word	0xffffffff
    4e6c:	ffffffff 	.word	0xffffffff
    4e70:	ffffffff 	.word	0xffffffff
    4e74:	ffffffff 	.word	0xffffffff
    4e78:	ffffffff 	.word	0xffffffff
    4e7c:	ffffffff 	.word	0xffffffff
    4e80:	ffffffff 	.word	0xffffffff
    4e84:	ffffffff 	.word	0xffffffff
    4e88:	ffffffff 	.word	0xffffffff
    4e8c:	ffffffff 	.word	0xffffffff
    4e90:	ffffffff 	.word	0xffffffff
    4e94:	ffffffff 	.word	0xffffffff
    4e98:	ffffffff 	.word	0xffffffff
    4e9c:	ffffffff 	.word	0xffffffff
    4ea0:	ffffffff 	.word	0xffffffff
    4ea4:	ffffffff 	.word	0xffffffff
    4ea8:	ffffffff 	.word	0xffffffff
    4eac:	ffffffff 	.word	0xffffffff
    4eb0:	ffffffff 	.word	0xffffffff
    4eb4:	ffffffff 	.word	0xffffffff
    4eb8:	ffffffff 	.word	0xffffffff
    4ebc:	ffffffff 	.word	0xffffffff
    4ec0:	ffffffff 	.word	0xffffffff
    4ec4:	ffffffff 	.word	0xffffffff
    4ec8:	ffffffff 	.word	0xffffffff
    4ecc:	ffffffff 	.word	0xffffffff
    4ed0:	ffffffff 	.word	0xffffffff
    4ed4:	ffffffff 	.word	0xffffffff
    4ed8:	ffffffff 	.word	0xffffffff
    4edc:	ffffffff 	.word	0xffffffff
    4ee0:	ffffffff 	.word	0xffffffff
    4ee4:	ffffffff 	.word	0xffffffff
    4ee8:	ffffffff 	.word	0xffffffff
    4eec:	ffffffff 	.word	0xffffffff
    4ef0:	ffffffff 	.word	0xffffffff
    4ef4:	ffffffff 	.word	0xffffffff
    4ef8:	ffffffff 	.word	0xffffffff
    4efc:	ffffffff 	.word	0xffffffff
    4f00:	ffffffff 	.word	0xffffffff
    4f04:	ffffffff 	.word	0xffffffff
    4f08:	ffffffff 	.word	0xffffffff
    4f0c:	ffffffff 	.word	0xffffffff
    4f10:	ffffffff 	.word	0xffffffff
    4f14:	ffffffff 	.word	0xffffffff
    4f18:	ffffffff 	.word	0xffffffff
    4f1c:	ffffffff 	.word	0xffffffff
    4f20:	ffffffff 	.word	0xffffffff
    4f24:	ffffffff 	.word	0xffffffff
    4f28:	ffffffff 	.word	0xffffffff
    4f2c:	ffffffff 	.word	0xffffffff
    4f30:	ffffffff 	.word	0xffffffff
    4f34:	ffffffff 	.word	0xffffffff
    4f38:	ffffffff 	.word	0xffffffff
    4f3c:	ffffffff 	.word	0xffffffff
    4f40:	ffffffff 	.word	0xffffffff
    4f44:	ffffffff 	.word	0xffffffff
    4f48:	ffffffff 	.word	0xffffffff
    4f4c:	ffffffff 	.word	0xffffffff
    4f50:	ffffffff 	.word	0xffffffff
    4f54:	ffffffff 	.word	0xffffffff
    4f58:	ffffffff 	.word	0xffffffff
    4f5c:	ffffffff 	.word	0xffffffff
    4f60:	ffffffff 	.word	0xffffffff
    4f64:	ffffffff 	.word	0xffffffff
    4f68:	ffffffff 	.word	0xffffffff
    4f6c:	ffffffff 	.word	0xffffffff
    4f70:	ffffffff 	.word	0xffffffff
    4f74:	ffffffff 	.word	0xffffffff
    4f78:	ffffffff 	.word	0xffffffff
    4f7c:	ffffffff 	.word	0xffffffff
    4f80:	ffffffff 	.word	0xffffffff
    4f84:	ffffffff 	.word	0xffffffff
    4f88:	ffffffff 	.word	0xffffffff
    4f8c:	ffffffff 	.word	0xffffffff
    4f90:	ffffffff 	.word	0xffffffff
    4f94:	ffffffff 	.word	0xffffffff
    4f98:	ffffffff 	.word	0xffffffff
    4f9c:	ffffffff 	.word	0xffffffff
    4fa0:	ffffffff 	.word	0xffffffff
    4fa4:	ffffffff 	.word	0xffffffff
    4fa8:	ffffffff 	.word	0xffffffff
    4fac:	ffffffff 	.word	0xffffffff
    4fb0:	ffffffff 	.word	0xffffffff
    4fb4:	ffffffff 	.word	0xffffffff
    4fb8:	ffffffff 	.word	0xffffffff
    4fbc:	ffffffff 	.word	0xffffffff
    4fc0:	ffffffff 	.word	0xffffffff
    4fc4:	ffffffff 	.word	0xffffffff
    4fc8:	ffffffff 	.word	0xffffffff
    4fcc:	ffffffff 	.word	0xffffffff
    4fd0:	ffffffff 	.word	0xffffffff
    4fd4:	ffffffff 	.word	0xffffffff
    4fd8:	ffffffff 	.word	0xffffffff
    4fdc:	ffffffff 	.word	0xffffffff
    4fe0:	ffffffff 	.word	0xffffffff
    4fe4:	ffffffff 	.word	0xffffffff
    4fe8:	ffffffff 	.word	0xffffffff
    4fec:	ffffffff 	.word	0xffffffff
    4ff0:	ffffffff 	.word	0xffffffff
    4ff4:	ffffffff 	.word	0xffffffff
    4ff8:	ffffffff 	.word	0xffffffff
    4ffc:	ffffffff 	.word	0xffffffff
    5000:	ffffffff 	.word	0xffffffff
    5004:	ffffffff 	.word	0xffffffff
    5008:	ffffffff 	.word	0xffffffff
    500c:	ffffffff 	.word	0xffffffff
    5010:	ffffffff 	.word	0xffffffff
    5014:	ffffffff 	.word	0xffffffff
    5018:	ffffffff 	.word	0xffffffff
    501c:	ffffffff 	.word	0xffffffff
    5020:	ffffffff 	.word	0xffffffff
    5024:	ffffffff 	.word	0xffffffff
    5028:	ffffffff 	.word	0xffffffff
    502c:	ffffffff 	.word	0xffffffff
    5030:	ffffffff 	.word	0xffffffff
    5034:	ffffffff 	.word	0xffffffff
    5038:	ffffffff 	.word	0xffffffff
    503c:	ffffffff 	.word	0xffffffff
    5040:	ffffffff 	.word	0xffffffff
    5044:	ffffffff 	.word	0xffffffff
    5048:	ffffffff 	.word	0xffffffff
    504c:	ffffffff 	.word	0xffffffff
    5050:	ffffffff 	.word	0xffffffff
    5054:	ffffffff 	.word	0xffffffff
    5058:	ffffffff 	.word	0xffffffff
    505c:	ffffffff 	.word	0xffffffff
    5060:	ffffffff 	.word	0xffffffff
    5064:	ffffffff 	.word	0xffffffff
    5068:	ffffffff 	.word	0xffffffff
    506c:	ffffffff 	.word	0xffffffff
    5070:	ffffffff 	.word	0xffffffff
    5074:	ffffffff 	.word	0xffffffff
    5078:	ffffffff 	.word	0xffffffff
    507c:	ffffffff 	.word	0xffffffff
    5080:	ffffffff 	.word	0xffffffff
    5084:	ffffffff 	.word	0xffffffff
    5088:	ffffffff 	.word	0xffffffff
    508c:	ffffffff 	.word	0xffffffff
    5090:	ffffffff 	.word	0xffffffff
    5094:	ffffffff 	.word	0xffffffff
    5098:	ffffffff 	.word	0xffffffff
    509c:	ffffffff 	.word	0xffffffff
    50a0:	ffffffff 	.word	0xffffffff
    50a4:	ffffffff 	.word	0xffffffff
    50a8:	ffffffff 	.word	0xffffffff
    50ac:	ffffffff 	.word	0xffffffff
    50b0:	ffffffff 	.word	0xffffffff
    50b4:	ffffffff 	.word	0xffffffff
    50b8:	ffffffff 	.word	0xffffffff
    50bc:	ffffffff 	.word	0xffffffff
    50c0:	ffffffff 	.word	0xffffffff
    50c4:	ffffffff 	.word	0xffffffff
    50c8:	ffffffff 	.word	0xffffffff
    50cc:	ffffffff 	.word	0xffffffff
    50d0:	ffffffff 	.word	0xffffffff
    50d4:	ffffffff 	.word	0xffffffff
    50d8:	ffffffff 	.word	0xffffffff
    50dc:	ffffffff 	.word	0xffffffff
    50e0:	ffffffff 	.word	0xffffffff
    50e4:	ffffffff 	.word	0xffffffff
    50e8:	ffffffff 	.word	0xffffffff
    50ec:	ffffffff 	.word	0xffffffff
    50f0:	ffffffff 	.word	0xffffffff
    50f4:	ffffffff 	.word	0xffffffff
    50f8:	ffffffff 	.word	0xffffffff
    50fc:	ffffffff 	.word	0xffffffff
    5100:	ffffffff 	.word	0xffffffff
    5104:	ffffffff 	.word	0xffffffff
    5108:	ffffffff 	.word	0xffffffff
    510c:	ffffffff 	.word	0xffffffff
    5110:	ffffffff 	.word	0xffffffff
    5114:	ffffffff 	.word	0xffffffff
    5118:	ffffffff 	.word	0xffffffff
    511c:	ffffffff 	.word	0xffffffff
    5120:	ffffffff 	.word	0xffffffff
    5124:	ffffffff 	.word	0xffffffff
    5128:	ffffffff 	.word	0xffffffff
    512c:	ffffffff 	.word	0xffffffff
    5130:	ffffffff 	.word	0xffffffff
    5134:	ffffffff 	.word	0xffffffff
    5138:	ffffffff 	.word	0xffffffff
    513c:	ffffffff 	.word	0xffffffff
    5140:	ffffffff 	.word	0xffffffff
    5144:	ffffffff 	.word	0xffffffff
    5148:	ffffffff 	.word	0xffffffff
    514c:	ffffffff 	.word	0xffffffff
    5150:	ffffffff 	.word	0xffffffff
    5154:	ffffffff 	.word	0xffffffff
    5158:	ffffffff 	.word	0xffffffff
    515c:	ffffffff 	.word	0xffffffff
    5160:	ffffffff 	.word	0xffffffff
    5164:	ffffffff 	.word	0xffffffff
    5168:	ffffffff 	.word	0xffffffff
    516c:	ffffffff 	.word	0xffffffff
    5170:	ffffffff 	.word	0xffffffff
    5174:	ffffffff 	.word	0xffffffff
    5178:	ffffffff 	.word	0xffffffff
    517c:	ffffffff 	.word	0xffffffff
    5180:	ffffffff 	.word	0xffffffff
    5184:	ffffffff 	.word	0xffffffff
    5188:	ffffffff 	.word	0xffffffff
    518c:	ffffffff 	.word	0xffffffff
    5190:	ffffffff 	.word	0xffffffff
    5194:	ffffffff 	.word	0xffffffff
    5198:	ffffffff 	.word	0xffffffff
    519c:	ffffffff 	.word	0xffffffff
    51a0:	ffffffff 	.word	0xffffffff
    51a4:	ffffffff 	.word	0xffffffff
    51a8:	ffffffff 	.word	0xffffffff
    51ac:	ffffffff 	.word	0xffffffff
    51b0:	ffffffff 	.word	0xffffffff
    51b4:	ffffffff 	.word	0xffffffff
    51b8:	ffffffff 	.word	0xffffffff
    51bc:	ffffffff 	.word	0xffffffff
    51c0:	ffffffff 	.word	0xffffffff
    51c4:	ffffffff 	.word	0xffffffff
    51c8:	ffffffff 	.word	0xffffffff
    51cc:	ffffffff 	.word	0xffffffff
    51d0:	ffffffff 	.word	0xffffffff
    51d4:	ffffffff 	.word	0xffffffff
    51d8:	ffffffff 	.word	0xffffffff
    51dc:	ffffffff 	.word	0xffffffff
    51e0:	ffffffff 	.word	0xffffffff
    51e4:	ffffffff 	.word	0xffffffff
    51e8:	ffffffff 	.word	0xffffffff
    51ec:	ffffffff 	.word	0xffffffff
    51f0:	ffffffff 	.word	0xffffffff
    51f4:	ffffffff 	.word	0xffffffff
    51f8:	ffffffff 	.word	0xffffffff
    51fc:	ffffffff 	.word	0xffffffff
    5200:	ffffffff 	.word	0xffffffff
    5204:	ffffffff 	.word	0xffffffff
    5208:	ffffffff 	.word	0xffffffff
    520c:	ffffffff 	.word	0xffffffff
    5210:	ffffffff 	.word	0xffffffff
    5214:	ffffffff 	.word	0xffffffff
    5218:	ffffffff 	.word	0xffffffff
    521c:	ffffffff 	.word	0xffffffff
    5220:	ffffffff 	.word	0xffffffff
    5224:	ffffffff 	.word	0xffffffff
    5228:	ffffffff 	.word	0xffffffff
    522c:	ffffffff 	.word	0xffffffff
    5230:	ffffffff 	.word	0xffffffff
    5234:	ffffffff 	.word	0xffffffff
    5238:	ffffffff 	.word	0xffffffff
    523c:	ffffffff 	.word	0xffffffff
    5240:	ffffffff 	.word	0xffffffff
    5244:	ffffffff 	.word	0xffffffff
    5248:	ffffffff 	.word	0xffffffff
    524c:	ffffffff 	.word	0xffffffff
    5250:	ffffffff 	.word	0xffffffff
    5254:	ffffffff 	.word	0xffffffff
    5258:	ffffffff 	.word	0xffffffff
    525c:	ffffffff 	.word	0xffffffff
    5260:	ffffffff 	.word	0xffffffff
    5264:	ffffffff 	.word	0xffffffff
    5268:	ffffffff 	.word	0xffffffff
    526c:	ffffffff 	.word	0xffffffff
    5270:	ffffffff 	.word	0xffffffff
    5274:	ffffffff 	.word	0xffffffff
    5278:	ffffffff 	.word	0xffffffff
    527c:	ffffffff 	.word	0xffffffff
    5280:	ffffffff 	.word	0xffffffff
    5284:	ffffffff 	.word	0xffffffff
    5288:	ffffffff 	.word	0xffffffff
    528c:	ffffffff 	.word	0xffffffff
    5290:	ffffffff 	.word	0xffffffff
    5294:	ffffffff 	.word	0xffffffff
    5298:	ffffffff 	.word	0xffffffff
    529c:	ffffffff 	.word	0xffffffff
    52a0:	ffffffff 	.word	0xffffffff
    52a4:	ffffffff 	.word	0xffffffff
    52a8:	ffffffff 	.word	0xffffffff
    52ac:	ffffffff 	.word	0xffffffff
    52b0:	ffffffff 	.word	0xffffffff
    52b4:	ffffffff 	.word	0xffffffff
    52b8:	ffffffff 	.word	0xffffffff
    52bc:	ffffffff 	.word	0xffffffff
    52c0:	ffffffff 	.word	0xffffffff
    52c4:	ffffffff 	.word	0xffffffff
    52c8:	ffffffff 	.word	0xffffffff
    52cc:	ffffffff 	.word	0xffffffff
    52d0:	ffffffff 	.word	0xffffffff
    52d4:	ffffffff 	.word	0xffffffff
    52d8:	ffffffff 	.word	0xffffffff
    52dc:	ffffffff 	.word	0xffffffff
    52e0:	ffffffff 	.word	0xffffffff
    52e4:	ffffffff 	.word	0xffffffff
    52e8:	ffffffff 	.word	0xffffffff
    52ec:	ffffffff 	.word	0xffffffff
    52f0:	ffffffff 	.word	0xffffffff
    52f4:	ffffffff 	.word	0xffffffff
    52f8:	ffffffff 	.word	0xffffffff
    52fc:	ffffffff 	.word	0xffffffff
    5300:	ffffffff 	.word	0xffffffff
    5304:	ffffffff 	.word	0xffffffff
    5308:	ffffffff 	.word	0xffffffff
    530c:	ffffffff 	.word	0xffffffff
    5310:	ffffffff 	.word	0xffffffff
    5314:	ffffffff 	.word	0xffffffff
    5318:	ffffffff 	.word	0xffffffff
    531c:	ffffffff 	.word	0xffffffff
    5320:	ffffffff 	.word	0xffffffff
    5324:	ffffffff 	.word	0xffffffff
    5328:	ffffffff 	.word	0xffffffff
    532c:	ffffffff 	.word	0xffffffff
    5330:	ffffffff 	.word	0xffffffff
    5334:	ffffffff 	.word	0xffffffff
    5338:	ffffffff 	.word	0xffffffff
    533c:	ffffffff 	.word	0xffffffff
    5340:	ffffffff 	.word	0xffffffff
    5344:	ffffffff 	.word	0xffffffff
    5348:	ffffffff 	.word	0xffffffff
    534c:	ffffffff 	.word	0xffffffff
    5350:	ffffffff 	.word	0xffffffff
    5354:	ffffffff 	.word	0xffffffff
    5358:	ffffffff 	.word	0xffffffff
    535c:	ffffffff 	.word	0xffffffff
    5360:	ffffffff 	.word	0xffffffff
    5364:	ffffffff 	.word	0xffffffff
    5368:	ffffffff 	.word	0xffffffff
    536c:	ffffffff 	.word	0xffffffff
    5370:	ffffffff 	.word	0xffffffff
    5374:	ffffffff 	.word	0xffffffff
    5378:	ffffffff 	.word	0xffffffff
    537c:	ffffffff 	.word	0xffffffff
    5380:	ffffffff 	.word	0xffffffff
    5384:	ffffffff 	.word	0xffffffff
    5388:	ffffffff 	.word	0xffffffff
    538c:	ffffffff 	.word	0xffffffff
    5390:	ffffffff 	.word	0xffffffff
    5394:	ffffffff 	.word	0xffffffff
    5398:	ffffffff 	.word	0xffffffff
    539c:	ffffffff 	.word	0xffffffff
    53a0:	ffffffff 	.word	0xffffffff
    53a4:	ffffffff 	.word	0xffffffff
    53a8:	ffffffff 	.word	0xffffffff
    53ac:	ffffffff 	.word	0xffffffff
    53b0:	ffffffff 	.word	0xffffffff
    53b4:	ffffffff 	.word	0xffffffff
    53b8:	ffffffff 	.word	0xffffffff
    53bc:	ffffffff 	.word	0xffffffff
    53c0:	ffffffff 	.word	0xffffffff
    53c4:	ffffffff 	.word	0xffffffff
    53c8:	ffffffff 	.word	0xffffffff
    53cc:	ffffffff 	.word	0xffffffff
    53d0:	ffffffff 	.word	0xffffffff
    53d4:	ffffffff 	.word	0xffffffff
    53d8:	ffffffff 	.word	0xffffffff
    53dc:	ffffffff 	.word	0xffffffff
    53e0:	ffffffff 	.word	0xffffffff
    53e4:	ffffffff 	.word	0xffffffff
    53e8:	ffffffff 	.word	0xffffffff
    53ec:	ffffffff 	.word	0xffffffff
    53f0:	ffffffff 	.word	0xffffffff
    53f4:	ffffffff 	.word	0xffffffff
    53f8:	ffffffff 	.word	0xffffffff
    53fc:	ffffffff 	.word	0xffffffff
    5400:	ffffffff 	.word	0xffffffff
    5404:	ffffffff 	.word	0xffffffff
    5408:	ffffffff 	.word	0xffffffff
    540c:	ffffffff 	.word	0xffffffff
    5410:	ffffffff 	.word	0xffffffff
    5414:	ffffffff 	.word	0xffffffff
    5418:	ffffffff 	.word	0xffffffff
    541c:	ffffffff 	.word	0xffffffff
    5420:	ffffffff 	.word	0xffffffff
    5424:	ffffffff 	.word	0xffffffff
    5428:	ffffffff 	.word	0xffffffff
    542c:	ffffffff 	.word	0xffffffff
    5430:	ffffffff 	.word	0xffffffff
    5434:	ffffffff 	.word	0xffffffff
    5438:	ffffffff 	.word	0xffffffff
    543c:	ffffffff 	.word	0xffffffff
    5440:	ffffffff 	.word	0xffffffff
    5444:	ffffffff 	.word	0xffffffff
    5448:	ffffffff 	.word	0xffffffff
    544c:	ffffffff 	.word	0xffffffff
    5450:	ffffffff 	.word	0xffffffff
    5454:	ffffffff 	.word	0xffffffff
    5458:	ffffffff 	.word	0xffffffff
    545c:	ffffffff 	.word	0xffffffff
    5460:	ffffffff 	.word	0xffffffff
    5464:	ffffffff 	.word	0xffffffff
    5468:	ffffffff 	.word	0xffffffff
    546c:	ffffffff 	.word	0xffffffff
    5470:	ffffffff 	.word	0xffffffff
    5474:	ffffffff 	.word	0xffffffff
    5478:	ffffffff 	.word	0xffffffff
    547c:	ffffffff 	.word	0xffffffff
    5480:	ffffffff 	.word	0xffffffff
    5484:	ffffffff 	.word	0xffffffff
    5488:	ffffffff 	.word	0xffffffff
    548c:	ffffffff 	.word	0xffffffff
    5490:	ffffffff 	.word	0xffffffff
    5494:	ffffffff 	.word	0xffffffff
    5498:	ffffffff 	.word	0xffffffff
    549c:	ffffffff 	.word	0xffffffff
    54a0:	ffffffff 	.word	0xffffffff
    54a4:	ffffffff 	.word	0xffffffff
    54a8:	ffffffff 	.word	0xffffffff
    54ac:	ffffffff 	.word	0xffffffff
    54b0:	ffffffff 	.word	0xffffffff
    54b4:	ffffffff 	.word	0xffffffff
    54b8:	ffffffff 	.word	0xffffffff
    54bc:	ffffffff 	.word	0xffffffff
    54c0:	ffffffff 	.word	0xffffffff
    54c4:	ffffffff 	.word	0xffffffff
    54c8:	ffffffff 	.word	0xffffffff
    54cc:	ffffffff 	.word	0xffffffff
    54d0:	ffffffff 	.word	0xffffffff
    54d4:	ffffffff 	.word	0xffffffff
    54d8:	ffffffff 	.word	0xffffffff
    54dc:	ffffffff 	.word	0xffffffff
    54e0:	ffffffff 	.word	0xffffffff
    54e4:	ffffffff 	.word	0xffffffff
    54e8:	ffffffff 	.word	0xffffffff
    54ec:	ffffffff 	.word	0xffffffff
    54f0:	ffffffff 	.word	0xffffffff
    54f4:	ffffffff 	.word	0xffffffff
    54f8:	ffffffff 	.word	0xffffffff
    54fc:	ffffffff 	.word	0xffffffff
    5500:	ffffffff 	.word	0xffffffff
    5504:	ffffffff 	.word	0xffffffff
    5508:	ffffffff 	.word	0xffffffff
    550c:	ffffffff 	.word	0xffffffff
    5510:	ffffffff 	.word	0xffffffff
    5514:	ffffffff 	.word	0xffffffff
    5518:	ffffffff 	.word	0xffffffff
    551c:	ffffffff 	.word	0xffffffff
    5520:	ffffffff 	.word	0xffffffff
    5524:	ffffffff 	.word	0xffffffff
    5528:	ffffffff 	.word	0xffffffff
    552c:	ffffffff 	.word	0xffffffff
    5530:	ffffffff 	.word	0xffffffff
    5534:	ffffffff 	.word	0xffffffff
    5538:	ffffffff 	.word	0xffffffff
    553c:	ffffffff 	.word	0xffffffff
    5540:	ffffffff 	.word	0xffffffff
    5544:	ffffffff 	.word	0xffffffff
    5548:	ffffffff 	.word	0xffffffff
    554c:	ffffffff 	.word	0xffffffff
    5550:	ffffffff 	.word	0xffffffff
    5554:	ffffffff 	.word	0xffffffff
    5558:	ffffffff 	.word	0xffffffff
    555c:	ffffffff 	.word	0xffffffff
    5560:	ffffffff 	.word	0xffffffff
    5564:	ffffffff 	.word	0xffffffff
    5568:	ffffffff 	.word	0xffffffff
    556c:	ffffffff 	.word	0xffffffff
    5570:	ffffffff 	.word	0xffffffff
    5574:	ffffffff 	.word	0xffffffff
    5578:	ffffffff 	.word	0xffffffff
    557c:	ffffffff 	.word	0xffffffff
    5580:	ffffffff 	.word	0xffffffff
    5584:	ffffffff 	.word	0xffffffff
    5588:	ffffffff 	.word	0xffffffff
    558c:	ffffffff 	.word	0xffffffff
    5590:	ffffffff 	.word	0xffffffff
    5594:	ffffffff 	.word	0xffffffff
    5598:	ffffffff 	.word	0xffffffff
    559c:	ffffffff 	.word	0xffffffff
    55a0:	ffffffff 	.word	0xffffffff
    55a4:	ffffffff 	.word	0xffffffff
    55a8:	ffffffff 	.word	0xffffffff
    55ac:	ffffffff 	.word	0xffffffff
    55b0:	ffffffff 	.word	0xffffffff
    55b4:	ffffffff 	.word	0xffffffff
    55b8:	ffffffff 	.word	0xffffffff
    55bc:	ffffffff 	.word	0xffffffff
    55c0:	ffffffff 	.word	0xffffffff
    55c4:	ffffffff 	.word	0xffffffff
    55c8:	ffffffff 	.word	0xffffffff
    55cc:	ffffffff 	.word	0xffffffff
    55d0:	ffffffff 	.word	0xffffffff
    55d4:	ffffffff 	.word	0xffffffff
    55d8:	ffffffff 	.word	0xffffffff
    55dc:	ffffffff 	.word	0xffffffff
    55e0:	ffffffff 	.word	0xffffffff
    55e4:	ffffffff 	.word	0xffffffff
    55e8:	ffffffff 	.word	0xffffffff
    55ec:	ffffffff 	.word	0xffffffff
    55f0:	ffffffff 	.word	0xffffffff
    55f4:	ffffffff 	.word	0xffffffff
    55f8:	ffffffff 	.word	0xffffffff
    55fc:	ffffffff 	.word	0xffffffff
    5600:	ffffffff 	.word	0xffffffff
    5604:	ffffffff 	.word	0xffffffff
    5608:	ffffffff 	.word	0xffffffff
    560c:	ffffffff 	.word	0xffffffff
    5610:	ffffffff 	.word	0xffffffff
    5614:	ffffffff 	.word	0xffffffff
    5618:	ffffffff 	.word	0xffffffff
    561c:	ffffffff 	.word	0xffffffff
    5620:	ffffffff 	.word	0xffffffff
    5624:	ffffffff 	.word	0xffffffff
    5628:	ffffffff 	.word	0xffffffff
    562c:	ffffffff 	.word	0xffffffff
    5630:	ffffffff 	.word	0xffffffff
    5634:	ffffffff 	.word	0xffffffff
    5638:	ffffffff 	.word	0xffffffff
    563c:	ffffffff 	.word	0xffffffff
    5640:	ffffffff 	.word	0xffffffff
    5644:	ffffffff 	.word	0xffffffff
    5648:	ffffffff 	.word	0xffffffff
    564c:	ffffffff 	.word	0xffffffff
    5650:	ffffffff 	.word	0xffffffff
    5654:	ffffffff 	.word	0xffffffff
    5658:	ffffffff 	.word	0xffffffff
    565c:	ffffffff 	.word	0xffffffff
    5660:	ffffffff 	.word	0xffffffff
    5664:	ffffffff 	.word	0xffffffff
    5668:	ffffffff 	.word	0xffffffff
    566c:	ffffffff 	.word	0xffffffff
    5670:	ffffffff 	.word	0xffffffff
    5674:	ffffffff 	.word	0xffffffff
    5678:	ffffffff 	.word	0xffffffff
    567c:	ffffffff 	.word	0xffffffff
    5680:	ffffffff 	.word	0xffffffff
    5684:	ffffffff 	.word	0xffffffff
    5688:	ffffffff 	.word	0xffffffff
    568c:	ffffffff 	.word	0xffffffff
    5690:	ffffffff 	.word	0xffffffff
    5694:	ffffffff 	.word	0xffffffff
    5698:	ffffffff 	.word	0xffffffff
    569c:	ffffffff 	.word	0xffffffff
    56a0:	ffffffff 	.word	0xffffffff
    56a4:	ffffffff 	.word	0xffffffff
    56a8:	ffffffff 	.word	0xffffffff
    56ac:	ffffffff 	.word	0xffffffff
    56b0:	ffffffff 	.word	0xffffffff
    56b4:	ffffffff 	.word	0xffffffff
    56b8:	ffffffff 	.word	0xffffffff
    56bc:	ffffffff 	.word	0xffffffff
    56c0:	ffffffff 	.word	0xffffffff
    56c4:	ffffffff 	.word	0xffffffff
    56c8:	ffffffff 	.word	0xffffffff
    56cc:	ffffffff 	.word	0xffffffff
    56d0:	ffffffff 	.word	0xffffffff
    56d4:	ffffffff 	.word	0xffffffff
    56d8:	ffffffff 	.word	0xffffffff
    56dc:	ffffffff 	.word	0xffffffff
    56e0:	ffffffff 	.word	0xffffffff
    56e4:	ffffffff 	.word	0xffffffff
    56e8:	ffffffff 	.word	0xffffffff
    56ec:	ffffffff 	.word	0xffffffff
    56f0:	ffffffff 	.word	0xffffffff
    56f4:	ffffffff 	.word	0xffffffff
    56f8:	ffffffff 	.word	0xffffffff
    56fc:	ffffffff 	.word	0xffffffff
    5700:	ffffffff 	.word	0xffffffff
    5704:	ffffffff 	.word	0xffffffff
    5708:	ffffffff 	.word	0xffffffff
    570c:	ffffffff 	.word	0xffffffff
    5710:	ffffffff 	.word	0xffffffff
    5714:	ffffffff 	.word	0xffffffff
    5718:	ffffffff 	.word	0xffffffff
    571c:	ffffffff 	.word	0xffffffff
    5720:	ffffffff 	.word	0xffffffff
    5724:	ffffffff 	.word	0xffffffff
    5728:	ffffffff 	.word	0xffffffff
    572c:	ffffffff 	.word	0xffffffff
    5730:	ffffffff 	.word	0xffffffff
    5734:	ffffffff 	.word	0xffffffff
    5738:	ffffffff 	.word	0xffffffff
    573c:	ffffffff 	.word	0xffffffff
    5740:	ffffffff 	.word	0xffffffff
    5744:	ffffffff 	.word	0xffffffff
    5748:	ffffffff 	.word	0xffffffff
    574c:	ffffffff 	.word	0xffffffff
    5750:	ffffffff 	.word	0xffffffff
    5754:	ffffffff 	.word	0xffffffff
    5758:	ffffffff 	.word	0xffffffff
    575c:	ffffffff 	.word	0xffffffff
    5760:	ffffffff 	.word	0xffffffff
    5764:	ffffffff 	.word	0xffffffff
    5768:	ffffffff 	.word	0xffffffff
    576c:	ffffffff 	.word	0xffffffff
    5770:	ffffffff 	.word	0xffffffff
    5774:	ffffffff 	.word	0xffffffff
    5778:	ffffffff 	.word	0xffffffff
    577c:	ffffffff 	.word	0xffffffff
    5780:	ffffffff 	.word	0xffffffff
    5784:	ffffffff 	.word	0xffffffff
    5788:	ffffffff 	.word	0xffffffff
    578c:	ffffffff 	.word	0xffffffff
    5790:	ffffffff 	.word	0xffffffff
    5794:	ffffffff 	.word	0xffffffff
    5798:	ffffffff 	.word	0xffffffff
    579c:	ffffffff 	.word	0xffffffff
    57a0:	ffffffff 	.word	0xffffffff
    57a4:	ffffffff 	.word	0xffffffff
    57a8:	ffffffff 	.word	0xffffffff
    57ac:	ffffffff 	.word	0xffffffff
    57b0:	ffffffff 	.word	0xffffffff
    57b4:	ffffffff 	.word	0xffffffff
    57b8:	ffffffff 	.word	0xffffffff
    57bc:	ffffffff 	.word	0xffffffff
    57c0:	ffffffff 	.word	0xffffffff
    57c4:	ffffffff 	.word	0xffffffff
    57c8:	ffffffff 	.word	0xffffffff
    57cc:	ffffffff 	.word	0xffffffff
    57d0:	ffffffff 	.word	0xffffffff
    57d4:	ffffffff 	.word	0xffffffff
    57d8:	ffffffff 	.word	0xffffffff
    57dc:	ffffffff 	.word	0xffffffff
    57e0:	ffffffff 	.word	0xffffffff
    57e4:	ffffffff 	.word	0xffffffff
    57e8:	ffffffff 	.word	0xffffffff
    57ec:	ffffffff 	.word	0xffffffff
    57f0:	ffffffff 	.word	0xffffffff
    57f4:	ffffffff 	.word	0xffffffff
    57f8:	ffffffff 	.word	0xffffffff
    57fc:	ffffffff 	.word	0xffffffff
    5800:	ffffffff 	.word	0xffffffff
    5804:	ffffffff 	.word	0xffffffff
    5808:	ffffffff 	.word	0xffffffff
    580c:	ffffffff 	.word	0xffffffff
    5810:	ffffffff 	.word	0xffffffff
    5814:	ffffffff 	.word	0xffffffff
    5818:	ffffffff 	.word	0xffffffff
    581c:	ffffffff 	.word	0xffffffff
    5820:	ffffffff 	.word	0xffffffff
    5824:	ffffffff 	.word	0xffffffff
    5828:	ffffffff 	.word	0xffffffff
    582c:	ffffffff 	.word	0xffffffff
    5830:	ffffffff 	.word	0xffffffff
    5834:	ffffffff 	.word	0xffffffff
    5838:	ffffffff 	.word	0xffffffff
    583c:	ffffffff 	.word	0xffffffff
    5840:	ffffffff 	.word	0xffffffff
    5844:	ffffffff 	.word	0xffffffff
    5848:	ffffffff 	.word	0xffffffff
    584c:	ffffffff 	.word	0xffffffff
    5850:	ffffffff 	.word	0xffffffff
    5854:	ffffffff 	.word	0xffffffff
    5858:	ffffffff 	.word	0xffffffff
    585c:	ffffffff 	.word	0xffffffff
    5860:	ffffffff 	.word	0xffffffff
    5864:	ffffffff 	.word	0xffffffff
    5868:	ffffffff 	.word	0xffffffff
    586c:	ffffffff 	.word	0xffffffff
    5870:	ffffffff 	.word	0xffffffff
    5874:	ffffffff 	.word	0xffffffff
    5878:	ffffffff 	.word	0xffffffff
    587c:	ffffffff 	.word	0xffffffff
    5880:	ffffffff 	.word	0xffffffff
    5884:	ffffffff 	.word	0xffffffff
    5888:	ffffffff 	.word	0xffffffff
    588c:	ffffffff 	.word	0xffffffff
    5890:	ffffffff 	.word	0xffffffff
    5894:	ffffffff 	.word	0xffffffff
    5898:	ffffffff 	.word	0xffffffff
    589c:	ffffffff 	.word	0xffffffff
    58a0:	ffffffff 	.word	0xffffffff
    58a4:	ffffffff 	.word	0xffffffff
    58a8:	ffffffff 	.word	0xffffffff
    58ac:	ffffffff 	.word	0xffffffff
    58b0:	ffffffff 	.word	0xffffffff
    58b4:	ffffffff 	.word	0xffffffff
    58b8:	ffffffff 	.word	0xffffffff
    58bc:	ffffffff 	.word	0xffffffff
    58c0:	ffffffff 	.word	0xffffffff
    58c4:	ffffffff 	.word	0xffffffff
    58c8:	ffffffff 	.word	0xffffffff
    58cc:	ffffffff 	.word	0xffffffff
    58d0:	ffffffff 	.word	0xffffffff
    58d4:	ffffffff 	.word	0xffffffff
    58d8:	ffffffff 	.word	0xffffffff
    58dc:	ffffffff 	.word	0xffffffff
    58e0:	ffffffff 	.word	0xffffffff
    58e4:	ffffffff 	.word	0xffffffff
    58e8:	ffffffff 	.word	0xffffffff
    58ec:	ffffffff 	.word	0xffffffff
    58f0:	ffffffff 	.word	0xffffffff
    58f4:	ffffffff 	.word	0xffffffff
    58f8:	ffffffff 	.word	0xffffffff
    58fc:	ffffffff 	.word	0xffffffff
    5900:	ffffffff 	.word	0xffffffff
    5904:	ffffffff 	.word	0xffffffff
    5908:	ffffffff 	.word	0xffffffff
    590c:	ffffffff 	.word	0xffffffff
    5910:	ffffffff 	.word	0xffffffff
    5914:	ffffffff 	.word	0xffffffff
    5918:	ffffffff 	.word	0xffffffff
    591c:	ffffffff 	.word	0xffffffff
    5920:	ffffffff 	.word	0xffffffff
    5924:	ffffffff 	.word	0xffffffff
    5928:	ffffffff 	.word	0xffffffff
    592c:	ffffffff 	.word	0xffffffff
    5930:	ffffffff 	.word	0xffffffff
    5934:	ffffffff 	.word	0xffffffff
    5938:	ffffffff 	.word	0xffffffff
    593c:	ffffffff 	.word	0xffffffff
    5940:	ffffffff 	.word	0xffffffff
    5944:	ffffffff 	.word	0xffffffff
    5948:	ffffffff 	.word	0xffffffff
    594c:	ffffffff 	.word	0xffffffff
    5950:	ffffffff 	.word	0xffffffff
    5954:	ffffffff 	.word	0xffffffff
    5958:	ffffffff 	.word	0xffffffff
    595c:	ffffffff 	.word	0xffffffff
    5960:	ffffffff 	.word	0xffffffff
    5964:	ffffffff 	.word	0xffffffff
    5968:	ffffffff 	.word	0xffffffff
    596c:	ffffffff 	.word	0xffffffff
    5970:	ffffffff 	.word	0xffffffff
    5974:	ffffffff 	.word	0xffffffff
    5978:	ffffffff 	.word	0xffffffff
    597c:	ffffffff 	.word	0xffffffff
    5980:	ffffffff 	.word	0xffffffff
    5984:	ffffffff 	.word	0xffffffff
    5988:	ffffffff 	.word	0xffffffff
    598c:	ffffffff 	.word	0xffffffff
    5990:	ffffffff 	.word	0xffffffff
    5994:	ffffffff 	.word	0xffffffff
    5998:	ffffffff 	.word	0xffffffff
    599c:	ffffffff 	.word	0xffffffff
    59a0:	ffffffff 	.word	0xffffffff
    59a4:	ffffffff 	.word	0xffffffff
    59a8:	ffffffff 	.word	0xffffffff
    59ac:	ffffffff 	.word	0xffffffff
    59b0:	ffffffff 	.word	0xffffffff
    59b4:	ffffffff 	.word	0xffffffff
    59b8:	ffffffff 	.word	0xffffffff
    59bc:	ffffffff 	.word	0xffffffff
    59c0:	ffffffff 	.word	0xffffffff
    59c4:	ffffffff 	.word	0xffffffff
    59c8:	ffffffff 	.word	0xffffffff
    59cc:	ffffffff 	.word	0xffffffff
    59d0:	ffffffff 	.word	0xffffffff
    59d4:	ffffffff 	.word	0xffffffff
    59d8:	ffffffff 	.word	0xffffffff
    59dc:	ffffffff 	.word	0xffffffff
    59e0:	ffffffff 	.word	0xffffffff
    59e4:	ffffffff 	.word	0xffffffff
    59e8:	ffffffff 	.word	0xffffffff
    59ec:	ffffffff 	.word	0xffffffff
    59f0:	ffffffff 	.word	0xffffffff
    59f4:	ffffffff 	.word	0xffffffff
    59f8:	ffffffff 	.word	0xffffffff
    59fc:	ffffffff 	.word	0xffffffff
    5a00:	ffffffff 	.word	0xffffffff
    5a04:	ffffffff 	.word	0xffffffff
    5a08:	ffffffff 	.word	0xffffffff
    5a0c:	ffffffff 	.word	0xffffffff
    5a10:	ffffffff 	.word	0xffffffff
    5a14:	ffffffff 	.word	0xffffffff
    5a18:	ffffffff 	.word	0xffffffff
    5a1c:	ffffffff 	.word	0xffffffff
    5a20:	ffffffff 	.word	0xffffffff
    5a24:	ffffffff 	.word	0xffffffff
    5a28:	ffffffff 	.word	0xffffffff
    5a2c:	ffffffff 	.word	0xffffffff
    5a30:	ffffffff 	.word	0xffffffff
    5a34:	ffffffff 	.word	0xffffffff
    5a38:	ffffffff 	.word	0xffffffff
    5a3c:	ffffffff 	.word	0xffffffff
    5a40:	ffffffff 	.word	0xffffffff
    5a44:	ffffffff 	.word	0xffffffff
    5a48:	ffffffff 	.word	0xffffffff
    5a4c:	ffffffff 	.word	0xffffffff
    5a50:	ffffffff 	.word	0xffffffff
    5a54:	ffffffff 	.word	0xffffffff
    5a58:	ffffffff 	.word	0xffffffff
    5a5c:	ffffffff 	.word	0xffffffff
    5a60:	ffffffff 	.word	0xffffffff
    5a64:	ffffffff 	.word	0xffffffff
    5a68:	ffffffff 	.word	0xffffffff
    5a6c:	ffffffff 	.word	0xffffffff
    5a70:	ffffffff 	.word	0xffffffff
    5a74:	ffffffff 	.word	0xffffffff
    5a78:	ffffffff 	.word	0xffffffff
    5a7c:	ffffffff 	.word	0xffffffff
    5a80:	ffffffff 	.word	0xffffffff
    5a84:	ffffffff 	.word	0xffffffff
    5a88:	ffffffff 	.word	0xffffffff
    5a8c:	ffffffff 	.word	0xffffffff
    5a90:	ffffffff 	.word	0xffffffff
    5a94:	ffffffff 	.word	0xffffffff
    5a98:	ffffffff 	.word	0xffffffff
    5a9c:	ffffffff 	.word	0xffffffff
    5aa0:	ffffffff 	.word	0xffffffff
    5aa4:	ffffffff 	.word	0xffffffff
    5aa8:	ffffffff 	.word	0xffffffff
    5aac:	ffffffff 	.word	0xffffffff
    5ab0:	ffffffff 	.word	0xffffffff
    5ab4:	ffffffff 	.word	0xffffffff
    5ab8:	ffffffff 	.word	0xffffffff
    5abc:	ffffffff 	.word	0xffffffff
    5ac0:	ffffffff 	.word	0xffffffff
    5ac4:	ffffffff 	.word	0xffffffff
    5ac8:	ffffffff 	.word	0xffffffff
    5acc:	ffffffff 	.word	0xffffffff
    5ad0:	ffffffff 	.word	0xffffffff
    5ad4:	ffffffff 	.word	0xffffffff
    5ad8:	ffffffff 	.word	0xffffffff
    5adc:	ffffffff 	.word	0xffffffff
    5ae0:	ffffffff 	.word	0xffffffff
    5ae4:	ffffffff 	.word	0xffffffff
    5ae8:	ffffffff 	.word	0xffffffff
    5aec:	ffffffff 	.word	0xffffffff
    5af0:	ffffffff 	.word	0xffffffff
    5af4:	ffffffff 	.word	0xffffffff
    5af8:	ffffffff 	.word	0xffffffff
    5afc:	ffffffff 	.word	0xffffffff
    5b00:	ffffffff 	.word	0xffffffff
    5b04:	ffffffff 	.word	0xffffffff
    5b08:	ffffffff 	.word	0xffffffff
    5b0c:	ffffffff 	.word	0xffffffff
    5b10:	ffffffff 	.word	0xffffffff
    5b14:	ffffffff 	.word	0xffffffff
    5b18:	ffffffff 	.word	0xffffffff
    5b1c:	ffffffff 	.word	0xffffffff
    5b20:	ffffffff 	.word	0xffffffff
    5b24:	ffffffff 	.word	0xffffffff
    5b28:	ffffffff 	.word	0xffffffff
    5b2c:	ffffffff 	.word	0xffffffff
    5b30:	ffffffff 	.word	0xffffffff
    5b34:	ffffffff 	.word	0xffffffff
    5b38:	ffffffff 	.word	0xffffffff
    5b3c:	ffffffff 	.word	0xffffffff
    5b40:	ffffffff 	.word	0xffffffff
    5b44:	ffffffff 	.word	0xffffffff
    5b48:	ffffffff 	.word	0xffffffff
    5b4c:	ffffffff 	.word	0xffffffff
    5b50:	ffffffff 	.word	0xffffffff
    5b54:	ffffffff 	.word	0xffffffff
    5b58:	ffffffff 	.word	0xffffffff
    5b5c:	ffffffff 	.word	0xffffffff
    5b60:	ffffffff 	.word	0xffffffff
    5b64:	ffffffff 	.word	0xffffffff
    5b68:	ffffffff 	.word	0xffffffff
    5b6c:	ffffffff 	.word	0xffffffff
    5b70:	ffffffff 	.word	0xffffffff
    5b74:	ffffffff 	.word	0xffffffff
    5b78:	ffffffff 	.word	0xffffffff
    5b7c:	ffffffff 	.word	0xffffffff
    5b80:	ffffffff 	.word	0xffffffff
    5b84:	ffffffff 	.word	0xffffffff
    5b88:	ffffffff 	.word	0xffffffff
    5b8c:	ffffffff 	.word	0xffffffff
    5b90:	ffffffff 	.word	0xffffffff
    5b94:	ffffffff 	.word	0xffffffff
    5b98:	ffffffff 	.word	0xffffffff
    5b9c:	ffffffff 	.word	0xffffffff
    5ba0:	ffffffff 	.word	0xffffffff
    5ba4:	ffffffff 	.word	0xffffffff
    5ba8:	ffffffff 	.word	0xffffffff
    5bac:	ffffffff 	.word	0xffffffff
    5bb0:	ffffffff 	.word	0xffffffff
    5bb4:	ffffffff 	.word	0xffffffff
    5bb8:	ffffffff 	.word	0xffffffff
    5bbc:	ffffffff 	.word	0xffffffff
    5bc0:	ffffffff 	.word	0xffffffff
    5bc4:	ffffffff 	.word	0xffffffff
    5bc8:	ffffffff 	.word	0xffffffff
    5bcc:	ffffffff 	.word	0xffffffff
    5bd0:	ffffffff 	.word	0xffffffff
    5bd4:	ffffffff 	.word	0xffffffff
    5bd8:	ffffffff 	.word	0xffffffff
    5bdc:	ffffffff 	.word	0xffffffff
    5be0:	ffffffff 	.word	0xffffffff
    5be4:	ffffffff 	.word	0xffffffff
    5be8:	ffffffff 	.word	0xffffffff
    5bec:	ffffffff 	.word	0xffffffff
    5bf0:	ffffffff 	.word	0xffffffff
    5bf4:	ffffffff 	.word	0xffffffff
    5bf8:	ffffffff 	.word	0xffffffff
    5bfc:	ffffffff 	.word	0xffffffff
    5c00:	ffffffff 	.word	0xffffffff
    5c04:	ffffffff 	.word	0xffffffff
    5c08:	ffffffff 	.word	0xffffffff
    5c0c:	ffffffff 	.word	0xffffffff
    5c10:	ffffffff 	.word	0xffffffff
    5c14:	ffffffff 	.word	0xffffffff
    5c18:	ffffffff 	.word	0xffffffff
    5c1c:	ffffffff 	.word	0xffffffff
    5c20:	ffffffff 	.word	0xffffffff
    5c24:	ffffffff 	.word	0xffffffff
    5c28:	ffffffff 	.word	0xffffffff
    5c2c:	ffffffff 	.word	0xffffffff
    5c30:	ffffffff 	.word	0xffffffff
    5c34:	ffffffff 	.word	0xffffffff
    5c38:	ffffffff 	.word	0xffffffff
    5c3c:	ffffffff 	.word	0xffffffff
    5c40:	ffffffff 	.word	0xffffffff
    5c44:	ffffffff 	.word	0xffffffff
    5c48:	ffffffff 	.word	0xffffffff
    5c4c:	ffffffff 	.word	0xffffffff
    5c50:	ffffffff 	.word	0xffffffff
    5c54:	ffffffff 	.word	0xffffffff
    5c58:	ffffffff 	.word	0xffffffff
    5c5c:	ffffffff 	.word	0xffffffff
    5c60:	ffffffff 	.word	0xffffffff
    5c64:	ffffffff 	.word	0xffffffff
    5c68:	ffffffff 	.word	0xffffffff
    5c6c:	ffffffff 	.word	0xffffffff
    5c70:	ffffffff 	.word	0xffffffff
    5c74:	ffffffff 	.word	0xffffffff
    5c78:	ffffffff 	.word	0xffffffff
    5c7c:	ffffffff 	.word	0xffffffff
    5c80:	ffffffff 	.word	0xffffffff
    5c84:	ffffffff 	.word	0xffffffff
    5c88:	ffffffff 	.word	0xffffffff
    5c8c:	ffffffff 	.word	0xffffffff
    5c90:	ffffffff 	.word	0xffffffff
    5c94:	ffffffff 	.word	0xffffffff
    5c98:	ffffffff 	.word	0xffffffff
    5c9c:	ffffffff 	.word	0xffffffff
    5ca0:	ffffffff 	.word	0xffffffff
    5ca4:	ffffffff 	.word	0xffffffff
    5ca8:	ffffffff 	.word	0xffffffff
    5cac:	ffffffff 	.word	0xffffffff
    5cb0:	ffffffff 	.word	0xffffffff
    5cb4:	ffffffff 	.word	0xffffffff
    5cb8:	ffffffff 	.word	0xffffffff
    5cbc:	ffffffff 	.word	0xffffffff
    5cc0:	ffffffff 	.word	0xffffffff
    5cc4:	ffffffff 	.word	0xffffffff
    5cc8:	ffffffff 	.word	0xffffffff
    5ccc:	ffffffff 	.word	0xffffffff
    5cd0:	ffffffff 	.word	0xffffffff
    5cd4:	ffffffff 	.word	0xffffffff
    5cd8:	ffffffff 	.word	0xffffffff
    5cdc:	ffffffff 	.word	0xffffffff
    5ce0:	ffffffff 	.word	0xffffffff
    5ce4:	ffffffff 	.word	0xffffffff
    5ce8:	ffffffff 	.word	0xffffffff
    5cec:	ffffffff 	.word	0xffffffff
    5cf0:	ffffffff 	.word	0xffffffff
    5cf4:	ffffffff 	.word	0xffffffff
    5cf8:	ffffffff 	.word	0xffffffff
    5cfc:	ffffffff 	.word	0xffffffff
    5d00:	ffffffff 	.word	0xffffffff
    5d04:	ffffffff 	.word	0xffffffff
    5d08:	ffffffff 	.word	0xffffffff
    5d0c:	ffffffff 	.word	0xffffffff
    5d10:	ffffffff 	.word	0xffffffff
    5d14:	ffffffff 	.word	0xffffffff
    5d18:	ffffffff 	.word	0xffffffff
    5d1c:	ffffffff 	.word	0xffffffff
    5d20:	ffffffff 	.word	0xffffffff
    5d24:	ffffffff 	.word	0xffffffff
    5d28:	ffffffff 	.word	0xffffffff
    5d2c:	ffffffff 	.word	0xffffffff
    5d30:	ffffffff 	.word	0xffffffff
    5d34:	ffffffff 	.word	0xffffffff
    5d38:	ffffffff 	.word	0xffffffff
    5d3c:	ffffffff 	.word	0xffffffff
    5d40:	ffffffff 	.word	0xffffffff
    5d44:	ffffffff 	.word	0xffffffff
    5d48:	ffffffff 	.word	0xffffffff
    5d4c:	ffffffff 	.word	0xffffffff
    5d50:	ffffffff 	.word	0xffffffff
    5d54:	ffffffff 	.word	0xffffffff
    5d58:	ffffffff 	.word	0xffffffff
    5d5c:	ffffffff 	.word	0xffffffff
    5d60:	ffffffff 	.word	0xffffffff
    5d64:	ffffffff 	.word	0xffffffff
    5d68:	ffffffff 	.word	0xffffffff
    5d6c:	ffffffff 	.word	0xffffffff
    5d70:	ffffffff 	.word	0xffffffff
    5d74:	ffffffff 	.word	0xffffffff
    5d78:	ffffffff 	.word	0xffffffff
    5d7c:	ffffffff 	.word	0xffffffff
    5d80:	ffffffff 	.word	0xffffffff
    5d84:	ffffffff 	.word	0xffffffff
    5d88:	ffffffff 	.word	0xffffffff
    5d8c:	ffffffff 	.word	0xffffffff
    5d90:	ffffffff 	.word	0xffffffff
    5d94:	ffffffff 	.word	0xffffffff
    5d98:	ffffffff 	.word	0xffffffff
    5d9c:	ffffffff 	.word	0xffffffff
    5da0:	ffffffff 	.word	0xffffffff
    5da4:	ffffffff 	.word	0xffffffff
    5da8:	ffffffff 	.word	0xffffffff
    5dac:	ffffffff 	.word	0xffffffff
    5db0:	ffffffff 	.word	0xffffffff
    5db4:	ffffffff 	.word	0xffffffff
    5db8:	ffffffff 	.word	0xffffffff
    5dbc:	ffffffff 	.word	0xffffffff
    5dc0:	ffffffff 	.word	0xffffffff
    5dc4:	ffffffff 	.word	0xffffffff
    5dc8:	ffffffff 	.word	0xffffffff
    5dcc:	ffffffff 	.word	0xffffffff
    5dd0:	ffffffff 	.word	0xffffffff
    5dd4:	ffffffff 	.word	0xffffffff
    5dd8:	ffffffff 	.word	0xffffffff
    5ddc:	ffffffff 	.word	0xffffffff
    5de0:	ffffffff 	.word	0xffffffff
    5de4:	ffffffff 	.word	0xffffffff
    5de8:	ffffffff 	.word	0xffffffff
    5dec:	ffffffff 	.word	0xffffffff
    5df0:	ffffffff 	.word	0xffffffff
    5df4:	ffffffff 	.word	0xffffffff
    5df8:	ffffffff 	.word	0xffffffff
    5dfc:	ffffffff 	.word	0xffffffff
    5e00:	ffffffff 	.word	0xffffffff
    5e04:	ffffffff 	.word	0xffffffff
    5e08:	ffffffff 	.word	0xffffffff
    5e0c:	ffffffff 	.word	0xffffffff
    5e10:	ffffffff 	.word	0xffffffff
    5e14:	ffffffff 	.word	0xffffffff
    5e18:	ffffffff 	.word	0xffffffff
    5e1c:	ffffffff 	.word	0xffffffff
    5e20:	ffffffff 	.word	0xffffffff
    5e24:	ffffffff 	.word	0xffffffff
    5e28:	ffffffff 	.word	0xffffffff
    5e2c:	ffffffff 	.word	0xffffffff
    5e30:	ffffffff 	.word	0xffffffff
    5e34:	ffffffff 	.word	0xffffffff
    5e38:	ffffffff 	.word	0xffffffff
    5e3c:	ffffffff 	.word	0xffffffff
    5e40:	ffffffff 	.word	0xffffffff
    5e44:	ffffffff 	.word	0xffffffff
    5e48:	ffffffff 	.word	0xffffffff
    5e4c:	ffffffff 	.word	0xffffffff
    5e50:	ffffffff 	.word	0xffffffff
    5e54:	ffffffff 	.word	0xffffffff
    5e58:	ffffffff 	.word	0xffffffff
    5e5c:	ffffffff 	.word	0xffffffff
    5e60:	ffffffff 	.word	0xffffffff
    5e64:	ffffffff 	.word	0xffffffff
    5e68:	ffffffff 	.word	0xffffffff
    5e6c:	ffffffff 	.word	0xffffffff
    5e70:	ffffffff 	.word	0xffffffff
    5e74:	ffffffff 	.word	0xffffffff
    5e78:	ffffffff 	.word	0xffffffff
    5e7c:	ffffffff 	.word	0xffffffff
    5e80:	ffffffff 	.word	0xffffffff
    5e84:	ffffffff 	.word	0xffffffff
    5e88:	ffffffff 	.word	0xffffffff
    5e8c:	ffffffff 	.word	0xffffffff
    5e90:	ffffffff 	.word	0xffffffff
    5e94:	ffffffff 	.word	0xffffffff
    5e98:	ffffffff 	.word	0xffffffff
    5e9c:	ffffffff 	.word	0xffffffff
    5ea0:	ffffffff 	.word	0xffffffff
    5ea4:	ffffffff 	.word	0xffffffff
    5ea8:	ffffffff 	.word	0xffffffff
    5eac:	ffffffff 	.word	0xffffffff
    5eb0:	ffffffff 	.word	0xffffffff
    5eb4:	ffffffff 	.word	0xffffffff
    5eb8:	ffffffff 	.word	0xffffffff
    5ebc:	ffffffff 	.word	0xffffffff
    5ec0:	ffffffff 	.word	0xffffffff
    5ec4:	ffffffff 	.word	0xffffffff
    5ec8:	ffffffff 	.word	0xffffffff
    5ecc:	ffffffff 	.word	0xffffffff
    5ed0:	ffffffff 	.word	0xffffffff
    5ed4:	ffffffff 	.word	0xffffffff
    5ed8:	ffffffff 	.word	0xffffffff
    5edc:	ffffffff 	.word	0xffffffff
    5ee0:	ffffffff 	.word	0xffffffff
    5ee4:	ffffffff 	.word	0xffffffff
    5ee8:	ffffffff 	.word	0xffffffff
    5eec:	ffffffff 	.word	0xffffffff
    5ef0:	ffffffff 	.word	0xffffffff
    5ef4:	ffffffff 	.word	0xffffffff
    5ef8:	ffffffff 	.word	0xffffffff
    5efc:	ffffffff 	.word	0xffffffff
    5f00:	ffffffff 	.word	0xffffffff
    5f04:	ffffffff 	.word	0xffffffff
    5f08:	ffffffff 	.word	0xffffffff
    5f0c:	ffffffff 	.word	0xffffffff
    5f10:	ffffffff 	.word	0xffffffff
    5f14:	ffffffff 	.word	0xffffffff
    5f18:	ffffffff 	.word	0xffffffff
    5f1c:	ffffffff 	.word	0xffffffff
    5f20:	ffffffff 	.word	0xffffffff
    5f24:	ffffffff 	.word	0xffffffff
    5f28:	ffffffff 	.word	0xffffffff
    5f2c:	ffffffff 	.word	0xffffffff
    5f30:	ffffffff 	.word	0xffffffff
    5f34:	ffffffff 	.word	0xffffffff
    5f38:	ffffffff 	.word	0xffffffff
    5f3c:	ffffffff 	.word	0xffffffff
    5f40:	ffffffff 	.word	0xffffffff
    5f44:	ffffffff 	.word	0xffffffff
    5f48:	ffffffff 	.word	0xffffffff
    5f4c:	ffffffff 	.word	0xffffffff
    5f50:	ffffffff 	.word	0xffffffff
    5f54:	ffffffff 	.word	0xffffffff
    5f58:	ffffffff 	.word	0xffffffff
    5f5c:	ffffffff 	.word	0xffffffff
    5f60:	ffffffff 	.word	0xffffffff
    5f64:	ffffffff 	.word	0xffffffff
    5f68:	ffffffff 	.word	0xffffffff
    5f6c:	ffffffff 	.word	0xffffffff
    5f70:	ffffffff 	.word	0xffffffff
    5f74:	ffffffff 	.word	0xffffffff
    5f78:	ffffffff 	.word	0xffffffff
    5f7c:	ffffffff 	.word	0xffffffff
    5f80:	ffffffff 	.word	0xffffffff
    5f84:	ffffffff 	.word	0xffffffff
    5f88:	ffffffff 	.word	0xffffffff
    5f8c:	ffffffff 	.word	0xffffffff
    5f90:	ffffffff 	.word	0xffffffff
    5f94:	ffffffff 	.word	0xffffffff
    5f98:	ffffffff 	.word	0xffffffff
    5f9c:	ffffffff 	.word	0xffffffff
    5fa0:	ffffffff 	.word	0xffffffff
    5fa4:	ffffffff 	.word	0xffffffff
    5fa8:	ffffffff 	.word	0xffffffff
    5fac:	ffffffff 	.word	0xffffffff
    5fb0:	ffffffff 	.word	0xffffffff
    5fb4:	ffffffff 	.word	0xffffffff
    5fb8:	ffffffff 	.word	0xffffffff
    5fbc:	ffffffff 	.word	0xffffffff
    5fc0:	ffffffff 	.word	0xffffffff
    5fc4:	ffffffff 	.word	0xffffffff
    5fc8:	ffffffff 	.word	0xffffffff
    5fcc:	ffffffff 	.word	0xffffffff
    5fd0:	ffffffff 	.word	0xffffffff
    5fd4:	ffffffff 	.word	0xffffffff
    5fd8:	ffffffff 	.word	0xffffffff
    5fdc:	ffffffff 	.word	0xffffffff
    5fe0:	ffffffff 	.word	0xffffffff
    5fe4:	ffffffff 	.word	0xffffffff
    5fe8:	ffffffff 	.word	0xffffffff
    5fec:	ffffffff 	.word	0xffffffff
    5ff0:	ffffffff 	.word	0xffffffff
    5ff4:	ffffffff 	.word	0xffffffff
    5ff8:	ffffffff 	.word	0xffffffff
    5ffc:	ffffffff 	.word	0xffffffff
    6000:	ffffffff 	.word	0xffffffff
    6004:	ffffffff 	.word	0xffffffff
    6008:	ffffffff 	.word	0xffffffff
    600c:	ffffffff 	.word	0xffffffff
    6010:	ffffffff 	.word	0xffffffff
    6014:	ffffffff 	.word	0xffffffff
    6018:	ffffffff 	.word	0xffffffff
    601c:	ffffffff 	.word	0xffffffff
    6020:	ffffffff 	.word	0xffffffff
    6024:	ffffffff 	.word	0xffffffff
    6028:	ffffffff 	.word	0xffffffff
    602c:	ffffffff 	.word	0xffffffff
    6030:	ffffffff 	.word	0xffffffff
    6034:	ffffffff 	.word	0xffffffff
    6038:	ffffffff 	.word	0xffffffff
    603c:	ffffffff 	.word	0xffffffff
    6040:	ffffffff 	.word	0xffffffff
    6044:	ffffffff 	.word	0xffffffff
    6048:	ffffffff 	.word	0xffffffff
    604c:	ffffffff 	.word	0xffffffff
    6050:	ffffffff 	.word	0xffffffff
    6054:	ffffffff 	.word	0xffffffff
    6058:	ffffffff 	.word	0xffffffff
    605c:	ffffffff 	.word	0xffffffff
    6060:	ffffffff 	.word	0xffffffff
    6064:	ffffffff 	.word	0xffffffff
    6068:	ffffffff 	.word	0xffffffff
    606c:	ffffffff 	.word	0xffffffff
    6070:	ffffffff 	.word	0xffffffff
    6074:	ffffffff 	.word	0xffffffff
    6078:	ffffffff 	.word	0xffffffff
    607c:	ffffffff 	.word	0xffffffff
    6080:	ffffffff 	.word	0xffffffff
    6084:	ffffffff 	.word	0xffffffff
    6088:	ffffffff 	.word	0xffffffff
    608c:	ffffffff 	.word	0xffffffff
    6090:	ffffffff 	.word	0xffffffff
    6094:	ffffffff 	.word	0xffffffff
    6098:	ffffffff 	.word	0xffffffff
    609c:	ffffffff 	.word	0xffffffff
    60a0:	ffffffff 	.word	0xffffffff
    60a4:	ffffffff 	.word	0xffffffff
    60a8:	ffffffff 	.word	0xffffffff
    60ac:	ffffffff 	.word	0xffffffff
    60b0:	ffffffff 	.word	0xffffffff
    60b4:	ffffffff 	.word	0xffffffff
    60b8:	ffffffff 	.word	0xffffffff
    60bc:	ffffffff 	.word	0xffffffff
    60c0:	ffffffff 	.word	0xffffffff
    60c4:	ffffffff 	.word	0xffffffff
    60c8:	ffffffff 	.word	0xffffffff
    60cc:	ffffffff 	.word	0xffffffff
    60d0:	ffffffff 	.word	0xffffffff
    60d4:	ffffffff 	.word	0xffffffff
    60d8:	ffffffff 	.word	0xffffffff
    60dc:	ffffffff 	.word	0xffffffff
    60e0:	ffffffff 	.word	0xffffffff
    60e4:	ffffffff 	.word	0xffffffff
    60e8:	ffffffff 	.word	0xffffffff
    60ec:	ffffffff 	.word	0xffffffff
    60f0:	ffffffff 	.word	0xffffffff
    60f4:	ffffffff 	.word	0xffffffff
    60f8:	ffffffff 	.word	0xffffffff
    60fc:	ffffffff 	.word	0xffffffff

00006100 <pds_ff_PDS_ROUTE_TABLE_HOP_ID>:
    6100:	00200009 20002080 00000000 00000001     .. .. . ........

00006110 <pds_ff_PDS_ROUTE_TABLE_COORD_ID>:
    6110:	00800008 20002104 00000000 00000001     .....!. ........

00006120 <pds_ff_PDS_DEVICE_TABLE_SLEEP_ID>:
    6120:	00640007 200020a0 00000000 00000001     ..d.. . ........

00006130 <pds_ff_PDS_DEVICE_TABLE_NONSLEEP_ID>:
    6130:	00500006 200025d8 00000000 00000001     ..P..%. ........

00006140 <pds_ff_PDS_CHANNEL_UPDATE_ID>:
    6140:	00010005 2000008f 00000000 00000000     ....... ........

00006150 <pds_ff_PDS_BLOOM_VALUE_ID>:
    6150:	00080004 200028f0 00000000 00000000     .....(. ........

00006160 <pds_ff_PDS_SECURITY_COUNTER_ID>:
    6160:	00040003 20002914 00000000 00000000     .....). ........

00006170 <pds_ff_PDS_SECURITY_KEY_ID>:
    6170:	00100002 20000078 00000000 00000000     ....x.. ........

00006180 <pds_ff_PDS_GENERAL_INFO_ID>:
    6180:	00180001 20001db0 0000a909 00000000     ....... ........

00006190 <MiWiFullParamsDirDescr>:
    6190:	000166ec 40010008                       .f.....@

00006198 <__do_global_dtors_aux>:
    6198:	b510      	push	{r4, lr}
    619a:	4c06      	ldr	r4, [pc, #24]	; (61b4 <__do_global_dtors_aux+0x1c>)
    619c:	7823      	ldrb	r3, [r4, #0]
    619e:	2b00      	cmp	r3, #0
    61a0:	d107      	bne.n	61b2 <__do_global_dtors_aux+0x1a>
    61a2:	4b05      	ldr	r3, [pc, #20]	; (61b8 <__do_global_dtors_aux+0x20>)
    61a4:	2b00      	cmp	r3, #0
    61a6:	d002      	beq.n	61ae <__do_global_dtors_aux+0x16>
    61a8:	4804      	ldr	r0, [pc, #16]	; (61bc <__do_global_dtors_aux+0x24>)
    61aa:	e000      	b.n	61ae <__do_global_dtors_aux+0x16>
    61ac:	bf00      	nop
    61ae:	2301      	movs	r3, #1
    61b0:	7023      	strb	r3, [r4, #0]
    61b2:	bd10      	pop	{r4, pc}
    61b4:	20000108 	.word	0x20000108
    61b8:	00000000 	.word	0x00000000
    61bc:	00016960 	.word	0x00016960

000061c0 <frame_dummy>:
    61c0:	4b08      	ldr	r3, [pc, #32]	; (61e4 <frame_dummy+0x24>)
    61c2:	b510      	push	{r4, lr}
    61c4:	2b00      	cmp	r3, #0
    61c6:	d003      	beq.n	61d0 <frame_dummy+0x10>
    61c8:	4907      	ldr	r1, [pc, #28]	; (61e8 <frame_dummy+0x28>)
    61ca:	4808      	ldr	r0, [pc, #32]	; (61ec <frame_dummy+0x2c>)
    61cc:	e000      	b.n	61d0 <frame_dummy+0x10>
    61ce:	bf00      	nop
    61d0:	4807      	ldr	r0, [pc, #28]	; (61f0 <frame_dummy+0x30>)
    61d2:	6803      	ldr	r3, [r0, #0]
    61d4:	2b00      	cmp	r3, #0
    61d6:	d100      	bne.n	61da <frame_dummy+0x1a>
    61d8:	bd10      	pop	{r4, pc}
    61da:	4b06      	ldr	r3, [pc, #24]	; (61f4 <frame_dummy+0x34>)
    61dc:	2b00      	cmp	r3, #0
    61de:	d0fb      	beq.n	61d8 <frame_dummy+0x18>
    61e0:	4798      	blx	r3
    61e2:	e7f9      	b.n	61d8 <frame_dummy+0x18>
    61e4:	00000000 	.word	0x00000000
    61e8:	2000010c 	.word	0x2000010c
    61ec:	00016960 	.word	0x00016960
    61f0:	00016960 	.word	0x00016960
    61f4:	00000000 	.word	0x00000000

000061f8 <appDataConf>:
	else
	{

	}

	if (APP_STATE_WAIT_CONF == appState)
    61f8:	4b04      	ldr	r3, [pc, #16]	; (620c <appDataConf+0x14>)
    61fa:	781b      	ldrb	r3, [r3, #0]
    61fc:	2b09      	cmp	r3, #9
    61fe:	d000      	beq.n	6202 <appDataConf+0xa>
	{
		appState = APP_STATE_SENDING_DONE;
	}
}
    6200:	4770      	bx	lr
		appState = APP_STATE_SENDING_DONE;
    6202:	220a      	movs	r2, #10
    6204:	4b01      	ldr	r3, [pc, #4]	; (620c <appDataConf+0x14>)
    6206:	701a      	strb	r2, [r3, #0]
}
    6208:	e7fa      	b.n	6200 <appDataConf+0x8>
    620a:	46c0      	nop			; (mov r8, r8)
    620c:	2000012f 	.word	0x2000012f

00006210 <ReconnectionIndication>:
}

#if defined(ENABLE_NETWORK_FREEZER)
static void ReconnectionIndication (miwi_status_t status)
{
	if(SUCCESS == status)
    6210:	2800      	cmp	r0, #0
    6212:	d003      	beq.n	621c <ReconnectionIndication+0xc>
	{
		appState = APP_STATE_RECONNECT_SUCCESS;
	}
	else
	{
		appState = APP_STATE_RECONNECT_FAILURE;
    6214:	2207      	movs	r2, #7
    6216:	4b03      	ldr	r3, [pc, #12]	; (6224 <ReconnectionIndication+0x14>)
    6218:	701a      	strb	r2, [r3, #0]
	}
}
    621a:	4770      	bx	lr
		appState = APP_STATE_RECONNECT_SUCCESS;
    621c:	2206      	movs	r2, #6
    621e:	4b01      	ldr	r3, [pc, #4]	; (6224 <ReconnectionIndication+0x14>)
    6220:	701a      	strb	r2, [r3, #0]
    6222:	e7fa      	b.n	621a <ReconnectionIndication+0xa>
    6224:	2000012f 	.word	0x2000012f

00006228 <Connection_Confirm>:
}


static void Connection_Confirm(miwi_status_t status)
{
	if (SUCCESS == status)
    6228:	2800      	cmp	r0, #0
    622a:	d003      	beq.n	6234 <Connection_Confirm+0xc>
	{
        appState = APP_STATE_SEND;
	}
	else
	{
        appState = APP_STATE_CONNECT_NETWORK;
    622c:	2202      	movs	r2, #2
    622e:	4b03      	ldr	r3, [pc, #12]	; (623c <Connection_Confirm+0x14>)
    6230:	701a      	strb	r2, [r3, #0]
	}
}
    6232:	4770      	bx	lr
        appState = APP_STATE_SEND;
    6234:	2208      	movs	r2, #8
    6236:	4b01      	ldr	r3, [pc, #4]	; (623c <Connection_Confirm+0x14>)
    6238:	701a      	strb	r2, [r3, #0]
    623a:	e7fa      	b.n	6232 <Connection_Confirm+0xa>
    623c:	2000012f 	.word	0x2000012f

00006240 <searchConfim>:
{
    6240:	b530      	push	{r4, r5, lr}
    6242:	b083      	sub	sp, #12
	if (foundScanResults)
    6244:	2800      	cmp	r0, #0
    6246:	d024      	beq.n	6292 <searchConfim+0x52>
    6248:	000a      	movs	r2, r1
    624a:	3209      	adds	r2, #9
    624c:	2300      	movs	r3, #0
    624e:	25ff      	movs	r5, #255	; 0xff
    6250:	e004      	b.n	625c <searchConfim+0x1c>
		for (uint8_t loopindex = 0; loopindex < foundScanResults; loopindex++)
    6252:	3301      	adds	r3, #1
    6254:	b2db      	uxtb	r3, r3
    6256:	3212      	adds	r2, #18
    6258:	4298      	cmp	r0, r3
    625a:	d004      	beq.n	6266 <searchConfim+0x26>
			if (searchConfRes->beaconList[loopindex].connectionPermit)
    625c:	7814      	ldrb	r4, [r2, #0]
    625e:	2c00      	cmp	r4, #0
    6260:	d0f7      	beq.n	6252 <searchConfim+0x12>
    6262:	001d      	movs	r5, r3
    6264:	e7f5      	b.n	6252 <searchConfim+0x12>
		if (selectedParentIndex != 0xFF)
    6266:	2dff      	cmp	r5, #255	; 0xff
    6268:	d00f      	beq.n	628a <searchConfim+0x4a>
			SHORT_ADDR_LEN, (uint8_t*)&searchConfRes->beaconList[selectedParentIndex].shortAddress, CAPABILITY_INFO, Connection_Confirm);
    626a:	00eb      	lsls	r3, r5, #3
    626c:	195a      	adds	r2, r3, r5
    626e:	0052      	lsls	r2, r2, #1
    6270:	3210      	adds	r2, #16
    6272:	188a      	adds	r2, r1, r2
			MiApp_EstablishConnection(searchConfRes->beaconList[selectedParentIndex].logicalChannel,
    6274:	195d      	adds	r5, r3, r5
    6276:	006d      	lsls	r5, r5, #1
    6278:	1949      	adds	r1, r1, r5
    627a:	7b08      	ldrb	r0, [r1, #12]
    627c:	4b07      	ldr	r3, [pc, #28]	; (629c <searchConfim+0x5c>)
    627e:	9300      	str	r3, [sp, #0]
    6280:	2305      	movs	r3, #5
    6282:	2102      	movs	r1, #2
    6284:	4c06      	ldr	r4, [pc, #24]	; (62a0 <searchConfim+0x60>)
    6286:	47a0      	blx	r4
			return;
    6288:	e006      	b.n	6298 <searchConfim+0x58>
		appState = APP_STATE_CONNECT_NETWORK;
    628a:	2202      	movs	r2, #2
    628c:	4b05      	ldr	r3, [pc, #20]	; (62a4 <searchConfim+0x64>)
    628e:	701a      	strb	r2, [r3, #0]
    6290:	e002      	b.n	6298 <searchConfim+0x58>
		appState = APP_STATE_CONNECT_NETWORK;
    6292:	2202      	movs	r2, #2
    6294:	4b03      	ldr	r3, [pc, #12]	; (62a4 <searchConfim+0x64>)
    6296:	701a      	strb	r2, [r3, #0]
}
    6298:	b003      	add	sp, #12
    629a:	bd30      	pop	{r4, r5, pc}
    629c:	00006229 	.word	0x00006229
    62a0:	00010a69 	.word	0x00010a69
    62a4:	2000012f 	.word	0x2000012f

000062a8 <appDataSendingTimerHandler>:
{
    62a8:	b510      	push	{r4, lr}
	if ((APP_STATE_WAIT_SEND_TIMER == appState) || (APP_STATE_PREPARE_TO_SLEEP == appState))
    62aa:	4b07      	ldr	r3, [pc, #28]	; (62c8 <appDataSendingTimerHandler+0x20>)
    62ac:	781b      	ldrb	r3, [r3, #0]
    62ae:	3b0b      	subs	r3, #11
    62b0:	22fd      	movs	r2, #253	; 0xfd
    62b2:	4213      	tst	r3, r2
    62b4:	d003      	beq.n	62be <appDataSendingTimerHandler+0x16>
		SYS_TimerStart(&appDataSendingTimer);
    62b6:	4805      	ldr	r0, [pc, #20]	; (62cc <appDataSendingTimerHandler+0x24>)
    62b8:	4b05      	ldr	r3, [pc, #20]	; (62d0 <appDataSendingTimerHandler+0x28>)
    62ba:	4798      	blx	r3
}
    62bc:	e002      	b.n	62c4 <appDataSendingTimerHandler+0x1c>
		appState = APP_STATE_SEND;
    62be:	3af5      	subs	r2, #245	; 0xf5
    62c0:	4b01      	ldr	r3, [pc, #4]	; (62c8 <appDataSendingTimerHandler+0x20>)
    62c2:	701a      	strb	r2, [r3, #0]
}
    62c4:	bd10      	pop	{r4, pc}
    62c6:	46c0      	nop			; (mov r8, r8)
    62c8:	2000012f 	.word	0x2000012f
    62cc:	20001d28 	.word	0x20001d28
    62d0:	0000c01d 	.word	0x0000c01d

000062d4 <appDataInd>:
{
    62d4:	b510      	push	{r4, lr}
	AppPacket_t *msg = (AppPacket_t *)ind->payload;
    62d6:	6844      	ldr	r4, [r0, #4]
		printf("Received Data: %u\r\n", msg->light);
    62d8:	79e1      	ldrb	r1, [r4, #7]
    62da:	4808      	ldr	r0, [pc, #32]	; (62fc <appDataInd+0x28>)
    62dc:	4b08      	ldr	r3, [pc, #32]	; (6300 <appDataInd+0x2c>)
    62de:	4798      	blx	r3
{
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
    62e0:	79e3      	ldrb	r3, [r4, #7]
    62e2:	2b00      	cmp	r3, #0
    62e4:	d004      	beq.n	62f0 <appDataInd+0x1c>
		port_base->OUTSET.reg = pin_mask;
	} else {
		port_base->OUTCLR.reg = pin_mask;
    62e6:	2280      	movs	r2, #128	; 0x80
    62e8:	0312      	lsls	r2, r2, #12
    62ea:	4b06      	ldr	r3, [pc, #24]	; (6304 <appDataInd+0x30>)
    62ec:	615a      	str	r2, [r3, #20]
}
    62ee:	bd10      	pop	{r4, pc}
		port_base->OUTSET.reg = pin_mask;
    62f0:	2280      	movs	r2, #128	; 0x80
    62f2:	0312      	lsls	r2, r2, #12
    62f4:	4b03      	ldr	r3, [pc, #12]	; (6304 <appDataInd+0x30>)
    62f6:	619a      	str	r2, [r3, #24]
    62f8:	e7f9      	b.n	62ee <appDataInd+0x1a>
    62fa:	46c0      	nop			; (mov r8, r8)
    62fc:	00015ee0 	.word	0x00015ee0
    6300:	000152f1 	.word	0x000152f1
    6304:	41004400 	.word	0x41004400

00006308 <appLinkFailureCallback>:
#endif
	APP_TaskHandler();
}

void appLinkFailureCallback(void)
{
    6308:	b510      	push	{r4, lr}
	/* On link failure initiate search to establish connection */
	appState = APP_STATE_CONNECT_NETWORK;
    630a:	2202      	movs	r2, #2
    630c:	4b02      	ldr	r3, [pc, #8]	; (6318 <appLinkFailureCallback+0x10>)
    630e:	701a      	strb	r2, [r3, #0]
	SYS_TimerStop(&appDataSendingTimer);
    6310:	4802      	ldr	r0, [pc, #8]	; (631c <appLinkFailureCallback+0x14>)
    6312:	4b03      	ldr	r3, [pc, #12]	; (6320 <appLinkFailureCallback+0x18>)
    6314:	4798      	blx	r3
}
    6316:	bd10      	pop	{r4, pc}
    6318:	2000012f 	.word	0x2000012f
    631c:	20001d28 	.word	0x20001d28
    6320:	0000bfb1 	.word	0x0000bfb1

00006324 <wsndemo_init>:
{
    6324:	b570      	push	{r4, r5, r6, lr}
    6326:	b082      	sub	sp, #8
    MiApp_SubscribeReConnectionCallback((ReconnectionCallback_t)ReconnectionIndication );
    6328:	481a      	ldr	r0, [pc, #104]	; (6394 <wsndemo_init+0x70>)
    632a:	4b1b      	ldr	r3, [pc, #108]	; (6398 <wsndemo_init+0x74>)
    632c:	4798      	blx	r3
	if (MiApp_ProtocolInit(&defaultParamsRomOrRam, &defaultParamsRamOnly) == RECONNECTION_IN_PROGRESS)
    632e:	491b      	ldr	r1, [pc, #108]	; (639c <wsndemo_init+0x78>)
    6330:	481b      	ldr	r0, [pc, #108]	; (63a0 <wsndemo_init+0x7c>)
    6332:	4b1c      	ldr	r3, [pc, #112]	; (63a4 <wsndemo_init+0x80>)
    6334:	4798      	blx	r3
    6336:	280e      	cmp	r0, #14
    6338:	d027      	beq.n	638a <wsndemo_init+0x66>
	memset((uint8_t *)&invalidIEEEAddr, 0x00, LONG_ADDR_LEN);
    633a:	2200      	movs	r2, #0
    633c:	2300      	movs	r3, #0
    633e:	9200      	str	r2, [sp, #0]
    6340:	9301      	str	r3, [sp, #4]
	if (0 == memcmp((uint8_t *)&invalidIEEEAddr, (uint8_t *)&myLongAddress, LONG_ADDR_LEN))
    6342:	4e19      	ldr	r6, [pc, #100]	; (63a8 <wsndemo_init+0x84>)
    6344:	3208      	adds	r2, #8
    6346:	0031      	movs	r1, r6
    6348:	4668      	mov	r0, sp
    634a:	4d18      	ldr	r5, [pc, #96]	; (63ac <wsndemo_init+0x88>)
    634c:	47a8      	blx	r5
    634e:	0004      	movs	r4, r0
	memset((uint8_t *)&invalidIEEEAddr, 0xFF, LONG_ADDR_LEN);
    6350:	2201      	movs	r2, #1
    6352:	4252      	negs	r2, r2
    6354:	17d3      	asrs	r3, r2, #31
    6356:	9200      	str	r2, [sp, #0]
    6358:	9301      	str	r3, [sp, #4]
	if (0 == memcmp((uint8_t *)&invalidIEEEAddr, (uint8_t *)&myLongAddress, LONG_ADDR_LEN))
    635a:	3209      	adds	r2, #9
    635c:	0031      	movs	r1, r6
    635e:	4668      	mov	r0, sp
    6360:	47a8      	blx	r5
    6362:	2800      	cmp	r0, #0
    6364:	d001      	beq.n	636a <wsndemo_init+0x46>
	if (invalidIEEEAddrFlag)
    6366:	2c00      	cmp	r4, #0
    6368:	d108      	bne.n	637c <wsndemo_init+0x58>
    636a:	4c0f      	ldr	r4, [pc, #60]	; (63a8 <wsndemo_init+0x84>)
    636c:	0026      	movs	r6, r4
    636e:	3608      	adds	r6, #8
			*peui64++ = (uint8_t)rand();
    6370:	4d0f      	ldr	r5, [pc, #60]	; (63b0 <wsndemo_init+0x8c>)
    6372:	47a8      	blx	r5
    6374:	7020      	strb	r0, [r4, #0]
    6376:	3401      	adds	r4, #1
		for(i = 0; i<MY_ADDRESS_LENGTH; i++)
    6378:	42b4      	cmp	r4, r6
    637a:	d1fa      	bne.n	6372 <wsndemo_init+0x4e>
	PHY_SetIEEEAddr((uint8_t *)&myLongAddress);
    637c:	480a      	ldr	r0, [pc, #40]	; (63a8 <wsndemo_init+0x84>)
    637e:	4b0d      	ldr	r3, [pc, #52]	; (63b4 <wsndemo_init+0x90>)
    6380:	4798      	blx	r3
	sio2host_init();
    6382:	4b0d      	ldr	r3, [pc, #52]	; (63b8 <wsndemo_init+0x94>)
    6384:	4798      	blx	r3
}
    6386:	b002      	add	sp, #8
    6388:	bd70      	pop	{r4, r5, r6, pc}
		appState = APP_STATE_WAIT_FOR_RECONNECT_CALLBACK;
    638a:	2205      	movs	r2, #5
    638c:	4b0b      	ldr	r3, [pc, #44]	; (63bc <wsndemo_init+0x98>)
    638e:	701a      	strb	r2, [r3, #0]
    6390:	e7d3      	b.n	633a <wsndemo_init+0x16>
    6392:	46c0      	nop			; (mov r8, r8)
    6394:	00006211 	.word	0x00006211
    6398:	000119c1 	.word	0x000119c1
    639c:	2000000c 	.word	0x2000000c
    63a0:	20000030 	.word	0x20000030
    63a4:	0000d795 	.word	0x0000d795
    63a8:	20000094 	.word	0x20000094
    63ac:	00014d19 	.word	0x00014d19
    63b0:	00015381 	.word	0x00015381
    63b4:	0000b6c9 	.word	0x0000b6c9
    63b8:	00008da1 	.word	0x00008da1
    63bc:	2000012f 	.word	0x2000012f

000063c0 <wsndemo_task>:
{
    63c0:	b570      	push	{r4, r5, r6, lr}
    63c2:	b086      	sub	sp, #24
	MeshTasks();
    63c4:	4b32      	ldr	r3, [pc, #200]	; (6490 <wsndemo_task+0xd0>)
    63c6:	4798      	blx	r3
    PDS_TaskHandler();
    63c8:	4b32      	ldr	r3, [pc, #200]	; (6494 <wsndemo_task+0xd4>)
    63ca:	4798      	blx	r3
	switch (appState) {
    63cc:	4b32      	ldr	r3, [pc, #200]	; (6498 <wsndemo_task+0xd8>)
    63ce:	781a      	ldrb	r2, [r3, #0]
    63d0:	2a0a      	cmp	r2, #10
    63d2:	d825      	bhi.n	6420 <wsndemo_task+0x60>
    63d4:	0093      	lsls	r3, r2, #2
    63d6:	4a31      	ldr	r2, [pc, #196]	; (649c <wsndemo_task+0xdc>)
    63d8:	58d3      	ldr	r3, [r2, r3]
    63da:	469f      	mov	pc, r3
	appDataSendingTimer.interval = APP_SENDING_INTERVAL;
    63dc:	4b30      	ldr	r3, [pc, #192]	; (64a0 <wsndemo_task+0xe0>)
    63de:	4a31      	ldr	r2, [pc, #196]	; (64a4 <wsndemo_task+0xe4>)
    63e0:	609a      	str	r2, [r3, #8]
	appDataSendingTimer.mode = SYS_TIMER_INTERVAL_MODE;
    63e2:	2200      	movs	r2, #0
    63e4:	731a      	strb	r2, [r3, #12]
	appDataSendingTimer.handler = appDataSendingTimerHandler;
    63e6:	4a30      	ldr	r2, [pc, #192]	; (64a8 <wsndemo_task+0xe8>)
    63e8:	611a      	str	r2, [r3, #16]
	MiApp_SubscribeDataIndicationCallback(appDataInd);
    63ea:	4830      	ldr	r0, [pc, #192]	; (64ac <wsndemo_task+0xec>)
    63ec:	4b30      	ldr	r3, [pc, #192]	; (64b0 <wsndemo_task+0xf0>)
    63ee:	4798      	blx	r3
	MiApp_SubscribeLinkFailureCallback(appLinkFailureCallback);
    63f0:	4830      	ldr	r0, [pc, #192]	; (64b4 <wsndemo_task+0xf4>)
    63f2:	4b31      	ldr	r3, [pc, #196]	; (64b8 <wsndemo_task+0xf8>)
    63f4:	4798      	blx	r3
	if (appState == APP_STATE_RECONNECT_SUCCESS)
    63f6:	4b28      	ldr	r3, [pc, #160]	; (6498 <wsndemo_task+0xd8>)
    63f8:	781b      	ldrb	r3, [r3, #0]
    63fa:	2b06      	cmp	r3, #6
    63fc:	d003      	beq.n	6406 <wsndemo_task+0x46>
		appState = APP_STATE_CONNECT_NETWORK;
    63fe:	2202      	movs	r2, #2
    6400:	4b25      	ldr	r3, [pc, #148]	; (6498 <wsndemo_task+0xd8>)
    6402:	701a      	strb	r2, [r3, #0]
    6404:	e00c      	b.n	6420 <wsndemo_task+0x60>
		appState = APP_STATE_SEND;
    6406:	2208      	movs	r2, #8
    6408:	4b23      	ldr	r3, [pc, #140]	; (6498 <wsndemo_task+0xd8>)
    640a:	701a      	strb	r2, [r3, #0]
    640c:	e008      	b.n	6420 <wsndemo_task+0x60>
			MiApp_SearchConnection(5, CHANNEL_MAP, searchConfim);
    640e:	4a2b      	ldr	r2, [pc, #172]	; (64bc <wsndemo_task+0xfc>)
    6410:	2180      	movs	r1, #128	; 0x80
    6412:	0489      	lsls	r1, r1, #18
    6414:	2005      	movs	r0, #5
    6416:	4b2a      	ldr	r3, [pc, #168]	; (64c0 <wsndemo_task+0x100>)
    6418:	4798      	blx	r3
			appState = APP_STATE_CONNECTING_NETWORK;
    641a:	2203      	movs	r2, #3
    641c:	4b1e      	ldr	r3, [pc, #120]	; (6498 <wsndemo_task+0xd8>)
    641e:	701a      	strb	r2, [r3, #0]
}
    6420:	b006      	add	sp, #24
    6422:	bd70      	pop	{r4, r5, r6, pc}
	uint16_t dstAddr = 0; /* PAN Coordinator Address */
    6424:	2616      	movs	r6, #22
    6426:	446e      	add	r6, sp
    6428:	2300      	movs	r3, #0
    642a:	8033      	strh	r3, [r6, #0]
	appMsg.hum = 0x01;
    642c:	4c25      	ldr	r4, [pc, #148]	; (64c4 <wsndemo_task+0x104>)
    642e:	2501      	movs	r5, #1
    6430:	7265      	strb	r5, [r4, #9]
	return (port_base->OUT.reg & pin_mask);
    6432:	4b25      	ldr	r3, [pc, #148]	; (64c8 <wsndemo_task+0x108>)
    6434:	691b      	ldr	r3, [r3, #16]
    6436:	031b      	lsls	r3, r3, #12
    6438:	0fdb      	lsrs	r3, r3, #31
	appMsg.light = port_pin_get_output_level(LED0);
    643a:	71e3      	strb	r3, [r4, #7]
	appMsg.temp = 22;
    643c:	2316      	movs	r3, #22
    643e:	7223      	strb	r3, [r4, #8]
	appMsg.packet_type = PACKET_DATA;
    6440:	71a5      	strb	r5, [r4, #6]
	MiApp_Get(SHORT_ADDRESS, &appMsg.short_addr);
    6442:	1ca1      	adds	r1, r4, #2
    6444:	2002      	movs	r0, #2
    6446:	4b21      	ldr	r3, [pc, #132]	; (64cc <wsndemo_task+0x10c>)
    6448:	4798      	blx	r3
	appMsg.unique_id = UNIQUE_ID;
    644a:	8025      	strh	r5, [r4, #0]
	if (MiApp_SendData(2, (uint8_t *)&dstAddr, sizeof(appMsg), (uint8_t *)&appMsg, wsnmsghandle, true, appDataConf))
    644c:	4b20      	ldr	r3, [pc, #128]	; (64d0 <wsndemo_task+0x110>)
    644e:	9302      	str	r3, [sp, #8]
    6450:	9501      	str	r5, [sp, #4]
    6452:	4b20      	ldr	r3, [pc, #128]	; (64d4 <wsndemo_task+0x114>)
    6454:	781b      	ldrb	r3, [r3, #0]
    6456:	9300      	str	r3, [sp, #0]
    6458:	0023      	movs	r3, r4
    645a:	220b      	movs	r2, #11
    645c:	0031      	movs	r1, r6
    645e:	2002      	movs	r0, #2
    6460:	4c1d      	ldr	r4, [pc, #116]	; (64d8 <wsndemo_task+0x118>)
    6462:	47a0      	blx	r4
    6464:	2800      	cmp	r0, #0
    6466:	d103      	bne.n	6470 <wsndemo_task+0xb0>
		appState = APP_STATE_SENDING_DONE;
    6468:	220a      	movs	r2, #10
    646a:	4b0b      	ldr	r3, [pc, #44]	; (6498 <wsndemo_task+0xd8>)
    646c:	701a      	strb	r2, [r3, #0]
    646e:	e7d7      	b.n	6420 <wsndemo_task+0x60>
		++wsnmsghandle;
    6470:	4a18      	ldr	r2, [pc, #96]	; (64d4 <wsndemo_task+0x114>)
    6472:	7813      	ldrb	r3, [r2, #0]
    6474:	3301      	adds	r3, #1
    6476:	7013      	strb	r3, [r2, #0]
		appState = APP_STATE_WAIT_CONF;
    6478:	2209      	movs	r2, #9
    647a:	4b07      	ldr	r3, [pc, #28]	; (6498 <wsndemo_task+0xd8>)
    647c:	701a      	strb	r2, [r3, #0]
    647e:	e7cf      	b.n	6420 <wsndemo_task+0x60>
			SYS_TimerStart(&appDataSendingTimer);
    6480:	4807      	ldr	r0, [pc, #28]	; (64a0 <wsndemo_task+0xe0>)
    6482:	4b16      	ldr	r3, [pc, #88]	; (64dc <wsndemo_task+0x11c>)
    6484:	4798      	blx	r3
			appState = APP_STATE_WAIT_SEND_TIMER;
    6486:	220b      	movs	r2, #11
    6488:	4b03      	ldr	r3, [pc, #12]	; (6498 <wsndemo_task+0xd8>)
    648a:	701a      	strb	r2, [r3, #0]
}
    648c:	e7c8      	b.n	6420 <wsndemo_task+0x60>
    648e:	46c0      	nop			; (mov r8, r8)
    6490:	0000da69 	.word	0x0000da69
    6494:	0000a8ad 	.word	0x0000a8ad
    6498:	2000012f 	.word	0x2000012f
    649c:	00015eb4 	.word	0x00015eb4
    64a0:	20001d28 	.word	0x20001d28
    64a4:	00002710 	.word	0x00002710
    64a8:	000062a9 	.word	0x000062a9
    64ac:	000062d5 	.word	0x000062d5
    64b0:	0000f06d 	.word	0x0000f06d
    64b4:	00006309 	.word	0x00006309
    64b8:	000119ad 	.word	0x000119ad
    64bc:	00006241 	.word	0x00006241
    64c0:	00010b75 	.word	0x00010b75
    64c4:	20000124 	.word	0x20000124
    64c8:	41004400 	.word	0x41004400
    64cc:	0000db49 	.word	0x0000db49
    64d0:	000061f9 	.word	0x000061f9
    64d4:	20000130 	.word	0x20000130
    64d8:	0000dc15 	.word	0x0000dc15
    64dc:	0000c01d 	.word	0x0000c01d

000064e0 <delay_init>:
 *
 * This must be called during start up to initialize the delay routine with
 * the current used main clock. It must run any time the main CPU clock is changed.
 */
void delay_init(void)
{
    64e0:	b570      	push	{r4, r5, r6, lr}
	cycles_per_ms = system_gclk_gen_get_hz(0);
    64e2:	2000      	movs	r0, #0
    64e4:	4b08      	ldr	r3, [pc, #32]	; (6508 <delay_init+0x28>)
    64e6:	4798      	blx	r3
    64e8:	0005      	movs	r5, r0
	cycles_per_ms /= 1000;
    64ea:	4c08      	ldr	r4, [pc, #32]	; (650c <delay_init+0x2c>)
    64ec:	21fa      	movs	r1, #250	; 0xfa
    64ee:	0089      	lsls	r1, r1, #2
    64f0:	47a0      	blx	r4
    64f2:	4b07      	ldr	r3, [pc, #28]	; (6510 <delay_init+0x30>)
    64f4:	6018      	str	r0, [r3, #0]
	cycles_per_us = cycles_per_ms / 1000;
    64f6:	4907      	ldr	r1, [pc, #28]	; (6514 <delay_init+0x34>)
    64f8:	0028      	movs	r0, r5
    64fa:	47a0      	blx	r4
    64fc:	4b06      	ldr	r3, [pc, #24]	; (6518 <delay_init+0x38>)
    64fe:	6018      	str	r0, [r3, #0]

	SysTick->CTRL = SysTick_CTRL_CLKSOURCE_Msk | SysTick_CTRL_ENABLE_Msk;
    6500:	2205      	movs	r2, #5
    6502:	4b06      	ldr	r3, [pc, #24]	; (651c <delay_init+0x3c>)
    6504:	601a      	str	r2, [r3, #0]
}
    6506:	bd70      	pop	{r4, r5, r6, pc}
    6508:	00008511 	.word	0x00008511
    650c:	000124c1 	.word	0x000124c1
    6510:	20000000 	.word	0x20000000
    6514:	000f4240 	.word	0x000f4240
    6518:	20000004 	.word	0x20000004
    651c:	e000e010 	.word	0xe000e010

00006520 <delay_cycles_us>:
 *
 * \param n  Number of microseconds to wait
 */
void delay_cycles_us(
		uint32_t n)
{
    6520:	b530      	push	{r4, r5, lr}
	while (n--) {
		/* Devide up to blocks of 10u */
		delay_cycles(cycles_per_us);
    6522:	4b08      	ldr	r3, [pc, #32]	; (6544 <delay_cycles_us+0x24>)
    6524:	681c      	ldr	r4, [r3, #0]
 */
static inline void delay_cycles(
		const uint32_t n)
{
	if (n > 0) {
		SysTick->LOAD = n;
    6526:	4a08      	ldr	r2, [pc, #32]	; (6548 <delay_cycles_us+0x28>)
		SysTick->VAL = 0;
    6528:	2500      	movs	r5, #0

		while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)) {
    652a:	2180      	movs	r1, #128	; 0x80
    652c:	0249      	lsls	r1, r1, #9
	while (n--) {
    652e:	3801      	subs	r0, #1
    6530:	d307      	bcc.n	6542 <delay_cycles_us+0x22>
	if (n > 0) {
    6532:	2c00      	cmp	r4, #0
    6534:	d0fb      	beq.n	652e <delay_cycles_us+0xe>
		SysTick->LOAD = n;
    6536:	6054      	str	r4, [r2, #4]
		SysTick->VAL = 0;
    6538:	6095      	str	r5, [r2, #8]
		while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)) {
    653a:	6813      	ldr	r3, [r2, #0]
    653c:	420b      	tst	r3, r1
    653e:	d0fc      	beq.n	653a <delay_cycles_us+0x1a>
    6540:	e7f5      	b.n	652e <delay_cycles_us+0xe>
	}
}
    6542:	bd30      	pop	{r4, r5, pc}
    6544:	20000004 	.word	0x20000004
    6548:	e000e010 	.word	0xe000e010

0000654c <cpu_irq_enter_critical>:
volatile bool g_interrupt_enabled = true;
#endif

void cpu_irq_enter_critical(void)
{
	if (cpu_irq_critical_section_counter == 0) {
    654c:	4b0c      	ldr	r3, [pc, #48]	; (6580 <cpu_irq_enter_critical+0x34>)
    654e:	681b      	ldr	r3, [r3, #0]
    6550:	2b00      	cmp	r3, #0
    6552:	d106      	bne.n	6562 <cpu_irq_enter_critical+0x16>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
    6554:	f3ef 8310 	mrs	r3, PRIMASK
		if (cpu_irq_is_enabled()) {
    6558:	2b00      	cmp	r3, #0
    655a:	d007      	beq.n	656c <cpu_irq_enter_critical+0x20>
			cpu_irq_disable();
			cpu_irq_prev_interrupt_state = true;
		} else {
			/* Make sure the to save the prev state as false */
			cpu_irq_prev_interrupt_state = false;
    655c:	2200      	movs	r2, #0
    655e:	4b09      	ldr	r3, [pc, #36]	; (6584 <cpu_irq_enter_critical+0x38>)
    6560:	701a      	strb	r2, [r3, #0]
		}

	}

	cpu_irq_critical_section_counter++;
    6562:	4a07      	ldr	r2, [pc, #28]	; (6580 <cpu_irq_enter_critical+0x34>)
    6564:	6813      	ldr	r3, [r2, #0]
    6566:	3301      	adds	r3, #1
    6568:	6013      	str	r3, [r2, #0]
}
    656a:	4770      	bx	lr
  __ASM volatile ("cpsid i" : : : "memory");
    656c:	b672      	cpsid	i
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
    656e:	f3bf 8f5f 	dmb	sy
			cpu_irq_disable();
    6572:	2200      	movs	r2, #0
    6574:	4b04      	ldr	r3, [pc, #16]	; (6588 <cpu_irq_enter_critical+0x3c>)
    6576:	701a      	strb	r2, [r3, #0]
			cpu_irq_prev_interrupt_state = true;
    6578:	3201      	adds	r2, #1
    657a:	4b02      	ldr	r3, [pc, #8]	; (6584 <cpu_irq_enter_critical+0x38>)
    657c:	701a      	strb	r2, [r3, #0]
    657e:	e7f0      	b.n	6562 <cpu_irq_enter_critical+0x16>
    6580:	20000134 	.word	0x20000134
    6584:	20000138 	.word	0x20000138
    6588:	20000008 	.word	0x20000008

0000658c <cpu_irq_leave_critical>:
void cpu_irq_leave_critical(void)
{
	/* Check if the user is trying to leave a critical section when not in a critical section */
	Assert(cpu_irq_critical_section_counter > 0);

	cpu_irq_critical_section_counter--;
    658c:	4b08      	ldr	r3, [pc, #32]	; (65b0 <cpu_irq_leave_critical+0x24>)
    658e:	681a      	ldr	r2, [r3, #0]
    6590:	3a01      	subs	r2, #1
    6592:	601a      	str	r2, [r3, #0]

	/* Only enable global interrupts when the counter reaches 0 and the state of the global interrupt flag
	   was enabled when entering critical state */
	if ((cpu_irq_critical_section_counter == 0) && (cpu_irq_prev_interrupt_state)) {
    6594:	681b      	ldr	r3, [r3, #0]
    6596:	2b00      	cmp	r3, #0
    6598:	d109      	bne.n	65ae <cpu_irq_leave_critical+0x22>
    659a:	4b06      	ldr	r3, [pc, #24]	; (65b4 <cpu_irq_leave_critical+0x28>)
    659c:	781b      	ldrb	r3, [r3, #0]
    659e:	2b00      	cmp	r3, #0
    65a0:	d005      	beq.n	65ae <cpu_irq_leave_critical+0x22>
		cpu_irq_enable();
    65a2:	2201      	movs	r2, #1
    65a4:	4b04      	ldr	r3, [pc, #16]	; (65b8 <cpu_irq_leave_critical+0x2c>)
    65a6:	701a      	strb	r2, [r3, #0]
    65a8:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
    65ac:	b662      	cpsie	i
	}
}
    65ae:	4770      	bx	lr
    65b0:	20000134 	.word	0x20000134
    65b4:	20000138 	.word	0x20000138
    65b8:	20000008 	.word	0x20000008

000065bc <system_board_init>:




void system_board_init(void)
{
    65bc:	b5f0      	push	{r4, r5, r6, r7, lr}
    65be:	46c6      	mov	lr, r8
    65c0:	b500      	push	{lr}
    65c2:	b082      	sub	sp, #8
	config->input_pull = PORT_PIN_PULL_UP;
    65c4:	ac01      	add	r4, sp, #4
    65c6:	2601      	movs	r6, #1
    65c8:	7066      	strb	r6, [r4, #1]
	config->powersave  = false;
    65ca:	2700      	movs	r7, #0
    65cc:	70a7      	strb	r7, [r4, #2]
	struct port_config pin_conf;
	port_get_config_defaults(&pin_conf);

	/* Configure LEDs as outputs, turn them off */
	pin_conf.direction  = PORT_PIN_DIR_OUTPUT;
    65ce:	7026      	strb	r6, [r4, #0]
	port_pin_set_config(LED_0_PIN, &pin_conf);
    65d0:	0021      	movs	r1, r4
    65d2:	2013      	movs	r0, #19
    65d4:	4d27      	ldr	r5, [pc, #156]	; (6674 <system_board_init+0xb8>)
    65d6:	47a8      	blx	r5
		port_base->OUTSET.reg = pin_mask;
    65d8:	4b27      	ldr	r3, [pc, #156]	; (6678 <system_board_init+0xbc>)
    65da:	4698      	mov	r8, r3
    65dc:	2380      	movs	r3, #128	; 0x80
    65de:	031b      	lsls	r3, r3, #12
    65e0:	4642      	mov	r2, r8
    65e2:	6193      	str	r3, [r2, #24]
	port_pin_set_output_level(LED_0_PIN, LED_0_INACTIVE);

	/* Set buttons as inputs */
	pin_conf.direction  = PORT_PIN_DIR_INPUT;
    65e4:	7027      	strb	r7, [r4, #0]
	pin_conf.input_pull = PORT_PIN_PULL_UP;
    65e6:	7066      	strb	r6, [r4, #1]
	port_pin_set_config(BUTTON_0_PIN, &pin_conf);
    65e8:	0021      	movs	r1, r4
    65ea:	201c      	movs	r0, #28
    65ec:	47a8      	blx	r5
	config->input_pull = PORT_PIN_PULL_UP;
    65ee:	7066      	strb	r6, [r4, #1]
	config->powersave  = false;
    65f0:	70a7      	strb	r7, [r4, #2]
	
#ifdef CONF_BOARD_AT86RFX	

	port_get_config_defaults(&pin_conf);
	pin_conf.direction  = PORT_PIN_DIR_OUTPUT;
    65f2:	7026      	strb	r6, [r4, #0]
	port_pin_set_config(AT86RFX_SPI_SCK, &pin_conf);
    65f4:	0021      	movs	r1, r4
    65f6:	2052      	movs	r0, #82	; 0x52
    65f8:	47a8      	blx	r5
	port_pin_set_config(AT86RFX_SPI_MOSI, &pin_conf);
    65fa:	0021      	movs	r1, r4
    65fc:	203e      	movs	r0, #62	; 0x3e
    65fe:	47a8      	blx	r5
	port_pin_set_config(AT86RFX_SPI_CS, &pin_conf);
    6600:	0021      	movs	r1, r4
    6602:	203f      	movs	r0, #63	; 0x3f
    6604:	47a8      	blx	r5
	port_pin_set_config(AT86RFX_RST_PIN, &pin_conf);
    6606:	0021      	movs	r1, r4
    6608:	202f      	movs	r0, #47	; 0x2f
    660a:	47a8      	blx	r5
	port_pin_set_config(AT86RFX_SLP_PIN, &pin_conf);
    660c:	0021      	movs	r1, r4
    660e:	2014      	movs	r0, #20
    6610:	47a8      	blx	r5
		port_base->OUTSET.reg = pin_mask;
    6612:	2280      	movs	r2, #128	; 0x80
    6614:	02d2      	lsls	r2, r2, #11
    6616:	4b19      	ldr	r3, [pc, #100]	; (667c <system_board_init+0xc0>)
    6618:	619a      	str	r2, [r3, #24]
    661a:	4b19      	ldr	r3, [pc, #100]	; (6680 <system_board_init+0xc4>)
    661c:	2280      	movs	r2, #128	; 0x80
    661e:	05d2      	lsls	r2, r2, #23
    6620:	619a      	str	r2, [r3, #24]
    6622:	2280      	movs	r2, #128	; 0x80
    6624:	0612      	lsls	r2, r2, #24
    6626:	619a      	str	r2, [r3, #24]
    6628:	2280      	movs	r2, #128	; 0x80
    662a:	0212      	lsls	r2, r2, #8
    662c:	619a      	str	r2, [r3, #24]
    662e:	2380      	movs	r3, #128	; 0x80
    6630:	035b      	lsls	r3, r3, #13
    6632:	4642      	mov	r2, r8
    6634:	6193      	str	r3, [r2, #24]
	port_pin_set_output_level(AT86RFX_SPI_MOSI, true);
	port_pin_set_output_level(AT86RFX_SPI_CS, true);
	port_pin_set_output_level(AT86RFX_RST_PIN, true);
	port_pin_set_output_level(AT86RFX_SLP_PIN, true);

	pin_conf.direction  = PORT_PIN_DIR_INPUT;
    6636:	7027      	strb	r7, [r4, #0]
	port_pin_set_config(AT86RFX_SPI_MISO, &pin_conf);
    6638:	0021      	movs	r1, r4
    663a:	2053      	movs	r0, #83	; 0x53
    663c:	47a8      	blx	r5
	
	/* SAMR21 Antenna Diversity Configuration */

	PM->APBCMASK.reg |= (1<<PM_APBCMASK_RFCTRL_Pos);
    663e:	4a11      	ldr	r2, [pc, #68]	; (6684 <system_board_init+0xc8>)
    6640:	6a11      	ldr	r1, [r2, #32]
    6642:	2380      	movs	r3, #128	; 0x80
    6644:	039b      	lsls	r3, r3, #14
    6646:	430b      	orrs	r3, r1
    6648:	6213      	str	r3, [r2, #32]
		
	/*Pins  PA12/RFCTRL2 and PA09/RFCTRL1 are used as DIG1 and DIG2 pins respectively in SAMR21 Xplained Pro*/	
	
	/* FECTRL register is Written with value 4 => F2CFG = 00 and F1CFG = 01 */	
	REG_RFCTRL_FECFG = RFCTRL_CFG_ANT_DIV;
    664a:	2204      	movs	r2, #4
    664c:	4b0e      	ldr	r3, [pc, #56]	; (6688 <system_board_init+0xcc>)
    664e:	801a      	strh	r2, [r3, #0]
	Assert(config);

	/* Default configuration values */
	config->mux_position = SYSTEM_PINMUX_GPIO;
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
    6650:	466b      	mov	r3, sp
    6652:	709e      	strb	r6, [r3, #2]
	config->powersave    = false;
    6654:	70df      	strb	r7, [r3, #3]
	struct system_pinmux_config config_pinmux;
	system_pinmux_get_config_defaults(&config_pinmux);
	
	/*MUX Position is 'F' i.e 5 for FECTRL Function and is same for all  FECTRL supported pins
	 * as provided in the data sheet */
	config_pinmux.mux_position = MUX_PA09F_RFCTRL_FECTRL1 ;
    6656:	2305      	movs	r3, #5
    6658:	466a      	mov	r2, sp
    665a:	7013      	strb	r3, [r2, #0]
	
	config_pinmux.direction    = SYSTEM_PINMUX_PIN_DIR_OUTPUT;	
    665c:	7056      	strb	r6, [r2, #1]
	system_pinmux_pin_set_config(PIN_RFCTRL1, &config_pinmux);
    665e:	4669      	mov	r1, sp
    6660:	2009      	movs	r0, #9
    6662:	4c0a      	ldr	r4, [pc, #40]	; (668c <system_board_init+0xd0>)
    6664:	47a0      	blx	r4
	system_pinmux_pin_set_config(PIN_RFCTRL2, &config_pinmux);
    6666:	4669      	mov	r1, sp
    6668:	200c      	movs	r0, #12
    666a:	47a0      	blx	r4
#endif

}
    666c:	b002      	add	sp, #8
    666e:	bc04      	pop	{r2}
    6670:	4690      	mov	r8, r2
    6672:	bdf0      	pop	{r4, r5, r6, r7, pc}
    6674:	00006a8d 	.word	0x00006a8d
    6678:	41004400 	.word	0x41004400
    667c:	41004500 	.word	0x41004500
    6680:	41004480 	.word	0x41004480
    6684:	40000400 	.word	0x40000400
    6688:	42005400 	.word	0x42005400
    668c:	00008721 	.word	0x00008721

00006690 <extint_register_callback>:
	/* Sanity check arguments */
	Assert(callback);

	if (type != EXTINT_CALLBACK_TYPE_DETECT) {
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
    6690:	2317      	movs	r3, #23
	if (type != EXTINT_CALLBACK_TYPE_DETECT) {
    6692:	2a00      	cmp	r2, #0
    6694:	d001      	beq.n	669a <extint_register_callback+0xa>
	} else if (_extint_dev.callbacks[channel] == callback) {
		return STATUS_OK;
	}

	return STATUS_ERR_ALREADY_INITIALIZED;
}
    6696:	0018      	movs	r0, r3
    6698:	4770      	bx	lr
	if (_extint_dev.callbacks[channel] == NULL) {
    669a:	008b      	lsls	r3, r1, #2
    669c:	4a06      	ldr	r2, [pc, #24]	; (66b8 <extint_register_callback+0x28>)
    669e:	589b      	ldr	r3, [r3, r2]
    66a0:	2b00      	cmp	r3, #0
    66a2:	d003      	beq.n	66ac <extint_register_callback+0x1c>
	} else if (_extint_dev.callbacks[channel] == callback) {
    66a4:	4283      	cmp	r3, r0
    66a6:	d005      	beq.n	66b4 <extint_register_callback+0x24>
	return STATUS_ERR_ALREADY_INITIALIZED;
    66a8:	231d      	movs	r3, #29
    66aa:	e7f4      	b.n	6696 <extint_register_callback+0x6>
		_extint_dev.callbacks[channel] = callback;
    66ac:	0089      	lsls	r1, r1, #2
    66ae:	5088      	str	r0, [r1, r2]
		return STATUS_OK;
    66b0:	2300      	movs	r3, #0
    66b2:	e7f0      	b.n	6696 <extint_register_callback+0x6>
		return STATUS_OK;
    66b4:	2300      	movs	r3, #0
    66b6:	e7ee      	b.n	6696 <extint_register_callback+0x6>
    66b8:	20001d40 	.word	0x20001d40

000066bc <extint_chan_enable_callback>:

		eic->INTENSET.reg = (1UL << channel);
	}
	else {
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
    66bc:	2317      	movs	r3, #23
	if (type == EXTINT_CALLBACK_TYPE_DETECT) {
    66be:	2900      	cmp	r1, #0
    66c0:	d001      	beq.n	66c6 <extint_chan_enable_callback+0xa>
	}

	return STATUS_OK;
}
    66c2:	0018      	movs	r0, r3
    66c4:	4770      	bx	lr
		Eic *const eics[EIC_INST_NUM] = EIC_INSTS;

		return eics[eic_index];
	} else {
		Assert(false);
		return NULL;
    66c6:	2200      	movs	r2, #0
	if (eic_index < EIC_INST_NUM) {
    66c8:	281f      	cmp	r0, #31
    66ca:	d800      	bhi.n	66ce <extint_chan_enable_callback+0x12>
		return eics[eic_index];
    66cc:	4a02      	ldr	r2, [pc, #8]	; (66d8 <extint_chan_enable_callback+0x1c>)
		eic->INTENSET.reg = (1UL << channel);
    66ce:	2301      	movs	r3, #1
    66d0:	4083      	lsls	r3, r0
    66d2:	60d3      	str	r3, [r2, #12]
	return STATUS_OK;
    66d4:	2300      	movs	r3, #0
    66d6:	e7f4      	b.n	66c2 <extint_chan_enable_callback+0x6>
    66d8:	40001800 	.word	0x40001800

000066dc <extint_chan_disable_callback>:

		eic->INTENCLR.reg = (1UL << channel);
	}
	else {
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
    66dc:	2317      	movs	r3, #23
	if (type == EXTINT_CALLBACK_TYPE_DETECT) {
    66de:	2900      	cmp	r1, #0
    66e0:	d001      	beq.n	66e6 <extint_chan_disable_callback+0xa>
	}

	return STATUS_OK;
}
    66e2:	0018      	movs	r0, r3
    66e4:	4770      	bx	lr
		return NULL;
    66e6:	2200      	movs	r2, #0
	if (eic_index < EIC_INST_NUM) {
    66e8:	281f      	cmp	r0, #31
    66ea:	d800      	bhi.n	66ee <extint_chan_disable_callback+0x12>
		return eics[eic_index];
    66ec:	4a02      	ldr	r2, [pc, #8]	; (66f8 <extint_chan_disable_callback+0x1c>)
		eic->INTENCLR.reg = (1UL << channel);
    66ee:	2301      	movs	r3, #1
    66f0:	4083      	lsls	r3, r0
    66f2:	6093      	str	r3, [r2, #8]
	return STATUS_OK;
    66f4:	2300      	movs	r3, #0
    66f6:	e7f4      	b.n	66e2 <extint_chan_disable_callback+0x6>
    66f8:	40001800 	.word	0x40001800

000066fc <EIC_Handler>:
	return _current_channel;
}

/** Handler for the EXTINT hardware module interrupt. */
void EIC_Handler(void)
{
    66fc:	b570      	push	{r4, r5, r6, lr}
	/* Find any triggered channels, run associated callback handlers */
	for (_current_channel = 0; _current_channel < EIC_NUMBER_OF_INTERRUPTS ; _current_channel++) {
    66fe:	2200      	movs	r2, #0
    6700:	4b10      	ldr	r3, [pc, #64]	; (6744 <EIC_Handler+0x48>)
    6702:	701a      	strb	r2, [r3, #0]
    6704:	2300      	movs	r3, #0
    6706:	4910      	ldr	r1, [pc, #64]	; (6748 <EIC_Handler+0x4c>)
 */
static inline bool extint_chan_is_detected(
		const uint8_t channel)
{
	Eic *const eic_module = _extint_get_eic_from_channel(channel);
	uint32_t eic_mask   = (1UL << (channel % 32));
    6708:	251f      	movs	r5, #31
		if (extint_chan_is_detected(_current_channel)) {
			/* Clear flag */
			extint_chan_clear_detected(_current_channel);
			/* Find any associated callback entries in the callback table */
			if (_extint_dev.callbacks[_current_channel] != NULL) {
    670a:	4e10      	ldr	r6, [pc, #64]	; (674c <EIC_Handler+0x50>)
	for (_current_channel = 0; _current_channel < EIC_NUMBER_OF_INTERRUPTS ; _current_channel++) {
    670c:	4c0d      	ldr	r4, [pc, #52]	; (6744 <EIC_Handler+0x48>)
    670e:	e00a      	b.n	6726 <EIC_Handler+0x2a>
		return eics[eic_index];
    6710:	490d      	ldr	r1, [pc, #52]	; (6748 <EIC_Handler+0x4c>)
    6712:	e008      	b.n	6726 <EIC_Handler+0x2a>
    6714:	7823      	ldrb	r3, [r4, #0]
    6716:	3301      	adds	r3, #1
    6718:	b2db      	uxtb	r3, r3
    671a:	7023      	strb	r3, [r4, #0]
    671c:	2b0f      	cmp	r3, #15
    671e:	d810      	bhi.n	6742 <EIC_Handler+0x46>
		return NULL;
    6720:	2100      	movs	r1, #0
	if (eic_index < EIC_INST_NUM) {
    6722:	2b1f      	cmp	r3, #31
    6724:	d9f4      	bls.n	6710 <EIC_Handler+0x14>
	uint32_t eic_mask   = (1UL << (channel % 32));
    6726:	0028      	movs	r0, r5
    6728:	4018      	ands	r0, r3
    672a:	2201      	movs	r2, #1
    672c:	4082      	lsls	r2, r0

	return (eic_module->INTFLAG.reg & eic_mask);
    672e:	6908      	ldr	r0, [r1, #16]
		if (extint_chan_is_detected(_current_channel)) {
    6730:	4210      	tst	r0, r2
    6732:	d0ef      	beq.n	6714 <EIC_Handler+0x18>
		const uint8_t channel)
{
	Eic *const eic_module = _extint_get_eic_from_channel(channel);
	uint32_t eic_mask   = (1UL << (channel % 32));

	eic_module->INTFLAG.reg = eic_mask;
    6734:	610a      	str	r2, [r1, #16]
			if (_extint_dev.callbacks[_current_channel] != NULL) {
    6736:	009b      	lsls	r3, r3, #2
    6738:	599b      	ldr	r3, [r3, r6]
    673a:	2b00      	cmp	r3, #0
    673c:	d0ea      	beq.n	6714 <EIC_Handler+0x18>
				/* Run the registered callback */
				_extint_dev.callbacks[_current_channel]();
    673e:	4798      	blx	r3
    6740:	e7e8      	b.n	6714 <EIC_Handler+0x18>
			}
		}
	}
}
    6742:	bd70      	pop	{r4, r5, r6, pc}
    6744:	20001d3c 	.word	0x20001d3c
    6748:	40001800 	.word	0x40001800
    674c:	20001d40 	.word	0x20001d40

00006750 <_extint_enable>:
{
	Eic *const eics[EIC_INST_NUM] = EIC_INSTS;

	/* Enable all EIC hardware modules. */
	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
		eics[i]->CTRL.reg |= EIC_CTRL_ENABLE;
    6750:	4a04      	ldr	r2, [pc, #16]	; (6764 <_extint_enable+0x14>)
    6752:	7813      	ldrb	r3, [r2, #0]
    6754:	2102      	movs	r1, #2
    6756:	430b      	orrs	r3, r1
    6758:	7013      	strb	r3, [r2, #0]
		if (eics[i]->STATUS.reg & EIC_STATUS_SYNCBUSY) {
    675a:	7853      	ldrb	r3, [r2, #1]
    675c:	b25b      	sxtb	r3, r3
    675e:	2b00      	cmp	r3, #0
    6760:	dbfb      	blt.n	675a <_extint_enable+0xa>
	}

	while (extint_is_syncing()) {
		/* Wait for all hardware modules to complete synchronization */
	}
}
    6762:	4770      	bx	lr
    6764:	40001800 	.word	0x40001800

00006768 <_system_extint_init>:
{
    6768:	b500      	push	{lr}
    676a:	b083      	sub	sp, #12
		const enum system_clock_apb_bus bus,
		const uint32_t mask)
{
	switch (bus) {
		case SYSTEM_CLOCK_APB_APBA:
			PM->APBAMASK.reg |= mask;
    676c:	4a12      	ldr	r2, [pc, #72]	; (67b8 <_system_extint_init+0x50>)
    676e:	6993      	ldr	r3, [r2, #24]
    6770:	2140      	movs	r1, #64	; 0x40
    6772:	430b      	orrs	r3, r1
    6774:	6193      	str	r3, [r2, #24]
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->source_generator = GCLK_GENERATOR_0;
    6776:	a901      	add	r1, sp, #4
    6778:	2300      	movs	r3, #0
    677a:	700b      	strb	r3, [r1, #0]
	system_gclk_chan_set_config(EIC_GCLK_ID, &gclk_chan_conf);
    677c:	2005      	movs	r0, #5
    677e:	4b0f      	ldr	r3, [pc, #60]	; (67bc <_system_extint_init+0x54>)
    6780:	4798      	blx	r3
	system_gclk_chan_enable(EIC_GCLK_ID);
    6782:	2005      	movs	r0, #5
    6784:	4b0e      	ldr	r3, [pc, #56]	; (67c0 <_system_extint_init+0x58>)
    6786:	4798      	blx	r3
		eics[i]->CTRL.reg |= EIC_CTRL_SWRST;
    6788:	4a0e      	ldr	r2, [pc, #56]	; (67c4 <_system_extint_init+0x5c>)
    678a:	7813      	ldrb	r3, [r2, #0]
    678c:	2101      	movs	r1, #1
    678e:	430b      	orrs	r3, r1
    6790:	7013      	strb	r3, [r2, #0]
		if (eics[i]->STATUS.reg & EIC_STATUS_SYNCBUSY) {
    6792:	7853      	ldrb	r3, [r2, #1]
    6794:	b25b      	sxtb	r3, r3
    6796:	2b00      	cmp	r3, #0
    6798:	dbfb      	blt.n	6792 <_system_extint_init+0x2a>
    679a:	4b0b      	ldr	r3, [pc, #44]	; (67c8 <_system_extint_init+0x60>)
    679c:	0019      	movs	r1, r3
    679e:	3140      	adds	r1, #64	; 0x40
		_extint_dev.callbacks[j] = NULL;
    67a0:	2200      	movs	r2, #0
    67a2:	c304      	stmia	r3!, {r2}
	for (uint8_t j = 0; j < EIC_NUMBER_OF_INTERRUPTS; j++) {
    67a4:	4299      	cmp	r1, r3
    67a6:	d1fc      	bne.n	67a2 <_system_extint_init+0x3a>
 * \param[in] vector Interrupt vector to enable
 */
static inline void system_interrupt_enable(
		const enum system_interrupt_vector vector)
{
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
    67a8:	2210      	movs	r2, #16
    67aa:	4b08      	ldr	r3, [pc, #32]	; (67cc <_system_extint_init+0x64>)
    67ac:	601a      	str	r2, [r3, #0]
	_extint_enable();
    67ae:	4b08      	ldr	r3, [pc, #32]	; (67d0 <_system_extint_init+0x68>)
    67b0:	4798      	blx	r3
}
    67b2:	b003      	add	sp, #12
    67b4:	bd00      	pop	{pc}
    67b6:	46c0      	nop			; (mov r8, r8)
    67b8:	40000400 	.word	0x40000400
    67bc:	00008629 	.word	0x00008629
    67c0:	0000859d 	.word	0x0000859d
    67c4:	40001800 	.word	0x40001800
    67c8:	20001d40 	.word	0x20001d40
    67cc:	e000e100 	.word	0xe000e100
    67d0:	00006751 	.word	0x00006751

000067d4 <extint_chan_get_config_defaults>:
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->gpio_pin            = 0;
    67d4:	2300      	movs	r3, #0
    67d6:	6003      	str	r3, [r0, #0]
	config->gpio_pin_mux        = 0;
    67d8:	6043      	str	r3, [r0, #4]
	config->gpio_pin_pull       = EXTINT_PULL_UP;
    67da:	2201      	movs	r2, #1
    67dc:	7202      	strb	r2, [r0, #8]
	config->wake_if_sleeping    = true;
    67de:	7242      	strb	r2, [r0, #9]
	config->filter_input_signal = false;
    67e0:	7283      	strb	r3, [r0, #10]
	config->detection_criteria  = EXTINT_DETECT_FALLING;
    67e2:	3302      	adds	r3, #2
    67e4:	72c3      	strb	r3, [r0, #11]
}
    67e6:	4770      	bx	lr

000067e8 <extint_chan_set_config>:

 */
void extint_chan_set_config(
		const uint8_t channel,
		const struct extint_chan_conf *const config)
{
    67e8:	b5f0      	push	{r4, r5, r6, r7, lr}
    67ea:	b083      	sub	sp, #12
    67ec:	0005      	movs	r5, r0
    67ee:	000c      	movs	r4, r1
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    67f0:	a901      	add	r1, sp, #4
    67f2:	2300      	movs	r3, #0
    67f4:	704b      	strb	r3, [r1, #1]
	config->powersave    = false;
    67f6:	70cb      	strb	r3, [r1, #3]
			config->detection_criteria)));

	struct system_pinmux_config pinmux_config;
	system_pinmux_get_config_defaults(&pinmux_config);

	pinmux_config.mux_position = config->gpio_pin_mux;
    67f8:	7923      	ldrb	r3, [r4, #4]
    67fa:	700b      	strb	r3, [r1, #0]
	pinmux_config.direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
	pinmux_config.input_pull   = (enum system_pinmux_pin_pull)config->gpio_pin_pull;
    67fc:	7a23      	ldrb	r3, [r4, #8]
    67fe:	708b      	strb	r3, [r1, #2]
	system_pinmux_pin_set_config(config->gpio_pin, &pinmux_config);
    6800:	7820      	ldrb	r0, [r4, #0]
    6802:	4b15      	ldr	r3, [pc, #84]	; (6858 <extint_chan_set_config+0x70>)
    6804:	4798      	blx	r3
		return NULL;
    6806:	2000      	movs	r0, #0
	if (eic_index < EIC_INST_NUM) {
    6808:	2d1f      	cmp	r5, #31
    680a:	d800      	bhi.n	680e <extint_chan_set_config+0x26>
		return eics[eic_index];
    680c:	4813      	ldr	r0, [pc, #76]	; (685c <extint_chan_set_config+0x74>)

	/* Get a pointer to the module hardware instance */
	Eic *const EIC_module = _extint_get_eic_from_channel(channel);

	uint32_t config_pos = (4 * (channel % 8));
    680e:	2207      	movs	r2, #7
    6810:	402a      	ands	r2, r5
    6812:	0092      	lsls	r2, r2, #2
	uint32_t new_config;

	/* Determine the channel's new edge detection configuration */
	new_config = (config->detection_criteria << EIC_CONFIG_SENSE0_Pos);
    6814:	7ae7      	ldrb	r7, [r4, #11]

	/* Enable the hardware signal filter if requested in the config */
	if (config->filter_input_signal) {
    6816:	7aa3      	ldrb	r3, [r4, #10]
    6818:	2b00      	cmp	r3, #0
    681a:	d001      	beq.n	6820 <extint_chan_set_config+0x38>
    681c:	2308      	movs	r3, #8
    681e:	431f      	orrs	r7, r3
    6820:	08eb      	lsrs	r3, r5, #3
    6822:	009b      	lsls	r3, r3, #2
    6824:	18c3      	adds	r3, r0, r3
		new_config |= EIC_CONFIG_FILTEN0;
	}

	/* Clear the existing and set the new channel configuration */
	EIC_module->CONFIG[channel / 8].reg
		= (EIC_module->CONFIG[channel / 8].reg &
    6826:	6999      	ldr	r1, [r3, #24]
			~((EIC_CONFIG_SENSE0_Msk | EIC_CONFIG_FILTEN0) << config_pos)) |
    6828:	260f      	movs	r6, #15
    682a:	4096      	lsls	r6, r2
		= (EIC_module->CONFIG[channel / 8].reg &
    682c:	43b1      	bics	r1, r6
			(new_config << config_pos);
    682e:	4097      	lsls	r7, r2
    6830:	003a      	movs	r2, r7
			~((EIC_CONFIG_SENSE0_Msk | EIC_CONFIG_FILTEN0) << config_pos)) |
    6832:	430a      	orrs	r2, r1
		= (EIC_module->CONFIG[channel / 8].reg &
    6834:	619a      	str	r2, [r3, #24]

	/* Set the channel's new wake up mode setting */
	if (config->wake_if_sleeping) {
    6836:	7a63      	ldrb	r3, [r4, #9]
    6838:	2b00      	cmp	r3, #0
    683a:	d106      	bne.n	684a <extint_chan_set_config+0x62>
		EIC_module->WAKEUP.reg |=  (1UL << channel);
	} else {
		EIC_module->WAKEUP.reg &= ~(1UL << channel);
    683c:	6943      	ldr	r3, [r0, #20]
    683e:	2201      	movs	r2, #1
    6840:	40aa      	lsls	r2, r5
    6842:	4393      	bics	r3, r2
    6844:	6143      	str	r3, [r0, #20]
	}
}
    6846:	b003      	add	sp, #12
    6848:	bdf0      	pop	{r4, r5, r6, r7, pc}
		EIC_module->WAKEUP.reg |=  (1UL << channel);
    684a:	6942      	ldr	r2, [r0, #20]
    684c:	2301      	movs	r3, #1
    684e:	40ab      	lsls	r3, r5
    6850:	4313      	orrs	r3, r2
    6852:	6143      	str	r3, [r0, #20]
    6854:	e7f7      	b.n	6846 <extint_chan_set_config+0x5e>
    6856:	46c0      	nop			; (mov r8, r8)
    6858:	00008721 	.word	0x00008721
    685c:	40001800 	.word	0x40001800

00006860 <nvm_set_config>:
 *                        EEPROM and/or auxiliary space configuration from being
 *                        altered
 */
enum status_code nvm_set_config(
		const struct nvm_config *const config)
{
    6860:	b510      	push	{r4, lr}
			break;

		case SYSTEM_CLOCK_APB_APBB:
			PM->APBBMASK.reg |= mask;
    6862:	4a1e      	ldr	r2, [pc, #120]	; (68dc <nvm_set_config+0x7c>)
    6864:	69d3      	ldr	r3, [r2, #28]
    6866:	2104      	movs	r1, #4
    6868:	430b      	orrs	r3, r1
    686a:	61d3      	str	r3, [r2, #28]
	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBB, PM_APBBMASK_NVMCTRL);
#endif

	/* Clear error flags */
	nvm_module->STATUS.reg = NVMCTRL_STATUS_MASK;
    686c:	4b1c      	ldr	r3, [pc, #112]	; (68e0 <nvm_set_config+0x80>)
    686e:	2220      	movs	r2, #32
    6870:	32ff      	adds	r2, #255	; 0xff
    6872:	831a      	strh	r2, [r3, #24]
static inline bool nvm_is_ready(void)
{
	/* Get a pointer to the module hardware instance */
	Nvmctrl *const nvm_module = NVMCTRL;

	return nvm_module->INTFLAG.reg & NVMCTRL_INTFLAG_READY;
    6874:	7d1a      	ldrb	r2, [r3, #20]

	/* Check if the module is busy */
	if (!nvm_is_ready()) {
		return STATUS_BUSY;
    6876:	2305      	movs	r3, #5
	if (!nvm_is_ready()) {
    6878:	07d2      	lsls	r2, r2, #31
    687a:	d401      	bmi.n	6880 <nvm_set_config+0x20>
	if (nvm_module->STATUS.reg & NVMCTRL_STATUS_SB) {
		return STATUS_ERR_IO;
	}

	return STATUS_OK;
}
    687c:	0018      	movs	r0, r3
    687e:	bd10      	pop	{r4, pc}
			NVMCTRL_CTRLB_SLEEPPRM(config->sleep_power_mode) |
    6880:	7803      	ldrb	r3, [r0, #0]
    6882:	021b      	lsls	r3, r3, #8
    6884:	22c0      	movs	r2, #192	; 0xc0
    6886:	0092      	lsls	r2, r2, #2
    6888:	4013      	ands	r3, r2
			((config->manual_page_write & 0x01) << NVMCTRL_CTRLB_MANW_Pos) |
    688a:	7841      	ldrb	r1, [r0, #1]
    688c:	01c9      	lsls	r1, r1, #7
    688e:	22ff      	movs	r2, #255	; 0xff
    6890:	400a      	ands	r2, r1
			NVMCTRL_CTRLB_SLEEPPRM(config->sleep_power_mode) |
    6892:	4313      	orrs	r3, r2
			NVMCTRL_CTRLB_RWS(config->wait_states) |
    6894:	7881      	ldrb	r1, [r0, #2]
    6896:	0049      	lsls	r1, r1, #1
    6898:	221e      	movs	r2, #30
    689a:	400a      	ands	r2, r1
			((config->manual_page_write & 0x01) << NVMCTRL_CTRLB_MANW_Pos) |
    689c:	4313      	orrs	r3, r2
			((config->disable_cache & 0x01) << NVMCTRL_CTRLB_CACHEDIS_Pos) |
    689e:	78c2      	ldrb	r2, [r0, #3]
    68a0:	0492      	lsls	r2, r2, #18
    68a2:	2180      	movs	r1, #128	; 0x80
    68a4:	02c9      	lsls	r1, r1, #11
    68a6:	400a      	ands	r2, r1
			NVMCTRL_CTRLB_RWS(config->wait_states) |
    68a8:	4313      	orrs	r3, r2
			NVMCTRL_CTRLB_READMODE(config->cache_readmode);
    68aa:	7902      	ldrb	r2, [r0, #4]
    68ac:	0412      	lsls	r2, r2, #16
    68ae:	21c0      	movs	r1, #192	; 0xc0
    68b0:	0289      	lsls	r1, r1, #10
    68b2:	400a      	ands	r2, r1
			((config->disable_cache & 0x01) << NVMCTRL_CTRLB_CACHEDIS_Pos) |
    68b4:	4313      	orrs	r3, r2
	nvm_module->CTRLB.reg =
    68b6:	4a0a      	ldr	r2, [pc, #40]	; (68e0 <nvm_set_config+0x80>)
    68b8:	6053      	str	r3, [r2, #4]
	_nvm_dev.page_size         = (8 << nvm_module->PARAM.bit.PSZ);
    68ba:	6893      	ldr	r3, [r2, #8]
    68bc:	035b      	lsls	r3, r3, #13
    68be:	0f5b      	lsrs	r3, r3, #29
    68c0:	4908      	ldr	r1, [pc, #32]	; (68e4 <nvm_set_config+0x84>)
    68c2:	2408      	movs	r4, #8
    68c4:	409c      	lsls	r4, r3
    68c6:	800c      	strh	r4, [r1, #0]
	_nvm_dev.number_of_pages   = nvm_module->PARAM.bit.NVMP;
    68c8:	6893      	ldr	r3, [r2, #8]
    68ca:	804b      	strh	r3, [r1, #2]
	_nvm_dev.manual_page_write = config->manual_page_write;
    68cc:	7843      	ldrb	r3, [r0, #1]
    68ce:	710b      	strb	r3, [r1, #4]
	if (nvm_module->STATUS.reg & NVMCTRL_STATUS_SB) {
    68d0:	8b13      	ldrh	r3, [r2, #24]
    68d2:	05db      	lsls	r3, r3, #23
	return STATUS_OK;
    68d4:	0fdb      	lsrs	r3, r3, #31
    68d6:	011b      	lsls	r3, r3, #4
    68d8:	e7d0      	b.n	687c <nvm_set_config+0x1c>
    68da:	46c0      	nop			; (mov r8, r8)
    68dc:	40000400 	.word	0x40000400
    68e0:	41004000 	.word	0x41004000
    68e4:	2000013c 	.word	0x2000013c

000068e8 <nvm_execute_command>:
 */
enum status_code nvm_execute_command(
		const enum nvm_command command,
		const uint32_t address,
		const uint32_t parameter)
{
    68e8:	b530      	push	{r4, r5, lr}
    68ea:	0004      	movs	r4, r0
	uint32_t ctrlb_bak;

	/* Check that the address given is valid  */
	if (address > ((uint32_t)_nvm_dev.page_size * _nvm_dev.number_of_pages)
    68ec:	4a22      	ldr	r2, [pc, #136]	; (6978 <nvm_execute_command+0x90>)
    68ee:	8810      	ldrh	r0, [r2, #0]
    68f0:	8853      	ldrh	r3, [r2, #2]
    68f2:	4343      	muls	r3, r0
    68f4:	428b      	cmp	r3, r1
    68f6:	d206      	bcs.n	6906 <nvm_execute_command+0x1e>
		&& !(address >= NVMCTRL_AUX0_ADDRESS && address <= NVMCTRL_AUX1_ADDRESS )){
    68f8:	2280      	movs	r2, #128	; 0x80
    68fa:	0192      	lsls	r2, r2, #6
		if (address >= ((uint32_t)NVMCTRL_RWW_EEPROM_SIZE + NVMCTRL_RWW_EEPROM_ADDR)
			|| address < NVMCTRL_RWW_EEPROM_ADDR){
			return STATUS_ERR_BAD_ADDRESS;
		}
#else
		return STATUS_ERR_BAD_ADDRESS;
    68fc:	2018      	movs	r0, #24
		&& !(address >= NVMCTRL_AUX0_ADDRESS && address <= NVMCTRL_AUX1_ADDRESS )){
    68fe:	4b1f      	ldr	r3, [pc, #124]	; (697c <nvm_execute_command+0x94>)
    6900:	18cb      	adds	r3, r1, r3
    6902:	4293      	cmp	r3, r2
    6904:	d80e      	bhi.n	6924 <nvm_execute_command+0x3c>

	/* Get a pointer to the module hardware instance */
	Nvmctrl *const nvm_module = NVMCTRL;

	/* Turn off cache before issuing flash commands */
	ctrlb_bak = nvm_module->CTRLB.reg;
    6906:	4b1e      	ldr	r3, [pc, #120]	; (6980 <nvm_execute_command+0x98>)
    6908:	685d      	ldr	r5, [r3, #4]
#if (SAMC20) || (SAMC21)
	nvm_module->CTRLB.reg = ((ctrlb_bak &(~(NVMCTRL_CTRLB_CACHEDIS(0x2))))
							| NVMCTRL_CTRLB_CACHEDIS(0x1));
#else
	nvm_module->CTRLB.reg = ctrlb_bak | NVMCTRL_CTRLB_CACHEDIS;
    690a:	2280      	movs	r2, #128	; 0x80
    690c:	02d2      	lsls	r2, r2, #11
    690e:	432a      	orrs	r2, r5
    6910:	605a      	str	r2, [r3, #4]
#endif

	/* Clear error flags */
	nvm_module->STATUS.reg = NVMCTRL_STATUS_MASK;
    6912:	2220      	movs	r2, #32
    6914:	32ff      	adds	r2, #255	; 0xff
    6916:	831a      	strh	r2, [r3, #24]
    6918:	7d1b      	ldrb	r3, [r3, #20]

	/* Check if the module is busy */
	if (!nvm_is_ready()) {
    691a:	07db      	lsls	r3, r3, #31
    691c:	d403      	bmi.n	6926 <nvm_execute_command+0x3e>
		/* Restore the setting */
		nvm_module->CTRLB.reg = ctrlb_bak;
    691e:	4b18      	ldr	r3, [pc, #96]	; (6980 <nvm_execute_command+0x98>)
    6920:	605d      	str	r5, [r3, #4]
		return STATUS_BUSY;
    6922:	2005      	movs	r0, #5

	/* Restore the setting */
	nvm_module->CTRLB.reg = ctrlb_bak;

	return STATUS_OK;
}
    6924:	bd30      	pop	{r4, r5, pc}
	switch (command) {
    6926:	2c45      	cmp	r4, #69	; 0x45
    6928:	d822      	bhi.n	6970 <nvm_execute_command+0x88>
    692a:	00a3      	lsls	r3, r4, #2
    692c:	4a15      	ldr	r2, [pc, #84]	; (6984 <nvm_execute_command+0x9c>)
    692e:	58d3      	ldr	r3, [r2, r3]
    6930:	469f      	mov	pc, r3
			if (nvm_module->STATUS.reg & NVMCTRL_STATUS_SB) {
    6932:	4b13      	ldr	r3, [pc, #76]	; (6980 <nvm_execute_command+0x98>)
    6934:	8b1b      	ldrh	r3, [r3, #24]
    6936:	05db      	lsls	r3, r3, #23
    6938:	d503      	bpl.n	6942 <nvm_execute_command+0x5a>
				nvm_module->CTRLB.reg = ctrlb_bak;
    693a:	4b11      	ldr	r3, [pc, #68]	; (6980 <nvm_execute_command+0x98>)
    693c:	605d      	str	r5, [r3, #4]
				return STATUS_ERR_IO;
    693e:	2010      	movs	r0, #16
    6940:	e7f0      	b.n	6924 <nvm_execute_command+0x3c>
			nvm_module->ADDR.reg = (uintptr_t)&NVM_MEMORY[address / 4];
    6942:	0889      	lsrs	r1, r1, #2
    6944:	0049      	lsls	r1, r1, #1
    6946:	4b0e      	ldr	r3, [pc, #56]	; (6980 <nvm_execute_command+0x98>)
    6948:	61d9      	str	r1, [r3, #28]
			break;
    694a:	e003      	b.n	6954 <nvm_execute_command+0x6c>
			nvm_module->ADDR.reg = (uintptr_t)&NVM_MEMORY[address / 4];
    694c:	0889      	lsrs	r1, r1, #2
    694e:	0049      	lsls	r1, r1, #1
    6950:	4b0b      	ldr	r3, [pc, #44]	; (6980 <nvm_execute_command+0x98>)
    6952:	61d9      	str	r1, [r3, #28]
	nvm_module->CTRLA.reg = command | NVMCTRL_CTRLA_CMDEX_KEY;
    6954:	20a5      	movs	r0, #165	; 0xa5
    6956:	0200      	lsls	r0, r0, #8
    6958:	4304      	orrs	r4, r0
    695a:	4b09      	ldr	r3, [pc, #36]	; (6980 <nvm_execute_command+0x98>)
    695c:	801c      	strh	r4, [r3, #0]
    695e:	0019      	movs	r1, r3
	while (!nvm_is_ready()) {
    6960:	2201      	movs	r2, #1
    6962:	7d0b      	ldrb	r3, [r1, #20]
    6964:	4213      	tst	r3, r2
    6966:	d0fc      	beq.n	6962 <nvm_execute_command+0x7a>
	nvm_module->CTRLB.reg = ctrlb_bak;
    6968:	4b05      	ldr	r3, [pc, #20]	; (6980 <nvm_execute_command+0x98>)
    696a:	605d      	str	r5, [r3, #4]
	return STATUS_OK;
    696c:	2000      	movs	r0, #0
    696e:	e7d9      	b.n	6924 <nvm_execute_command+0x3c>
			nvm_module->CTRLB.reg = ctrlb_bak;
    6970:	4b03      	ldr	r3, [pc, #12]	; (6980 <nvm_execute_command+0x98>)
    6972:	605d      	str	r5, [r3, #4]
			return STATUS_ERR_INVALID_ARG;
    6974:	2017      	movs	r0, #23
    6976:	e7d5      	b.n	6924 <nvm_execute_command+0x3c>
    6978:	2000013c 	.word	0x2000013c
    697c:	ff7fc000 	.word	0xff7fc000
    6980:	41004000 	.word	0x41004000
    6984:	00015ef4 	.word	0x00015ef4

00006988 <nvm_write_buffer>:
 */
enum status_code nvm_write_buffer(
		const uint32_t destination_address,
		const uint8_t *buffer,
		uint16_t length)
{
    6988:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	bool is_rww_eeprom = false;
#endif

	/* Check if the destination address is valid */
	if (destination_address >
			((uint32_t)_nvm_dev.page_size * _nvm_dev.number_of_pages)) {
    698a:	4b25      	ldr	r3, [pc, #148]	; (6a20 <nvm_write_buffer+0x98>)
    698c:	881d      	ldrh	r5, [r3, #0]
    698e:	885b      	ldrh	r3, [r3, #2]
    6990:	436b      	muls	r3, r5
			|| destination_address < NVMCTRL_RWW_EEPROM_ADDR){
			return STATUS_ERR_BAD_ADDRESS;
		}
		is_rww_eeprom = true;
#else
		return STATUS_ERR_BAD_ADDRESS;
    6992:	2418      	movs	r4, #24
	if (destination_address >
    6994:	4283      	cmp	r3, r0
    6996:	d201      	bcs.n	699c <nvm_write_buffer+0x14>
				destination_address, 0);
#endif
	}

	return STATUS_OK;
}
    6998:	0020      	movs	r0, r4
    699a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if (destination_address & (_nvm_dev.page_size - 1)) {
    699c:	1e6b      	subs	r3, r5, #1
    699e:	4218      	tst	r0, r3
    69a0:	d1fa      	bne.n	6998 <nvm_write_buffer+0x10>
		return STATUS_ERR_INVALID_ARG;
    69a2:	3c01      	subs	r4, #1
	if (length > _nvm_dev.page_size) {
    69a4:	4295      	cmp	r5, r2
    69a6:	d3f7      	bcc.n	6998 <nvm_write_buffer+0x10>
    69a8:	4b1e      	ldr	r3, [pc, #120]	; (6a24 <nvm_write_buffer+0x9c>)
    69aa:	7d1b      	ldrb	r3, [r3, #20]
		return STATUS_BUSY;
    69ac:	3c12      	subs	r4, #18
	if (!nvm_is_ready()) {
    69ae:	07db      	lsls	r3, r3, #31
    69b0:	d5f2      	bpl.n	6998 <nvm_write_buffer+0x10>
	nvm_module->CTRLA.reg = NVM_COMMAND_PAGE_BUFFER_CLEAR | NVMCTRL_CTRLA_CMDEX_KEY;
    69b2:	4c1d      	ldr	r4, [pc, #116]	; (6a28 <nvm_write_buffer+0xa0>)
    69b4:	4b1b      	ldr	r3, [pc, #108]	; (6a24 <nvm_write_buffer+0x9c>)
    69b6:	801c      	strh	r4, [r3, #0]
    69b8:	001d      	movs	r5, r3
	while (!nvm_is_ready()) {
    69ba:	2401      	movs	r4, #1
    69bc:	7d2b      	ldrb	r3, [r5, #20]
    69be:	4223      	tst	r3, r4
    69c0:	d0fc      	beq.n	69bc <nvm_write_buffer+0x34>
	nvm_module->STATUS.reg = NVMCTRL_STATUS_MASK;
    69c2:	2420      	movs	r4, #32
    69c4:	34ff      	adds	r4, #255	; 0xff
    69c6:	4b17      	ldr	r3, [pc, #92]	; (6a24 <nvm_write_buffer+0x9c>)
    69c8:	831c      	strh	r4, [r3, #24]
	for (uint16_t i = 0; i < length; i += 2) {
    69ca:	2a00      	cmp	r2, #0
    69cc:	d022      	beq.n	6a14 <nvm_write_buffer+0x8c>
    69ce:	2301      	movs	r3, #1
    69d0:	0005      	movs	r5, r0
    69d2:	439d      	bics	r5, r3
    69d4:	2300      	movs	r3, #0
		if (i < (length - 1)) {
    69d6:	1e57      	subs	r7, r2, #1
    69d8:	e009      	b.n	69ee <nvm_write_buffer+0x66>
			data |= (buffer[i + 1] << 8);
    69da:	18ce      	adds	r6, r1, r3
    69dc:	7876      	ldrb	r6, [r6, #1]
    69de:	0236      	lsls	r6, r6, #8
    69e0:	4334      	orrs	r4, r6
		NVM_MEMORY[nvm_address++] = data;
    69e2:	802c      	strh	r4, [r5, #0]
	for (uint16_t i = 0; i < length; i += 2) {
    69e4:	3302      	adds	r3, #2
    69e6:	b29b      	uxth	r3, r3
    69e8:	3502      	adds	r5, #2
    69ea:	429a      	cmp	r2, r3
    69ec:	d904      	bls.n	69f8 <nvm_write_buffer+0x70>
		data = buffer[i];
    69ee:	5ccc      	ldrb	r4, [r1, r3]
		if (i < (length - 1)) {
    69f0:	42bb      	cmp	r3, r7
    69f2:	dbf2      	blt.n	69da <nvm_write_buffer+0x52>
		data = buffer[i];
    69f4:	b2a4      	uxth	r4, r4
    69f6:	e7f4      	b.n	69e2 <nvm_write_buffer+0x5a>
	if ((_nvm_dev.manual_page_write == false) && (length < NVMCTRL_PAGE_SIZE)) {
    69f8:	4b09      	ldr	r3, [pc, #36]	; (6a20 <nvm_write_buffer+0x98>)
    69fa:	791b      	ldrb	r3, [r3, #4]
	return STATUS_OK;
    69fc:	2400      	movs	r4, #0
	if ((_nvm_dev.manual_page_write == false) && (length < NVMCTRL_PAGE_SIZE)) {
    69fe:	2b00      	cmp	r3, #0
    6a00:	d1ca      	bne.n	6998 <nvm_write_buffer+0x10>
    6a02:	2a3f      	cmp	r2, #63	; 0x3f
    6a04:	d8c8      	bhi.n	6998 <nvm_write_buffer+0x10>
		return nvm_execute_command(NVM_COMMAND_WRITE_PAGE,
    6a06:	2200      	movs	r2, #0
    6a08:	0001      	movs	r1, r0
    6a0a:	2004      	movs	r0, #4
    6a0c:	4b07      	ldr	r3, [pc, #28]	; (6a2c <nvm_write_buffer+0xa4>)
    6a0e:	4798      	blx	r3
    6a10:	0004      	movs	r4, r0
    6a12:	e7c1      	b.n	6998 <nvm_write_buffer+0x10>
	if ((_nvm_dev.manual_page_write == false) && (length < NVMCTRL_PAGE_SIZE)) {
    6a14:	4b02      	ldr	r3, [pc, #8]	; (6a20 <nvm_write_buffer+0x98>)
    6a16:	791b      	ldrb	r3, [r3, #4]
	return STATUS_OK;
    6a18:	2400      	movs	r4, #0
	if ((_nvm_dev.manual_page_write == false) && (length < NVMCTRL_PAGE_SIZE)) {
    6a1a:	2b00      	cmp	r3, #0
    6a1c:	d0f3      	beq.n	6a06 <nvm_write_buffer+0x7e>
    6a1e:	e7bb      	b.n	6998 <nvm_write_buffer+0x10>
    6a20:	2000013c 	.word	0x2000013c
    6a24:	41004000 	.word	0x41004000
    6a28:	ffffa544 	.word	0xffffa544
    6a2c:	000068e9 	.word	0x000068e9

00006a30 <nvm_erase_row>:
		bool is_rww_eeprom = false;
#endif

	/* Check if the row address is valid */
	if (row_address >
			((uint32_t)_nvm_dev.page_size * _nvm_dev.number_of_pages)) {
    6a30:	4b13      	ldr	r3, [pc, #76]	; (6a80 <nvm_erase_row+0x50>)
    6a32:	881a      	ldrh	r2, [r3, #0]
    6a34:	885b      	ldrh	r3, [r3, #2]
    6a36:	4353      	muls	r3, r2
			|| row_address < NVMCTRL_RWW_EEPROM_ADDR){
			return STATUS_ERR_BAD_ADDRESS;
		}
		is_rww_eeprom = true;
#else
		return STATUS_ERR_BAD_ADDRESS;
    6a38:	2118      	movs	r1, #24
	if (row_address >
    6a3a:	4283      	cmp	r3, r0
    6a3c:	d201      	bcs.n	6a42 <nvm_erase_row+0x12>
	if ((enum nvm_error)(nvm_module->STATUS.reg & NVM_ERRORS_MASK) != NVM_ERROR_NONE) {
		return STATUS_ABORTED;
	}

	return STATUS_OK;
}
    6a3e:	0008      	movs	r0, r1
    6a40:	4770      	bx	lr
	if (row_address & ((_nvm_dev.page_size * NVMCTRL_ROW_PAGES) - 1)) {
    6a42:	0092      	lsls	r2, r2, #2
    6a44:	3a01      	subs	r2, #1
    6a46:	4210      	tst	r0, r2
    6a48:	d1f9      	bne.n	6a3e <nvm_erase_row+0xe>
    6a4a:	4b0e      	ldr	r3, [pc, #56]	; (6a84 <nvm_erase_row+0x54>)
    6a4c:	7d1b      	ldrb	r3, [r3, #20]
		return STATUS_BUSY;
    6a4e:	3913      	subs	r1, #19
	if (!nvm_is_ready()) {
    6a50:	07db      	lsls	r3, r3, #31
    6a52:	d5f4      	bpl.n	6a3e <nvm_erase_row+0xe>
	nvm_module->STATUS.reg = NVMCTRL_STATUS_MASK;
    6a54:	4b0b      	ldr	r3, [pc, #44]	; (6a84 <nvm_erase_row+0x54>)
    6a56:	2220      	movs	r2, #32
    6a58:	32ff      	adds	r2, #255	; 0xff
    6a5a:	831a      	strh	r2, [r3, #24]
	nvm_module->ADDR.reg  = (uintptr_t)&NVM_MEMORY[row_address / 4];
    6a5c:	0880      	lsrs	r0, r0, #2
    6a5e:	0040      	lsls	r0, r0, #1
    6a60:	61d8      	str	r0, [r3, #28]
	nvm_module->CTRLA.reg = NVM_COMMAND_ERASE_ROW | NVMCTRL_CTRLA_CMDEX_KEY;
    6a62:	4a09      	ldr	r2, [pc, #36]	; (6a88 <nvm_erase_row+0x58>)
    6a64:	801a      	strh	r2, [r3, #0]
    6a66:	0019      	movs	r1, r3
	while (!nvm_is_ready()) {
    6a68:	2201      	movs	r2, #1
    6a6a:	7d0b      	ldrb	r3, [r1, #20]
    6a6c:	4213      	tst	r3, r2
    6a6e:	d0fc      	beq.n	6a6a <nvm_erase_row+0x3a>
	if ((enum nvm_error)(nvm_module->STATUS.reg & NVM_ERRORS_MASK) != NVM_ERROR_NONE) {
    6a70:	4b04      	ldr	r3, [pc, #16]	; (6a84 <nvm_erase_row+0x54>)
    6a72:	8b19      	ldrh	r1, [r3, #24]
    6a74:	201c      	movs	r0, #28
    6a76:	4001      	ands	r1, r0
	return STATUS_OK;
    6a78:	1e48      	subs	r0, r1, #1
    6a7a:	4181      	sbcs	r1, r0
    6a7c:	0089      	lsls	r1, r1, #2
    6a7e:	e7de      	b.n	6a3e <nvm_erase_row+0xe>
    6a80:	2000013c 	.word	0x2000013c
    6a84:	41004000 	.word	0x41004000
    6a88:	ffffa502 	.word	0xffffa502

00006a8c <port_pin_set_config>:
 *  \param[in] config    Configuration settings for the pin
 */
void port_pin_set_config(
		const uint8_t gpio_pin,
		const struct port_config *const config)
{
    6a8c:	b500      	push	{lr}
    6a8e:	b083      	sub	sp, #12
	config->mux_position = SYSTEM_PINMUX_GPIO;
    6a90:	ab01      	add	r3, sp, #4
    6a92:	2280      	movs	r2, #128	; 0x80
    6a94:	701a      	strb	r2, [r3, #0]

	struct system_pinmux_config pinmux_config;
	system_pinmux_get_config_defaults(&pinmux_config);

	pinmux_config.mux_position = SYSTEM_PINMUX_GPIO;
	pinmux_config.direction    = (enum system_pinmux_pin_dir)config->direction;
    6a96:	780a      	ldrb	r2, [r1, #0]
    6a98:	705a      	strb	r2, [r3, #1]
	pinmux_config.input_pull   = (enum system_pinmux_pin_pull)config->input_pull;
    6a9a:	784a      	ldrb	r2, [r1, #1]
    6a9c:	709a      	strb	r2, [r3, #2]
	pinmux_config.powersave    = config->powersave;
    6a9e:	788a      	ldrb	r2, [r1, #2]
    6aa0:	70da      	strb	r2, [r3, #3]

	system_pinmux_pin_set_config(gpio_pin, &pinmux_config);
    6aa2:	0019      	movs	r1, r3
    6aa4:	4b01      	ldr	r3, [pc, #4]	; (6aac <port_pin_set_config+0x20>)
    6aa6:	4798      	blx	r3
}
    6aa8:	b003      	add	sp, #12
    6aaa:	bd00      	pop	{pc}
    6aac:	00008721 	.word	0x00008721

00006ab0 <_i2c_master_wait_for_sync>:
{
	/* Sanity check */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_hw = &(module->hw->I2CM);
    6ab0:	6801      	ldr	r1, [r0, #0]

#if defined(FEATURE_SERCOM_SYNCBUSY_SCHEME_VERSION_1)
	return (i2c_hw->STATUS.reg & SERCOM_I2CM_STATUS_SYNCBUSY);
#elif defined(FEATURE_SERCOM_SYNCBUSY_SCHEME_VERSION_2)
	return (i2c_hw->SYNCBUSY.reg & SERCOM_I2CM_SYNCBUSY_MASK);
    6ab2:	2207      	movs	r2, #7
    6ab4:	69cb      	ldr	r3, [r1, #28]
		const struct i2c_master_module *const module)
{
	/* Sanity check */
	Assert(module);

	while (i2c_master_is_syncing(module)) {
    6ab6:	421a      	tst	r2, r3
    6ab8:	d1fc      	bne.n	6ab4 <_i2c_master_wait_for_sync+0x4>
		/* Wait for I2C module to sync. */
	}
}
    6aba:	4770      	bx	lr

00006abc <i2c_master_init>:
 */
enum status_code i2c_master_init(
		struct i2c_master_module *const module,
		Sercom *const hw,
		const struct i2c_master_config *const config)
{
    6abc:	b5f0      	push	{r4, r5, r6, r7, lr}
    6abe:	46d6      	mov	lr, sl
    6ac0:	464f      	mov	r7, r9
    6ac2:	4646      	mov	r6, r8
    6ac4:	b5c0      	push	{r6, r7, lr}
    6ac6:	b08a      	sub	sp, #40	; 0x28
    6ac8:	0006      	movs	r6, r0
    6aca:	000f      	movs	r7, r1
    6acc:	0014      	movs	r4, r2
	Assert(module);
	Assert(hw);
	Assert(config);

	/* Initialize software module */
	module->hw = hw;
    6ace:	6031      	str	r1, [r6, #0]

	SercomI2cm *const i2c_module = &(module->hw->I2CM);

	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    6ad0:	0008      	movs	r0, r1
    6ad2:	4b97      	ldr	r3, [pc, #604]	; (6d30 <i2c_master_init+0x274>)
    6ad4:	4798      	blx	r3
			break;

		case SYSTEM_CLOCK_APB_APBC:
			PM->APBCMASK.reg |= mask;
    6ad6:	4a97      	ldr	r2, [pc, #604]	; (6d34 <i2c_master_init+0x278>)
    6ad8:	6a11      	ldr	r1, [r2, #32]
		gclk_index   = SERCOM5_GCLK_ID_CORE;
	} else {
		gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
	}
#else
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
    6ada:	1c85      	adds	r5, r0, #2
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBD, 1 << pm_index);
	} else {
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
	}
#else
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
    6adc:	2301      	movs	r3, #1
    6ade:	40ab      	lsls	r3, r5
    6ae0:	430b      	orrs	r3, r1
    6ae2:	6213      	str	r3, [r2, #32]
#endif

	/* Set up the GCLK for the module */
	struct system_gclk_chan_config gclk_chan_conf;
	system_gclk_chan_get_config_defaults(&gclk_chan_conf);
	gclk_chan_conf.source_generator = config->generator_source;
    6ae4:	a909      	add	r1, sp, #36	; 0x24
    6ae6:	7b23      	ldrb	r3, [r4, #12]
    6ae8:	700b      	strb	r3, [r1, #0]
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
    6aea:	3014      	adds	r0, #20
	system_gclk_chan_set_config(gclk_index, &gclk_chan_conf);
    6aec:	b2c5      	uxtb	r5, r0
    6aee:	0028      	movs	r0, r5
    6af0:	4b91      	ldr	r3, [pc, #580]	; (6d38 <i2c_master_init+0x27c>)
    6af2:	4798      	blx	r3
	system_gclk_chan_enable(gclk_index);
    6af4:	0028      	movs	r0, r5
    6af6:	4b91      	ldr	r3, [pc, #580]	; (6d3c <i2c_master_init+0x280>)
    6af8:	4798      	blx	r3
	sercom_set_gclk_generator(config->generator_source, false);
    6afa:	7b20      	ldrb	r0, [r4, #12]
    6afc:	2100      	movs	r1, #0
    6afe:	4b90      	ldr	r3, [pc, #576]	; (6d40 <i2c_master_init+0x284>)
    6b00:	4798      	blx	r3

	/* Check if module is enabled. */
	if (i2c_module->CTRLA.reg & SERCOM_I2CM_CTRLA_ENABLE) {
    6b02:	683b      	ldr	r3, [r7, #0]
		return STATUS_ERR_DENIED;
    6b04:	201c      	movs	r0, #28
	if (i2c_module->CTRLA.reg & SERCOM_I2CM_CTRLA_ENABLE) {
    6b06:	079b      	lsls	r3, r3, #30
    6b08:	d505      	bpl.n	6b16 <i2c_master_init+0x5a>
	/* Set sercom module to operate in I2C master mode. */
	i2c_module->CTRLA.reg = SERCOM_I2CM_CTRLA_MODE(0x5);

	/* Set config and return status. */
	return _i2c_master_set_config(module, config);
}
    6b0a:	b00a      	add	sp, #40	; 0x28
    6b0c:	bc1c      	pop	{r2, r3, r4}
    6b0e:	4690      	mov	r8, r2
    6b10:	4699      	mov	r9, r3
    6b12:	46a2      	mov	sl, r4
    6b14:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (i2c_module->CTRLA.reg & SERCOM_I2CM_CTRLA_SWRST) {
    6b16:	683b      	ldr	r3, [r7, #0]
		return STATUS_BUSY;
    6b18:	3817      	subs	r0, #23
	if (i2c_module->CTRLA.reg & SERCOM_I2CM_CTRLA_SWRST) {
    6b1a:	07db      	lsls	r3, r3, #31
    6b1c:	d4f5      	bmi.n	6b0a <i2c_master_init+0x4e>
	i2c_module->CTRLA.reg = SERCOM_I2CM_CTRLA_MODE(0x5);
    6b1e:	2314      	movs	r3, #20
    6b20:	603b      	str	r3, [r7, #0]
	SercomI2cm *const i2c_module = &(module->hw->I2CM);
    6b22:	6833      	ldr	r3, [r6, #0]
    6b24:	4698      	mov	r8, r3
	uint8_t sercom_index = _sercom_get_sercom_inst_index(sercom_hw);
    6b26:	0018      	movs	r0, r3
    6b28:	4b81      	ldr	r3, [pc, #516]	; (6d30 <i2c_master_init+0x274>)
    6b2a:	4798      	blx	r3
    6b2c:	0005      	movs	r5, r0
    6b2e:	2380      	movs	r3, #128	; 0x80
    6b30:	aa08      	add	r2, sp, #32
    6b32:	7013      	strb	r3, [r2, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    6b34:	2300      	movs	r3, #0
    6b36:	7053      	strb	r3, [r2, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
    6b38:	2201      	movs	r2, #1
    6b3a:	a908      	add	r1, sp, #32
    6b3c:	708a      	strb	r2, [r1, #2]
	config->powersave    = false;
    6b3e:	70cb      	strb	r3, [r1, #3]
	uint32_t pad0 = config->pinmux_pad0;
    6b40:	69e0      	ldr	r0, [r4, #28]
	uint32_t pad1 = config->pinmux_pad1;
    6b42:	6a27      	ldr	r7, [r4, #32]
	if (pad0 == PINMUX_DEFAULT) {
    6b44:	2800      	cmp	r0, #0
    6b46:	d100      	bne.n	6b4a <i2c_master_init+0x8e>
    6b48:	e0af      	b.n	6caa <i2c_master_init+0x1ee>
	pin_conf.mux_position = pad0 & 0xFFFF;
    6b4a:	ab08      	add	r3, sp, #32
    6b4c:	7018      	strb	r0, [r3, #0]
	pin_conf.direction    = SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK;
    6b4e:	2302      	movs	r3, #2
    6b50:	aa08      	add	r2, sp, #32
    6b52:	7053      	strb	r3, [r2, #1]
	system_pinmux_pin_set_config(pad0 >> 16, &pin_conf);
    6b54:	0c00      	lsrs	r0, r0, #16
    6b56:	b2c0      	uxtb	r0, r0
    6b58:	0011      	movs	r1, r2
    6b5a:	4b7a      	ldr	r3, [pc, #488]	; (6d44 <i2c_master_init+0x288>)
    6b5c:	4798      	blx	r3
	if (pad1 == PINMUX_DEFAULT) {
    6b5e:	2f00      	cmp	r7, #0
    6b60:	d100      	bne.n	6b64 <i2c_master_init+0xa8>
    6b62:	e0a7      	b.n	6cb4 <i2c_master_init+0x1f8>
	pin_conf.mux_position = pad1 & 0xFFFF;
    6b64:	ab08      	add	r3, sp, #32
    6b66:	701f      	strb	r7, [r3, #0]
	pin_conf.direction    = SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK;
    6b68:	2302      	movs	r3, #2
    6b6a:	aa08      	add	r2, sp, #32
    6b6c:	7053      	strb	r3, [r2, #1]
	system_pinmux_pin_set_config(pad1 >> 16, &pin_conf);
    6b6e:	0c3f      	lsrs	r7, r7, #16
    6b70:	b2f8      	uxtb	r0, r7
    6b72:	0011      	movs	r1, r2
    6b74:	4b73      	ldr	r3, [pc, #460]	; (6d44 <i2c_master_init+0x288>)
    6b76:	4798      	blx	r3
	module->unknown_bus_state_timeout = config->unknown_bus_state_timeout;
    6b78:	8aa3      	ldrh	r3, [r4, #20]
    6b7a:	80f3      	strh	r3, [r6, #6]
	module->buffer_timeout = config->buffer_timeout;
    6b7c:	8ae3      	ldrh	r3, [r4, #22]
    6b7e:	8133      	strh	r3, [r6, #8]
	if (config->run_in_standby || system_is_debugger_present()) {
    6b80:	7e23      	ldrb	r3, [r4, #24]
		tmp_ctrla = SERCOM_I2CM_CTRLA_RUNSTDBY;
    6b82:	2280      	movs	r2, #128	; 0x80
	if (config->run_in_standby || system_is_debugger_present()) {
    6b84:	2b00      	cmp	r3, #0
    6b86:	d104      	bne.n	6b92 <i2c_master_init+0xd6>
 * \retval false Debugger is not connected to the system
 *
 */
static inline bool system_is_debugger_present(void)
{
	return DSU->STATUSB.reg & DSU_STATUSB_DBGPRES;
    6b88:	4b6f      	ldr	r3, [pc, #444]	; (6d48 <i2c_master_init+0x28c>)
    6b8a:	789b      	ldrb	r3, [r3, #2]
    6b8c:	079b      	lsls	r3, r3, #30
		tmp_ctrla = SERCOM_I2CM_CTRLA_RUNSTDBY;
    6b8e:	0fdb      	lsrs	r3, r3, #31
    6b90:	01da      	lsls	r2, r3, #7
	tmp_ctrla |= config->transfer_speed;
    6b92:	68a1      	ldr	r1, [r4, #8]
    6b94:	6923      	ldr	r3, [r4, #16]
    6b96:	430b      	orrs	r3, r1
    6b98:	4313      	orrs	r3, r2
	if (config->scl_low_timeout) {
    6b9a:	2224      	movs	r2, #36	; 0x24
    6b9c:	5ca2      	ldrb	r2, [r4, r2]
    6b9e:	2a00      	cmp	r2, #0
    6ba0:	d002      	beq.n	6ba8 <i2c_master_init+0xec>
		tmp_ctrla |= SERCOM_I2CM_CTRLA_LOWTOUTEN;
    6ba2:	2280      	movs	r2, #128	; 0x80
    6ba4:	05d2      	lsls	r2, r2, #23
    6ba6:	4313      	orrs	r3, r2
		tmp_ctrla |= config->inactive_timeout;
    6ba8:	6aa2      	ldr	r2, [r4, #40]	; 0x28
    6baa:	4313      	orrs	r3, r2
	if (config->scl_stretch_only_after_ack_bit || (config->transfer_speed == I2C_MASTER_SPEED_HIGH_SPEED)) {
    6bac:	222c      	movs	r2, #44	; 0x2c
    6bae:	5ca2      	ldrb	r2, [r4, r2]
    6bb0:	2a00      	cmp	r2, #0
    6bb2:	d103      	bne.n	6bbc <i2c_master_init+0x100>
    6bb4:	2280      	movs	r2, #128	; 0x80
    6bb6:	0492      	lsls	r2, r2, #18
    6bb8:	4291      	cmp	r1, r2
    6bba:	d102      	bne.n	6bc2 <i2c_master_init+0x106>
		tmp_ctrla |= SERCOM_I2CM_CTRLA_SCLSM;
    6bbc:	2280      	movs	r2, #128	; 0x80
    6bbe:	0512      	lsls	r2, r2, #20
    6bc0:	4313      	orrs	r3, r2
	if (config->slave_scl_low_extend_timeout) {
    6bc2:	222d      	movs	r2, #45	; 0x2d
    6bc4:	5ca2      	ldrb	r2, [r4, r2]
    6bc6:	2a00      	cmp	r2, #0
    6bc8:	d002      	beq.n	6bd0 <i2c_master_init+0x114>
		tmp_ctrla |= SERCOM_I2CM_CTRLA_SEXTTOEN;
    6bca:	2280      	movs	r2, #128	; 0x80
    6bcc:	0412      	lsls	r2, r2, #16
    6bce:	4313      	orrs	r3, r2
	if (config->master_scl_low_extend_timeout) {
    6bd0:	222e      	movs	r2, #46	; 0x2e
    6bd2:	5ca2      	ldrb	r2, [r4, r2]
    6bd4:	2a00      	cmp	r2, #0
    6bd6:	d002      	beq.n	6bde <i2c_master_init+0x122>
		tmp_ctrla |= SERCOM_I2CM_CTRLA_MEXTTOEN;
    6bd8:	2280      	movs	r2, #128	; 0x80
    6bda:	03d2      	lsls	r2, r2, #15
    6bdc:	4313      	orrs	r3, r2
	i2c_module->CTRLA.reg |= tmp_ctrla;
    6bde:	4642      	mov	r2, r8
    6be0:	6812      	ldr	r2, [r2, #0]
    6be2:	4313      	orrs	r3, r2
    6be4:	4642      	mov	r2, r8
    6be6:	6013      	str	r3, [r2, #0]
	i2c_module->CTRLB.reg = SERCOM_I2CM_CTRLB_SMEN;
    6be8:	2380      	movs	r3, #128	; 0x80
    6bea:	005b      	lsls	r3, r3, #1
    6bec:	6053      	str	r3, [r2, #4]
	uint32_t fgclk       = system_gclk_chan_get_hz(SERCOM0_GCLK_ID_CORE + sercom_index);
    6bee:	0028      	movs	r0, r5
    6bf0:	3014      	adds	r0, #20
    6bf2:	b2c0      	uxtb	r0, r0
    6bf4:	4b55      	ldr	r3, [pc, #340]	; (6d4c <i2c_master_init+0x290>)
    6bf6:	4798      	blx	r3
    6bf8:	9007      	str	r0, [sp, #28]
	uint32_t fscl        = 1000 * config->baud_rate;
    6bfa:	23fa      	movs	r3, #250	; 0xfa
    6bfc:	009b      	lsls	r3, r3, #2
    6bfe:	6822      	ldr	r2, [r4, #0]
    6c00:	435a      	muls	r2, r3
    6c02:	4691      	mov	r9, r2
	uint32_t fscl_hs     = 1000 * config->baud_rate_high_speed;
    6c04:	6863      	ldr	r3, [r4, #4]
    6c06:	469a      	mov	sl, r3
	tmp_baud = (int32_t)(div_ceil(
    6c08:	4d51      	ldr	r5, [pc, #324]	; (6d50 <i2c_master_init+0x294>)
    6c0a:	47a8      	blx	r5
    6c0c:	9000      	str	r0, [sp, #0]
    6c0e:	9101      	str	r1, [sp, #4]
    6c10:	464b      	mov	r3, r9
    6c12:	0058      	lsls	r0, r3, #1
    6c14:	47a8      	blx	r5
    6c16:	9002      	str	r0, [sp, #8]
    6c18:	9103      	str	r1, [sp, #12]
    6c1a:	8e20      	ldrh	r0, [r4, #48]	; 0x30
    6c1c:	47a8      	blx	r5
    6c1e:	9004      	str	r0, [sp, #16]
    6c20:	9105      	str	r1, [sp, #20]
    6c22:	4f4c      	ldr	r7, [pc, #304]	; (6d54 <i2c_master_init+0x298>)
    6c24:	4a4c      	ldr	r2, [pc, #304]	; (6d58 <i2c_master_init+0x29c>)
    6c26:	4b4d      	ldr	r3, [pc, #308]	; (6d5c <i2c_master_init+0x2a0>)
    6c28:	9800      	ldr	r0, [sp, #0]
    6c2a:	9901      	ldr	r1, [sp, #4]
    6c2c:	47b8      	blx	r7
    6c2e:	0002      	movs	r2, r0
    6c30:	000b      	movs	r3, r1
    6c32:	9804      	ldr	r0, [sp, #16]
    6c34:	9905      	ldr	r1, [sp, #20]
    6c36:	47b8      	blx	r7
    6c38:	4e49      	ldr	r6, [pc, #292]	; (6d60 <i2c_master_init+0x2a4>)
    6c3a:	2200      	movs	r2, #0
    6c3c:	4b49      	ldr	r3, [pc, #292]	; (6d64 <i2c_master_init+0x2a8>)
    6c3e:	47b0      	blx	r6
    6c40:	9004      	str	r0, [sp, #16]
    6c42:	9105      	str	r1, [sp, #20]
    6c44:	4648      	mov	r0, r9
    6c46:	47a8      	blx	r5
    6c48:	0002      	movs	r2, r0
    6c4a:	000b      	movs	r3, r1
    6c4c:	9804      	ldr	r0, [sp, #16]
    6c4e:	9905      	ldr	r1, [sp, #20]
    6c50:	47b8      	blx	r7
    6c52:	0002      	movs	r2, r0
    6c54:	000b      	movs	r3, r1
    6c56:	4d44      	ldr	r5, [pc, #272]	; (6d68 <i2c_master_init+0x2ac>)
    6c58:	9800      	ldr	r0, [sp, #0]
    6c5a:	9901      	ldr	r1, [sp, #4]
    6c5c:	47a8      	blx	r5
    6c5e:	9a02      	ldr	r2, [sp, #8]
    6c60:	9b03      	ldr	r3, [sp, #12]
    6c62:	47b0      	blx	r6
    6c64:	2200      	movs	r2, #0
    6c66:	4b41      	ldr	r3, [pc, #260]	; (6d6c <i2c_master_init+0x2b0>)
    6c68:	47a8      	blx	r5
    6c6a:	9a02      	ldr	r2, [sp, #8]
    6c6c:	9b03      	ldr	r3, [sp, #12]
    6c6e:	4d40      	ldr	r5, [pc, #256]	; (6d70 <i2c_master_init+0x2b4>)
    6c70:	47a8      	blx	r5
    6c72:	4b40      	ldr	r3, [pc, #256]	; (6d74 <i2c_master_init+0x2b8>)
    6c74:	4798      	blx	r3
    6c76:	0005      	movs	r5, r0
	if (config->transfer_speed == I2C_MASTER_SPEED_HIGH_SPEED) {
    6c78:	2380      	movs	r3, #128	; 0x80
    6c7a:	049b      	lsls	r3, r3, #18
    6c7c:	68a2      	ldr	r2, [r4, #8]
    6c7e:	429a      	cmp	r2, r3
    6c80:	d01e      	beq.n	6cc0 <i2c_master_init+0x204>
	if (tmp_baud > 255 || tmp_baud < 0 || tmp_baud_hs > 255 || tmp_baud_hs < 0) {
    6c82:	0003      	movs	r3, r0
    6c84:	2040      	movs	r0, #64	; 0x40
    6c86:	2dff      	cmp	r5, #255	; 0xff
    6c88:	d900      	bls.n	6c8c <i2c_master_init+0x1d0>
    6c8a:	e73e      	b.n	6b0a <i2c_master_init+0x4e>
	int32_t tmp_baudlow_hs = 0;
    6c8c:	2400      	movs	r4, #0
	int32_t tmp_baud_hs = 0;
    6c8e:	2000      	movs	r0, #0
		i2c_module->BAUD.reg = SERCOM_I2CM_BAUD_BAUD(tmp_baud) |
    6c90:	25ff      	movs	r5, #255	; 0xff
    6c92:	401d      	ands	r5, r3
			SERCOM_I2CM_BAUD_HSBAUD(tmp_baud_hs) | SERCOM_I2CM_BAUD_HSBAUDLOW(tmp_baudlow_hs);
    6c94:	0624      	lsls	r4, r4, #24
    6c96:	4325      	orrs	r5, r4
    6c98:	0400      	lsls	r0, r0, #16
    6c9a:	23ff      	movs	r3, #255	; 0xff
    6c9c:	041b      	lsls	r3, r3, #16
    6c9e:	4018      	ands	r0, r3
    6ca0:	4305      	orrs	r5, r0
		i2c_module->BAUD.reg = SERCOM_I2CM_BAUD_BAUD(tmp_baud) |
    6ca2:	4643      	mov	r3, r8
    6ca4:	60dd      	str	r5, [r3, #12]
	enum status_code tmp_status_code = STATUS_OK;
    6ca6:	2000      	movs	r0, #0
    6ca8:	e72f      	b.n	6b0a <i2c_master_init+0x4e>
		pad0 = _sercom_get_default_pad(sercom_hw, 0);
    6caa:	2100      	movs	r1, #0
    6cac:	4640      	mov	r0, r8
    6cae:	4b32      	ldr	r3, [pc, #200]	; (6d78 <i2c_master_init+0x2bc>)
    6cb0:	4798      	blx	r3
    6cb2:	e74a      	b.n	6b4a <i2c_master_init+0x8e>
		pad1 = _sercom_get_default_pad(sercom_hw, 1);
    6cb4:	2101      	movs	r1, #1
    6cb6:	4640      	mov	r0, r8
    6cb8:	4b2f      	ldr	r3, [pc, #188]	; (6d78 <i2c_master_init+0x2bc>)
    6cba:	4798      	blx	r3
    6cbc:	0007      	movs	r7, r0
    6cbe:	e751      	b.n	6b64 <i2c_master_init+0xa8>
	uint32_t fscl_hs     = 1000 * config->baud_rate_high_speed;
    6cc0:	26fa      	movs	r6, #250	; 0xfa
    6cc2:	00b6      	lsls	r6, r6, #2
    6cc4:	4653      	mov	r3, sl
    6cc6:	435e      	muls	r6, r3
		tmp_baudlow_hs = (int32_t)((fgclk * 2.0) / (3.0 * fscl_hs) - 1);
    6cc8:	9800      	ldr	r0, [sp, #0]
    6cca:	9901      	ldr	r1, [sp, #4]
    6ccc:	0002      	movs	r2, r0
    6cce:	000b      	movs	r3, r1
    6cd0:	4c23      	ldr	r4, [pc, #140]	; (6d60 <i2c_master_init+0x2a4>)
    6cd2:	47a0      	blx	r4
    6cd4:	9000      	str	r0, [sp, #0]
    6cd6:	9101      	str	r1, [sp, #4]
    6cd8:	0030      	movs	r0, r6
    6cda:	4b1d      	ldr	r3, [pc, #116]	; (6d50 <i2c_master_init+0x294>)
    6cdc:	4798      	blx	r3
    6cde:	2200      	movs	r2, #0
    6ce0:	4b26      	ldr	r3, [pc, #152]	; (6d7c <i2c_master_init+0x2c0>)
    6ce2:	47b8      	blx	r7
    6ce4:	0002      	movs	r2, r0
    6ce6:	000b      	movs	r3, r1
    6ce8:	9800      	ldr	r0, [sp, #0]
    6cea:	9901      	ldr	r1, [sp, #4]
    6cec:	4c20      	ldr	r4, [pc, #128]	; (6d70 <i2c_master_init+0x2b4>)
    6cee:	47a0      	blx	r4
    6cf0:	2200      	movs	r2, #0
    6cf2:	4b1e      	ldr	r3, [pc, #120]	; (6d6c <i2c_master_init+0x2b0>)
    6cf4:	4c1c      	ldr	r4, [pc, #112]	; (6d68 <i2c_master_init+0x2ac>)
    6cf6:	47a0      	blx	r4
    6cf8:	4b1e      	ldr	r3, [pc, #120]	; (6d74 <i2c_master_init+0x2b8>)
    6cfa:	4798      	blx	r3
    6cfc:	1e04      	subs	r4, r0, #0
		if (tmp_baudlow_hs) {
    6cfe:	d00c      	beq.n	6d1a <i2c_master_init+0x25e>
			tmp_baud_hs = (int32_t)(fgclk / fscl_hs) - 2 - tmp_baudlow_hs;
    6d00:	0031      	movs	r1, r6
    6d02:	9807      	ldr	r0, [sp, #28]
    6d04:	4b1e      	ldr	r3, [pc, #120]	; (6d80 <i2c_master_init+0x2c4>)
    6d06:	4798      	blx	r3
    6d08:	3802      	subs	r0, #2
    6d0a:	1b00      	subs	r0, r0, r4
	if (tmp_baud > 255 || tmp_baud < 0 || tmp_baud_hs > 255 || tmp_baud_hs < 0) {
    6d0c:	002b      	movs	r3, r5
    6d0e:	2dff      	cmp	r5, #255	; 0xff
    6d10:	d80c      	bhi.n	6d2c <i2c_master_init+0x270>
    6d12:	28ff      	cmp	r0, #255	; 0xff
    6d14:	d9bc      	bls.n	6c90 <i2c_master_init+0x1d4>
    6d16:	2040      	movs	r0, #64	; 0x40
    6d18:	e6f7      	b.n	6b0a <i2c_master_init+0x4e>
			tmp_baud_hs = (int32_t)(div_ceil(fgclk, 2 * fscl_hs)) - 1;
    6d1a:	0071      	lsls	r1, r6, #1
    6d1c:	1e48      	subs	r0, r1, #1
    6d1e:	9b07      	ldr	r3, [sp, #28]
    6d20:	469c      	mov	ip, r3
    6d22:	4460      	add	r0, ip
    6d24:	4b16      	ldr	r3, [pc, #88]	; (6d80 <i2c_master_init+0x2c4>)
    6d26:	4798      	blx	r3
    6d28:	3801      	subs	r0, #1
    6d2a:	e7ef      	b.n	6d0c <i2c_master_init+0x250>
	if (tmp_baud > 255 || tmp_baud < 0 || tmp_baud_hs > 255 || tmp_baud_hs < 0) {
    6d2c:	2040      	movs	r0, #64	; 0x40
    6d2e:	e6ec      	b.n	6b0a <i2c_master_init+0x4e>
    6d30:	00007425 	.word	0x00007425
    6d34:	40000400 	.word	0x40000400
    6d38:	00008629 	.word	0x00008629
    6d3c:	0000859d 	.word	0x0000859d
    6d40:	00007261 	.word	0x00007261
    6d44:	00008721 	.word	0x00008721
    6d48:	41002000 	.word	0x41002000
    6d4c:	00008645 	.word	0x00008645
    6d50:	00014bc9 	.word	0x00014bc9
    6d54:	00014035 	.word	0x00014035
    6d58:	e826d695 	.word	0xe826d695
    6d5c:	3e112e0b 	.word	0x3e112e0b
    6d60:	000133ad 	.word	0x000133ad
    6d64:	40240000 	.word	0x40240000
    6d68:	00014535 	.word	0x00014535
    6d6c:	3ff00000 	.word	0x3ff00000
    6d70:	000139cd 	.word	0x000139cd
    6d74:	00014b61 	.word	0x00014b61
    6d78:	000072ad 	.word	0x000072ad
    6d7c:	40080000 	.word	0x40080000
    6d80:	000124c1 	.word	0x000124c1

00006d84 <i2c_master_reset>:
 * Reset the module to hardware defaults.
 *
 * \param[in,out] module Pointer to software module structure
 */
void i2c_master_reset(struct i2c_master_module *const module)
{
    6d84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    6d86:	0004      	movs	r4, r0
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
    6d88:	6807      	ldr	r7, [r0, #0]

	/* Wait for sync */
	_i2c_master_wait_for_sync(module);
    6d8a:	4e08      	ldr	r6, [pc, #32]	; (6dac <i2c_master_reset+0x28>)
    6d8c:	47b0      	blx	r6
{
	/* Sanity check of arguments */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
    6d8e:	6825      	ldr	r5, [r4, #0]
		/* Disable module interrupts */
		system_interrupt_disable(_sercom_get_interrupt_vector(module->hw));
#endif

	/* Wait for module to sync */
	_i2c_master_wait_for_sync(module);
    6d90:	0020      	movs	r0, r4
    6d92:	47b0      	blx	r6

	/* Disbale interrupt */
	i2c_module->INTENCLR.reg = SERCOM_I2CM_INTENCLR_MASK;
    6d94:	2383      	movs	r3, #131	; 0x83
    6d96:	752b      	strb	r3, [r5, #20]
	/* Clear interrupt flag */
	i2c_module->INTFLAG.reg = SERCOM_I2CM_INTFLAG_MASK;
    6d98:	762b      	strb	r3, [r5, #24]

	/* Disable module */
	i2c_module->CTRLA.reg &= ~SERCOM_I2CM_CTRLA_ENABLE;
    6d9a:	682b      	ldr	r3, [r5, #0]
    6d9c:	2202      	movs	r2, #2
    6d9e:	4393      	bics	r3, r2
    6da0:	602b      	str	r3, [r5, #0]
	system_interrupt_clear_pending(_sercom_get_interrupt_vector(module->hw));
	system_interrupt_leave_critical_section();
#endif

	/* Wait for sync */
	_i2c_master_wait_for_sync(module);
    6da2:	0020      	movs	r0, r4
    6da4:	47b0      	blx	r6

	/* Reset module */
	i2c_module->CTRLA.reg = SERCOM_I2CM_CTRLA_SWRST;
    6da6:	2301      	movs	r3, #1
    6da8:	603b      	str	r3, [r7, #0]
}
    6daa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    6dac:	00006ab1 	.word	0x00006ab1

00006db0 <_i2c_master_address_response>:
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
    6db0:	6803      	ldr	r3, [r0, #0]

	/* Check for error and ignore bus-error; workaround for BUSSTATE stuck in
	 * BUSY */
	if (i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_SB) {
    6db2:	7e1a      	ldrb	r2, [r3, #24]
    6db4:	0792      	lsls	r2, r2, #30
    6db6:	d507      	bpl.n	6dc8 <_i2c_master_address_response+0x18>

		/* Clear write interrupt flag */
		i2c_module->INTFLAG.reg = SERCOM_I2CM_INTFLAG_SB;
    6db8:	2202      	movs	r2, #2
    6dba:	761a      	strb	r2, [r3, #24]

		/* Check arbitration. */
		if (i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_ARBLOST) {
    6dbc:	8b5b      	ldrh	r3, [r3, #26]
    6dbe:	079b      	lsls	r3, r3, #30
			/* Return packet collision. */
			return STATUS_ERR_PACKET_COLLISION;
    6dc0:	2041      	movs	r0, #65	; 0x41

		/* Return bad address value. */
		return STATUS_ERR_BAD_ADDRESS;
	}

	return STATUS_OK;
    6dc2:	17db      	asrs	r3, r3, #31
    6dc4:	4018      	ands	r0, r3
}
    6dc6:	4770      	bx	lr
	} else if (i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_RXNACK) {
    6dc8:	8b5a      	ldrh	r2, [r3, #26]
    6dca:	0752      	lsls	r2, r2, #29
    6dcc:	d506      	bpl.n	6ddc <_i2c_master_address_response+0x2c>
		i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
    6dce:	6859      	ldr	r1, [r3, #4]
    6dd0:	22c0      	movs	r2, #192	; 0xc0
    6dd2:	0292      	lsls	r2, r2, #10
    6dd4:	430a      	orrs	r2, r1
    6dd6:	605a      	str	r2, [r3, #4]
		return STATUS_ERR_BAD_ADDRESS;
    6dd8:	2018      	movs	r0, #24
    6dda:	e7f4      	b.n	6dc6 <_i2c_master_address_response+0x16>
	return STATUS_OK;
    6ddc:	2000      	movs	r0, #0
    6dde:	e7f2      	b.n	6dc6 <_i2c_master_address_response+0x16>

00006de0 <_i2c_master_wait_for_bus>:
 * \retval STATUS_ERR_TIMEOUT  If no response was given within specified timeout
 *                             period
 */
enum status_code _i2c_master_wait_for_bus(
		struct i2c_master_module *const module)
{
    6de0:	b530      	push	{r4, r5, lr}
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
    6de2:	6802      	ldr	r2, [r0, #0]

	/* Wait for reply. */
	uint16_t timeout_counter = 0;
    6de4:	2300      	movs	r3, #0
	while (!(i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_MB) &&
    6de6:	2401      	movs	r4, #1
    6de8:	2502      	movs	r5, #2
    6dea:	7e11      	ldrb	r1, [r2, #24]
    6dec:	4221      	tst	r1, r4
    6dee:	d10b      	bne.n	6e08 <_i2c_master_wait_for_bus+0x28>
			!(i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_SB)) {
    6df0:	7e11      	ldrb	r1, [r2, #24]
	while (!(i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_MB) &&
    6df2:	4229      	tst	r1, r5
    6df4:	d106      	bne.n	6e04 <_i2c_master_wait_for_bus+0x24>

		/* Check timeout condition. */
		if (++timeout_counter >= module->buffer_timeout) {
    6df6:	3301      	adds	r3, #1
    6df8:	b29b      	uxth	r3, r3
    6dfa:	8901      	ldrh	r1, [r0, #8]
    6dfc:	4299      	cmp	r1, r3
    6dfe:	d8f4      	bhi.n	6dea <_i2c_master_wait_for_bus+0xa>
			return STATUS_ERR_TIMEOUT;
    6e00:	2012      	movs	r0, #18
    6e02:	e002      	b.n	6e0a <_i2c_master_wait_for_bus+0x2a>
		}
	}
	return STATUS_OK;
    6e04:	2000      	movs	r0, #0
    6e06:	e000      	b.n	6e0a <_i2c_master_wait_for_bus+0x2a>
    6e08:	2000      	movs	r0, #0
}
    6e0a:	bd30      	pop	{r4, r5, pc}

00006e0c <_i2c_master_send_hs_master_code>:
 * \retval STATUS_OK           No error happen
 */
enum status_code _i2c_master_send_hs_master_code(
		struct i2c_master_module *const module,
		uint8_t hs_master_code)
{
    6e0c:	b510      	push	{r4, lr}
	SercomI2cm *const i2c_module = &(module->hw->I2CM);
    6e0e:	6804      	ldr	r4, [r0, #0]
	/* Return value. */
	enum status_code tmp_status;

	/* Set NACK for high speed code */
	i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
    6e10:	6862      	ldr	r2, [r4, #4]
    6e12:	2380      	movs	r3, #128	; 0x80
    6e14:	02db      	lsls	r3, r3, #11
    6e16:	4313      	orrs	r3, r2
    6e18:	6063      	str	r3, [r4, #4]
	/* Send high speed code */
	i2c_module->ADDR.reg = hs_master_code;
    6e1a:	6261      	str	r1, [r4, #36]	; 0x24
	/* Wait for response on bus. */
	tmp_status = _i2c_master_wait_for_bus(module);
    6e1c:	4b02      	ldr	r3, [pc, #8]	; (6e28 <_i2c_master_send_hs_master_code+0x1c>)
    6e1e:	4798      	blx	r3
	/* Clear write interrupt flag */
	i2c_module->INTFLAG.reg = SERCOM_I2CM_INTENCLR_MB;
    6e20:	2301      	movs	r3, #1
    6e22:	7623      	strb	r3, [r4, #24]

	return tmp_status;
}
    6e24:	bd10      	pop	{r4, pc}
    6e26:	46c0      	nop			; (mov r8, r8)
    6e28:	00006de1 	.word	0x00006de1

00006e2c <_i2c_master_read_packet>:
 *
 */
static enum status_code _i2c_master_read_packet(
		struct i2c_master_module *const module,
		struct i2c_master_packet *const packet)
{
    6e2c:	b5f0      	push	{r4, r5, r6, r7, lr}
    6e2e:	46de      	mov	lr, fp
    6e30:	4657      	mov	r7, sl
    6e32:	464e      	mov	r6, r9
    6e34:	4645      	mov	r5, r8
    6e36:	b5e0      	push	{r5, r6, r7, lr}
    6e38:	b083      	sub	sp, #12
    6e3a:	0006      	movs	r6, r0
    6e3c:	4689      	mov	r9, r1
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);
	Assert(packet);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
    6e3e:	6805      	ldr	r5, [r0, #0]

	/* Return value. */
	enum status_code tmp_status;
	uint16_t tmp_data_length = packet->data_length;
    6e40:	884c      	ldrh	r4, [r1, #2]

	/* Written buffer counter. */
	uint16_t counter = 0;

	bool sclsm_flag = i2c_module->CTRLA.bit.SCLSM;
    6e42:	682b      	ldr	r3, [r5, #0]
    6e44:	011b      	lsls	r3, r3, #4
    6e46:	0fdb      	lsrs	r3, r3, #31
    6e48:	469a      	mov	sl, r3

	/* Switch to high speed mode */
	if (packet->high_speed) {
    6e4a:	7a4b      	ldrb	r3, [r1, #9]
    6e4c:	2b00      	cmp	r3, #0
    6e4e:	d12b      	bne.n	6ea8 <_i2c_master_read_packet+0x7c>
		_i2c_master_send_hs_master_code(module, packet->hs_master_code);
	}

	/* Set action to ACK. */
	i2c_module->CTRLB.reg &= ~SERCOM_I2CM_CTRLB_ACKACT;
    6e50:	686b      	ldr	r3, [r5, #4]
    6e52:	4a58      	ldr	r2, [pc, #352]	; (6fb4 <_i2c_master_read_packet+0x188>)
    6e54:	4013      	ands	r3, r2
    6e56:	606b      	str	r3, [r5, #4]

	/* Set address and direction bit. Will send start command on bus. */
	if (packet->ten_bit_address) {
    6e58:	464b      	mov	r3, r9
    6e5a:	7a1b      	ldrb	r3, [r3, #8]
    6e5c:	2b00      	cmp	r3, #0
    6e5e:	d127      	bne.n	6eb0 <_i2c_master_read_packet+0x84>
				I2C_TRANSFER_READ;
		} else {
			return tmp_status;
		}
	} else {
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_READ |
    6e60:	464b      	mov	r3, r9
    6e62:	881b      	ldrh	r3, [r3, #0]
    6e64:	005b      	lsls	r3, r3, #1
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos);
    6e66:	464a      	mov	r2, r9
    6e68:	7a52      	ldrb	r2, [r2, #9]
    6e6a:	0392      	lsls	r2, r2, #14
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_READ |
    6e6c:	4313      	orrs	r3, r2
    6e6e:	2201      	movs	r2, #1
    6e70:	4313      	orrs	r3, r2
    6e72:	626b      	str	r3, [r5, #36]	; 0x24
	}

	/* Wait for response on bus. */
	tmp_status = _i2c_master_wait_for_bus(module);
    6e74:	0030      	movs	r0, r6
    6e76:	4b50      	ldr	r3, [pc, #320]	; (6fb8 <_i2c_master_read_packet+0x18c>)
    6e78:	4798      	blx	r3
    6e7a:	9001      	str	r0, [sp, #4]

	/* Set action to ack or nack. */
	if ((sclsm_flag) && (packet->data_length == 1)) {
    6e7c:	4653      	mov	r3, sl
    6e7e:	2b00      	cmp	r3, #0
    6e80:	d003      	beq.n	6e8a <_i2c_master_read_packet+0x5e>
    6e82:	464b      	mov	r3, r9
    6e84:	885b      	ldrh	r3, [r3, #2]
    6e86:	2b01      	cmp	r3, #1
    6e88:	d03b      	beq.n	6f02 <_i2c_master_read_packet+0xd6>
		i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
	} else {
		i2c_module->CTRLB.reg &= ~SERCOM_I2CM_CTRLB_ACKACT;	
    6e8a:	686b      	ldr	r3, [r5, #4]
    6e8c:	4a49      	ldr	r2, [pc, #292]	; (6fb4 <_i2c_master_read_packet+0x188>)
    6e8e:	4013      	ands	r3, r2
    6e90:	606b      	str	r3, [r5, #4]
	}

	/* Check for address response error unless previous error is
	 * detected. */
	if (tmp_status == STATUS_OK) {
    6e92:	9b01      	ldr	r3, [sp, #4]
    6e94:	2b00      	cmp	r3, #0
    6e96:	d03a      	beq.n	6f0e <_i2c_master_read_packet+0xe2>
		_i2c_master_wait_for_sync(module);
		packet->data[counter] = i2c_module->DATA.reg;
	}

	return tmp_status;
}
    6e98:	9801      	ldr	r0, [sp, #4]
    6e9a:	b003      	add	sp, #12
    6e9c:	bc3c      	pop	{r2, r3, r4, r5}
    6e9e:	4690      	mov	r8, r2
    6ea0:	4699      	mov	r9, r3
    6ea2:	46a2      	mov	sl, r4
    6ea4:	46ab      	mov	fp, r5
    6ea6:	bdf0      	pop	{r4, r5, r6, r7, pc}
		_i2c_master_send_hs_master_code(module, packet->hs_master_code);
    6ea8:	7a89      	ldrb	r1, [r1, #10]
    6eaa:	4b44      	ldr	r3, [pc, #272]	; (6fbc <_i2c_master_read_packet+0x190>)
    6eac:	4798      	blx	r3
    6eae:	e7cf      	b.n	6e50 <_i2c_master_read_packet+0x24>
		i2c_module->ADDR.reg = (packet->address << 1) |
    6eb0:	464b      	mov	r3, r9
    6eb2:	881b      	ldrh	r3, [r3, #0]
    6eb4:	005b      	lsls	r3, r3, #1
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
    6eb6:	464a      	mov	r2, r9
    6eb8:	7a52      	ldrb	r2, [r2, #9]
    6eba:	0392      	lsls	r2, r2, #14
		i2c_module->ADDR.reg = (packet->address << 1) |
    6ebc:	4313      	orrs	r3, r2
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
    6ebe:	2280      	movs	r2, #128	; 0x80
    6ec0:	0212      	lsls	r2, r2, #8
    6ec2:	4313      	orrs	r3, r2
		i2c_module->ADDR.reg = (packet->address << 1) |
    6ec4:	626b      	str	r3, [r5, #36]	; 0x24
		tmp_status = _i2c_master_wait_for_bus(module);
    6ec6:	0030      	movs	r0, r6
    6ec8:	4b3b      	ldr	r3, [pc, #236]	; (6fb8 <_i2c_master_read_packet+0x18c>)
    6eca:	4798      	blx	r3
    6ecc:	9001      	str	r0, [sp, #4]
		i2c_module->CTRLB.reg &= ~SERCOM_I2CM_CTRLB_ACKACT;
    6ece:	686b      	ldr	r3, [r5, #4]
    6ed0:	4a38      	ldr	r2, [pc, #224]	; (6fb4 <_i2c_master_read_packet+0x188>)
    6ed2:	4013      	ands	r3, r2
    6ed4:	606b      	str	r3, [r5, #4]
		if (tmp_status == STATUS_OK) {
    6ed6:	2800      	cmp	r0, #0
    6ed8:	d1de      	bne.n	6e98 <_i2c_master_read_packet+0x6c>
			tmp_status = _i2c_master_address_response(module);
    6eda:	0030      	movs	r0, r6
    6edc:	4b38      	ldr	r3, [pc, #224]	; (6fc0 <_i2c_master_read_packet+0x194>)
    6ede:	4798      	blx	r3
    6ee0:	9001      	str	r0, [sp, #4]
		if (tmp_status == STATUS_OK) {
    6ee2:	2800      	cmp	r0, #0
    6ee4:	d1d8      	bne.n	6e98 <_i2c_master_read_packet+0x6c>
			i2c_module->ADDR.reg = (((packet->address >> 8) | 0x78) << 1) |
    6ee6:	464b      	mov	r3, r9
    6ee8:	881b      	ldrh	r3, [r3, #0]
    6eea:	0a1b      	lsrs	r3, r3, #8
    6eec:	2278      	movs	r2, #120	; 0x78
    6eee:	4313      	orrs	r3, r2
    6ef0:	005b      	lsls	r3, r3, #1
				(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
    6ef2:	464a      	mov	r2, r9
    6ef4:	7a52      	ldrb	r2, [r2, #9]
    6ef6:	0392      	lsls	r2, r2, #14
    6ef8:	2101      	movs	r1, #1
    6efa:	430a      	orrs	r2, r1
    6efc:	4313      	orrs	r3, r2
			i2c_module->ADDR.reg = (((packet->address >> 8) | 0x78) << 1) |
    6efe:	626b      	str	r3, [r5, #36]	; 0x24
    6f00:	e7b8      	b.n	6e74 <_i2c_master_read_packet+0x48>
		i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
    6f02:	686a      	ldr	r2, [r5, #4]
    6f04:	2380      	movs	r3, #128	; 0x80
    6f06:	02db      	lsls	r3, r3, #11
    6f08:	4313      	orrs	r3, r2
    6f0a:	606b      	str	r3, [r5, #4]
    6f0c:	e7c1      	b.n	6e92 <_i2c_master_read_packet+0x66>
		tmp_status = _i2c_master_address_response(module);
    6f0e:	0030      	movs	r0, r6
    6f10:	4b2b      	ldr	r3, [pc, #172]	; (6fc0 <_i2c_master_read_packet+0x194>)
    6f12:	4798      	blx	r3
    6f14:	9001      	str	r0, [sp, #4]
	if (tmp_status == STATUS_OK) {
    6f16:	2800      	cmp	r0, #0
    6f18:	d1be      	bne.n	6e98 <_i2c_master_read_packet+0x6c>
    6f1a:	3c01      	subs	r4, #1
    6f1c:	b2a4      	uxth	r4, r4
    6f1e:	4680      	mov	r8, r0
		while (tmp_data_length--) {
    6f20:	4b28      	ldr	r3, [pc, #160]	; (6fc4 <_i2c_master_read_packet+0x198>)
    6f22:	469b      	mov	fp, r3
    6f24:	e015      	b.n	6f52 <_i2c_master_read_packet+0x126>
					((sclsm_flag) && (tmp_data_length == 1)))) {
    6f26:	2c01      	cmp	r4, #1
    6f28:	d020      	beq.n	6f6c <_i2c_master_read_packet+0x140>
				_i2c_master_wait_for_sync(module);
    6f2a:	0030      	movs	r0, r6
    6f2c:	4b26      	ldr	r3, [pc, #152]	; (6fc8 <_i2c_master_read_packet+0x19c>)
    6f2e:	4798      	blx	r3
				packet->data[counter++] = i2c_module->DATA.reg;
    6f30:	4643      	mov	r3, r8
    6f32:	1c5f      	adds	r7, r3, #1
    6f34:	b2bf      	uxth	r7, r7
    6f36:	2328      	movs	r3, #40	; 0x28
    6f38:	5ceb      	ldrb	r3, [r5, r3]
    6f3a:	464a      	mov	r2, r9
    6f3c:	6852      	ldr	r2, [r2, #4]
    6f3e:	4641      	mov	r1, r8
    6f40:	5453      	strb	r3, [r2, r1]
				tmp_status = _i2c_master_wait_for_bus(module);
    6f42:	0030      	movs	r0, r6
    6f44:	4b1c      	ldr	r3, [pc, #112]	; (6fb8 <_i2c_master_read_packet+0x18c>)
    6f46:	4798      	blx	r3
    6f48:	3c01      	subs	r4, #1
    6f4a:	b2a4      	uxth	r4, r4
			if (tmp_status != STATUS_OK) {
    6f4c:	2800      	cmp	r0, #0
    6f4e:	d115      	bne.n	6f7c <_i2c_master_read_packet+0x150>
				packet->data[counter++] = i2c_module->DATA.reg;
    6f50:	46b8      	mov	r8, r7
		while (tmp_data_length--) {
    6f52:	455c      	cmp	r4, fp
    6f54:	d014      	beq.n	6f80 <_i2c_master_read_packet+0x154>
			if (!(i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE(2))) {
    6f56:	8b6b      	ldrh	r3, [r5, #26]
    6f58:	069b      	lsls	r3, r3, #26
    6f5a:	d527      	bpl.n	6fac <_i2c_master_read_packet+0x180>
			if (module->send_nack && (((!sclsm_flag) && (tmp_data_length == 0)) ||
    6f5c:	7af3      	ldrb	r3, [r6, #11]
    6f5e:	2b00      	cmp	r3, #0
    6f60:	d0e3      	beq.n	6f2a <_i2c_master_read_packet+0xfe>
    6f62:	4653      	mov	r3, sl
    6f64:	2b00      	cmp	r3, #0
    6f66:	d1de      	bne.n	6f26 <_i2c_master_read_packet+0xfa>
    6f68:	2c00      	cmp	r4, #0
    6f6a:	d1de      	bne.n	6f2a <_i2c_master_read_packet+0xfe>
				i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
    6f6c:	686a      	ldr	r2, [r5, #4]
    6f6e:	2380      	movs	r3, #128	; 0x80
    6f70:	02db      	lsls	r3, r3, #11
    6f72:	4313      	orrs	r3, r2
    6f74:	606b      	str	r3, [r5, #4]
    6f76:	3c01      	subs	r4, #1
    6f78:	b2a4      	uxth	r4, r4
    6f7a:	e7ea      	b.n	6f52 <_i2c_master_read_packet+0x126>
				packet->data[counter++] = i2c_module->DATA.reg;
    6f7c:	46b8      	mov	r8, r7
				tmp_status = _i2c_master_wait_for_bus(module);
    6f7e:	9001      	str	r0, [sp, #4]
		if (module->send_stop) {
    6f80:	7ab3      	ldrb	r3, [r6, #10]
    6f82:	2b00      	cmp	r3, #0
    6f84:	d109      	bne.n	6f9a <_i2c_master_read_packet+0x16e>
		_i2c_master_wait_for_sync(module);
    6f86:	0030      	movs	r0, r6
    6f88:	4b0f      	ldr	r3, [pc, #60]	; (6fc8 <_i2c_master_read_packet+0x19c>)
    6f8a:	4798      	blx	r3
		packet->data[counter] = i2c_module->DATA.reg;
    6f8c:	2328      	movs	r3, #40	; 0x28
    6f8e:	5cea      	ldrb	r2, [r5, r3]
    6f90:	464b      	mov	r3, r9
    6f92:	685b      	ldr	r3, [r3, #4]
    6f94:	4641      	mov	r1, r8
    6f96:	545a      	strb	r2, [r3, r1]
    6f98:	e77e      	b.n	6e98 <_i2c_master_read_packet+0x6c>
			_i2c_master_wait_for_sync(module);
    6f9a:	0030      	movs	r0, r6
    6f9c:	4b0a      	ldr	r3, [pc, #40]	; (6fc8 <_i2c_master_read_packet+0x19c>)
    6f9e:	4798      	blx	r3
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
    6fa0:	686a      	ldr	r2, [r5, #4]
    6fa2:	23c0      	movs	r3, #192	; 0xc0
    6fa4:	029b      	lsls	r3, r3, #10
    6fa6:	4313      	orrs	r3, r2
    6fa8:	606b      	str	r3, [r5, #4]
    6faa:	e7ec      	b.n	6f86 <_i2c_master_read_packet+0x15a>
				return STATUS_ERR_PACKET_COLLISION;
    6fac:	2341      	movs	r3, #65	; 0x41
    6fae:	9301      	str	r3, [sp, #4]
    6fb0:	e772      	b.n	6e98 <_i2c_master_read_packet+0x6c>
    6fb2:	46c0      	nop			; (mov r8, r8)
    6fb4:	fffbffff 	.word	0xfffbffff
    6fb8:	00006de1 	.word	0x00006de1
    6fbc:	00006e0d 	.word	0x00006e0d
    6fc0:	00006db1 	.word	0x00006db1
    6fc4:	0000ffff 	.word	0x0000ffff
    6fc8:	00006ab1 	.word	0x00006ab1

00006fcc <_i2c_master_write_packet>:
 *                                      acknowledged the address
 */
static enum status_code _i2c_master_write_packet(
		struct i2c_master_module *const module,
		struct i2c_master_packet *const packet)
{
    6fcc:	b5f0      	push	{r4, r5, r6, r7, lr}
    6fce:	46de      	mov	lr, fp
    6fd0:	4657      	mov	r7, sl
    6fd2:	464e      	mov	r6, r9
    6fd4:	4645      	mov	r5, r8
    6fd6:	b5e0      	push	{r5, r6, r7, lr}
    6fd8:	b083      	sub	sp, #12
    6fda:	0006      	movs	r6, r0
    6fdc:	000f      	movs	r7, r1
	SercomI2cm *const i2c_module = &(module->hw->I2CM);
    6fde:	6805      	ldr	r5, [r0, #0]

	/* Return value. */
	enum status_code tmp_status;
	uint16_t tmp_data_length = packet->data_length;
    6fe0:	884c      	ldrh	r4, [r1, #2]

	_i2c_master_wait_for_sync(module);
    6fe2:	4b32      	ldr	r3, [pc, #200]	; (70ac <_i2c_master_write_packet+0xe0>)
    6fe4:	4798      	blx	r3

	/* Switch to high speed mode */
	if (packet->high_speed) {
    6fe6:	7a7b      	ldrb	r3, [r7, #9]
    6fe8:	2b00      	cmp	r3, #0
    6fea:	d11d      	bne.n	7028 <_i2c_master_write_packet+0x5c>
		_i2c_master_send_hs_master_code(module, packet->hs_master_code);
	}

	/* Set action to ACK. */
	i2c_module->CTRLB.reg &= ~SERCOM_I2CM_CTRLB_ACKACT;
    6fec:	686b      	ldr	r3, [r5, #4]
    6fee:	4a30      	ldr	r2, [pc, #192]	; (70b0 <_i2c_master_write_packet+0xe4>)
    6ff0:	4013      	ands	r3, r2
    6ff2:	606b      	str	r3, [r5, #4]

	/* Set address and direction bit. Will send start command on bus. */
	if (packet->ten_bit_address) {
    6ff4:	7a3b      	ldrb	r3, [r7, #8]
    6ff6:	2b00      	cmp	r3, #0
    6ff8:	d01b      	beq.n	7032 <_i2c_master_write_packet+0x66>
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_WRITE |
    6ffa:	883b      	ldrh	r3, [r7, #0]
    6ffc:	005b      	lsls	r3, r3, #1
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
    6ffe:	7a7a      	ldrb	r2, [r7, #9]
    7000:	0392      	lsls	r2, r2, #14
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_WRITE |
    7002:	4313      	orrs	r3, r2
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
    7004:	2280      	movs	r2, #128	; 0x80
    7006:	0212      	lsls	r2, r2, #8
    7008:	4313      	orrs	r3, r2
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_WRITE |
    700a:	626b      	str	r3, [r5, #36]	; 0x24
	} else {
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_WRITE |
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos);
	}
	/* Wait for response on bus. */
	tmp_status = _i2c_master_wait_for_bus(module);
    700c:	0030      	movs	r0, r6
    700e:	4b29      	ldr	r3, [pc, #164]	; (70b4 <_i2c_master_write_packet+0xe8>)
    7010:	4798      	blx	r3
    7012:	9001      	str	r0, [sp, #4]

	/* Check for address response error unless previous error is
	 * detected. */
	if (tmp_status == STATUS_OK) {
    7014:	2800      	cmp	r0, #0
    7016:	d013      	beq.n	7040 <_i2c_master_write_packet+0x74>
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
		}
	}

	return tmp_status;
}
    7018:	9801      	ldr	r0, [sp, #4]
    701a:	b003      	add	sp, #12
    701c:	bc3c      	pop	{r2, r3, r4, r5}
    701e:	4690      	mov	r8, r2
    7020:	4699      	mov	r9, r3
    7022:	46a2      	mov	sl, r4
    7024:	46ab      	mov	fp, r5
    7026:	bdf0      	pop	{r4, r5, r6, r7, pc}
		_i2c_master_send_hs_master_code(module, packet->hs_master_code);
    7028:	7ab9      	ldrb	r1, [r7, #10]
    702a:	0030      	movs	r0, r6
    702c:	4b22      	ldr	r3, [pc, #136]	; (70b8 <_i2c_master_write_packet+0xec>)
    702e:	4798      	blx	r3
    7030:	e7dc      	b.n	6fec <_i2c_master_write_packet+0x20>
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_WRITE |
    7032:	883b      	ldrh	r3, [r7, #0]
    7034:	005b      	lsls	r3, r3, #1
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos);
    7036:	7a7a      	ldrb	r2, [r7, #9]
    7038:	0392      	lsls	r2, r2, #14
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_WRITE |
    703a:	4313      	orrs	r3, r2
    703c:	626b      	str	r3, [r5, #36]	; 0x24
    703e:	e7e5      	b.n	700c <_i2c_master_write_packet+0x40>
		tmp_status = _i2c_master_address_response(module);
    7040:	0030      	movs	r0, r6
    7042:	4b1e      	ldr	r3, [pc, #120]	; (70bc <_i2c_master_write_packet+0xf0>)
    7044:	4798      	blx	r3
    7046:	1e03      	subs	r3, r0, #0
    7048:	9001      	str	r0, [sp, #4]
	if (tmp_status == STATUS_OK) {
    704a:	d1e5      	bne.n	7018 <_i2c_master_write_packet+0x4c>
    704c:	46a0      	mov	r8, r4
    704e:	2400      	movs	r4, #0
			if (!(i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE(2))) {
    7050:	3320      	adds	r3, #32
    7052:	4699      	mov	r9, r3
			_i2c_master_wait_for_sync(module);
    7054:	4b15      	ldr	r3, [pc, #84]	; (70ac <_i2c_master_write_packet+0xe0>)
    7056:	469b      	mov	fp, r3
			tmp_status = _i2c_master_wait_for_bus(module);
    7058:	4b16      	ldr	r3, [pc, #88]	; (70b4 <_i2c_master_write_packet+0xe8>)
    705a:	469a      	mov	sl, r3
		while (tmp_data_length--) {
    705c:	4544      	cmp	r4, r8
    705e:	d015      	beq.n	708c <_i2c_master_write_packet+0xc0>
			if (!(i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE(2))) {
    7060:	8b6b      	ldrh	r3, [r5, #26]
    7062:	464a      	mov	r2, r9
    7064:	4213      	tst	r3, r2
    7066:	d01d      	beq.n	70a4 <_i2c_master_write_packet+0xd8>
			_i2c_master_wait_for_sync(module);
    7068:	0030      	movs	r0, r6
    706a:	47d8      	blx	fp
			i2c_module->DATA.reg = packet->data[buffer_counter++];
    706c:	687b      	ldr	r3, [r7, #4]
    706e:	5d1a      	ldrb	r2, [r3, r4]
    7070:	2328      	movs	r3, #40	; 0x28
    7072:	54ea      	strb	r2, [r5, r3]
			tmp_status = _i2c_master_wait_for_bus(module);
    7074:	0030      	movs	r0, r6
    7076:	47d0      	blx	sl
			if (tmp_status != STATUS_OK) {
    7078:	2800      	cmp	r0, #0
    707a:	d106      	bne.n	708a <_i2c_master_write_packet+0xbe>
			if (i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_RXNACK) {
    707c:	8b6b      	ldrh	r3, [r5, #26]
    707e:	3401      	adds	r4, #1
    7080:	075b      	lsls	r3, r3, #29
    7082:	d5eb      	bpl.n	705c <_i2c_master_write_packet+0x90>
				tmp_status = STATUS_ERR_OVERFLOW;
    7084:	231e      	movs	r3, #30
    7086:	9301      	str	r3, [sp, #4]
    7088:	e000      	b.n	708c <_i2c_master_write_packet+0xc0>
			tmp_status = _i2c_master_wait_for_bus(module);
    708a:	9001      	str	r0, [sp, #4]
		if (module->send_stop) {
    708c:	7ab3      	ldrb	r3, [r6, #10]
    708e:	2b00      	cmp	r3, #0
    7090:	d0c2      	beq.n	7018 <_i2c_master_write_packet+0x4c>
			_i2c_master_wait_for_sync(module);
    7092:	0030      	movs	r0, r6
    7094:	4b05      	ldr	r3, [pc, #20]	; (70ac <_i2c_master_write_packet+0xe0>)
    7096:	4798      	blx	r3
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
    7098:	686a      	ldr	r2, [r5, #4]
    709a:	23c0      	movs	r3, #192	; 0xc0
    709c:	029b      	lsls	r3, r3, #10
    709e:	4313      	orrs	r3, r2
    70a0:	606b      	str	r3, [r5, #4]
    70a2:	e7b9      	b.n	7018 <_i2c_master_write_packet+0x4c>
				return STATUS_ERR_PACKET_COLLISION;
    70a4:	2341      	movs	r3, #65	; 0x41
    70a6:	9301      	str	r3, [sp, #4]
    70a8:	e7b6      	b.n	7018 <_i2c_master_write_packet+0x4c>
    70aa:	46c0      	nop			; (mov r8, r8)
    70ac:	00006ab1 	.word	0x00006ab1
    70b0:	fffbffff 	.word	0xfffbffff
    70b4:	00006de1 	.word	0x00006de1
    70b8:	00006e0d 	.word	0x00006e0d
    70bc:	00006db1 	.word	0x00006db1

000070c0 <i2c_master_read_packet_wait>:
{
    70c0:	b510      	push	{r4, lr}
	module->send_stop = true;
    70c2:	2301      	movs	r3, #1
    70c4:	7283      	strb	r3, [r0, #10]
	module->send_nack = true;
    70c6:	72c3      	strb	r3, [r0, #11]
	return _i2c_master_read_packet(module, packet);
    70c8:	4b01      	ldr	r3, [pc, #4]	; (70d0 <i2c_master_read_packet_wait+0x10>)
    70ca:	4798      	blx	r3
}
    70cc:	bd10      	pop	{r4, pc}
    70ce:	46c0      	nop			; (mov r8, r8)
    70d0:	00006e2d 	.word	0x00006e2d

000070d4 <i2c_master_write_packet_wait_no_stop>:
 *                                      more data
 */
enum status_code i2c_master_write_packet_wait_no_stop(
		struct i2c_master_module *const module,
		struct i2c_master_packet *const packet)
{
    70d4:	b510      	push	{r4, lr}
	if (module->buffer_remaining > 0) {
		return STATUS_BUSY;
	}
#endif

	module->send_stop = false;
    70d6:	2300      	movs	r3, #0
    70d8:	7283      	strb	r3, [r0, #10]
	module->send_nack = true;
    70da:	3301      	adds	r3, #1
    70dc:	72c3      	strb	r3, [r0, #11]

	return _i2c_master_write_packet(module, packet);
    70de:	4b01      	ldr	r3, [pc, #4]	; (70e4 <i2c_master_write_packet_wait_no_stop+0x10>)
    70e0:	4798      	blx	r3
}
    70e2:	bd10      	pop	{r4, pc}
    70e4:	00006fcd 	.word	0x00006fcd

000070e8 <long_division>:
/**
 * \internal Calculate 64 bit division, ref can be found in
 * http://en.wikipedia.org/wiki/Division_algorithm#Long_division
 */
static uint64_t long_division(uint64_t n, uint64_t d)
{
    70e8:	b5f0      	push	{r4, r5, r6, r7, lr}
    70ea:	46de      	mov	lr, fp
    70ec:	4657      	mov	r7, sl
    70ee:	464e      	mov	r6, r9
    70f0:	4645      	mov	r5, r8
    70f2:	b5e0      	push	{r5, r6, r7, lr}
    70f4:	b087      	sub	sp, #28
    70f6:	4680      	mov	r8, r0
    70f8:	9104      	str	r1, [sp, #16]
    70fa:	0016      	movs	r6, r2
    70fc:	001f      	movs	r7, r3
	int32_t i;
	uint64_t q = 0, r = 0, bit_shift;
    70fe:	2200      	movs	r2, #0
    7100:	2300      	movs	r3, #0
    7102:	2100      	movs	r1, #0
    7104:	468b      	mov	fp, r1
	for (i = 63; i >= 0; i--) {
    7106:	243f      	movs	r4, #63	; 0x3f
		bit_shift = (uint64_t)1 << i;
    7108:	2001      	movs	r0, #1
    710a:	0021      	movs	r1, r4
    710c:	9600      	str	r6, [sp, #0]
    710e:	9701      	str	r7, [sp, #4]
    7110:	465c      	mov	r4, fp
    7112:	9403      	str	r4, [sp, #12]
    7114:	4644      	mov	r4, r8
    7116:	9405      	str	r4, [sp, #20]
    7118:	e013      	b.n	7142 <long_division+0x5a>
    711a:	2420      	movs	r4, #32
    711c:	1a64      	subs	r4, r4, r1
    711e:	0005      	movs	r5, r0
    7120:	40e5      	lsrs	r5, r4
    7122:	46a8      	mov	r8, r5
    7124:	e014      	b.n	7150 <long_division+0x68>
		if (n & bit_shift) {
			r |= 0x01;
		}

		if (r >= d) {
			r = r - d;
    7126:	9c00      	ldr	r4, [sp, #0]
    7128:	9d01      	ldr	r5, [sp, #4]
    712a:	1b12      	subs	r2, r2, r4
    712c:	41ab      	sbcs	r3, r5
			q |= bit_shift;
    712e:	465c      	mov	r4, fp
    7130:	464d      	mov	r5, r9
    7132:	432c      	orrs	r4, r5
    7134:	46a3      	mov	fp, r4
    7136:	9c03      	ldr	r4, [sp, #12]
    7138:	4645      	mov	r5, r8
    713a:	432c      	orrs	r4, r5
    713c:	9403      	str	r4, [sp, #12]
	for (i = 63; i >= 0; i--) {
    713e:	3901      	subs	r1, #1
    7140:	d325      	bcc.n	718e <long_division+0xa6>
		bit_shift = (uint64_t)1 << i;
    7142:	2420      	movs	r4, #32
    7144:	4264      	negs	r4, r4
    7146:	190c      	adds	r4, r1, r4
    7148:	d4e7      	bmi.n	711a <long_division+0x32>
    714a:	0005      	movs	r5, r0
    714c:	40a5      	lsls	r5, r4
    714e:	46a8      	mov	r8, r5
    7150:	0004      	movs	r4, r0
    7152:	408c      	lsls	r4, r1
    7154:	46a1      	mov	r9, r4
		r = r << 1;
    7156:	1892      	adds	r2, r2, r2
    7158:	415b      	adcs	r3, r3
    715a:	0014      	movs	r4, r2
    715c:	001d      	movs	r5, r3
		if (n & bit_shift) {
    715e:	9e05      	ldr	r6, [sp, #20]
    7160:	464f      	mov	r7, r9
    7162:	403e      	ands	r6, r7
    7164:	46b4      	mov	ip, r6
    7166:	9e04      	ldr	r6, [sp, #16]
    7168:	4647      	mov	r7, r8
    716a:	403e      	ands	r6, r7
    716c:	46b2      	mov	sl, r6
    716e:	4666      	mov	r6, ip
    7170:	4657      	mov	r7, sl
    7172:	433e      	orrs	r6, r7
    7174:	d003      	beq.n	717e <long_division+0x96>
			r |= 0x01;
    7176:	0006      	movs	r6, r0
    7178:	4326      	orrs	r6, r4
    717a:	0032      	movs	r2, r6
    717c:	002b      	movs	r3, r5
		if (r >= d) {
    717e:	9c00      	ldr	r4, [sp, #0]
    7180:	9d01      	ldr	r5, [sp, #4]
    7182:	429d      	cmp	r5, r3
    7184:	d8db      	bhi.n	713e <long_division+0x56>
    7186:	d1ce      	bne.n	7126 <long_division+0x3e>
    7188:	4294      	cmp	r4, r2
    718a:	d8d8      	bhi.n	713e <long_division+0x56>
    718c:	e7cb      	b.n	7126 <long_division+0x3e>
    718e:	9b03      	ldr	r3, [sp, #12]
		}
	}

	return q;
}
    7190:	4658      	mov	r0, fp
    7192:	0019      	movs	r1, r3
    7194:	b007      	add	sp, #28
    7196:	bc3c      	pop	{r2, r3, r4, r5}
    7198:	4690      	mov	r8, r2
    719a:	4699      	mov	r9, r3
    719c:	46a2      	mov	sl, r4
    719e:	46ab      	mov	fp, r5
    71a0:	bdf0      	pop	{r4, r5, r6, r7, pc}

000071a2 <_sercom_get_sync_baud_val>:
 */
enum status_code _sercom_get_sync_baud_val(
		const uint32_t baudrate,
		const uint32_t external_clock,
		uint16_t *const baudvalue)
{
    71a2:	b510      	push	{r4, lr}
	uint16_t baud_calculated = 0;
	uint32_t clock_value = external_clock;


	/* Check if baudrate is outside of valid range */
	if (baudrate > (external_clock / 2)) {
    71a4:	0849      	lsrs	r1, r1, #1
		/* Return with error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
    71a6:	2340      	movs	r3, #64	; 0x40
    71a8:	2400      	movs	r4, #0
	if (baudrate > (external_clock / 2)) {
    71aa:	4281      	cmp	r1, r0
    71ac:	d202      	bcs.n	71b4 <_sercom_get_sync_baud_val+0x12>
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
	} else {
		*baudvalue = baud_calculated;
		return STATUS_OK;
	}
}
    71ae:	0018      	movs	r0, r3
    71b0:	bd10      	pop	{r4, pc}
		baud_calculated++;
    71b2:	001c      	movs	r4, r3
		clock_value = clock_value - baudrate;
    71b4:	1a09      	subs	r1, r1, r0
		baud_calculated++;
    71b6:	1c63      	adds	r3, r4, #1
    71b8:	b29b      	uxth	r3, r3
	while (clock_value >= baudrate) {
    71ba:	4288      	cmp	r0, r1
    71bc:	d9f9      	bls.n	71b2 <_sercom_get_sync_baud_val+0x10>
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
    71be:	2340      	movs	r3, #64	; 0x40
	if (baud_calculated > 0xFF) {
    71c0:	2cff      	cmp	r4, #255	; 0xff
    71c2:	d8f4      	bhi.n	71ae <_sercom_get_sync_baud_val+0xc>
		*baudvalue = baud_calculated;
    71c4:	8014      	strh	r4, [r2, #0]
		return STATUS_OK;
    71c6:	2300      	movs	r3, #0
    71c8:	e7f1      	b.n	71ae <_sercom_get_sync_baud_val+0xc>
    71ca:	Address 0x000071ca is out of bounds.


000071cc <_sercom_get_async_baud_val>:
		const uint32_t baudrate,
		const uint32_t peripheral_clock,
		uint16_t *const baudval,
		enum sercom_asynchronous_operation_mode mode,
		enum sercom_asynchronous_sample_num sample_num)
{
    71cc:	b5f0      	push	{r4, r5, r6, r7, lr}
    71ce:	b083      	sub	sp, #12
    71d0:	000f      	movs	r7, r1
    71d2:	0016      	movs	r6, r2
    71d4:	aa08      	add	r2, sp, #32
    71d6:	7811      	ldrb	r1, [r2, #0]
	uint8_t baud_fp;
	uint32_t baud_int = 0;
	uint64_t temp1;

	/* Check if the baudrate is outside of valid range */
	if ((baudrate * sample_num) > peripheral_clock) {
    71d8:	0004      	movs	r4, r0
    71da:	434c      	muls	r4, r1
		/* Return with error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
    71dc:	2240      	movs	r2, #64	; 0x40
	if ((baudrate * sample_num) > peripheral_clock) {
    71de:	42bc      	cmp	r4, r7
    71e0:	d902      	bls.n	71e8 <_sercom_get_async_baud_val+0x1c>
		baud_calculated = baud_int | (baud_fp << 13);
	}

	*baudval = baud_calculated;
	return STATUS_OK;
}
    71e2:	0010      	movs	r0, r2
    71e4:	b003      	add	sp, #12
    71e6:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if(mode == SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC) {
    71e8:	2b00      	cmp	r3, #0
    71ea:	d114      	bne.n	7216 <_sercom_get_async_baud_val+0x4a>
		temp1 = ((sample_num * (uint64_t)baudrate) << SHIFT);
    71ec:	0002      	movs	r2, r0
    71ee:	0008      	movs	r0, r1
    71f0:	2100      	movs	r1, #0
    71f2:	4c19      	ldr	r4, [pc, #100]	; (7258 <_sercom_get_async_baud_val+0x8c>)
    71f4:	47a0      	blx	r4
    71f6:	0001      	movs	r1, r0
		ratio = long_division(temp1, peripheral_clock);
    71f8:	003a      	movs	r2, r7
    71fa:	2300      	movs	r3, #0
    71fc:	2000      	movs	r0, #0
    71fe:	4c17      	ldr	r4, [pc, #92]	; (725c <_sercom_get_async_baud_val+0x90>)
    7200:	47a0      	blx	r4
		scale = ((uint64_t)1 << SHIFT) - ratio;
    7202:	2200      	movs	r2, #0
    7204:	2301      	movs	r3, #1
    7206:	1a12      	subs	r2, r2, r0
    7208:	418b      	sbcs	r3, r1
		baud_calculated = (65536 * scale) >> SHIFT;
    720a:	0c12      	lsrs	r2, r2, #16
    720c:	041b      	lsls	r3, r3, #16
    720e:	431a      	orrs	r2, r3
	*baudval = baud_calculated;
    7210:	8032      	strh	r2, [r6, #0]
	return STATUS_OK;
    7212:	2200      	movs	r2, #0
    7214:	e7e5      	b.n	71e2 <_sercom_get_async_baud_val+0x16>
	uint64_t baud_calculated = 0;
    7216:	2200      	movs	r2, #0
	} else if(mode == SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL) {
    7218:	2b01      	cmp	r3, #1
    721a:	d1f9      	bne.n	7210 <_sercom_get_async_baud_val+0x44>
		temp1 = ((uint64_t)baudrate * sample_num);
    721c:	000a      	movs	r2, r1
    721e:	2300      	movs	r3, #0
    7220:	2100      	movs	r1, #0
    7222:	4c0d      	ldr	r4, [pc, #52]	; (7258 <_sercom_get_async_baud_val+0x8c>)
    7224:	47a0      	blx	r4
    7226:	0002      	movs	r2, r0
    7228:	000b      	movs	r3, r1
    722a:	9200      	str	r2, [sp, #0]
    722c:	9301      	str	r3, [sp, #4]
		baud_int = long_division( peripheral_clock, temp1);
    722e:	0038      	movs	r0, r7
    7230:	2100      	movs	r1, #0
    7232:	4c0a      	ldr	r4, [pc, #40]	; (725c <_sercom_get_async_baud_val+0x90>)
    7234:	47a0      	blx	r4
    7236:	0005      	movs	r5, r0
		if(baud_int > BAUD_INT_MAX) {
    7238:	2380      	movs	r3, #128	; 0x80
    723a:	019b      	lsls	r3, r3, #6
				return STATUS_ERR_BAUDRATE_UNAVAILABLE;
    723c:	2240      	movs	r2, #64	; 0x40
		if(baud_int > BAUD_INT_MAX) {
    723e:	4298      	cmp	r0, r3
    7240:	d8cf      	bhi.n	71e2 <_sercom_get_async_baud_val+0x16>
		temp1 = long_division( 8 * (uint64_t)peripheral_clock, temp1);
    7242:	0f79      	lsrs	r1, r7, #29
    7244:	00f8      	lsls	r0, r7, #3
    7246:	9a00      	ldr	r2, [sp, #0]
    7248:	9b01      	ldr	r3, [sp, #4]
    724a:	47a0      	blx	r4
		baud_fp = temp1 - 8 * baud_int;
    724c:	00ea      	lsls	r2, r5, #3
    724e:	1a82      	subs	r2, r0, r2
		baud_calculated = baud_int | (baud_fp << 13);
    7250:	b2d2      	uxtb	r2, r2
    7252:	0352      	lsls	r2, r2, #13
    7254:	432a      	orrs	r2, r5
    7256:	e7db      	b.n	7210 <_sercom_get_async_baud_val+0x44>
    7258:	00012821 	.word	0x00012821
    725c:	000070e9 	.word	0x000070e9

00007260 <sercom_set_gclk_generator>:
 *                                         forced.
 */
enum status_code sercom_set_gclk_generator(
		const enum gclk_generator generator_source,
		const bool force_change)
{
    7260:	b510      	push	{r4, lr}
    7262:	b082      	sub	sp, #8
    7264:	0004      	movs	r4, r0
	/* Check if valid option */
	if (!_sercom_config.generator_is_set || force_change) {
    7266:	4b0e      	ldr	r3, [pc, #56]	; (72a0 <sercom_set_gclk_generator+0x40>)
    7268:	781b      	ldrb	r3, [r3, #0]
    726a:	2b00      	cmp	r3, #0
    726c:	d007      	beq.n	727e <sercom_set_gclk_generator+0x1e>
    726e:	2900      	cmp	r1, #0
    7270:	d105      	bne.n	727e <sercom_set_gclk_generator+0x1e>
		/* Save config */
		_sercom_config.generator_source = generator_source;
		_sercom_config.generator_is_set = true;

		return STATUS_OK;
	} else if (generator_source == _sercom_config.generator_source) {
    7272:	4b0b      	ldr	r3, [pc, #44]	; (72a0 <sercom_set_gclk_generator+0x40>)
    7274:	785b      	ldrb	r3, [r3, #1]
    7276:	4283      	cmp	r3, r0
    7278:	d010      	beq.n	729c <sercom_set_gclk_generator+0x3c>
		/* Return status OK if same config */
		return STATUS_OK;
	}

	/* Return invalid config to already initialized GCLK */
	return STATUS_ERR_ALREADY_INITIALIZED;
    727a:	201d      	movs	r0, #29
    727c:	e00c      	b.n	7298 <sercom_set_gclk_generator+0x38>
		gclk_chan_conf.source_generator = generator_source;
    727e:	a901      	add	r1, sp, #4
    7280:	700c      	strb	r4, [r1, #0]
		system_gclk_chan_set_config(SERCOM_GCLK_ID, &gclk_chan_conf);
    7282:	2013      	movs	r0, #19
    7284:	4b07      	ldr	r3, [pc, #28]	; (72a4 <sercom_set_gclk_generator+0x44>)
    7286:	4798      	blx	r3
		system_gclk_chan_enable(SERCOM_GCLK_ID);
    7288:	2013      	movs	r0, #19
    728a:	4b07      	ldr	r3, [pc, #28]	; (72a8 <sercom_set_gclk_generator+0x48>)
    728c:	4798      	blx	r3
		_sercom_config.generator_source = generator_source;
    728e:	4b04      	ldr	r3, [pc, #16]	; (72a0 <sercom_set_gclk_generator+0x40>)
    7290:	705c      	strb	r4, [r3, #1]
		_sercom_config.generator_is_set = true;
    7292:	2201      	movs	r2, #1
    7294:	701a      	strb	r2, [r3, #0]
		return STATUS_OK;
    7296:	2000      	movs	r0, #0
}
    7298:	b002      	add	sp, #8
    729a:	bd10      	pop	{r4, pc}
		return STATUS_OK;
    729c:	2000      	movs	r0, #0
    729e:	e7fb      	b.n	7298 <sercom_set_gclk_generator+0x38>
    72a0:	20000144 	.word	0x20000144
    72a4:	00008629 	.word	0x00008629
    72a8:	0000859d 	.word	0x0000859d

000072ac <_sercom_get_default_pad>:
 */
uint32_t _sercom_get_default_pad(
		Sercom *const sercom_module,
		const uint8_t pad)
{
	switch ((uintptr_t)sercom_module) {
    72ac:	4b40      	ldr	r3, [pc, #256]	; (73b0 <_sercom_get_default_pad+0x104>)
    72ae:	4298      	cmp	r0, r3
    72b0:	d031      	beq.n	7316 <_sercom_get_default_pad+0x6a>
    72b2:	d90a      	bls.n	72ca <_sercom_get_default_pad+0x1e>
    72b4:	4b3f      	ldr	r3, [pc, #252]	; (73b4 <_sercom_get_default_pad+0x108>)
    72b6:	4298      	cmp	r0, r3
    72b8:	d04d      	beq.n	7356 <_sercom_get_default_pad+0xaa>
    72ba:	4b3f      	ldr	r3, [pc, #252]	; (73b8 <_sercom_get_default_pad+0x10c>)
    72bc:	4298      	cmp	r0, r3
    72be:	d05a      	beq.n	7376 <_sercom_get_default_pad+0xca>
    72c0:	4b3e      	ldr	r3, [pc, #248]	; (73bc <_sercom_get_default_pad+0x110>)
    72c2:	4298      	cmp	r0, r3
    72c4:	d037      	beq.n	7336 <_sercom_get_default_pad+0x8a>
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
	}

	Assert(false);
	return 0;
    72c6:	2000      	movs	r0, #0
}
    72c8:	4770      	bx	lr
	switch ((uintptr_t)sercom_module) {
    72ca:	4b3d      	ldr	r3, [pc, #244]	; (73c0 <_sercom_get_default_pad+0x114>)
    72cc:	4298      	cmp	r0, r3
    72ce:	d00c      	beq.n	72ea <_sercom_get_default_pad+0x3e>
    72d0:	4b3c      	ldr	r3, [pc, #240]	; (73c4 <_sercom_get_default_pad+0x118>)
    72d2:	4298      	cmp	r0, r3
    72d4:	d1f7      	bne.n	72c6 <_sercom_get_default_pad+0x1a>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    72d6:	2901      	cmp	r1, #1
    72d8:	d017      	beq.n	730a <_sercom_get_default_pad+0x5e>
    72da:	2900      	cmp	r1, #0
    72dc:	d05d      	beq.n	739a <_sercom_get_default_pad+0xee>
    72de:	2902      	cmp	r1, #2
    72e0:	d015      	beq.n	730e <_sercom_get_default_pad+0x62>
    72e2:	2903      	cmp	r1, #3
    72e4:	d015      	beq.n	7312 <_sercom_get_default_pad+0x66>
	return 0;
    72e6:	2000      	movs	r0, #0
    72e8:	e7ee      	b.n	72c8 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    72ea:	2901      	cmp	r1, #1
    72ec:	d007      	beq.n	72fe <_sercom_get_default_pad+0x52>
    72ee:	2900      	cmp	r1, #0
    72f0:	d051      	beq.n	7396 <_sercom_get_default_pad+0xea>
    72f2:	2902      	cmp	r1, #2
    72f4:	d005      	beq.n	7302 <_sercom_get_default_pad+0x56>
    72f6:	2903      	cmp	r1, #3
    72f8:	d005      	beq.n	7306 <_sercom_get_default_pad+0x5a>
	return 0;
    72fa:	2000      	movs	r0, #0
    72fc:	e7e4      	b.n	72c8 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    72fe:	4832      	ldr	r0, [pc, #200]	; (73c8 <_sercom_get_default_pad+0x11c>)
    7300:	e7e2      	b.n	72c8 <_sercom_get_default_pad+0x1c>
    7302:	4832      	ldr	r0, [pc, #200]	; (73cc <_sercom_get_default_pad+0x120>)
    7304:	e7e0      	b.n	72c8 <_sercom_get_default_pad+0x1c>
    7306:	4832      	ldr	r0, [pc, #200]	; (73d0 <_sercom_get_default_pad+0x124>)
    7308:	e7de      	b.n	72c8 <_sercom_get_default_pad+0x1c>
    730a:	4832      	ldr	r0, [pc, #200]	; (73d4 <_sercom_get_default_pad+0x128>)
    730c:	e7dc      	b.n	72c8 <_sercom_get_default_pad+0x1c>
    730e:	4832      	ldr	r0, [pc, #200]	; (73d8 <_sercom_get_default_pad+0x12c>)
    7310:	e7da      	b.n	72c8 <_sercom_get_default_pad+0x1c>
    7312:	4832      	ldr	r0, [pc, #200]	; (73dc <_sercom_get_default_pad+0x130>)
    7314:	e7d8      	b.n	72c8 <_sercom_get_default_pad+0x1c>
    7316:	2901      	cmp	r1, #1
    7318:	d007      	beq.n	732a <_sercom_get_default_pad+0x7e>
    731a:	2900      	cmp	r1, #0
    731c:	d03f      	beq.n	739e <_sercom_get_default_pad+0xf2>
    731e:	2902      	cmp	r1, #2
    7320:	d005      	beq.n	732e <_sercom_get_default_pad+0x82>
    7322:	2903      	cmp	r1, #3
    7324:	d005      	beq.n	7332 <_sercom_get_default_pad+0x86>
	return 0;
    7326:	2000      	movs	r0, #0
    7328:	e7ce      	b.n	72c8 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    732a:	482d      	ldr	r0, [pc, #180]	; (73e0 <_sercom_get_default_pad+0x134>)
    732c:	e7cc      	b.n	72c8 <_sercom_get_default_pad+0x1c>
    732e:	482d      	ldr	r0, [pc, #180]	; (73e4 <_sercom_get_default_pad+0x138>)
    7330:	e7ca      	b.n	72c8 <_sercom_get_default_pad+0x1c>
    7332:	482d      	ldr	r0, [pc, #180]	; (73e8 <_sercom_get_default_pad+0x13c>)
    7334:	e7c8      	b.n	72c8 <_sercom_get_default_pad+0x1c>
    7336:	2901      	cmp	r1, #1
    7338:	d007      	beq.n	734a <_sercom_get_default_pad+0x9e>
    733a:	2900      	cmp	r1, #0
    733c:	d031      	beq.n	73a2 <_sercom_get_default_pad+0xf6>
    733e:	2902      	cmp	r1, #2
    7340:	d005      	beq.n	734e <_sercom_get_default_pad+0xa2>
    7342:	2903      	cmp	r1, #3
    7344:	d005      	beq.n	7352 <_sercom_get_default_pad+0xa6>
	return 0;
    7346:	2000      	movs	r0, #0
    7348:	e7be      	b.n	72c8 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    734a:	4828      	ldr	r0, [pc, #160]	; (73ec <_sercom_get_default_pad+0x140>)
    734c:	e7bc      	b.n	72c8 <_sercom_get_default_pad+0x1c>
    734e:	4828      	ldr	r0, [pc, #160]	; (73f0 <_sercom_get_default_pad+0x144>)
    7350:	e7ba      	b.n	72c8 <_sercom_get_default_pad+0x1c>
    7352:	4828      	ldr	r0, [pc, #160]	; (73f4 <_sercom_get_default_pad+0x148>)
    7354:	e7b8      	b.n	72c8 <_sercom_get_default_pad+0x1c>
    7356:	2901      	cmp	r1, #1
    7358:	d007      	beq.n	736a <_sercom_get_default_pad+0xbe>
    735a:	2900      	cmp	r1, #0
    735c:	d023      	beq.n	73a6 <_sercom_get_default_pad+0xfa>
    735e:	2902      	cmp	r1, #2
    7360:	d005      	beq.n	736e <_sercom_get_default_pad+0xc2>
    7362:	2903      	cmp	r1, #3
    7364:	d005      	beq.n	7372 <_sercom_get_default_pad+0xc6>
	return 0;
    7366:	2000      	movs	r0, #0
    7368:	e7ae      	b.n	72c8 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    736a:	4823      	ldr	r0, [pc, #140]	; (73f8 <_sercom_get_default_pad+0x14c>)
    736c:	e7ac      	b.n	72c8 <_sercom_get_default_pad+0x1c>
    736e:	4823      	ldr	r0, [pc, #140]	; (73fc <_sercom_get_default_pad+0x150>)
    7370:	e7aa      	b.n	72c8 <_sercom_get_default_pad+0x1c>
    7372:	4823      	ldr	r0, [pc, #140]	; (7400 <_sercom_get_default_pad+0x154>)
    7374:	e7a8      	b.n	72c8 <_sercom_get_default_pad+0x1c>
    7376:	2901      	cmp	r1, #1
    7378:	d007      	beq.n	738a <_sercom_get_default_pad+0xde>
    737a:	2900      	cmp	r1, #0
    737c:	d015      	beq.n	73aa <_sercom_get_default_pad+0xfe>
    737e:	2902      	cmp	r1, #2
    7380:	d005      	beq.n	738e <_sercom_get_default_pad+0xe2>
    7382:	2903      	cmp	r1, #3
    7384:	d005      	beq.n	7392 <_sercom_get_default_pad+0xe6>
	return 0;
    7386:	2000      	movs	r0, #0
    7388:	e79e      	b.n	72c8 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    738a:	481e      	ldr	r0, [pc, #120]	; (7404 <_sercom_get_default_pad+0x158>)
    738c:	e79c      	b.n	72c8 <_sercom_get_default_pad+0x1c>
    738e:	481e      	ldr	r0, [pc, #120]	; (7408 <_sercom_get_default_pad+0x15c>)
    7390:	e79a      	b.n	72c8 <_sercom_get_default_pad+0x1c>
    7392:	481e      	ldr	r0, [pc, #120]	; (740c <_sercom_get_default_pad+0x160>)
    7394:	e798      	b.n	72c8 <_sercom_get_default_pad+0x1c>
    7396:	481e      	ldr	r0, [pc, #120]	; (7410 <_sercom_get_default_pad+0x164>)
    7398:	e796      	b.n	72c8 <_sercom_get_default_pad+0x1c>
    739a:	2003      	movs	r0, #3
    739c:	e794      	b.n	72c8 <_sercom_get_default_pad+0x1c>
    739e:	481d      	ldr	r0, [pc, #116]	; (7414 <_sercom_get_default_pad+0x168>)
    73a0:	e792      	b.n	72c8 <_sercom_get_default_pad+0x1c>
    73a2:	481d      	ldr	r0, [pc, #116]	; (7418 <_sercom_get_default_pad+0x16c>)
    73a4:	e790      	b.n	72c8 <_sercom_get_default_pad+0x1c>
    73a6:	481d      	ldr	r0, [pc, #116]	; (741c <_sercom_get_default_pad+0x170>)
    73a8:	e78e      	b.n	72c8 <_sercom_get_default_pad+0x1c>
    73aa:	481d      	ldr	r0, [pc, #116]	; (7420 <_sercom_get_default_pad+0x174>)
    73ac:	e78c      	b.n	72c8 <_sercom_get_default_pad+0x1c>
    73ae:	46c0      	nop			; (mov r8, r8)
    73b0:	42001000 	.word	0x42001000
    73b4:	42001800 	.word	0x42001800
    73b8:	42001c00 	.word	0x42001c00
    73bc:	42001400 	.word	0x42001400
    73c0:	42000800 	.word	0x42000800
    73c4:	42000c00 	.word	0x42000c00
    73c8:	00050003 	.word	0x00050003
    73cc:	00060003 	.word	0x00060003
    73d0:	00070003 	.word	0x00070003
    73d4:	00010003 	.word	0x00010003
    73d8:	001e0003 	.word	0x001e0003
    73dc:	001f0003 	.word	0x001f0003
    73e0:	000d0002 	.word	0x000d0002
    73e4:	000e0002 	.word	0x000e0002
    73e8:	000f0002 	.word	0x000f0002
    73ec:	00110003 	.word	0x00110003
    73f0:	00120003 	.word	0x00120003
    73f4:	00130003 	.word	0x00130003
    73f8:	003f0005 	.word	0x003f0005
    73fc:	003e0005 	.word	0x003e0005
    7400:	00520005 	.word	0x00520005
    7404:	00170003 	.word	0x00170003
    7408:	00180003 	.word	0x00180003
    740c:	00190003 	.word	0x00190003
    7410:	00040003 	.word	0x00040003
    7414:	000c0002 	.word	0x000c0002
    7418:	00100003 	.word	0x00100003
    741c:	00530005 	.word	0x00530005
    7420:	00160003 	.word	0x00160003

00007424 <_sercom_get_sercom_inst_index>:
 *
 * \return Index of given instance.
 */
uint8_t _sercom_get_sercom_inst_index(
		Sercom *const sercom_instance)
{
    7424:	b530      	push	{r4, r5, lr}
    7426:	b087      	sub	sp, #28
	/* Save all available SERCOM instances for compare */
	Sercom *sercom_instances[SERCOM_INST_NUM] = SERCOM_INSTS;
    7428:	4b0b      	ldr	r3, [pc, #44]	; (7458 <_sercom_get_sercom_inst_index+0x34>)
    742a:	466a      	mov	r2, sp
    742c:	cb32      	ldmia	r3!, {r1, r4, r5}
    742e:	c232      	stmia	r2!, {r1, r4, r5}
    7430:	cb32      	ldmia	r3!, {r1, r4, r5}
    7432:	c232      	stmia	r2!, {r1, r4, r5}

	/* Find index for sercom instance */
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
		if ((uintptr_t)sercom_instance == (uintptr_t)sercom_instances[i]) {
    7434:	9b00      	ldr	r3, [sp, #0]
    7436:	4283      	cmp	r3, r0
    7438:	d00b      	beq.n	7452 <_sercom_get_sercom_inst_index+0x2e>
    743a:	2301      	movs	r3, #1
    743c:	009a      	lsls	r2, r3, #2
    743e:	4669      	mov	r1, sp
    7440:	5852      	ldr	r2, [r2, r1]
    7442:	4282      	cmp	r2, r0
    7444:	d006      	beq.n	7454 <_sercom_get_sercom_inst_index+0x30>
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    7446:	3301      	adds	r3, #1
    7448:	2b06      	cmp	r3, #6
    744a:	d1f7      	bne.n	743c <_sercom_get_sercom_inst_index+0x18>
		}
	}

	/* Invalid data given */
	Assert(false);
	return 0;
    744c:	2000      	movs	r0, #0
}
    744e:	b007      	add	sp, #28
    7450:	bd30      	pop	{r4, r5, pc}
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    7452:	2300      	movs	r3, #0
			return i;
    7454:	b2d8      	uxtb	r0, r3
    7456:	e7fa      	b.n	744e <_sercom_get_sercom_inst_index+0x2a>
    7458:	0001600c 	.word	0x0001600c

0000745c <_sercom_default_handler>:
 */
static void _sercom_default_handler(
		const uint8_t instance)
{
	Assert(false);
}
    745c:	4770      	bx	lr
    745e:	Address 0x0000745e is out of bounds.


00007460 <_sercom_set_handler>:
 * \param[in]  interrupt_handler  Pointer to instance callback handler.
 */
void _sercom_set_handler(
		const uint8_t instance,
		const sercom_handler_t interrupt_handler)
{
    7460:	b5f0      	push	{r4, r5, r6, r7, lr}
	/* Initialize handlers with default handler and device instances with 0 */
	if (_handler_table_initialized == false) {
    7462:	4b0a      	ldr	r3, [pc, #40]	; (748c <_sercom_set_handler+0x2c>)
    7464:	781b      	ldrb	r3, [r3, #0]
    7466:	2b00      	cmp	r3, #0
    7468:	d10c      	bne.n	7484 <_sercom_set_handler+0x24>
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
			_sercom_interrupt_handlers[i] = &_sercom_default_handler;
    746a:	4f09      	ldr	r7, [pc, #36]	; (7490 <_sercom_set_handler+0x30>)
    746c:	4e09      	ldr	r6, [pc, #36]	; (7494 <_sercom_set_handler+0x34>)
			_sercom_instances[i] = NULL;
    746e:	4d0a      	ldr	r5, [pc, #40]	; (7498 <_sercom_set_handler+0x38>)
    7470:	2400      	movs	r4, #0
			_sercom_interrupt_handlers[i] = &_sercom_default_handler;
    7472:	51de      	str	r6, [r3, r7]
			_sercom_instances[i] = NULL;
    7474:	195a      	adds	r2, r3, r5
    7476:	6014      	str	r4, [r2, #0]
    7478:	3304      	adds	r3, #4
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    747a:	2b18      	cmp	r3, #24
    747c:	d1f9      	bne.n	7472 <_sercom_set_handler+0x12>
		}

		_handler_table_initialized = true;
    747e:	2201      	movs	r2, #1
    7480:	4b02      	ldr	r3, [pc, #8]	; (748c <_sercom_set_handler+0x2c>)
    7482:	701a      	strb	r2, [r3, #0]
	}

	/* Save interrupt handler */
	_sercom_interrupt_handlers[instance] = interrupt_handler;
    7484:	0080      	lsls	r0, r0, #2
    7486:	4b02      	ldr	r3, [pc, #8]	; (7490 <_sercom_set_handler+0x30>)
    7488:	50c1      	str	r1, [r0, r3]
}
    748a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    748c:	20000146 	.word	0x20000146
    7490:	20000148 	.word	0x20000148
    7494:	0000745d 	.word	0x0000745d
    7498:	20001d80 	.word	0x20001d80

0000749c <_sercom_get_interrupt_vector>:
 * \retval SYSTEM_INTERRUPT_MODULE_SERCOM6
 * \retval SYSTEM_INTERRUPT_MODULE_SERCOM7
 */
enum system_interrupt_vector _sercom_get_interrupt_vector(
		Sercom *const sercom_instance)
{
    749c:	b500      	push	{lr}
    749e:	b083      	sub	sp, #12
	const uint8_t sercom_int_vectors[SERCOM_INST_NUM] =
    74a0:	2309      	movs	r3, #9
    74a2:	466a      	mov	r2, sp
    74a4:	7013      	strb	r3, [r2, #0]
    74a6:	3301      	adds	r3, #1
    74a8:	7053      	strb	r3, [r2, #1]
    74aa:	3301      	adds	r3, #1
    74ac:	7093      	strb	r3, [r2, #2]
    74ae:	3301      	adds	r3, #1
    74b0:	70d3      	strb	r3, [r2, #3]
    74b2:	3301      	adds	r3, #1
    74b4:	7113      	strb	r3, [r2, #4]
    74b6:	3301      	adds	r3, #1
    74b8:	7153      	strb	r3, [r2, #5]
		{
			MREPEAT(SERCOM_INST_NUM, _SERCOM_INTERRUPT_VECT_NUM, ~)
		};

	/* Retrieve the index of the SERCOM being requested */
	uint8_t instance_index = _sercom_get_sercom_inst_index(sercom_instance);
    74ba:	4b03      	ldr	r3, [pc, #12]	; (74c8 <_sercom_get_interrupt_vector+0x2c>)
    74bc:	4798      	blx	r3

	/* Get the vector number from the lookup table for the requested SERCOM */
	return (enum system_interrupt_vector)sercom_int_vectors[instance_index];
    74be:	466b      	mov	r3, sp
    74c0:	5618      	ldrsb	r0, [r3, r0]
}
    74c2:	b003      	add	sp, #12
    74c4:	bd00      	pop	{pc}
    74c6:	46c0      	nop			; (mov r8, r8)
    74c8:	00007425 	.word	0x00007425

000074cc <SERCOM0_Handler>:

/** Auto-generate a set of interrupt handlers for each SERCOM in the device */
MREPEAT(SERCOM_INST_NUM, _SERCOM_INTERRUPT_HANDLER, ~)
    74cc:	b510      	push	{r4, lr}
    74ce:	4b02      	ldr	r3, [pc, #8]	; (74d8 <SERCOM0_Handler+0xc>)
    74d0:	681b      	ldr	r3, [r3, #0]
    74d2:	2000      	movs	r0, #0
    74d4:	4798      	blx	r3
    74d6:	bd10      	pop	{r4, pc}
    74d8:	20000148 	.word	0x20000148

000074dc <SERCOM1_Handler>:
    74dc:	b510      	push	{r4, lr}
    74de:	4b02      	ldr	r3, [pc, #8]	; (74e8 <SERCOM1_Handler+0xc>)
    74e0:	685b      	ldr	r3, [r3, #4]
    74e2:	2001      	movs	r0, #1
    74e4:	4798      	blx	r3
    74e6:	bd10      	pop	{r4, pc}
    74e8:	20000148 	.word	0x20000148

000074ec <SERCOM2_Handler>:
    74ec:	b510      	push	{r4, lr}
    74ee:	4b02      	ldr	r3, [pc, #8]	; (74f8 <SERCOM2_Handler+0xc>)
    74f0:	689b      	ldr	r3, [r3, #8]
    74f2:	2002      	movs	r0, #2
    74f4:	4798      	blx	r3
    74f6:	bd10      	pop	{r4, pc}
    74f8:	20000148 	.word	0x20000148

000074fc <SERCOM3_Handler>:
    74fc:	b510      	push	{r4, lr}
    74fe:	4b02      	ldr	r3, [pc, #8]	; (7508 <SERCOM3_Handler+0xc>)
    7500:	68db      	ldr	r3, [r3, #12]
    7502:	2003      	movs	r0, #3
    7504:	4798      	blx	r3
    7506:	bd10      	pop	{r4, pc}
    7508:	20000148 	.word	0x20000148

0000750c <SERCOM4_Handler>:
    750c:	b510      	push	{r4, lr}
    750e:	4b02      	ldr	r3, [pc, #8]	; (7518 <SERCOM4_Handler+0xc>)
    7510:	691b      	ldr	r3, [r3, #16]
    7512:	2004      	movs	r0, #4
    7514:	4798      	blx	r3
    7516:	bd10      	pop	{r4, pc}
    7518:	20000148 	.word	0x20000148

0000751c <SERCOM5_Handler>:
    751c:	b510      	push	{r4, lr}
    751e:	4b02      	ldr	r3, [pc, #8]	; (7528 <SERCOM5_Handler+0xc>)
    7520:	695b      	ldr	r3, [r3, #20]
    7522:	2005      	movs	r0, #5
    7524:	4798      	blx	r3
    7526:	bd10      	pop	{r4, pc}
    7528:	20000148 	.word	0x20000148

0000752c <spi_init>:
 */
enum status_code spi_init(
		struct spi_module *const module,
		Sercom *const hw,
		const struct spi_config *const config)
{
    752c:	b5f0      	push	{r4, r5, r6, r7, lr}
    752e:	46d6      	mov	lr, sl
    7530:	464f      	mov	r7, r9
    7532:	b580      	push	{r7, lr}
    7534:	b08b      	sub	sp, #44	; 0x2c
    7536:	4681      	mov	r9, r0
    7538:	000f      	movs	r7, r1
    753a:	0014      	movs	r4, r2
	Assert(module);
	Assert(hw);
	Assert(config);

	/* Initialize device instance */
	module->hw = hw;
    753c:	0003      	movs	r3, r0
    753e:	6019      	str	r1, [r3, #0]

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if module is enabled. */
	if (spi_module->CTRLA.reg & SERCOM_SPI_CTRLA_ENABLE) {
    7540:	680b      	ldr	r3, [r1, #0]
    7542:	079b      	lsls	r3, r3, #30
    7544:	d409      	bmi.n	755a <spi_init+0x2e>
		return STATUS_ERR_DENIED;
#  endif
	}

	/* Check if reset is in progress. */
	if (spi_module->CTRLA.reg & SERCOM_SPI_CTRLA_SWRST){
    7546:	680b      	ldr	r3, [r1, #0]
		return STATUS_BUSY;
    7548:	2005      	movs	r0, #5
	if (spi_module->CTRLA.reg & SERCOM_SPI_CTRLA_SWRST){
    754a:	07db      	lsls	r3, r3, #31
    754c:	d400      	bmi.n	7550 <spi_init+0x24>
    754e:	e098      	b.n	7682 <spi_init+0x156>
	_sercom_instances[instance_index] = module;
#endif

	/* Write configuration to module and return status code */
	return _spi_set_config(module, config);
}
    7550:	b00b      	add	sp, #44	; 0x2c
    7552:	bc0c      	pop	{r2, r3}
    7554:	4691      	mov	r9, r2
    7556:	469a      	mov	sl, r3
    7558:	bdf0      	pop	{r4, r5, r6, r7, pc}
	uint32_t pad_pinmuxes[] = {
    755a:	6a93      	ldr	r3, [r2, #40]	; 0x28
    755c:	9305      	str	r3, [sp, #20]
    755e:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
    7560:	9306      	str	r3, [sp, #24]
    7562:	6b13      	ldr	r3, [r2, #48]	; 0x30
    7564:	9307      	str	r3, [sp, #28]
    7566:	6b53      	ldr	r3, [r2, #52]	; 0x34
    7568:	9308      	str	r3, [sp, #32]
    756a:	2600      	movs	r6, #0
		uint32_t current_pinmux = pad_pinmuxes[pad];
    756c:	ab05      	add	r3, sp, #20
    756e:	9301      	str	r3, [sp, #4]
    7570:	e00a      	b.n	7588 <spi_init+0x5c>
			current_pinmux = _sercom_get_default_pad(hw, pad);
    7572:	0038      	movs	r0, r7
    7574:	4b93      	ldr	r3, [pc, #588]	; (77c4 <spi_init+0x298>)
    7576:	4798      	blx	r3
    7578:	e00c      	b.n	7594 <spi_init+0x68>

	if (pin_index & 1) {
		return (pmux_reg & PORT_PMUX_PMUXO_Msk) >> PORT_PMUX_PMUXO_Pos;
	}
	else {
		return (pmux_reg & PORT_PMUX_PMUXE_Msk) >> PORT_PMUX_PMUXE_Pos;
    757a:	230f      	movs	r3, #15
    757c:	4018      	ands	r0, r3
		if ((current_pinmux & 0xFFFF) !=
    757e:	4281      	cmp	r1, r0
    7580:	d12d      	bne.n	75de <spi_init+0xb2>
    7582:	3601      	adds	r6, #1
	for (uint8_t pad = 0; pad < 4; pad++) {
    7584:	2e04      	cmp	r6, #4
    7586:	d02f      	beq.n	75e8 <spi_init+0xbc>
    7588:	b2f1      	uxtb	r1, r6
		uint32_t current_pinmux = pad_pinmuxes[pad];
    758a:	00b3      	lsls	r3, r6, #2
    758c:	9a01      	ldr	r2, [sp, #4]
    758e:	5898      	ldr	r0, [r3, r2]
		if (current_pinmux == PINMUX_DEFAULT) {
    7590:	2800      	cmp	r0, #0
    7592:	d0ee      	beq.n	7572 <spi_init+0x46>
		if (current_pinmux == PINMUX_UNUSED) {
    7594:	1c43      	adds	r3, r0, #1
    7596:	d0f4      	beq.n	7582 <spi_init+0x56>
		if ((current_pinmux & 0xFFFF) !=
    7598:	0401      	lsls	r1, r0, #16
    759a:	0c09      	lsrs	r1, r1, #16
				system_pinmux_pin_get_mux_position(current_pinmux >> 16)) {
    759c:	0c00      	lsrs	r0, r0, #16
	if (port_index < PORT_INST_NUM) {
    759e:	b2c3      	uxtb	r3, r0
    75a0:	469c      	mov	ip, r3
		return NULL;
    75a2:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
    75a4:	0602      	lsls	r2, r0, #24
    75a6:	d405      	bmi.n	75b4 <spi_init+0x88>
		return &(ports[port_index]->Group[group_index]);
    75a8:	4663      	mov	r3, ip
    75aa:	095b      	lsrs	r3, r3, #5
    75ac:	01db      	lsls	r3, r3, #7
    75ae:	4a86      	ldr	r2, [pc, #536]	; (77c8 <spi_init+0x29c>)
    75b0:	4692      	mov	sl, r2
    75b2:	4453      	add	r3, sl
	uint32_t pin_index = (gpio_pin % 32);
    75b4:	221f      	movs	r2, #31
    75b6:	4660      	mov	r0, ip
    75b8:	4002      	ands	r2, r0
	if (!(port->PINCFG[pin_index].reg & PORT_PINCFG_PMUXEN)) {
    75ba:	1898      	adds	r0, r3, r2
    75bc:	3040      	adds	r0, #64	; 0x40
    75be:	7800      	ldrb	r0, [r0, #0]
    75c0:	4682      	mov	sl, r0
		return SYSTEM_PINMUX_GPIO;
    75c2:	2080      	movs	r0, #128	; 0x80
	if (!(port->PINCFG[pin_index].reg & PORT_PINCFG_PMUXEN)) {
    75c4:	4655      	mov	r5, sl
    75c6:	07ed      	lsls	r5, r5, #31
    75c8:	d5d9      	bpl.n	757e <spi_init+0x52>
	uint32_t pmux_reg = port->PMUX[pin_index / 2].reg;
    75ca:	0852      	lsrs	r2, r2, #1
    75cc:	189b      	adds	r3, r3, r2
    75ce:	3330      	adds	r3, #48	; 0x30
    75d0:	7818      	ldrb	r0, [r3, #0]
    75d2:	b2c0      	uxtb	r0, r0
	if (pin_index & 1) {
    75d4:	4663      	mov	r3, ip
    75d6:	07db      	lsls	r3, r3, #31
    75d8:	d5cf      	bpl.n	757a <spi_init+0x4e>
		return (pmux_reg & PORT_PMUX_PMUXO_Msk) >> PORT_PMUX_PMUXO_Pos;
    75da:	0900      	lsrs	r0, r0, #4
    75dc:	e7cf      	b.n	757e <spi_init+0x52>
			module->hw = NULL;
    75de:	2300      	movs	r3, #0
    75e0:	464a      	mov	r2, r9
    75e2:	6013      	str	r3, [r2, #0]
			return STATUS_ERR_DENIED;
    75e4:	201c      	movs	r0, #28
    75e6:	e7b3      	b.n	7550 <spi_init+0x24>
	uint32_t external_clock = system_gclk_chan_get_hz(SERCOM_GCLK_ID);
    75e8:	2013      	movs	r0, #19
    75ea:	4b78      	ldr	r3, [pc, #480]	; (77cc <spi_init+0x2a0>)
    75ec:	4798      	blx	r3
	if (config->mode == SPI_MODE_MASTER) {
    75ee:	7822      	ldrb	r2, [r4, #0]
	uint32_t ctrla = 0;
    75f0:	2500      	movs	r5, #0
	if (config->mode == SPI_MODE_MASTER) {
    75f2:	2a01      	cmp	r2, #1
    75f4:	d027      	beq.n	7646 <spi_init+0x11a>
	ctrla |= config->mux_setting;
    75f6:	6863      	ldr	r3, [r4, #4]
    75f8:	68a2      	ldr	r2, [r4, #8]
    75fa:	4313      	orrs	r3, r2
    75fc:	68e2      	ldr	r2, [r4, #12]
    75fe:	4313      	orrs	r3, r2
    7600:	432b      	orrs	r3, r5
	ctrlb |= config->character_size;
    7602:	7c22      	ldrb	r2, [r4, #16]
	if (config->run_in_standby) {
    7604:	7c61      	ldrb	r1, [r4, #17]
    7606:	2900      	cmp	r1, #0
    7608:	d001      	beq.n	760e <spi_init+0xe2>
		ctrla |= SERCOM_SPI_CTRLA_RUNSTDBY;
    760a:	2180      	movs	r1, #128	; 0x80
    760c:	430b      	orrs	r3, r1
	if (config->receiver_enable) {
    760e:	7ca1      	ldrb	r1, [r4, #18]
    7610:	2900      	cmp	r1, #0
    7612:	d002      	beq.n	761a <spi_init+0xee>
		ctrlb |= SERCOM_SPI_CTRLB_RXEN;
    7614:	2180      	movs	r1, #128	; 0x80
    7616:	0289      	lsls	r1, r1, #10
    7618:	430a      	orrs	r2, r1
	if (config->select_slave_low_detect_enable) {
    761a:	7ce1      	ldrb	r1, [r4, #19]
    761c:	2900      	cmp	r1, #0
    761e:	d002      	beq.n	7626 <spi_init+0xfa>
		ctrlb |= SERCOM_SPI_CTRLB_SSDE;
    7620:	2180      	movs	r1, #128	; 0x80
    7622:	0089      	lsls	r1, r1, #2
    7624:	430a      	orrs	r2, r1
	if (config->master_slave_select_enable) {
    7626:	7d21      	ldrb	r1, [r4, #20]
    7628:	2900      	cmp	r1, #0
    762a:	d002      	beq.n	7632 <spi_init+0x106>
		ctrlb |= SERCOM_SPI_CTRLB_MSSEN;
    762c:	2180      	movs	r1, #128	; 0x80
    762e:	0189      	lsls	r1, r1, #6
    7630:	430a      	orrs	r2, r1
	if (spi_module->CTRLA.reg == ctrla &&
    7632:	6839      	ldr	r1, [r7, #0]
	ctrla |= SERCOM_SPI_CTRLA_ENABLE;
    7634:	2002      	movs	r0, #2
    7636:	4303      	orrs	r3, r0
	if (spi_module->CTRLA.reg == ctrla &&
    7638:	428b      	cmp	r3, r1
    763a:	d018      	beq.n	766e <spi_init+0x142>
	module->hw = NULL;
    763c:	2300      	movs	r3, #0
    763e:	464a      	mov	r2, r9
    7640:	6013      	str	r3, [r2, #0]
	return STATUS_ERR_DENIED;
    7642:	201c      	movs	r0, #28
    7644:	e784      	b.n	7550 <spi_init+0x24>
		enum status_code error_code = _sercom_get_sync_baud_val(
    7646:	aa04      	add	r2, sp, #16
    7648:	0001      	movs	r1, r0
    764a:	69a0      	ldr	r0, [r4, #24]
    764c:	4b60      	ldr	r3, [pc, #384]	; (77d0 <spi_init+0x2a4>)
    764e:	4798      	blx	r3
    7650:	0003      	movs	r3, r0
			return STATUS_ERR_INVALID_ARG;
    7652:	2017      	movs	r0, #23
		if (error_code != STATUS_OK) {
    7654:	2b00      	cmp	r3, #0
    7656:	d000      	beq.n	765a <spi_init+0x12e>
    7658:	e77a      	b.n	7550 <spi_init+0x24>
		if (spi_module->BAUD.reg !=  (uint8_t)baud) {
    765a:	7b3b      	ldrb	r3, [r7, #12]
    765c:	b2db      	uxtb	r3, r3
    765e:	aa04      	add	r2, sp, #16
    7660:	7812      	ldrb	r2, [r2, #0]
			return STATUS_ERR_DENIED;
    7662:	3005      	adds	r0, #5
		if (spi_module->BAUD.reg !=  (uint8_t)baud) {
    7664:	429a      	cmp	r2, r3
    7666:	d000      	beq.n	766a <spi_init+0x13e>
    7668:	e772      	b.n	7550 <spi_init+0x24>
		ctrla |= SERCOM_SPI_CTRLA_MODE(0x3);
    766a:	350c      	adds	r5, #12
    766c:	e7c3      	b.n	75f6 <spi_init+0xca>
			spi_module->CTRLB.reg == ctrlb) {
    766e:	687b      	ldr	r3, [r7, #4]
	if (spi_module->CTRLA.reg == ctrla &&
    7670:	4293      	cmp	r3, r2
    7672:	d1e3      	bne.n	763c <spi_init+0x110>
		module->mode           = config->mode;
    7674:	7823      	ldrb	r3, [r4, #0]
    7676:	464a      	mov	r2, r9
    7678:	7153      	strb	r3, [r2, #5]
		module->character_size = config->character_size;
    767a:	7c23      	ldrb	r3, [r4, #16]
    767c:	7193      	strb	r3, [r2, #6]
		return STATUS_OK;
    767e:	2000      	movs	r0, #0
    7680:	e766      	b.n	7550 <spi_init+0x24>
	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    7682:	0008      	movs	r0, r1
    7684:	4b53      	ldr	r3, [pc, #332]	; (77d4 <spi_init+0x2a8>)
    7686:	4798      	blx	r3
    7688:	4a53      	ldr	r2, [pc, #332]	; (77d8 <spi_init+0x2ac>)
    768a:	6a11      	ldr	r1, [r2, #32]
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
    768c:	1c85      	adds	r5, r0, #2
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
    768e:	2301      	movs	r3, #1
    7690:	40ab      	lsls	r3, r5
    7692:	430b      	orrs	r3, r1
    7694:	6213      	str	r3, [r2, #32]
	gclk_chan_conf.source_generator = config->generator_source;
    7696:	a909      	add	r1, sp, #36	; 0x24
    7698:	2624      	movs	r6, #36	; 0x24
    769a:	5da3      	ldrb	r3, [r4, r6]
    769c:	700b      	strb	r3, [r1, #0]
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
    769e:	3014      	adds	r0, #20
	system_gclk_chan_set_config(gclk_index, &gclk_chan_conf);
    76a0:	b2c5      	uxtb	r5, r0
    76a2:	0028      	movs	r0, r5
    76a4:	4b4d      	ldr	r3, [pc, #308]	; (77dc <spi_init+0x2b0>)
    76a6:	4798      	blx	r3
	system_gclk_chan_enable(gclk_index);
    76a8:	0028      	movs	r0, r5
    76aa:	4b4d      	ldr	r3, [pc, #308]	; (77e0 <spi_init+0x2b4>)
    76ac:	4798      	blx	r3
	sercom_set_gclk_generator(config->generator_source, false);
    76ae:	5da0      	ldrb	r0, [r4, r6]
    76b0:	2100      	movs	r1, #0
    76b2:	4b4c      	ldr	r3, [pc, #304]	; (77e4 <spi_init+0x2b8>)
    76b4:	4798      	blx	r3
	if (config->mode == SPI_MODE_MASTER) {
    76b6:	7823      	ldrb	r3, [r4, #0]
    76b8:	2b01      	cmp	r3, #1
    76ba:	d019      	beq.n	76f0 <spi_init+0x1c4>
	SercomSpi *const spi_module = &(module->hw->SPI);
    76bc:	464b      	mov	r3, r9
    76be:	681e      	ldr	r6, [r3, #0]
	config->mux_position = SYSTEM_PINMUX_GPIO;
    76c0:	ab04      	add	r3, sp, #16
    76c2:	2280      	movs	r2, #128	; 0x80
    76c4:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    76c6:	2200      	movs	r2, #0
    76c8:	705a      	strb	r2, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
    76ca:	2101      	movs	r1, #1
    76cc:	7099      	strb	r1, [r3, #2]
	config->powersave    = false;
    76ce:	70da      	strb	r2, [r3, #3]
	if(config->mode == SPI_MODE_SLAVE) {
    76d0:	7823      	ldrb	r3, [r4, #0]
    76d2:	2b00      	cmp	r3, #0
    76d4:	d101      	bne.n	76da <spi_init+0x1ae>
		pin_conf.input_pull = SYSTEM_PINMUX_PIN_PULL_NONE;
    76d6:	ab04      	add	r3, sp, #16
    76d8:	709a      	strb	r2, [r3, #2]
	uint32_t pad_pinmuxes[] = {
    76da:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    76dc:	9305      	str	r3, [sp, #20]
    76de:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    76e0:	9306      	str	r3, [sp, #24]
    76e2:	6b23      	ldr	r3, [r4, #48]	; 0x30
    76e4:	9307      	str	r3, [sp, #28]
    76e6:	6b63      	ldr	r3, [r4, #52]	; 0x34
    76e8:	9308      	str	r3, [sp, #32]
    76ea:	2700      	movs	r7, #0
		uint32_t current_pinmux = pad_pinmuxes[pad];
    76ec:	ad05      	add	r5, sp, #20
    76ee:	e011      	b.n	7714 <spi_init+0x1e8>
		spi_module->CTRLA.reg |= SERCOM_SPI_CTRLA_MODE(0x3);
    76f0:	683b      	ldr	r3, [r7, #0]
    76f2:	220c      	movs	r2, #12
    76f4:	4313      	orrs	r3, r2
    76f6:	603b      	str	r3, [r7, #0]
    76f8:	e7e0      	b.n	76bc <spi_init+0x190>
			current_pinmux = _sercom_get_default_pad(hw, pad);
    76fa:	0030      	movs	r0, r6
    76fc:	4b31      	ldr	r3, [pc, #196]	; (77c4 <spi_init+0x298>)
    76fe:	4798      	blx	r3
    7700:	e00d      	b.n	771e <spi_init+0x1f2>
			pin_conf.mux_position = current_pinmux & 0xFFFF;
    7702:	a904      	add	r1, sp, #16
    7704:	7008      	strb	r0, [r1, #0]
			system_pinmux_pin_set_config(current_pinmux >> 16, &pin_conf);
    7706:	0c00      	lsrs	r0, r0, #16
    7708:	b2c0      	uxtb	r0, r0
    770a:	4b37      	ldr	r3, [pc, #220]	; (77e8 <spi_init+0x2bc>)
    770c:	4798      	blx	r3
    770e:	3701      	adds	r7, #1
	for (uint8_t pad = 0; pad < 4; pad++) {
    7710:	2f04      	cmp	r7, #4
    7712:	d007      	beq.n	7724 <spi_init+0x1f8>
    7714:	b2f9      	uxtb	r1, r7
		uint32_t current_pinmux = pad_pinmuxes[pad];
    7716:	00bb      	lsls	r3, r7, #2
    7718:	5958      	ldr	r0, [r3, r5]
		if (current_pinmux == PINMUX_DEFAULT) {
    771a:	2800      	cmp	r0, #0
    771c:	d0ed      	beq.n	76fa <spi_init+0x1ce>
		if (current_pinmux != PINMUX_UNUSED) {
    771e:	1c43      	adds	r3, r0, #1
    7720:	d1ef      	bne.n	7702 <spi_init+0x1d6>
    7722:	e7f4      	b.n	770e <spi_init+0x1e2>
	module->mode             = config->mode;
    7724:	7823      	ldrb	r3, [r4, #0]
    7726:	464a      	mov	r2, r9
    7728:	7153      	strb	r3, [r2, #5]
	module->character_size   = config->character_size;
    772a:	7c23      	ldrb	r3, [r4, #16]
    772c:	7193      	strb	r3, [r2, #6]
	module->receiver_enabled = config->receiver_enable;
    772e:	7ca3      	ldrb	r3, [r4, #18]
    7730:	71d3      	strb	r3, [r2, #7]
	module->master_slave_select_enable = config->master_slave_select_enable;
    7732:	7d23      	ldrb	r3, [r4, #20]
    7734:	7213      	strb	r3, [r2, #8]
	uint16_t baud = 0;
    7736:	2200      	movs	r2, #0
    7738:	ab02      	add	r3, sp, #8
    773a:	80da      	strh	r2, [r3, #6]
	if (config->mode == SPI_MODE_MASTER) {
    773c:	7823      	ldrb	r3, [r4, #0]
    773e:	2b01      	cmp	r3, #1
    7740:	d028      	beq.n	7794 <spi_init+0x268>
	ctrla |= config->transfer_mode;
    7742:	6863      	ldr	r3, [r4, #4]
    7744:	68a2      	ldr	r2, [r4, #8]
    7746:	4313      	orrs	r3, r2
	ctrla |= config->mux_setting;
    7748:	68e2      	ldr	r2, [r4, #12]
    774a:	4313      	orrs	r3, r2
	ctrlb |= config->character_size;
    774c:	7c21      	ldrb	r1, [r4, #16]
	if (config->run_in_standby || system_is_debugger_present()) {
    774e:	7c62      	ldrb	r2, [r4, #17]
    7750:	2a00      	cmp	r2, #0
    7752:	d103      	bne.n	775c <spi_init+0x230>
    7754:	4a25      	ldr	r2, [pc, #148]	; (77ec <spi_init+0x2c0>)
    7756:	7892      	ldrb	r2, [r2, #2]
    7758:	0792      	lsls	r2, r2, #30
    775a:	d501      	bpl.n	7760 <spi_init+0x234>
		ctrla |= SERCOM_SPI_CTRLA_RUNSTDBY;
    775c:	2280      	movs	r2, #128	; 0x80
    775e:	4313      	orrs	r3, r2
	if (config->receiver_enable) {
    7760:	7ca2      	ldrb	r2, [r4, #18]
    7762:	2a00      	cmp	r2, #0
    7764:	d002      	beq.n	776c <spi_init+0x240>
		ctrlb |= SERCOM_SPI_CTRLB_RXEN;
    7766:	2280      	movs	r2, #128	; 0x80
    7768:	0292      	lsls	r2, r2, #10
    776a:	4311      	orrs	r1, r2
	if (config->select_slave_low_detect_enable) {
    776c:	7ce2      	ldrb	r2, [r4, #19]
    776e:	2a00      	cmp	r2, #0
    7770:	d002      	beq.n	7778 <spi_init+0x24c>
		ctrlb |= SERCOM_SPI_CTRLB_SSDE;
    7772:	2280      	movs	r2, #128	; 0x80
    7774:	0092      	lsls	r2, r2, #2
    7776:	4311      	orrs	r1, r2
	if (config->master_slave_select_enable) {
    7778:	7d22      	ldrb	r2, [r4, #20]
    777a:	2a00      	cmp	r2, #0
    777c:	d002      	beq.n	7784 <spi_init+0x258>
		ctrlb |= SERCOM_SPI_CTRLB_MSSEN;
    777e:	2280      	movs	r2, #128	; 0x80
    7780:	0192      	lsls	r2, r2, #6
    7782:	4311      	orrs	r1, r2
	spi_module->CTRLA.reg |= ctrla;
    7784:	6832      	ldr	r2, [r6, #0]
    7786:	4313      	orrs	r3, r2
    7788:	6033      	str	r3, [r6, #0]
	spi_module->CTRLB.reg |= ctrlb;
    778a:	6873      	ldr	r3, [r6, #4]
    778c:	430b      	orrs	r3, r1
    778e:	6073      	str	r3, [r6, #4]
	return STATUS_OK;
    7790:	2000      	movs	r0, #0
    7792:	e6dd      	b.n	7550 <spi_init+0x24>
		uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    7794:	464b      	mov	r3, r9
    7796:	6818      	ldr	r0, [r3, #0]
    7798:	4b0e      	ldr	r3, [pc, #56]	; (77d4 <spi_init+0x2a8>)
    779a:	4798      	blx	r3
		uint32_t gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
    779c:	3014      	adds	r0, #20
		uint32_t internal_clock = system_gclk_chan_get_hz(gclk_index);
    779e:	b2c0      	uxtb	r0, r0
    77a0:	4b0a      	ldr	r3, [pc, #40]	; (77cc <spi_init+0x2a0>)
    77a2:	4798      	blx	r3
    77a4:	0001      	movs	r1, r0
		enum status_code error_code = _sercom_get_sync_baud_val(
    77a6:	ab02      	add	r3, sp, #8
    77a8:	1d9a      	adds	r2, r3, #6
    77aa:	69a0      	ldr	r0, [r4, #24]
    77ac:	4b08      	ldr	r3, [pc, #32]	; (77d0 <spi_init+0x2a4>)
    77ae:	4798      	blx	r3
    77b0:	0003      	movs	r3, r0
			return STATUS_ERR_INVALID_ARG;
    77b2:	2017      	movs	r0, #23
		if (error_code != STATUS_OK) {
    77b4:	2b00      	cmp	r3, #0
    77b6:	d000      	beq.n	77ba <spi_init+0x28e>
    77b8:	e6ca      	b.n	7550 <spi_init+0x24>
		spi_module->BAUD.reg = (uint8_t)baud;
    77ba:	ab02      	add	r3, sp, #8
    77bc:	3306      	adds	r3, #6
    77be:	781b      	ldrb	r3, [r3, #0]
    77c0:	7333      	strb	r3, [r6, #12]
    77c2:	e7be      	b.n	7742 <spi_init+0x216>
    77c4:	000072ad 	.word	0x000072ad
    77c8:	41004400 	.word	0x41004400
    77cc:	00008645 	.word	0x00008645
    77d0:	000071a3 	.word	0x000071a3
    77d4:	00007425 	.word	0x00007425
    77d8:	40000400 	.word	0x40000400
    77dc:	00008629 	.word	0x00008629
    77e0:	0000859d 	.word	0x0000859d
    77e4:	00007261 	.word	0x00007261
    77e8:	00008721 	.word	0x00008721
    77ec:	41002000 	.word	0x41002000

000077f0 <spi_select_slave>:
 */
enum status_code spi_select_slave(
		struct spi_module *const module,
		struct spi_slave_inst *const slave,
		const bool select)
{
    77f0:	b510      	push	{r4, lr}
	Assert(module);
	Assert(module->hw);
	Assert(slave);

	/* Check that the SPI module is operating in master mode */
	if (module->mode != SPI_MODE_MASTER) {
    77f2:	7944      	ldrb	r4, [r0, #5]
		return STATUS_ERR_UNSUPPORTED_DEV;
    77f4:	2315      	movs	r3, #21
	if (module->mode != SPI_MODE_MASTER) {
    77f6:	2c01      	cmp	r4, #1
    77f8:	d001      	beq.n	77fe <spi_select_slave+0xe>
			/* Drive Slave Select high */
			port_pin_set_output_level(slave->ss_pin, true);
		}
	}
	return STATUS_OK;
}
    77fa:	0018      	movs	r0, r3
    77fc:	bd10      	pop	{r4, pc}
	if(!(module->master_slave_select_enable))
    77fe:	7a04      	ldrb	r4, [r0, #8]
	return STATUS_OK;
    7800:	2300      	movs	r3, #0
	if(!(module->master_slave_select_enable))
    7802:	2c00      	cmp	r4, #0
    7804:	d1f9      	bne.n	77fa <spi_select_slave+0xa>
		if (select) {
    7806:	2a00      	cmp	r2, #0
    7808:	d058      	beq.n	78bc <spi_select_slave+0xcc>
			if (slave->address_enabled) {
    780a:	784b      	ldrb	r3, [r1, #1]
    780c:	2b00      	cmp	r3, #0
    780e:	d044      	beq.n	789a <spi_select_slave+0xaa>
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    7810:	6803      	ldr	r3, [r0, #0]
    7812:	7e1b      	ldrb	r3, [r3, #24]
				if (!spi_is_ready_to_write(module)) {
    7814:	07db      	lsls	r3, r3, #31
    7816:	d410      	bmi.n	783a <spi_select_slave+0x4a>
					port_pin_set_output_level(slave->ss_pin, true);
    7818:	780a      	ldrb	r2, [r1, #0]
	if (port_index < PORT_INST_NUM) {
    781a:	09d1      	lsrs	r1, r2, #7
		return NULL;
    781c:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
    781e:	2900      	cmp	r1, #0
    7820:	d104      	bne.n	782c <spi_select_slave+0x3c>
		return &(ports[port_index]->Group[group_index]);
    7822:	0953      	lsrs	r3, r2, #5
    7824:	01db      	lsls	r3, r3, #7
    7826:	492e      	ldr	r1, [pc, #184]	; (78e0 <spi_select_slave+0xf0>)
    7828:	468c      	mov	ip, r1
    782a:	4463      	add	r3, ip
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    782c:	211f      	movs	r1, #31
    782e:	4011      	ands	r1, r2
    7830:	2201      	movs	r2, #1
    7832:	408a      	lsls	r2, r1
		port_base->OUTSET.reg = pin_mask;
    7834:	619a      	str	r2, [r3, #24]
					return STATUS_BUSY;
    7836:	2305      	movs	r3, #5
    7838:	e7df      	b.n	77fa <spi_select_slave+0xa>
				port_pin_set_output_level(slave->ss_pin, false);
    783a:	780a      	ldrb	r2, [r1, #0]
	if (port_index < PORT_INST_NUM) {
    783c:	09d4      	lsrs	r4, r2, #7
		return NULL;
    783e:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
    7840:	2c00      	cmp	r4, #0
    7842:	d104      	bne.n	784e <spi_select_slave+0x5e>
		return &(ports[port_index]->Group[group_index]);
    7844:	0953      	lsrs	r3, r2, #5
    7846:	01db      	lsls	r3, r3, #7
    7848:	4c25      	ldr	r4, [pc, #148]	; (78e0 <spi_select_slave+0xf0>)
    784a:	46a4      	mov	ip, r4
    784c:	4463      	add	r3, ip
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    784e:	241f      	movs	r4, #31
    7850:	4014      	ands	r4, r2
    7852:	2201      	movs	r2, #1
    7854:	40a2      	lsls	r2, r4
		port_base->OUTCLR.reg = pin_mask;
    7856:	615a      	str	r2, [r3, #20]
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    7858:	6803      	ldr	r3, [r0, #0]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    785a:	7e1a      	ldrb	r2, [r3, #24]

	/* Check if the data register has been copied to the shift register */
	if (!spi_is_ready_to_write(module)) {
    785c:	07d2      	lsls	r2, r2, #31
    785e:	d501      	bpl.n	7864 <spi_select_slave+0x74>
		/* Data register has not been copied to the shift register, return */
		return STATUS_BUSY;
	}

	/* Write the character to the DATA register */
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    7860:	788a      	ldrb	r2, [r1, #2]
    7862:	629a      	str	r2, [r3, #40]	; 0x28
				if (!(module->receiver_enabled)) {
    7864:	79c2      	ldrb	r2, [r0, #7]
	return STATUS_OK;
    7866:	2300      	movs	r3, #0
				if (!(module->receiver_enabled)) {
    7868:	2a00      	cmp	r2, #0
    786a:	d1c6      	bne.n	77fa <spi_select_slave+0xa>
	SercomSpi *const spi_module = &(module->hw->SPI);
    786c:	6802      	ldr	r2, [r0, #0]
					while (!spi_is_ready_to_read(module)) {
    786e:	2104      	movs	r1, #4
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    7870:	7e13      	ldrb	r3, [r2, #24]
    7872:	420b      	tst	r3, r1
    7874:	d0fc      	beq.n	7870 <spi_select_slave+0x80>
    7876:	7e11      	ldrb	r1, [r2, #24]
	return STATUS_OK;
    7878:	2300      	movs	r3, #0
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if data is ready to be read */
	if (!spi_is_ready_to_read(module)) {
    787a:	0749      	lsls	r1, r1, #29
    787c:	d5bd      	bpl.n	77fa <spi_select_slave+0xa>

	/* Return value */
	enum status_code retval = STATUS_OK;

	/* Check if data is overflown */
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    787e:	8b53      	ldrh	r3, [r2, #26]
    7880:	075b      	lsls	r3, r3, #29
    7882:	d501      	bpl.n	7888 <spi_select_slave+0x98>
		retval = STATUS_ERR_OVERFLOW;
		/* Clear overflow flag */
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
    7884:	2304      	movs	r3, #4
    7886:	8353      	strh	r3, [r2, #26]
	}

	/* Read the character from the DATA register */
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    7888:	7983      	ldrb	r3, [r0, #6]
    788a:	2b01      	cmp	r3, #1
    788c:	d002      	beq.n	7894 <spi_select_slave+0xa4>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
	} else {
		*rx_data = (uint8_t)spi_module->DATA.reg;
    788e:	6a93      	ldr	r3, [r2, #40]	; 0x28
    7890:	2300      	movs	r3, #0
    7892:	e7b2      	b.n	77fa <spi_select_slave+0xa>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
    7894:	6a93      	ldr	r3, [r2, #40]	; 0x28
    7896:	2300      	movs	r3, #0
    7898:	e7af      	b.n	77fa <spi_select_slave+0xa>
				port_pin_set_output_level(slave->ss_pin, false);
    789a:	780a      	ldrb	r2, [r1, #0]
	if (port_index < PORT_INST_NUM) {
    789c:	09d1      	lsrs	r1, r2, #7
		return NULL;
    789e:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
    78a0:	2900      	cmp	r1, #0
    78a2:	d104      	bne.n	78ae <spi_select_slave+0xbe>
		return &(ports[port_index]->Group[group_index]);
    78a4:	0953      	lsrs	r3, r2, #5
    78a6:	01db      	lsls	r3, r3, #7
    78a8:	490d      	ldr	r1, [pc, #52]	; (78e0 <spi_select_slave+0xf0>)
    78aa:	468c      	mov	ip, r1
    78ac:	4463      	add	r3, ip
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    78ae:	211f      	movs	r1, #31
    78b0:	4011      	ands	r1, r2
    78b2:	2201      	movs	r2, #1
    78b4:	408a      	lsls	r2, r1
		port_base->OUTCLR.reg = pin_mask;
    78b6:	615a      	str	r2, [r3, #20]
	return STATUS_OK;
    78b8:	2300      	movs	r3, #0
    78ba:	e79e      	b.n	77fa <spi_select_slave+0xa>
			port_pin_set_output_level(slave->ss_pin, true);
    78bc:	780a      	ldrb	r2, [r1, #0]
	if (port_index < PORT_INST_NUM) {
    78be:	09d1      	lsrs	r1, r2, #7
		return NULL;
    78c0:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
    78c2:	2900      	cmp	r1, #0
    78c4:	d104      	bne.n	78d0 <spi_select_slave+0xe0>
		return &(ports[port_index]->Group[group_index]);
    78c6:	0953      	lsrs	r3, r2, #5
    78c8:	01db      	lsls	r3, r3, #7
    78ca:	4905      	ldr	r1, [pc, #20]	; (78e0 <spi_select_slave+0xf0>)
    78cc:	468c      	mov	ip, r1
    78ce:	4463      	add	r3, ip
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    78d0:	211f      	movs	r1, #31
    78d2:	4011      	ands	r1, r2
    78d4:	2201      	movs	r2, #1
    78d6:	408a      	lsls	r2, r1
		port_base->OUTSET.reg = pin_mask;
    78d8:	619a      	str	r2, [r3, #24]
	return STATUS_OK;
    78da:	2300      	movs	r3, #0
    78dc:	e78d      	b.n	77fa <spi_select_slave+0xa>
    78de:	46c0      	nop			; (mov r8, r8)
    78e0:	41004400 	.word	0x41004400

000078e4 <usart_init>:
 */
enum status_code usart_init(
		struct usart_module *const module,
		Sercom *const hw,
		const struct usart_config *const config)
{
    78e4:	b5f0      	push	{r4, r5, r6, r7, lr}
    78e6:	46de      	mov	lr, fp
    78e8:	4657      	mov	r7, sl
    78ea:	464e      	mov	r6, r9
    78ec:	4645      	mov	r5, r8
    78ee:	b5e0      	push	{r5, r6, r7, lr}
    78f0:	b091      	sub	sp, #68	; 0x44
    78f2:	0005      	movs	r5, r0
    78f4:	000c      	movs	r4, r1
    78f6:	0016      	movs	r6, r2
	Assert(config);

	enum status_code status_code = STATUS_OK;

	/* Assign module pointer to software instance struct */
	module->hw = hw;
    78f8:	6029      	str	r1, [r5, #0]

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);

	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    78fa:	0008      	movs	r0, r1
    78fc:	4bba      	ldr	r3, [pc, #744]	; (7be8 <usart_init+0x304>)
    78fe:	4798      	blx	r3
    7900:	0002      	movs	r2, r0
#else
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
#endif

	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_SWRST) {
    7902:	6823      	ldr	r3, [r4, #0]
		/* The module is busy resetting itself */
		return STATUS_BUSY;
    7904:	2005      	movs	r0, #5
	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_SWRST) {
    7906:	07db      	lsls	r3, r3, #31
    7908:	d506      	bpl.n	7918 <usart_init+0x34>
	_sercom_set_handler(instance_index, _usart_interrupt_handler);
	_sercom_instances[instance_index] = module;
#endif

	return status_code;
}
    790a:	b011      	add	sp, #68	; 0x44
    790c:	bc3c      	pop	{r2, r3, r4, r5}
    790e:	4690      	mov	r8, r2
    7910:	4699      	mov	r9, r3
    7912:	46a2      	mov	sl, r4
    7914:	46ab      	mov	fp, r5
    7916:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_ENABLE) {
    7918:	6823      	ldr	r3, [r4, #0]
		return STATUS_ERR_DENIED;
    791a:	3017      	adds	r0, #23
	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_ENABLE) {
    791c:	079b      	lsls	r3, r3, #30
    791e:	d4f4      	bmi.n	790a <usart_init+0x26>
    7920:	49b2      	ldr	r1, [pc, #712]	; (7bec <usart_init+0x308>)
    7922:	6a08      	ldr	r0, [r1, #32]
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
    7924:	1c97      	adds	r7, r2, #2
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
    7926:	2301      	movs	r3, #1
    7928:	40bb      	lsls	r3, r7
    792a:	4303      	orrs	r3, r0
    792c:	620b      	str	r3, [r1, #32]
	gclk_chan_conf.source_generator = config->generator_source;
    792e:	a90f      	add	r1, sp, #60	; 0x3c
    7930:	272d      	movs	r7, #45	; 0x2d
    7932:	5df3      	ldrb	r3, [r6, r7]
    7934:	700b      	strb	r3, [r1, #0]
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
    7936:	3214      	adds	r2, #20
	system_gclk_chan_set_config(gclk_index, &gclk_chan_conf);
    7938:	b2d3      	uxtb	r3, r2
    793a:	9302      	str	r3, [sp, #8]
    793c:	0018      	movs	r0, r3
    793e:	4bac      	ldr	r3, [pc, #688]	; (7bf0 <usart_init+0x30c>)
    7940:	4798      	blx	r3
	system_gclk_chan_enable(gclk_index);
    7942:	9802      	ldr	r0, [sp, #8]
    7944:	4bab      	ldr	r3, [pc, #684]	; (7bf4 <usart_init+0x310>)
    7946:	4798      	blx	r3
	sercom_set_gclk_generator(config->generator_source, false);
    7948:	5df0      	ldrb	r0, [r6, r7]
    794a:	2100      	movs	r1, #0
    794c:	4baa      	ldr	r3, [pc, #680]	; (7bf8 <usart_init+0x314>)
    794e:	4798      	blx	r3
	module->character_size = config->character_size;
    7950:	7af3      	ldrb	r3, [r6, #11]
    7952:	716b      	strb	r3, [r5, #5]
	module->receiver_enabled = config->receiver_enable;
    7954:	2324      	movs	r3, #36	; 0x24
    7956:	5cf3      	ldrb	r3, [r6, r3]
    7958:	71ab      	strb	r3, [r5, #6]
	module->transmitter_enabled = config->transmitter_enable;
    795a:	2325      	movs	r3, #37	; 0x25
    795c:	5cf3      	ldrb	r3, [r6, r3]
    795e:	71eb      	strb	r3, [r5, #7]
	module->lin_slave_enabled = config->lin_slave_enable;
    7960:	7ef3      	ldrb	r3, [r6, #27]
    7962:	722b      	strb	r3, [r5, #8]
	module->start_frame_detection_enabled = config->start_frame_detection_enable;
    7964:	7f33      	ldrb	r3, [r6, #28]
    7966:	726b      	strb	r3, [r5, #9]
	SercomUsart *const usart_hw = &(module->hw->USART);
    7968:	682b      	ldr	r3, [r5, #0]
    796a:	4698      	mov	r8, r3
	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    796c:	0018      	movs	r0, r3
    796e:	4b9e      	ldr	r3, [pc, #632]	; (7be8 <usart_init+0x304>)
    7970:	4798      	blx	r3
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
    7972:	3014      	adds	r0, #20
	uint16_t baud  = 0;
    7974:	2200      	movs	r2, #0
    7976:	230e      	movs	r3, #14
    7978:	a906      	add	r1, sp, #24
    797a:	468c      	mov	ip, r1
    797c:	4463      	add	r3, ip
    797e:	801a      	strh	r2, [r3, #0]
	switch (config->sample_rate) {
    7980:	8a32      	ldrh	r2, [r6, #16]
    7982:	9202      	str	r2, [sp, #8]
    7984:	2380      	movs	r3, #128	; 0x80
    7986:	01db      	lsls	r3, r3, #7
    7988:	429a      	cmp	r2, r3
    798a:	d100      	bne.n	798e <usart_init+0xaa>
    798c:	e09a      	b.n	7ac4 <usart_init+0x1e0>
    798e:	d90f      	bls.n	79b0 <usart_init+0xcc>
    7990:	23c0      	movs	r3, #192	; 0xc0
    7992:	01db      	lsls	r3, r3, #7
    7994:	9a02      	ldr	r2, [sp, #8]
    7996:	429a      	cmp	r2, r3
    7998:	d100      	bne.n	799c <usart_init+0xb8>
    799a:	e08e      	b.n	7aba <usart_init+0x1d6>
    799c:	2380      	movs	r3, #128	; 0x80
    799e:	021b      	lsls	r3, r3, #8
    79a0:	429a      	cmp	r2, r3
    79a2:	d000      	beq.n	79a6 <usart_init+0xc2>
    79a4:	e11b      	b.n	7bde <usart_init+0x2fa>
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_3;
    79a6:	2303      	movs	r3, #3
    79a8:	9306      	str	r3, [sp, #24]
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
    79aa:	2300      	movs	r3, #0
    79ac:	9307      	str	r3, [sp, #28]
    79ae:	e008      	b.n	79c2 <usart_init+0xde>
	switch (config->sample_rate) {
    79b0:	2380      	movs	r3, #128	; 0x80
    79b2:	019b      	lsls	r3, r3, #6
    79b4:	429a      	cmp	r2, r3
    79b6:	d000      	beq.n	79ba <usart_init+0xd6>
    79b8:	e111      	b.n	7bde <usart_init+0x2fa>
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
    79ba:	2310      	movs	r3, #16
    79bc:	9306      	str	r3, [sp, #24]
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
    79be:	3b0f      	subs	r3, #15
    79c0:	9307      	str	r3, [sp, #28]
	ctrla = (uint32_t)config->data_order |
    79c2:	6833      	ldr	r3, [r6, #0]
    79c4:	9305      	str	r3, [sp, #20]
		(uint32_t)config->mux_setting |
    79c6:	68f3      	ldr	r3, [r6, #12]
    79c8:	469b      	mov	fp, r3
		config->sample_adjustment |
    79ca:	6973      	ldr	r3, [r6, #20]
    79cc:	9303      	str	r3, [sp, #12]
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
    79ce:	7e33      	ldrb	r3, [r6, #24]
    79d0:	9304      	str	r3, [sp, #16]
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);
    79d2:	2326      	movs	r3, #38	; 0x26
    79d4:	5cf3      	ldrb	r3, [r6, r3]
    79d6:	469a      	mov	sl, r3
	transfer_mode = (uint32_t)config->transfer_mode;
    79d8:	6873      	ldr	r3, [r6, #4]
    79da:	4699      	mov	r9, r3
	switch (transfer_mode)
    79dc:	2b00      	cmp	r3, #0
    79de:	d100      	bne.n	79e2 <usart_init+0xfe>
    79e0:	e09c      	b.n	7b1c <usart_init+0x238>
    79e2:	2380      	movs	r3, #128	; 0x80
    79e4:	055b      	lsls	r3, r3, #21
    79e6:	4599      	cmp	r9, r3
    79e8:	d100      	bne.n	79ec <usart_init+0x108>
    79ea:	e080      	b.n	7aee <usart_init+0x20a>
	if(config->encoding_format_enable) {
    79ec:	7e73      	ldrb	r3, [r6, #25]
    79ee:	2b00      	cmp	r3, #0
    79f0:	d002      	beq.n	79f8 <usart_init+0x114>
		usart_hw->RXPL.reg = config->receive_pulse_length;
    79f2:	7eb3      	ldrb	r3, [r6, #26]
    79f4:	4642      	mov	r2, r8
    79f6:	7393      	strb	r3, [r2, #14]
	usart_hw->BAUD.reg = baud;
    79f8:	230e      	movs	r3, #14
    79fa:	aa06      	add	r2, sp, #24
    79fc:	4694      	mov	ip, r2
    79fe:	4463      	add	r3, ip
    7a00:	881b      	ldrh	r3, [r3, #0]
    7a02:	4642      	mov	r2, r8
    7a04:	8193      	strh	r3, [r2, #12]
	ctrla |= transfer_mode;
    7a06:	9b05      	ldr	r3, [sp, #20]
    7a08:	465a      	mov	r2, fp
    7a0a:	4313      	orrs	r3, r2
    7a0c:	9a03      	ldr	r2, [sp, #12]
    7a0e:	4313      	orrs	r3, r2
    7a10:	464a      	mov	r2, r9
    7a12:	4313      	orrs	r3, r2
    7a14:	9f02      	ldr	r7, [sp, #8]
    7a16:	431f      	orrs	r7, r3
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
    7a18:	9b04      	ldr	r3, [sp, #16]
    7a1a:	021b      	lsls	r3, r3, #8
	ctrla |= transfer_mode;
    7a1c:	431f      	orrs	r7, r3
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);
    7a1e:	4653      	mov	r3, sl
    7a20:	075b      	lsls	r3, r3, #29
	ctrla |= transfer_mode;
    7a22:	431f      	orrs	r7, r3
	if (config->use_external_clock == false) {
    7a24:	2327      	movs	r3, #39	; 0x27
    7a26:	5cf3      	ldrb	r3, [r6, r3]
    7a28:	2b00      	cmp	r3, #0
    7a2a:	d101      	bne.n	7a30 <usart_init+0x14c>
		ctrla |= SERCOM_USART_CTRLA_MODE(0x1);
    7a2c:	3304      	adds	r3, #4
    7a2e:	431f      	orrs	r7, r3
			(config->encoding_format_enable << SERCOM_USART_CTRLB_ENC_Pos) |
    7a30:	7e73      	ldrb	r3, [r6, #25]
    7a32:	029b      	lsls	r3, r3, #10
			(config->start_frame_detection_enable << SERCOM_USART_CTRLB_SFDE_Pos) |
    7a34:	7f32      	ldrb	r2, [r6, #28]
    7a36:	0252      	lsls	r2, r2, #9
			(config->encoding_format_enable << SERCOM_USART_CTRLB_ENC_Pos) |
    7a38:	4313      	orrs	r3, r2
			(config->collision_detection_enable << SERCOM_USART_CTRLB_COLDEN_Pos) |
    7a3a:	7f72      	ldrb	r2, [r6, #29]
    7a3c:	0212      	lsls	r2, r2, #8
			(config->start_frame_detection_enable << SERCOM_USART_CTRLB_SFDE_Pos) |
    7a3e:	4313      	orrs	r3, r2
			(config->receiver_enable << SERCOM_USART_CTRLB_RXEN_Pos) |
    7a40:	2224      	movs	r2, #36	; 0x24
    7a42:	5cb2      	ldrb	r2, [r6, r2]
    7a44:	0452      	lsls	r2, r2, #17
			(config->collision_detection_enable << SERCOM_USART_CTRLB_COLDEN_Pos) |
    7a46:	4313      	orrs	r3, r2
			(config->transmitter_enable << SERCOM_USART_CTRLB_TXEN_Pos);
    7a48:	2225      	movs	r2, #37	; 0x25
    7a4a:	5cb2      	ldrb	r2, [r6, r2]
    7a4c:	0412      	lsls	r2, r2, #16
			(config->receiver_enable << SERCOM_USART_CTRLB_RXEN_Pos) |
    7a4e:	4313      	orrs	r3, r2
	ctrlb |= (uint32_t)config->character_size;
    7a50:	7ab1      	ldrb	r1, [r6, #10]
    7a52:	7af2      	ldrb	r2, [r6, #11]
    7a54:	4311      	orrs	r1, r2
    7a56:	4319      	orrs	r1, r3
	if (config->parity != USART_PARITY_NONE) {
    7a58:	8933      	ldrh	r3, [r6, #8]
    7a5a:	2bff      	cmp	r3, #255	; 0xff
    7a5c:	d100      	bne.n	7a60 <usart_init+0x17c>
    7a5e:	e081      	b.n	7b64 <usart_init+0x280>
		ctrla |= SERCOM_USART_CTRLA_FORM(1);
    7a60:	2280      	movs	r2, #128	; 0x80
    7a62:	0452      	lsls	r2, r2, #17
    7a64:	4317      	orrs	r7, r2
		ctrlb |= config->parity;
    7a66:	4319      	orrs	r1, r3
	if (config->run_in_standby || system_is_debugger_present()) {
    7a68:	232c      	movs	r3, #44	; 0x2c
    7a6a:	5cf3      	ldrb	r3, [r6, r3]
    7a6c:	2b00      	cmp	r3, #0
    7a6e:	d103      	bne.n	7a78 <usart_init+0x194>
    7a70:	4b62      	ldr	r3, [pc, #392]	; (7bfc <usart_init+0x318>)
    7a72:	789b      	ldrb	r3, [r3, #2]
    7a74:	079b      	lsls	r3, r3, #30
    7a76:	d501      	bpl.n	7a7c <usart_init+0x198>
		ctrla |= SERCOM_USART_CTRLA_RUNSTDBY;
    7a78:	2380      	movs	r3, #128	; 0x80
    7a7a:	431f      	orrs	r7, r3
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomUsart *const usart_hw = &(module->hw->USART);
    7a7c:	682a      	ldr	r2, [r5, #0]

#ifdef FEATURE_USART_SYNC_SCHEME_V2
	return (usart_hw->SYNCBUSY.reg);
    7a7e:	69d3      	ldr	r3, [r2, #28]
		const struct usart_module *const module)
{
	/* Sanity check */
	Assert(module);

	while (usart_is_syncing(module)) {
    7a80:	2b00      	cmp	r3, #0
    7a82:	d1fc      	bne.n	7a7e <usart_init+0x19a>
	usart_hw->CTRLB.reg = ctrlb;
    7a84:	4643      	mov	r3, r8
    7a86:	6059      	str	r1, [r3, #4]
	SercomUsart *const usart_hw = &(module->hw->USART);
    7a88:	682a      	ldr	r2, [r5, #0]
	return (usart_hw->SYNCBUSY.reg);
    7a8a:	69d3      	ldr	r3, [r2, #28]
	while (usart_is_syncing(module)) {
    7a8c:	2b00      	cmp	r3, #0
    7a8e:	d1fc      	bne.n	7a8a <usart_init+0x1a6>
	usart_hw->CTRLA.reg = ctrla;
    7a90:	4643      	mov	r3, r8
    7a92:	601f      	str	r7, [r3, #0]
	config->mux_position = SYSTEM_PINMUX_GPIO;
    7a94:	ab0e      	add	r3, sp, #56	; 0x38
    7a96:	2280      	movs	r2, #128	; 0x80
    7a98:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    7a9a:	2200      	movs	r2, #0
    7a9c:	705a      	strb	r2, [r3, #1]
	config->powersave    = false;
    7a9e:	70da      	strb	r2, [r3, #3]
	pin_conf.input_pull = SYSTEM_PINMUX_PIN_PULL_NONE;
    7aa0:	709a      	strb	r2, [r3, #2]
	uint32_t pad_pinmuxes[] = {
    7aa2:	6b33      	ldr	r3, [r6, #48]	; 0x30
    7aa4:	930a      	str	r3, [sp, #40]	; 0x28
    7aa6:	6b73      	ldr	r3, [r6, #52]	; 0x34
    7aa8:	930b      	str	r3, [sp, #44]	; 0x2c
    7aaa:	6bb3      	ldr	r3, [r6, #56]	; 0x38
    7aac:	930c      	str	r3, [sp, #48]	; 0x30
    7aae:	6bf3      	ldr	r3, [r6, #60]	; 0x3c
    7ab0:	9302      	str	r3, [sp, #8]
    7ab2:	930d      	str	r3, [sp, #52]	; 0x34
    7ab4:	2700      	movs	r7, #0
		uint32_t current_pinmux = pad_pinmuxes[pad];
    7ab6:	ae0a      	add	r6, sp, #40	; 0x28
    7ab8:	e063      	b.n	7b82 <usart_init+0x29e>
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_8;
    7aba:	2308      	movs	r3, #8
    7abc:	9306      	str	r3, [sp, #24]
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
    7abe:	3b07      	subs	r3, #7
    7ac0:	9307      	str	r3, [sp, #28]
    7ac2:	e77e      	b.n	79c2 <usart_init+0xde>
	ctrla = (uint32_t)config->data_order |
    7ac4:	6833      	ldr	r3, [r6, #0]
    7ac6:	9305      	str	r3, [sp, #20]
		(uint32_t)config->mux_setting |
    7ac8:	68f3      	ldr	r3, [r6, #12]
    7aca:	469b      	mov	fp, r3
		config->sample_adjustment |
    7acc:	6973      	ldr	r3, [r6, #20]
    7ace:	9303      	str	r3, [sp, #12]
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
    7ad0:	7e33      	ldrb	r3, [r6, #24]
    7ad2:	9304      	str	r3, [sp, #16]
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);
    7ad4:	2326      	movs	r3, #38	; 0x26
    7ad6:	5cf3      	ldrb	r3, [r6, r3]
    7ad8:	469a      	mov	sl, r3
	transfer_mode = (uint32_t)config->transfer_mode;
    7ada:	6873      	ldr	r3, [r6, #4]
    7adc:	4699      	mov	r9, r3
	switch (transfer_mode)
    7ade:	2b00      	cmp	r3, #0
    7ae0:	d018      	beq.n	7b14 <usart_init+0x230>
    7ae2:	2380      	movs	r3, #128	; 0x80
    7ae4:	055b      	lsls	r3, r3, #21
    7ae6:	4599      	cmp	r9, r3
    7ae8:	d001      	beq.n	7aee <usart_init+0x20a>
	enum status_code status_code = STATUS_OK;
    7aea:	2000      	movs	r0, #0
    7aec:	e025      	b.n	7b3a <usart_init+0x256>
			if (!config->use_external_clock) {
    7aee:	2327      	movs	r3, #39	; 0x27
    7af0:	5cf3      	ldrb	r3, [r6, r3]
    7af2:	2b00      	cmp	r3, #0
    7af4:	d000      	beq.n	7af8 <usart_init+0x214>
    7af6:	e779      	b.n	79ec <usart_init+0x108>
				status_code = _sercom_get_sync_baud_val(config->baudrate,
    7af8:	6a33      	ldr	r3, [r6, #32]
    7afa:	001f      	movs	r7, r3
    7afc:	b2c0      	uxtb	r0, r0
    7afe:	4b40      	ldr	r3, [pc, #256]	; (7c00 <usart_init+0x31c>)
    7b00:	4798      	blx	r3
    7b02:	0001      	movs	r1, r0
    7b04:	220e      	movs	r2, #14
    7b06:	ab06      	add	r3, sp, #24
    7b08:	469c      	mov	ip, r3
    7b0a:	4462      	add	r2, ip
    7b0c:	0038      	movs	r0, r7
    7b0e:	4b3d      	ldr	r3, [pc, #244]	; (7c04 <usart_init+0x320>)
    7b10:	4798      	blx	r3
    7b12:	e012      	b.n	7b3a <usart_init+0x256>
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_8;
    7b14:	2308      	movs	r3, #8
    7b16:	9306      	str	r3, [sp, #24]
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
    7b18:	2300      	movs	r3, #0
    7b1a:	9307      	str	r3, [sp, #28]
			if (config->use_external_clock) {
    7b1c:	2327      	movs	r3, #39	; 0x27
    7b1e:	5cf3      	ldrb	r3, [r6, r3]
    7b20:	2b00      	cmp	r3, #0
    7b22:	d00e      	beq.n	7b42 <usart_init+0x25e>
				status_code =
    7b24:	9b06      	ldr	r3, [sp, #24]
    7b26:	9300      	str	r3, [sp, #0]
    7b28:	9b07      	ldr	r3, [sp, #28]
    7b2a:	220e      	movs	r2, #14
    7b2c:	a906      	add	r1, sp, #24
    7b2e:	468c      	mov	ip, r1
    7b30:	4462      	add	r2, ip
    7b32:	6ab1      	ldr	r1, [r6, #40]	; 0x28
    7b34:	6a30      	ldr	r0, [r6, #32]
    7b36:	4f34      	ldr	r7, [pc, #208]	; (7c08 <usart_init+0x324>)
    7b38:	47b8      	blx	r7
	if (status_code != STATUS_OK) {
    7b3a:	2800      	cmp	r0, #0
    7b3c:	d000      	beq.n	7b40 <usart_init+0x25c>
    7b3e:	e6e4      	b.n	790a <usart_init+0x26>
    7b40:	e754      	b.n	79ec <usart_init+0x108>
						_sercom_get_async_baud_val(config->baudrate,
    7b42:	6a33      	ldr	r3, [r6, #32]
    7b44:	001f      	movs	r7, r3
    7b46:	b2c0      	uxtb	r0, r0
    7b48:	4b2d      	ldr	r3, [pc, #180]	; (7c00 <usart_init+0x31c>)
    7b4a:	4798      	blx	r3
    7b4c:	0001      	movs	r1, r0
				status_code =
    7b4e:	9b06      	ldr	r3, [sp, #24]
    7b50:	9300      	str	r3, [sp, #0]
    7b52:	9b07      	ldr	r3, [sp, #28]
    7b54:	220e      	movs	r2, #14
    7b56:	a806      	add	r0, sp, #24
    7b58:	4684      	mov	ip, r0
    7b5a:	4462      	add	r2, ip
    7b5c:	0038      	movs	r0, r7
    7b5e:	4f2a      	ldr	r7, [pc, #168]	; (7c08 <usart_init+0x324>)
    7b60:	47b8      	blx	r7
    7b62:	e7ea      	b.n	7b3a <usart_init+0x256>
		if(config->lin_slave_enable) {
    7b64:	7ef3      	ldrb	r3, [r6, #27]
    7b66:	2b00      	cmp	r3, #0
    7b68:	d100      	bne.n	7b6c <usart_init+0x288>
    7b6a:	e77d      	b.n	7a68 <usart_init+0x184>
			ctrla |= SERCOM_USART_CTRLA_FORM(0x4);
    7b6c:	2380      	movs	r3, #128	; 0x80
    7b6e:	04db      	lsls	r3, r3, #19
    7b70:	431f      	orrs	r7, r3
    7b72:	e779      	b.n	7a68 <usart_init+0x184>
			current_pinmux = _sercom_get_default_pad(hw, pad);
    7b74:	0020      	movs	r0, r4
    7b76:	4b25      	ldr	r3, [pc, #148]	; (7c0c <usart_init+0x328>)
    7b78:	4798      	blx	r3
    7b7a:	e007      	b.n	7b8c <usart_init+0x2a8>
    7b7c:	3701      	adds	r7, #1
	for (uint8_t pad = 0; pad < 4; pad++) {
    7b7e:	2f04      	cmp	r7, #4
    7b80:	d00d      	beq.n	7b9e <usart_init+0x2ba>
    7b82:	b2f9      	uxtb	r1, r7
		uint32_t current_pinmux = pad_pinmuxes[pad];
    7b84:	00bb      	lsls	r3, r7, #2
    7b86:	5998      	ldr	r0, [r3, r6]
		if (current_pinmux == PINMUX_DEFAULT) {
    7b88:	2800      	cmp	r0, #0
    7b8a:	d0f3      	beq.n	7b74 <usart_init+0x290>
		if (current_pinmux != PINMUX_UNUSED) {
    7b8c:	1c43      	adds	r3, r0, #1
    7b8e:	d0f5      	beq.n	7b7c <usart_init+0x298>
			pin_conf.mux_position = current_pinmux & 0xFFFF;
    7b90:	a90e      	add	r1, sp, #56	; 0x38
    7b92:	7008      	strb	r0, [r1, #0]
			system_pinmux_pin_set_config(current_pinmux >> 16, &pin_conf);
    7b94:	0c00      	lsrs	r0, r0, #16
    7b96:	b2c0      	uxtb	r0, r0
    7b98:	4b1d      	ldr	r3, [pc, #116]	; (7c10 <usart_init+0x32c>)
    7b9a:	4798      	blx	r3
    7b9c:	e7ee      	b.n	7b7c <usart_init+0x298>
		module->callback[i]            = NULL;
    7b9e:	2300      	movs	r3, #0
    7ba0:	60eb      	str	r3, [r5, #12]
    7ba2:	612b      	str	r3, [r5, #16]
    7ba4:	616b      	str	r3, [r5, #20]
    7ba6:	61ab      	str	r3, [r5, #24]
    7ba8:	61eb      	str	r3, [r5, #28]
    7baa:	622b      	str	r3, [r5, #32]
	module->tx_buffer_ptr              = NULL;
    7bac:	62ab      	str	r3, [r5, #40]	; 0x28
	module->rx_buffer_ptr              = NULL;
    7bae:	626b      	str	r3, [r5, #36]	; 0x24
	module->remaining_tx_buffer_length = 0x0000;
    7bb0:	2200      	movs	r2, #0
    7bb2:	85eb      	strh	r3, [r5, #46]	; 0x2e
	module->remaining_rx_buffer_length = 0x0000;
    7bb4:	85ab      	strh	r3, [r5, #44]	; 0x2c
	module->callback_reg_mask          = 0x00;
    7bb6:	3330      	adds	r3, #48	; 0x30
    7bb8:	54ea      	strb	r2, [r5, r3]
	module->callback_enable_mask       = 0x00;
    7bba:	3301      	adds	r3, #1
    7bbc:	54ea      	strb	r2, [r5, r3]
	module->rx_status                  = STATUS_OK;
    7bbe:	3301      	adds	r3, #1
    7bc0:	54ea      	strb	r2, [r5, r3]
	module->tx_status                  = STATUS_OK;
    7bc2:	3301      	adds	r3, #1
    7bc4:	54ea      	strb	r2, [r5, r3]
	uint8_t instance_index = _sercom_get_sercom_inst_index(module->hw);
    7bc6:	6828      	ldr	r0, [r5, #0]
    7bc8:	4b07      	ldr	r3, [pc, #28]	; (7be8 <usart_init+0x304>)
    7bca:	4798      	blx	r3
    7bcc:	0004      	movs	r4, r0
	_sercom_set_handler(instance_index, _usart_interrupt_handler);
    7bce:	4911      	ldr	r1, [pc, #68]	; (7c14 <usart_init+0x330>)
    7bd0:	4b11      	ldr	r3, [pc, #68]	; (7c18 <usart_init+0x334>)
    7bd2:	4798      	blx	r3
	_sercom_instances[instance_index] = module;
    7bd4:	00a4      	lsls	r4, r4, #2
    7bd6:	4b11      	ldr	r3, [pc, #68]	; (7c1c <usart_init+0x338>)
    7bd8:	50e5      	str	r5, [r4, r3]
	return status_code;
    7bda:	2000      	movs	r0, #0
    7bdc:	e695      	b.n	790a <usart_init+0x26>
	enum sercom_asynchronous_sample_num sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
    7bde:	2310      	movs	r3, #16
    7be0:	9306      	str	r3, [sp, #24]
	enum sercom_asynchronous_operation_mode mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
    7be2:	2300      	movs	r3, #0
    7be4:	9307      	str	r3, [sp, #28]
    7be6:	e6ec      	b.n	79c2 <usart_init+0xde>
    7be8:	00007425 	.word	0x00007425
    7bec:	40000400 	.word	0x40000400
    7bf0:	00008629 	.word	0x00008629
    7bf4:	0000859d 	.word	0x0000859d
    7bf8:	00007261 	.word	0x00007261
    7bfc:	41002000 	.word	0x41002000
    7c00:	00008645 	.word	0x00008645
    7c04:	000071a3 	.word	0x000071a3
    7c08:	000071cd 	.word	0x000071cd
    7c0c:	000072ad 	.word	0x000072ad
    7c10:	00008721 	.word	0x00008721
    7c14:	00007d49 	.word	0x00007d49
    7c18:	00007461 	.word	0x00007461
    7c1c:	20001d80 	.word	0x20001d80

00007c20 <usart_write_wait>:

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);

	/* Check that the transmitter is enabled */
	if (!(module->transmitter_enabled)) {
    7c20:	79c2      	ldrb	r2, [r0, #7]
		return STATUS_ERR_DENIED;
    7c22:	231c      	movs	r3, #28
	if (!(module->transmitter_enabled)) {
    7c24:	2a00      	cmp	r2, #0
    7c26:	d101      	bne.n	7c2c <usart_write_wait+0xc>
	while (!(usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_TXC)) {
		/* Wait until data is sent */
	}

	return STATUS_OK;
}
    7c28:	0018      	movs	r0, r3
    7c2a:	4770      	bx	lr
	if (module->remaining_tx_buffer_length > 0) {
    7c2c:	8dc2      	ldrh	r2, [r0, #46]	; 0x2e
    7c2e:	b292      	uxth	r2, r2
		return STATUS_BUSY;
    7c30:	3b17      	subs	r3, #23
	if (module->remaining_tx_buffer_length > 0) {
    7c32:	2a00      	cmp	r2, #0
    7c34:	d1f8      	bne.n	7c28 <usart_write_wait+0x8>
	SercomUsart *const usart_hw = &(module->hw->USART);
    7c36:	6802      	ldr	r2, [r0, #0]
	usart_hw->DATA.reg = tx_data;
    7c38:	8511      	strh	r1, [r2, #40]	; 0x28
	while (!(usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_TXC)) {
    7c3a:	2102      	movs	r1, #2
    7c3c:	7e13      	ldrb	r3, [r2, #24]
    7c3e:	420b      	tst	r3, r1
    7c40:	d0fc      	beq.n	7c3c <usart_write_wait+0x1c>
	return STATUS_OK;
    7c42:	2300      	movs	r3, #0
    7c44:	e7f0      	b.n	7c28 <usart_write_wait+0x8>

00007c46 <usart_read_wait>:

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);

	/* Check that the receiver is enabled */
	if (!(module->receiver_enabled)) {
    7c46:	7982      	ldrb	r2, [r0, #6]
		return STATUS_ERR_DENIED;
    7c48:	231c      	movs	r3, #28
	if (!(module->receiver_enabled)) {
    7c4a:	2a00      	cmp	r2, #0
    7c4c:	d101      	bne.n	7c52 <usart_read_wait+0xc>

	/* Read data from USART module */
	*rx_data = usart_hw->DATA.reg;

	return STATUS_OK;
}
    7c4e:	0018      	movs	r0, r3
    7c50:	4770      	bx	lr
	if (module->remaining_rx_buffer_length > 0) {
    7c52:	8d82      	ldrh	r2, [r0, #44]	; 0x2c
    7c54:	b292      	uxth	r2, r2
		return STATUS_BUSY;
    7c56:	3b17      	subs	r3, #23
	if (module->remaining_rx_buffer_length > 0) {
    7c58:	2a00      	cmp	r2, #0
    7c5a:	d1f8      	bne.n	7c4e <usart_read_wait+0x8>
	SercomUsart *const usart_hw = &(module->hw->USART);
    7c5c:	6802      	ldr	r2, [r0, #0]
	if (!(usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_RXC)) {
    7c5e:	7e10      	ldrb	r0, [r2, #24]
    7c60:	0740      	lsls	r0, r0, #29
    7c62:	d5f4      	bpl.n	7c4e <usart_read_wait+0x8>
	error_code = (uint8_t)(usart_hw->STATUS.reg & SERCOM_USART_STATUS_MASK);
    7c64:	8b53      	ldrh	r3, [r2, #26]
    7c66:	b2db      	uxtb	r3, r3
	if (error_code) {
    7c68:	0698      	lsls	r0, r3, #26
    7c6a:	d01d      	beq.n	7ca8 <usart_read_wait+0x62>
		if (error_code & SERCOM_USART_STATUS_FERR) {
    7c6c:	0798      	lsls	r0, r3, #30
    7c6e:	d503      	bpl.n	7c78 <usart_read_wait+0x32>
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_FERR;
    7c70:	2302      	movs	r3, #2
    7c72:	8353      	strh	r3, [r2, #26]
			return STATUS_ERR_BAD_FORMAT;
    7c74:	3318      	adds	r3, #24
    7c76:	e7ea      	b.n	7c4e <usart_read_wait+0x8>
		} else if (error_code & SERCOM_USART_STATUS_BUFOVF) {
    7c78:	0758      	lsls	r0, r3, #29
    7c7a:	d503      	bpl.n	7c84 <usart_read_wait+0x3e>
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_BUFOVF;
    7c7c:	2304      	movs	r3, #4
    7c7e:	8353      	strh	r3, [r2, #26]
			return STATUS_ERR_OVERFLOW;
    7c80:	331a      	adds	r3, #26
    7c82:	e7e4      	b.n	7c4e <usart_read_wait+0x8>
		} else if (error_code & SERCOM_USART_STATUS_PERR) {
    7c84:	07d8      	lsls	r0, r3, #31
    7c86:	d503      	bpl.n	7c90 <usart_read_wait+0x4a>
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_PERR;
    7c88:	2301      	movs	r3, #1
    7c8a:	8353      	strh	r3, [r2, #26]
			return STATUS_ERR_BAD_DATA;
    7c8c:	3312      	adds	r3, #18
    7c8e:	e7de      	b.n	7c4e <usart_read_wait+0x8>
		else if (error_code & SERCOM_USART_STATUS_ISF) {
    7c90:	06d8      	lsls	r0, r3, #27
    7c92:	d503      	bpl.n	7c9c <usart_read_wait+0x56>
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_ISF;
    7c94:	2310      	movs	r3, #16
    7c96:	8353      	strh	r3, [r2, #26]
			return STATUS_ERR_PROTOCOL;
    7c98:	3332      	adds	r3, #50	; 0x32
    7c9a:	e7d8      	b.n	7c4e <usart_read_wait+0x8>
		else if (error_code & SERCOM_USART_STATUS_COLL) {
    7c9c:	069b      	lsls	r3, r3, #26
    7c9e:	d503      	bpl.n	7ca8 <usart_read_wait+0x62>
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_COLL;
    7ca0:	2320      	movs	r3, #32
    7ca2:	8353      	strh	r3, [r2, #26]
			return STATUS_ERR_PACKET_COLLISION;
    7ca4:	3321      	adds	r3, #33	; 0x21
    7ca6:	e7d2      	b.n	7c4e <usart_read_wait+0x8>
	*rx_data = usart_hw->DATA.reg;
    7ca8:	8d13      	ldrh	r3, [r2, #40]	; 0x28
    7caa:	800b      	strh	r3, [r1, #0]
	return STATUS_OK;
    7cac:	2300      	movs	r3, #0
    7cae:	e7ce      	b.n	7c4e <usart_read_wait+0x8>

00007cb0 <usart_read_buffer_wait>:
 */
enum status_code usart_read_buffer_wait(
		struct usart_module *const module,
		uint8_t *rx_data,
		uint16_t length)
{
    7cb0:	b5f0      	push	{r4, r5, r6, r7, lr}
    7cb2:	46d6      	mov	lr, sl
    7cb4:	b500      	push	{lr}
    7cb6:	b084      	sub	sp, #16
    7cb8:	0004      	movs	r4, r0
    7cba:	9101      	str	r1, [sp, #4]
	Assert(module);
	Assert(module->hw);

	/* Check if the buffer length is valid */
	if (length == 0) {
		return STATUS_ERR_INVALID_ARG;
    7cbc:	2017      	movs	r0, #23
	if (length == 0) {
    7cbe:	2a00      	cmp	r2, #0
    7cc0:	d103      	bne.n	7cca <usart_read_buffer_wait+0x1a>
			rx_data[rx_pos++] = (received_data >> 8);
		}
	}

	return STATUS_OK;
}
    7cc2:	b004      	add	sp, #16
    7cc4:	bc04      	pop	{r2}
    7cc6:	4692      	mov	sl, r2
    7cc8:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (!(module->receiver_enabled)) {
    7cca:	79a3      	ldrb	r3, [r4, #6]
		return STATUS_ERR_DENIED;
    7ccc:	3005      	adds	r0, #5
	if (!(module->receiver_enabled)) {
    7cce:	2b00      	cmp	r3, #0
    7cd0:	d0f7      	beq.n	7cc2 <usart_read_buffer_wait+0x12>
	SercomUsart *const usart_hw = &(module->hw->USART);
    7cd2:	6826      	ldr	r6, [r4, #0]
	while (length--) {
    7cd4:	3a01      	subs	r2, #1
    7cd6:	b293      	uxth	r3, r2
    7cd8:	469a      	mov	sl, r3
    7cda:	2500      	movs	r5, #0
			if (usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_RXC) {
    7cdc:	2704      	movs	r7, #4
    7cde:	e019      	b.n	7d14 <usart_read_buffer_wait+0x64>
		uint16_t received_data = 0;
    7ce0:	2300      	movs	r3, #0
    7ce2:	aa02      	add	r2, sp, #8
    7ce4:	80d3      	strh	r3, [r2, #6]
		retval = usart_read_wait(module, &received_data);
    7ce6:	1d91      	adds	r1, r2, #6
    7ce8:	0020      	movs	r0, r4
    7cea:	4b15      	ldr	r3, [pc, #84]	; (7d40 <usart_read_buffer_wait+0x90>)
    7cec:	4798      	blx	r3
		if (retval != STATUS_OK) {
    7cee:	2800      	cmp	r0, #0
    7cf0:	d1e7      	bne.n	7cc2 <usart_read_buffer_wait+0x12>
		rx_data[rx_pos++] = received_data;
    7cf2:	1c69      	adds	r1, r5, #1
    7cf4:	b289      	uxth	r1, r1
    7cf6:	ab02      	add	r3, sp, #8
    7cf8:	88db      	ldrh	r3, [r3, #6]
    7cfa:	9a01      	ldr	r2, [sp, #4]
    7cfc:	5553      	strb	r3, [r2, r5]
		if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
    7cfe:	7962      	ldrb	r2, [r4, #5]
    7d00:	2a01      	cmp	r2, #1
    7d02:	d014      	beq.n	7d2e <usart_read_buffer_wait+0x7e>
		rx_data[rx_pos++] = received_data;
    7d04:	000d      	movs	r5, r1
	while (length--) {
    7d06:	4653      	mov	r3, sl
    7d08:	3b01      	subs	r3, #1
    7d0a:	b29b      	uxth	r3, r3
    7d0c:	469a      	mov	sl, r3
    7d0e:	4b0d      	ldr	r3, [pc, #52]	; (7d44 <usart_read_buffer_wait+0x94>)
    7d10:	459a      	cmp	sl, r3
    7d12:	d0d6      	beq.n	7cc2 <usart_read_buffer_wait+0x12>
			if (usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_RXC) {
    7d14:	7e33      	ldrb	r3, [r6, #24]
    7d16:	423b      	tst	r3, r7
    7d18:	d1e2      	bne.n	7ce0 <usart_read_buffer_wait+0x30>
    7d1a:	4b0a      	ldr	r3, [pc, #40]	; (7d44 <usart_read_buffer_wait+0x94>)
    7d1c:	7e32      	ldrb	r2, [r6, #24]
    7d1e:	423a      	tst	r2, r7
    7d20:	d1de      	bne.n	7ce0 <usart_read_buffer_wait+0x30>
			} else if (i == USART_TIMEOUT) {
    7d22:	2b01      	cmp	r3, #1
    7d24:	d009      	beq.n	7d3a <usart_read_buffer_wait+0x8a>
    7d26:	3b01      	subs	r3, #1
		for (uint32_t i = 0; i <= USART_TIMEOUT; i++) {
    7d28:	2b00      	cmp	r3, #0
    7d2a:	d1f7      	bne.n	7d1c <usart_read_buffer_wait+0x6c>
    7d2c:	e7d8      	b.n	7ce0 <usart_read_buffer_wait+0x30>
			rx_data[rx_pos++] = (received_data >> 8);
    7d2e:	3502      	adds	r5, #2
    7d30:	b2ad      	uxth	r5, r5
    7d32:	0a1b      	lsrs	r3, r3, #8
    7d34:	9a01      	ldr	r2, [sp, #4]
    7d36:	5453      	strb	r3, [r2, r1]
    7d38:	e7e5      	b.n	7d06 <usart_read_buffer_wait+0x56>
				return STATUS_ERR_TIMEOUT;
    7d3a:	2012      	movs	r0, #18
    7d3c:	e7c1      	b.n	7cc2 <usart_read_buffer_wait+0x12>
    7d3e:	46c0      	nop			; (mov r8, r8)
    7d40:	00007c47 	.word	0x00007c47
    7d44:	0000ffff 	.word	0x0000ffff

00007d48 <_usart_interrupt_handler>:
 * \param[in]  instance  ID of the SERCOM instance calling the interrupt
 *                       handler.
 */
void _usart_interrupt_handler(
		uint8_t instance)
{
    7d48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	uint16_t callback_status;
	uint8_t error_code;


	/* Get device instance from the look-up table */
	struct usart_module *module
    7d4a:	0080      	lsls	r0, r0, #2
    7d4c:	4b62      	ldr	r3, [pc, #392]	; (7ed8 <_usart_interrupt_handler+0x190>)
    7d4e:	58c5      	ldr	r5, [r0, r3]
		= (struct usart_module *)_sercom_instances[instance];

	/* Pointer to the hardware module instance */
	SercomUsart *const usart_hw
		= &(module->hw->USART);
    7d50:	682c      	ldr	r4, [r5, #0]
	return (usart_hw->SYNCBUSY.reg);
    7d52:	69e3      	ldr	r3, [r4, #28]
	while (usart_is_syncing(module)) {
    7d54:	2b00      	cmp	r3, #0
    7d56:	d1fc      	bne.n	7d52 <_usart_interrupt_handler+0xa>

	/* Wait for the synchronization to complete */
	_usart_wait_for_sync(module);

	/* Read and mask interrupt flag register */
	interrupt_status = usart_hw->INTFLAG.reg;
    7d58:	7e23      	ldrb	r3, [r4, #24]
	interrupt_status &= usart_hw->INTENSET.reg;
    7d5a:	7da6      	ldrb	r6, [r4, #22]
    7d5c:	401e      	ands	r6, r3
	callback_status = module->callback_reg_mask &
    7d5e:	2330      	movs	r3, #48	; 0x30
    7d60:	5ceb      	ldrb	r3, [r5, r3]
    7d62:	2231      	movs	r2, #49	; 0x31
    7d64:	5caf      	ldrb	r7, [r5, r2]
    7d66:	401f      	ands	r7, r3
			module->callback_enable_mask;

	/* Check if a DATA READY interrupt has occurred,
	 * and if there is more to transfer */
	if (interrupt_status & SERCOM_USART_INTFLAG_DRE) {
    7d68:	07f3      	lsls	r3, r6, #31
    7d6a:	d522      	bpl.n	7db2 <_usart_interrupt_handler+0x6a>
		if (module->remaining_tx_buffer_length) {
    7d6c:	8deb      	ldrh	r3, [r5, #46]	; 0x2e
    7d6e:	b29b      	uxth	r3, r3
    7d70:	2b00      	cmp	r3, #0
    7d72:	d01c      	beq.n	7dae <_usart_interrupt_handler+0x66>
			/* Write value will be at least 8-bits long */
			uint16_t data_to_send = *(module->tx_buffer_ptr);
    7d74:	6aaa      	ldr	r2, [r5, #40]	; 0x28
    7d76:	7813      	ldrb	r3, [r2, #0]
    7d78:	b2db      	uxtb	r3, r3
			/* Increment 8-bit pointer */
			(module->tx_buffer_ptr)++;
    7d7a:	1c51      	adds	r1, r2, #1
    7d7c:	62a9      	str	r1, [r5, #40]	; 0x28

			if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
    7d7e:	7969      	ldrb	r1, [r5, #5]
    7d80:	2901      	cmp	r1, #1
    7d82:	d00e      	beq.n	7da2 <_usart_interrupt_handler+0x5a>
			uint16_t data_to_send = *(module->tx_buffer_ptr);
    7d84:	b29b      	uxth	r3, r3
				data_to_send |= (*(module->tx_buffer_ptr) << 8);
				/* Increment 8-bit pointer */
				(module->tx_buffer_ptr)++;
			}
			/* Write the data to send */
			usart_hw->DATA.reg = (data_to_send & SERCOM_USART_DATA_MASK);
    7d86:	05db      	lsls	r3, r3, #23
    7d88:	0ddb      	lsrs	r3, r3, #23
    7d8a:	8523      	strh	r3, [r4, #40]	; 0x28

			if (--(module->remaining_tx_buffer_length) == 0) {
    7d8c:	8deb      	ldrh	r3, [r5, #46]	; 0x2e
    7d8e:	3b01      	subs	r3, #1
    7d90:	b29b      	uxth	r3, r3
    7d92:	85eb      	strh	r3, [r5, #46]	; 0x2e
    7d94:	2b00      	cmp	r3, #0
    7d96:	d10c      	bne.n	7db2 <_usart_interrupt_handler+0x6a>
				/* Disable the Data Register Empty Interrupt */
				usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_DRE;
    7d98:	3301      	adds	r3, #1
    7d9a:	7523      	strb	r3, [r4, #20]
				/* Enable Transmission Complete interrupt */
				usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_TXC;
    7d9c:	3301      	adds	r3, #1
    7d9e:	75a3      	strb	r3, [r4, #22]
    7da0:	e007      	b.n	7db2 <_usart_interrupt_handler+0x6a>
				data_to_send |= (*(module->tx_buffer_ptr) << 8);
    7da2:	7851      	ldrb	r1, [r2, #1]
    7da4:	0209      	lsls	r1, r1, #8
    7da6:	430b      	orrs	r3, r1
				(module->tx_buffer_ptr)++;
    7da8:	3202      	adds	r2, #2
    7daa:	62aa      	str	r2, [r5, #40]	; 0x28
    7dac:	e7eb      	b.n	7d86 <_usart_interrupt_handler+0x3e>

			}
		} else {
			usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_DRE;
    7dae:	2301      	movs	r3, #1
    7db0:	7523      	strb	r3, [r4, #20]
		}
	}

	/* Check if the Transmission Complete interrupt has occurred and
	 * that the transmit buffer is empty */
	if (interrupt_status & SERCOM_USART_INTFLAG_TXC) {
    7db2:	07b3      	lsls	r3, r6, #30
    7db4:	d506      	bpl.n	7dc4 <_usart_interrupt_handler+0x7c>

		/* Disable TX Complete Interrupt, and set STATUS_OK */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_TXC;
    7db6:	2302      	movs	r3, #2
    7db8:	7523      	strb	r3, [r4, #20]
		module->tx_status = STATUS_OK;
    7dba:	2200      	movs	r2, #0
    7dbc:	3331      	adds	r3, #49	; 0x31
    7dbe:	54ea      	strb	r2, [r5, r3]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_BUFFER_TRANSMITTED)) {
    7dc0:	07fb      	lsls	r3, r7, #31
    7dc2:	d41a      	bmi.n	7dfa <_usart_interrupt_handler+0xb2>
		}
	}

	/* Check if the Receive Complete interrupt has occurred, and that
	 * there's more data to receive */
	if (interrupt_status & SERCOM_USART_INTFLAG_RXC) {
    7dc4:	0773      	lsls	r3, r6, #29
    7dc6:	d565      	bpl.n	7e94 <_usart_interrupt_handler+0x14c>

		if (module->remaining_rx_buffer_length) {
    7dc8:	8dab      	ldrh	r3, [r5, #44]	; 0x2c
    7dca:	b29b      	uxth	r3, r3
    7dcc:	2b00      	cmp	r3, #0
    7dce:	d05f      	beq.n	7e90 <_usart_interrupt_handler+0x148>
			/* Read out the status code and mask away all but the 4 LSBs*/
			error_code = (uint8_t)(usart_hw->STATUS.reg & SERCOM_USART_STATUS_MASK);
    7dd0:	8b63      	ldrh	r3, [r4, #26]
    7dd2:	b2db      	uxtb	r3, r3
#if !SAMD20
			/* CTS status should not be considered as an error */
			if(error_code & SERCOM_USART_STATUS_CTS) {
    7dd4:	071a      	lsls	r2, r3, #28
    7dd6:	d414      	bmi.n	7e02 <_usart_interrupt_handler+0xba>
			error_code = (uint8_t)(usart_hw->STATUS.reg & SERCOM_USART_STATUS_MASK);
    7dd8:	223f      	movs	r2, #63	; 0x3f
    7dda:	4013      	ands	r3, r2
			if(error_code & SERCOM_USART_STATUS_TXE) {
				error_code &= ~SERCOM_USART_STATUS_TXE;
			}
#endif
			/* Check if an error has occurred during the receiving */
			if (error_code) {
    7ddc:	2b00      	cmp	r3, #0
    7dde:	d034      	beq.n	7e4a <_usart_interrupt_handler+0x102>
				/* Check which error occurred */
				if (error_code & SERCOM_USART_STATUS_FERR) {
    7de0:	079a      	lsls	r2, r3, #30
    7de2:	d511      	bpl.n	7e08 <_usart_interrupt_handler+0xc0>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_BAD_FORMAT;
    7de4:	221a      	movs	r2, #26
    7de6:	2332      	movs	r3, #50	; 0x32
    7de8:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_FERR;
    7dea:	3b30      	subs	r3, #48	; 0x30
    7dec:	8363      	strh	r3, [r4, #26]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_COLL;
				}
#endif

				/* Run callback if registered and enabled */
				if (callback_status
    7dee:	077b      	lsls	r3, r7, #29
    7df0:	d550      	bpl.n	7e94 <_usart_interrupt_handler+0x14c>
						& (1 << USART_CALLBACK_ERROR)) {
					(*(module->callback[USART_CALLBACK_ERROR]))(module);
    7df2:	0028      	movs	r0, r5
    7df4:	696b      	ldr	r3, [r5, #20]
    7df6:	4798      	blx	r3
    7df8:	e04c      	b.n	7e94 <_usart_interrupt_handler+0x14c>
			(*(module->callback[USART_CALLBACK_BUFFER_TRANSMITTED]))(module);
    7dfa:	0028      	movs	r0, r5
    7dfc:	68eb      	ldr	r3, [r5, #12]
    7dfe:	4798      	blx	r3
    7e00:	e7e0      	b.n	7dc4 <_usart_interrupt_handler+0x7c>
				error_code &= ~SERCOM_USART_STATUS_CTS;
    7e02:	2237      	movs	r2, #55	; 0x37
    7e04:	4013      	ands	r3, r2
    7e06:	e7e9      	b.n	7ddc <_usart_interrupt_handler+0x94>
				} else if (error_code & SERCOM_USART_STATUS_BUFOVF) {
    7e08:	075a      	lsls	r2, r3, #29
    7e0a:	d505      	bpl.n	7e18 <_usart_interrupt_handler+0xd0>
					module->rx_status = STATUS_ERR_OVERFLOW;
    7e0c:	221e      	movs	r2, #30
    7e0e:	2332      	movs	r3, #50	; 0x32
    7e10:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_BUFOVF;
    7e12:	3b2e      	subs	r3, #46	; 0x2e
    7e14:	8363      	strh	r3, [r4, #26]
    7e16:	e7ea      	b.n	7dee <_usart_interrupt_handler+0xa6>
				} else if (error_code & SERCOM_USART_STATUS_PERR) {
    7e18:	07da      	lsls	r2, r3, #31
    7e1a:	d505      	bpl.n	7e28 <_usart_interrupt_handler+0xe0>
					module->rx_status = STATUS_ERR_BAD_DATA;
    7e1c:	2213      	movs	r2, #19
    7e1e:	2332      	movs	r3, #50	; 0x32
    7e20:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_PERR;
    7e22:	3b31      	subs	r3, #49	; 0x31
    7e24:	8363      	strh	r3, [r4, #26]
    7e26:	e7e2      	b.n	7dee <_usart_interrupt_handler+0xa6>
				else if (error_code & SERCOM_USART_STATUS_ISF) {
    7e28:	06da      	lsls	r2, r3, #27
    7e2a:	d505      	bpl.n	7e38 <_usart_interrupt_handler+0xf0>
					module->rx_status = STATUS_ERR_PROTOCOL;
    7e2c:	2242      	movs	r2, #66	; 0x42
    7e2e:	2332      	movs	r3, #50	; 0x32
    7e30:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_ISF;
    7e32:	3b22      	subs	r3, #34	; 0x22
    7e34:	8363      	strh	r3, [r4, #26]
    7e36:	e7da      	b.n	7dee <_usart_interrupt_handler+0xa6>
				else if (error_code & SERCOM_USART_STATUS_COLL) {
    7e38:	2220      	movs	r2, #32
    7e3a:	421a      	tst	r2, r3
    7e3c:	d0d7      	beq.n	7dee <_usart_interrupt_handler+0xa6>
					module->rx_status = STATUS_ERR_PACKET_COLLISION;
    7e3e:	3221      	adds	r2, #33	; 0x21
    7e40:	2332      	movs	r3, #50	; 0x32
    7e42:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_COLL;
    7e44:	3b12      	subs	r3, #18
    7e46:	8363      	strh	r3, [r4, #26]
    7e48:	e7d1      	b.n	7dee <_usart_interrupt_handler+0xa6>

			} else {

				/* Read current packet from DATA register,
				 * increment buffer pointer and decrement buffer length */
				uint16_t received_data = (usart_hw->DATA.reg & SERCOM_USART_DATA_MASK);
    7e4a:	8d23      	ldrh	r3, [r4, #40]	; 0x28
    7e4c:	05db      	lsls	r3, r3, #23
    7e4e:	0ddb      	lsrs	r3, r3, #23

				/* Read value will be at least 8-bits long */
				*(module->rx_buffer_ptr) = received_data;
    7e50:	b2da      	uxtb	r2, r3
    7e52:	6a69      	ldr	r1, [r5, #36]	; 0x24
    7e54:	700a      	strb	r2, [r1, #0]
				/* Increment 8-bit pointer */
				module->rx_buffer_ptr += 1;
    7e56:	6a6a      	ldr	r2, [r5, #36]	; 0x24
    7e58:	1c51      	adds	r1, r2, #1
    7e5a:	6269      	str	r1, [r5, #36]	; 0x24

				if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
    7e5c:	7969      	ldrb	r1, [r5, #5]
    7e5e:	2901      	cmp	r1, #1
    7e60:	d010      	beq.n	7e84 <_usart_interrupt_handler+0x13c>
					/* Increment 8-bit pointer */
					module->rx_buffer_ptr += 1;
				}

				/* Check if the last character have been received */
				if(--(module->remaining_rx_buffer_length) == 0) {
    7e62:	8dab      	ldrh	r3, [r5, #44]	; 0x2c
    7e64:	3b01      	subs	r3, #1
    7e66:	b29b      	uxth	r3, r3
    7e68:	85ab      	strh	r3, [r5, #44]	; 0x2c
    7e6a:	2b00      	cmp	r3, #0
    7e6c:	d112      	bne.n	7e94 <_usart_interrupt_handler+0x14c>
					/* Disable RX Complete Interrupt,
					 * and set STATUS_OK */
					usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_RXC;
    7e6e:	3304      	adds	r3, #4
    7e70:	7523      	strb	r3, [r4, #20]
					module->rx_status = STATUS_OK;
    7e72:	2200      	movs	r2, #0
    7e74:	332e      	adds	r3, #46	; 0x2e
    7e76:	54ea      	strb	r2, [r5, r3]

					/* Run callback if registered and enabled */
					if (callback_status
    7e78:	07bb      	lsls	r3, r7, #30
    7e7a:	d50b      	bpl.n	7e94 <_usart_interrupt_handler+0x14c>
							& (1 << USART_CALLBACK_BUFFER_RECEIVED)) {
						(*(module->callback[USART_CALLBACK_BUFFER_RECEIVED]))(module);
    7e7c:	0028      	movs	r0, r5
    7e7e:	692b      	ldr	r3, [r5, #16]
    7e80:	4798      	blx	r3
    7e82:	e007      	b.n	7e94 <_usart_interrupt_handler+0x14c>
					*(module->rx_buffer_ptr) = (received_data >> 8);
    7e84:	0a1b      	lsrs	r3, r3, #8
    7e86:	7053      	strb	r3, [r2, #1]
					module->rx_buffer_ptr += 1;
    7e88:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    7e8a:	3301      	adds	r3, #1
    7e8c:	626b      	str	r3, [r5, #36]	; 0x24
    7e8e:	e7e8      	b.n	7e62 <_usart_interrupt_handler+0x11a>
					}
				}
			}
		} else {
			/* This should not happen. Disable Receive Complete interrupt. */
			usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_RXC;
    7e90:	2304      	movs	r3, #4
    7e92:	7523      	strb	r3, [r4, #20]
		}
	}

#ifdef FEATURE_USART_HARDWARE_FLOW_CONTROL
	if (interrupt_status & SERCOM_USART_INTFLAG_CTSIC) {
    7e94:	06f3      	lsls	r3, r6, #27
    7e96:	d504      	bpl.n	7ea2 <_usart_interrupt_handler+0x15a>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_CTSIC;
    7e98:	2310      	movs	r3, #16
    7e9a:	7523      	strb	r3, [r4, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_CTSIC;
    7e9c:	7623      	strb	r3, [r4, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_CTS_INPUT_CHANGE)) {
    7e9e:	06fb      	lsls	r3, r7, #27
    7ea0:	d40e      	bmi.n	7ec0 <_usart_interrupt_handler+0x178>
		}
	}
#endif

#ifdef FEATURE_USART_LIN_SLAVE
	if (interrupt_status & SERCOM_USART_INTFLAG_RXBRK) {
    7ea2:	06b3      	lsls	r3, r6, #26
    7ea4:	d504      	bpl.n	7eb0 <_usart_interrupt_handler+0x168>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_RXBRK;
    7ea6:	2320      	movs	r3, #32
    7ea8:	7523      	strb	r3, [r4, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_RXBRK;
    7eaa:	7623      	strb	r3, [r4, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_BREAK_RECEIVED)) {
    7eac:	073b      	lsls	r3, r7, #28
    7eae:	d40b      	bmi.n	7ec8 <_usart_interrupt_handler+0x180>
		}
	}
#endif

#ifdef FEATURE_USART_START_FRAME_DECTION
	if (interrupt_status & SERCOM_USART_INTFLAG_RXS) {
    7eb0:	0733      	lsls	r3, r6, #28
    7eb2:	d504      	bpl.n	7ebe <_usart_interrupt_handler+0x176>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_RXS;
    7eb4:	2308      	movs	r3, #8
    7eb6:	7523      	strb	r3, [r4, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_RXS;
    7eb8:	7623      	strb	r3, [r4, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_START_RECEIVED)) {
    7eba:	06bb      	lsls	r3, r7, #26
    7ebc:	d408      	bmi.n	7ed0 <_usart_interrupt_handler+0x188>
			(*(module->callback[USART_CALLBACK_START_RECEIVED]))(module);
		}
	}
#endif
}
    7ebe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			(*(module->callback[USART_CALLBACK_CTS_INPUT_CHANGE]))(module);
    7ec0:	0028      	movs	r0, r5
    7ec2:	69eb      	ldr	r3, [r5, #28]
    7ec4:	4798      	blx	r3
    7ec6:	e7ec      	b.n	7ea2 <_usart_interrupt_handler+0x15a>
			(*(module->callback[USART_CALLBACK_BREAK_RECEIVED]))(module);
    7ec8:	0028      	movs	r0, r5
    7eca:	69ab      	ldr	r3, [r5, #24]
    7ecc:	4798      	blx	r3
    7ece:	e7ef      	b.n	7eb0 <_usart_interrupt_handler+0x168>
			(*(module->callback[USART_CALLBACK_START_RECEIVED]))(module);
    7ed0:	6a2b      	ldr	r3, [r5, #32]
    7ed2:	0028      	movs	r0, r5
    7ed4:	4798      	blx	r3
}
    7ed6:	e7f2      	b.n	7ebe <_usart_interrupt_handler+0x176>
    7ed8:	20001d80 	.word	0x20001d80

00007edc <system_clock_source_get_hz>:
 *
 * \returns Frequency of the given clock source, in Hz.
 */
uint32_t system_clock_source_get_hz(
		const enum system_clock_source clock_source)
{
    7edc:	b510      	push	{r4, lr}
	switch (clock_source) {
    7ede:	2808      	cmp	r0, #8
    7ee0:	d803      	bhi.n	7eea <system_clock_source_get_hz+0xe>
    7ee2:	0080      	lsls	r0, r0, #2
    7ee4:	4b1c      	ldr	r3, [pc, #112]	; (7f58 <system_clock_source_get_hz+0x7c>)
    7ee6:	581b      	ldr	r3, [r3, r0]
    7ee8:	469f      	mov	pc, r3

		return _system_clock_inst.dpll.frequency;
#endif

	default:
		return 0;
    7eea:	2000      	movs	r0, #0
    7eec:	e032      	b.n	7f54 <system_clock_source_get_hz+0x78>
		return _system_clock_inst.xosc.frequency;
    7eee:	4b1b      	ldr	r3, [pc, #108]	; (7f5c <system_clock_source_get_hz+0x80>)
    7ef0:	6918      	ldr	r0, [r3, #16]
    7ef2:	e02f      	b.n	7f54 <system_clock_source_get_hz+0x78>
		return 8000000UL >> SYSCTRL->OSC8M.bit.PRESC;
    7ef4:	4b1a      	ldr	r3, [pc, #104]	; (7f60 <system_clock_source_get_hz+0x84>)
    7ef6:	6a1b      	ldr	r3, [r3, #32]
    7ef8:	059b      	lsls	r3, r3, #22
    7efa:	0f9b      	lsrs	r3, r3, #30
    7efc:	4819      	ldr	r0, [pc, #100]	; (7f64 <system_clock_source_get_hz+0x88>)
    7efe:	40d8      	lsrs	r0, r3
    7f00:	e028      	b.n	7f54 <system_clock_source_get_hz+0x78>
		return _system_clock_inst.xosc32k.frequency;
    7f02:	4b16      	ldr	r3, [pc, #88]	; (7f5c <system_clock_source_get_hz+0x80>)
    7f04:	6958      	ldr	r0, [r3, #20]
    7f06:	e025      	b.n	7f54 <system_clock_source_get_hz+0x78>
		if (!(_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_ENABLE))
    7f08:	4b14      	ldr	r3, [pc, #80]	; (7f5c <system_clock_source_get_hz+0x80>)
    7f0a:	681b      	ldr	r3, [r3, #0]
			return 0;
    7f0c:	2000      	movs	r0, #0
		if (!(_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_ENABLE))
    7f0e:	079b      	lsls	r3, r3, #30
    7f10:	d520      	bpl.n	7f54 <system_clock_source_get_hz+0x78>
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
    7f12:	4913      	ldr	r1, [pc, #76]	; (7f60 <system_clock_source_get_hz+0x84>)
    7f14:	2210      	movs	r2, #16
    7f16:	68cb      	ldr	r3, [r1, #12]
    7f18:	421a      	tst	r2, r3
    7f1a:	d0fc      	beq.n	7f16 <system_clock_source_get_hz+0x3a>
		switch(_system_clock_inst.dfll.control &
    7f1c:	4b0f      	ldr	r3, [pc, #60]	; (7f5c <system_clock_source_get_hz+0x80>)
    7f1e:	681a      	ldr	r2, [r3, #0]
    7f20:	2324      	movs	r3, #36	; 0x24
    7f22:	4013      	ands	r3, r2
    7f24:	2b04      	cmp	r3, #4
    7f26:	d001      	beq.n	7f2c <system_clock_source_get_hz+0x50>
			return 48000000UL;
    7f28:	480f      	ldr	r0, [pc, #60]	; (7f68 <system_clock_source_get_hz+0x8c>)
    7f2a:	e013      	b.n	7f54 <system_clock_source_get_hz+0x78>
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
    7f2c:	2000      	movs	r0, #0
    7f2e:	4b0f      	ldr	r3, [pc, #60]	; (7f6c <system_clock_source_get_hz+0x90>)
    7f30:	4798      	blx	r3
					(_system_clock_inst.dfll.mul & 0xffff);
    7f32:	4b0a      	ldr	r3, [pc, #40]	; (7f5c <system_clock_source_get_hz+0x80>)
    7f34:	689b      	ldr	r3, [r3, #8]
    7f36:	041b      	lsls	r3, r3, #16
    7f38:	0c1b      	lsrs	r3, r3, #16
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
    7f3a:	4358      	muls	r0, r3
    7f3c:	e00a      	b.n	7f54 <system_clock_source_get_hz+0x78>
		if (!(SYSCTRL->DPLLSTATUS.reg & SYSCTRL_DPLLSTATUS_ENABLE)) {
    7f3e:	2350      	movs	r3, #80	; 0x50
    7f40:	4a07      	ldr	r2, [pc, #28]	; (7f60 <system_clock_source_get_hz+0x84>)
    7f42:	5cd3      	ldrb	r3, [r2, r3]
			return 0;
    7f44:	2000      	movs	r0, #0
		if (!(SYSCTRL->DPLLSTATUS.reg & SYSCTRL_DPLLSTATUS_ENABLE)) {
    7f46:	075b      	lsls	r3, r3, #29
    7f48:	d504      	bpl.n	7f54 <system_clock_source_get_hz+0x78>
		return _system_clock_inst.dpll.frequency;
    7f4a:	4b04      	ldr	r3, [pc, #16]	; (7f5c <system_clock_source_get_hz+0x80>)
    7f4c:	68d8      	ldr	r0, [r3, #12]
    7f4e:	e001      	b.n	7f54 <system_clock_source_get_hz+0x78>
		return 32768UL;
    7f50:	2080      	movs	r0, #128	; 0x80
    7f52:	0200      	lsls	r0, r0, #8
	}
}
    7f54:	bd10      	pop	{r4, pc}
    7f56:	46c0      	nop			; (mov r8, r8)
    7f58:	00016024 	.word	0x00016024
    7f5c:	20000160 	.word	0x20000160
    7f60:	40000800 	.word	0x40000800
    7f64:	007a1200 	.word	0x007a1200
    7f68:	02dc6c00 	.word	0x02dc6c00
    7f6c:	00008645 	.word	0x00008645

00007f70 <system_clock_source_osc8m_set_config>:
 *
 * \param[in] config  OSC8M configuration structure containing the new config
 */
void system_clock_source_osc8m_set_config(
		struct system_clock_source_osc8m_config *const config)
{
    7f70:	b570      	push	{r4, r5, r6, lr}
	SYSCTRL_OSC8M_Type temp = SYSCTRL->OSC8M;
    7f72:	490c      	ldr	r1, [pc, #48]	; (7fa4 <system_clock_source_osc8m_set_config+0x34>)
    7f74:	6a0b      	ldr	r3, [r1, #32]

	/* Use temporary struct to reduce register access */
	temp.bit.PRESC    = config->prescaler;
    7f76:	7804      	ldrb	r4, [r0, #0]
	temp.bit.ONDEMAND = config->on_demand;
    7f78:	7885      	ldrb	r5, [r0, #2]
	temp.bit.RUNSTDBY = config->run_in_standby;

	SYSCTRL->OSC8M = temp;
    7f7a:	7840      	ldrb	r0, [r0, #1]
    7f7c:	2201      	movs	r2, #1
    7f7e:	4010      	ands	r0, r2
    7f80:	0180      	lsls	r0, r0, #6
    7f82:	2640      	movs	r6, #64	; 0x40
    7f84:	43b3      	bics	r3, r6
    7f86:	4303      	orrs	r3, r0
    7f88:	402a      	ands	r2, r5
    7f8a:	01d2      	lsls	r2, r2, #7
    7f8c:	2080      	movs	r0, #128	; 0x80
    7f8e:	4383      	bics	r3, r0
    7f90:	4313      	orrs	r3, r2
    7f92:	2203      	movs	r2, #3
    7f94:	4022      	ands	r2, r4
    7f96:	0212      	lsls	r2, r2, #8
    7f98:	4803      	ldr	r0, [pc, #12]	; (7fa8 <system_clock_source_osc8m_set_config+0x38>)
    7f9a:	4003      	ands	r3, r0
    7f9c:	4313      	orrs	r3, r2
    7f9e:	620b      	str	r3, [r1, #32]
}
    7fa0:	bd70      	pop	{r4, r5, r6, pc}
    7fa2:	46c0      	nop			; (mov r8, r8)
    7fa4:	40000800 	.word	0x40000800
    7fa8:	fffffcff 	.word	0xfffffcff

00007fac <system_clock_source_osc32k_set_config>:
 *
 * \param[in] config  OSC32K configuration structure containing the new config
 */
void system_clock_source_osc32k_set_config(
		struct system_clock_source_osc32k_config *const config)
{
    7fac:	b5f0      	push	{r4, r5, r6, r7, lr}
    7fae:	46ce      	mov	lr, r9
    7fb0:	4647      	mov	r7, r8
    7fb2:	b580      	push	{r7, lr}
	SYSCTRL_OSC32K_Type temp = SYSCTRL->OSC32K;
    7fb4:	4b19      	ldr	r3, [pc, #100]	; (801c <system_clock_source_osc32k_set_config+0x70>)
    7fb6:	4699      	mov	r9, r3
    7fb8:	699b      	ldr	r3, [r3, #24]

	/* Update settings via a temporary struct to reduce register access */
	temp.bit.EN1K     = config->enable_1khz_output;
    7fba:	7841      	ldrb	r1, [r0, #1]
    7fbc:	468c      	mov	ip, r1
	temp.bit.EN32K    = config->enable_32khz_output;
	temp.bit.STARTUP  = config->startup_time;
    7fbe:	7805      	ldrb	r5, [r0, #0]
	temp.bit.ONDEMAND = config->on_demand;
    7fc0:	7906      	ldrb	r6, [r0, #4]
	temp.bit.RUNSTDBY = config->run_in_standby;
    7fc2:	78c7      	ldrb	r7, [r0, #3]
	temp.bit.WRTLOCK  = config->write_once;
    7fc4:	7944      	ldrb	r4, [r0, #5]

	SYSCTRL->OSC32K  = temp;
    7fc6:	7880      	ldrb	r0, [r0, #2]
    7fc8:	2101      	movs	r1, #1
    7fca:	4008      	ands	r0, r1
    7fcc:	0080      	lsls	r0, r0, #2
    7fce:	2204      	movs	r2, #4
    7fd0:	4393      	bics	r3, r2
    7fd2:	4303      	orrs	r3, r0
    7fd4:	4660      	mov	r0, ip
    7fd6:	4008      	ands	r0, r1
    7fd8:	00c0      	lsls	r0, r0, #3
    7fda:	3204      	adds	r2, #4
    7fdc:	4393      	bics	r3, r2
    7fde:	4303      	orrs	r3, r0
    7fe0:	0038      	movs	r0, r7
    7fe2:	4008      	ands	r0, r1
    7fe4:	0180      	lsls	r0, r0, #6
    7fe6:	2740      	movs	r7, #64	; 0x40
    7fe8:	43bb      	bics	r3, r7
    7fea:	4303      	orrs	r3, r0
    7fec:	0030      	movs	r0, r6
    7fee:	4008      	ands	r0, r1
    7ff0:	01c0      	lsls	r0, r0, #7
    7ff2:	2680      	movs	r6, #128	; 0x80
    7ff4:	43b3      	bics	r3, r6
    7ff6:	4303      	orrs	r3, r0
    7ff8:	2007      	movs	r0, #7
    7ffa:	4005      	ands	r5, r0
    7ffc:	022d      	lsls	r5, r5, #8
    7ffe:	4808      	ldr	r0, [pc, #32]	; (8020 <system_clock_source_osc32k_set_config+0x74>)
    8000:	4003      	ands	r3, r0
    8002:	432b      	orrs	r3, r5
    8004:	4021      	ands	r1, r4
    8006:	0309      	lsls	r1, r1, #12
    8008:	4806      	ldr	r0, [pc, #24]	; (8024 <system_clock_source_osc32k_set_config+0x78>)
    800a:	4003      	ands	r3, r0
    800c:	430b      	orrs	r3, r1
    800e:	464a      	mov	r2, r9
    8010:	6193      	str	r3, [r2, #24]
}
    8012:	bc0c      	pop	{r2, r3}
    8014:	4690      	mov	r8, r2
    8016:	4699      	mov	r9, r3
    8018:	bdf0      	pop	{r4, r5, r6, r7, pc}
    801a:	46c0      	nop			; (mov r8, r8)
    801c:	40000800 	.word	0x40000800
    8020:	fffff8ff 	.word	0xfffff8ff
    8024:	ffffefff 	.word	0xffffefff

00008028 <system_clock_source_xosc32k_set_config>:
 *
 * \param[in] config  XOSC32K configuration structure containing the new config
 */
void system_clock_source_xosc32k_set_config(
		struct system_clock_source_xosc32k_config *const config)
{
    8028:	b5f0      	push	{r4, r5, r6, r7, lr}
    802a:	46de      	mov	lr, fp
    802c:	4657      	mov	r7, sl
    802e:	464e      	mov	r6, r9
    8030:	4645      	mov	r5, r8
    8032:	b5e0      	push	{r5, r6, r7, lr}
    8034:	0001      	movs	r1, r0
	SYSCTRL_XOSC32K_Type temp = SYSCTRL->XOSC32K;
    8036:	4b26      	ldr	r3, [pc, #152]	; (80d0 <system_clock_source_xosc32k_set_config+0xa8>)
    8038:	469b      	mov	fp, r3
    803a:	8a9b      	ldrh	r3, [r3, #20]

	temp.bit.STARTUP = config->startup_time;
    803c:	7845      	ldrb	r5, [r0, #1]

	if (config->external_clock == SYSTEM_CLOCK_EXTERNAL_CRYSTAL) {
    803e:	7800      	ldrb	r0, [r0, #0]
    8040:	4242      	negs	r2, r0
    8042:	4142      	adcs	r2, r0
    8044:	4691      	mov	r9, r2
		temp.bit.XTALEN = 1;
	} else {
		temp.bit.XTALEN = 0;
	}

	temp.bit.AAMPEN = config->auto_gain_control;
    8046:	7888      	ldrb	r0, [r1, #2]
	temp.bit.EN1K = config->enable_1khz_output;
    8048:	78ca      	ldrb	r2, [r1, #3]
    804a:	4694      	mov	ip, r2
	temp.bit.EN32K = config->enable_32khz_output;
    804c:	790a      	ldrb	r2, [r1, #4]
    804e:	4690      	mov	r8, r2

	temp.bit.ONDEMAND = config->on_demand;
    8050:	7b4e      	ldrb	r6, [r1, #13]
	temp.bit.RUNSTDBY = config->run_in_standby;
    8052:	7b0f      	ldrb	r7, [r1, #12]
	temp.bit.WRTLOCK  = config->write_once;
    8054:	7b8c      	ldrb	r4, [r1, #14]

	/* Cache the new frequency in case the user needs to check the current
	 * operating frequency later */
	_system_clock_inst.xosc32k.frequency = config->frequency;
    8056:	688a      	ldr	r2, [r1, #8]
    8058:	491e      	ldr	r1, [pc, #120]	; (80d4 <system_clock_source_xosc32k_set_config+0xac>)
    805a:	614a      	str	r2, [r1, #20]

	SYSCTRL->XOSC32K = temp;
    805c:	2101      	movs	r1, #1
    805e:	464a      	mov	r2, r9
    8060:	0092      	lsls	r2, r2, #2
    8062:	4691      	mov	r9, r2
    8064:	2204      	movs	r2, #4
    8066:	4393      	bics	r3, r2
    8068:	464a      	mov	r2, r9
    806a:	4313      	orrs	r3, r2
    806c:	4642      	mov	r2, r8
    806e:	400a      	ands	r2, r1
    8070:	00d2      	lsls	r2, r2, #3
    8072:	4690      	mov	r8, r2
    8074:	2208      	movs	r2, #8
    8076:	4393      	bics	r3, r2
    8078:	4642      	mov	r2, r8
    807a:	4313      	orrs	r3, r2
    807c:	4662      	mov	r2, ip
    807e:	400a      	ands	r2, r1
    8080:	0112      	lsls	r2, r2, #4
    8082:	4694      	mov	ip, r2
    8084:	2210      	movs	r2, #16
    8086:	4393      	bics	r3, r2
    8088:	4662      	mov	r2, ip
    808a:	4313      	orrs	r3, r2
    808c:	4008      	ands	r0, r1
    808e:	0140      	lsls	r0, r0, #5
    8090:	2220      	movs	r2, #32
    8092:	4393      	bics	r3, r2
    8094:	4303      	orrs	r3, r0
    8096:	400f      	ands	r7, r1
    8098:	01bf      	lsls	r7, r7, #6
    809a:	2040      	movs	r0, #64	; 0x40
    809c:	4383      	bics	r3, r0
    809e:	433b      	orrs	r3, r7
    80a0:	400e      	ands	r6, r1
    80a2:	01f6      	lsls	r6, r6, #7
    80a4:	3040      	adds	r0, #64	; 0x40
    80a6:	4383      	bics	r3, r0
    80a8:	4333      	orrs	r3, r6
    80aa:	3879      	subs	r0, #121	; 0x79
    80ac:	4005      	ands	r5, r0
    80ae:	022d      	lsls	r5, r5, #8
    80b0:	4809      	ldr	r0, [pc, #36]	; (80d8 <system_clock_source_xosc32k_set_config+0xb0>)
    80b2:	4003      	ands	r3, r0
    80b4:	432b      	orrs	r3, r5
    80b6:	4021      	ands	r1, r4
    80b8:	0309      	lsls	r1, r1, #12
    80ba:	4808      	ldr	r0, [pc, #32]	; (80dc <system_clock_source_xosc32k_set_config+0xb4>)
    80bc:	4003      	ands	r3, r0
    80be:	430b      	orrs	r3, r1
    80c0:	465a      	mov	r2, fp
    80c2:	8293      	strh	r3, [r2, #20]
}
    80c4:	bc3c      	pop	{r2, r3, r4, r5}
    80c6:	4690      	mov	r8, r2
    80c8:	4699      	mov	r9, r3
    80ca:	46a2      	mov	sl, r4
    80cc:	46ab      	mov	fp, r5
    80ce:	bdf0      	pop	{r4, r5, r6, r7, pc}
    80d0:	40000800 	.word	0x40000800
    80d4:	20000160 	.word	0x20000160
    80d8:	fffff8ff 	.word	0xfffff8ff
    80dc:	ffffefff 	.word	0xffffefff

000080e0 <system_clock_source_dfll_set_config>:
 *
 * \param[in] config  DFLL configuration structure containing the new config
 */
void system_clock_source_dfll_set_config(
		struct system_clock_source_dfll_config *const config)
{
    80e0:	b510      	push	{r4, lr}
	_system_clock_inst.dfll.val =
			SYSCTRL_DFLLVAL_COARSE(config->coarse_value) |
    80e2:	7a03      	ldrb	r3, [r0, #8]
    80e4:	069b      	lsls	r3, r3, #26
    80e6:	0c1b      	lsrs	r3, r3, #16
			SYSCTRL_DFLLVAL_FINE(config->fine_value);
    80e8:	8942      	ldrh	r2, [r0, #10]
    80ea:	0592      	lsls	r2, r2, #22
    80ec:	0d92      	lsrs	r2, r2, #22
			SYSCTRL_DFLLVAL_COARSE(config->coarse_value) |
    80ee:	4313      	orrs	r3, r2
	_system_clock_inst.dfll.val =
    80f0:	4918      	ldr	r1, [pc, #96]	; (8154 <system_clock_source_dfll_set_config+0x74>)
    80f2:	604b      	str	r3, [r1, #4]

	_system_clock_inst.dfll.control =
			(uint32_t)config->wakeup_lock     |
    80f4:	7983      	ldrb	r3, [r0, #6]
    80f6:	79c2      	ldrb	r2, [r0, #7]
    80f8:	4313      	orrs	r3, r2
			(uint32_t)config->stable_tracking |
			(uint32_t)config->quick_lock      |
    80fa:	8842      	ldrh	r2, [r0, #2]
    80fc:	8884      	ldrh	r4, [r0, #4]
    80fe:	4322      	orrs	r2, r4
    8100:	4313      	orrs	r3, r2
			(uint32_t)config->chill_cycle     |
			((uint32_t)config->on_demand << SYSCTRL_DFLLCTRL_ONDEMAND_Pos);
    8102:	7842      	ldrb	r2, [r0, #1]
    8104:	01d2      	lsls	r2, r2, #7
			(uint32_t)config->chill_cycle     |
    8106:	4313      	orrs	r3, r2
	_system_clock_inst.dfll.control =
    8108:	600b      	str	r3, [r1, #0]

	if (config->loop_mode == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {
    810a:	7803      	ldrb	r3, [r0, #0]
    810c:	2b04      	cmp	r3, #4
    810e:	d011      	beq.n	8134 <system_clock_source_dfll_set_config+0x54>
				SYSCTRL_DFLLMUL_MUL(config->multiply_factor);

		/* Enable the closed loop mode */
		_system_clock_inst.dfll.control |= config->loop_mode;
	}
	if (config->loop_mode == SYSTEM_CLOCK_DFLL_LOOP_MODE_USB_RECOVERY) {
    8110:	2b20      	cmp	r3, #32
    8112:	d10e      	bne.n	8132 <system_clock_source_dfll_set_config+0x52>

		_system_clock_inst.dfll.mul =
				SYSCTRL_DFLLMUL_CSTEP(config->coarse_max_step) |
    8114:	7b03      	ldrb	r3, [r0, #12]
    8116:	069b      	lsls	r3, r3, #26
				SYSCTRL_DFLLMUL_FSTEP(config->fine_max_step)   |
				SYSCTRL_DFLLMUL_MUL(config->multiply_factor);
    8118:	8a02      	ldrh	r2, [r0, #16]
				SYSCTRL_DFLLMUL_FSTEP(config->fine_max_step)   |
    811a:	4313      	orrs	r3, r2
    811c:	89c2      	ldrh	r2, [r0, #14]
    811e:	0412      	lsls	r2, r2, #16
    8120:	490d      	ldr	r1, [pc, #52]	; (8158 <system_clock_source_dfll_set_config+0x78>)
    8122:	400a      	ands	r2, r1
    8124:	4313      	orrs	r3, r2
		_system_clock_inst.dfll.mul =
    8126:	4a0b      	ldr	r2, [pc, #44]	; (8154 <system_clock_source_dfll_set_config+0x74>)
    8128:	6093      	str	r3, [r2, #8]

		/* Enable the USB recovery mode */
		_system_clock_inst.dfll.control |= config->loop_mode |
    812a:	6811      	ldr	r1, [r2, #0]
    812c:	4b0b      	ldr	r3, [pc, #44]	; (815c <system_clock_source_dfll_set_config+0x7c>)
    812e:	430b      	orrs	r3, r1
    8130:	6013      	str	r3, [r2, #0]
				SYSCTRL_DFLLCTRL_MODE | SYSCTRL_DFLLCTRL_BPLCKC;
	}
}
    8132:	bd10      	pop	{r4, pc}
				SYSCTRL_DFLLMUL_CSTEP(config->coarse_max_step) |
    8134:	7b03      	ldrb	r3, [r0, #12]
    8136:	069b      	lsls	r3, r3, #26
				SYSCTRL_DFLLMUL_MUL(config->multiply_factor);
    8138:	8a02      	ldrh	r2, [r0, #16]
				SYSCTRL_DFLLMUL_FSTEP(config->fine_max_step)   |
    813a:	4313      	orrs	r3, r2
    813c:	89c2      	ldrh	r2, [r0, #14]
    813e:	0412      	lsls	r2, r2, #16
    8140:	4905      	ldr	r1, [pc, #20]	; (8158 <system_clock_source_dfll_set_config+0x78>)
    8142:	400a      	ands	r2, r1
    8144:	4313      	orrs	r3, r2
		_system_clock_inst.dfll.mul =
    8146:	4a03      	ldr	r2, [pc, #12]	; (8154 <system_clock_source_dfll_set_config+0x74>)
    8148:	6093      	str	r3, [r2, #8]
		_system_clock_inst.dfll.control |= config->loop_mode;
    814a:	6813      	ldr	r3, [r2, #0]
    814c:	2104      	movs	r1, #4
    814e:	430b      	orrs	r3, r1
    8150:	6013      	str	r3, [r2, #0]
    8152:	e7ee      	b.n	8132 <system_clock_source_dfll_set_config+0x52>
    8154:	20000160 	.word	0x20000160
    8158:	03ff0000 	.word	0x03ff0000
    815c:	00000424 	.word	0x00000424

00008160 <system_clock_source_enable>:
 *                                 device
 */
enum status_code system_clock_source_enable(
		const enum system_clock_source clock_source)
{
	switch (clock_source) {
    8160:	2808      	cmp	r0, #8
    8162:	d803      	bhi.n	816c <system_clock_source_enable+0xc>
    8164:	0080      	lsls	r0, r0, #2
    8166:	4b25      	ldr	r3, [pc, #148]	; (81fc <system_clock_source_enable+0x9c>)
    8168:	581b      	ldr	r3, [r3, r0]
    816a:	469f      	mov	pc, r3
		/* Always enabled */
		return STATUS_OK;

	default:
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
    816c:	2017      	movs	r0, #23
    816e:	e044      	b.n	81fa <system_clock_source_enable+0x9a>
		SYSCTRL->OSC8M.reg |= SYSCTRL_OSC8M_ENABLE;
    8170:	4a23      	ldr	r2, [pc, #140]	; (8200 <system_clock_source_enable+0xa0>)
    8172:	6a13      	ldr	r3, [r2, #32]
    8174:	2102      	movs	r1, #2
    8176:	430b      	orrs	r3, r1
    8178:	6213      	str	r3, [r2, #32]
		return STATUS_OK;
    817a:	2000      	movs	r0, #0
    817c:	e03d      	b.n	81fa <system_clock_source_enable+0x9a>
		SYSCTRL->OSC32K.reg |= SYSCTRL_OSC32K_ENABLE;
    817e:	4a20      	ldr	r2, [pc, #128]	; (8200 <system_clock_source_enable+0xa0>)
    8180:	6993      	ldr	r3, [r2, #24]
    8182:	2102      	movs	r1, #2
    8184:	430b      	orrs	r3, r1
    8186:	6193      	str	r3, [r2, #24]
	}

	return STATUS_OK;
    8188:	2000      	movs	r0, #0
		break;
    818a:	e036      	b.n	81fa <system_clock_source_enable+0x9a>
		SYSCTRL->XOSC.reg |= SYSCTRL_XOSC_ENABLE;
    818c:	4a1c      	ldr	r2, [pc, #112]	; (8200 <system_clock_source_enable+0xa0>)
    818e:	8a13      	ldrh	r3, [r2, #16]
    8190:	2102      	movs	r1, #2
    8192:	430b      	orrs	r3, r1
    8194:	8213      	strh	r3, [r2, #16]
	return STATUS_OK;
    8196:	2000      	movs	r0, #0
		break;
    8198:	e02f      	b.n	81fa <system_clock_source_enable+0x9a>
		SYSCTRL->XOSC32K.reg |= SYSCTRL_XOSC32K_ENABLE;
    819a:	4a19      	ldr	r2, [pc, #100]	; (8200 <system_clock_source_enable+0xa0>)
    819c:	8a93      	ldrh	r3, [r2, #20]
    819e:	2102      	movs	r1, #2
    81a0:	430b      	orrs	r3, r1
    81a2:	8293      	strh	r3, [r2, #20]
	return STATUS_OK;
    81a4:	2000      	movs	r0, #0
		break;
    81a6:	e028      	b.n	81fa <system_clock_source_enable+0x9a>
		_system_clock_inst.dfll.control |= SYSCTRL_DFLLCTRL_ENABLE;
    81a8:	4916      	ldr	r1, [pc, #88]	; (8204 <system_clock_source_enable+0xa4>)
    81aa:	680b      	ldr	r3, [r1, #0]
    81ac:	2202      	movs	r2, #2
    81ae:	4313      	orrs	r3, r2
    81b0:	600b      	str	r3, [r1, #0]
	SYSCTRL->DFLLCTRL.reg = SYSCTRL_DFLLCTRL_ENABLE;
    81b2:	4b13      	ldr	r3, [pc, #76]	; (8200 <system_clock_source_enable+0xa0>)
    81b4:	849a      	strh	r2, [r3, #36]	; 0x24
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
    81b6:	0019      	movs	r1, r3
    81b8:	320e      	adds	r2, #14
    81ba:	68cb      	ldr	r3, [r1, #12]
    81bc:	421a      	tst	r2, r3
    81be:	d0fc      	beq.n	81ba <system_clock_source_enable+0x5a>
	SYSCTRL->DFLLMUL.reg = _system_clock_inst.dfll.mul;
    81c0:	4a10      	ldr	r2, [pc, #64]	; (8204 <system_clock_source_enable+0xa4>)
    81c2:	6891      	ldr	r1, [r2, #8]
    81c4:	4b0e      	ldr	r3, [pc, #56]	; (8200 <system_clock_source_enable+0xa0>)
    81c6:	62d9      	str	r1, [r3, #44]	; 0x2c
	SYSCTRL->DFLLVAL.reg = _system_clock_inst.dfll.val;
    81c8:	6852      	ldr	r2, [r2, #4]
    81ca:	629a      	str	r2, [r3, #40]	; 0x28
	SYSCTRL->DFLLCTRL.reg = 0;
    81cc:	2200      	movs	r2, #0
    81ce:	849a      	strh	r2, [r3, #36]	; 0x24
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
    81d0:	0019      	movs	r1, r3
    81d2:	3210      	adds	r2, #16
    81d4:	68cb      	ldr	r3, [r1, #12]
    81d6:	421a      	tst	r2, r3
    81d8:	d0fc      	beq.n	81d4 <system_clock_source_enable+0x74>
	SYSCTRL->DFLLCTRL.reg = _system_clock_inst.dfll.control;
    81da:	4b0a      	ldr	r3, [pc, #40]	; (8204 <system_clock_source_enable+0xa4>)
    81dc:	681b      	ldr	r3, [r3, #0]
    81de:	b29b      	uxth	r3, r3
    81e0:	4a07      	ldr	r2, [pc, #28]	; (8200 <system_clock_source_enable+0xa0>)
    81e2:	8493      	strh	r3, [r2, #36]	; 0x24
	return STATUS_OK;
    81e4:	2000      	movs	r0, #0
    81e6:	e008      	b.n	81fa <system_clock_source_enable+0x9a>
		SYSCTRL->DPLLCTRLA.reg |= SYSCTRL_DPLLCTRLA_ENABLE;
    81e8:	4905      	ldr	r1, [pc, #20]	; (8200 <system_clock_source_enable+0xa0>)
    81ea:	2244      	movs	r2, #68	; 0x44
    81ec:	5c8b      	ldrb	r3, [r1, r2]
    81ee:	2002      	movs	r0, #2
    81f0:	4303      	orrs	r3, r0
    81f2:	548b      	strb	r3, [r1, r2]
	return STATUS_OK;
    81f4:	2000      	movs	r0, #0
		break;
    81f6:	e000      	b.n	81fa <system_clock_source_enable+0x9a>
		return STATUS_OK;
    81f8:	2000      	movs	r0, #0
}
    81fa:	4770      	bx	lr
    81fc:	00016048 	.word	0x00016048
    8200:	40000800 	.word	0x40000800
    8204:	20000160 	.word	0x20000160

00008208 <system_clock_init>:
 * \note OSC8M is always enabled and if user selects other clocks for GCLK generators,
 * the OSC8M default enable can be disabled after system_clock_init. Make sure the
 * clock switch successfully before disabling OSC8M.
 */
void system_clock_init(void)
{
    8208:	b5f0      	push	{r4, r5, r6, r7, lr}
    820a:	46de      	mov	lr, fp
    820c:	4657      	mov	r7, sl
    820e:	464e      	mov	r6, r9
    8210:	4645      	mov	r5, r8
    8212:	b5e0      	push	{r5, r6, r7, lr}
    8214:	b091      	sub	sp, #68	; 0x44
	/* Various bits in the INTFLAG register can be set to one at startup.
	   This will ensure that these bits are cleared */
	SYSCTRL->INTFLAG.reg = SYSCTRL_INTFLAG_BOD33RDY | SYSCTRL_INTFLAG_BOD33DET |
    8216:	22c2      	movs	r2, #194	; 0xc2
    8218:	00d2      	lsls	r2, r2, #3
    821a:	4b65      	ldr	r3, [pc, #404]	; (83b0 <system_clock_init+0x1a8>)
    821c:	609a      	str	r2, [r3, #8]
static inline void system_flash_set_waitstates(uint8_t wait_states)
{
	Assert(NVMCTRL_CTRLB_RWS((uint32_t)wait_states) ==
			((uint32_t)wait_states << NVMCTRL_CTRLB_RWS_Pos));

	NVMCTRL->CTRLB.bit.RWS = wait_states;
    821e:	4a65      	ldr	r2, [pc, #404]	; (83b4 <system_clock_init+0x1ac>)
    8220:	6853      	ldr	r3, [r2, #4]
    8222:	211e      	movs	r1, #30
    8224:	438b      	bics	r3, r1
    8226:	391a      	subs	r1, #26
    8228:	430b      	orrs	r3, r1
    822a:	6053      	str	r3, [r2, #4]
	gclk_conf.source_generator = GCLK_GENERATOR_3;
    822c:	2203      	movs	r2, #3
    822e:	ab01      	add	r3, sp, #4
    8230:	701a      	strb	r2, [r3, #0]
	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
    8232:	2400      	movs	r4, #0
		system_gclk_chan_set_config(gclk_id, &gclk_conf);
    8234:	4d60      	ldr	r5, [pc, #384]	; (83b8 <system_clock_init+0x1b0>)
    8236:	b2e0      	uxtb	r0, r4
    8238:	a901      	add	r1, sp, #4
    823a:	47a8      	blx	r5
	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
    823c:	3401      	adds	r4, #1
    823e:	2c25      	cmp	r4, #37	; 0x25
    8240:	d1f9      	bne.n	8236 <system_clock_init+0x2e>
	config->external_clock      = SYSTEM_CLOCK_EXTERNAL_CRYSTAL;
    8242:	a80c      	add	r0, sp, #48	; 0x30
    8244:	2300      	movs	r3, #0
    8246:	7003      	strb	r3, [r0, #0]
	config->frequency           = 32768UL;
    8248:	2280      	movs	r2, #128	; 0x80
    824a:	0212      	lsls	r2, r2, #8
    824c:	6082      	str	r2, [r0, #8]
	config->enable_1khz_output  = false;
    824e:	70c3      	strb	r3, [r0, #3]
	config->enable_32khz_output = true;
    8250:	2201      	movs	r2, #1
    8252:	7102      	strb	r2, [r0, #4]
	config->run_in_standby      = false;
    8254:	7303      	strb	r3, [r0, #12]
	config->write_once          = false;
    8256:	7383      	strb	r3, [r0, #14]
	struct system_clock_source_xosc32k_config xosc32k_conf;
	system_clock_source_xosc32k_get_config_defaults(&xosc32k_conf);

	xosc32k_conf.frequency           = 32768UL;
	xosc32k_conf.external_clock      = CONF_CLOCK_XOSC32K_EXTERNAL_CRYSTAL;
	xosc32k_conf.startup_time        = CONF_CLOCK_XOSC32K_STARTUP_TIME;
    8258:	2106      	movs	r1, #6
    825a:	7041      	strb	r1, [r0, #1]
	xosc32k_conf.auto_gain_control   = CONF_CLOCK_XOSC32K_AUTO_AMPLITUDE_CONTROL;
    825c:	7082      	strb	r2, [r0, #2]
	xosc32k_conf.enable_1khz_output  = CONF_CLOCK_XOSC32K_ENABLE_1KHZ_OUPUT;
	xosc32k_conf.enable_32khz_output = CONF_CLOCK_XOSC32K_ENABLE_32KHZ_OUTPUT;
	xosc32k_conf.on_demand           = false;
    825e:	7343      	strb	r3, [r0, #13]
	xosc32k_conf.run_in_standby      = CONF_CLOCK_XOSC32K_RUN_IN_STANDBY;

	system_clock_source_xosc32k_set_config(&xosc32k_conf);
    8260:	4b56      	ldr	r3, [pc, #344]	; (83bc <system_clock_init+0x1b4>)
    8262:	4798      	blx	r3
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_XOSC32K);
    8264:	2005      	movs	r0, #5
    8266:	4b56      	ldr	r3, [pc, #344]	; (83c0 <system_clock_init+0x1b8>)
    8268:	4798      	blx	r3
	return ((SYSCTRL->PCLKSR.reg & mask) == mask);
    826a:	4951      	ldr	r1, [pc, #324]	; (83b0 <system_clock_init+0x1a8>)
    826c:	2202      	movs	r2, #2
    826e:	68cb      	ldr	r3, [r1, #12]
	while(!system_clock_source_is_ready(SYSTEM_CLOCK_SOURCE_XOSC32K));
    8270:	421a      	tst	r2, r3
    8272:	d0fc      	beq.n	826e <system_clock_init+0x66>
	if (CONF_CLOCK_XOSC32K_ON_DEMAND) {
		SYSCTRL->XOSC32K.bit.ONDEMAND = 1;
    8274:	494e      	ldr	r1, [pc, #312]	; (83b0 <system_clock_init+0x1a8>)
    8276:	8a8b      	ldrh	r3, [r1, #20]
    8278:	2280      	movs	r2, #128	; 0x80
    827a:	4313      	orrs	r3, r2
    827c:	828b      	strh	r3, [r1, #20]


	/* OSCK32K */
#if CONF_CLOCK_OSC32K_ENABLE == true
	SYSCTRL->OSC32K.bit.CALIB =
			((*(uint32_t *)SYSCTRL_FUSES_OSC32K_ADDR >>
    827e:	4c51      	ldr	r4, [pc, #324]	; (83c4 <system_clock_init+0x1bc>)
			SYSCTRL_FUSES_OSC32K_Pos) & 0x7Ful);
    8280:	6823      	ldr	r3, [r4, #0]
    8282:	04db      	lsls	r3, r3, #19
	SYSCTRL->OSC32K.bit.CALIB =
    8284:	698a      	ldr	r2, [r1, #24]
    8286:	0e5b      	lsrs	r3, r3, #25
    8288:	041b      	lsls	r3, r3, #16
    828a:	484f      	ldr	r0, [pc, #316]	; (83c8 <system_clock_init+0x1c0>)
    828c:	4002      	ands	r2, r0
    828e:	4313      	orrs	r3, r2
    8290:	618b      	str	r3, [r1, #24]
	config->enable_1khz_output  = true;
    8292:	a80a      	add	r0, sp, #40	; 0x28
    8294:	2301      	movs	r3, #1
    8296:	7043      	strb	r3, [r0, #1]
	config->enable_32khz_output = true;
    8298:	7083      	strb	r3, [r0, #2]
	config->on_demand           = true;
    829a:	7103      	strb	r3, [r0, #4]
	config->startup_time        = SYSTEM_OSC32K_STARTUP_130;
    829c:	2207      	movs	r2, #7
    829e:	7002      	strb	r2, [r0, #0]
	config->write_once          = false;
    82a0:	2500      	movs	r5, #0
    82a2:	7145      	strb	r5, [r0, #5]

	osc32k_conf.startup_time        = CONF_CLOCK_OSC32K_STARTUP_TIME;
	osc32k_conf.enable_1khz_output  = CONF_CLOCK_OSC32K_ENABLE_1KHZ_OUTPUT;
	osc32k_conf.enable_32khz_output = CONF_CLOCK_OSC32K_ENABLE_32KHZ_OUTPUT;
	osc32k_conf.on_demand           = CONF_CLOCK_OSC32K_ON_DEMAND;
	osc32k_conf.run_in_standby      = CONF_CLOCK_OSC32K_RUN_IN_STANDBY;
    82a4:	70c3      	strb	r3, [r0, #3]

	system_clock_source_osc32k_set_config(&osc32k_conf);
    82a6:	4b49      	ldr	r3, [pc, #292]	; (83cc <system_clock_init+0x1c4>)
    82a8:	4798      	blx	r3
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_OSC32K);
    82aa:	2004      	movs	r0, #4
    82ac:	4b44      	ldr	r3, [pc, #272]	; (83c0 <system_clock_init+0x1b8>)
    82ae:	4798      	blx	r3
	config->quick_lock      = SYSTEM_CLOCK_DFLL_QUICK_LOCK_ENABLE;
    82b0:	ab05      	add	r3, sp, #20
    82b2:	2200      	movs	r2, #0
    82b4:	805d      	strh	r5, [r3, #2]
	config->chill_cycle     = SYSTEM_CLOCK_DFLL_CHILL_CYCLE_ENABLE;
    82b6:	809d      	strh	r5, [r3, #4]
	config->wakeup_lock     = SYSTEM_CLOCK_DFLL_WAKEUP_LOCK_KEEP;
    82b8:	719a      	strb	r2, [r3, #6]
	config->stable_tracking = SYSTEM_CLOCK_DFLL_STABLE_TRACKING_TRACK_AFTER_LOCK;
    82ba:	71da      	strb	r2, [r3, #7]
	config->fine_value      = 0xff / 4; /* Midpoint */
    82bc:	213f      	movs	r1, #63	; 0x3f
    82be:	8159      	strh	r1, [r3, #10]
	/* DFLL Config (Open and Closed Loop) */
#if CONF_CLOCK_DFLL_ENABLE == true
	struct system_clock_source_dfll_config dfll_conf;
	system_clock_source_dfll_get_config_defaults(&dfll_conf);

	dfll_conf.loop_mode      = CONF_CLOCK_DFLL_LOOP_MODE;
    82c0:	393b      	subs	r1, #59	; 0x3b
    82c2:	7019      	strb	r1, [r3, #0]
	dfll_conf.on_demand      = false;
    82c4:	705a      	strb	r2, [r3, #1]
	/* Using DFLL48M COARSE CAL value from NVM Software Calibration Area Mapping
	   in DFLL.COARSE helps to output a frequency close to 48 MHz.*/
#define NVM_DFLL_COARSE_POS    58 /* DFLL48M Coarse calibration value bit position.*/
#define NVM_DFLL_COARSE_SIZE   6  /* DFLL48M Coarse calibration value bit size.*/

	uint32_t coarse =( *((uint32_t *)(NVMCTRL_OTP4)
    82c6:	6823      	ldr	r3, [r4, #0]
    82c8:	0e9b      	lsrs	r3, r3, #26
			+ (NVM_DFLL_COARSE_POS / 32))
		>> (NVM_DFLL_COARSE_POS % 32))
		& ((1 << NVM_DFLL_COARSE_SIZE) - 1);
	/* In some revision chip, the coarse calibration value is not correct. */
	if (coarse == 0x3f) {
    82ca:	2b3f      	cmp	r3, #63	; 0x3f
    82cc:	d06d      	beq.n	83aa <system_clock_init+0x1a2>
		coarse = 0x1f;
	}
	dfll_conf.coarse_value = coarse;
    82ce:	a805      	add	r0, sp, #20
    82d0:	7203      	strb	r3, [r0, #8]
#  else
	dfll_conf.chill_cycle = SYSTEM_CLOCK_DFLL_CHILL_CYCLE_DISABLE;
#  endif

	if (CONF_CLOCK_DFLL_LOOP_MODE == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {
		dfll_conf.multiply_factor = CONF_CLOCK_DFLL_MULTIPLY_FACTOR;
    82d2:	4b3f      	ldr	r3, [pc, #252]	; (83d0 <system_clock_init+0x1c8>)
    82d4:	8203      	strh	r3, [r0, #16]
	}

	dfll_conf.coarse_max_step = CONF_CLOCK_DFLL_MAX_COARSE_STEP_SIZE;
    82d6:	2303      	movs	r3, #3
    82d8:	4699      	mov	r9, r3
    82da:	7303      	strb	r3, [r0, #12]
	dfll_conf.fine_max_step   = CONF_CLOCK_DFLL_MAX_FINE_STEP_SIZE;
    82dc:	231f      	movs	r3, #31
    82de:	81c3      	strh	r3, [r0, #14]
		dfll_conf.chill_cycle = SYSTEM_CLOCK_DFLL_CHILL_CYCLE_DISABLE;

		dfll_conf.multiply_factor = 48000;
	}

	system_clock_source_dfll_set_config(&dfll_conf);
    82e0:	4b3c      	ldr	r3, [pc, #240]	; (83d4 <system_clock_init+0x1cc>)
    82e2:	4798      	blx	r3
	config->run_in_standby  = false;
    82e4:	a804      	add	r0, sp, #16
    82e6:	2500      	movs	r5, #0
    82e8:	7045      	strb	r5, [r0, #1]

	/* OSC8M */
	struct system_clock_source_osc8m_config osc8m_conf;
	system_clock_source_osc8m_get_config_defaults(&osc8m_conf);

	osc8m_conf.prescaler       = CONF_CLOCK_OSC8M_PRESCALER;
    82ea:	7005      	strb	r5, [r0, #0]
	osc8m_conf.on_demand       = CONF_CLOCK_OSC8M_ON_DEMAND;
    82ec:	7085      	strb	r5, [r0, #2]
	osc8m_conf.run_in_standby  = CONF_CLOCK_OSC8M_RUN_IN_STANDBY;

	system_clock_source_osc8m_set_config(&osc8m_conf);
    82ee:	4b3a      	ldr	r3, [pc, #232]	; (83d8 <system_clock_init+0x1d0>)
    82f0:	4798      	blx	r3
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_OSC8M);
    82f2:	2006      	movs	r0, #6
    82f4:	4b32      	ldr	r3, [pc, #200]	; (83c0 <system_clock_init+0x1b8>)
    82f6:	469a      	mov	sl, r3
    82f8:	4798      	blx	r3


	/* GCLK */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	system_gclk_init();
    82fa:	4b38      	ldr	r3, [pc, #224]	; (83dc <system_clock_init+0x1d4>)
    82fc:	4798      	blx	r3
	config->high_when_disabled = false;
    82fe:	ac01      	add	r4, sp, #4
    8300:	7065      	strb	r5, [r4, #1]
	config->run_in_standby     = false;
    8302:	7225      	strb	r5, [r4, #8]
	config->output_enable      = false;
    8304:	7265      	strb	r5, [r4, #9]

	/* Configure all GCLK generators except for the main generator, which
	 * is configured later after all other clock systems are set up */
	MREPEAT(GCLK_GEN_NUM, _CONF_CLOCK_GCLK_CONFIG_NONMAIN, ~);
    8306:	2305      	movs	r3, #5
    8308:	7023      	strb	r3, [r4, #0]
    830a:	331b      	adds	r3, #27
    830c:	4698      	mov	r8, r3
    830e:	6063      	str	r3, [r4, #4]
    8310:	0021      	movs	r1, r4
    8312:	2001      	movs	r0, #1
    8314:	4f32      	ldr	r7, [pc, #200]	; (83e0 <system_clock_init+0x1d8>)
    8316:	47b8      	blx	r7
    8318:	2001      	movs	r0, #1
    831a:	4e32      	ldr	r6, [pc, #200]	; (83e4 <system_clock_init+0x1dc>)
    831c:	47b0      	blx	r6
	config->high_when_disabled = false;
    831e:	7065      	strb	r5, [r4, #1]
	config->output_enable      = false;
    8320:	7265      	strb	r5, [r4, #9]
    8322:	2304      	movs	r3, #4
    8324:	7023      	strb	r3, [r4, #0]
    8326:	4643      	mov	r3, r8
    8328:	6063      	str	r3, [r4, #4]
    832a:	3b1f      	subs	r3, #31
    832c:	469b      	mov	fp, r3
    832e:	7223      	strb	r3, [r4, #8]
    8330:	0021      	movs	r1, r4
    8332:	2002      	movs	r0, #2
    8334:	47b8      	blx	r7
    8336:	2002      	movs	r0, #2
    8338:	47b0      	blx	r6
	config->high_when_disabled = false;
    833a:	7065      	strb	r5, [r4, #1]
	config->run_in_standby     = false;
    833c:	7225      	strb	r5, [r4, #8]
	config->output_enable      = false;
    833e:	7265      	strb	r5, [r4, #9]
    8340:	464b      	mov	r3, r9
    8342:	7023      	strb	r3, [r4, #0]
    8344:	4643      	mov	r3, r8
    8346:	6063      	str	r3, [r4, #4]
    8348:	0021      	movs	r1, r4
    834a:	2004      	movs	r0, #4
    834c:	47b8      	blx	r7
    834e:	2004      	movs	r0, #4
    8350:	47b0      	blx	r6
	/* Enable DFLL reference clock if in closed loop mode */
	if (CONF_CLOCK_DFLL_LOOP_MODE == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {
		struct system_gclk_chan_config dfll_gclk_chan_conf;

		system_gclk_chan_get_config_defaults(&dfll_gclk_chan_conf);
		dfll_gclk_chan_conf.source_generator = CONF_CLOCK_DFLL_SOURCE_GCLK_GENERATOR;
    8352:	465b      	mov	r3, fp
    8354:	7023      	strb	r3, [r4, #0]
		system_gclk_chan_set_config(SYSCTRL_GCLK_ID_DFLL48, &dfll_gclk_chan_conf);
    8356:	0021      	movs	r1, r4
    8358:	2000      	movs	r0, #0
    835a:	4b17      	ldr	r3, [pc, #92]	; (83b8 <system_clock_init+0x1b0>)
    835c:	4798      	blx	r3
		system_gclk_chan_enable(SYSCTRL_GCLK_ID_DFLL48);
    835e:	2000      	movs	r0, #0
    8360:	4b21      	ldr	r3, [pc, #132]	; (83e8 <system_clock_init+0x1e0>)
    8362:	4798      	blx	r3
#endif


	/* DFLL Enable (Open and Closed Loop) */
#if CONF_CLOCK_DFLL_ENABLE == true
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_DFLL);
    8364:	2007      	movs	r0, #7
    8366:	47d0      	blx	sl
	return ((SYSCTRL->PCLKSR.reg & mask) == mask);
    8368:	4911      	ldr	r1, [pc, #68]	; (83b0 <system_clock_init+0x1a8>)
    836a:	22d0      	movs	r2, #208	; 0xd0
    836c:	68cb      	ldr	r3, [r1, #12]
    836e:	4013      	ands	r3, r2
	while(!system_clock_source_is_ready(SYSTEM_CLOCK_SOURCE_DFLL));
    8370:	2bd0      	cmp	r3, #208	; 0xd0
    8372:	d1fb      	bne.n	836c <system_clock_init+0x164>
	PM->CPUSEL.reg = (uint32_t)divider;
    8374:	4a1d      	ldr	r2, [pc, #116]	; (83ec <system_clock_init+0x1e4>)
    8376:	2300      	movs	r3, #0
    8378:	7213      	strb	r3, [r2, #8]
			PM->APBASEL.reg = (uint32_t)divider;
    837a:	7253      	strb	r3, [r2, #9]
			PM->APBBSEL.reg = (uint32_t)divider;
    837c:	7293      	strb	r3, [r2, #10]
			PM->APBCSEL.reg = (uint32_t)divider;
    837e:	72d3      	strb	r3, [r2, #11]
	config->division_factor    = 1;
    8380:	a901      	add	r1, sp, #4
    8382:	2201      	movs	r2, #1
    8384:	604a      	str	r2, [r1, #4]
	config->high_when_disabled = false;
    8386:	704b      	strb	r3, [r1, #1]
	config->run_in_standby     = false;
    8388:	720b      	strb	r3, [r1, #8]
	config->output_enable      = false;
    838a:	724b      	strb	r3, [r1, #9]
	system_apb_clock_set_divider(SYSTEM_CLOCK_APB_APBC, CONF_CLOCK_APBC_DIVIDER);

	/* GCLK 0 */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	/* Configure the main GCLK last as it might depend on other generators */
	_CONF_CLOCK_GCLK_CONFIG(0, ~);
    838c:	3307      	adds	r3, #7
    838e:	700b      	strb	r3, [r1, #0]
    8390:	2000      	movs	r0, #0
    8392:	4b13      	ldr	r3, [pc, #76]	; (83e0 <system_clock_init+0x1d8>)
    8394:	4798      	blx	r3
    8396:	2000      	movs	r0, #0
    8398:	4b12      	ldr	r3, [pc, #72]	; (83e4 <system_clock_init+0x1dc>)
    839a:	4798      	blx	r3
#endif
}
    839c:	b011      	add	sp, #68	; 0x44
    839e:	bc3c      	pop	{r2, r3, r4, r5}
    83a0:	4690      	mov	r8, r2
    83a2:	4699      	mov	r9, r3
    83a4:	46a2      	mov	sl, r4
    83a6:	46ab      	mov	fp, r5
    83a8:	bdf0      	pop	{r4, r5, r6, r7, pc}
		coarse = 0x1f;
    83aa:	3b20      	subs	r3, #32
    83ac:	e78f      	b.n	82ce <system_clock_init+0xc6>
    83ae:	46c0      	nop			; (mov r8, r8)
    83b0:	40000800 	.word	0x40000800
    83b4:	41004000 	.word	0x41004000
    83b8:	00008629 	.word	0x00008629
    83bc:	00008029 	.word	0x00008029
    83c0:	00008161 	.word	0x00008161
    83c4:	00806024 	.word	0x00806024
    83c8:	ff80ffff 	.word	0xff80ffff
    83cc:	00007fad 	.word	0x00007fad
    83d0:	ffffb71b 	.word	0xffffb71b
    83d4:	000080e1 	.word	0x000080e1
    83d8:	00007f71 	.word	0x00007f71
    83dc:	000083f1 	.word	0x000083f1
    83e0:	00008415 	.word	0x00008415
    83e4:	000084cd 	.word	0x000084cd
    83e8:	0000859d 	.word	0x0000859d
    83ec:	40000400 	.word	0x40000400

000083f0 <system_gclk_init>:
			PM->APBAMASK.reg |= mask;
    83f0:	4a06      	ldr	r2, [pc, #24]	; (840c <system_gclk_init+0x1c>)
    83f2:	6993      	ldr	r3, [r2, #24]
    83f4:	2108      	movs	r1, #8
    83f6:	430b      	orrs	r3, r1
    83f8:	6193      	str	r3, [r2, #24]
{
	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBA, PM_APBAMASK_GCLK);

	/* Software reset the module to ensure it is re-initialized correctly */
	GCLK->CTRL.reg = GCLK_CTRL_SWRST;
    83fa:	2201      	movs	r2, #1
    83fc:	4b04      	ldr	r3, [pc, #16]	; (8410 <system_gclk_init+0x20>)
    83fe:	701a      	strb	r2, [r3, #0]
	while (GCLK->CTRL.reg & GCLK_CTRL_SWRST) {
    8400:	0019      	movs	r1, r3
    8402:	780b      	ldrb	r3, [r1, #0]
    8404:	4213      	tst	r3, r2
    8406:	d1fc      	bne.n	8402 <system_gclk_init+0x12>
		/* Wait for reset to complete */
	}
}
    8408:	4770      	bx	lr
    840a:	46c0      	nop			; (mov r8, r8)
    840c:	40000400 	.word	0x40000400
    8410:	40000c00 	.word	0x40000c00

00008414 <system_gclk_gen_set_config>:
 * \param[in] config     Configuration settings for the generator
 */
void system_gclk_gen_set_config(
		const uint8_t generator,
		struct system_gclk_gen_config *const config)
{
    8414:	b570      	push	{r4, r5, r6, lr}
    8416:	0006      	movs	r6, r0
	/* Sanity check arguments */
	Assert(config);

	/* Cache new register configurations to minimize sync requirements. */
	uint32_t new_genctrl_config = (generator << GCLK_GENCTRL_ID_Pos);
    8418:	0004      	movs	r4, r0
	uint32_t new_gendiv_config  = (generator << GCLK_GENDIV_ID_Pos);

	/* Select the requested source clock for the generator */
	new_genctrl_config |= config->source_clock << GCLK_GENCTRL_SRC_Pos;
    841a:	780d      	ldrb	r5, [r1, #0]
    841c:	022d      	lsls	r5, r5, #8
    841e:	4305      	orrs	r5, r0

	/* Configure the clock to be either high or low when disabled */
	if (config->high_when_disabled) {
    8420:	784b      	ldrb	r3, [r1, #1]
    8422:	2b00      	cmp	r3, #0
    8424:	d002      	beq.n	842c <system_gclk_gen_set_config+0x18>
		new_genctrl_config |= GCLK_GENCTRL_OOV;
    8426:	2380      	movs	r3, #128	; 0x80
    8428:	02db      	lsls	r3, r3, #11
    842a:	431d      	orrs	r5, r3
	}

	/* Configure if the clock output to I/O pin should be enabled. */
	if (config->output_enable) {
    842c:	7a4b      	ldrb	r3, [r1, #9]
    842e:	2b00      	cmp	r3, #0
    8430:	d002      	beq.n	8438 <system_gclk_gen_set_config+0x24>
		new_genctrl_config |= GCLK_GENCTRL_OE;
    8432:	2380      	movs	r3, #128	; 0x80
    8434:	031b      	lsls	r3, r3, #12
    8436:	431d      	orrs	r5, r3
	}

	/* Set division factor */
	if (config->division_factor > 1) {
    8438:	6848      	ldr	r0, [r1, #4]
    843a:	2801      	cmp	r0, #1
    843c:	d910      	bls.n	8460 <system_gclk_gen_set_config+0x4c>
		/* Check if division is a power of two */
		if (((config->division_factor & (config->division_factor - 1)) == 0)) {
    843e:	1e43      	subs	r3, r0, #1
    8440:	4218      	tst	r0, r3
    8442:	d134      	bne.n	84ae <system_gclk_gen_set_config+0x9a>
			 * register */

			uint32_t div2_count = 0;

			uint32_t mask;
			for (mask = (1UL << 1); mask < config->division_factor;
    8444:	2802      	cmp	r0, #2
    8446:	d930      	bls.n	84aa <system_gclk_gen_set_config+0x96>
    8448:	2302      	movs	r3, #2
    844a:	2200      	movs	r2, #0
						mask <<= 1) {
				div2_count++;
    844c:	3201      	adds	r2, #1
						mask <<= 1) {
    844e:	005b      	lsls	r3, r3, #1
			for (mask = (1UL << 1); mask < config->division_factor;
    8450:	4298      	cmp	r0, r3
    8452:	d8fb      	bhi.n	844c <system_gclk_gen_set_config+0x38>
			}

			/* Set binary divider power of 2 division factor */
			new_gendiv_config  |= div2_count << GCLK_GENDIV_DIV_Pos;
    8454:	0212      	lsls	r2, r2, #8
    8456:	4332      	orrs	r2, r6
    8458:	0014      	movs	r4, r2
			new_genctrl_config |= GCLK_GENCTRL_DIVSEL;
    845a:	2380      	movs	r3, #128	; 0x80
    845c:	035b      	lsls	r3, r3, #13
    845e:	431d      	orrs	r5, r3
		}

	}

	/* Enable or disable the clock in standby mode */
	if (config->run_in_standby) {
    8460:	7a0b      	ldrb	r3, [r1, #8]
    8462:	2b00      	cmp	r3, #0
    8464:	d002      	beq.n	846c <system_gclk_gen_set_config+0x58>
		new_genctrl_config |= GCLK_GENCTRL_RUNSTDBY;
    8466:	2380      	movs	r3, #128	; 0x80
    8468:	039b      	lsls	r3, r3, #14
    846a:	431d      	orrs	r5, r3
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    846c:	4a13      	ldr	r2, [pc, #76]	; (84bc <system_gclk_gen_set_config+0xa8>)
    846e:	7853      	ldrb	r3, [r2, #1]
	}

	while (system_gclk_is_syncing()) {
    8470:	b25b      	sxtb	r3, r3
    8472:	2b00      	cmp	r3, #0
    8474:	dbfb      	blt.n	846e <system_gclk_gen_set_config+0x5a>
	cpu_irq_enter_critical();
    8476:	4b12      	ldr	r3, [pc, #72]	; (84c0 <system_gclk_gen_set_config+0xac>)
    8478:	4798      	blx	r3
	};

	system_interrupt_enter_critical_section();

	/* Select the correct generator */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
    847a:	4b12      	ldr	r3, [pc, #72]	; (84c4 <system_gclk_gen_set_config+0xb0>)
    847c:	701e      	strb	r6, [r3, #0]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    847e:	4a0f      	ldr	r2, [pc, #60]	; (84bc <system_gclk_gen_set_config+0xa8>)
    8480:	7853      	ldrb	r3, [r2, #1]

	/* Write the new generator configuration */
	while (system_gclk_is_syncing()) {
    8482:	b25b      	sxtb	r3, r3
    8484:	2b00      	cmp	r3, #0
    8486:	dbfb      	blt.n	8480 <system_gclk_gen_set_config+0x6c>
		/* Wait for synchronization */
	};
	GCLK->GENDIV.reg  = new_gendiv_config;
    8488:	4b0c      	ldr	r3, [pc, #48]	; (84bc <system_gclk_gen_set_config+0xa8>)
    848a:	609c      	str	r4, [r3, #8]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    848c:	001a      	movs	r2, r3
    848e:	7853      	ldrb	r3, [r2, #1]

	while (system_gclk_is_syncing()) {
    8490:	b25b      	sxtb	r3, r3
    8492:	2b00      	cmp	r3, #0
    8494:	dbfb      	blt.n	848e <system_gclk_gen_set_config+0x7a>
		/* Wait for synchronization */
	};
	GCLK->GENCTRL.reg = new_genctrl_config | (GCLK->GENCTRL.reg & GCLK_GENCTRL_GENEN);
    8496:	4a09      	ldr	r2, [pc, #36]	; (84bc <system_gclk_gen_set_config+0xa8>)
    8498:	6853      	ldr	r3, [r2, #4]
    849a:	2180      	movs	r1, #128	; 0x80
    849c:	0249      	lsls	r1, r1, #9
    849e:	400b      	ands	r3, r1
    84a0:	431d      	orrs	r5, r3
    84a2:	6055      	str	r5, [r2, #4]
	cpu_irq_leave_critical();
    84a4:	4b08      	ldr	r3, [pc, #32]	; (84c8 <system_gclk_gen_set_config+0xb4>)
    84a6:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    84a8:	bd70      	pop	{r4, r5, r6, pc}
			for (mask = (1UL << 1); mask < config->division_factor;
    84aa:	2200      	movs	r2, #0
    84ac:	e7d2      	b.n	8454 <system_gclk_gen_set_config+0x40>
					(config->division_factor) << GCLK_GENDIV_DIV_Pos;
    84ae:	0204      	lsls	r4, r0, #8
			new_gendiv_config  |=
    84b0:	4334      	orrs	r4, r6
			new_genctrl_config |= GCLK_GENCTRL_IDC;
    84b2:	2380      	movs	r3, #128	; 0x80
    84b4:	029b      	lsls	r3, r3, #10
    84b6:	431d      	orrs	r5, r3
    84b8:	e7d2      	b.n	8460 <system_gclk_gen_set_config+0x4c>
    84ba:	46c0      	nop			; (mov r8, r8)
    84bc:	40000c00 	.word	0x40000c00
    84c0:	0000654d 	.word	0x0000654d
    84c4:	40000c08 	.word	0x40000c08
    84c8:	0000658d 	.word	0x0000658d

000084cc <system_gclk_gen_enable>:
 *
 * \param[in] generator  Generic Clock Generator index to enable
 */
void system_gclk_gen_enable(
		const uint8_t generator)
{
    84cc:	b510      	push	{r4, lr}
    84ce:	0004      	movs	r4, r0
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    84d0:	4a0b      	ldr	r2, [pc, #44]	; (8500 <system_gclk_gen_enable+0x34>)
    84d2:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
    84d4:	b25b      	sxtb	r3, r3
    84d6:	2b00      	cmp	r3, #0
    84d8:	dbfb      	blt.n	84d2 <system_gclk_gen_enable+0x6>
	cpu_irq_enter_critical();
    84da:	4b0a      	ldr	r3, [pc, #40]	; (8504 <system_gclk_gen_enable+0x38>)
    84dc:	4798      	blx	r3
	};

	system_interrupt_enter_critical_section();

	/* Select the requested generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    84de:	4b0a      	ldr	r3, [pc, #40]	; (8508 <system_gclk_gen_enable+0x3c>)
    84e0:	701c      	strb	r4, [r3, #0]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    84e2:	4a07      	ldr	r2, [pc, #28]	; (8500 <system_gclk_gen_enable+0x34>)
    84e4:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
    84e6:	b25b      	sxtb	r3, r3
    84e8:	2b00      	cmp	r3, #0
    84ea:	dbfb      	blt.n	84e4 <system_gclk_gen_enable+0x18>
		/* Wait for synchronization */
	};

	/* Enable generator */
	GCLK->GENCTRL.reg |= GCLK_GENCTRL_GENEN;
    84ec:	4a04      	ldr	r2, [pc, #16]	; (8500 <system_gclk_gen_enable+0x34>)
    84ee:	6851      	ldr	r1, [r2, #4]
    84f0:	2380      	movs	r3, #128	; 0x80
    84f2:	025b      	lsls	r3, r3, #9
    84f4:	430b      	orrs	r3, r1
    84f6:	6053      	str	r3, [r2, #4]
	cpu_irq_leave_critical();
    84f8:	4b04      	ldr	r3, [pc, #16]	; (850c <system_gclk_gen_enable+0x40>)
    84fa:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    84fc:	bd10      	pop	{r4, pc}
    84fe:	46c0      	nop			; (mov r8, r8)
    8500:	40000c00 	.word	0x40000c00
    8504:	0000654d 	.word	0x0000654d
    8508:	40000c04 	.word	0x40000c04
    850c:	0000658d 	.word	0x0000658d

00008510 <system_gclk_gen_get_hz>:
 *
 * \return The frequency of the generic clock generator, in Hz.
 */
uint32_t system_gclk_gen_get_hz(
		const uint8_t generator)
{
    8510:	b570      	push	{r4, r5, r6, lr}
    8512:	0004      	movs	r4, r0
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    8514:	4a1a      	ldr	r2, [pc, #104]	; (8580 <system_gclk_gen_get_hz+0x70>)
    8516:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
    8518:	b25b      	sxtb	r3, r3
    851a:	2b00      	cmp	r3, #0
    851c:	dbfb      	blt.n	8516 <system_gclk_gen_get_hz+0x6>
	cpu_irq_enter_critical();
    851e:	4b19      	ldr	r3, [pc, #100]	; (8584 <system_gclk_gen_get_hz+0x74>)
    8520:	4798      	blx	r3
	};

	system_interrupt_enter_critical_section();

	/* Select the appropriate generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    8522:	4b19      	ldr	r3, [pc, #100]	; (8588 <system_gclk_gen_get_hz+0x78>)
    8524:	701c      	strb	r4, [r3, #0]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    8526:	4a16      	ldr	r2, [pc, #88]	; (8580 <system_gclk_gen_get_hz+0x70>)
    8528:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
    852a:	b25b      	sxtb	r3, r3
    852c:	2b00      	cmp	r3, #0
    852e:	dbfb      	blt.n	8528 <system_gclk_gen_get_hz+0x18>
		/* Wait for synchronization */
	};

	/* Get the frequency of the source connected to the GCLK generator */
	uint32_t gen_input_hz = system_clock_source_get_hz(
			(enum system_clock_source)GCLK->GENCTRL.bit.SRC);
    8530:	4e13      	ldr	r6, [pc, #76]	; (8580 <system_gclk_gen_get_hz+0x70>)
    8532:	6870      	ldr	r0, [r6, #4]
    8534:	04c0      	lsls	r0, r0, #19
    8536:	0ec0      	lsrs	r0, r0, #27
	uint32_t gen_input_hz = system_clock_source_get_hz(
    8538:	4b14      	ldr	r3, [pc, #80]	; (858c <system_gclk_gen_get_hz+0x7c>)
    853a:	4798      	blx	r3
    853c:	0005      	movs	r5, r0

	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    853e:	4b12      	ldr	r3, [pc, #72]	; (8588 <system_gclk_gen_get_hz+0x78>)
    8540:	701c      	strb	r4, [r3, #0]

	uint8_t divsel = GCLK->GENCTRL.bit.DIVSEL;
    8542:	6876      	ldr	r6, [r6, #4]
    8544:	02f6      	lsls	r6, r6, #11
    8546:	0ff6      	lsrs	r6, r6, #31

	/* Select the appropriate generator division register */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
    8548:	4b11      	ldr	r3, [pc, #68]	; (8590 <system_gclk_gen_get_hz+0x80>)
    854a:	701c      	strb	r4, [r3, #0]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    854c:	4a0c      	ldr	r2, [pc, #48]	; (8580 <system_gclk_gen_get_hz+0x70>)
    854e:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
    8550:	b25b      	sxtb	r3, r3
    8552:	2b00      	cmp	r3, #0
    8554:	dbfb      	blt.n	854e <system_gclk_gen_get_hz+0x3e>
		/* Wait for synchronization */
	};

	uint32_t divider = GCLK->GENDIV.bit.DIV;
    8556:	4b0a      	ldr	r3, [pc, #40]	; (8580 <system_gclk_gen_get_hz+0x70>)
    8558:	689c      	ldr	r4, [r3, #8]
    855a:	0224      	lsls	r4, r4, #8
    855c:	0c24      	lsrs	r4, r4, #16
	cpu_irq_leave_critical();
    855e:	4b0d      	ldr	r3, [pc, #52]	; (8594 <system_gclk_gen_get_hz+0x84>)
    8560:	4798      	blx	r3

	system_interrupt_leave_critical_section();

	/* Check if the generator is using fractional or binary division */
	if (!divsel && divider > 1) {
    8562:	2e00      	cmp	r6, #0
    8564:	d107      	bne.n	8576 <system_gclk_gen_get_hz+0x66>
    8566:	2c01      	cmp	r4, #1
    8568:	d907      	bls.n	857a <system_gclk_gen_get_hz+0x6a>
		gen_input_hz /= divider;
    856a:	0021      	movs	r1, r4
    856c:	0028      	movs	r0, r5
    856e:	4b0a      	ldr	r3, [pc, #40]	; (8598 <system_gclk_gen_get_hz+0x88>)
    8570:	4798      	blx	r3
    8572:	0005      	movs	r5, r0
    8574:	e001      	b.n	857a <system_gclk_gen_get_hz+0x6a>
	} else if (divsel) {
		gen_input_hz >>= (divider+1);
    8576:	3401      	adds	r4, #1
    8578:	40e5      	lsrs	r5, r4
	}

	return gen_input_hz;
}
    857a:	0028      	movs	r0, r5
    857c:	bd70      	pop	{r4, r5, r6, pc}
    857e:	46c0      	nop			; (mov r8, r8)
    8580:	40000c00 	.word	0x40000c00
    8584:	0000654d 	.word	0x0000654d
    8588:	40000c04 	.word	0x40000c04
    858c:	00007edd 	.word	0x00007edd
    8590:	40000c08 	.word	0x40000c08
    8594:	0000658d 	.word	0x0000658d
    8598:	000124c1 	.word	0x000124c1

0000859c <system_gclk_chan_enable>:
 *
 * \param[in] channel   Generic Clock channel to enable
 */
void system_gclk_chan_enable(
		const uint8_t channel)
{
    859c:	b510      	push	{r4, lr}
    859e:	0004      	movs	r4, r0
	cpu_irq_enter_critical();
    85a0:	4b06      	ldr	r3, [pc, #24]	; (85bc <system_gclk_chan_enable+0x20>)
    85a2:	4798      	blx	r3
	system_interrupt_enter_critical_section();

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    85a4:	4b06      	ldr	r3, [pc, #24]	; (85c0 <system_gclk_chan_enable+0x24>)
    85a6:	701c      	strb	r4, [r3, #0]

	/* Enable the generic clock */
	GCLK->CLKCTRL.reg |= GCLK_CLKCTRL_CLKEN;
    85a8:	4a06      	ldr	r2, [pc, #24]	; (85c4 <system_gclk_chan_enable+0x28>)
    85aa:	8853      	ldrh	r3, [r2, #2]
    85ac:	2180      	movs	r1, #128	; 0x80
    85ae:	01c9      	lsls	r1, r1, #7
    85b0:	430b      	orrs	r3, r1
    85b2:	8053      	strh	r3, [r2, #2]
	cpu_irq_leave_critical();
    85b4:	4b04      	ldr	r3, [pc, #16]	; (85c8 <system_gclk_chan_enable+0x2c>)
    85b6:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    85b8:	bd10      	pop	{r4, pc}
    85ba:	46c0      	nop			; (mov r8, r8)
    85bc:	0000654d 	.word	0x0000654d
    85c0:	40000c02 	.word	0x40000c02
    85c4:	40000c00 	.word	0x40000c00
    85c8:	0000658d 	.word	0x0000658d

000085cc <system_gclk_chan_disable>:
 *
 * \param[in] channel  Generic Clock channel to disable
 */
void system_gclk_chan_disable(
		const uint8_t channel)
{
    85cc:	b510      	push	{r4, lr}
    85ce:	0004      	movs	r4, r0
	cpu_irq_enter_critical();
    85d0:	4b0f      	ldr	r3, [pc, #60]	; (8610 <system_gclk_chan_disable+0x44>)
    85d2:	4798      	blx	r3
	system_interrupt_enter_critical_section();

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    85d4:	4b0f      	ldr	r3, [pc, #60]	; (8614 <system_gclk_chan_disable+0x48>)
    85d6:	701c      	strb	r4, [r3, #0]

	/* Sanity check WRTLOCK */
	Assert(!GCLK->CLKCTRL.bit.WRTLOCK);

	/* Switch to known-working source so that the channel can be disabled */
	uint32_t prev_gen_id = GCLK->CLKCTRL.bit.GEN;
    85d8:	4a0f      	ldr	r2, [pc, #60]	; (8618 <system_gclk_chan_disable+0x4c>)
    85da:	8853      	ldrh	r3, [r2, #2]
    85dc:	051b      	lsls	r3, r3, #20
    85de:	0f18      	lsrs	r0, r3, #28
	GCLK->CLKCTRL.bit.GEN = 0;
    85e0:	8853      	ldrh	r3, [r2, #2]
    85e2:	490e      	ldr	r1, [pc, #56]	; (861c <system_gclk_chan_disable+0x50>)
    85e4:	400b      	ands	r3, r1
    85e6:	8053      	strh	r3, [r2, #2]

	/* Disable the generic clock */
	GCLK->CLKCTRL.reg &= ~GCLK_CLKCTRL_CLKEN;
    85e8:	8853      	ldrh	r3, [r2, #2]
    85ea:	490d      	ldr	r1, [pc, #52]	; (8620 <system_gclk_chan_disable+0x54>)
    85ec:	400b      	ands	r3, r1
    85ee:	8053      	strh	r3, [r2, #2]
	while (GCLK->CLKCTRL.reg & GCLK_CLKCTRL_CLKEN) {
    85f0:	0011      	movs	r1, r2
    85f2:	2280      	movs	r2, #128	; 0x80
    85f4:	01d2      	lsls	r2, r2, #7
    85f6:	884b      	ldrh	r3, [r1, #2]
    85f8:	4213      	tst	r3, r2
    85fa:	d1fc      	bne.n	85f6 <system_gclk_chan_disable+0x2a>
		/* Wait for clock to become disabled */
	}

	/* Restore previous configured clock generator */
	GCLK->CLKCTRL.bit.GEN = prev_gen_id;
    85fc:	4906      	ldr	r1, [pc, #24]	; (8618 <system_gclk_chan_disable+0x4c>)
    85fe:	884a      	ldrh	r2, [r1, #2]
    8600:	0203      	lsls	r3, r0, #8
    8602:	4806      	ldr	r0, [pc, #24]	; (861c <system_gclk_chan_disable+0x50>)
    8604:	4002      	ands	r2, r0
    8606:	4313      	orrs	r3, r2
    8608:	804b      	strh	r3, [r1, #2]
	cpu_irq_leave_critical();
    860a:	4b06      	ldr	r3, [pc, #24]	; (8624 <system_gclk_chan_disable+0x58>)
    860c:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    860e:	bd10      	pop	{r4, pc}
    8610:	0000654d 	.word	0x0000654d
    8614:	40000c02 	.word	0x40000c02
    8618:	40000c00 	.word	0x40000c00
    861c:	fffff0ff 	.word	0xfffff0ff
    8620:	ffffbfff 	.word	0xffffbfff
    8624:	0000658d 	.word	0x0000658d

00008628 <system_gclk_chan_set_config>:
{
    8628:	b510      	push	{r4, lr}
	new_clkctrl_config |= config->source_generator << GCLK_CLKCTRL_GEN_Pos;
    862a:	780c      	ldrb	r4, [r1, #0]
    862c:	0224      	lsls	r4, r4, #8
    862e:	4304      	orrs	r4, r0
	system_gclk_chan_disable(channel);
    8630:	4b02      	ldr	r3, [pc, #8]	; (863c <system_gclk_chan_set_config+0x14>)
    8632:	4798      	blx	r3
	GCLK->CLKCTRL.reg = new_clkctrl_config;
    8634:	b2a4      	uxth	r4, r4
    8636:	4b02      	ldr	r3, [pc, #8]	; (8640 <system_gclk_chan_set_config+0x18>)
    8638:	805c      	strh	r4, [r3, #2]
}
    863a:	bd10      	pop	{r4, pc}
    863c:	000085cd 	.word	0x000085cd
    8640:	40000c00 	.word	0x40000c00

00008644 <system_gclk_chan_get_hz>:
 *
 * \return The frequency of the generic clock channel, in Hz.
 */
uint32_t system_gclk_chan_get_hz(
		const uint8_t channel)
{
    8644:	b510      	push	{r4, lr}
    8646:	0004      	movs	r4, r0
	cpu_irq_enter_critical();
    8648:	4b06      	ldr	r3, [pc, #24]	; (8664 <system_gclk_chan_get_hz+0x20>)
    864a:	4798      	blx	r3
	uint8_t gen_id;

	system_interrupt_enter_critical_section();

	/* Select the requested generic clock channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    864c:	4b06      	ldr	r3, [pc, #24]	; (8668 <system_gclk_chan_get_hz+0x24>)
    864e:	701c      	strb	r4, [r3, #0]
	gen_id = GCLK->CLKCTRL.bit.GEN;
    8650:	4b06      	ldr	r3, [pc, #24]	; (866c <system_gclk_chan_get_hz+0x28>)
    8652:	885c      	ldrh	r4, [r3, #2]
    8654:	0524      	lsls	r4, r4, #20
    8656:	0f24      	lsrs	r4, r4, #28
	cpu_irq_leave_critical();
    8658:	4b05      	ldr	r3, [pc, #20]	; (8670 <system_gclk_chan_get_hz+0x2c>)
    865a:	4798      	blx	r3

	system_interrupt_leave_critical_section();

	/* Return the clock speed of the associated GCLK generator */
	return system_gclk_gen_get_hz(gen_id);
    865c:	0020      	movs	r0, r4
    865e:	4b05      	ldr	r3, [pc, #20]	; (8674 <system_gclk_chan_get_hz+0x30>)
    8660:	4798      	blx	r3
}
    8662:	bd10      	pop	{r4, pc}
    8664:	0000654d 	.word	0x0000654d
    8668:	40000c02 	.word	0x40000c02
    866c:	40000c00 	.word	0x40000c00
    8670:	0000658d 	.word	0x0000658d
    8674:	00008511 	.word	0x00008511

00008678 <_system_pinmux_config>:
 */
static void _system_pinmux_config(
		PortGroup *const port,
		const uint32_t pin_mask,
		const struct system_pinmux_config *const config)
{
    8678:	b530      	push	{r4, r5, lr}

	/* Track the configuration bits into a temporary variable before writing */
	uint32_t pin_cfg = 0;

	/* Enabled powersave mode, don't create configuration */
	if (!config->powersave) {
    867a:	78d3      	ldrb	r3, [r2, #3]
    867c:	2b00      	cmp	r3, #0
    867e:	d135      	bne.n	86ec <_system_pinmux_config+0x74>
		/* Enable the pin peripheral MUX flag if non-GPIO selected (pinmux will
		 * be written later) and store the new MUX mask */
		if (config->mux_position != SYSTEM_PINMUX_GPIO) {
    8680:	7813      	ldrb	r3, [r2, #0]
    8682:	2b80      	cmp	r3, #128	; 0x80
    8684:	d029      	beq.n	86da <_system_pinmux_config+0x62>
			pin_cfg |= PORT_WRCONFIG_PMUXEN;
			pin_cfg |= (config->mux_position << PORT_WRCONFIG_PMUX_Pos);
    8686:	061b      	lsls	r3, r3, #24
    8688:	2480      	movs	r4, #128	; 0x80
    868a:	0264      	lsls	r4, r4, #9
    868c:	4323      	orrs	r3, r4
		}

		/* Check if the user has requested that the input buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_INPUT) ||
    868e:	7854      	ldrb	r4, [r2, #1]
    8690:	2502      	movs	r5, #2
    8692:	43ac      	bics	r4, r5
    8694:	d106      	bne.n	86a4 <_system_pinmux_config+0x2c>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Enable input buffer flag */
			pin_cfg |= PORT_WRCONFIG_INEN;

			/* Enable pull-up/pull-down control flag if requested */
			if (config->input_pull != SYSTEM_PINMUX_PIN_PULL_NONE) {
    8696:	7894      	ldrb	r4, [r2, #2]
    8698:	2c00      	cmp	r4, #0
    869a:	d120      	bne.n	86de <_system_pinmux_config+0x66>
			pin_cfg |= PORT_WRCONFIG_INEN;
    869c:	2480      	movs	r4, #128	; 0x80
    869e:	02a4      	lsls	r4, r4, #10
    86a0:	4323      	orrs	r3, r4
				pin_cfg |= PORT_WRCONFIG_PULLEN;
			}

			/* Clear the port DIR bits to disable the output buffer */
			port->DIRCLR.reg = pin_mask;
    86a2:	6041      	str	r1, [r0, #4]
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    86a4:	7854      	ldrb	r4, [r2, #1]
    86a6:	3c01      	subs	r4, #1
    86a8:	2c01      	cmp	r4, #1
    86aa:	d91c      	bls.n	86e6 <_system_pinmux_config+0x6e>
		port->DIRCLR.reg = pin_mask;
	}

	/* The Write Configuration register (WRCONFIG) requires the
	 * pins to to grouped into two 16-bit half-words - split them out here */
	uint32_t lower_pin_mask = (pin_mask & 0xFFFF);
    86ac:	040d      	lsls	r5, r1, #16
    86ae:	0c2d      	lsrs	r5, r5, #16

	/* Configure the lower 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;
    86b0:	24a0      	movs	r4, #160	; 0xa0
    86b2:	05e4      	lsls	r4, r4, #23
    86b4:	432c      	orrs	r4, r5
    86b6:	431c      	orrs	r4, r3
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    86b8:	6284      	str	r4, [r0, #40]	; 0x28
	uint32_t upper_pin_mask = (pin_mask >> 16);
    86ba:	0c0d      	lsrs	r5, r1, #16

	/* Configure the upper 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
    86bc:	24d0      	movs	r4, #208	; 0xd0
    86be:	0624      	lsls	r4, r4, #24
    86c0:	432c      	orrs	r4, r5
    86c2:	431c      	orrs	r4, r3
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    86c4:	6284      	str	r4, [r0, #40]	; 0x28
			PORT_WRCONFIG_HWSEL;

	if(!config->powersave) {
    86c6:	78d4      	ldrb	r4, [r2, #3]
    86c8:	2c00      	cmp	r4, #0
    86ca:	d122      	bne.n	8712 <_system_pinmux_config+0x9a>
		/* Set the pull-up state once the port pins are configured if one was
		 * requested and it does not violate the valid set of port
		 * configurations */
		if (pin_cfg & PORT_WRCONFIG_PULLEN) {
    86cc:	035b      	lsls	r3, r3, #13
    86ce:	d51c      	bpl.n	870a <_system_pinmux_config+0x92>
			/* Set the OUT register bits to enable the pull-up if requested,
			 * clear to enable pull-down */
			if (config->input_pull == SYSTEM_PINMUX_PIN_PULL_UP) {
    86d0:	7893      	ldrb	r3, [r2, #2]
    86d2:	2b01      	cmp	r3, #1
    86d4:	d01e      	beq.n	8714 <_system_pinmux_config+0x9c>
				port->OUTSET.reg = pin_mask;
			} else {
				port->OUTCLR.reg = pin_mask;
    86d6:	6141      	str	r1, [r0, #20]
    86d8:	e017      	b.n	870a <_system_pinmux_config+0x92>
	uint32_t pin_cfg = 0;
    86da:	2300      	movs	r3, #0
    86dc:	e7d7      	b.n	868e <_system_pinmux_config+0x16>
				pin_cfg |= PORT_WRCONFIG_PULLEN;
    86de:	24c0      	movs	r4, #192	; 0xc0
    86e0:	02e4      	lsls	r4, r4, #11
    86e2:	4323      	orrs	r3, r4
    86e4:	e7dd      	b.n	86a2 <_system_pinmux_config+0x2a>
			pin_cfg &= ~PORT_WRCONFIG_PULLEN;
    86e6:	4c0d      	ldr	r4, [pc, #52]	; (871c <_system_pinmux_config+0xa4>)
    86e8:	4023      	ands	r3, r4
    86ea:	e7df      	b.n	86ac <_system_pinmux_config+0x34>
		port->DIRCLR.reg = pin_mask;
    86ec:	6041      	str	r1, [r0, #4]
	uint32_t lower_pin_mask = (pin_mask & 0xFFFF);
    86ee:	040c      	lsls	r4, r1, #16
    86f0:	0c24      	lsrs	r4, r4, #16
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;
    86f2:	23a0      	movs	r3, #160	; 0xa0
    86f4:	05db      	lsls	r3, r3, #23
    86f6:	4323      	orrs	r3, r4
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    86f8:	6283      	str	r3, [r0, #40]	; 0x28
	uint32_t upper_pin_mask = (pin_mask >> 16);
    86fa:	0c0c      	lsrs	r4, r1, #16
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
    86fc:	23d0      	movs	r3, #208	; 0xd0
    86fe:	061b      	lsls	r3, r3, #24
    8700:	4323      	orrs	r3, r4
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    8702:	6283      	str	r3, [r0, #40]	; 0x28
	if(!config->powersave) {
    8704:	78d3      	ldrb	r3, [r2, #3]
    8706:	2b00      	cmp	r3, #0
    8708:	d103      	bne.n	8712 <_system_pinmux_config+0x9a>
			}
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    870a:	7853      	ldrb	r3, [r2, #1]
    870c:	3b01      	subs	r3, #1
    870e:	2b01      	cmp	r3, #1
    8710:	d902      	bls.n	8718 <_system_pinmux_config+0xa0>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Set the port DIR bits to enable the output buffer */
			port->DIRSET.reg = pin_mask;
		}
	}
}
    8712:	bd30      	pop	{r4, r5, pc}
				port->OUTSET.reg = pin_mask;
    8714:	6181      	str	r1, [r0, #24]
    8716:	e7f8      	b.n	870a <_system_pinmux_config+0x92>
			port->DIRSET.reg = pin_mask;
    8718:	6081      	str	r1, [r0, #8]
}
    871a:	e7fa      	b.n	8712 <_system_pinmux_config+0x9a>
    871c:	fffbffff 	.word	0xfffbffff

00008720 <system_pinmux_pin_set_config>:
 * \param[in] config    Configuration settings for the pin
 */
void system_pinmux_pin_set_config(
		const uint8_t gpio_pin,
		const struct system_pinmux_config *const config)
{
    8720:	b510      	push	{r4, lr}
    8722:	000a      	movs	r2, r1
	if (port_index < PORT_INST_NUM) {
    8724:	09c1      	lsrs	r1, r0, #7
		return NULL;
    8726:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
    8728:	2900      	cmp	r1, #0
    872a:	d104      	bne.n	8736 <system_pinmux_pin_set_config+0x16>
		return &(ports[port_index]->Group[group_index]);
    872c:	0943      	lsrs	r3, r0, #5
    872e:	01db      	lsls	r3, r3, #7
    8730:	4905      	ldr	r1, [pc, #20]	; (8748 <system_pinmux_pin_set_config+0x28>)
    8732:	468c      	mov	ip, r1
    8734:	4463      	add	r3, ip
	PortGroup *const port = system_pinmux_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask = (1UL << (gpio_pin % 32));
    8736:	241f      	movs	r4, #31
    8738:	4020      	ands	r0, r4
    873a:	2101      	movs	r1, #1
    873c:	4081      	lsls	r1, r0

	_system_pinmux_config(port, pin_mask, config);
    873e:	0018      	movs	r0, r3
    8740:	4b02      	ldr	r3, [pc, #8]	; (874c <system_pinmux_pin_set_config+0x2c>)
    8742:	4798      	blx	r3
}
    8744:	bd10      	pop	{r4, pc}
    8746:	46c0      	nop			; (mov r8, r8)
    8748:	41004400 	.word	0x41004400
    874c:	00008679 	.word	0x00008679

00008750 <_system_dummy_init>:
 */
void _system_dummy_init(void);
void _system_dummy_init(void)
{
	return;
}
    8750:	4770      	bx	lr
    8752:	Address 0x00008752 is out of bounds.


00008754 <system_init>:
 *  - Board hardware initialization (via the Board module)
 *  - Event system driver initialization (via the EVSYS module)
 *  - External Interrupt driver initialization (via the EXTINT module)
 */
void system_init(void)
{
    8754:	b510      	push	{r4, lr}
	/* Configure GCLK and clock sources according to conf_clocks.h */
	system_clock_init();
    8756:	4b05      	ldr	r3, [pc, #20]	; (876c <system_init+0x18>)
    8758:	4798      	blx	r3

	/* Initialize board hardware */
	system_board_init();
    875a:	4b05      	ldr	r3, [pc, #20]	; (8770 <system_init+0x1c>)
    875c:	4798      	blx	r3

	/* Initialize EVSYS hardware */
	_system_events_init();
    875e:	4b05      	ldr	r3, [pc, #20]	; (8774 <system_init+0x20>)
    8760:	4798      	blx	r3

	/* Initialize External hardware */
	_system_extint_init();
    8762:	4b05      	ldr	r3, [pc, #20]	; (8778 <system_init+0x24>)
    8764:	4798      	blx	r3
	
	/* Initialize DIVAS hardware */
	_system_divas_init();
    8766:	4b05      	ldr	r3, [pc, #20]	; (877c <system_init+0x28>)
    8768:	4798      	blx	r3
}
    876a:	bd10      	pop	{r4, pc}
    876c:	00008209 	.word	0x00008209
    8770:	000065bd 	.word	0x000065bd
    8774:	00008751 	.word	0x00008751
    8778:	00006769 	.word	0x00006769
    877c:	00008751 	.word	0x00008751

00008780 <tc_register_callback>:
	/* Sanity check arguments */
	Assert(module);
	Assert(callback_func);

	/* Register callback function */
	module->callback[callback_type] = callback_func;
    8780:	1c93      	adds	r3, r2, #2
    8782:	009b      	lsls	r3, r3, #2
    8784:	5019      	str	r1, [r3, r0]

	/* Set the bit corresponding to the callback_type */
	if (callback_type == TC_CALLBACK_CC_CHANNEL0) {
    8786:	2a02      	cmp	r2, #2
    8788:	d009      	beq.n	879e <tc_register_callback+0x1e>
		module->register_callback_mask |= TC_INTFLAG_MC(1);
	}
	else if (callback_type == TC_CALLBACK_CC_CHANNEL1) {
    878a:	2a03      	cmp	r2, #3
    878c:	d00c      	beq.n	87a8 <tc_register_callback+0x28>
		module->register_callback_mask |= TC_INTFLAG_MC(2);
	}
	else {
		module->register_callback_mask |= (1 << callback_type);
    878e:	2301      	movs	r3, #1
    8790:	4093      	lsls	r3, r2
    8792:	001a      	movs	r2, r3
    8794:	7e03      	ldrb	r3, [r0, #24]
    8796:	4313      	orrs	r3, r2
    8798:	7603      	strb	r3, [r0, #24]
	}
	return STATUS_OK;
}
    879a:	2000      	movs	r0, #0
    879c:	4770      	bx	lr
		module->register_callback_mask |= TC_INTFLAG_MC(1);
    879e:	7e03      	ldrb	r3, [r0, #24]
    87a0:	2210      	movs	r2, #16
    87a2:	4313      	orrs	r3, r2
    87a4:	7603      	strb	r3, [r0, #24]
    87a6:	e7f8      	b.n	879a <tc_register_callback+0x1a>
		module->register_callback_mask |= TC_INTFLAG_MC(2);
    87a8:	7e03      	ldrb	r3, [r0, #24]
    87aa:	2220      	movs	r2, #32
    87ac:	4313      	orrs	r3, r2
    87ae:	7603      	strb	r3, [r0, #24]
    87b0:	e7f3      	b.n	879a <tc_register_callback+0x1a>
    87b2:	Address 0x000087b2 is out of bounds.


000087b4 <_tc_interrupt_handler>:
 * \param[in]  instance  ID of the TC instance calling the interrupt
 *                       handler
 */
void _tc_interrupt_handler(
		uint8_t instance)
{
    87b4:	b570      	push	{r4, r5, r6, lr}
	/* Temporary variable */
	uint8_t interrupt_and_callback_status_mask;

	/* Get device instance from the look-up table */
	struct tc_module *module
    87b6:	0080      	lsls	r0, r0, #2
    87b8:	4b16      	ldr	r3, [pc, #88]	; (8814 <_tc_interrupt_handler+0x60>)
    87ba:	58c4      	ldr	r4, [r0, r3]
			= (struct tc_module *)_tc_instances[instance];

	/* Read and mask interrupt flag register */
	interrupt_and_callback_status_mask = module->hw->COUNT8.INTFLAG.reg &
    87bc:	6823      	ldr	r3, [r4, #0]
    87be:	7b9d      	ldrb	r5, [r3, #14]
    87c0:	7e22      	ldrb	r2, [r4, #24]
    87c2:	7e63      	ldrb	r3, [r4, #25]
    87c4:	4013      	ands	r3, r2
    87c6:	401d      	ands	r5, r3
			module->register_callback_mask &
			module->enable_callback_mask;

	/* Check if an Overflow interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_OVF) {
    87c8:	07eb      	lsls	r3, r5, #31
    87ca:	d406      	bmi.n	87da <_tc_interrupt_handler+0x26>
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_OVF;
	}

	/* Check if an Error interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_ERR) {
    87cc:	07ab      	lsls	r3, r5, #30
    87ce:	d40b      	bmi.n	87e8 <_tc_interrupt_handler+0x34>
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_ERR;
	}

	/* Check if an Match/Capture Channel 0 interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_MC(1)) {
    87d0:	06eb      	lsls	r3, r5, #27
    87d2:	d410      	bmi.n	87f6 <_tc_interrupt_handler+0x42>
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_MC(1);
	}

	/* Check if an Match/Capture Channel 1 interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_MC(2)) {
    87d4:	06ab      	lsls	r3, r5, #26
    87d6:	d415      	bmi.n	8804 <_tc_interrupt_handler+0x50>
		/* Invoke registered and enabled callback function */
		(module->callback[TC_CALLBACK_CC_CHANNEL1])(module);
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_MC(2);
	}
}
    87d8:	bd70      	pop	{r4, r5, r6, pc}
		(module->callback[TC_CALLBACK_OVERFLOW])(module);
    87da:	0020      	movs	r0, r4
    87dc:	68a3      	ldr	r3, [r4, #8]
    87de:	4798      	blx	r3
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_OVF;
    87e0:	2301      	movs	r3, #1
    87e2:	6822      	ldr	r2, [r4, #0]
    87e4:	7393      	strb	r3, [r2, #14]
    87e6:	e7f1      	b.n	87cc <_tc_interrupt_handler+0x18>
		(module->callback[TC_CALLBACK_ERROR])(module);
    87e8:	0020      	movs	r0, r4
    87ea:	68e3      	ldr	r3, [r4, #12]
    87ec:	4798      	blx	r3
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_ERR;
    87ee:	2302      	movs	r3, #2
    87f0:	6822      	ldr	r2, [r4, #0]
    87f2:	7393      	strb	r3, [r2, #14]
    87f4:	e7ec      	b.n	87d0 <_tc_interrupt_handler+0x1c>
		(module->callback[TC_CALLBACK_CC_CHANNEL0])(module);
    87f6:	0020      	movs	r0, r4
    87f8:	6923      	ldr	r3, [r4, #16]
    87fa:	4798      	blx	r3
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_MC(1);
    87fc:	2310      	movs	r3, #16
    87fe:	6822      	ldr	r2, [r4, #0]
    8800:	7393      	strb	r3, [r2, #14]
    8802:	e7e7      	b.n	87d4 <_tc_interrupt_handler+0x20>
		(module->callback[TC_CALLBACK_CC_CHANNEL1])(module);
    8804:	0020      	movs	r0, r4
    8806:	6963      	ldr	r3, [r4, #20]
    8808:	4798      	blx	r3
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_MC(2);
    880a:	6823      	ldr	r3, [r4, #0]
    880c:	2220      	movs	r2, #32
    880e:	739a      	strb	r2, [r3, #14]
}
    8810:	e7e2      	b.n	87d8 <_tc_interrupt_handler+0x24>
    8812:	46c0      	nop			; (mov r8, r8)
    8814:	20001d98 	.word	0x20001d98

00008818 <TC3_Handler>:
	MRECURSION(TC_INST_NUM, _TC_INTERRUPT_HANDLER, TC_INST_MAX_ID)
    8818:	b510      	push	{r4, lr}
    881a:	2000      	movs	r0, #0
    881c:	4b01      	ldr	r3, [pc, #4]	; (8824 <TC3_Handler+0xc>)
    881e:	4798      	blx	r3
    8820:	bd10      	pop	{r4, pc}
    8822:	46c0      	nop			; (mov r8, r8)
    8824:	000087b5 	.word	0x000087b5

00008828 <TC4_Handler>:
    8828:	b510      	push	{r4, lr}
    882a:	2001      	movs	r0, #1
    882c:	4b01      	ldr	r3, [pc, #4]	; (8834 <TC4_Handler+0xc>)
    882e:	4798      	blx	r3
    8830:	bd10      	pop	{r4, pc}
    8832:	46c0      	nop			; (mov r8, r8)
    8834:	000087b5 	.word	0x000087b5

00008838 <TC5_Handler>:
    8838:	b510      	push	{r4, lr}
    883a:	2002      	movs	r0, #2
    883c:	4b01      	ldr	r3, [pc, #4]	; (8844 <TC5_Handler+0xc>)
    883e:	4798      	blx	r3
    8840:	bd10      	pop	{r4, pc}
    8842:	46c0      	nop			; (mov r8, r8)
    8844:	000087b5 	.word	0x000087b5

00008848 <_tc_get_inst_index>:
 *
 * \return Index of the given TC module instance.
 */
uint8_t _tc_get_inst_index(
		Tc *const hw)
{
    8848:	b530      	push	{r4, r5, lr}
    884a:	b085      	sub	sp, #20
	/* List of available TC modules. */
	Tc *const tc_modules[TC_INST_NUM] = TC_INSTS;
    884c:	aa01      	add	r2, sp, #4
    884e:	4b0b      	ldr	r3, [pc, #44]	; (887c <_tc_get_inst_index+0x34>)
    8850:	cb32      	ldmia	r3!, {r1, r4, r5}
    8852:	c232      	stmia	r2!, {r1, r4, r5}

	/* Find index for TC instance. */
	for (uint32_t i = 0; i < TC_INST_NUM; i++) {
		if (hw == tc_modules[i]) {
    8854:	9b01      	ldr	r3, [sp, #4]
    8856:	4298      	cmp	r0, r3
    8858:	d00d      	beq.n	8876 <_tc_get_inst_index+0x2e>
    885a:	9b02      	ldr	r3, [sp, #8]
    885c:	4298      	cmp	r0, r3
    885e:	d008      	beq.n	8872 <_tc_get_inst_index+0x2a>
		}
	}

	/* Invalid data given. */
	Assert(false);
	return 0;
    8860:	2300      	movs	r3, #0
		if (hw == tc_modules[i]) {
    8862:	9a03      	ldr	r2, [sp, #12]
    8864:	4282      	cmp	r2, r0
    8866:	d002      	beq.n	886e <_tc_get_inst_index+0x26>
}
    8868:	0018      	movs	r0, r3
    886a:	b005      	add	sp, #20
    886c:	bd30      	pop	{r4, r5, pc}
	for (uint32_t i = 0; i < TC_INST_NUM; i++) {
    886e:	3302      	adds	r3, #2
    8870:	e002      	b.n	8878 <_tc_get_inst_index+0x30>
    8872:	2301      	movs	r3, #1
    8874:	e000      	b.n	8878 <_tc_get_inst_index+0x30>
    8876:	2300      	movs	r3, #0
			return i;
    8878:	b2db      	uxtb	r3, r3
    887a:	e7f5      	b.n	8868 <_tc_get_inst_index+0x20>
    887c:	0001606c 	.word	0x0001606c

00008880 <tc_init>:
 */
enum status_code tc_init(
		struct tc_module *const module_inst,
		Tc *const hw,
		const struct tc_config *const config)
{
    8880:	b5f0      	push	{r4, r5, r6, r7, lr}
    8882:	b087      	sub	sp, #28
    8884:	0004      	movs	r4, r0
    8886:	000d      	movs	r5, r1
    8888:	0016      	movs	r6, r2
	uint8_t ctrlbset_tmp = 0;
	/* Temporary variable to hold all updates to the CTRLC
	 * register before they are written to it */
	uint8_t ctrlc_tmp = 0;
	/* Temporary variable to hold TC instance number */
	uint8_t instance = _tc_get_inst_index(hw);
    888a:	0008      	movs	r0, r1
    888c:	4b85      	ldr	r3, [pc, #532]	; (8aa4 <tc_init+0x224>)
    888e:	4798      	blx	r3
    8890:	0007      	movs	r7, r0

	/* Array of GLCK ID for different TC instances */
	uint8_t inst_gclk_id[] = TC_INST_GCLK_ID;
    8892:	ab05      	add	r3, sp, #20
    8894:	221b      	movs	r2, #27
    8896:	701a      	strb	r2, [r3, #0]
    8898:	3201      	adds	r2, #1
    889a:	705a      	strb	r2, [r3, #1]
    889c:	709a      	strb	r2, [r3, #2]
	/* Array of PM APBC mask bit position for different TC instances */
	uint16_t inst_pm_apbmask[] = TC_INST_PM_APBCMASK;
    889e:	ab03      	add	r3, sp, #12
    88a0:	2280      	movs	r2, #128	; 0x80
    88a2:	0112      	lsls	r2, r2, #4
    88a4:	801a      	strh	r2, [r3, #0]
    88a6:	2280      	movs	r2, #128	; 0x80
    88a8:	0152      	lsls	r2, r2, #5
    88aa:	805a      	strh	r2, [r3, #2]
    88ac:	2280      	movs	r2, #128	; 0x80
    88ae:	0192      	lsls	r2, r2, #6
    88b0:	809a      	strh	r2, [r3, #4]
	struct system_gclk_chan_config gclk_chan_config;

#if TC_ASYNC == true
	/* Initialize parameters */
	for (uint8_t i = 0; i < TC_CALLBACK_N; i++) {
		module_inst->callback[i]        = NULL;
    88b2:	2300      	movs	r3, #0
    88b4:	60a3      	str	r3, [r4, #8]
    88b6:	60e3      	str	r3, [r4, #12]
    88b8:	6123      	str	r3, [r4, #16]
    88ba:	6163      	str	r3, [r4, #20]
	}
	module_inst->register_callback_mask     = 0x00;
    88bc:	7623      	strb	r3, [r4, #24]
	module_inst->enable_callback_mask       = 0x00;
    88be:	7663      	strb	r3, [r4, #25]

	/* Register this instance for callbacks*/
	_tc_instances[instance] = module_inst;
    88c0:	0082      	lsls	r2, r0, #2
    88c2:	4b79      	ldr	r3, [pc, #484]	; (8aa8 <tc_init+0x228>)
    88c4:	50d4      	str	r4, [r2, r3]
#endif

	/* Associate the given device instance with the hardware module */
	module_inst->hw = hw;
    88c6:	6025      	str	r5, [r4, #0]
#else
	/* Check if odd numbered TC modules are being configured in 32-bit
	 * counter size. Only even numbered counters are allowed to be
	 * configured in 32-bit counter size.
	 */
	if ((config->counter_size == TC_COUNTER_SIZE_32BIT) &&
    88c8:	78b3      	ldrb	r3, [r6, #2]
    88ca:	2b08      	cmp	r3, #8
    88cc:	d006      	beq.n	88dc <tc_init+0x5c>
#endif

	/* Make the counter size variable in the module_inst struct reflect
	 * the counter size in the module
	 */
	module_inst->counter_size = config->counter_size;
    88ce:	7123      	strb	r3, [r4, #4]

	if (hw->COUNT8.CTRLA.reg & TC_CTRLA_SWRST) {
    88d0:	882b      	ldrh	r3, [r5, #0]
		/* We are in the middle of a reset. Abort. */
		return STATUS_BUSY;
    88d2:	2005      	movs	r0, #5
	if (hw->COUNT8.CTRLA.reg & TC_CTRLA_SWRST) {
    88d4:	07db      	lsls	r3, r3, #31
    88d6:	d505      	bpl.n	88e4 <tc_init+0x64>
			return STATUS_OK;
	}

	Assert(false);
	return STATUS_ERR_INVALID_ARG;
}
    88d8:	b007      	add	sp, #28
    88da:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return STATUS_ERR_INVALID_ARG;
    88dc:	2017      	movs	r0, #23
	if ((config->counter_size == TC_COUNTER_SIZE_32BIT) &&
    88de:	07fa      	lsls	r2, r7, #31
    88e0:	d5fa      	bpl.n	88d8 <tc_init+0x58>
    88e2:	e7f4      	b.n	88ce <tc_init+0x4e>
	if (hw->COUNT8.STATUS.reg & TC_STATUS_SLAVE) {
    88e4:	7beb      	ldrb	r3, [r5, #15]
		return STATUS_ERR_DENIED;
    88e6:	3017      	adds	r0, #23
	if (hw->COUNT8.STATUS.reg & TC_STATUS_SLAVE) {
    88e8:	06db      	lsls	r3, r3, #27
    88ea:	d4f5      	bmi.n	88d8 <tc_init+0x58>
	if (hw->COUNT8.CTRLA.reg & TC_CTRLA_ENABLE) {
    88ec:	882b      	ldrh	r3, [r5, #0]
    88ee:	079b      	lsls	r3, r3, #30
    88f0:	d4f2      	bmi.n	88d8 <tc_init+0x58>
	if (config->pwm_channel[0].enabled) {
    88f2:	7c33      	ldrb	r3, [r6, #16]
    88f4:	2b00      	cmp	r3, #0
    88f6:	d179      	bne.n	89ec <tc_init+0x16c>
	if (config->pwm_channel[1].enabled) {
    88f8:	7f33      	ldrb	r3, [r6, #28]
    88fa:	2b00      	cmp	r3, #0
    88fc:	d000      	beq.n	8900 <tc_init+0x80>
    88fe:	e081      	b.n	8a04 <tc_init+0x184>
			PM->APBCMASK.reg |= mask;
    8900:	496a      	ldr	r1, [pc, #424]	; (8aac <tc_init+0x22c>)
    8902:	6a08      	ldr	r0, [r1, #32]
			inst_pm_apbmask[instance]);
    8904:	007a      	lsls	r2, r7, #1
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC,
    8906:	ab03      	add	r3, sp, #12
    8908:	5ad3      	ldrh	r3, [r2, r3]
    890a:	4303      	orrs	r3, r0
    890c:	620b      	str	r3, [r1, #32]
	if ((config->counter_size == TC_COUNTER_SIZE_32BIT))
    890e:	78b3      	ldrb	r3, [r6, #2]
    8910:	2b08      	cmp	r3, #8
    8912:	d100      	bne.n	8916 <tc_init+0x96>
    8914:	e086      	b.n	8a24 <tc_init+0x1a4>
	gclk_chan_config.source_generator = config->clock_source;
    8916:	a901      	add	r1, sp, #4
    8918:	7833      	ldrb	r3, [r6, #0]
    891a:	700b      	strb	r3, [r1, #0]
	system_gclk_chan_set_config(inst_gclk_id[instance], &gclk_chan_config);
    891c:	ab05      	add	r3, sp, #20
    891e:	5ddf      	ldrb	r7, [r3, r7]
    8920:	0038      	movs	r0, r7
    8922:	4b63      	ldr	r3, [pc, #396]	; (8ab0 <tc_init+0x230>)
    8924:	4798      	blx	r3
	system_gclk_chan_enable(inst_gclk_id[instance]);
    8926:	0038      	movs	r0, r7
    8928:	4b62      	ldr	r3, [pc, #392]	; (8ab4 <tc_init+0x234>)
    892a:	4798      	blx	r3
	ctrla_tmp =
    892c:	8931      	ldrh	r1, [r6, #8]
    892e:	88b3      	ldrh	r3, [r6, #4]
    8930:	430b      	orrs	r3, r1
			(uint32_t)config->wave_generation |
    8932:	78b1      	ldrb	r1, [r6, #2]
    8934:	79b2      	ldrb	r2, [r6, #6]
    8936:	4311      	orrs	r1, r2
	ctrla_tmp =
    8938:	4319      	orrs	r1, r3
	if (config->run_in_standby) {
    893a:	7873      	ldrb	r3, [r6, #1]
    893c:	2b00      	cmp	r3, #0
    893e:	d002      	beq.n	8946 <tc_init+0xc6>
		ctrla_tmp |= TC_CTRLA_RUNSTDBY;
    8940:	2380      	movs	r3, #128	; 0x80
    8942:	011b      	lsls	r3, r3, #4
    8944:	4319      	orrs	r1, r3
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    8946:	6822      	ldr	r2, [r4, #0]

#if (SAML21) || (SAML22) || (SAMC20) || (SAMC21) || (SAMR30) || (SAMR34) || (SAMR35)
	return (tc_module->SYNCBUSY.reg);
#else
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
    8948:	7bd3      	ldrb	r3, [r2, #15]
	while (tc_is_syncing(module_inst)) {
    894a:	b25b      	sxtb	r3, r3
    894c:	2b00      	cmp	r3, #0
    894e:	dbfb      	blt.n	8948 <tc_init+0xc8>
	hw->COUNT8.CTRLA.reg = ctrla_tmp;
    8950:	8029      	strh	r1, [r5, #0]
	if (config->oneshot) {
    8952:	7b71      	ldrb	r1, [r6, #13]
		ctrlbset_tmp = TC_CTRLBSET_ONESHOT;
    8954:	1e4b      	subs	r3, r1, #1
    8956:	4199      	sbcs	r1, r3
    8958:	0089      	lsls	r1, r1, #2
	if (config->count_direction) {
    895a:	7bb3      	ldrb	r3, [r6, #14]
    895c:	2b00      	cmp	r3, #0
    895e:	d001      	beq.n	8964 <tc_init+0xe4>
		ctrlbset_tmp |= TC_CTRLBSET_DIR;
    8960:	2301      	movs	r3, #1
    8962:	4319      	orrs	r1, r3
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    8964:	6822      	ldr	r2, [r4, #0]
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
    8966:	7bd3      	ldrb	r3, [r2, #15]
	while (tc_is_syncing(module_inst)) {
    8968:	b25b      	sxtb	r3, r3
    896a:	2b00      	cmp	r3, #0
    896c:	dbfb      	blt.n	8966 <tc_init+0xe6>
	hw->COUNT8.CTRLBCLR.reg = 0xFF;
    896e:	23ff      	movs	r3, #255	; 0xff
    8970:	712b      	strb	r3, [r5, #4]
	if (ctrlbset_tmp) {
    8972:	2900      	cmp	r1, #0
    8974:	d005      	beq.n	8982 <tc_init+0x102>
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    8976:	6822      	ldr	r2, [r4, #0]
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
    8978:	7bd3      	ldrb	r3, [r2, #15]
		while (tc_is_syncing(module_inst)) {
    897a:	b25b      	sxtb	r3, r3
    897c:	2b00      	cmp	r3, #0
    897e:	dbfb      	blt.n	8978 <tc_init+0xf8>
		hw->COUNT8.CTRLBSET.reg = ctrlbset_tmp;
    8980:	7169      	strb	r1, [r5, #5]
	ctrlc_tmp = config->waveform_invert_output;
    8982:	7ab1      	ldrb	r1, [r6, #10]
		if (config->enable_capture_on_channel[i] == true) {
    8984:	7af3      	ldrb	r3, [r6, #11]
    8986:	2b00      	cmp	r3, #0
    8988:	d001      	beq.n	898e <tc_init+0x10e>
			ctrlc_tmp |= (TC_CTRLC_CPTEN(1) << i);
    898a:	2310      	movs	r3, #16
    898c:	4319      	orrs	r1, r3
		if (config->enable_capture_on_channel[i] == true) {
    898e:	7b33      	ldrb	r3, [r6, #12]
    8990:	2b00      	cmp	r3, #0
    8992:	d001      	beq.n	8998 <tc_init+0x118>
			ctrlc_tmp |= (TC_CTRLC_CPTEN(1) << i);
    8994:	2320      	movs	r3, #32
    8996:	4319      	orrs	r1, r3
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    8998:	6822      	ldr	r2, [r4, #0]
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
    899a:	7bd3      	ldrb	r3, [r2, #15]
	while (tc_is_syncing(module_inst)) {
    899c:	b25b      	sxtb	r3, r3
    899e:	2b00      	cmp	r3, #0
    89a0:	dbfb      	blt.n	899a <tc_init+0x11a>
	hw->COUNT8.CTRLC.reg = ctrlc_tmp;
    89a2:	71a9      	strb	r1, [r5, #6]
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    89a4:	6822      	ldr	r2, [r4, #0]
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
    89a6:	7bd3      	ldrb	r3, [r2, #15]
	while (tc_is_syncing(module_inst)) {
    89a8:	b25b      	sxtb	r3, r3
    89aa:	2b00      	cmp	r3, #0
    89ac:	dbfb      	blt.n	89a6 <tc_init+0x126>
	switch (module_inst->counter_size) {
    89ae:	7923      	ldrb	r3, [r4, #4]
    89b0:	2b04      	cmp	r3, #4
    89b2:	d03f      	beq.n	8a34 <tc_init+0x1b4>
    89b4:	2b08      	cmp	r3, #8
    89b6:	d05e      	beq.n	8a76 <tc_init+0x1f6>
	return STATUS_ERR_INVALID_ARG;
    89b8:	2017      	movs	r0, #23
	switch (module_inst->counter_size) {
    89ba:	2b00      	cmp	r3, #0
    89bc:	d000      	beq.n	89c0 <tc_init+0x140>
    89be:	e78b      	b.n	88d8 <tc_init+0x58>
    89c0:	7bd3      	ldrb	r3, [r2, #15]
			while (tc_is_syncing(module_inst)) {
    89c2:	b25b      	sxtb	r3, r3
    89c4:	2b00      	cmp	r3, #0
    89c6:	dbfb      	blt.n	89c0 <tc_init+0x140>
				= config->counter_16_bit.value;
    89c8:	8d33      	ldrh	r3, [r6, #40]	; 0x28
    89ca:	822b      	strh	r3, [r5, #16]
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    89cc:	6822      	ldr	r2, [r4, #0]
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
    89ce:	7bd3      	ldrb	r3, [r2, #15]
			while (tc_is_syncing(module_inst)) {
    89d0:	b25b      	sxtb	r3, r3
    89d2:	2b00      	cmp	r3, #0
    89d4:	dbfb      	blt.n	89ce <tc_init+0x14e>
					config->counter_16_bit.compare_capture_channel[0];
    89d6:	8d73      	ldrh	r3, [r6, #42]	; 0x2a
			hw->COUNT16.CC[0].reg =
    89d8:	832b      	strh	r3, [r5, #24]
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    89da:	6822      	ldr	r2, [r4, #0]
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
    89dc:	7bd3      	ldrb	r3, [r2, #15]
			while (tc_is_syncing(module_inst)) {
    89de:	b25b      	sxtb	r3, r3
    89e0:	2b00      	cmp	r3, #0
    89e2:	dbfb      	blt.n	89dc <tc_init+0x15c>
					config->counter_16_bit.compare_capture_channel[1];
    89e4:	8db3      	ldrh	r3, [r6, #44]	; 0x2c
			hw->COUNT16.CC[1].reg =
    89e6:	836b      	strh	r3, [r5, #26]
			return STATUS_OK;
    89e8:	2000      	movs	r0, #0
    89ea:	e775      	b.n	88d8 <tc_init+0x58>
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
    89ec:	a902      	add	r1, sp, #8
    89ee:	2301      	movs	r3, #1
    89f0:	708b      	strb	r3, [r1, #2]
	config->powersave    = false;
    89f2:	2200      	movs	r2, #0
    89f4:	70ca      	strb	r2, [r1, #3]
		pin_config.mux_position = config->pwm_channel[0].pin_mux;
    89f6:	7e32      	ldrb	r2, [r6, #24]
    89f8:	700a      	strb	r2, [r1, #0]
		pin_config.direction = SYSTEM_PINMUX_PIN_DIR_OUTPUT;
    89fa:	704b      	strb	r3, [r1, #1]
		system_pinmux_pin_set_config(
    89fc:	7d30      	ldrb	r0, [r6, #20]
    89fe:	4b2e      	ldr	r3, [pc, #184]	; (8ab8 <tc_init+0x238>)
    8a00:	4798      	blx	r3
    8a02:	e779      	b.n	88f8 <tc_init+0x78>
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
    8a04:	a902      	add	r1, sp, #8
    8a06:	2301      	movs	r3, #1
    8a08:	708b      	strb	r3, [r1, #2]
	config->powersave    = false;
    8a0a:	2200      	movs	r2, #0
    8a0c:	70ca      	strb	r2, [r1, #3]
		pin_config.mux_position = config->pwm_channel[1].pin_mux;
    8a0e:	3224      	adds	r2, #36	; 0x24
    8a10:	18b2      	adds	r2, r6, r2
    8a12:	7812      	ldrb	r2, [r2, #0]
    8a14:	700a      	strb	r2, [r1, #0]
		pin_config.direction = SYSTEM_PINMUX_PIN_DIR_OUTPUT;
    8a16:	704b      	strb	r3, [r1, #1]
		system_pinmux_pin_set_config(
    8a18:	331f      	adds	r3, #31
    8a1a:	18f3      	adds	r3, r6, r3
    8a1c:	7818      	ldrb	r0, [r3, #0]
    8a1e:	4b26      	ldr	r3, [pc, #152]	; (8ab8 <tc_init+0x238>)
    8a20:	4798      	blx	r3
    8a22:	e76d      	b.n	8900 <tc_init+0x80>
    8a24:	6a08      	ldr	r0, [r1, #32]
				inst_pm_apbmask[instance + 1]);
    8a26:	1c7a      	adds	r2, r7, #1
    8a28:	0052      	lsls	r2, r2, #1
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC,
    8a2a:	ab03      	add	r3, sp, #12
    8a2c:	5ad3      	ldrh	r3, [r2, r3]
    8a2e:	4303      	orrs	r3, r0
    8a30:	620b      	str	r3, [r1, #32]
    8a32:	e770      	b.n	8916 <tc_init+0x96>
    8a34:	7bd3      	ldrb	r3, [r2, #15]
			while (tc_is_syncing(module_inst)) {
    8a36:	b25b      	sxtb	r3, r3
    8a38:	2b00      	cmp	r3, #0
    8a3a:	dbfb      	blt.n	8a34 <tc_init+0x1b4>
					config->counter_8_bit.value;
    8a3c:	2328      	movs	r3, #40	; 0x28
    8a3e:	5cf3      	ldrb	r3, [r6, r3]
			hw->COUNT8.COUNT.reg =
    8a40:	742b      	strb	r3, [r5, #16]
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    8a42:	6822      	ldr	r2, [r4, #0]
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
    8a44:	7bd3      	ldrb	r3, [r2, #15]
			while (tc_is_syncing(module_inst)) {
    8a46:	b25b      	sxtb	r3, r3
    8a48:	2b00      	cmp	r3, #0
    8a4a:	dbfb      	blt.n	8a44 <tc_init+0x1c4>
					config->counter_8_bit.period;
    8a4c:	2329      	movs	r3, #41	; 0x29
    8a4e:	5cf3      	ldrb	r3, [r6, r3]
			hw->COUNT8.PER.reg =
    8a50:	752b      	strb	r3, [r5, #20]
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    8a52:	6822      	ldr	r2, [r4, #0]
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
    8a54:	7bd3      	ldrb	r3, [r2, #15]
			while (tc_is_syncing(module_inst)) {
    8a56:	b25b      	sxtb	r3, r3
    8a58:	2b00      	cmp	r3, #0
    8a5a:	dbfb      	blt.n	8a54 <tc_init+0x1d4>
					config->counter_8_bit.compare_capture_channel[0];
    8a5c:	232a      	movs	r3, #42	; 0x2a
    8a5e:	5cf3      	ldrb	r3, [r6, r3]
			hw->COUNT8.CC[0].reg =
    8a60:	762b      	strb	r3, [r5, #24]
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    8a62:	6822      	ldr	r2, [r4, #0]
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
    8a64:	7bd3      	ldrb	r3, [r2, #15]
			while (tc_is_syncing(module_inst)) {
    8a66:	b25b      	sxtb	r3, r3
    8a68:	2b00      	cmp	r3, #0
    8a6a:	dbfb      	blt.n	8a64 <tc_init+0x1e4>
					config->counter_8_bit.compare_capture_channel[1];
    8a6c:	232b      	movs	r3, #43	; 0x2b
    8a6e:	5cf3      	ldrb	r3, [r6, r3]
			hw->COUNT8.CC[1].reg =
    8a70:	766b      	strb	r3, [r5, #25]
			return STATUS_OK;
    8a72:	2000      	movs	r0, #0
    8a74:	e730      	b.n	88d8 <tc_init+0x58>
    8a76:	7bd3      	ldrb	r3, [r2, #15]
			while (tc_is_syncing(module_inst)) {
    8a78:	b25b      	sxtb	r3, r3
    8a7a:	2b00      	cmp	r3, #0
    8a7c:	dbfb      	blt.n	8a76 <tc_init+0x1f6>
				= config->counter_32_bit.value;
    8a7e:	6ab3      	ldr	r3, [r6, #40]	; 0x28
    8a80:	612b      	str	r3, [r5, #16]
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    8a82:	6822      	ldr	r2, [r4, #0]
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
    8a84:	7bd3      	ldrb	r3, [r2, #15]
			while (tc_is_syncing(module_inst)) {
    8a86:	b25b      	sxtb	r3, r3
    8a88:	2b00      	cmp	r3, #0
    8a8a:	dbfb      	blt.n	8a84 <tc_init+0x204>
			hw->COUNT32.CC[0].reg =
    8a8c:	6af3      	ldr	r3, [r6, #44]	; 0x2c
    8a8e:	61ab      	str	r3, [r5, #24]
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    8a90:	6822      	ldr	r2, [r4, #0]
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
    8a92:	7bd3      	ldrb	r3, [r2, #15]
			while (tc_is_syncing(module_inst)) {
    8a94:	b25b      	sxtb	r3, r3
    8a96:	2b00      	cmp	r3, #0
    8a98:	dbfb      	blt.n	8a92 <tc_init+0x212>
					config->counter_32_bit.compare_capture_channel[1];
    8a9a:	6b33      	ldr	r3, [r6, #48]	; 0x30
			hw->COUNT32.CC[1].reg =
    8a9c:	61eb      	str	r3, [r5, #28]
			return STATUS_OK;
    8a9e:	2000      	movs	r0, #0
    8aa0:	e71a      	b.n	88d8 <tc_init+0x58>
    8aa2:	46c0      	nop			; (mov r8, r8)
    8aa4:	00008849 	.word	0x00008849
    8aa8:	20001d98 	.word	0x20001d98
    8aac:	40000400 	.word	0x40000400
    8ab0:	00008629 	.word	0x00008629
    8ab4:	0000859d 	.word	0x0000859d
    8ab8:	00008721 	.word	0x00008721

00008abc <tc_get_count_value>:
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	Tc *const tc_module = module_inst->hw;
    8abc:	6802      	ldr	r2, [r0, #0]
    8abe:	7bd3      	ldrb	r3, [r2, #15]

	while (tc_is_syncing(module_inst)) {
    8ac0:	b25b      	sxtb	r3, r3
    8ac2:	2b00      	cmp	r3, #0
    8ac4:	dbfb      	blt.n	8abe <tc_get_count_value+0x2>
		/* Wait for sync */
	}

	/* Read from based on the TC counter size */
	switch (module_inst->counter_size) {
    8ac6:	7903      	ldrb	r3, [r0, #4]
    8ac8:	2b04      	cmp	r3, #4
    8aca:	d005      	beq.n	8ad8 <tc_get_count_value+0x1c>
    8acc:	2b08      	cmp	r3, #8
    8ace:	d009      	beq.n	8ae4 <tc_get_count_value+0x28>
		case TC_COUNTER_SIZE_32BIT:
			return tc_module->COUNT32.COUNT.reg;
	}

	Assert(false);
	return 0;
    8ad0:	2000      	movs	r0, #0
	switch (module_inst->counter_size) {
    8ad2:	2b00      	cmp	r3, #0
    8ad4:	d003      	beq.n	8ade <tc_get_count_value+0x22>
}
    8ad6:	4770      	bx	lr
			return (uint32_t)tc_module->COUNT8.COUNT.reg;
    8ad8:	7c10      	ldrb	r0, [r2, #16]
    8ada:	b2c0      	uxtb	r0, r0
    8adc:	e7fb      	b.n	8ad6 <tc_get_count_value+0x1a>
			return (uint32_t)tc_module->COUNT16.COUNT.reg;
    8ade:	8a10      	ldrh	r0, [r2, #16]
    8ae0:	b280      	uxth	r0, r0
    8ae2:	e7f8      	b.n	8ad6 <tc_get_count_value+0x1a>
			return tc_module->COUNT32.COUNT.reg;
    8ae4:	6910      	ldr	r0, [r2, #16]
    8ae6:	e7f6      	b.n	8ad6 <tc_get_count_value+0x1a>

00008ae8 <tc_set_compare_value>:
 */
enum status_code tc_set_compare_value(
		const struct tc_module *const module_inst,
		const enum tc_compare_capture_channel channel_index,
		const uint32_t compare)
{
    8ae8:	b510      	push	{r4, lr}
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	Tc *const tc_module = module_inst->hw;
    8aea:	6804      	ldr	r4, [r0, #0]
    8aec:	7be3      	ldrb	r3, [r4, #15]

	while (tc_is_syncing(module_inst)) {
    8aee:	b25b      	sxtb	r3, r3
    8af0:	2b00      	cmp	r3, #0
    8af2:	dbfb      	blt.n	8aec <tc_set_compare_value+0x4>
		/* Wait for sync */
	}

	/* Read out based on the TC counter size */
	switch (module_inst->counter_size) {
    8af4:	7903      	ldrb	r3, [r0, #4]
    8af6:	2b04      	cmp	r3, #4
    8af8:	d005      	beq.n	8b06 <tc_set_compare_value+0x1e>
    8afa:	2b08      	cmp	r3, #8
    8afc:	d014      	beq.n	8b28 <tc_set_compare_value+0x40>
						(uint32_t)compare;
				return STATUS_OK;
			}
	}

	return STATUS_ERR_INVALID_ARG;
    8afe:	2017      	movs	r0, #23
	switch (module_inst->counter_size) {
    8b00:	2b00      	cmp	r3, #0
    8b02:	d008      	beq.n	8b16 <tc_set_compare_value+0x2e>
}
    8b04:	bd10      	pop	{r4, pc}
	return STATUS_ERR_INVALID_ARG;
    8b06:	2017      	movs	r0, #23
			if (channel_index <
    8b08:	2901      	cmp	r1, #1
    8b0a:	d8fb      	bhi.n	8b04 <tc_set_compare_value+0x1c>
						(uint8_t)compare;
    8b0c:	b2d2      	uxtb	r2, r2
				tc_module->COUNT8.CC[channel_index].reg  =
    8b0e:	1861      	adds	r1, r4, r1
    8b10:	760a      	strb	r2, [r1, #24]
				return STATUS_OK;
    8b12:	2000      	movs	r0, #0
    8b14:	e7f6      	b.n	8b04 <tc_set_compare_value+0x1c>
	return STATUS_ERR_INVALID_ARG;
    8b16:	2017      	movs	r0, #23
			if (channel_index <
    8b18:	2901      	cmp	r1, #1
    8b1a:	d8f3      	bhi.n	8b04 <tc_set_compare_value+0x1c>
						(uint16_t)compare;
    8b1c:	b292      	uxth	r2, r2
				tc_module->COUNT16.CC[channel_index].reg =
    8b1e:	310c      	adds	r1, #12
    8b20:	0049      	lsls	r1, r1, #1
    8b22:	530a      	strh	r2, [r1, r4]
				return STATUS_OK;
    8b24:	2000      	movs	r0, #0
    8b26:	e7ed      	b.n	8b04 <tc_set_compare_value+0x1c>
	return STATUS_ERR_INVALID_ARG;
    8b28:	2017      	movs	r0, #23
			if (channel_index <
    8b2a:	2901      	cmp	r1, #1
    8b2c:	d8ea      	bhi.n	8b04 <tc_set_compare_value+0x1c>
				tc_module->COUNT32.CC[channel_index].reg =
    8b2e:	3106      	adds	r1, #6
    8b30:	0089      	lsls	r1, r1, #2
    8b32:	510a      	str	r2, [r1, r4]
				return STATUS_OK;
    8b34:	2000      	movs	r0, #0
    8b36:	e7e5      	b.n	8b04 <tc_set_compare_value+0x1c>

00008b38 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
    8b38:	e7fe      	b.n	8b38 <Dummy_Handler>
    8b3a:	Address 0x00008b3a is out of bounds.


00008b3c <Reset_Handler>:
{
    8b3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
        if (pSrc != pDest) {
    8b3e:	4a2a      	ldr	r2, [pc, #168]	; (8be8 <Reset_Handler+0xac>)
    8b40:	4b2a      	ldr	r3, [pc, #168]	; (8bec <Reset_Handler+0xb0>)
    8b42:	429a      	cmp	r2, r3
    8b44:	d011      	beq.n	8b6a <Reset_Handler+0x2e>
                for (; pDest < &_erelocate;) {
    8b46:	001a      	movs	r2, r3
    8b48:	4b29      	ldr	r3, [pc, #164]	; (8bf0 <Reset_Handler+0xb4>)
    8b4a:	429a      	cmp	r2, r3
    8b4c:	d20d      	bcs.n	8b6a <Reset_Handler+0x2e>
    8b4e:	4a29      	ldr	r2, [pc, #164]	; (8bf4 <Reset_Handler+0xb8>)
    8b50:	3303      	adds	r3, #3
    8b52:	1a9b      	subs	r3, r3, r2
    8b54:	089b      	lsrs	r3, r3, #2
    8b56:	3301      	adds	r3, #1
    8b58:	009b      	lsls	r3, r3, #2
    8b5a:	2200      	movs	r2, #0
                        *pDest++ = *pSrc++;
    8b5c:	4823      	ldr	r0, [pc, #140]	; (8bec <Reset_Handler+0xb0>)
    8b5e:	4922      	ldr	r1, [pc, #136]	; (8be8 <Reset_Handler+0xac>)
    8b60:	588c      	ldr	r4, [r1, r2]
    8b62:	5084      	str	r4, [r0, r2]
    8b64:	3204      	adds	r2, #4
                for (; pDest < &_erelocate;) {
    8b66:	429a      	cmp	r2, r3
    8b68:	d1fa      	bne.n	8b60 <Reset_Handler+0x24>
        for (pDest = &_szero; pDest < &_ezero;) {
    8b6a:	4a23      	ldr	r2, [pc, #140]	; (8bf8 <Reset_Handler+0xbc>)
    8b6c:	4b23      	ldr	r3, [pc, #140]	; (8bfc <Reset_Handler+0xc0>)
    8b6e:	429a      	cmp	r2, r3
    8b70:	d20a      	bcs.n	8b88 <Reset_Handler+0x4c>
    8b72:	43d3      	mvns	r3, r2
    8b74:	4921      	ldr	r1, [pc, #132]	; (8bfc <Reset_Handler+0xc0>)
    8b76:	185b      	adds	r3, r3, r1
    8b78:	2103      	movs	r1, #3
    8b7a:	438b      	bics	r3, r1
    8b7c:	3304      	adds	r3, #4
    8b7e:	189b      	adds	r3, r3, r2
                *pDest++ = 0;
    8b80:	2100      	movs	r1, #0
    8b82:	c202      	stmia	r2!, {r1}
        for (pDest = &_szero; pDest < &_ezero;) {
    8b84:	4293      	cmp	r3, r2
    8b86:	d1fc      	bne.n	8b82 <Reset_Handler+0x46>
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
    8b88:	4a1d      	ldr	r2, [pc, #116]	; (8c00 <Reset_Handler+0xc4>)
    8b8a:	21ff      	movs	r1, #255	; 0xff
    8b8c:	4b1d      	ldr	r3, [pc, #116]	; (8c04 <Reset_Handler+0xc8>)
    8b8e:	438b      	bics	r3, r1
    8b90:	6093      	str	r3, [r2, #8]
        SBMATRIX->SFR[SBMATRIX_SLAVE_HMCRAMC0].reg = 2;
    8b92:	39fd      	subs	r1, #253	; 0xfd
    8b94:	2390      	movs	r3, #144	; 0x90
    8b96:	005b      	lsls	r3, r3, #1
    8b98:	4a1b      	ldr	r2, [pc, #108]	; (8c08 <Reset_Handler+0xcc>)
    8b9a:	50d1      	str	r1, [r2, r3]
        USB->DEVICE.QOSCTRL.bit.CQOS = 2;
    8b9c:	4a1b      	ldr	r2, [pc, #108]	; (8c0c <Reset_Handler+0xd0>)
    8b9e:	78d3      	ldrb	r3, [r2, #3]
    8ba0:	2503      	movs	r5, #3
    8ba2:	43ab      	bics	r3, r5
    8ba4:	2402      	movs	r4, #2
    8ba6:	4323      	orrs	r3, r4
    8ba8:	70d3      	strb	r3, [r2, #3]
        USB->DEVICE.QOSCTRL.bit.DQOS = 2;
    8baa:	78d3      	ldrb	r3, [r2, #3]
    8bac:	270c      	movs	r7, #12
    8bae:	43bb      	bics	r3, r7
    8bb0:	2608      	movs	r6, #8
    8bb2:	4333      	orrs	r3, r6
    8bb4:	70d3      	strb	r3, [r2, #3]
        DMAC->QOSCTRL.bit.DQOS = 2;
    8bb6:	4b16      	ldr	r3, [pc, #88]	; (8c10 <Reset_Handler+0xd4>)
    8bb8:	7b98      	ldrb	r0, [r3, #14]
    8bba:	2230      	movs	r2, #48	; 0x30
    8bbc:	4390      	bics	r0, r2
    8bbe:	2220      	movs	r2, #32
    8bc0:	4310      	orrs	r0, r2
    8bc2:	7398      	strb	r0, [r3, #14]
        DMAC->QOSCTRL.bit.FQOS = 2;
    8bc4:	7b99      	ldrb	r1, [r3, #14]
    8bc6:	43b9      	bics	r1, r7
    8bc8:	4331      	orrs	r1, r6
    8bca:	7399      	strb	r1, [r3, #14]
        DMAC->QOSCTRL.bit.WRBQOS = 2;
    8bcc:	7b9a      	ldrb	r2, [r3, #14]
    8bce:	43aa      	bics	r2, r5
    8bd0:	4322      	orrs	r2, r4
    8bd2:	739a      	strb	r2, [r3, #14]
        NVMCTRL->CTRLB.bit.MANW = 1;
    8bd4:	4a0f      	ldr	r2, [pc, #60]	; (8c14 <Reset_Handler+0xd8>)
    8bd6:	6853      	ldr	r3, [r2, #4]
    8bd8:	2180      	movs	r1, #128	; 0x80
    8bda:	430b      	orrs	r3, r1
    8bdc:	6053      	str	r3, [r2, #4]
        __libc_init_array();
    8bde:	4b0e      	ldr	r3, [pc, #56]	; (8c18 <Reset_Handler+0xdc>)
    8be0:	4798      	blx	r3
        main();
    8be2:	4b0e      	ldr	r3, [pc, #56]	; (8c1c <Reset_Handler+0xe0>)
    8be4:	4798      	blx	r3
    8be6:	e7fe      	b.n	8be6 <Reset_Handler+0xaa>
    8be8:	00016960 	.word	0x00016960
    8bec:	20000000 	.word	0x20000000
    8bf0:	20000104 	.word	0x20000104
    8bf4:	20000004 	.word	0x20000004
    8bf8:	20000108 	.word	0x20000108
    8bfc:	2000291c 	.word	0x2000291c
    8c00:	e000ed00 	.word	0xe000ed00
    8c04:	00000000 	.word	0x00000000
    8c08:	41007000 	.word	0x41007000
    8c0c:	41005000 	.word	0x41005000
    8c10:	41004800 	.word	0x41004800
    8c14:	41004000 	.word	0x41004000
    8c18:	00014cd1 	.word	0x00014cd1
    8c1c:	0000d169 	.word	0x0000d169

00008c20 <_read>:
int __attribute__((weak))
_read (int file, char * ptr, int len); // Remove GCC compiler warning

int __attribute__((weak))
_read (int file, char * ptr, int len)
{
    8c20:	b5f0      	push	{r4, r5, r6, r7, lr}
    8c22:	46c6      	mov	lr, r8
    8c24:	b500      	push	{lr}
    8c26:	000c      	movs	r4, r1
    8c28:	4690      	mov	r8, r2
	int nChars = 0;

	if (file != 0) {
    8c2a:	2800      	cmp	r0, #0
    8c2c:	d10f      	bne.n	8c4e <_read+0x2e>
		return -1;
	}

	for (; len > 0; --len) {
    8c2e:	2a00      	cmp	r2, #0
    8c30:	dd11      	ble.n	8c56 <_read+0x36>
    8c32:	188f      	adds	r7, r1, r2
		ptr_get(stdio_base, ptr);
    8c34:	4e09      	ldr	r6, [pc, #36]	; (8c5c <_read+0x3c>)
    8c36:	4d0a      	ldr	r5, [pc, #40]	; (8c60 <_read+0x40>)
    8c38:	6830      	ldr	r0, [r6, #0]
    8c3a:	0021      	movs	r1, r4
    8c3c:	682b      	ldr	r3, [r5, #0]
    8c3e:	4798      	blx	r3
		ptr++;
    8c40:	3401      	adds	r4, #1
	for (; len > 0; --len) {
    8c42:	42bc      	cmp	r4, r7
    8c44:	d1f8      	bne.n	8c38 <_read+0x18>
		nChars++;
	}
	return nChars;
}
    8c46:	4640      	mov	r0, r8
    8c48:	bc04      	pop	{r2}
    8c4a:	4690      	mov	r8, r2
    8c4c:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return -1;
    8c4e:	2301      	movs	r3, #1
    8c50:	425b      	negs	r3, r3
    8c52:	4698      	mov	r8, r3
    8c54:	e7f7      	b.n	8c46 <_read+0x26>
	for (; len > 0; --len) {
    8c56:	4680      	mov	r8, r0
    8c58:	e7f5      	b.n	8c46 <_read+0x26>
    8c5a:	46c0      	nop			; (mov r8, r8)
    8c5c:	20001dac 	.word	0x20001dac
    8c60:	20001da4 	.word	0x20001da4

00008c64 <_write>:
int __attribute__((weak))
_write (int file, char * ptr, int len);

int __attribute__((weak))
_write (int file, char * ptr, int len)
{
    8c64:	b5f0      	push	{r4, r5, r6, r7, lr}
    8c66:	46c6      	mov	lr, r8
    8c68:	b500      	push	{lr}
    8c6a:	000e      	movs	r6, r1
    8c6c:	0015      	movs	r5, r2
	int nChars = 0;

	if ((file != 1) && (file != 2) && (file!=3)) {
    8c6e:	3801      	subs	r0, #1
    8c70:	2802      	cmp	r0, #2
    8c72:	d810      	bhi.n	8c96 <_write+0x32>
		return -1;
	}

	for (; len != 0; --len) {
    8c74:	2a00      	cmp	r2, #0
    8c76:	d011      	beq.n	8c9c <_write+0x38>
    8c78:	2400      	movs	r4, #0
		if (ptr_put(stdio_base, *ptr++) < 0) {
    8c7a:	4b0c      	ldr	r3, [pc, #48]	; (8cac <_write+0x48>)
    8c7c:	4698      	mov	r8, r3
    8c7e:	4f0c      	ldr	r7, [pc, #48]	; (8cb0 <_write+0x4c>)
    8c80:	4643      	mov	r3, r8
    8c82:	6818      	ldr	r0, [r3, #0]
    8c84:	5d31      	ldrb	r1, [r6, r4]
    8c86:	683b      	ldr	r3, [r7, #0]
    8c88:	4798      	blx	r3
    8c8a:	2800      	cmp	r0, #0
    8c8c:	db08      	blt.n	8ca0 <_write+0x3c>
			return -1;
		}
		++nChars;
    8c8e:	3401      	adds	r4, #1
	for (; len != 0; --len) {
    8c90:	42a5      	cmp	r5, r4
    8c92:	d1f5      	bne.n	8c80 <_write+0x1c>
    8c94:	e006      	b.n	8ca4 <_write+0x40>
		return -1;
    8c96:	2401      	movs	r4, #1
    8c98:	4264      	negs	r4, r4
    8c9a:	e003      	b.n	8ca4 <_write+0x40>
	for (; len != 0; --len) {
    8c9c:	0014      	movs	r4, r2
    8c9e:	e001      	b.n	8ca4 <_write+0x40>
			return -1;
    8ca0:	2401      	movs	r4, #1
    8ca2:	4264      	negs	r4, r4
	}
	return nChars;
}
    8ca4:	0020      	movs	r0, r4
    8ca6:	bc04      	pop	{r2}
    8ca8:	4690      	mov	r8, r2
    8caa:	bdf0      	pop	{r4, r5, r6, r7, pc}
    8cac:	20001dac 	.word	0x20001dac
    8cb0:	20001da8 	.word	0x20001da8

00008cb4 <_sbrk>:
extern void _exit(int status);
extern void _kill(int pid, int sig);
extern int _getpid(void);

extern caddr_t _sbrk(int incr)
{
    8cb4:	0003      	movs	r3, r0
	static unsigned char *heap = NULL;
	unsigned char *prev_heap;

	if (heap == NULL) {
    8cb6:	4a06      	ldr	r2, [pc, #24]	; (8cd0 <_sbrk+0x1c>)
    8cb8:	6812      	ldr	r2, [r2, #0]
    8cba:	2a00      	cmp	r2, #0
    8cbc:	d004      	beq.n	8cc8 <_sbrk+0x14>
		heap = (unsigned char *)&_end;
	}
	prev_heap = heap;
    8cbe:	4a04      	ldr	r2, [pc, #16]	; (8cd0 <_sbrk+0x1c>)
    8cc0:	6810      	ldr	r0, [r2, #0]

	heap += incr;
    8cc2:	18c3      	adds	r3, r0, r3
    8cc4:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap;
}
    8cc6:	4770      	bx	lr
		heap = (unsigned char *)&_end;
    8cc8:	4902      	ldr	r1, [pc, #8]	; (8cd4 <_sbrk+0x20>)
    8cca:	4a01      	ldr	r2, [pc, #4]	; (8cd0 <_sbrk+0x1c>)
    8ccc:	6011      	str	r1, [r2, #0]
    8cce:	e7f6      	b.n	8cbe <_sbrk+0xa>
    8cd0:	20000178 	.word	0x20000178
    8cd4:	20003720 	.word	0x20003720

00008cd8 <_close>:
}

extern int _close(int file)
{
	return -1;
}
    8cd8:	2001      	movs	r0, #1
    8cda:	4240      	negs	r0, r0
    8cdc:	4770      	bx	lr

00008cde <_fstat>:

extern int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
    8cde:	2380      	movs	r3, #128	; 0x80
    8ce0:	019b      	lsls	r3, r3, #6
    8ce2:	604b      	str	r3, [r1, #4]

	return 0;
}
    8ce4:	2000      	movs	r0, #0
    8ce6:	4770      	bx	lr

00008ce8 <_isatty>:

extern int _isatty(int file)
{
	return 1;
}
    8ce8:	2001      	movs	r0, #1
    8cea:	4770      	bx	lr

00008cec <_lseek>:

extern int _lseek(int file, int ptr, int dir)
{
	return 0;
}
    8cec:	2000      	movs	r0, #0
    8cee:	4770      	bx	lr

00008cf0 <_exit>:

extern void _exit(int status)
{
	asm("BKPT #0");
    8cf0:	be00      	bkpt	0x0000
    8cf2:	e7fe      	b.n	8cf2 <_exit+0x2>

00008cf4 <_kill>:
}

extern void _kill(int pid, int sig)
{
	return;
}
    8cf4:	4770      	bx	lr

00008cf6 <_getpid>:

extern int _getpid(void)
{
	return -1;
}
    8cf6:	2001      	movs	r0, #1
    8cf8:	4240      	negs	r0, r0
    8cfa:	4770      	bx	lr

00008cfc <usart_serial_getchar>:
 * \param[out]    c       Destination for the read character.
 */
static inline void usart_serial_getchar(
		struct usart_module *const module,
		uint8_t *c)
{
    8cfc:	b570      	push	{r4, r5, r6, lr}
    8cfe:	b082      	sub	sp, #8
    8d00:	0005      	movs	r5, r0
    8d02:	000e      	movs	r6, r1
	uint16_t temp = 0;
    8d04:	2200      	movs	r2, #0
    8d06:	466b      	mov	r3, sp
    8d08:	80da      	strh	r2, [r3, #6]

	while(STATUS_OK != usart_read_wait(module, &temp));
    8d0a:	4c06      	ldr	r4, [pc, #24]	; (8d24 <usart_serial_getchar+0x28>)
    8d0c:	466b      	mov	r3, sp
    8d0e:	1d99      	adds	r1, r3, #6
    8d10:	0028      	movs	r0, r5
    8d12:	47a0      	blx	r4
    8d14:	2800      	cmp	r0, #0
    8d16:	d1f9      	bne.n	8d0c <usart_serial_getchar+0x10>

	*c = temp;
    8d18:	466b      	mov	r3, sp
    8d1a:	3306      	adds	r3, #6
    8d1c:	881b      	ldrh	r3, [r3, #0]
    8d1e:	7033      	strb	r3, [r6, #0]
}
    8d20:	b002      	add	sp, #8
    8d22:	bd70      	pop	{r4, r5, r6, pc}
    8d24:	00007c47 	.word	0x00007c47

00008d28 <usart_serial_putchar>:
{
    8d28:	b570      	push	{r4, r5, r6, lr}
    8d2a:	0005      	movs	r5, r0
	while(STATUS_OK !=usart_write_wait(module, c));
    8d2c:	b28c      	uxth	r4, r1
    8d2e:	4e03      	ldr	r6, [pc, #12]	; (8d3c <usart_serial_putchar+0x14>)
    8d30:	0021      	movs	r1, r4
    8d32:	0028      	movs	r0, r5
    8d34:	47b0      	blx	r6
    8d36:	2800      	cmp	r0, #0
    8d38:	d1fa      	bne.n	8d30 <usart_serial_putchar+0x8>
}
    8d3a:	bd70      	pop	{r4, r5, r6, pc}
    8d3c:	00007c21 	.word	0x00007c21

00008d40 <USART_HOST_ISR_VECT>:
#if SAMD || SAMR21 || SAML21 || SAMR30 || SAMR34 || SAMR35
void USART_HOST_ISR_VECT(uint8_t instance)
#else
USART_HOST_ISR_VECT()
#endif
{
    8d40:	b510      	push	{r4, lr}
    8d42:	b082      	sub	sp, #8
static inline enum status_code usart_serial_read_packet(
		struct usart_module *const module,
		uint8_t *rx_data,
		uint16_t length)
{
	return usart_read_buffer_wait(module, rx_data, length);
    8d44:	466b      	mov	r3, sp
    8d46:	1ddc      	adds	r4, r3, #7
    8d48:	2201      	movs	r2, #1
    8d4a:	0021      	movs	r1, r4
    8d4c:	480f      	ldr	r0, [pc, #60]	; (8d8c <USART_HOST_ISR_VECT+0x4c>)
    8d4e:	4b10      	ldr	r3, [pc, #64]	; (8d90 <USART_HOST_ISR_VECT+0x50>)
    8d50:	4798      	blx	r3
  __ASM volatile ("cpsid i" : : : "memory");
    8d52:	b672      	cpsid	i
  __ASM volatile ("dmb 0xF":::"memory");
    8d54:	f3bf 8f5f 	dmb	sy
#else
    usart_serial_read_packet(USART_HOST, &temp, 1);
#endif

	/* Introducing critical section to avoid buffer corruption. */
	cpu_irq_disable();
    8d58:	2200      	movs	r2, #0
    8d5a:	4b0e      	ldr	r3, [pc, #56]	; (8d94 <USART_HOST_ISR_VECT+0x54>)
    8d5c:	701a      	strb	r2, [r3, #0]

	/* The number of data in the receive buffer is incremented and the
	 * buffer is updated. */

	serial_rx_buf[serial_rx_buf_tail] = temp;
    8d5e:	4b0e      	ldr	r3, [pc, #56]	; (8d98 <USART_HOST_ISR_VECT+0x58>)
    8d60:	781b      	ldrb	r3, [r3, #0]
    8d62:	7821      	ldrb	r1, [r4, #0]
    8d64:	4a0d      	ldr	r2, [pc, #52]	; (8d9c <USART_HOST_ISR_VECT+0x5c>)
    8d66:	54d1      	strb	r1, [r2, r3]

	if ((SERIAL_RX_BUF_SIZE_HOST - 1) == serial_rx_buf_tail) {
    8d68:	2b9b      	cmp	r3, #155	; 0x9b
    8d6a:	d00a      	beq.n	8d82 <USART_HOST_ISR_VECT+0x42>
		/* Reached the end of buffer, revert back to beginning of
		 * buffer. */
		serial_rx_buf_tail = 0x00;
	} else {
		serial_rx_buf_tail++;
    8d6c:	3301      	adds	r3, #1
    8d6e:	4a0a      	ldr	r2, [pc, #40]	; (8d98 <USART_HOST_ISR_VECT+0x58>)
    8d70:	7013      	strb	r3, [r2, #0]
	}

	cpu_irq_enable();
    8d72:	2201      	movs	r2, #1
    8d74:	4b07      	ldr	r3, [pc, #28]	; (8d94 <USART_HOST_ISR_VECT+0x54>)
    8d76:	701a      	strb	r2, [r3, #0]
    8d78:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
    8d7c:	b662      	cpsie	i
}
    8d7e:	b002      	add	sp, #8
    8d80:	bd10      	pop	{r4, pc}
		serial_rx_buf_tail = 0x00;
    8d82:	2200      	movs	r2, #0
    8d84:	4b04      	ldr	r3, [pc, #16]	; (8d98 <USART_HOST_ISR_VECT+0x58>)
    8d86:	701a      	strb	r2, [r3, #0]
    8d88:	e7f3      	b.n	8d72 <USART_HOST_ISR_VECT+0x32>
    8d8a:	46c0      	nop			; (mov r8, r8)
    8d8c:	2000017c 	.word	0x2000017c
    8d90:	00007cb1 	.word	0x00007cb1
    8d94:	20000008 	.word	0x20000008
    8d98:	2000024c 	.word	0x2000024c
    8d9c:	200001b0 	.word	0x200001b0

00008da0 <sio2host_init>:
{
    8da0:	b5f0      	push	{r4, r5, r6, r7, lr}
    8da2:	b091      	sub	sp, #68	; 0x44
{
	/* Sanity check arguments */
	Assert(config);

	/* Set default config in the config struct */
	config->data_order       = USART_DATAORDER_LSB;
    8da4:	2380      	movs	r3, #128	; 0x80
    8da6:	05db      	lsls	r3, r3, #23
    8da8:	9300      	str	r3, [sp, #0]
	config->transfer_mode    = USART_TRANSFER_ASYNCHRONOUSLY;
    8daa:	2300      	movs	r3, #0
    8dac:	9301      	str	r3, [sp, #4]
	config->parity           = USART_PARITY_NONE;
    8dae:	22ff      	movs	r2, #255	; 0xff
    8db0:	4669      	mov	r1, sp
    8db2:	810a      	strh	r2, [r1, #8]
	config->stopbits         = USART_STOPBITS_1;
    8db4:	2200      	movs	r2, #0
    8db6:	728b      	strb	r3, [r1, #10]
	config->character_size   = USART_CHARACTER_SIZE_8BIT;
    8db8:	72cb      	strb	r3, [r1, #11]
	config->baudrate         = 9600;
	config->receiver_enable  = true;
    8dba:	2401      	movs	r4, #1
    8dbc:	2124      	movs	r1, #36	; 0x24
    8dbe:	4668      	mov	r0, sp
    8dc0:	5444      	strb	r4, [r0, r1]
	config->transmitter_enable = true;
    8dc2:	3101      	adds	r1, #1
    8dc4:	5444      	strb	r4, [r0, r1]
	config->clock_polarity_inverted = false;
    8dc6:	3101      	adds	r1, #1
    8dc8:	5443      	strb	r3, [r0, r1]
	config->use_external_clock = false;
    8dca:	3101      	adds	r1, #1
    8dcc:	5443      	strb	r3, [r0, r1]
	config->ext_clock_freq   = 0;
    8dce:	930a      	str	r3, [sp, #40]	; 0x28
	config->mux_setting      = USART_RX_1_TX_2_XCK_3;
	config->run_in_standby   = false;
    8dd0:	3105      	adds	r1, #5
    8dd2:	5443      	strb	r3, [r0, r1]
	config->generator_source = GCLK_GENERATOR_0;
    8dd4:	3101      	adds	r1, #1
    8dd6:	5443      	strb	r3, [r0, r1]
	config->pinmux_pad0      = PINMUX_DEFAULT;
	config->pinmux_pad1      = PINMUX_DEFAULT;
	config->pinmux_pad2      = PINMUX_DEFAULT;
	config->pinmux_pad3      = PINMUX_DEFAULT;
#ifdef FEATURE_USART_OVER_SAMPLE
	config->sample_adjustment     = USART_SAMPLE_ADJUSTMENT_7_8_9;
    8dd8:	9305      	str	r3, [sp, #20]
	config->sample_rate           = USART_SAMPLE_RATE_16X_ARITHMETIC;
    8dda:	8203      	strh	r3, [r0, #16]
#endif
#ifdef FEATURE_USART_LIN_SLAVE
	config->lin_slave_enable      = false;
    8ddc:	76c3      	strb	r3, [r0, #27]
	config->lin_header_delay = LIN_MASTER_HEADER_DELAY_0;
	config->lin_break_length = LIN_MASTER_BREAK_LENGTH_13_BIT;
#endif

#ifdef FEATURE_USART_IMMEDIATE_BUFFER_OVERFLOW_NOTIFICATION
	config->immediate_buffer_overflow_notification  = false;
    8dde:	7602      	strb	r2, [r0, #24]
#endif
#ifdef FEATURE_USART_START_FRAME_DECTION
	config->start_frame_detection_enable            = false;
    8de0:	7702      	strb	r2, [r0, #28]
#endif
#ifdef FEATURE_USART_IRDA
	config->encoding_format_enable                  = false;
    8de2:	7642      	strb	r2, [r0, #25]
	config->receive_pulse_length                    = 19;
    8de4:	2313      	movs	r3, #19
    8de6:	7683      	strb	r3, [r0, #26]
	config->iso7816_config.inhibit_nack             = ISO7816_INHIBIT_NACK_DISABLE;
	config->iso7816_config.successive_recv_nack     = ISO7816_SUCCESSIVE_RECV_NACK_DISABLE;
	config->iso7816_config.max_iterations           = 7;
#endif
#ifdef FEATURE_USART_COLLISION_DECTION
	config->collision_detection_enable              = false;
    8de8:	7742      	strb	r2, [r0, #29]
	host_uart_config.mux_setting = HOST_SERCOM_MUX_SETTING;
    8dea:	2380      	movs	r3, #128	; 0x80
    8dec:	035b      	lsls	r3, r3, #13
    8dee:	9303      	str	r3, [sp, #12]
	host_uart_config.pinmux_pad0 = HOST_SERCOM_PINMUX_PAD0;
    8df0:	4b2f      	ldr	r3, [pc, #188]	; (8eb0 <sio2host_init+0x110>)
    8df2:	930c      	str	r3, [sp, #48]	; 0x30
	host_uart_config.pinmux_pad1 = HOST_SERCOM_PINMUX_PAD1;
    8df4:	4b2f      	ldr	r3, [pc, #188]	; (8eb4 <sio2host_init+0x114>)
    8df6:	930d      	str	r3, [sp, #52]	; 0x34
	host_uart_config.pinmux_pad2 = HOST_SERCOM_PINMUX_PAD2;
    8df8:	2301      	movs	r3, #1
    8dfa:	425b      	negs	r3, r3
    8dfc:	930e      	str	r3, [sp, #56]	; 0x38
	host_uart_config.pinmux_pad3 = HOST_SERCOM_PINMUX_PAD3;
    8dfe:	930f      	str	r3, [sp, #60]	; 0x3c
	host_uart_config.baudrate    = USART_HOST_BAUDRATE;
    8e00:	2396      	movs	r3, #150	; 0x96
    8e02:	021b      	lsls	r3, r3, #8
    8e04:	9308      	str	r3, [sp, #32]
static inline void stdio_serial_init(
		struct usart_module *const module,
		usart_inst_t const hw,
		const struct usart_config *const config)
{
	stdio_base = (void *)module;
    8e06:	4d2c      	ldr	r5, [pc, #176]	; (8eb8 <sio2host_init+0x118>)
    8e08:	4b2c      	ldr	r3, [pc, #176]	; (8ebc <sio2host_init+0x11c>)
    8e0a:	601d      	str	r5, [r3, #0]
	ptr_put = (int (*)(void volatile*,char))&usart_serial_putchar;
    8e0c:	4a2c      	ldr	r2, [pc, #176]	; (8ec0 <sio2host_init+0x120>)
    8e0e:	4b2d      	ldr	r3, [pc, #180]	; (8ec4 <sio2host_init+0x124>)
    8e10:	601a      	str	r2, [r3, #0]
	ptr_get = (void (*)(void volatile*,char*))&usart_serial_getchar;
    8e12:	4a2d      	ldr	r2, [pc, #180]	; (8ec8 <sio2host_init+0x128>)
    8e14:	4b2d      	ldr	r3, [pc, #180]	; (8ecc <sio2host_init+0x12c>)
    8e16:	601a      	str	r2, [r3, #0]
	if (usart_init(module, hw, config) == STATUS_OK) {
    8e18:	466a      	mov	r2, sp
    8e1a:	492d      	ldr	r1, [pc, #180]	; (8ed0 <sio2host_init+0x130>)
    8e1c:	0028      	movs	r0, r5
    8e1e:	4b2d      	ldr	r3, [pc, #180]	; (8ed4 <sio2host_init+0x134>)
    8e20:	4798      	blx	r3

	usart_serial_init(module, hw, config);
# if defined(__GNUC__)
	// Specify that stdout and stdin should not be buffered.
	setbuf(stdout, NULL);
    8e22:	4f2d      	ldr	r7, [pc, #180]	; (8ed8 <sio2host_init+0x138>)
    8e24:	683b      	ldr	r3, [r7, #0]
    8e26:	6898      	ldr	r0, [r3, #8]
    8e28:	2100      	movs	r1, #0
    8e2a:	4e2c      	ldr	r6, [pc, #176]	; (8edc <sio2host_init+0x13c>)
    8e2c:	47b0      	blx	r6
	setbuf(stdin, NULL);
    8e2e:	683b      	ldr	r3, [r7, #0]
    8e30:	6858      	ldr	r0, [r3, #4]
    8e32:	2100      	movs	r1, #0
    8e34:	47b0      	blx	r6
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
    8e36:	682e      	ldr	r6, [r5, #0]

#if USART_CALLBACK_MODE == true
	/* Enable Global interrupt for module */
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
    8e38:	0030      	movs	r0, r6
    8e3a:	4b29      	ldr	r3, [pc, #164]	; (8ee0 <sio2host_init+0x140>)
    8e3c:	4798      	blx	r3
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
    8e3e:	231f      	movs	r3, #31
    8e40:	4018      	ands	r0, r3
    8e42:	4084      	lsls	r4, r0
    8e44:	4b27      	ldr	r3, [pc, #156]	; (8ee4 <sio2host_init+0x144>)
    8e46:	601c      	str	r4, [r3, #0]
	SercomUsart *const usart_hw = &(module->hw->USART);
    8e48:	682a      	ldr	r2, [r5, #0]
	return (usart_hw->SYNCBUSY.reg);
    8e4a:	69d3      	ldr	r3, [r2, #28]
	while (usart_is_syncing(module)) {
    8e4c:	2b00      	cmp	r3, #0
    8e4e:	d1fc      	bne.n	8e4a <sio2host_init+0xaa>

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);

	/* Enable USART module */
	usart_hw->CTRLA.reg |= SERCOM_USART_CTRLA_ENABLE;
    8e50:	6833      	ldr	r3, [r6, #0]
    8e52:	2202      	movs	r2, #2
    8e54:	4313      	orrs	r3, r2
    8e56:	6033      	str	r3, [r6, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
    8e58:	4b17      	ldr	r3, [pc, #92]	; (8eb8 <sio2host_init+0x118>)
    8e5a:	681b      	ldr	r3, [r3, #0]
	return (usart_hw->SYNCBUSY.reg);
    8e5c:	69da      	ldr	r2, [r3, #28]
	while (usart_is_syncing(module)) {
    8e5e:	2a00      	cmp	r2, #0
    8e60:	d1fc      	bne.n	8e5c <sio2host_init+0xbc>
			module->receiver_enabled = true;
			break;

		case USART_TRANSCEIVER_TX:
			/* Enable TX */
			usart_hw->CTRLB.reg |= SERCOM_USART_CTRLB_TXEN;
    8e62:	6859      	ldr	r1, [r3, #4]
    8e64:	2280      	movs	r2, #128	; 0x80
    8e66:	0252      	lsls	r2, r2, #9
    8e68:	430a      	orrs	r2, r1
    8e6a:	605a      	str	r2, [r3, #4]
			module->transmitter_enabled = true;
    8e6c:	2101      	movs	r1, #1
    8e6e:	4a12      	ldr	r2, [pc, #72]	; (8eb8 <sio2host_init+0x118>)
    8e70:	71d1      	strb	r1, [r2, #7]
	return (usart_hw->SYNCBUSY.reg);
    8e72:	69da      	ldr	r2, [r3, #28]
	while (usart_is_syncing(module)) {
    8e74:	2a00      	cmp	r2, #0
    8e76:	d1fc      	bne.n	8e72 <sio2host_init+0xd2>
	return (usart_hw->SYNCBUSY.reg);
    8e78:	69da      	ldr	r2, [r3, #28]
	while (usart_is_syncing(module)) {
    8e7a:	2a00      	cmp	r2, #0
    8e7c:	d1fc      	bne.n	8e78 <sio2host_init+0xd8>
			usart_hw->CTRLB.reg |= SERCOM_USART_CTRLB_RXEN;
    8e7e:	6859      	ldr	r1, [r3, #4]
    8e80:	2280      	movs	r2, #128	; 0x80
    8e82:	0292      	lsls	r2, r2, #10
    8e84:	430a      	orrs	r2, r1
    8e86:	605a      	str	r2, [r3, #4]
			module->receiver_enabled = true;
    8e88:	2101      	movs	r1, #1
    8e8a:	4a0b      	ldr	r2, [pc, #44]	; (8eb8 <sio2host_init+0x118>)
    8e8c:	7191      	strb	r1, [r2, #6]
	return (usart_hw->SYNCBUSY.reg);
    8e8e:	69da      	ldr	r2, [r3, #28]
	while (usart_is_syncing(module)) {
    8e90:	2a00      	cmp	r2, #0
    8e92:	d1fc      	bne.n	8e8e <sio2host_init+0xee>
	USART_HOST_RX_ISR_ENABLE();
    8e94:	4914      	ldr	r1, [pc, #80]	; (8ee8 <sio2host_init+0x148>)
    8e96:	2000      	movs	r0, #0
    8e98:	4b14      	ldr	r3, [pc, #80]	; (8eec <sio2host_init+0x14c>)
    8e9a:	4798      	blx	r3
    8e9c:	2204      	movs	r2, #4
    8e9e:	4b0c      	ldr	r3, [pc, #48]	; (8ed0 <sio2host_init+0x130>)
    8ea0:	759a      	strb	r2, [r3, #22]
    8ea2:	32fd      	adds	r2, #253	; 0xfd
    8ea4:	32ff      	adds	r2, #255	; 0xff
    8ea6:	4b0f      	ldr	r3, [pc, #60]	; (8ee4 <sio2host_init+0x144>)
    8ea8:	601a      	str	r2, [r3, #0]
}
    8eaa:	b011      	add	sp, #68	; 0x44
    8eac:	bdf0      	pop	{r4, r5, r6, r7, pc}
    8eae:	46c0      	nop			; (mov r8, r8)
    8eb0:	00040003 	.word	0x00040003
    8eb4:	00050003 	.word	0x00050003
    8eb8:	2000017c 	.word	0x2000017c
    8ebc:	20001dac 	.word	0x20001dac
    8ec0:	00008d29 	.word	0x00008d29
    8ec4:	20001da8 	.word	0x20001da8
    8ec8:	00008cfd 	.word	0x00008cfd
    8ecc:	20001da4 	.word	0x20001da4
    8ed0:	42000800 	.word	0x42000800
    8ed4:	000078e5 	.word	0x000078e5
    8ed8:	200000a0 	.word	0x200000a0
    8edc:	000153f9 	.word	0x000153f9
    8ee0:	0000749d 	.word	0x0000749d
    8ee4:	e000e100 	.word	0xe000e100
    8ee8:	00008d41 	.word	0x00008d41
    8eec:	00007461 	.word	0x00007461

00008ef0 <CompareData>:
     Otherwise it is the start address of the buffer that contains the data to compare with
    \param numberOfBytes The number of bytes to compare
    \note offset+numberOfBytes must be <= D_NV_SECTOR_SIZE (meaning sector crossing is not permitted)
*/
static bool CompareData(uint8_t sector, uint16_t offset, uint8_t *pBuffer, D_Nv_Size_t numberOfBytes)
{
    8ef0:	b5f0      	push	{r4, r5, r6, r7, lr}
    8ef2:	46c6      	mov	lr, r8
    8ef4:	b500      	push	{lr}
    8ef6:	b084      	sub	sp, #16
    8ef8:	0014      	movs	r4, r2
    8efa:	001f      	movs	r7, r3
  uint32_t address = D_NV_MEMORY_START + (uint32_t)(sector - D_NV_FIRST_SECTOR) * D_NV_SECTOR_SIZE + offset;
    8efc:	4b29      	ldr	r3, [pc, #164]	; (8fa4 <CompareData+0xb4>)
    8efe:	18cb      	adds	r3, r1, r3
    8f00:	0340      	lsls	r0, r0, #13
    8f02:	181d      	adds	r5, r3, r0
  uint8_t  buffer[16U];

  assert(numberOfBytes);
    8f04:	2f00      	cmp	r7, #0
    8f06:	d01a      	beq.n	8f3e <CompareData+0x4e>
  assert(address <= D_NV_MEMORY_END);
    8f08:	4b27      	ldr	r3, [pc, #156]	; (8fa8 <CompareData+0xb8>)
    8f0a:	1e5a      	subs	r2, r3, #1
    8f0c:	4295      	cmp	r5, r2
    8f0e:	d81c      	bhi.n	8f4a <CompareData+0x5a>
  assert((address + numberOfBytes) <= (D_NV_MEMORY_END + 1U));
    8f10:	197a      	adds	r2, r7, r5
    8f12:	4293      	cmp	r3, r2
    8f14:	d31f      	bcc.n	8f56 <CompareData+0x66>
  assert((offset + numberOfBytes) <= D_NV_SECTOR_SIZE);
    8f16:	19c9      	adds	r1, r1, r7
    8f18:	2380      	movs	r3, #128	; 0x80
    8f1a:	019b      	lsls	r3, r3, #6
    8f1c:	4299      	cmp	r1, r3
    8f1e:	d820      	bhi.n	8f62 <CompareData+0x72>

  while(numberOfBytes)
  {
    uint16_t bytesToRead = MIN(sizeof(buffer), numberOfBytes);

    memcpy(buffer, (uint8_t FLASH_PTR *)address, bytesToRead);
    8f20:	4b22      	ldr	r3, [pc, #136]	; (8fac <CompareData+0xbc>)
    8f22:	4698      	mov	r8, r3
    uint16_t bytesToRead = MIN(sizeof(buffer), numberOfBytes);
    8f24:	1c3e      	adds	r6, r7, #0
    8f26:	2f10      	cmp	r7, #16
    8f28:	d900      	bls.n	8f2c <CompareData+0x3c>
    8f2a:	2610      	movs	r6, #16
    8f2c:	b2b6      	uxth	r6, r6
    memcpy(buffer, (uint8_t FLASH_PTR *)address, bytesToRead);
    8f2e:	0032      	movs	r2, r6
    8f30:	0029      	movs	r1, r5
    8f32:	4668      	mov	r0, sp
    8f34:	47c0      	blx	r8
    for (uint8_t i = 0U; i < bytesToRead; i++)
    8f36:	2e00      	cmp	r6, #0
    8f38:	d028      	beq.n	8f8c <CompareData+0x9c>
    8f3a:	2300      	movs	r3, #0
    8f3c:	e01f      	b.n	8f7e <CompareData+0x8e>
  assert(numberOfBytes);
    8f3e:	4b1c      	ldr	r3, [pc, #112]	; (8fb0 <CompareData+0xc0>)
    8f40:	4a1c      	ldr	r2, [pc, #112]	; (8fb4 <CompareData+0xc4>)
    8f42:	21d9      	movs	r1, #217	; 0xd9
    8f44:	481c      	ldr	r0, [pc, #112]	; (8fb8 <CompareData+0xc8>)
    8f46:	4c1d      	ldr	r4, [pc, #116]	; (8fbc <CompareData+0xcc>)
    8f48:	47a0      	blx	r4
  assert(address <= D_NV_MEMORY_END);
    8f4a:	4b1d      	ldr	r3, [pc, #116]	; (8fc0 <CompareData+0xd0>)
    8f4c:	4a19      	ldr	r2, [pc, #100]	; (8fb4 <CompareData+0xc4>)
    8f4e:	21da      	movs	r1, #218	; 0xda
    8f50:	4819      	ldr	r0, [pc, #100]	; (8fb8 <CompareData+0xc8>)
    8f52:	4c1a      	ldr	r4, [pc, #104]	; (8fbc <CompareData+0xcc>)
    8f54:	47a0      	blx	r4
  assert((address + numberOfBytes) <= (D_NV_MEMORY_END + 1U));
    8f56:	4b1b      	ldr	r3, [pc, #108]	; (8fc4 <CompareData+0xd4>)
    8f58:	4a16      	ldr	r2, [pc, #88]	; (8fb4 <CompareData+0xc4>)
    8f5a:	21db      	movs	r1, #219	; 0xdb
    8f5c:	4816      	ldr	r0, [pc, #88]	; (8fb8 <CompareData+0xc8>)
    8f5e:	4c17      	ldr	r4, [pc, #92]	; (8fbc <CompareData+0xcc>)
    8f60:	47a0      	blx	r4
  assert((offset + numberOfBytes) <= D_NV_SECTOR_SIZE);
    8f62:	4b19      	ldr	r3, [pc, #100]	; (8fc8 <CompareData+0xd8>)
    8f64:	4a13      	ldr	r2, [pc, #76]	; (8fb4 <CompareData+0xc4>)
    8f66:	21dc      	movs	r1, #220	; 0xdc
    8f68:	4813      	ldr	r0, [pc, #76]	; (8fb8 <CompareData+0xc8>)
    8f6a:	4c14      	ldr	r4, [pc, #80]	; (8fbc <CompareData+0xcc>)
    8f6c:	47a0      	blx	r4
      if (buffer[i] != ((pBuffer != NULL) ? *(pBuffer++) : 0xFF))
    8f6e:	21ff      	movs	r1, #255	; 0xff
    8f70:	4291      	cmp	r1, r2
    8f72:	d112      	bne.n	8f9a <CompareData+0xaa>
    for (uint8_t i = 0U; i < bytesToRead; i++)
    8f74:	3301      	adds	r3, #1
    8f76:	b2db      	uxtb	r3, r3
    8f78:	b29a      	uxth	r2, r3
    8f7a:	4296      	cmp	r6, r2
    8f7c:	d906      	bls.n	8f8c <CompareData+0x9c>
      if (buffer[i] != ((pBuffer != NULL) ? *(pBuffer++) : 0xFF))
    8f7e:	466a      	mov	r2, sp
    8f80:	5cd2      	ldrb	r2, [r2, r3]
    8f82:	2c00      	cmp	r4, #0
    8f84:	d0f3      	beq.n	8f6e <CompareData+0x7e>
    8f86:	7821      	ldrb	r1, [r4, #0]
    8f88:	3401      	adds	r4, #1
    8f8a:	e7f1      	b.n	8f70 <CompareData+0x80>
        return false;

    numberOfBytes -= bytesToRead;
    8f8c:	1bbf      	subs	r7, r7, r6
    8f8e:	b2bf      	uxth	r7, r7
    address += bytesToRead;
    8f90:	19ad      	adds	r5, r5, r6
  while(numberOfBytes)
    8f92:	2f00      	cmp	r7, #0
    8f94:	d1c6      	bne.n	8f24 <CompareData+0x34>
  }

  return true;
    8f96:	2001      	movs	r0, #1
    8f98:	e000      	b.n	8f9c <CompareData+0xac>
        return false;
    8f9a:	2000      	movs	r0, #0
}
    8f9c:	b004      	add	sp, #16
    8f9e:	bc04      	pop	{r2}
    8fa0:	4690      	mov	r8, r2
    8fa2:	bdf0      	pop	{r4, r5, r6, r7, pc}
    8fa4:	00002100 	.word	0x00002100
    8fa8:	00006100 	.word	0x00006100
    8fac:	00014d37 	.word	0x00014d37
    8fb0:	00016078 	.word	0x00016078
    8fb4:	000161fc 	.word	0x000161fc
    8fb8:	00016088 	.word	0x00016088
    8fbc:	00014c75 	.word	0x00014c75
    8fc0:	000160c8 	.word	0x000160c8
    8fc4:	000160e4 	.word	0x000160e4
    8fc8:	00016118 	.word	0x00016118

00008fcc <D_Nv_Init>:
{
    8fcc:	b510      	push	{r4, lr}
  assert ((D_NV_MEMORY_START % NVMCTRL_ROW_SIZE) == 0U);
    8fce:	4a0b      	ldr	r2, [pc, #44]	; (8ffc <D_Nv_Init+0x30>)
    8fd0:	23ff      	movs	r3, #255	; 0xff
    8fd2:	421a      	tst	r2, r3
    8fd4:	d106      	bne.n	8fe4 <D_Nv_Init+0x18>
  assert((D_NV_MEMORY_END - D_NV_MEMORY_START + 1U) == D_NV_MEMORY_SIZE);
    8fd6:	4b0a      	ldr	r3, [pc, #40]	; (9000 <D_Nv_Init+0x34>)
    8fd8:	490a      	ldr	r1, [pc, #40]	; (9004 <D_Nv_Init+0x38>)
    8fda:	468c      	mov	ip, r1
    8fdc:	4463      	add	r3, ip
    8fde:	4293      	cmp	r3, r2
    8fe0:	d106      	bne.n	8ff0 <D_Nv_Init+0x24>
}
    8fe2:	bd10      	pop	{r4, pc}
  assert ((D_NV_MEMORY_START % NVMCTRL_ROW_SIZE) == 0U);
    8fe4:	4b08      	ldr	r3, [pc, #32]	; (9008 <D_Nv_Init+0x3c>)
    8fe6:	4a09      	ldr	r2, [pc, #36]	; (900c <D_Nv_Init+0x40>)
    8fe8:	2159      	movs	r1, #89	; 0x59
    8fea:	4809      	ldr	r0, [pc, #36]	; (9010 <D_Nv_Init+0x44>)
    8fec:	4c09      	ldr	r4, [pc, #36]	; (9014 <D_Nv_Init+0x48>)
    8fee:	47a0      	blx	r4
  assert((D_NV_MEMORY_END - D_NV_MEMORY_START + 1U) == D_NV_MEMORY_SIZE);
    8ff0:	4b09      	ldr	r3, [pc, #36]	; (9018 <D_Nv_Init+0x4c>)
    8ff2:	4a06      	ldr	r2, [pc, #24]	; (900c <D_Nv_Init+0x40>)
    8ff4:	215d      	movs	r1, #93	; 0x5d
    8ff6:	4806      	ldr	r0, [pc, #24]	; (9010 <D_Nv_Init+0x44>)
    8ff8:	4c06      	ldr	r4, [pc, #24]	; (9014 <D_Nv_Init+0x48>)
    8ffa:	47a0      	blx	r4
    8ffc:	00002100 	.word	0x00002100
    9000:	00006100 	.word	0x00006100
    9004:	ffffc000 	.word	0xffffc000
    9008:	00016148 	.word	0x00016148
    900c:	000161b8 	.word	0x000161b8
    9010:	00016088 	.word	0x00016088
    9014:	00014c75 	.word	0x00014c75
    9018:	00016178 	.word	0x00016178

0000901c <D_Nv_Read_Impl>:
{
    901c:	b570      	push	{r4, r5, r6, lr}
    901e:	0015      	movs	r5, r2
  uint32_t address = D_NV_MEMORY_START + (uint32_t)(sector - D_NV_FIRST_SECTOR) * D_NV_SECTOR_SIZE + offset;
    9020:	0344      	lsls	r4, r0, #13
    9022:	4813      	ldr	r0, [pc, #76]	; (9070 <D_Nv_Read_Impl+0x54>)
    9024:	1808      	adds	r0, r1, r0
    9026:	1824      	adds	r4, r4, r0
  assert(address <= D_NV_MEMORY_END);
    9028:	4a12      	ldr	r2, [pc, #72]	; (9074 <D_Nv_Read_Impl+0x58>)
    902a:	1e50      	subs	r0, r2, #1
    902c:	4284      	cmp	r4, r0
    902e:	d80d      	bhi.n	904c <D_Nv_Read_Impl+0x30>
  assert((address + numberOfBytes) <= (D_NV_MEMORY_END + 1U));
    9030:	18e0      	adds	r0, r4, r3
    9032:	4282      	cmp	r2, r0
    9034:	d310      	bcc.n	9058 <D_Nv_Read_Impl+0x3c>
  assert((offset + numberOfBytes) <= D_NV_SECTOR_SIZE);
    9036:	18c9      	adds	r1, r1, r3
    9038:	2280      	movs	r2, #128	; 0x80
    903a:	0192      	lsls	r2, r2, #6
    903c:	4291      	cmp	r1, r2
    903e:	d811      	bhi.n	9064 <D_Nv_Read_Impl+0x48>
  memcpy(pBuffer, (uint8_t FLASH_PTR *)address, numberOfBytes);
    9040:	001a      	movs	r2, r3
    9042:	0021      	movs	r1, r4
    9044:	0028      	movs	r0, r5
    9046:	4b0c      	ldr	r3, [pc, #48]	; (9078 <D_Nv_Read_Impl+0x5c>)
    9048:	4798      	blx	r3
}
    904a:	bd70      	pop	{r4, r5, r6, pc}
  assert(address <= D_NV_MEMORY_END);
    904c:	4b0b      	ldr	r3, [pc, #44]	; (907c <D_Nv_Read_Impl+0x60>)
    904e:	4a0c      	ldr	r2, [pc, #48]	; (9080 <D_Nv_Read_Impl+0x64>)
    9050:	2172      	movs	r1, #114	; 0x72
    9052:	480c      	ldr	r0, [pc, #48]	; (9084 <D_Nv_Read_Impl+0x68>)
    9054:	4c0c      	ldr	r4, [pc, #48]	; (9088 <D_Nv_Read_Impl+0x6c>)
    9056:	47a0      	blx	r4
  assert((address + numberOfBytes) <= (D_NV_MEMORY_END + 1U));
    9058:	4b0c      	ldr	r3, [pc, #48]	; (908c <D_Nv_Read_Impl+0x70>)
    905a:	4a09      	ldr	r2, [pc, #36]	; (9080 <D_Nv_Read_Impl+0x64>)
    905c:	2173      	movs	r1, #115	; 0x73
    905e:	4809      	ldr	r0, [pc, #36]	; (9084 <D_Nv_Read_Impl+0x68>)
    9060:	4c09      	ldr	r4, [pc, #36]	; (9088 <D_Nv_Read_Impl+0x6c>)
    9062:	47a0      	blx	r4
  assert((offset + numberOfBytes) <= D_NV_SECTOR_SIZE);
    9064:	4b0a      	ldr	r3, [pc, #40]	; (9090 <D_Nv_Read_Impl+0x74>)
    9066:	4a06      	ldr	r2, [pc, #24]	; (9080 <D_Nv_Read_Impl+0x64>)
    9068:	2174      	movs	r1, #116	; 0x74
    906a:	4806      	ldr	r0, [pc, #24]	; (9084 <D_Nv_Read_Impl+0x68>)
    906c:	4c06      	ldr	r4, [pc, #24]	; (9088 <D_Nv_Read_Impl+0x6c>)
    906e:	47a0      	blx	r4
    9070:	00002100 	.word	0x00002100
    9074:	00006100 	.word	0x00006100
    9078:	00014d37 	.word	0x00014d37
    907c:	000160c8 	.word	0x000160c8
    9080:	000161c4 	.word	0x000161c4
    9084:	00016088 	.word	0x00016088
    9088:	00014c75 	.word	0x00014c75
    908c:	000160e4 	.word	0x000160e4
    9090:	00016118 	.word	0x00016118

00009094 <D_Nv_Write_Impl>:
{
    9094:	b5f0      	push	{r4, r5, r6, r7, lr}
    9096:	46de      	mov	lr, fp
    9098:	4657      	mov	r7, sl
    909a:	464e      	mov	r6, r9
    909c:	4645      	mov	r5, r8
    909e:	b5e0      	push	{r5, r6, r7, lr}
    90a0:	b093      	sub	sp, #76	; 0x4c
    90a2:	9201      	str	r2, [sp, #4]
    90a4:	469a      	mov	sl, r3
  uint32_t  address = D_NV_MEMORY_START + (uint32_t)(sector - D_NV_FIRST_SECTOR) * D_NV_SECTOR_SIZE + offset;
    90a6:	4c46      	ldr	r4, [pc, #280]	; (91c0 <D_Nv_Write_Impl+0x12c>)
    90a8:	190c      	adds	r4, r1, r4
    90aa:	0340      	lsls	r0, r0, #13
    90ac:	1825      	adds	r5, r4, r0
  assert(numberOfBytes);
    90ae:	2b00      	cmp	r3, #0
    90b0:	d047      	beq.n	9142 <D_Nv_Write_Impl+0xae>
  assert(address <= D_NV_MEMORY_END);
    90b2:	4b44      	ldr	r3, [pc, #272]	; (91c4 <D_Nv_Write_Impl+0x130>)
    90b4:	1e5a      	subs	r2, r3, #1
    90b6:	4295      	cmp	r5, r2
    90b8:	d849      	bhi.n	914e <D_Nv_Write_Impl+0xba>
  assert((address + numberOfBytes) <= (D_NV_MEMORY_END + 1U));
    90ba:	4652      	mov	r2, sl
    90bc:	1952      	adds	r2, r2, r5
    90be:	4293      	cmp	r3, r2
    90c0:	d34b      	bcc.n	915a <D_Nv_Write_Impl+0xc6>
  assert((offset + numberOfBytes) <= D_NV_SECTOR_SIZE);
    90c2:	46d3      	mov	fp, sl
    90c4:	4451      	add	r1, sl
    90c6:	2380      	movs	r3, #128	; 0x80
    90c8:	019b      	lsls	r3, r3, #6
    90ca:	4299      	cmp	r1, r3
    90cc:	d84b      	bhi.n	9166 <D_Nv_Write_Impl+0xd2>
  if (s_pfSystemCheckCallback != NULL)
    90ce:	4b3e      	ldr	r3, [pc, #248]	; (91c8 <D_Nv_Write_Impl+0x134>)
    90d0:	681b      	ldr	r3, [r3, #0]
    90d2:	2b00      	cmp	r3, #0
    90d4:	d000      	beq.n	90d8 <D_Nv_Write_Impl+0x44>
    s_pfSystemCheckCallback();
    90d6:	4798      	blx	r3
  pageOffset = address % NVMCTRL_PAGE_SIZE;
    90d8:	273f      	movs	r7, #63	; 0x3f
    90da:	402f      	ands	r7, r5
  pageStart = address - pageOffset;
    90dc:	1bec      	subs	r4, r5, r7
  numberOfPageBytes = MIN((NVMCTRL_PAGE_SIZE - pageOffset), numberOfBytes);
    90de:	2640      	movs	r6, #64	; 0x40
    90e0:	1bf6      	subs	r6, r6, r7
    90e2:	455e      	cmp	r6, fp
    90e4:	dd00      	ble.n	90e8 <D_Nv_Write_Impl+0x54>
    90e6:	4656      	mov	r6, sl
    90e8:	b2b3      	uxth	r3, r6
    90ea:	469b      	mov	fp, r3
  memset (page_buf, 0xFF, NVMCTRL_PAGE_SIZE);
    90ec:	2240      	movs	r2, #64	; 0x40
    90ee:	21ff      	movs	r1, #255	; 0xff
    90f0:	a802      	add	r0, sp, #8
    90f2:	4b36      	ldr	r3, [pc, #216]	; (91cc <D_Nv_Write_Impl+0x138>)
    90f4:	4798      	blx	r3
  memcpy (&page_buf[pageOffset], pBuffer, numberOfPageBytes);
    90f6:	003b      	movs	r3, r7
    90f8:	aa02      	add	r2, sp, #8
    90fa:	4694      	mov	ip, r2
    90fc:	4463      	add	r3, ip
    90fe:	9300      	str	r3, [sp, #0]
    9100:	0436      	lsls	r6, r6, #16
    9102:	0c37      	lsrs	r7, r6, #16
    9104:	003a      	movs	r2, r7
    9106:	9901      	ldr	r1, [sp, #4]
    9108:	0018      	movs	r0, r3
    910a:	4b31      	ldr	r3, [pc, #196]	; (91d0 <D_Nv_Write_Impl+0x13c>)
    910c:	4798      	blx	r3
	cpu_irq_enter_critical();
    910e:	4b31      	ldr	r3, [pc, #196]	; (91d4 <D_Nv_Write_Impl+0x140>)
    9110:	4798      	blx	r3
    error_code = nvm_write_buffer(pageStart, page_buf, NVMCTRL_PAGE_SIZE);
    9112:	4e31      	ldr	r6, [pc, #196]	; (91d8 <D_Nv_Write_Impl+0x144>)
    9114:	2240      	movs	r2, #64	; 0x40
    9116:	a902      	add	r1, sp, #8
    9118:	0020      	movs	r0, r4
    911a:	47b0      	blx	r6
  } while (error_code == STATUS_BUSY);
    911c:	2805      	cmp	r0, #5
    911e:	d0f9      	beq.n	9114 <D_Nv_Write_Impl+0x80>
	cpu_irq_leave_critical();
    9120:	4b2e      	ldr	r3, [pc, #184]	; (91dc <D_Nv_Write_Impl+0x148>)
    9122:	4798      	blx	r3
  numberOfBytes -= numberOfPageBytes;
    9124:	4653      	mov	r3, sl
    9126:	465a      	mov	r2, fp
    9128:	1a9e      	subs	r6, r3, r2
    912a:	b2b6      	uxth	r6, r6
  address += numberOfPageBytes;
    912c:	19ec      	adds	r4, r5, r7
  pBuffer += numberOfPageBytes;
    912e:	9b01      	ldr	r3, [sp, #4]
    9130:	4699      	mov	r9, r3
    9132:	44b9      	add	r9, r7
  while (0U < numberOfBytes)
    9134:	2e00      	cmp	r6, #0
    9136:	d03b      	beq.n	91b0 <D_Nv_Write_Impl+0x11c>
    memset (page_buf, 0xFF, NVMCTRL_PAGE_SIZE);
    9138:	4b24      	ldr	r3, [pc, #144]	; (91cc <D_Nv_Write_Impl+0x138>)
    913a:	469b      	mov	fp, r3
    memcpy (&page_buf[pageOffset], pBuffer, numberOfPageBytes);
    913c:	4b24      	ldr	r3, [pc, #144]	; (91d0 <D_Nv_Write_Impl+0x13c>)
    913e:	4698      	mov	r8, r3
    9140:	e031      	b.n	91a6 <D_Nv_Write_Impl+0x112>
  assert(numberOfBytes);
    9142:	4b27      	ldr	r3, [pc, #156]	; (91e0 <D_Nv_Write_Impl+0x14c>)
    9144:	4a27      	ldr	r2, [pc, #156]	; (91e4 <D_Nv_Write_Impl+0x150>)
    9146:	218a      	movs	r1, #138	; 0x8a
    9148:	4827      	ldr	r0, [pc, #156]	; (91e8 <D_Nv_Write_Impl+0x154>)
    914a:	4c28      	ldr	r4, [pc, #160]	; (91ec <D_Nv_Write_Impl+0x158>)
    914c:	47a0      	blx	r4
  assert(address <= D_NV_MEMORY_END);
    914e:	4b28      	ldr	r3, [pc, #160]	; (91f0 <D_Nv_Write_Impl+0x15c>)
    9150:	4a24      	ldr	r2, [pc, #144]	; (91e4 <D_Nv_Write_Impl+0x150>)
    9152:	218b      	movs	r1, #139	; 0x8b
    9154:	4824      	ldr	r0, [pc, #144]	; (91e8 <D_Nv_Write_Impl+0x154>)
    9156:	4c25      	ldr	r4, [pc, #148]	; (91ec <D_Nv_Write_Impl+0x158>)
    9158:	47a0      	blx	r4
  assert((address + numberOfBytes) <= (D_NV_MEMORY_END + 1U));
    915a:	4b26      	ldr	r3, [pc, #152]	; (91f4 <D_Nv_Write_Impl+0x160>)
    915c:	4a21      	ldr	r2, [pc, #132]	; (91e4 <D_Nv_Write_Impl+0x150>)
    915e:	218c      	movs	r1, #140	; 0x8c
    9160:	4821      	ldr	r0, [pc, #132]	; (91e8 <D_Nv_Write_Impl+0x154>)
    9162:	4c22      	ldr	r4, [pc, #136]	; (91ec <D_Nv_Write_Impl+0x158>)
    9164:	47a0      	blx	r4
  assert((offset + numberOfBytes) <= D_NV_SECTOR_SIZE);
    9166:	4b24      	ldr	r3, [pc, #144]	; (91f8 <D_Nv_Write_Impl+0x164>)
    9168:	4a1e      	ldr	r2, [pc, #120]	; (91e4 <D_Nv_Write_Impl+0x150>)
    916a:	218d      	movs	r1, #141	; 0x8d
    916c:	481e      	ldr	r0, [pc, #120]	; (91e8 <D_Nv_Write_Impl+0x154>)
    916e:	4c1f      	ldr	r4, [pc, #124]	; (91ec <D_Nv_Write_Impl+0x158>)
    9170:	47a0      	blx	r4
    numberOfPageBytes = MIN(NVMCTRL_PAGE_SIZE, numberOfBytes);
    9172:	b29f      	uxth	r7, r3
    memset (page_buf, 0xFF, NVMCTRL_PAGE_SIZE);
    9174:	2240      	movs	r2, #64	; 0x40
    9176:	21ff      	movs	r1, #255	; 0xff
    9178:	a802      	add	r0, sp, #8
    917a:	47d8      	blx	fp
    memcpy (&page_buf[pageOffset], pBuffer, numberOfPageBytes);
    917c:	003a      	movs	r2, r7
    917e:	4649      	mov	r1, r9
    9180:	9800      	ldr	r0, [sp, #0]
    9182:	47c0      	blx	r8
	cpu_irq_enter_critical();
    9184:	4b13      	ldr	r3, [pc, #76]	; (91d4 <D_Nv_Write_Impl+0x140>)
    9186:	4798      	blx	r3
      error_code = nvm_write_buffer(address, page_buf, NVMCTRL_PAGE_SIZE);
    9188:	4d13      	ldr	r5, [pc, #76]	; (91d8 <D_Nv_Write_Impl+0x144>)
    918a:	2240      	movs	r2, #64	; 0x40
    918c:	a902      	add	r1, sp, #8
    918e:	0020      	movs	r0, r4
    9190:	47a8      	blx	r5
    } while (error_code == STATUS_BUSY);
    9192:	2805      	cmp	r0, #5
    9194:	d0f9      	beq.n	918a <D_Nv_Write_Impl+0xf6>
	cpu_irq_leave_critical();
    9196:	4b11      	ldr	r3, [pc, #68]	; (91dc <D_Nv_Write_Impl+0x148>)
    9198:	4798      	blx	r3
    numberOfBytes -= numberOfPageBytes;
    919a:	1bf6      	subs	r6, r6, r7
    919c:	b2b6      	uxth	r6, r6
    address += numberOfPageBytes;
    919e:	19e4      	adds	r4, r4, r7
    pBuffer += numberOfPageBytes;
    91a0:	44b9      	add	r9, r7
  while (0U < numberOfBytes)
    91a2:	2e00      	cmp	r6, #0
    91a4:	d004      	beq.n	91b0 <D_Nv_Write_Impl+0x11c>
    numberOfPageBytes = MIN(NVMCTRL_PAGE_SIZE, numberOfBytes);
    91a6:	1c33      	adds	r3, r6, #0
    91a8:	2e40      	cmp	r6, #64	; 0x40
    91aa:	d9e2      	bls.n	9172 <D_Nv_Write_Impl+0xde>
    91ac:	2340      	movs	r3, #64	; 0x40
    91ae:	e7e0      	b.n	9172 <D_Nv_Write_Impl+0xde>
}
    91b0:	b013      	add	sp, #76	; 0x4c
    91b2:	bc3c      	pop	{r2, r3, r4, r5}
    91b4:	4690      	mov	r8, r2
    91b6:	4699      	mov	r9, r3
    91b8:	46a2      	mov	sl, r4
    91ba:	46ab      	mov	fp, r5
    91bc:	bdf0      	pop	{r4, r5, r6, r7, pc}
    91be:	46c0      	nop			; (mov r8, r8)
    91c0:	00002100 	.word	0x00002100
    91c4:	00006100 	.word	0x00006100
    91c8:	20000250 	.word	0x20000250
    91cc:	00014d49 	.word	0x00014d49
    91d0:	00014d37 	.word	0x00014d37
    91d4:	0000654d 	.word	0x0000654d
    91d8:	00006989 	.word	0x00006989
    91dc:	0000658d 	.word	0x0000658d
    91e0:	00016078 	.word	0x00016078
    91e4:	000161d4 	.word	0x000161d4
    91e8:	00016088 	.word	0x00016088
    91ec:	00014c75 	.word	0x00014c75
    91f0:	000160c8 	.word	0x000160c8
    91f4:	000160e4 	.word	0x000160e4
    91f8:	00016118 	.word	0x00016118

000091fc <D_Nv_EraseSector_Impl>:
{
    91fc:	b570      	push	{r4, r5, r6, lr}
  uint32_t address = D_NV_MEMORY_START + (uint32_t)(sector - D_NV_FIRST_SECTOR) * D_NV_SECTOR_SIZE;
    91fe:	0344      	lsls	r4, r0, #13
    9200:	480c      	ldr	r0, [pc, #48]	; (9234 <D_Nv_EraseSector_Impl+0x38>)
    9202:	1824      	adds	r4, r4, r0
  address &= ~(NVMCTRL_ROW_SIZE - 1);
    9204:	23ff      	movs	r3, #255	; 0xff
    9206:	439c      	bics	r4, r3
  assert(address <= D_NV_MEMORY_END);
    9208:	4b0b      	ldr	r3, [pc, #44]	; (9238 <D_Nv_EraseSector_Impl+0x3c>)
    920a:	3b01      	subs	r3, #1
    920c:	2280      	movs	r2, #128	; 0x80
    920e:	0192      	lsls	r2, r2, #6
    9210:	18a6      	adds	r6, r4, r2
    9212:	429c      	cmp	r4, r3
    9214:	d807      	bhi.n	9226 <D_Nv_EraseSector_Impl+0x2a>
    nvm_erase_row (address);
    9216:	4d09      	ldr	r5, [pc, #36]	; (923c <D_Nv_EraseSector_Impl+0x40>)
    9218:	0020      	movs	r0, r4
    921a:	47a8      	blx	r5
    address += NVMCTRL_ROW_SIZE;
    921c:	3401      	adds	r4, #1
    921e:	34ff      	adds	r4, #255	; 0xff
  for (uint8_t i = 0U; i < (D_NV_SECTOR_SIZE / NVMCTRL_ROW_SIZE); i++)
    9220:	42b4      	cmp	r4, r6
    9222:	d1f9      	bne.n	9218 <D_Nv_EraseSector_Impl+0x1c>
}
    9224:	bd70      	pop	{r4, r5, r6, pc}
  assert(address <= D_NV_MEMORY_END);
    9226:	4b06      	ldr	r3, [pc, #24]	; (9240 <D_Nv_EraseSector_Impl+0x44>)
    9228:	4a06      	ldr	r2, [pc, #24]	; (9244 <D_Nv_EraseSector_Impl+0x48>)
    922a:	21c2      	movs	r1, #194	; 0xc2
    922c:	4806      	ldr	r0, [pc, #24]	; (9248 <D_Nv_EraseSector_Impl+0x4c>)
    922e:	4c07      	ldr	r4, [pc, #28]	; (924c <D_Nv_EraseSector_Impl+0x50>)
    9230:	47a0      	blx	r4
    9232:	46c0      	nop			; (mov r8, r8)
    9234:	00002100 	.word	0x00002100
    9238:	00006100 	.word	0x00006100
    923c:	00006a31 	.word	0x00006a31
    9240:	000160c8 	.word	0x000160c8
    9244:	000161e4 	.word	0x000161e4
    9248:	00016088 	.word	0x00016088
    924c:	00014c75 	.word	0x00014c75

00009250 <D_Nv_IsEmpty_Impl>:
    \param numberOfBytes The number of bytes to check
    \returns true if the range is empty, FALSE otherwise.
    \note Sector crossing is not permitted
*/
bool D_Nv_IsEmpty(uint8_t sector, uint16_t offset, D_Nv_Size_t numberOfBytes)
{
    9250:	b510      	push	{r4, lr}
    9252:	0013      	movs	r3, r2
  return CompareData(sector, offset, NULL, numberOfBytes);
    9254:	2200      	movs	r2, #0
    9256:	4c01      	ldr	r4, [pc, #4]	; (925c <D_Nv_IsEmpty_Impl+0xc>)
    9258:	47a0      	blx	r4
}
    925a:	bd10      	pop	{r4, pc}
    925c:	00008ef1 	.word	0x00008ef1

00009260 <D_Nv_IsEqual_Impl>:
    \param[in] pBuffer The start address of the buffer that contains the data to compare with
    \param numberOfBytes The number of bytes to compare
    \note offset+numberOfBytes must be <= D_NV_SECTOR_SIZE (meaning sector crossing is not permitted)
*/
bool D_Nv_IsEqual(uint8_t sector, uint16_t offset, uint8_t *pBuffer, D_Nv_Size_t numberOfBytes)
{
    9260:	b510      	push	{r4, lr}
  return CompareData(sector, offset, pBuffer, numberOfBytes);
    9262:	4c01      	ldr	r4, [pc, #4]	; (9268 <D_Nv_IsEqual_Impl+0x8>)
    9264:	47a0      	blx	r4
}
    9266:	bd10      	pop	{r4, pc}
    9268:	00008ef1 	.word	0x00008ef1

0000926c <PowerSupplyTooLow>:
/** Check the power supply.
    \returns TRUE if the power supply is too low, FALSE when the the power
             supply is OK or when there is no callback installed.
*/
static bool PowerSupplyTooLow()
{
    926c:	b510      	push	{r4, lr}
    bool result = false;
    if ( s_powerSupplyCheckingFunction != NULL )
    926e:	4b05      	ldr	r3, [pc, #20]	; (9284 <PowerSupplyTooLow+0x18>)
    9270:	681b      	ldr	r3, [r3, #0]
    9272:	2b00      	cmp	r3, #0
    9274:	d004      	beq.n	9280 <PowerSupplyTooLow+0x14>
    {
        if ( !s_powerSupplyCheckingFunction() )
    9276:	4798      	blx	r3
    9278:	2301      	movs	r3, #1
    927a:	4058      	eors	r0, r3
    927c:	b2c0      	uxtb	r0, r0
        {
            result = true;
        }
    }
    return result;
}
    927e:	bd10      	pop	{r4, pc}
    bool result = false;
    9280:	2000      	movs	r0, #0
    9282:	e7fc      	b.n	927e <PowerSupplyTooLow+0x12>
    9284:	200003cc 	.word	0x200003cc

00009288 <UpdateSectorHead>:
*/

static void UpdateSectorHead(uint16_t increment, ItemAlignment_t itemAlignment )
{
    // Adjust the sector head according to the increment and alignment given
    switch(itemAlignment)
    9288:	2901      	cmp	r1, #1
    928a:	d009      	beq.n	92a0 <UpdateSectorHead+0x18>
    928c:	2900      	cmp	r1, #0
    928e:	d002      	beq.n	9296 <UpdateSectorHead+0xe>
    9290:	2902      	cmp	r1, #2
    9292:	d00d      	beq.n	92b0 <UpdateSectorHead+0x28>
           s_sectorHead = (s_sectorHead + increment + 0x003Fu) & 0xFFC0u;
           break;
        default:
           break;
    }
}
    9294:	4770      	bx	lr
           s_sectorHead = (s_sectorHead + increment);
    9296:	4b0a      	ldr	r3, [pc, #40]	; (92c0 <UpdateSectorHead+0x38>)
    9298:	881a      	ldrh	r2, [r3, #0]
    929a:	1880      	adds	r0, r0, r2
    929c:	8018      	strh	r0, [r3, #0]
           break;
    929e:	e7f9      	b.n	9294 <UpdateSectorHead+0xc>
           s_sectorHead = (s_sectorHead + increment + 0x000Fu) & 0xFFF0u;
    92a0:	4a07      	ldr	r2, [pc, #28]	; (92c0 <UpdateSectorHead+0x38>)
    92a2:	8813      	ldrh	r3, [r2, #0]
    92a4:	330f      	adds	r3, #15
    92a6:	18c0      	adds	r0, r0, r3
    92a8:	230f      	movs	r3, #15
    92aa:	4398      	bics	r0, r3
    92ac:	8010      	strh	r0, [r2, #0]
           break;
    92ae:	e7f1      	b.n	9294 <UpdateSectorHead+0xc>
           s_sectorHead = (s_sectorHead + increment + 0x003Fu) & 0xFFC0u;
    92b0:	4a03      	ldr	r2, [pc, #12]	; (92c0 <UpdateSectorHead+0x38>)
    92b2:	8813      	ldrh	r3, [r2, #0]
    92b4:	333f      	adds	r3, #63	; 0x3f
    92b6:	18c0      	adds	r0, r0, r3
    92b8:	233f      	movs	r3, #63	; 0x3f
    92ba:	4398      	bics	r0, r3
    92bc:	8010      	strh	r0, [r2, #0]
}
    92be:	e7e9      	b.n	9294 <UpdateSectorHead+0xc>
    92c0:	200003d2 	.word	0x200003d2

000092c4 <ComputeCrc>:
    // item not found
    return 0x0000u;
}

static uint16_t ComputeCrc(uint8_t* pData, uint16_t length, uint16_t crc)
{
    92c4:	b530      	push	{r4, r5, lr}
    for ( /* empty */ ; length != 0u; length-- )
    92c6:	2900      	cmp	r1, #0
    92c8:	d019      	beq.n	92fe <ComputeCrc+0x3a>
    {
        uint8_t x;
        uint8_t data;

        if (pData == NULL)
            data = 0xFF;
    92ca:	24ff      	movs	r4, #255	; 0xff
    92cc:	e013      	b.n	92f6 <ComputeCrc+0x32>
    92ce:	0023      	movs	r3, r4
        else
            data = *pData;

        x = (uint8_t) ((crc >> 8) ^ data);
    92d0:	0a15      	lsrs	r5, r2, #8
    92d2:	406b      	eors	r3, r5
        x = x ^ (x >> 4);
    92d4:	091d      	lsrs	r5, r3, #4
    92d6:	406b      	eors	r3, r5
        crc = (crc << 8) ^ ((uint16_t) x << 12) ^ ((uint16_t) x << 5) ^ (uint16_t) x;
    92d8:	0212      	lsls	r2, r2, #8
    92da:	405a      	eors	r2, r3
    92dc:	031d      	lsls	r5, r3, #12
    92de:	406a      	eors	r2, r5
    92e0:	015b      	lsls	r3, r3, #5
    92e2:	405a      	eors	r2, r3
    92e4:	b292      	uxth	r2, r2

        if ( pData != NULL )
          pData++;
    92e6:	0003      	movs	r3, r0
    92e8:	1e5d      	subs	r5, r3, #1
    92ea:	41ab      	sbcs	r3, r5
    92ec:	18c0      	adds	r0, r0, r3
    for ( /* empty */ ; length != 0u; length-- )
    92ee:	3901      	subs	r1, #1
    92f0:	b289      	uxth	r1, r1
    92f2:	2900      	cmp	r1, #0
    92f4:	d003      	beq.n	92fe <ComputeCrc+0x3a>
        if (pData == NULL)
    92f6:	2800      	cmp	r0, #0
    92f8:	d0e9      	beq.n	92ce <ComputeCrc+0xa>
            data = *pData;
    92fa:	7803      	ldrb	r3, [r0, #0]
    92fc:	e7e8      	b.n	92d0 <ComputeCrc+0xc>
    }

    return crc;
}
    92fe:	0010      	movs	r0, r2
    9300:	bd30      	pop	{r4, r5, pc}
    9302:	Address 0x00009302 is out of bounds.


00009304 <GatherData>:
       be copied to the flash memory \ref s_sectorHead in sector \ref s_sector.

*/

static bool GatherData(uint8_t sourceSector, uint16_t lastBlockPointer, uint16_t offset, uint16_t length, void* pData)
{
    9304:	b5f0      	push	{r4, r5, r6, r7, lr}
    9306:	46de      	mov	lr, fp
    9308:	4657      	mov	r7, sl
    930a:	b580      	push	{r7, lr}
    930c:	b089      	sub	sp, #36	; 0x24
    930e:	9001      	str	r0, [sp, #4]
    9310:	9102      	str	r1, [sp, #8]
    9312:	4693      	mov	fp, r2
    uint16_t blockStart;
    uint16_t blockEnd;
    uint16_t count;

    // prepare the correct pointer
    if ( pData != NULL )
    9314:	9a10      	ldr	r2, [sp, #64]	; 0x40
    9316:	2a00      	cmp	r2, #0
    9318:	d00d      	beq.n	9336 <GatherData+0x32>
    {
        pDestination = (uint8_t*) pData + length;
    931a:	4692      	mov	sl, r2
    931c:	449a      	add	sl, r3

    // [readStart, readEnd> is the range of data that can be read during the current
    // pass over the blocks (the range includes readStart, but not readEnd).
    // it is initialized with the requested range
    uint16_t readStart = offset;
    uint16_t readEnd = offset + length;
    931e:	445b      	add	r3, fp
    9320:	b29d      	uxth	r5, r3

    // continue until we have all the data that was requested
    while ( readStart != readEnd )
    9322:	465e      	mov	r6, fp
    9324:	9c02      	ldr	r4, [sp, #8]
            sourcePointer -= count;
            pDestination -= count;
            D_Nv_Read(sourceSector, sourcePointer, (uint8_t*)pDestination, count);
        }
    }
    return true;
    9326:	2001      	movs	r0, #1
    while ( readStart != readEnd )
    9328:	45ab      	cmp	fp, r5
    932a:	d03e      	beq.n	93aa <GatherData+0xa6>
            D_Nv_Read(sourceSector, currentBlockPointer, (uint8_t*) &blockHeader, BLOCK_HEADER_SIZE);
    932c:	4f22      	ldr	r7, [pc, #136]	; (93b8 <GatherData+0xb4>)
            if ( currentBlockPointer == 0x0000u )
    932e:	2c00      	cmp	r4, #0
    9330:	d108      	bne.n	9344 <GatherData+0x40>
                return false;
    9332:	2000      	movs	r0, #0
    9334:	e039      	b.n	93aa <GatherData+0xa6>
    uint8_t* pDestination = NULL;
    9336:	2200      	movs	r2, #0
    9338:	4692      	mov	sl, r2
    933a:	e7f0      	b.n	931e <GatherData+0x1a>
            currentBlockPointer = blockHeader.previousBlock;
    933c:	ab04      	add	r3, sp, #16
    933e:	895c      	ldrh	r4, [r3, #10]
            if ( currentBlockPointer == 0x0000u )
    9340:	2c00      	cmp	r4, #0
    9342:	d031      	beq.n	93a8 <GatherData+0xa4>
            D_Nv_Read(sourceSector, currentBlockPointer, (uint8_t*) &blockHeader, BLOCK_HEADER_SIZE);
    9344:	2310      	movs	r3, #16
    9346:	aa04      	add	r2, sp, #16
    9348:	0021      	movs	r1, r4
    934a:	9801      	ldr	r0, [sp, #4]
    934c:	47b8      	blx	r7
            blockStart = blockHeader.blockOffset;
    934e:	ab04      	add	r3, sp, #16
    9350:	889a      	ldrh	r2, [r3, #4]
            if ( (readEnd <= blockStart) || (readStart >= blockEnd) )
    9352:	42aa      	cmp	r2, r5
    9354:	d2f2      	bcs.n	933c <GatherData+0x38>
            blockEnd = blockHeader.blockOffset + blockHeader.blockLength;
    9356:	88db      	ldrh	r3, [r3, #6]
    9358:	18d3      	adds	r3, r2, r3
    935a:	b29b      	uxth	r3, r3
            if ( (readEnd <= blockStart) || (readStart >= blockEnd) )
    935c:	42b3      	cmp	r3, r6
    935e:	d9ed      	bls.n	933c <GatherData+0x38>
            else if ( readEnd > blockEnd )
    9360:	42ab      	cmp	r3, r5
    9362:	d201      	bcs.n	9368 <GatherData+0x64>
                readStart = blockEnd;
    9364:	001e      	movs	r6, r3
    9366:	e7e9      	b.n	933c <GatherData+0x38>
        uint16_t sourcePointer = (currentBlockPointer + BLOCK_HEADER_SIZE) + (readEnd - blockStart);
    9368:	1aa9      	subs	r1, r5, r2
    936a:	b289      	uxth	r1, r1
        if ( readStart < blockStart )
    936c:	42b2      	cmp	r2, r6
    936e:	d915      	bls.n	939c <GatherData+0x98>
            currentBlockPointer = blockHeader.previousBlock;
    9370:	ab04      	add	r3, sp, #16
    9372:	895b      	ldrh	r3, [r3, #10]
    9374:	9303      	str	r3, [sp, #12]
            count = readEnd - blockStart;
    9376:	000b      	movs	r3, r1
        readEnd -= count;
    9378:	1aed      	subs	r5, r5, r3
    937a:	b2ad      	uxth	r5, r5
        if ( pDestination != NULL)
    937c:	4652      	mov	r2, sl
    937e:	2a00      	cmp	r2, #0
    9380:	d008      	beq.n	9394 <GatherData+0x90>
        uint16_t sourcePointer = (currentBlockPointer + BLOCK_HEADER_SIZE) + (readEnd - blockStart);
    9382:	3410      	adds	r4, #16
    9384:	1909      	adds	r1, r1, r4
            pDestination -= count;
    9386:	1ad2      	subs	r2, r2, r3
    9388:	4692      	mov	sl, r2
            sourcePointer -= count;
    938a:	1ac9      	subs	r1, r1, r3
            D_Nv_Read(sourceSector, sourcePointer, (uint8_t*)pDestination, count);
    938c:	b289      	uxth	r1, r1
    938e:	9801      	ldr	r0, [sp, #4]
    9390:	4c09      	ldr	r4, [pc, #36]	; (93b8 <GatherData+0xb4>)
    9392:	47a0      	blx	r4
    while ( readStart != readEnd )
    9394:	42ae      	cmp	r6, r5
    9396:	d00d      	beq.n	93b4 <GatherData+0xb0>
    9398:	9c03      	ldr	r4, [sp, #12]
    939a:	e7c8      	b.n	932e <GatherData+0x2a>
            count = readEnd - readStart;
    939c:	1bab      	subs	r3, r5, r6
    939e:	b29b      	uxth	r3, r3
            readStart = offset;
    93a0:	465e      	mov	r6, fp
            currentBlockPointer = lastBlockPointer;
    93a2:	9a02      	ldr	r2, [sp, #8]
    93a4:	9203      	str	r2, [sp, #12]
    93a6:	e7e7      	b.n	9378 <GatherData+0x74>
                return false;
    93a8:	2000      	movs	r0, #0
}
    93aa:	b009      	add	sp, #36	; 0x24
    93ac:	bc0c      	pop	{r2, r3}
    93ae:	4692      	mov	sl, r2
    93b0:	469b      	mov	fp, r3
    93b2:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return true;
    93b4:	2001      	movs	r0, #1
    93b6:	e7f8      	b.n	93aa <GatherData+0xa6>
    93b8:	0000901d 	.word	0x0000901d

000093bc <ComputeDataCrc>:
{
    93bc:	b5f0      	push	{r4, r5, r6, r7, lr}
    93be:	46de      	mov	lr, fp
    93c0:	4647      	mov	r7, r8
    93c2:	b580      	push	{r7, lr}
    93c4:	b087      	sub	sp, #28
    93c6:	9004      	str	r0, [sp, #16]
    93c8:	9105      	str	r1, [sp, #20]
    length = pBlockHeader->blockLength;
    93ca:	7995      	ldrb	r5, [r2, #6]
    93cc:	79d3      	ldrb	r3, [r2, #7]
    93ce:	021b      	lsls	r3, r3, #8
    93d0:	431d      	orrs	r5, r3
    offset = pBlockHeader->blockOffset;
    93d2:	7917      	ldrb	r7, [r2, #4]
    93d4:	7953      	ldrb	r3, [r2, #5]
    93d6:	021b      	lsls	r3, r3, #8
    93d8:	431f      	orrs	r7, r3
    for(int8_t i= (length/sizeof(dataBlock)); i>=0; i--)
    93da:	0a2c      	lsrs	r4, r5, #8
    93dc:	b264      	sxtb	r4, r4
    93de:	2c00      	cmp	r4, #0
    93e0:	db2f      	blt.n	9442 <ComputeDataCrc+0x86>
    93e2:	4b1c      	ldr	r3, [pc, #112]	; (9454 <ComputeDataCrc+0x98>)
    93e4:	9303      	str	r3, [sp, #12]
            crc = ComputeCrc(((uint8_t*) &dataBlock), dataLength, crc);
    93e6:	4b1c      	ldr	r3, [pc, #112]	; (9458 <ComputeDataCrc+0x9c>)
    93e8:	4698      	mov	r8, r3
    93ea:	e011      	b.n	9410 <ComputeDataCrc+0x54>
        if (dataLength == 0)
    93ec:	2d00      	cmp	r5, #0
    93ee:	d02a      	beq.n	9446 <ComputeDataCrc+0x8a>
        if (GatherData(sourceSector, blockPointer, offset, dataLength, dataBlock))
    93f0:	4b1a      	ldr	r3, [pc, #104]	; (945c <ComputeDataCrc+0xa0>)
    93f2:	9300      	str	r3, [sp, #0]
    93f4:	002b      	movs	r3, r5
    93f6:	003a      	movs	r2, r7
    93f8:	9905      	ldr	r1, [sp, #20]
    93fa:	9804      	ldr	r0, [sp, #16]
    93fc:	4e18      	ldr	r6, [pc, #96]	; (9460 <ComputeDataCrc+0xa4>)
    93fe:	47b0      	blx	r6
    9400:	2800      	cmp	r0, #0
    9402:	d020      	beq.n	9446 <ComputeDataCrc+0x8a>
    9404:	0029      	movs	r1, r5
    9406:	e015      	b.n	9434 <ComputeDataCrc+0x78>
    9408:	3c01      	subs	r4, #1
    940a:	b264      	sxtb	r4, r4
    for(int8_t i= (length/sizeof(dataBlock)); i>=0; i--)
    940c:	1c63      	adds	r3, r4, #1
    940e:	d01a      	beq.n	9446 <ComputeDataCrc+0x8a>
        if (i)
    9410:	2c00      	cmp	r4, #0
    9412:	d0eb      	beq.n	93ec <ComputeDataCrc+0x30>
            length = length - sizeof(dataBlock);
    9414:	3d01      	subs	r5, #1
    9416:	3dff      	subs	r5, #255	; 0xff
    9418:	b2ad      	uxth	r5, r5
        if (GatherData(sourceSector, blockPointer, offset, dataLength, dataBlock))
    941a:	4b10      	ldr	r3, [pc, #64]	; (945c <ComputeDataCrc+0xa0>)
    941c:	9300      	str	r3, [sp, #0]
    941e:	2380      	movs	r3, #128	; 0x80
    9420:	005b      	lsls	r3, r3, #1
    9422:	003a      	movs	r2, r7
    9424:	9905      	ldr	r1, [sp, #20]
    9426:	9804      	ldr	r0, [sp, #16]
    9428:	4e0d      	ldr	r6, [pc, #52]	; (9460 <ComputeDataCrc+0xa4>)
    942a:	47b0      	blx	r6
    942c:	2800      	cmp	r0, #0
    942e:	d0eb      	beq.n	9408 <ComputeDataCrc+0x4c>
            dataLength = sizeof(dataBlock);
    9430:	2180      	movs	r1, #128	; 0x80
    9432:	0049      	lsls	r1, r1, #1
            offset = offset+dataLength;
    9434:	187f      	adds	r7, r7, r1
    9436:	b2bf      	uxth	r7, r7
            crc = ComputeCrc(((uint8_t*) &dataBlock), dataLength, crc);
    9438:	9a03      	ldr	r2, [sp, #12]
    943a:	4808      	ldr	r0, [pc, #32]	; (945c <ComputeDataCrc+0xa0>)
    943c:	47c0      	blx	r8
    943e:	9003      	str	r0, [sp, #12]
    9440:	e7e2      	b.n	9408 <ComputeDataCrc+0x4c>
    uint16_t crc = 0xFFFFu;
    9442:	4b04      	ldr	r3, [pc, #16]	; (9454 <ComputeDataCrc+0x98>)
    9444:	9303      	str	r3, [sp, #12]
}
    9446:	9803      	ldr	r0, [sp, #12]
    9448:	b007      	add	sp, #28
    944a:	bc0c      	pop	{r2, r3}
    944c:	4690      	mov	r8, r2
    944e:	469b      	mov	fp, r3
    9450:	bdf0      	pop	{r4, r5, r6, r7, pc}
    9452:	46c0      	nop			; (mov r8, r8)
    9454:	0000ffff 	.word	0x0000ffff
    9458:	000092c5 	.word	0x000092c5
    945c:	20000284 	.word	0x20000284
    9460:	00009305 	.word	0x00009305

00009464 <FindItemCache>:
{
    9464:	b570      	push	{r4, r5, r6, lr}
    for ( uint8_t cacheIndex = 0u; cacheIndex < s_itemCount; cacheIndex++ )
    9466:	4b16      	ldr	r3, [pc, #88]	; (94c0 <FindItemCache+0x5c>)
    9468:	781c      	ldrb	r4, [r3, #0]
    946a:	2c00      	cmp	r4, #0
    946c:	d026      	beq.n	94bc <FindItemCache+0x58>
        if ( cache->id == id )
    946e:	4b15      	ldr	r3, [pc, #84]	; (94c4 <FindItemCache+0x60>)
    9470:	881b      	ldrh	r3, [r3, #0]
    9472:	4283      	cmp	r3, r0
    9474:	d016      	beq.n	94a4 <FindItemCache+0x40>
    9476:	2301      	movs	r3, #1
    9478:	4e12      	ldr	r6, [pc, #72]	; (94c4 <FindItemCache+0x60>)
    for ( uint8_t cacheIndex = 0u; cacheIndex < s_itemCount; cacheIndex++ )
    947a:	b2da      	uxtb	r2, r3
    947c:	4294      	cmp	r4, r2
    947e:	d91b      	bls.n	94b8 <FindItemCache+0x54>
        Item_t *cache = &s_itemCache[cacheIndex];
    9480:	001d      	movs	r5, r3
        if ( cache->id == id )
    9482:	1c59      	adds	r1, r3, #1
    9484:	009a      	lsls	r2, r3, #2
    9486:	5ab2      	ldrh	r2, [r6, r2]
    9488:	4282      	cmp	r2, r0
    948a:	d001      	beq.n	9490 <FindItemCache+0x2c>
    948c:	000b      	movs	r3, r1
    948e:	e7f4      	b.n	947a <FindItemCache+0x16>
        Item_t *cache = &s_itemCache[cacheIndex];
    9490:	009b      	lsls	r3, r3, #2
    9492:	480c      	ldr	r0, [pc, #48]	; (94c4 <FindItemCache+0x60>)
    9494:	18c0      	adds	r0, r0, r3
            assert(cache->lastBlock != 0x0000);
    9496:	00ad      	lsls	r5, r5, #2
    9498:	4b0a      	ldr	r3, [pc, #40]	; (94c4 <FindItemCache+0x60>)
    949a:	195d      	adds	r5, r3, r5
    949c:	886b      	ldrh	r3, [r5, #2]
    949e:	2b00      	cmp	r3, #0
    94a0:	d003      	beq.n	94aa <FindItemCache+0x46>
}
    94a2:	bd70      	pop	{r4, r5, r6, pc}
        Item_t *cache = &s_itemCache[cacheIndex];
    94a4:	4807      	ldr	r0, [pc, #28]	; (94c4 <FindItemCache+0x60>)
    94a6:	2500      	movs	r5, #0
    94a8:	e7f5      	b.n	9496 <FindItemCache+0x32>
            assert(cache->lastBlock != 0x0000);
    94aa:	4b07      	ldr	r3, [pc, #28]	; (94c8 <FindItemCache+0x64>)
    94ac:	4a07      	ldr	r2, [pc, #28]	; (94cc <FindItemCache+0x68>)
    94ae:	218c      	movs	r1, #140	; 0x8c
    94b0:	31ff      	adds	r1, #255	; 0xff
    94b2:	4807      	ldr	r0, [pc, #28]	; (94d0 <FindItemCache+0x6c>)
    94b4:	4c07      	ldr	r4, [pc, #28]	; (94d4 <FindItemCache+0x70>)
    94b6:	47a0      	blx	r4
    return NULL;
    94b8:	2000      	movs	r0, #0
    94ba:	e7f2      	b.n	94a2 <FindItemCache+0x3e>
    94bc:	2000      	movs	r0, #0
    94be:	e7f0      	b.n	94a2 <FindItemCache+0x3e>
    94c0:	200003c8 	.word	0x200003c8
    94c4:	200003a0 	.word	0x200003a0
    94c8:	00016278 	.word	0x00016278
    94cc:	00016360 	.word	0x00016360
    94d0:	00016294 	.word	0x00016294
    94d4:	00014c75 	.word	0x00014c75

000094d8 <FindItem>:
{
    94d8:	b510      	push	{r4, lr}
    Item_t *cache = FindItemCache(id);
    94da:	4b05      	ldr	r3, [pc, #20]	; (94f0 <FindItem+0x18>)
    94dc:	4798      	blx	r3
    if (cache)
    94de:	2800      	cmp	r0, #0
    94e0:	d004      	beq.n	94ec <FindItem+0x14>
        return cache->lastBlock;
    94e2:	7883      	ldrb	r3, [r0, #2]
    94e4:	78c0      	ldrb	r0, [r0, #3]
    94e6:	0200      	lsls	r0, r0, #8
    94e8:	4318      	orrs	r0, r3
}
    94ea:	bd10      	pop	{r4, pc}
    return 0x0000u;
    94ec:	2000      	movs	r0, #0
    94ee:	e7fc      	b.n	94ea <FindItem+0x12>
    94f0:	00009465 	.word	0x00009465

000094f4 <CreateItemCache>:
{
    94f4:	b510      	push	{r4, lr}
    94f6:	0004      	movs	r4, r0
    assert(FindItemCache(id) == NULL);
    94f8:	4b0e      	ldr	r3, [pc, #56]	; (9534 <CreateItemCache+0x40>)
    94fa:	4798      	blx	r3
    94fc:	2800      	cmp	r0, #0
    94fe:	d10b      	bne.n	9518 <CreateItemCache+0x24>
    assert(s_itemCount < MAX_ITEM_COUNT);
    9500:	4b0d      	ldr	r3, [pc, #52]	; (9538 <CreateItemCache+0x44>)
    9502:	781b      	ldrb	r3, [r3, #0]
    9504:	2b09      	cmp	r3, #9
    9506:	d80e      	bhi.n	9526 <CreateItemCache+0x32>
    Item_t *cache = &s_itemCache[s_itemCount++];
    9508:	1c59      	adds	r1, r3, #1
    950a:	4a0b      	ldr	r2, [pc, #44]	; (9538 <CreateItemCache+0x44>)
    950c:	7011      	strb	r1, [r2, #0]
    cache->id = id;
    950e:	480b      	ldr	r0, [pc, #44]	; (953c <CreateItemCache+0x48>)
    9510:	009b      	lsls	r3, r3, #2
    9512:	521c      	strh	r4, [r3, r0]
    Item_t *cache = &s_itemCache[s_itemCount++];
    9514:	18c0      	adds	r0, r0, r3
}
    9516:	bd10      	pop	{r4, pc}
    assert(FindItemCache(id) == NULL);
    9518:	4b09      	ldr	r3, [pc, #36]	; (9540 <CreateItemCache+0x4c>)
    951a:	4a0a      	ldr	r2, [pc, #40]	; (9544 <CreateItemCache+0x50>)
    951c:	21cc      	movs	r1, #204	; 0xcc
    951e:	0049      	lsls	r1, r1, #1
    9520:	4809      	ldr	r0, [pc, #36]	; (9548 <CreateItemCache+0x54>)
    9522:	4c0a      	ldr	r4, [pc, #40]	; (954c <CreateItemCache+0x58>)
    9524:	47a0      	blx	r4
    assert(s_itemCount < MAX_ITEM_COUNT);
    9526:	4b0a      	ldr	r3, [pc, #40]	; (9550 <CreateItemCache+0x5c>)
    9528:	4a06      	ldr	r2, [pc, #24]	; (9544 <CreateItemCache+0x50>)
    952a:	219a      	movs	r1, #154	; 0x9a
    952c:	31ff      	adds	r1, #255	; 0xff
    952e:	4806      	ldr	r0, [pc, #24]	; (9548 <CreateItemCache+0x54>)
    9530:	4c06      	ldr	r4, [pc, #24]	; (954c <CreateItemCache+0x58>)
    9532:	47a0      	blx	r4
    9534:	00009465 	.word	0x00009465
    9538:	200003c8 	.word	0x200003c8
    953c:	200003a0 	.word	0x200003a0
    9540:	00016220 	.word	0x00016220
    9544:	00016370 	.word	0x00016370
    9548:	00016294 	.word	0x00016294
    954c:	00014c75 	.word	0x00014c75
    9550:	0001623c 	.word	0x0001623c

00009554 <DeleteItemCache>:
{
    9554:	b510      	push	{r4, lr}
    assert(FindItemCache(id) != NULL);
    9556:	4b0b      	ldr	r3, [pc, #44]	; (9584 <DeleteItemCache+0x30>)
    9558:	4798      	blx	r3
    955a:	2800      	cmp	r0, #0
    955c:	d00b      	beq.n	9576 <DeleteItemCache+0x22>
    *cache = s_itemCache[--s_itemCount];
    955e:	4b0a      	ldr	r3, [pc, #40]	; (9588 <DeleteItemCache+0x34>)
    9560:	7819      	ldrb	r1, [r3, #0]
    9562:	3901      	subs	r1, #1
    9564:	b2c9      	uxtb	r1, r1
    9566:	7019      	strb	r1, [r3, #0]
    9568:	0089      	lsls	r1, r1, #2
    956a:	4b08      	ldr	r3, [pc, #32]	; (958c <DeleteItemCache+0x38>)
    956c:	1859      	adds	r1, r3, r1
    956e:	2204      	movs	r2, #4
    9570:	4b07      	ldr	r3, [pc, #28]	; (9590 <DeleteItemCache+0x3c>)
    9572:	4798      	blx	r3
}
    9574:	bd10      	pop	{r4, pc}
    assert(FindItemCache(id) != NULL);
    9576:	4b07      	ldr	r3, [pc, #28]	; (9594 <DeleteItemCache+0x40>)
    9578:	4a07      	ldr	r2, [pc, #28]	; (9598 <DeleteItemCache+0x44>)
    957a:	21d3      	movs	r1, #211	; 0xd3
    957c:	0049      	lsls	r1, r1, #1
    957e:	4807      	ldr	r0, [pc, #28]	; (959c <DeleteItemCache+0x48>)
    9580:	4c07      	ldr	r4, [pc, #28]	; (95a0 <DeleteItemCache+0x4c>)
    9582:	47a0      	blx	r4
    9584:	00009465 	.word	0x00009465
    9588:	200003c8 	.word	0x200003c8
    958c:	200003a0 	.word	0x200003a0
    9590:	00014d37 	.word	0x00014d37
    9594:	0001625c 	.word	0x0001625c
    9598:	00016380 	.word	0x00016380
    959c:	00016294 	.word	0x00016294
    95a0:	00014c75 	.word	0x00014c75

000095a4 <eraseSectorTimerFired>:
{
    95a4:	b510      	push	{r4, lr}
    if (!PowerSupplyTooLow())
    95a6:	4b05      	ldr	r3, [pc, #20]	; (95bc <eraseSectorTimerFired+0x18>)
    95a8:	4798      	blx	r3
    95aa:	2800      	cmp	r0, #0
    95ac:	d000      	beq.n	95b0 <eraseSectorTimerFired+0xc>
}
    95ae:	bd10      	pop	{r4, pc}
        D_Nv_EraseSector(s_sectorToErase);
    95b0:	4b03      	ldr	r3, [pc, #12]	; (95c0 <eraseSectorTimerFired+0x1c>)
    95b2:	7818      	ldrb	r0, [r3, #0]
    95b4:	4b03      	ldr	r3, [pc, #12]	; (95c4 <eraseSectorTimerFired+0x20>)
    95b6:	4798      	blx	r3
}
    95b8:	e7f9      	b.n	95ae <eraseSectorTimerFired+0xa>
    95ba:	46c0      	nop			; (mov r8, r8)
    95bc:	0000926d 	.word	0x0000926d
    95c0:	20000009 	.word	0x20000009
    95c4:	000091fd 	.word	0x000091fd

000095c8 <EraseSector>:

static bool EraseSector(void)
{
    95c8:	b510      	push	{r4, lr}
    // Erase the sector
    D_Nv_EraseSector(s_sector);
    95ca:	4c08      	ldr	r4, [pc, #32]	; (95ec <EraseSector+0x24>)
    95cc:	7820      	ldrb	r0, [r4, #0]
    95ce:	4b08      	ldr	r3, [pc, #32]	; (95f0 <EraseSector+0x28>)
    95d0:	4798      	blx	r3
    // check if the erase succeeded
    if ( !D_Nv_IsEmpty(s_sector, 0u, SECTOR_SIZE) )
    95d2:	7820      	ldrb	r0, [r4, #0]
    95d4:	2280      	movs	r2, #128	; 0x80
    95d6:	0192      	lsls	r2, r2, #6
    95d8:	2100      	movs	r1, #0
    95da:	4b06      	ldr	r3, [pc, #24]	; (95f4 <EraseSector+0x2c>)
    95dc:	4798      	blx	r3
    95de:	2800      	cmp	r0, #0
    95e0:	d003      	beq.n	95ea <EraseSector+0x22>
    {
        return false;
    }
    s_sectorHead =  ITEMS_AREA_START_ADDRESS;
    95e2:	2280      	movs	r2, #128	; 0x80
    95e4:	0052      	lsls	r2, r2, #1
    95e6:	4b04      	ldr	r3, [pc, #16]	; (95f8 <EraseSector+0x30>)
    95e8:	801a      	strh	r2, [r3, #0]

    return true;
}
    95ea:	bd10      	pop	{r4, pc}
    95ec:	200003d0 	.word	0x200003d0
    95f0:	000091fd 	.word	0x000091fd
    95f4:	00009251 	.word	0x00009251
    95f8:	200003d2 	.word	0x200003d2

000095fc <WriteAndCheck>:
{
    95fc:	b5f0      	push	{r4, r5, r6, r7, lr}
    95fe:	b083      	sub	sp, #12
    9600:	9001      	str	r0, [sp, #4]
    9602:	000d      	movs	r5, r1
    9604:	0016      	movs	r6, r2
    D_Nv_Write(s_sector, offset, pData, length);
    9606:	4f07      	ldr	r7, [pc, #28]	; (9624 <WriteAndCheck+0x28>)
    9608:	7838      	ldrb	r0, [r7, #0]
    960a:	0013      	movs	r3, r2
    960c:	000a      	movs	r2, r1
    960e:	9901      	ldr	r1, [sp, #4]
    9610:	4c05      	ldr	r4, [pc, #20]	; (9628 <WriteAndCheck+0x2c>)
    9612:	47a0      	blx	r4
    return D_Nv_IsEqual(s_sector, offset, pData, length);
    9614:	7838      	ldrb	r0, [r7, #0]
    9616:	0033      	movs	r3, r6
    9618:	002a      	movs	r2, r5
    961a:	9901      	ldr	r1, [sp, #4]
    961c:	4c03      	ldr	r4, [pc, #12]	; (962c <WriteAndCheck+0x30>)
    961e:	47a0      	blx	r4
}
    9620:	b003      	add	sp, #12
    9622:	bdf0      	pop	{r4, r5, r6, r7, pc}
    9624:	200003d0 	.word	0x200003d0
    9628:	00009095 	.word	0x00009095
    962c:	00009261 	.word	0x00009261

00009630 <WriteSectorHeader>:

static bool WriteSectorHeader(uint32_t sequenceNumber)
{
    9630:	b510      	push	{r4, lr}
    9632:	b086      	sub	sp, #24
    // write sector header
    SectorHeader_t sectorHeader;
    sectorHeader.signature[0] = (uint8_t) 'A';
    9634:	ac01      	add	r4, sp, #4
    9636:	2341      	movs	r3, #65	; 0x41
    9638:	70a3      	strb	r3, [r4, #2]
    sectorHeader.signature[1] = (uint8_t) 'T';
    963a:	3313      	adds	r3, #19
    963c:	70e3      	strb	r3, [r4, #3]
    sectorHeader.signature[2] = (uint8_t) 'S';
    963e:	3b01      	subs	r3, #1
    9640:	7123      	strb	r3, [r4, #4]
    sectorHeader.signature[3] = (uint8_t) 'N';
    9642:	3b05      	subs	r3, #5
    9644:	7163      	strb	r3, [r4, #5]
    sectorHeader.signature[4] = (uint8_t) 'v';
    9646:	3328      	adds	r3, #40	; 0x28
    9648:	71a3      	strb	r3, [r4, #6]
    sectorHeader.signature[5] = (uint8_t) '2';
    964a:	3b44      	subs	r3, #68	; 0x44
    964c:	71e3      	strb	r3, [r4, #7]
    sectorHeader.sequenceNumber = sequenceNumber;
    964e:	9003      	str	r0, [sp, #12]
    sectorHeader.sequenceParity = sequenceNumber ^ 0xFFFFFFFFuL;
    9650:	43c0      	mvns	r0, r0
    9652:	9004      	str	r0, [sp, #16]
    sectorHeader.nextPageAddressAfterCompact = s_nextPageAddressAfterCompact;
    9654:	4b08      	ldr	r3, [pc, #32]	; (9678 <WriteSectorHeader+0x48>)
    9656:	881b      	ldrh	r3, [r3, #0]
    9658:	8223      	strh	r3, [r4, #16]
    return ComputeCrc(((uint8_t*) pSectorHeader) + sizeof(pSectorHeader->headerCrc), (sizeof(SectorHeader_t)- sizeof(pSectorHeader->headerCrc)), 0xFFFFu); // skip headerCrc field
    965a:	4a08      	ldr	r2, [pc, #32]	; (967c <WriteSectorHeader+0x4c>)
    965c:	2110      	movs	r1, #16
    965e:	466b      	mov	r3, sp
    9660:	1d98      	adds	r0, r3, #6
    9662:	4b07      	ldr	r3, [pc, #28]	; (9680 <WriteSectorHeader+0x50>)
    9664:	4798      	blx	r3
    sectorHeader.headerCrc = ComputeSectorHeaderCrc(&sectorHeader);
    9666:	8020      	strh	r0, [r4, #0]
    if ( !WriteAndCheck(0u, (uint8_t*) &sectorHeader, SECTOR_HEADER_SIZE) )
    9668:	2212      	movs	r2, #18
    966a:	0021      	movs	r1, r4
    966c:	2000      	movs	r0, #0
    966e:	4b05      	ldr	r3, [pc, #20]	; (9684 <WriteSectorHeader+0x54>)
    9670:	4798      	blx	r3
    {
        return false;
    }
    return true;
}
    9672:	b006      	add	sp, #24
    9674:	bd10      	pop	{r4, pc}
    9676:	46c0      	nop			; (mov r8, r8)
    9678:	200003ca 	.word	0x200003ca
    967c:	0000ffff 	.word	0x0000ffff
    9680:	000092c5 	.word	0x000092c5
    9684:	000095fd 	.word	0x000095fd

00009688 <SmartCompacting>:
 * without following any alignements as normal item updates.Items are filled into
  256 byte buffer(= row size), committed in shot which takes 4 page writs maximum
 */

static bool SmartCompacting(uint8_t* compactBlock, uint16_t curItemLength)
{
    9688:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    968a:	0004      	movs	r4, r0
    968c:	000d      	movs	r5, r1
    //manupulate the current compact length
    currentCompactLength += curItemLength;
    968e:	4a21      	ldr	r2, [pc, #132]	; (9714 <SmartCompacting+0x8c>)
    9690:	8813      	ldrh	r3, [r2, #0]
    9692:	18cb      	adds	r3, r1, r3
    9694:	b29b      	uxth	r3, r3
    9696:	8013      	strh	r3, [r2, #0]

    // if the complete buffer cannot be filled with the current item
    if ( currentCompactLength < ROW_SIZE)
    9698:	2bff      	cmp	r3, #255	; 0xff
    969a:	d92e      	bls.n	96fa <SmartCompacting+0x72>
    else  //(currentCompactLength >= ROW_SIZE) cases
    {
        uint16_t dataBlockOffset = 0;


        memcpy(compactBlock + compactBlockOffset, dataBlock, (ROW_SIZE - compactBlockOffset));
    969c:	4b1e      	ldr	r3, [pc, #120]	; (9718 <SmartCompacting+0x90>)
    969e:	881a      	ldrh	r2, [r3, #0]
    96a0:	1880      	adds	r0, r0, r2
    96a2:	2580      	movs	r5, #128	; 0x80
    96a4:	006d      	lsls	r5, r5, #1
    96a6:	1aaa      	subs	r2, r5, r2
    96a8:	491c      	ldr	r1, [pc, #112]	; (971c <SmartCompacting+0x94>)
    96aa:	4b1d      	ldr	r3, [pc, #116]	; (9720 <SmartCompacting+0x98>)
    96ac:	4798      	blx	r3
        if ( !WriteAndCheck(s_sectorHead, compactBlock, ROW_SIZE ))
    96ae:	4b1d      	ldr	r3, [pc, #116]	; (9724 <SmartCompacting+0x9c>)
    96b0:	8818      	ldrh	r0, [r3, #0]
    96b2:	002a      	movs	r2, r5
    96b4:	0021      	movs	r1, r4
    96b6:	4b1c      	ldr	r3, [pc, #112]	; (9728 <SmartCompacting+0xa0>)
    96b8:	4798      	blx	r3
    96ba:	1e05      	subs	r5, r0, #0
    96bc:	d027      	beq.n	970e <SmartCompacting+0x86>
        {
            return false;
        }
        UpdateSectorHead(ROW_SIZE, ITEM_NO_ALIGNMENT);
    96be:	2100      	movs	r1, #0
    96c0:	2080      	movs	r0, #128	; 0x80
    96c2:	0040      	lsls	r0, r0, #1
    96c4:	4b19      	ldr	r3, [pc, #100]	; (972c <SmartCompacting+0xa4>)
    96c6:	4798      	blx	r3
        dataBlockOffset += (ROW_SIZE - compactBlockOffset);
    96c8:	4b13      	ldr	r3, [pc, #76]	; (9718 <SmartCompacting+0x90>)
    96ca:	8818      	ldrh	r0, [r3, #0]
        compactBlockOffset = 0;
    96cc:	2200      	movs	r2, #0
    96ce:	801a      	strh	r2, [r3, #0]
        currentCompactLength -= ROW_SIZE;
    96d0:	4b10      	ldr	r3, [pc, #64]	; (9714 <SmartCompacting+0x8c>)
    96d2:	881e      	ldrh	r6, [r3, #0]
    96d4:	3e01      	subs	r6, #1
    96d6:	3eff      	subs	r6, #255	; 0xff
    96d8:	b2b6      	uxth	r6, r6
    96da:	801e      	strh	r6, [r3, #0]
        if (currentCompactLength)
    96dc:	2e00      	cmp	r6, #0
    96de:	d016      	beq.n	970e <SmartCompacting+0x86>
        dataBlockOffset += (ROW_SIZE - compactBlockOffset);
    96e0:	2180      	movs	r1, #128	; 0x80
    96e2:	0049      	lsls	r1, r1, #1
    96e4:	1a09      	subs	r1, r1, r0
        {
            memcpy(compactBlock, dataBlock + dataBlockOffset, currentCompactLength);
    96e6:	b289      	uxth	r1, r1
    96e8:	4b0c      	ldr	r3, [pc, #48]	; (971c <SmartCompacting+0x94>)
    96ea:	1859      	adds	r1, r3, r1
    96ec:	0032      	movs	r2, r6
    96ee:	0020      	movs	r0, r4
    96f0:	4b0b      	ldr	r3, [pc, #44]	; (9720 <SmartCompacting+0x98>)
    96f2:	4798      	blx	r3
            compactBlockOffset = currentCompactLength;
    96f4:	4b08      	ldr	r3, [pc, #32]	; (9718 <SmartCompacting+0x90>)
    96f6:	801e      	strh	r6, [r3, #0]
    96f8:	e009      	b.n	970e <SmartCompacting+0x86>
        memcpy(compactBlock + compactBlockOffset, dataBlock, curItemLength);
    96fa:	4e07      	ldr	r6, [pc, #28]	; (9718 <SmartCompacting+0x90>)
    96fc:	8837      	ldrh	r7, [r6, #0]
    96fe:	19c0      	adds	r0, r0, r7
    9700:	000a      	movs	r2, r1
    9702:	4906      	ldr	r1, [pc, #24]	; (971c <SmartCompacting+0x94>)
    9704:	4b06      	ldr	r3, [pc, #24]	; (9720 <SmartCompacting+0x98>)
    9706:	4798      	blx	r3
        compactBlockOffset += curItemLength;
    9708:	19ed      	adds	r5, r5, r7
    970a:	8035      	strh	r5, [r6, #0]
        return true;
    970c:	2501      	movs	r5, #1
        }
    }

    return true;

}
    970e:	0028      	movs	r0, r5
    9710:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    9712:	46c0      	nop			; (mov r8, r8)
    9714:	20000280 	.word	0x20000280
    9718:	20000254 	.word	0x20000254
    971c:	20000284 	.word	0x20000284
    9720:	00014d37 	.word	0x00014d37
    9724:	200003d2 	.word	0x200003d2
    9728:	000095fd 	.word	0x000095fd
    972c:	00009289 	.word	0x00009289

00009730 <CompactSector>:
 * This is because the itemCache, sector head and sector selector will
 * be messed up.
 */

static bool CompactSector(void)
{
    9730:	b5f0      	push	{r4, r5, r6, r7, lr}
    9732:	46de      	mov	lr, fp
    9734:	4657      	mov	r7, sl
    9736:	464e      	mov	r6, r9
    9738:	4645      	mov	r5, r8
    973a:	b5e0      	push	{r5, r6, r7, lr}
    973c:	b0d5      	sub	sp, #340	; 0x154
    PRINTA(("CompactSector(s=%X)", s_sector));
#endif
    uint8_t compactBlock[ROW_SIZE];

    // stop timer for preemptive compact sector as this will not be needed any more
    SYS_TimerStop(&compactSectorTimer);
    973e:	487b      	ldr	r0, [pc, #492]	; (992c <CompactSector+0x1fc>)
    9740:	4b7b      	ldr	r3, [pc, #492]	; (9930 <CompactSector+0x200>)
    9742:	4798      	blx	r3

    // stop the compact item as a compact sector will compact all items
    s_compactItemId = 0u;
    9744:	2300      	movs	r3, #0
    9746:	4a7b      	ldr	r2, [pc, #492]	; (9934 <CompactSector+0x204>)
    9748:	8013      	strh	r3, [r2, #0]
    s_compactItemLength = 0u;
    974a:	4a7b      	ldr	r2, [pc, #492]	; (9938 <CompactSector+0x208>)
    974c:	8013      	strh	r3, [r2, #0]

    compactBlockOffset = 0;
    974e:	4a7b      	ldr	r2, [pc, #492]	; (993c <CompactSector+0x20c>)
    9750:	8013      	strh	r3, [r2, #0]
    currentCompactLength = 0;
    9752:	4a7b      	ldr	r2, [pc, #492]	; (9940 <CompactSector+0x210>)
    9754:	8013      	strh	r3, [r2, #0]

    uint8_t sourceSector = s_sector;
    9756:	4b7b      	ldr	r3, [pc, #492]	; (9944 <CompactSector+0x214>)
    9758:	781b      	ldrb	r3, [r3, #0]
    975a:	001f      	movs	r7, r3
    975c:	9303      	str	r3, [sp, #12]

    // get the sector header for the source sector
    SectorHeader_t sectorHeader;
    D_Nv_Read(sourceSector, 0u, (uint8_t*) &sectorHeader, SECTOR_HEADER_SIZE);
    975e:	2312      	movs	r3, #18
    9760:	aa0f      	add	r2, sp, #60	; 0x3c
    9762:	2100      	movs	r1, #0
    9764:	0038      	movs	r0, r7
    9766:	4c78      	ldr	r4, [pc, #480]	; (9948 <CompactSector+0x218>)
    9768:	47a0      	blx	r4

    uint32_t nextSequenceNumber = sectorHeader.sequenceNumber - 1uL;
    976a:	9b11      	ldr	r3, [sp, #68]	; 0x44
    976c:	9309      	str	r3, [sp, #36]	; 0x24

    // find and prepare a destination sector
    do
    {
        s_sector++;
    976e:	4c75      	ldr	r4, [pc, #468]	; (9944 <CompactSector+0x214>)
        if ( s_sector >= (FIRST_SECTOR + SECTOR_COUNT) )
        {
            s_sector = FIRST_SECTOR;
    9770:	0025      	movs	r5, r4
        s_sector++;
    9772:	0026      	movs	r6, r4
    9774:	e008      	b.n	9788 <CompactSector+0x58>
    9776:	7033      	strb	r3, [r6, #0]
        }

        if ( s_sector == sourceSector )
    9778:	4b72      	ldr	r3, [pc, #456]	; (9944 <CompactSector+0x214>)
    977a:	781b      	ldrb	r3, [r3, #0]
    977c:	42bb      	cmp	r3, r7
    977e:	d00b      	beq.n	9798 <CompactSector+0x68>
        {
            // all sector failed to initialize
            assert(false);
        }
    }
    while ( !EraseSector());
    9780:	4b72      	ldr	r3, [pc, #456]	; (994c <CompactSector+0x21c>)
    9782:	4798      	blx	r3
    9784:	2800      	cmp	r0, #0
    9786:	d10d      	bne.n	97a4 <CompactSector+0x74>
        s_sector++;
    9788:	7823      	ldrb	r3, [r4, #0]
    978a:	3301      	adds	r3, #1
    978c:	b2db      	uxtb	r3, r3
        if ( s_sector >= (FIRST_SECTOR + SECTOR_COUNT) )
    978e:	2b01      	cmp	r3, #1
    9790:	d9f1      	bls.n	9776 <CompactSector+0x46>
            s_sector = FIRST_SECTOR;
    9792:	2300      	movs	r3, #0
    9794:	702b      	strb	r3, [r5, #0]
    9796:	e7ef      	b.n	9778 <CompactSector+0x48>
            assert(false);
    9798:	4b6d      	ldr	r3, [pc, #436]	; (9950 <CompactSector+0x220>)
    979a:	4a6e      	ldr	r2, [pc, #440]	; (9954 <CompactSector+0x224>)
    979c:	496e      	ldr	r1, [pc, #440]	; (9958 <CompactSector+0x228>)
    979e:	486f      	ldr	r0, [pc, #444]	; (995c <CompactSector+0x22c>)
    97a0:	4c6f      	ldr	r4, [pc, #444]	; (9960 <CompactSector+0x230>)
    97a2:	47a0      	blx	r4

    // Traverse the item cache, writing all items to the new sector
    for (uint8_t cacheIndex = 0; cacheIndex < s_itemCount; cacheIndex++) {
    97a4:	4b6f      	ldr	r3, [pc, #444]	; (9964 <CompactSector+0x234>)
    97a6:	781b      	ldrb	r3, [r3, #0]
    97a8:	2b00      	cmp	r3, #0
    97aa:	d06a      	beq.n	9882 <CompactSector+0x152>
    97ac:	2300      	movs	r3, #0
    97ae:	9306      	str	r3, [sp, #24]

        blockHeader.dataCrc =  ComputeDataCrc(sourceSector, lastBlockPointer, &blockHeader);

        blockHeader.headerCrc = ComputeHeaderCrc(&blockHeader);

        memset(dataBlock, 0xFF, sizeof(dataBlock));
    97b0:	3301      	adds	r3, #1
    97b2:	33ff      	adds	r3, #255	; 0xff
    97b4:	4699      	mov	r9, r3
            uint16_t bytesToGather;
            uint16_t inDataOffset = 0;

            do
            {
              bytesToGather =  (currLength > ROW_SIZE) ? ROW_SIZE : currLength; 
    97b6:	466a      	mov	r2, sp
    97b8:	82d3      	strh	r3, [r2, #22]
            if (!GatherData(sourceSector, lastBlockPointer, 0u, blockHeader.itemLength, (dataBlock + BLOCK_HEADER_SIZE )))
    97ba:	4b6b      	ldr	r3, [pc, #428]	; (9968 <CompactSector+0x238>)
    97bc:	3310      	adds	r3, #16
    97be:	9308      	str	r3, [sp, #32]
        Item_t *cache = &s_itemCache[cacheIndex];
    97c0:	9b06      	ldr	r3, [sp, #24]
    97c2:	9307      	str	r3, [sp, #28]
        uint16_t lastBlockPointer = cache->lastBlock;
    97c4:	009f      	lsls	r7, r3, #2
    97c6:	4b69      	ldr	r3, [pc, #420]	; (996c <CompactSector+0x23c>)
    97c8:	469c      	mov	ip, r3
    97ca:	4467      	add	r7, ip
    97cc:	887b      	ldrh	r3, [r7, #2]
    97ce:	001d      	movs	r5, r3
    97d0:	9304      	str	r3, [sp, #16]
        D_Nv_Read(sourceSector, lastBlockPointer, (uint8_t*) &blockHeader, BLOCK_HEADER_SIZE);
    97d2:	2310      	movs	r3, #16
    97d4:	aa0b      	add	r2, sp, #44	; 0x2c
    97d6:	0029      	movs	r1, r5
    97d8:	9803      	ldr	r0, [sp, #12]
    97da:	4680      	mov	r8, r0
    97dc:	4c5a      	ldr	r4, [pc, #360]	; (9948 <CompactSector+0x218>)
    97de:	47a0      	blx	r4
        blockHeader.blockOffset = 0x0000u;
    97e0:	ae0b      	add	r6, sp, #44	; 0x2c
    97e2:	2300      	movs	r3, #0
    97e4:	80b3      	strh	r3, [r6, #4]
        blockHeader.blockLength = blockHeader.itemLength;
    97e6:	8934      	ldrh	r4, [r6, #8]
    97e8:	80f4      	strh	r4, [r6, #6]
        blockHeader.previousBlock = 0x0000u;
    97ea:	8173      	strh	r3, [r6, #10]
        blockHeader.writeCount = 0u;
    97ec:	81b3      	strh	r3, [r6, #12]
        uint16_t currLength = BLOCK_HEADER_SIZE + blockHeader.itemLength;
    97ee:	3410      	adds	r4, #16
    97f0:	b2a4      	uxth	r4, r4
        blockHeader.dataCrc =  ComputeDataCrc(sourceSector, lastBlockPointer, &blockHeader);
    97f2:	0032      	movs	r2, r6
    97f4:	0029      	movs	r1, r5
    97f6:	4640      	mov	r0, r8
    97f8:	4b5d      	ldr	r3, [pc, #372]	; (9970 <CompactSector+0x240>)
    97fa:	4798      	blx	r3
    97fc:	8030      	strh	r0, [r6, #0]
    return ComputeCrc(((uint8_t*) pBlockHeader), (sizeof(BlockHeader_t) - sizeof(pBlockHeader->headerCrc)), 0xFFFFu); // skip headerCrc field
    97fe:	4a5d      	ldr	r2, [pc, #372]	; (9974 <CompactSector+0x244>)
    9800:	210e      	movs	r1, #14
    9802:	a80b      	add	r0, sp, #44	; 0x2c
    9804:	4b5c      	ldr	r3, [pc, #368]	; (9978 <CompactSector+0x248>)
    9806:	4798      	blx	r3
        blockHeader.headerCrc = ComputeHeaderCrc(&blockHeader);
    9808:	81f0      	strh	r0, [r6, #14]
        memset(dataBlock, 0xFF, sizeof(dataBlock));
    980a:	4d57      	ldr	r5, [pc, #348]	; (9968 <CompactSector+0x238>)
    980c:	464a      	mov	r2, r9
    980e:	21ff      	movs	r1, #255	; 0xff
    9810:	0028      	movs	r0, r5
    9812:	4b5a      	ldr	r3, [pc, #360]	; (997c <CompactSector+0x24c>)
    9814:	4798      	blx	r3
        memcpy(dataBlock, &blockHeader, BLOCK_HEADER_SIZE);
    9816:	002b      	movs	r3, r5
    9818:	ce07      	ldmia	r6!, {r0, r1, r2}
    981a:	c307      	stmia	r3!, {r0, r1, r2}
    981c:	6832      	ldr	r2, [r6, #0]
    981e:	601a      	str	r2, [r3, #0]
        cache->lastBlock = s_sectorHead  + compactBlockOffset;
    9820:	4b57      	ldr	r3, [pc, #348]	; (9980 <CompactSector+0x250>)
    9822:	881b      	ldrh	r3, [r3, #0]
    9824:	4a45      	ldr	r2, [pc, #276]	; (993c <CompactSector+0x20c>)
    9826:	8812      	ldrh	r2, [r2, #0]
    9828:	189b      	adds	r3, r3, r2
    982a:	807b      	strh	r3, [r7, #2]
        if (currLength <= ROW_SIZE)
    982c:	454c      	cmp	r4, r9
    982e:	d904      	bls.n	983a <CompactSector+0x10a>
    9830:	2600      	movs	r6, #0
    9832:	2310      	movs	r3, #16
              
              if (!GatherData(sourceSector, lastBlockPointer, inDataOffset, (bytesToGather - dataBlockOffset) , (dataBlock + dataBlockOffset)))
    9834:	4a4c      	ldr	r2, [pc, #304]	; (9968 <CompactSector+0x238>)
    9836:	4690      	mov	r8, r2
    9838:	e068      	b.n	990c <CompactSector+0x1dc>
            if (!GatherData(sourceSector, lastBlockPointer, 0u, blockHeader.itemLength, (dataBlock + BLOCK_HEADER_SIZE )))
    983a:	ab0b      	add	r3, sp, #44	; 0x2c
    983c:	891b      	ldrh	r3, [r3, #8]
    983e:	9a08      	ldr	r2, [sp, #32]
    9840:	9200      	str	r2, [sp, #0]
    9842:	2200      	movs	r2, #0
    9844:	9904      	ldr	r1, [sp, #16]
    9846:	9803      	ldr	r0, [sp, #12]
    9848:	4e4e      	ldr	r6, [pc, #312]	; (9984 <CompactSector+0x254>)
    984a:	47b0      	blx	r6
    984c:	2800      	cmp	r0, #0
    984e:	d063      	beq.n	9918 <CompactSector+0x1e8>
            cache->lastBlock = s_sectorHead  + compactBlockOffset;
    9850:	9b07      	ldr	r3, [sp, #28]
    9852:	009d      	lsls	r5, r3, #2
    9854:	4b45      	ldr	r3, [pc, #276]	; (996c <CompactSector+0x23c>)
    9856:	195d      	adds	r5, r3, r5
    9858:	4b49      	ldr	r3, [pc, #292]	; (9980 <CompactSector+0x250>)
    985a:	881b      	ldrh	r3, [r3, #0]
    985c:	4a37      	ldr	r2, [pc, #220]	; (993c <CompactSector+0x20c>)
    985e:	8812      	ldrh	r2, [r2, #0]
    9860:	189b      	adds	r3, r3, r2
    9862:	806b      	strh	r3, [r5, #2]
            if (!SmartCompacting(compactBlock, currLength))
    9864:	0021      	movs	r1, r4
    9866:	a814      	add	r0, sp, #80	; 0x50
    9868:	4b47      	ldr	r3, [pc, #284]	; (9988 <CompactSector+0x258>)
    986a:	4798      	blx	r3
    986c:	2800      	cmp	r0, #0
    986e:	d053      	beq.n	9918 <CompactSector+0x1e8>
    for (uint8_t cacheIndex = 0; cacheIndex < s_itemCount; cacheIndex++) {
    9870:	9b06      	ldr	r3, [sp, #24]
    9872:	3301      	adds	r3, #1
    9874:	b2db      	uxtb	r3, r3
    9876:	001a      	movs	r2, r3
    9878:	9306      	str	r3, [sp, #24]
    987a:	4b3a      	ldr	r3, [pc, #232]	; (9964 <CompactSector+0x234>)
    987c:	781b      	ldrb	r3, [r3, #0]
    987e:	4293      	cmp	r3, r2
    9880:	d89e      	bhi.n	97c0 <CompactSector+0x90>

            } while(currLength > 0);
        }
    }
    // if some uncommitted data avaialble, committ it
    if ( currentCompactLength)
    9882:	4b2f      	ldr	r3, [pc, #188]	; (9940 <CompactSector+0x210>)
    9884:	881a      	ldrh	r2, [r3, #0]
    9886:	2a00      	cmp	r2, #0
    9888:	d006      	beq.n	9898 <CompactSector+0x168>
    {
        if ( !WriteAndCheck(s_sectorHead, compactBlock, currentCompactLength) )
    988a:	4b3d      	ldr	r3, [pc, #244]	; (9980 <CompactSector+0x250>)
    988c:	8818      	ldrh	r0, [r3, #0]
    988e:	a914      	add	r1, sp, #80	; 0x50
    9890:	4b3e      	ldr	r3, [pc, #248]	; (998c <CompactSector+0x25c>)
    9892:	4798      	blx	r3
    9894:	1e04      	subs	r4, r0, #0
    9896:	d040      	beq.n	991a <CompactSector+0x1ea>
        {
            return false;
        }
    }
    // Just update sector header as per the the length of the data committed, no alignments
    UpdateSectorHead(currentCompactLength, ITEM_NO_ALIGNMENT);
    9898:	4b29      	ldr	r3, [pc, #164]	; (9940 <CompactSector+0x210>)
    989a:	8818      	ldrh	r0, [r3, #0]
    989c:	2100      	movs	r1, #0
    989e:	4b3c      	ldr	r3, [pc, #240]	; (9990 <CompactSector+0x260>)
    98a0:	4798      	blx	r3

    s_nextPageAddressAfterCompact = s_sectorHead;
    98a2:	4b37      	ldr	r3, [pc, #220]	; (9980 <CompactSector+0x250>)
    98a4:	881a      	ldrh	r2, [r3, #0]
    98a6:	4b3b      	ldr	r3, [pc, #236]	; (9994 <CompactSector+0x264>)
    98a8:	801a      	strh	r2, [r3, #0]
    uint32_t nextSequenceNumber = sectorHeader.sequenceNumber - 1uL;
    98aa:	9809      	ldr	r0, [sp, #36]	; 0x24
    98ac:	3801      	subs	r0, #1
    //SYS_PostEvent(BC_EVENT_UPGRADE_STRUCT_CHANGED_ITEMS, 0U);

    // update nextPageAddressAfterCompact in the sector header
    // All items moved, so now we just need to Write the Sector Header with 
    // nextPageAddressAfterCompact at the end of compact sector operation
    if ( !WriteSectorHeader(nextSequenceNumber))
    98ae:	4b3a      	ldr	r3, [pc, #232]	; (9998 <CompactSector+0x268>)
    98b0:	4798      	blx	r3
    98b2:	1e04      	subs	r4, r0, #0
    98b4:	d031      	beq.n	991a <CompactSector+0x1ea>
    {
        return false;
    }
    // Done with compact sector opration, Set the Sector Head to next page address for normal item update 
    UpdateSectorHead(0, ITEM_64BYTE_ALIGNMENT);
    98b6:	2102      	movs	r1, #2
    98b8:	2000      	movs	r0, #0
    98ba:	4b35      	ldr	r3, [pc, #212]	; (9990 <CompactSector+0x260>)
    98bc:	4798      	blx	r3

    // schedule an erase of the source sector,Restart the timer if it is already running.
    s_sectorToErase = sourceSector;
    98be:	4b37      	ldr	r3, [pc, #220]	; (999c <CompactSector+0x26c>)
    98c0:	466a      	mov	r2, sp
    98c2:	7b12      	ldrb	r2, [r2, #12]
    98c4:	701a      	strb	r2, [r3, #0]
    SYS_TimerStop(&eraseSectorTimer);
    98c6:	4d36      	ldr	r5, [pc, #216]	; (99a0 <CompactSector+0x270>)
    98c8:	0028      	movs	r0, r5
    98ca:	4b19      	ldr	r3, [pc, #100]	; (9930 <CompactSector+0x200>)
    98cc:	4798      	blx	r3
    SYS_TimerStart(&eraseSectorTimer);
    98ce:	0028      	movs	r0, r5
    98d0:	4b34      	ldr	r3, [pc, #208]	; (99a4 <CompactSector+0x274>)
    98d2:	4798      	blx	r3

    return true;
    98d4:	e021      	b.n	991a <CompactSector+0x1ea>
              bytesToGather =  (currLength > ROW_SIZE) ? ROW_SIZE : currLength; 
    98d6:	b2ad      	uxth	r5, r5
              if (!GatherData(sourceSector, lastBlockPointer, inDataOffset, (bytesToGather - dataBlockOffset) , (dataBlock + dataBlockOffset)))
    98d8:	1aef      	subs	r7, r5, r3
    98da:	b2ba      	uxth	r2, r7
    98dc:	4693      	mov	fp, r2
    98de:	4443      	add	r3, r8
    98e0:	9300      	str	r3, [sp, #0]
    98e2:	0013      	movs	r3, r2
    98e4:	0032      	movs	r2, r6
    98e6:	9904      	ldr	r1, [sp, #16]
    98e8:	9803      	ldr	r0, [sp, #12]
    98ea:	4f26      	ldr	r7, [pc, #152]	; (9984 <CompactSector+0x254>)
    98ec:	47b8      	blx	r7
    98ee:	2800      	cmp	r0, #0
    98f0:	d012      	beq.n	9918 <CompactSector+0x1e8>
              if (!SmartCompacting(compactBlock, bytesToGather))
    98f2:	0029      	movs	r1, r5
    98f4:	a814      	add	r0, sp, #80	; 0x50
    98f6:	4b24      	ldr	r3, [pc, #144]	; (9988 <CompactSector+0x258>)
    98f8:	4798      	blx	r3
    98fa:	2800      	cmp	r0, #0
    98fc:	d00c      	beq.n	9918 <CompactSector+0x1e8>
              currLength -= bytesToGather;
    98fe:	1b64      	subs	r4, r4, r5
    9900:	b2a4      	uxth	r4, r4
              inDataOffset += (bytesToGather - dataBlockOffset);
    9902:	445e      	add	r6, fp
    9904:	b2b6      	uxth	r6, r6
              dataBlockOffset = 0;
    9906:	2300      	movs	r3, #0
            } while(currLength > 0);
    9908:	2c00      	cmp	r4, #0
    990a:	d0b1      	beq.n	9870 <CompactSector+0x140>
              bytesToGather =  (currLength > ROW_SIZE) ? ROW_SIZE : currLength; 
    990c:	1c25      	adds	r5, r4, #0
    990e:	454c      	cmp	r4, r9
    9910:	d9e1      	bls.n	98d6 <CompactSector+0x1a6>
    9912:	466a      	mov	r2, sp
    9914:	8ad5      	ldrh	r5, [r2, #22]
    9916:	e7de      	b.n	98d6 <CompactSector+0x1a6>
                return false;
    9918:	2400      	movs	r4, #0
}
    991a:	0020      	movs	r0, r4
    991c:	b055      	add	sp, #340	; 0x154
    991e:	bc3c      	pop	{r2, r3, r4, r5}
    9920:	4690      	mov	r8, r2
    9922:	4699      	mov	r9, r3
    9924:	46a2      	mov	sl, r4
    9926:	46ab      	mov	fp, r5
    9928:	bdf0      	pop	{r4, r5, r6, r7, pc}
    992a:	46c0      	nop			; (mov r8, r8)
    992c:	2000026c 	.word	0x2000026c
    9930:	0000bfb1 	.word	0x0000bfb1
    9934:	20000398 	.word	0x20000398
    9938:	2000039a 	.word	0x2000039a
    993c:	20000254 	.word	0x20000254
    9940:	20000280 	.word	0x20000280
    9944:	200003d0 	.word	0x200003d0
    9948:	0000901d 	.word	0x0000901d
    994c:	000095c9 	.word	0x000095c9
    9950:	00016218 	.word	0x00016218
    9954:	0001639c 	.word	0x0001639c
    9958:	000003d5 	.word	0x000003d5
    995c:	00016294 	.word	0x00016294
    9960:	00014c75 	.word	0x00014c75
    9964:	200003c8 	.word	0x200003c8
    9968:	20000284 	.word	0x20000284
    996c:	200003a0 	.word	0x200003a0
    9970:	000093bd 	.word	0x000093bd
    9974:	0000ffff 	.word	0x0000ffff
    9978:	000092c5 	.word	0x000092c5
    997c:	00014d49 	.word	0x00014d49
    9980:	200003d2 	.word	0x200003d2
    9984:	00009305 	.word	0x00009305
    9988:	00009689 	.word	0x00009689
    998c:	000095fd 	.word	0x000095fd
    9990:	00009289 	.word	0x00009289
    9994:	200003ca 	.word	0x200003ca
    9998:	00009631 	.word	0x00009631
    999c:	20000009 	.word	0x20000009
    99a0:	20000384 	.word	0x20000384
    99a4:	0000c01d 	.word	0x0000c01d

000099a8 <compactSectorTimerFired>:
{
    99a8:	b510      	push	{r4, lr}
    if (!PowerSupplyTooLow()) {
    99aa:	4b07      	ldr	r3, [pc, #28]	; (99c8 <compactSectorTimerFired+0x20>)
    99ac:	4798      	blx	r3
    99ae:	2800      	cmp	r0, #0
    99b0:	d000      	beq.n	99b4 <compactSectorTimerFired+0xc>
}
    99b2:	bd10      	pop	{r4, pc}
      status = CompactSector();
    99b4:	4b05      	ldr	r3, [pc, #20]	; (99cc <compactSectorTimerFired+0x24>)
    99b6:	4798      	blx	r3
      assert(false);
    99b8:	4b05      	ldr	r3, [pc, #20]	; (99d0 <compactSectorTimerFired+0x28>)
    99ba:	4a06      	ldr	r2, [pc, #24]	; (99d4 <compactSectorTimerFired+0x2c>)
    99bc:	212c      	movs	r1, #44	; 0x2c
    99be:	31ff      	adds	r1, #255	; 0xff
    99c0:	4805      	ldr	r0, [pc, #20]	; (99d8 <compactSectorTimerFired+0x30>)
    99c2:	4c06      	ldr	r4, [pc, #24]	; (99dc <compactSectorTimerFired+0x34>)
    99c4:	47a0      	blx	r4
    99c6:	46c0      	nop			; (mov r8, r8)
    99c8:	0000926d 	.word	0x0000926d
    99cc:	00009731 	.word	0x00009731
    99d0:	00016218 	.word	0x00016218
    99d4:	00016348 	.word	0x00016348
    99d8:	00016294 	.word	0x00016294
    99dc:	00014c75 	.word	0x00014c75

000099e0 <CompactSectorIfNeeded>:

static void CompactSectorIfNeeded(uint16_t immediateThreshold)
{
    99e0:	b510      	push	{r4, lr}
    uint16_t freeSpace = SECTOR_SIZE - s_sectorHead;
    99e2:	4b12      	ldr	r3, [pc, #72]	; (9a2c <CompactSectorIfNeeded+0x4c>)
    99e4:	881a      	ldrh	r2, [r3, #0]
    99e6:	2380      	movs	r3, #128	; 0x80
    99e8:	019b      	lsls	r3, r3, #6
    99ea:	1a9b      	subs	r3, r3, r2
    99ec:	b29b      	uxth	r3, r3

    if ( freeSpace < immediateThreshold )
    99ee:	4283      	cmp	r3, r0
    99f0:	d303      	bcc.n	99fa <CompactSectorIfNeeded+0x1a>
        {
            assert(false);
        }
        return;
    }
    if ( freeSpace < PREEMPTIVE_COMPACT_SECTOR_THRESHOLD )
    99f2:	4a0f      	ldr	r2, [pc, #60]	; (9a30 <CompactSectorIfNeeded+0x50>)
    99f4:	4293      	cmp	r3, r2
    99f6:	d90a      	bls.n	9a0e <CompactSectorIfNeeded+0x2e>
        compactSectorTimer.mode = SYS_TIMER_INTERVAL_MODE;
        //TODO: check timer to be started or not
        //SYS_StartTimer(&compactSectorTimer);
        }
    }
}
    99f8:	bd10      	pop	{r4, pc}
        if ( !CompactSector() )
    99fa:	4b0e      	ldr	r3, [pc, #56]	; (9a34 <CompactSectorIfNeeded+0x54>)
    99fc:	4798      	blx	r3
    99fe:	2800      	cmp	r0, #0
    9a00:	d1fa      	bne.n	99f8 <CompactSectorIfNeeded+0x18>
            assert(false);
    9a02:	4b0d      	ldr	r3, [pc, #52]	; (9a38 <CompactSectorIfNeeded+0x58>)
    9a04:	4a0d      	ldr	r2, [pc, #52]	; (9a3c <CompactSectorIfNeeded+0x5c>)
    9a06:	490e      	ldr	r1, [pc, #56]	; (9a40 <CompactSectorIfNeeded+0x60>)
    9a08:	480e      	ldr	r0, [pc, #56]	; (9a44 <CompactSectorIfNeeded+0x64>)
    9a0a:	4c0f      	ldr	r4, [pc, #60]	; (9a48 <CompactSectorIfNeeded+0x68>)
    9a0c:	47a0      	blx	r4
        if (!SYS_TimerStarted(&compactSectorTimer))
    9a0e:	480f      	ldr	r0, [pc, #60]	; (9a4c <CompactSectorIfNeeded+0x6c>)
    9a10:	4b0f      	ldr	r3, [pc, #60]	; (9a50 <CompactSectorIfNeeded+0x70>)
    9a12:	4798      	blx	r3
    9a14:	2800      	cmp	r0, #0
    9a16:	d1ef      	bne.n	99f8 <CompactSectorIfNeeded+0x18>
        compactSectorTimer.handler = compactSectorTimerFired;
    9a18:	4b0c      	ldr	r3, [pc, #48]	; (9a4c <CompactSectorIfNeeded+0x6c>)
    9a1a:	4a0e      	ldr	r2, [pc, #56]	; (9a54 <CompactSectorIfNeeded+0x74>)
    9a1c:	611a      	str	r2, [r3, #16]
        compactSectorTimer.timeout = COMPACT_SECTOR_DELAY_MS;
    9a1e:	4a0e      	ldr	r2, [pc, #56]	; (9a58 <CompactSectorIfNeeded+0x78>)
    9a20:	605a      	str	r2, [r3, #4]
        compactSectorTimer.interval = COMPACT_SECTOR_DELAY_MS;
    9a22:	609a      	str	r2, [r3, #8]
        compactSectorTimer.mode = SYS_TIMER_INTERVAL_MODE;
    9a24:	2200      	movs	r2, #0
    9a26:	731a      	strb	r2, [r3, #12]
    9a28:	e7e6      	b.n	99f8 <CompactSectorIfNeeded+0x18>
    9a2a:	46c0      	nop			; (mov r8, r8)
    9a2c:	200003d2 	.word	0x200003d2
    9a30:	0000080f 	.word	0x0000080f
    9a34:	00009731 	.word	0x00009731
    9a38:	00016218 	.word	0x00016218
    9a3c:	000163ac 	.word	0x000163ac
    9a40:	0000044e 	.word	0x0000044e
    9a44:	00016294 	.word	0x00016294
    9a48:	00014c75 	.word	0x00014c75
    9a4c:	2000026c 	.word	0x2000026c
    9a50:	0000bff1 	.word	0x0000bff1
    9a54:	000099a9 	.word	0x000099a9
    9a58:	00002710 	.word	0x00002710

00009a5c <CompactItem>:

static S_Nv_ReturnValue_t CompactItem(void)
{
    9a5c:	b5f0      	push	{r4, r5, r6, r7, lr}
    9a5e:	46de      	mov	lr, fp
    9a60:	4657      	mov	r7, sl
    9a62:	464e      	mov	r6, r9
    9a64:	4645      	mov	r5, r8
    9a66:	b5e0      	push	{r5, r6, r7, lr}
    9a68:	b08b      	sub	sp, #44	; 0x2c
#if defined(ENABLE_NV_COMPACT_LOGGING)
    PRINTA(("CompactItem(id=%X)", s_compactItemId));
#endif

    if ( PowerSupplyTooLow() )
    9a6a:	4b77      	ldr	r3, [pc, #476]	; (9c48 <CompactItem+0x1ec>)
    9a6c:	4798      	blx	r3
    {
        return S_Nv_ReturnValue_PowerSupplyTooLow;
    9a6e:	2305      	movs	r3, #5
    if ( PowerSupplyTooLow() )
    9a70:	2800      	cmp	r0, #0
    9a72:	d007      	beq.n	9a84 <CompactItem+0x28>
    s_compactItemLength = 0u;

    cache->lastBlock = lastBlock;

    return S_Nv_ReturnValue_Ok;
}
    9a74:	0018      	movs	r0, r3
    9a76:	b00b      	add	sp, #44	; 0x2c
    9a78:	bc3c      	pop	{r2, r3, r4, r5}
    9a7a:	4690      	mov	r8, r2
    9a7c:	4699      	mov	r9, r3
    9a7e:	46a2      	mov	sl, r4
    9a80:	46ab      	mov	fp, r5
    9a82:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if ( (s_compactItemLength == 0u) && ( s_compactItemId == 0u ) )
    9a84:	4b71      	ldr	r3, [pc, #452]	; (9c4c <CompactItem+0x1f0>)
    9a86:	8818      	ldrh	r0, [r3, #0]
    9a88:	2800      	cmp	r0, #0
    9a8a:	d146      	bne.n	9b1a <CompactItem+0xbe>
    9a8c:	4b70      	ldr	r3, [pc, #448]	; (9c50 <CompactItem+0x1f4>)
    9a8e:	881b      	ldrh	r3, [r3, #0]
    9a90:	2b00      	cmp	r3, #0
    9a92:	d100      	bne.n	9a96 <CompactItem+0x3a>
    9a94:	e0d0      	b.n	9c38 <CompactItem+0x1dc>
    Item_t *cache = FindItemCache(s_compactItemId);
    9a96:	4b6e      	ldr	r3, [pc, #440]	; (9c50 <CompactItem+0x1f4>)
    9a98:	8818      	ldrh	r0, [r3, #0]
    9a9a:	4b6e      	ldr	r3, [pc, #440]	; (9c54 <CompactItem+0x1f8>)
    9a9c:	4798      	blx	r3
    9a9e:	4683      	mov	fp, r0
    if ( cache == NULL )
    9aa0:	2800      	cmp	r0, #0
    9aa2:	d100      	bne.n	9aa6 <CompactItem+0x4a>
    9aa4:	e0ca      	b.n	9c3c <CompactItem+0x1e0>
    uint16_t blockPointer = cache->lastBlock;
    9aa6:	7882      	ldrb	r2, [r0, #2]
    9aa8:	78c3      	ldrb	r3, [r0, #3]
    9aaa:	021b      	lsls	r3, r3, #8
    9aac:	4313      	orrs	r3, r2
    9aae:	0019      	movs	r1, r3
    9ab0:	9303      	str	r3, [sp, #12]
    D_Nv_Read(s_sector, blockPointer, (uint8_t*) &blockHeader, BLOCK_HEADER_SIZE);
    9ab2:	4b69      	ldr	r3, [pc, #420]	; (9c58 <CompactItem+0x1fc>)
    9ab4:	7818      	ldrb	r0, [r3, #0]
    9ab6:	2310      	movs	r3, #16
    9ab8:	aa06      	add	r2, sp, #24
    9aba:	4c68      	ldr	r4, [pc, #416]	; (9c5c <CompactItem+0x200>)
    9abc:	47a0      	blx	r4
    if (s_compactItemLength == 0)
    9abe:	4b63      	ldr	r3, [pc, #396]	; (9c4c <CompactItem+0x1f0>)
    9ac0:	881a      	ldrh	r2, [r3, #0]
    9ac2:	2a00      	cmp	r2, #0
    9ac4:	d02e      	beq.n	9b24 <CompactItem+0xc8>
    uint16_t lastBlock = s_sectorHead;
    9ac6:	4b66      	ldr	r3, [pc, #408]	; (9c60 <CompactItem+0x204>)
    9ac8:	881b      	ldrh	r3, [r3, #0]
    9aca:	9305      	str	r3, [sp, #20]
    uint16_t bytesToGather = blockHeader.itemLength;
    9acc:	ab06      	add	r3, sp, #24
    9ace:	891b      	ldrh	r3, [r3, #8]
        blockHeader.itemLength = s_compactItemLength;
    9ad0:	a906      	add	r1, sp, #24
    9ad2:	810a      	strh	r2, [r1, #8]
    9ad4:	1c19      	adds	r1, r3, #0
    9ad6:	4293      	cmp	r3, r2
    9ad8:	d900      	bls.n	9adc <CompactItem+0x80>
    9ada:	1c11      	adds	r1, r2, #0
    9adc:	b28b      	uxth	r3, r1
    blockHeader.blockOffset = 0u;
    9ade:	aa06      	add	r2, sp, #24
    9ae0:	2100      	movs	r1, #0
    9ae2:	8091      	strh	r1, [r2, #4]
    blockHeader.blockLength = blockHeader.itemLength;
    9ae4:	8910      	ldrh	r0, [r2, #8]
    9ae6:	80d0      	strh	r0, [r2, #6]
    blockHeader.previousBlock = 0x0000u;
    9ae8:	8151      	strh	r1, [r2, #10]
    blockHeader.writeCount = 0u;
    9aea:	8191      	strh	r1, [r2, #12]
    uint16_t currLength = BLOCK_HEADER_SIZE + bytesToGather;
    9aec:	001c      	movs	r4, r3
    9aee:	3410      	adds	r4, #16
    9af0:	b2a4      	uxth	r4, r4
    memcpy(dataBlock, &blockHeader, BLOCK_HEADER_SIZE);
    9af2:	495c      	ldr	r1, [pc, #368]	; (9c64 <CompactItem+0x208>)
    9af4:	ca61      	ldmia	r2!, {r0, r5, r6}
    9af6:	c161      	stmia	r1!, {r0, r5, r6}
    9af8:	6812      	ldr	r2, [r2, #0]
    9afa:	600a      	str	r2, [r1, #0]
    if (currLength <= ROW_SIZE)
    9afc:	2280      	movs	r2, #128	; 0x80
    9afe:	0052      	lsls	r2, r2, #1
    9b00:	4294      	cmp	r4, r2
    9b02:	d939      	bls.n	9b78 <CompactItem+0x11c>
    9b04:	2600      	movs	r6, #0
    9b06:	2310      	movs	r3, #16
            bytesToGatherAndCommit = (currLength > ROW_SIZE) ? ROW_SIZE : currLength;
    9b08:	2280      	movs	r2, #128	; 0x80
    9b0a:	0052      	lsls	r2, r2, #1
    9b0c:	4691      	mov	r9, r2
    9b0e:	4669      	mov	r1, sp
    9b10:	824a      	strh	r2, [r1, #18]
            if (!GatherData(s_sector, blockPointer, inDataOffset, bytesToGatherAndCommit - dataBlockOffset , (dataBlock + dataBlockOffset)))
    9b12:	4a51      	ldr	r2, [pc, #324]	; (9c58 <CompactItem+0x1fc>)
    9b14:	4692      	mov	sl, r2
    9b16:	001a      	movs	r2, r3
    9b18:	e088      	b.n	9c2c <CompactItem+0x1d0>
        CompactSectorIfNeeded(s_compactItemLength + BLOCK_HEADER_SIZE);
    9b1a:	3010      	adds	r0, #16
    9b1c:	b280      	uxth	r0, r0
    9b1e:	4b52      	ldr	r3, [pc, #328]	; (9c68 <CompactItem+0x20c>)
    9b20:	4798      	blx	r3
    9b22:	e7b8      	b.n	9a96 <CompactItem+0x3a>
        CompactSectorIfNeeded(blockHeader.itemLength + BLOCK_HEADER_SIZE);
    9b24:	ab06      	add	r3, sp, #24
    9b26:	8918      	ldrh	r0, [r3, #8]
    9b28:	3010      	adds	r0, #16
    9b2a:	b280      	uxth	r0, r0
    9b2c:	4b4e      	ldr	r3, [pc, #312]	; (9c68 <CompactItem+0x20c>)
    9b2e:	4798      	blx	r3
        cache = FindItemCache(s_compactItemId);
    9b30:	4b47      	ldr	r3, [pc, #284]	; (9c50 <CompactItem+0x1f4>)
    9b32:	8818      	ldrh	r0, [r3, #0]
    9b34:	4b47      	ldr	r3, [pc, #284]	; (9c54 <CompactItem+0x1f8>)
    9b36:	4798      	blx	r3
    9b38:	4683      	mov	fp, r0
        assert(cache != NULL);
    9b3a:	2800      	cmp	r0, #0
    9b3c:	d015      	beq.n	9b6a <CompactItem+0x10e>
        blockPointer = cache->lastBlock;
    9b3e:	7882      	ldrb	r2, [r0, #2]
    9b40:	78c3      	ldrb	r3, [r0, #3]
    9b42:	021b      	lsls	r3, r3, #8
    9b44:	4313      	orrs	r3, r2
    9b46:	0019      	movs	r1, r3
    9b48:	9303      	str	r3, [sp, #12]
        D_Nv_Read(s_sector, blockPointer, (uint8_t*) &blockHeader, BLOCK_HEADER_SIZE);
    9b4a:	ac06      	add	r4, sp, #24
    9b4c:	4b42      	ldr	r3, [pc, #264]	; (9c58 <CompactItem+0x1fc>)
    9b4e:	7818      	ldrb	r0, [r3, #0]
    9b50:	2310      	movs	r3, #16
    9b52:	0022      	movs	r2, r4
    9b54:	4d41      	ldr	r5, [pc, #260]	; (9c5c <CompactItem+0x200>)
    9b56:	47a8      	blx	r5
    uint16_t lastBlock = s_sectorHead;
    9b58:	4b41      	ldr	r3, [pc, #260]	; (9c60 <CompactItem+0x204>)
    9b5a:	881b      	ldrh	r3, [r3, #0]
    9b5c:	9305      	str	r3, [sp, #20]
    uint16_t bytesToGather = blockHeader.itemLength;
    9b5e:	8923      	ldrh	r3, [r4, #8]
    if ( s_compactItemLength != 0u )
    9b60:	4a3a      	ldr	r2, [pc, #232]	; (9c4c <CompactItem+0x1f0>)
    9b62:	8812      	ldrh	r2, [r2, #0]
    9b64:	2a00      	cmp	r2, #0
    9b66:	d0ba      	beq.n	9ade <CompactItem+0x82>
    9b68:	e7b2      	b.n	9ad0 <CompactItem+0x74>
        assert(cache != NULL);
    9b6a:	4b40      	ldr	r3, [pc, #256]	; (9c6c <CompactItem+0x210>)
    9b6c:	4a40      	ldr	r2, [pc, #256]	; (9c70 <CompactItem+0x214>)
    9b6e:	2191      	movs	r1, #145	; 0x91
    9b70:	00c9      	lsls	r1, r1, #3
    9b72:	4840      	ldr	r0, [pc, #256]	; (9c74 <CompactItem+0x218>)
    9b74:	4c40      	ldr	r4, [pc, #256]	; (9c78 <CompactItem+0x21c>)
    9b76:	47a0      	blx	r4
        if (!GatherData(s_sector, blockPointer, 0u, bytesToGather, (dataBlock + BLOCK_HEADER_SIZE )))
    9b78:	4a37      	ldr	r2, [pc, #220]	; (9c58 <CompactItem+0x1fc>)
    9b7a:	7810      	ldrb	r0, [r2, #0]
    9b7c:	4a39      	ldr	r2, [pc, #228]	; (9c64 <CompactItem+0x208>)
    9b7e:	3210      	adds	r2, #16
    9b80:	9200      	str	r2, [sp, #0]
    9b82:	2200      	movs	r2, #0
    9b84:	9903      	ldr	r1, [sp, #12]
    9b86:	4c3d      	ldr	r4, [pc, #244]	; (9c7c <CompactItem+0x220>)
    9b88:	47a0      	blx	r4
            return S_Nv_ReturnValue_Failure;
    9b8a:	2301      	movs	r3, #1
        if (!GatherData(s_sector, blockPointer, 0u, bytesToGather, (dataBlock + BLOCK_HEADER_SIZE )))
    9b8c:	2800      	cmp	r0, #0
    9b8e:	d100      	bne.n	9b92 <CompactItem+0x136>
    9b90:	e770      	b.n	9a74 <CompactItem+0x18>
        memcpy(dataBlock, &blockHeader, BLOCK_HEADER_SIZE);
    9b92:	4934      	ldr	r1, [pc, #208]	; (9c64 <CompactItem+0x208>)
    9b94:	ab06      	add	r3, sp, #24
    9b96:	000a      	movs	r2, r1
    9b98:	0018      	movs	r0, r3
    9b9a:	c870      	ldmia	r0!, {r4, r5, r6}
    9b9c:	c270      	stmia	r2!, {r4, r5, r6}
    9b9e:	6800      	ldr	r0, [r0, #0]
    9ba0:	6010      	str	r0, [r2, #0]
        if ( !WriteAndCheck(s_sectorHead, dataBlock, blockHeader.blockLength + BLOCK_HEADER_SIZE) )
    9ba2:	88da      	ldrh	r2, [r3, #6]
    9ba4:	3210      	adds	r2, #16
    9ba6:	b292      	uxth	r2, r2
    9ba8:	4b2d      	ldr	r3, [pc, #180]	; (9c60 <CompactItem+0x204>)
    9baa:	8818      	ldrh	r0, [r3, #0]
    9bac:	4b34      	ldr	r3, [pc, #208]	; (9c80 <CompactItem+0x224>)
    9bae:	4798      	blx	r3
            return false;
    9bb0:	2300      	movs	r3, #0
        if ( !WriteAndCheck(s_sectorHead, dataBlock, blockHeader.blockLength + BLOCK_HEADER_SIZE) )
    9bb2:	2800      	cmp	r0, #0
    9bb4:	d100      	bne.n	9bb8 <CompactItem+0x15c>
    9bb6:	e75d      	b.n	9a74 <CompactItem+0x18>
        UpdateSectorHead((BLOCK_HEADER_SIZE + blockHeader.blockLength), ITEM_64BYTE_ALIGNMENT);
    9bb8:	ab06      	add	r3, sp, #24
    9bba:	88d8      	ldrh	r0, [r3, #6]
    9bbc:	3010      	adds	r0, #16
    9bbe:	b280      	uxth	r0, r0
    9bc0:	2102      	movs	r1, #2
    9bc2:	4b30      	ldr	r3, [pc, #192]	; (9c84 <CompactItem+0x228>)
    9bc4:	4798      	blx	r3
    s_compactItemId = 0u;
    9bc6:	2300      	movs	r3, #0
    9bc8:	4a21      	ldr	r2, [pc, #132]	; (9c50 <CompactItem+0x1f4>)
    9bca:	8013      	strh	r3, [r2, #0]
    s_compactItemLength = 0u;
    9bcc:	4a1f      	ldr	r2, [pc, #124]	; (9c4c <CompactItem+0x1f0>)
    9bce:	8013      	strh	r3, [r2, #0]
    cache->lastBlock = lastBlock;
    9bd0:	465b      	mov	r3, fp
    9bd2:	9905      	ldr	r1, [sp, #20]
    9bd4:	7099      	strb	r1, [r3, #2]
    9bd6:	0a0b      	lsrs	r3, r1, #8
    9bd8:	465a      	mov	r2, fp
    9bda:	70d3      	strb	r3, [r2, #3]
    return S_Nv_ReturnValue_Ok;
    9bdc:	2300      	movs	r3, #0
    9bde:	e749      	b.n	9a74 <CompactItem+0x18>
            bytesToGatherAndCommit = (currLength > ROW_SIZE) ? ROW_SIZE : currLength;
    9be0:	b2ad      	uxth	r5, r5
            if (!GatherData(s_sector, blockPointer, inDataOffset, bytesToGatherAndCommit - dataBlockOffset , (dataBlock + dataBlockOffset)))
    9be2:	1aaf      	subs	r7, r5, r2
    9be4:	b2bb      	uxth	r3, r7
    9be6:	0019      	movs	r1, r3
    9be8:	4653      	mov	r3, sl
    9bea:	7818      	ldrb	r0, [r3, #0]
    9bec:	4b1d      	ldr	r3, [pc, #116]	; (9c64 <CompactItem+0x208>)
    9bee:	189b      	adds	r3, r3, r2
    9bf0:	9300      	str	r3, [sp, #0]
    9bf2:	9102      	str	r1, [sp, #8]
    9bf4:	000b      	movs	r3, r1
    9bf6:	0032      	movs	r2, r6
    9bf8:	9903      	ldr	r1, [sp, #12]
    9bfa:	4f20      	ldr	r7, [pc, #128]	; (9c7c <CompactItem+0x220>)
    9bfc:	47b8      	blx	r7
    9bfe:	2800      	cmp	r0, #0
    9c00:	d01e      	beq.n	9c40 <CompactItem+0x1e4>
            if ( !WriteAndCheck(s_sectorHead, dataBlock, bytesToGatherAndCommit) )
    9c02:	4b17      	ldr	r3, [pc, #92]	; (9c60 <CompactItem+0x204>)
    9c04:	8818      	ldrh	r0, [r3, #0]
    9c06:	002a      	movs	r2, r5
    9c08:	4916      	ldr	r1, [pc, #88]	; (9c64 <CompactItem+0x208>)
    9c0a:	4b1d      	ldr	r3, [pc, #116]	; (9c80 <CompactItem+0x224>)
    9c0c:	4798      	blx	r3
    9c0e:	2800      	cmp	r0, #0
    9c10:	d018      	beq.n	9c44 <CompactItem+0x1e8>
            UpdateSectorHead(bytesToGatherAndCommit, ITEM_64BYTE_ALIGNMENT);
    9c12:	2102      	movs	r1, #2
    9c14:	0028      	movs	r0, r5
    9c16:	4b1b      	ldr	r3, [pc, #108]	; (9c84 <CompactItem+0x228>)
    9c18:	4798      	blx	r3
            currLength -= bytesToGatherAndCommit;
    9c1a:	1b64      	subs	r4, r4, r5
    9c1c:	b2a4      	uxth	r4, r4
            inDataOffset += (bytesToGatherAndCommit - dataBlockOffset);
    9c1e:	9902      	ldr	r1, [sp, #8]
    9c20:	468c      	mov	ip, r1
    9c22:	4466      	add	r6, ip
    9c24:	b2b6      	uxth	r6, r6
            dataBlockOffset = 0;
    9c26:	2200      	movs	r2, #0
        } while(currLength > 0);
    9c28:	2c00      	cmp	r4, #0
    9c2a:	d0cc      	beq.n	9bc6 <CompactItem+0x16a>
            bytesToGatherAndCommit = (currLength > ROW_SIZE) ? ROW_SIZE : currLength;
    9c2c:	1c25      	adds	r5, r4, #0
    9c2e:	454c      	cmp	r4, r9
    9c30:	d9d6      	bls.n	9be0 <CompactItem+0x184>
    9c32:	466b      	mov	r3, sp
    9c34:	8a5d      	ldrh	r5, [r3, #18]
    9c36:	e7d3      	b.n	9be0 <CompactItem+0x184>
        return S_Nv_ReturnValue_Ok;
    9c38:	2300      	movs	r3, #0
    9c3a:	e71b      	b.n	9a74 <CompactItem+0x18>
        return S_Nv_ReturnValue_Ok;
    9c3c:	2300      	movs	r3, #0
    9c3e:	e719      	b.n	9a74 <CompactItem+0x18>
                return S_Nv_ReturnValue_Failure;
    9c40:	2301      	movs	r3, #1
    9c42:	e717      	b.n	9a74 <CompactItem+0x18>
                return false;
    9c44:	2300      	movs	r3, #0
    9c46:	e715      	b.n	9a74 <CompactItem+0x18>
    9c48:	0000926d 	.word	0x0000926d
    9c4c:	2000039a 	.word	0x2000039a
    9c50:	20000398 	.word	0x20000398
    9c54:	00009465 	.word	0x00009465
    9c58:	200003d0 	.word	0x200003d0
    9c5c:	0000901d 	.word	0x0000901d
    9c60:	200003d2 	.word	0x200003d2
    9c64:	20000284 	.word	0x20000284
    9c68:	000099e1 	.word	0x000099e1
    9c6c:	00016208 	.word	0x00016208
    9c70:	000163c4 	.word	0x000163c4
    9c74:	00016294 	.word	0x00016294
    9c78:	00014c75 	.word	0x00014c75
    9c7c:	00009305 	.word	0x00009305
    9c80:	000095fd 	.word	0x000095fd
    9c84:	00009289 	.word	0x00009289

00009c88 <compactItemTimerFired>:
{
    9c88:	b510      	push	{r4, lr}
    (void)CompactItem();
    9c8a:	4b01      	ldr	r3, [pc, #4]	; (9c90 <compactItemTimerFired+0x8>)
    9c8c:	4798      	blx	r3
}
    9c8e:	bd10      	pop	{r4, pc}
    9c90:	00009a5d 	.word	0x00009a5d

00009c94 <WriteDataBlockAndHeader>:
{
    9c94:	b5f0      	push	{r4, r5, r6, r7, lr}
    9c96:	46de      	mov	lr, fp
    9c98:	4657      	mov	r7, sl
    9c9a:	464e      	mov	r6, r9
    9c9c:	4645      	mov	r5, r8
    9c9e:	b5e0      	push	{r5, r6, r7, lr}
    9ca0:	b083      	sub	sp, #12
    9ca2:	0004      	movs	r4, r0
    9ca4:	468a      	mov	sl, r1
    memset(dataBlock, 0xFF, sizeof(dataBlock));
    9ca6:	4d46      	ldr	r5, [pc, #280]	; (9dc0 <WriteDataBlockAndHeader+0x12c>)
    9ca8:	2280      	movs	r2, #128	; 0x80
    9caa:	0052      	lsls	r2, r2, #1
    9cac:	21ff      	movs	r1, #255	; 0xff
    9cae:	0028      	movs	r0, r5
    9cb0:	4b44      	ldr	r3, [pc, #272]	; (9dc4 <WriteDataBlockAndHeader+0x130>)
    9cb2:	4798      	blx	r3
    pBlockHeader->dataCrc = ComputeCrc(pData, pBlockHeader->blockLength, 0xFFFF);
    9cb4:	4e44      	ldr	r6, [pc, #272]	; (9dc8 <WriteDataBlockAndHeader+0x134>)
    9cb6:	79a3      	ldrb	r3, [r4, #6]
    9cb8:	79e1      	ldrb	r1, [r4, #7]
    9cba:	0209      	lsls	r1, r1, #8
    9cbc:	4319      	orrs	r1, r3
    9cbe:	0032      	movs	r2, r6
    9cc0:	4650      	mov	r0, sl
    9cc2:	4f42      	ldr	r7, [pc, #264]	; (9dcc <WriteDataBlockAndHeader+0x138>)
    9cc4:	47b8      	blx	r7
    9cc6:	7020      	strb	r0, [r4, #0]
    9cc8:	0a00      	lsrs	r0, r0, #8
    9cca:	7060      	strb	r0, [r4, #1]
    return ComputeCrc(((uint8_t*) pBlockHeader), (sizeof(BlockHeader_t) - sizeof(pBlockHeader->headerCrc)), 0xFFFFu); // skip headerCrc field
    9ccc:	0032      	movs	r2, r6
    9cce:	210e      	movs	r1, #14
    9cd0:	0020      	movs	r0, r4
    9cd2:	47b8      	blx	r7
    pBlockHeader->headerCrc = ComputeHeaderCrc(pBlockHeader);
    9cd4:	73a0      	strb	r0, [r4, #14]
    9cd6:	0a00      	lsrs	r0, r0, #8
    9cd8:	73e0      	strb	r0, [r4, #15]
    memcpy(dataBlock, pBlockHeader, BLOCK_HEADER_SIZE);
    9cda:	2210      	movs	r2, #16
    9cdc:	0021      	movs	r1, r4
    9cde:	0028      	movs	r0, r5
    9ce0:	4b3b      	ldr	r3, [pc, #236]	; (9dd0 <WriteDataBlockAndHeader+0x13c>)
    9ce2:	4798      	blx	r3
    currentLength = pBlockHeader->blockLength + BLOCK_HEADER_SIZE;
    9ce4:	79a3      	ldrb	r3, [r4, #6]
    9ce6:	79e2      	ldrb	r2, [r4, #7]
    9ce8:	0212      	lsls	r2, r2, #8
    9cea:	431a      	orrs	r2, r3
    9cec:	0015      	movs	r5, r2
    9cee:	3510      	adds	r5, #16
    9cf0:	b2ad      	uxth	r5, r5
    if (pData != NULL )
    9cf2:	4653      	mov	r3, sl
    9cf4:	2b00      	cmp	r3, #0
    9cf6:	d012      	beq.n	9d1e <WriteDataBlockAndHeader+0x8a>
        if(currentLength <= ROW_SIZE)
    9cf8:	2380      	movs	r3, #128	; 0x80
    9cfa:	005b      	lsls	r3, r3, #1
    9cfc:	429d      	cmp	r5, r3
    9cfe:	d909      	bls.n	9d14 <WriteDataBlockAndHeader+0x80>
    9d00:	2600      	movs	r6, #0
    9d02:	2710      	movs	r7, #16
                bytesToCommit = (currentLength > ROW_SIZE) ? ROW_SIZE : currentLength;
    9d04:	2380      	movs	r3, #128	; 0x80
    9d06:	005b      	lsls	r3, r3, #1
    9d08:	469b      	mov	fp, r3
    9d0a:	466a      	mov	r2, sp
    9d0c:	80d3      	strh	r3, [r2, #6]
                memcpy(dataBlock + dataBlockOffset, pData + inDataOffset, bytesToCommit - dataBlockOffset);
    9d0e:	4b2c      	ldr	r3, [pc, #176]	; (9dc0 <WriteDataBlockAndHeader+0x12c>)
    9d10:	4699      	mov	r9, r3
    9d12:	e045      	b.n	9da0 <WriteDataBlockAndHeader+0x10c>
            memcpy(dataBlock + BLOCK_HEADER_SIZE , pData, pBlockHeader->blockLength);
    9d14:	4651      	mov	r1, sl
    9d16:	482a      	ldr	r0, [pc, #168]	; (9dc0 <WriteDataBlockAndHeader+0x12c>)
    9d18:	3010      	adds	r0, #16
    9d1a:	4b2d      	ldr	r3, [pc, #180]	; (9dd0 <WriteDataBlockAndHeader+0x13c>)
    9d1c:	4798      	blx	r3
    if ( !WriteAndCheck(s_sectorHead, dataBlock, MIN((BLOCK_HEADER_SIZE + pBlockHeader->blockLength), ROW_SIZE)) )
    9d1e:	79a3      	ldrb	r3, [r4, #6]
    9d20:	79e2      	ldrb	r2, [r4, #7]
    9d22:	0212      	lsls	r2, r2, #8
    9d24:	431a      	orrs	r2, r3
    9d26:	3210      	adds	r2, #16
    9d28:	2380      	movs	r3, #128	; 0x80
    9d2a:	005b      	lsls	r3, r3, #1
    9d2c:	429a      	cmp	r2, r3
    9d2e:	dd00      	ble.n	9d32 <WriteDataBlockAndHeader+0x9e>
    9d30:	001a      	movs	r2, r3
    9d32:	b292      	uxth	r2, r2
    9d34:	4b27      	ldr	r3, [pc, #156]	; (9dd4 <WriteDataBlockAndHeader+0x140>)
    9d36:	8818      	ldrh	r0, [r3, #0]
    9d38:	4921      	ldr	r1, [pc, #132]	; (9dc0 <WriteDataBlockAndHeader+0x12c>)
    9d3a:	4b27      	ldr	r3, [pc, #156]	; (9dd8 <WriteDataBlockAndHeader+0x144>)
    9d3c:	4798      	blx	r3
    9d3e:	4680      	mov	r8, r0
    9d40:	2800      	cmp	r0, #0
    9d42:	d033      	beq.n	9dac <WriteDataBlockAndHeader+0x118>
    UpdateSectorHead((pBlockHeader->blockLength + BLOCK_HEADER_SIZE), ITEM_64BYTE_ALIGNMENT );
    9d44:	79a3      	ldrb	r3, [r4, #6]
    9d46:	79e0      	ldrb	r0, [r4, #7]
    9d48:	0200      	lsls	r0, r0, #8
    9d4a:	4318      	orrs	r0, r3
    9d4c:	3010      	adds	r0, #16
    9d4e:	b280      	uxth	r0, r0
    9d50:	2102      	movs	r1, #2
    9d52:	4b22      	ldr	r3, [pc, #136]	; (9ddc <WriteDataBlockAndHeader+0x148>)
    9d54:	4798      	blx	r3
}
    9d56:	4640      	mov	r0, r8
    9d58:	b003      	add	sp, #12
    9d5a:	bc3c      	pop	{r2, r3, r4, r5}
    9d5c:	4690      	mov	r8, r2
    9d5e:	4699      	mov	r9, r3
    9d60:	46a2      	mov	sl, r4
    9d62:	46ab      	mov	fp, r5
    9d64:	bdf0      	pop	{r4, r5, r6, r7, pc}
                bytesToCommit = (currentLength > ROW_SIZE) ? ROW_SIZE : currentLength;
    9d66:	b2a4      	uxth	r4, r4
                memcpy(dataBlock + dataBlockOffset, pData + inDataOffset, bytesToCommit - dataBlockOffset);
    9d68:	464b      	mov	r3, r9
    9d6a:	19d8      	adds	r0, r3, r7
    9d6c:	1be2      	subs	r2, r4, r7
    9d6e:	4653      	mov	r3, sl
    9d70:	1999      	adds	r1, r3, r6
    9d72:	4b17      	ldr	r3, [pc, #92]	; (9dd0 <WriteDataBlockAndHeader+0x13c>)
    9d74:	4798      	blx	r3
                if ( !WriteAndCheck(s_sectorHead, dataBlock, bytesToCommit))
    9d76:	4b17      	ldr	r3, [pc, #92]	; (9dd4 <WriteDataBlockAndHeader+0x140>)
    9d78:	8818      	ldrh	r0, [r3, #0]
    9d7a:	0022      	movs	r2, r4
    9d7c:	4649      	mov	r1, r9
    9d7e:	4b16      	ldr	r3, [pc, #88]	; (9dd8 <WriteDataBlockAndHeader+0x144>)
    9d80:	4798      	blx	r3
    9d82:	4680      	mov	r8, r0
    9d84:	2800      	cmp	r0, #0
    9d86:	d0e6      	beq.n	9d56 <WriteDataBlockAndHeader+0xc2>
                UpdateSectorHead(bytesToCommit, ITEM_64BYTE_ALIGNMENT);
    9d88:	2102      	movs	r1, #2
    9d8a:	0020      	movs	r0, r4
    9d8c:	4b13      	ldr	r3, [pc, #76]	; (9ddc <WriteDataBlockAndHeader+0x148>)
    9d8e:	4798      	blx	r3
                currentLength -= bytesToCommit;
    9d90:	1b2d      	subs	r5, r5, r4
    9d92:	b2ad      	uxth	r5, r5
                inDataOffset += (bytesToCommit - dataBlockOffset);
    9d94:	1be4      	subs	r4, r4, r7
    9d96:	1936      	adds	r6, r6, r4
    9d98:	b2b6      	uxth	r6, r6
                dataBlockOffset = 0;
    9d9a:	2700      	movs	r7, #0
            } while(currentLength > 0);
    9d9c:	2d00      	cmp	r5, #0
    9d9e:	d0da      	beq.n	9d56 <WriteDataBlockAndHeader+0xc2>
                bytesToCommit = (currentLength > ROW_SIZE) ? ROW_SIZE : currentLength;
    9da0:	1c2c      	adds	r4, r5, #0
    9da2:	455d      	cmp	r5, fp
    9da4:	d9df      	bls.n	9d66 <WriteDataBlockAndHeader+0xd2>
    9da6:	466b      	mov	r3, sp
    9da8:	88dc      	ldrh	r4, [r3, #6]
    9daa:	e7dc      	b.n	9d66 <WriteDataBlockAndHeader+0xd2>
        UpdateSectorHead((pBlockHeader->blockLength + BLOCK_HEADER_SIZE), ITEM_64BYTE_ALIGNMENT);
    9dac:	79a3      	ldrb	r3, [r4, #6]
    9dae:	79e0      	ldrb	r0, [r4, #7]
    9db0:	0200      	lsls	r0, r0, #8
    9db2:	4318      	orrs	r0, r3
    9db4:	3010      	adds	r0, #16
    9db6:	b280      	uxth	r0, r0
    9db8:	2102      	movs	r1, #2
    9dba:	4b08      	ldr	r3, [pc, #32]	; (9ddc <WriteDataBlockAndHeader+0x148>)
    9dbc:	4798      	blx	r3
        return false;
    9dbe:	e7ca      	b.n	9d56 <WriteDataBlockAndHeader+0xc2>
    9dc0:	20000284 	.word	0x20000284
    9dc4:	00014d49 	.word	0x00014d49
    9dc8:	0000ffff 	.word	0x0000ffff
    9dcc:	000092c5 	.word	0x000092c5
    9dd0:	00014d37 	.word	0x00014d37
    9dd4:	200003d2 	.word	0x200003d2
    9dd8:	000095fd 	.word	0x000095fd
    9ddc:	00009289 	.word	0x00009289

00009de0 <S_Nv_EarlyInit>:
/***************************************************************************************************
* EXPORTED FUNCTIONS
***************************************************************************************************/

void S_Nv_EarlyInit(void)
{
    9de0:	b5f0      	push	{r4, r5, r6, r7, lr}
    9de2:	46ce      	mov	lr, r9
    9de4:	4647      	mov	r7, r8
    9de6:	b580      	push	{r7, lr}
    9de8:	b091      	sub	sp, #68	; 0x44
    SnvRevisioin_t revisionNumber;
    s_itemCount = 0u;
    9dea:	2200      	movs	r2, #0
    9dec:	4bb3      	ldr	r3, [pc, #716]	; (a0bc <S_Nv_EarlyInit+0x2dc>)
    9dee:	701a      	strb	r2, [r3, #0]
    SectorHeader_t sectorHeader;

    uint8_t lastSector = 0xFFu;
    uint32_t lastSectorSequence = 0xFFFFFFFFuL;

    for ( uint8_t sector = FIRST_SECTOR; sector < (FIRST_SECTOR + SECTOR_COUNT); sector++ )
    9df0:	2400      	movs	r4, #0
    uint32_t lastSectorSequence = 0xFFFFFFFFuL;
    9df2:	2301      	movs	r3, #1
    9df4:	425b      	negs	r3, r3
    9df6:	4699      	mov	r9, r3
    uint8_t lastSector = 0xFFu;
    9df8:	27ff      	movs	r7, #255	; 0xff
    {
        D_Nv_Read(sector, 0u, (uint8_t*) &sectorHeader, SECTOR_HEADER_SIZE);
    9dfa:	4eb1      	ldr	r6, [pc, #708]	; (a0c0 <S_Nv_EarlyInit+0x2e0>)
    9dfc:	2312      	movs	r3, #18
    9dfe:	aa0b      	add	r2, sp, #44	; 0x2c
    9e00:	2100      	movs	r1, #0
    9e02:	0020      	movs	r0, r4
    9e04:	47b0      	blx	r6
        if (((sectorHeader.sequenceNumber ^ sectorHeader.sequenceParity) == 0xFFFFFFFFuL) &&
    9e06:	9d0d      	ldr	r5, [sp, #52]	; 0x34
    9e08:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    9e0a:	9301      	str	r3, [sp, #4]
    9e0c:	406b      	eors	r3, r5
    9e0e:	3301      	adds	r3, #1
    9e10:	d01d      	beq.n	9e4e <S_Nv_EarlyInit+0x6e>
    for ( uint8_t sector = FIRST_SECTOR; sector < (FIRST_SECTOR + SECTOR_COUNT); sector++ )
    9e12:	3401      	adds	r4, #1
    9e14:	b2e4      	uxtb	r4, r4
    9e16:	2c02      	cmp	r4, #2
    9e18:	d1f0      	bne.n	9dfc <S_Nv_EarlyInit+0x1c>
                lastSectorSequence = sectorHeader.sequenceNumber;
            }
        }
    }

    if ( lastSector == 0xFFu )
    9e1a:	2fff      	cmp	r7, #255	; 0xff
    9e1c:	d057      	beq.n	9ece <S_Nv_EarlyInit+0xee>
        s_itemCount = 0u;
    }
    else
    {
        // load active sector
        s_sector = lastSector;
    9e1e:	4ba9      	ldr	r3, [pc, #676]	; (a0c4 <S_Nv_EarlyInit+0x2e4>)
    9e20:	701f      	strb	r7, [r3, #0]
    if (SNV_REV_1 == revisionNumber)
    9e22:	4643      	mov	r3, r8
    9e24:	2b01      	cmp	r3, #1
    9e26:	d100      	bne.n	9e2a <S_Nv_EarlyInit+0x4a>
    9e28:	e07b      	b.n	9f22 <S_Nv_EarlyInit+0x142>
    else if (SNV_REV_2 == revisionNumber)
    9e2a:	4643      	mov	r3, r8
    9e2c:	2b02      	cmp	r3, #2
    9e2e:	d16a      	bne.n	9f06 <S_Nv_EarlyInit+0x126>
        s_sectorHead = ITEMS_AREA_START_ADDRESS;
    9e30:	2280      	movs	r2, #128	; 0x80
    9e32:	0052      	lsls	r2, r2, #1
    9e34:	4ba4      	ldr	r3, [pc, #656]	; (a0c8 <S_Nv_EarlyInit+0x2e8>)
    9e36:	801a      	strh	r2, [r3, #0]
        D_Nv_Read(s_sector, 0, (uint8_t*) &sectorHeader, sizeof(SectorHeader_t));
    9e38:	2312      	movs	r3, #18
    9e3a:	aa06      	add	r2, sp, #24
    9e3c:	2100      	movs	r1, #0
    9e3e:	0038      	movs	r0, r7
    9e40:	4c9f      	ldr	r4, [pc, #636]	; (a0c0 <S_Nv_EarlyInit+0x2e0>)
    9e42:	47a0      	blx	r4
        while ( s_sectorHead < SECTOR_SIZE )
    9e44:	4da0      	ldr	r5, [pc, #640]	; (a0c8 <S_Nv_EarlyInit+0x2e8>)
                UpdateSectorHead(0, itemAlignment);
    9e46:	4ba1      	ldr	r3, [pc, #644]	; (a0cc <S_Nv_EarlyInit+0x2ec>)
    9e48:	4698      	mov	r8, r3
            D_Nv_Read(s_sector, s_sectorHead, (uint8_t*) &blockHeader, BLOCK_HEADER_SIZE);
    9e4a:	002e      	movs	r6, r5
    9e4c:	e10f      	b.n	a06e <S_Nv_EarlyInit+0x28e>
        if (((sectorHeader.sequenceNumber ^ sectorHeader.sequenceParity) == 0xFFFFFFFFuL) &&
    9e4e:	ab02      	add	r3, sp, #8
    9e50:	2226      	movs	r2, #38	; 0x26
    9e52:	189b      	adds	r3, r3, r2
    9e54:	781b      	ldrb	r3, [r3, #0]
    9e56:	2b41      	cmp	r3, #65	; 0x41
    9e58:	d1db      	bne.n	9e12 <S_Nv_EarlyInit+0x32>
            (sectorHeader.signature[0] == (uint8_t) 'A') &&
    9e5a:	ab02      	add	r3, sp, #8
    9e5c:	3201      	adds	r2, #1
    9e5e:	189b      	adds	r3, r3, r2
    9e60:	781b      	ldrb	r3, [r3, #0]
    9e62:	2b54      	cmp	r3, #84	; 0x54
    9e64:	d1d5      	bne.n	9e12 <S_Nv_EarlyInit+0x32>
            (sectorHeader.signature[1] == (uint8_t) 'T') &&
    9e66:	ab02      	add	r3, sp, #8
    9e68:	3201      	adds	r2, #1
    9e6a:	189b      	adds	r3, r3, r2
    9e6c:	781b      	ldrb	r3, [r3, #0]
    9e6e:	2b53      	cmp	r3, #83	; 0x53
    9e70:	d1cf      	bne.n	9e12 <S_Nv_EarlyInit+0x32>
            (sectorHeader.signature[2] == (uint8_t) 'S') &&
    9e72:	ab02      	add	r3, sp, #8
    9e74:	3201      	adds	r2, #1
    9e76:	189b      	adds	r3, r3, r2
    9e78:	781b      	ldrb	r3, [r3, #0]
    9e7a:	2b4e      	cmp	r3, #78	; 0x4e
    9e7c:	d1c9      	bne.n	9e12 <S_Nv_EarlyInit+0x32>
            (sectorHeader.signature[3] == (uint8_t) 'N') &&
    9e7e:	ab02      	add	r3, sp, #8
    9e80:	3201      	adds	r2, #1
    9e82:	189b      	adds	r3, r3, r2
    9e84:	781b      	ldrb	r3, [r3, #0]
    9e86:	2b76      	cmp	r3, #118	; 0x76
    9e88:	d1c3      	bne.n	9e12 <S_Nv_EarlyInit+0x32>
            if ( sectorHeader.signature[5] == (uint8_t) '1')
    9e8a:	ab02      	add	r3, sp, #8
    9e8c:	3201      	adds	r2, #1
    9e8e:	189b      	adds	r3, r3, r2
    9e90:	781b      	ldrb	r3, [r3, #0]
    9e92:	2b31      	cmp	r3, #49	; 0x31
    9e94:	d106      	bne.n	9ea4 <S_Nv_EarlyInit+0xc4>
                if (pSectorHeaderSnv1->isActive == 0x0000u)
    9e96:	ab02      	add	r3, sp, #8
    9e98:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
    9e9a:	2b00      	cmp	r3, #0
    9e9c:	d1b9      	bne.n	9e12 <S_Nv_EarlyInit+0x32>
                    revisionNumber = SNV_REV_1;
    9e9e:	2301      	movs	r3, #1
    9ea0:	4698      	mov	r8, r3
    9ea2:	e00f      	b.n	9ec4 <S_Nv_EarlyInit+0xe4>
            else if (sectorHeader.signature[5] == (uint8_t) '2')
    9ea4:	2b32      	cmp	r3, #50	; 0x32
    9ea6:	d1b4      	bne.n	9e12 <S_Nv_EarlyInit+0x32>
    return ComputeCrc(((uint8_t*) pSectorHeader) + sizeof(pSectorHeader->headerCrc), (sizeof(SectorHeader_t)- sizeof(pSectorHeader->headerCrc)), 0xFFFFu); // skip headerCrc field
    9ea8:	4a89      	ldr	r2, [pc, #548]	; (a0d0 <S_Nv_EarlyInit+0x2f0>)
    9eaa:	2110      	movs	r1, #16
    9eac:	2026      	movs	r0, #38	; 0x26
    9eae:	ab02      	add	r3, sp, #8
    9eb0:	469c      	mov	ip, r3
    9eb2:	4460      	add	r0, ip
    9eb4:	4b87      	ldr	r3, [pc, #540]	; (a0d4 <S_Nv_EarlyInit+0x2f4>)
    9eb6:	4798      	blx	r3
              if (headerCrc == sectorHeader.headerCrc)
    9eb8:	ab02      	add	r3, sp, #8
    9eba:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
    9ebc:	4283      	cmp	r3, r0
    9ebe:	d1a8      	bne.n	9e12 <S_Nv_EarlyInit+0x32>
                  revisionNumber = SNV_REV_2;
    9ec0:	2302      	movs	r3, #2
    9ec2:	4698      	mov	r8, r3
            if ( sectorHeader.sequenceNumber < lastSectorSequence )
    9ec4:	454d      	cmp	r5, r9
    9ec6:	d2a4      	bcs.n	9e12 <S_Nv_EarlyInit+0x32>
                lastSectorSequence = sectorHeader.sequenceNumber;
    9ec8:	46a9      	mov	r9, r5
            if ( sectorHeader.sequenceNumber < lastSectorSequence )
    9eca:	0027      	movs	r7, r4
    9ecc:	e7a1      	b.n	9e12 <S_Nv_EarlyInit+0x32>
        s_sector = FIRST_SECTOR;
    9ece:	2200      	movs	r2, #0
    9ed0:	4b7c      	ldr	r3, [pc, #496]	; (a0c4 <S_Nv_EarlyInit+0x2e4>)
    9ed2:	701a      	strb	r2, [r3, #0]
            if ( EraseSector())
    9ed4:	4c80      	ldr	r4, [pc, #512]	; (a0d8 <S_Nv_EarlyInit+0x2f8>)
                s_nextPageAddressAfterCompact = 0xFFFFu;
    9ed6:	4e81      	ldr	r6, [pc, #516]	; (a0dc <S_Nv_EarlyInit+0x2fc>)
                if ( WriteSectorHeader(INITIAL_SECTOR_SEQUENCE_NUMBER))
    9ed8:	4d81      	ldr	r5, [pc, #516]	; (a0e0 <S_Nv_EarlyInit+0x300>)
    9eda:	e006      	b.n	9eea <S_Nv_EarlyInit+0x10a>
            s_sector++;
    9edc:	4a79      	ldr	r2, [pc, #484]	; (a0c4 <S_Nv_EarlyInit+0x2e4>)
    9ede:	7813      	ldrb	r3, [r2, #0]
    9ee0:	3301      	adds	r3, #1
    9ee2:	b2db      	uxtb	r3, r3
    9ee4:	7013      	strb	r3, [r2, #0]
            if ( s_sector >= (FIRST_SECTOR + SECTOR_COUNT) )
    9ee6:	2b01      	cmp	r3, #1
    9ee8:	d815      	bhi.n	9f16 <S_Nv_EarlyInit+0x136>
            if ( EraseSector())
    9eea:	47a0      	blx	r4
    9eec:	2800      	cmp	r0, #0
    9eee:	d0f5      	beq.n	9edc <S_Nv_EarlyInit+0xfc>
                s_nextPageAddressAfterCompact = 0xFFFFu;
    9ef0:	2301      	movs	r3, #1
    9ef2:	425b      	negs	r3, r3
    9ef4:	8033      	strh	r3, [r6, #0]
                if ( WriteSectorHeader(INITIAL_SECTOR_SEQUENCE_NUMBER))
    9ef6:	2002      	movs	r0, #2
    9ef8:	4240      	negs	r0, r0
    9efa:	47a8      	blx	r5
    9efc:	2800      	cmp	r0, #0
    9efe:	d0ed      	beq.n	9edc <S_Nv_EarlyInit+0xfc>
        s_itemCount = 0u;
    9f00:	2200      	movs	r2, #0
    9f02:	4b6e      	ldr	r3, [pc, #440]	; (a0bc <S_Nv_EarlyInit+0x2dc>)
    9f04:	701a      	strb	r2, [r3, #0]

        LoadSector(revisionNumber);
    }
    s_earlyInitDone = true;
    9f06:	2201      	movs	r2, #1
    9f08:	4b76      	ldr	r3, [pc, #472]	; (a0e4 <S_Nv_EarlyInit+0x304>)
    9f0a:	701a      	strb	r2, [r3, #0]
}
    9f0c:	b011      	add	sp, #68	; 0x44
    9f0e:	bc0c      	pop	{r2, r3}
    9f10:	4690      	mov	r8, r2
    9f12:	4699      	mov	r9, r3
    9f14:	bdf0      	pop	{r4, r5, r6, r7, pc}
                assert(false);
    9f16:	4b74      	ldr	r3, [pc, #464]	; (a0e8 <S_Nv_EarlyInit+0x308>)
    9f18:	4a74      	ldr	r2, [pc, #464]	; (a0ec <S_Nv_EarlyInit+0x30c>)
    9f1a:	4975      	ldr	r1, [pc, #468]	; (a0f0 <S_Nv_EarlyInit+0x310>)
    9f1c:	4875      	ldr	r0, [pc, #468]	; (a0f4 <S_Nv_EarlyInit+0x314>)
    9f1e:	4c76      	ldr	r4, [pc, #472]	; (a0f8 <S_Nv_EarlyInit+0x318>)
    9f20:	47a0      	blx	r4
        s_sectorHead = sizeof(SectorHeaderSnv1_t);
    9f22:	2210      	movs	r2, #16
    9f24:	4b68      	ldr	r3, [pc, #416]	; (a0c8 <S_Nv_EarlyInit+0x2e8>)
    9f26:	801a      	strh	r2, [r3, #0]
    9f28:	2110      	movs	r1, #16
            D_Nv_Read(s_sector, s_sectorHead, (uint8_t*) &blockHeader, BLOCK_HEADER_SIZE);
    9f2a:	4e66      	ldr	r6, [pc, #408]	; (a0c4 <S_Nv_EarlyInit+0x2e4>)
    9f2c:	4d64      	ldr	r5, [pc, #400]	; (a0c0 <S_Nv_EarlyInit+0x2e0>)
    return ComputeCrc(((uint8_t*) pBlockHeader) + sizeof(pBlockHeader->isActive), sizeof(BlockHeaderSNv1_t) - (sizeof(pBlockHeader->isActive)  + sizeof(pBlockHeader->headerCrc)), 0xFFFF); // skip is Active and headerCrc fields
    9f2e:	4f69      	ldr	r7, [pc, #420]	; (a0d4 <S_Nv_EarlyInit+0x2f4>)
    9f30:	e072      	b.n	a018 <S_Nv_EarlyInit+0x238>
            else if ( blockHeader.isActive != 0x0000u )
    9f32:	ab06      	add	r3, sp, #24
    9f34:	881b      	ldrh	r3, [r3, #0]
    9f36:	2b00      	cmp	r3, #0
    9f38:	d007      	beq.n	9f4a <S_Nv_EarlyInit+0x16a>
                UpdateSectorHead((BLOCK_HEADER_SIZE + blockHeader.blockLength), ITEM_16BYTE_ALIGNMENT);
    9f3a:	ab06      	add	r3, sp, #24
    9f3c:	88d8      	ldrh	r0, [r3, #6]
    9f3e:	3010      	adds	r0, #16
    9f40:	b280      	uxth	r0, r0
    9f42:	2101      	movs	r1, #1
    9f44:	4b61      	ldr	r3, [pc, #388]	; (a0cc <S_Nv_EarlyInit+0x2ec>)
    9f46:	4798      	blx	r3
    9f48:	e061      	b.n	a00e <S_Nv_EarlyInit+0x22e>
                uint16_t id = blockHeader.id;
    9f4a:	ab06      	add	r3, sp, #24
    9f4c:	885c      	ldrh	r4, [r3, #2]
                Item_t *cache = FindItemCache(id);
    9f4e:	0020      	movs	r0, r4
    9f50:	4b6a      	ldr	r3, [pc, #424]	; (a0fc <S_Nv_EarlyInit+0x31c>)
    9f52:	4798      	blx	r3
                if (cache == NULL)
    9f54:	2800      	cmp	r0, #0
    9f56:	d010      	beq.n	9f7a <S_Nv_EarlyInit+0x19a>
                cache->lastBlock = s_sectorHead;
    9f58:	4b5b      	ldr	r3, [pc, #364]	; (a0c8 <S_Nv_EarlyInit+0x2e8>)
    9f5a:	781a      	ldrb	r2, [r3, #0]
    9f5c:	7082      	strb	r2, [r0, #2]
    9f5e:	785b      	ldrb	r3, [r3, #1]
    9f60:	70c3      	strb	r3, [r0, #3]
                if ( blockHeader.itemLength == 0u )
    9f62:	ab06      	add	r3, sp, #24
    9f64:	891b      	ldrh	r3, [r3, #8]
    9f66:	2b00      	cmp	r3, #0
    9f68:	d00b      	beq.n	9f82 <S_Nv_EarlyInit+0x1a2>
                UpdateSectorHead((BLOCK_HEADER_SIZE + blockHeader.blockLength), ITEM_16BYTE_ALIGNMENT);
    9f6a:	ab06      	add	r3, sp, #24
    9f6c:	88d8      	ldrh	r0, [r3, #6]
    9f6e:	3010      	adds	r0, #16
    9f70:	b280      	uxth	r0, r0
    9f72:	2101      	movs	r1, #1
    9f74:	4b55      	ldr	r3, [pc, #340]	; (a0cc <S_Nv_EarlyInit+0x2ec>)
    9f76:	4798      	blx	r3
    9f78:	e049      	b.n	a00e <S_Nv_EarlyInit+0x22e>
                    cache = CreateItemCache(id);
    9f7a:	0020      	movs	r0, r4
    9f7c:	4b60      	ldr	r3, [pc, #384]	; (a100 <S_Nv_EarlyInit+0x320>)
    9f7e:	4798      	blx	r3
    9f80:	e7ea      	b.n	9f58 <S_Nv_EarlyInit+0x178>
                    DeleteItemCache(id);
    9f82:	0020      	movs	r0, r4
    9f84:	4b5f      	ldr	r3, [pc, #380]	; (a104 <S_Nv_EarlyInit+0x324>)
    9f86:	4798      	blx	r3
    9f88:	e7ef      	b.n	9f6a <S_Nv_EarlyInit+0x18a>
                uint16_t crc = ComputeDataCrc(s_sector, s_sectorHead, &blockHeader);
    9f8a:	4b4f      	ldr	r3, [pc, #316]	; (a0c8 <S_Nv_EarlyInit+0x2e8>)
    9f8c:	8819      	ldrh	r1, [r3, #0]
    9f8e:	4b4d      	ldr	r3, [pc, #308]	; (a0c4 <S_Nv_EarlyInit+0x2e4>)
    9f90:	7818      	ldrb	r0, [r3, #0]
    9f92:	aa02      	add	r2, sp, #8
    9f94:	4b5c      	ldr	r3, [pc, #368]	; (a108 <S_Nv_EarlyInit+0x328>)
    9f96:	4798      	blx	r3
                if (crc != blockHeader.dataCrc)
    9f98:	ab02      	add	r3, sp, #8
    9f9a:	881b      	ldrh	r3, [r3, #0]
    9f9c:	4283      	cmp	r3, r0
    9f9e:	d007      	beq.n	9fb0 <S_Nv_EarlyInit+0x1d0>
                    UpdateSectorHead((BLOCK_HEADER_SIZE + blockHeader.blockLength), itemAlignment);
    9fa0:	ab02      	add	r3, sp, #8
    9fa2:	88d8      	ldrh	r0, [r3, #6]
    9fa4:	3010      	adds	r0, #16
    9fa6:	b280      	uxth	r0, r0
    9fa8:	0021      	movs	r1, r4
    9faa:	4b48      	ldr	r3, [pc, #288]	; (a0cc <S_Nv_EarlyInit+0x2ec>)
    9fac:	4798      	blx	r3
    9fae:	e05e      	b.n	a06e <S_Nv_EarlyInit+0x28e>
                    uint16_t id = blockHeader.id;
    9fb0:	ab02      	add	r3, sp, #8
    9fb2:	885f      	ldrh	r7, [r3, #2]
                    Item_t *cache = FindItemCache(id);
    9fb4:	0038      	movs	r0, r7
    9fb6:	4b51      	ldr	r3, [pc, #324]	; (a0fc <S_Nv_EarlyInit+0x31c>)
    9fb8:	4798      	blx	r3
                    if (cache == NULL)
    9fba:	2800      	cmp	r0, #0
    9fbc:	d010      	beq.n	9fe0 <S_Nv_EarlyInit+0x200>
                    cache->lastBlock = s_sectorHead;
    9fbe:	4b42      	ldr	r3, [pc, #264]	; (a0c8 <S_Nv_EarlyInit+0x2e8>)
    9fc0:	781a      	ldrb	r2, [r3, #0]
    9fc2:	7082      	strb	r2, [r0, #2]
    9fc4:	785b      	ldrb	r3, [r3, #1]
    9fc6:	70c3      	strb	r3, [r0, #3]
                    if ( blockHeader.itemLength == 0u )
    9fc8:	ab02      	add	r3, sp, #8
    9fca:	891b      	ldrh	r3, [r3, #8]
    9fcc:	2b00      	cmp	r3, #0
    9fce:	d00b      	beq.n	9fe8 <S_Nv_EarlyInit+0x208>
                    UpdateSectorHead((BLOCK_HEADER_SIZE + blockHeader.blockLength), itemAlignment);
    9fd0:	ab02      	add	r3, sp, #8
    9fd2:	88d8      	ldrh	r0, [r3, #6]
    9fd4:	3010      	adds	r0, #16
    9fd6:	b280      	uxth	r0, r0
    9fd8:	0021      	movs	r1, r4
    9fda:	4b3c      	ldr	r3, [pc, #240]	; (a0cc <S_Nv_EarlyInit+0x2ec>)
    9fdc:	4798      	blx	r3
    9fde:	e046      	b.n	a06e <S_Nv_EarlyInit+0x28e>
                        cache = CreateItemCache(id);
    9fe0:	0038      	movs	r0, r7
    9fe2:	4b47      	ldr	r3, [pc, #284]	; (a100 <S_Nv_EarlyInit+0x320>)
    9fe4:	4798      	blx	r3
    9fe6:	e7ea      	b.n	9fbe <S_Nv_EarlyInit+0x1de>
                        DeleteItemCache(id);
    9fe8:	0038      	movs	r0, r7
    9fea:	4b46      	ldr	r3, [pc, #280]	; (a104 <S_Nv_EarlyInit+0x324>)
    9fec:	4798      	blx	r3
    9fee:	e7ef      	b.n	9fd0 <S_Nv_EarlyInit+0x1f0>
            else if ( blockHeader.headerCrc != ComputeHeaderCrcSnv1(&blockHeader) )
    9ff0:	ab06      	add	r3, sp, #24
    9ff2:	89dc      	ldrh	r4, [r3, #14]
    return ComputeCrc(((uint8_t*) pBlockHeader) + sizeof(pBlockHeader->isActive), sizeof(BlockHeaderSNv1_t) - (sizeof(pBlockHeader->isActive)  + sizeof(pBlockHeader->headerCrc)), 0xFFFF); // skip is Active and headerCrc fields
    9ff4:	4a36      	ldr	r2, [pc, #216]	; (a0d0 <S_Nv_EarlyInit+0x2f0>)
    9ff6:	210c      	movs	r1, #12
    9ff8:	2012      	movs	r0, #18
    9ffa:	ab02      	add	r3, sp, #8
    9ffc:	469c      	mov	ip, r3
    9ffe:	4460      	add	r0, ip
    a000:	47b8      	blx	r7
            else if ( blockHeader.headerCrc != ComputeHeaderCrcSnv1(&blockHeader) )
    a002:	4284      	cmp	r4, r0
    a004:	d095      	beq.n	9f32 <S_Nv_EarlyInit+0x152>
                UpdateSectorHead(BLOCK_HEADER_SIZE, ITEM_16BYTE_ALIGNMENT);
    a006:	2101      	movs	r1, #1
    a008:	2010      	movs	r0, #16
    a00a:	4b30      	ldr	r3, [pc, #192]	; (a0cc <S_Nv_EarlyInit+0x2ec>)
    a00c:	4798      	blx	r3
        while ( s_sectorHead < SECTOR_SIZE )
    a00e:	4b2e      	ldr	r3, [pc, #184]	; (a0c8 <S_Nv_EarlyInit+0x2e8>)
    a010:	8819      	ldrh	r1, [r3, #0]
    a012:	4b3e      	ldr	r3, [pc, #248]	; (a10c <S_Nv_EarlyInit+0x32c>)
    a014:	4299      	cmp	r1, r3
    a016:	d812      	bhi.n	a03e <S_Nv_EarlyInit+0x25e>
            D_Nv_Read(s_sector, s_sectorHead, (uint8_t*) &blockHeader, BLOCK_HEADER_SIZE);
    a018:	ac06      	add	r4, sp, #24
    a01a:	7830      	ldrb	r0, [r6, #0]
    a01c:	2310      	movs	r3, #16
    a01e:	0022      	movs	r2, r4
    a020:	47a8      	blx	r5
        if ( pData[i] != 0xFFu )
    a022:	7823      	ldrb	r3, [r4, #0]
    a024:	2bff      	cmp	r3, #255	; 0xff
    a026:	d1e3      	bne.n	9ff0 <S_Nv_EarlyInit+0x210>
    a028:	ab06      	add	r3, sp, #24
    a02a:	211f      	movs	r1, #31
    a02c:	aa02      	add	r2, sp, #8
    a02e:	4694      	mov	ip, r2
    a030:	4461      	add	r1, ip
    a032:	785a      	ldrb	r2, [r3, #1]
    a034:	2aff      	cmp	r2, #255	; 0xff
    a036:	d1db      	bne.n	9ff0 <S_Nv_EarlyInit+0x210>
    a038:	3301      	adds	r3, #1
    for ( uint16_t i = 0u; i < length; i++ )
    a03a:	428b      	cmp	r3, r1
    a03c:	d1f9      	bne.n	a032 <S_Nv_EarlyInit+0x252>
        if ( !CompactSector() )
    a03e:	4b34      	ldr	r3, [pc, #208]	; (a110 <S_Nv_EarlyInit+0x330>)
    a040:	4798      	blx	r3
    a042:	2800      	cmp	r0, #0
    a044:	d000      	beq.n	a048 <S_Nv_EarlyInit+0x268>
    a046:	e75e      	b.n	9f06 <S_Nv_EarlyInit+0x126>
            assert(false);
    a048:	4b27      	ldr	r3, [pc, #156]	; (a0e8 <S_Nv_EarlyInit+0x308>)
    a04a:	4a32      	ldr	r2, [pc, #200]	; (a114 <S_Nv_EarlyInit+0x334>)
    a04c:	4932      	ldr	r1, [pc, #200]	; (a118 <S_Nv_EarlyInit+0x338>)
    a04e:	4829      	ldr	r0, [pc, #164]	; (a0f4 <S_Nv_EarlyInit+0x314>)
    a050:	4c29      	ldr	r4, [pc, #164]	; (a0f8 <S_Nv_EarlyInit+0x318>)
    a052:	47a0      	blx	r4
            else if ( blockHeader.headerCrc != ComputeHeaderCrc(&blockHeader) )
    a054:	ab02      	add	r3, sp, #8
    a056:	89df      	ldrh	r7, [r3, #14]
    return ComputeCrc(((uint8_t*) pBlockHeader), (sizeof(BlockHeader_t) - sizeof(pBlockHeader->headerCrc)), 0xFFFFu); // skip headerCrc field
    a058:	4a1d      	ldr	r2, [pc, #116]	; (a0d0 <S_Nv_EarlyInit+0x2f0>)
    a05a:	210e      	movs	r1, #14
    a05c:	0018      	movs	r0, r3
    a05e:	4b1d      	ldr	r3, [pc, #116]	; (a0d4 <S_Nv_EarlyInit+0x2f4>)
    a060:	4798      	blx	r3
            else if ( blockHeader.headerCrc != ComputeHeaderCrc(&blockHeader) )
    a062:	4287      	cmp	r7, r0
    a064:	d091      	beq.n	9f8a <S_Nv_EarlyInit+0x1aa>
                UpdateSectorHead(BLOCK_HEADER_SIZE, itemAlignment);
    a066:	0021      	movs	r1, r4
    a068:	2010      	movs	r0, #16
    a06a:	4b18      	ldr	r3, [pc, #96]	; (a0cc <S_Nv_EarlyInit+0x2ec>)
    a06c:	4798      	blx	r3
        while ( s_sectorHead < SECTOR_SIZE )
    a06e:	882b      	ldrh	r3, [r5, #0]
    a070:	4a26      	ldr	r2, [pc, #152]	; (a10c <S_Nv_EarlyInit+0x32c>)
    a072:	4293      	cmp	r3, r2
    a074:	d900      	bls.n	a078 <S_Nv_EarlyInit+0x298>
    a076:	e746      	b.n	9f06 <S_Nv_EarlyInit+0x126>
            if ((sectorHeader.nextPageAddressAfterCompact != 0xFFFFu)  && (s_sectorHead < sectorHeader.nextPageAddressAfterCompact))
    a078:	aa06      	add	r2, sp, #24
    a07a:	8a12      	ldrh	r2, [r2, #16]
    a07c:	4914      	ldr	r1, [pc, #80]	; (a0d0 <S_Nv_EarlyInit+0x2f0>)
    a07e:	428a      	cmp	r2, r1
    a080:	d002      	beq.n	a088 <S_Nv_EarlyInit+0x2a8>
                itemAlignment = ITEM_NO_ALIGNMENT;
    a082:	2400      	movs	r4, #0
            if ((sectorHeader.nextPageAddressAfterCompact != 0xFFFFu)  && (s_sectorHead < sectorHeader.nextPageAddressAfterCompact))
    a084:	429a      	cmp	r2, r3
    a086:	d803      	bhi.n	a090 <S_Nv_EarlyInit+0x2b0>
                UpdateSectorHead(0, itemAlignment);
    a088:	2102      	movs	r1, #2
    a08a:	2000      	movs	r0, #0
    a08c:	47c0      	blx	r8
                itemAlignment = ITEM_64BYTE_ALIGNMENT;
    a08e:	2402      	movs	r4, #2
            D_Nv_Read(s_sector, s_sectorHead, (uint8_t*) &blockHeader, BLOCK_HEADER_SIZE);
    a090:	8831      	ldrh	r1, [r6, #0]
    a092:	4b0c      	ldr	r3, [pc, #48]	; (a0c4 <S_Nv_EarlyInit+0x2e4>)
    a094:	7818      	ldrb	r0, [r3, #0]
    a096:	2310      	movs	r3, #16
    a098:	aa02      	add	r2, sp, #8
    a09a:	4f09      	ldr	r7, [pc, #36]	; (a0c0 <S_Nv_EarlyInit+0x2e0>)
    a09c:	47b8      	blx	r7
        if ( pData[i] != 0xFFu )
    a09e:	ab02      	add	r3, sp, #8
    a0a0:	781b      	ldrb	r3, [r3, #0]
    a0a2:	2bff      	cmp	r3, #255	; 0xff
    a0a4:	d1d6      	bne.n	a054 <S_Nv_EarlyInit+0x274>
    a0a6:	ab02      	add	r3, sp, #8
    a0a8:	210f      	movs	r1, #15
    a0aa:	469c      	mov	ip, r3
    a0ac:	4461      	add	r1, ip
    a0ae:	785a      	ldrb	r2, [r3, #1]
    a0b0:	2aff      	cmp	r2, #255	; 0xff
    a0b2:	d1cf      	bne.n	a054 <S_Nv_EarlyInit+0x274>
    a0b4:	3301      	adds	r3, #1
    for ( uint16_t i = 0u; i < length; i++ )
    a0b6:	428b      	cmp	r3, r1
    a0b8:	d1f9      	bne.n	a0ae <S_Nv_EarlyInit+0x2ce>
    a0ba:	e724      	b.n	9f06 <S_Nv_EarlyInit+0x126>
    a0bc:	200003c8 	.word	0x200003c8
    a0c0:	0000901d 	.word	0x0000901d
    a0c4:	200003d0 	.word	0x200003d0
    a0c8:	200003d2 	.word	0x200003d2
    a0cc:	00009289 	.word	0x00009289
    a0d0:	0000ffff 	.word	0x0000ffff
    a0d4:	000092c5 	.word	0x000092c5
    a0d8:	000095c9 	.word	0x000095c9
    a0dc:	200003ca 	.word	0x200003ca
    a0e0:	00009631 	.word	0x00009631
    a0e4:	2000039c 	.word	0x2000039c
    a0e8:	00016218 	.word	0x00016218
    a0ec:	000163d0 	.word	0x000163d0
    a0f0:	0000052b 	.word	0x0000052b
    a0f4:	00016294 	.word	0x00016294
    a0f8:	00014c75 	.word	0x00014c75
    a0fc:	00009465 	.word	0x00009465
    a100:	000094f5 	.word	0x000094f5
    a104:	00009555 	.word	0x00009555
    a108:	000093bd 	.word	0x000093bd
    a10c:	00001fff 	.word	0x00001fff
    a110:	00009731 	.word	0x00009731
    a114:	00016390 	.word	0x00016390
    a118:	00000336 	.word	0x00000336

0000a11c <S_Nv_Init>:


void S_Nv_Init(void)
{
    a11c:	b510      	push	{r4, lr}
    if (!s_earlyInitDone)
    a11e:	4b08      	ldr	r3, [pc, #32]	; (a140 <S_Nv_Init+0x24>)
    a120:	781b      	ldrb	r3, [r3, #0]
    a122:	2b00      	cmp	r3, #0
    a124:	d008      	beq.n	a138 <S_Nv_Init+0x1c>
    {
        S_Nv_EarlyInit();
    }

    eraseSectorTimer.handler = eraseSectorTimerFired;
    a126:	4b07      	ldr	r3, [pc, #28]	; (a144 <S_Nv_Init+0x28>)
    a128:	4a07      	ldr	r2, [pc, #28]	; (a148 <S_Nv_Init+0x2c>)
    a12a:	611a      	str	r2, [r3, #16]
    eraseSectorTimer.timeout = ERASE_SECTOR_DELAY_MS;
    a12c:	4a07      	ldr	r2, [pc, #28]	; (a14c <S_Nv_Init+0x30>)
    a12e:	605a      	str	r2, [r3, #4]
    eraseSectorTimer.interval = ERASE_SECTOR_DELAY_MS;
    a130:	609a      	str	r2, [r3, #8]
    eraseSectorTimer.mode = SYS_TIMER_INTERVAL_MODE;
    a132:	2200      	movs	r2, #0
    a134:	731a      	strb	r2, [r3, #12]
}
    a136:	bd10      	pop	{r4, pc}
        S_Nv_EarlyInit();
    a138:	4b05      	ldr	r3, [pc, #20]	; (a150 <S_Nv_Init+0x34>)
    a13a:	4798      	blx	r3
    a13c:	e7f3      	b.n	a126 <S_Nv_Init+0xa>
    a13e:	46c0      	nop			; (mov r8, r8)
    a140:	2000039c 	.word	0x2000039c
    a144:	20000384 	.word	0x20000384
    a148:	000095a5 	.word	0x000095a5
    a14c:	00001b58 	.word	0x00001b58
    a150:	00009de1 	.word	0x00009de1

0000a154 <S_Nv_Write_Impl>:
#if defined(S_XNV_LOGGING)
static S_Nv_ReturnValue_t S_Nv_Write_Original(S_Nv_ItemId_t id, uint16_t offset, uint16_t dataLength, void* pData)
#else
S_Nv_ReturnValue_t S_Nv_Write_Impl(S_Nv_ItemId_t id, uint16_t offset, uint16_t dataLength, void* pData)
#endif
{
    a154:	b5f0      	push	{r4, r5, r6, r7, lr}
    a156:	46ce      	mov	lr, r9
    a158:	4647      	mov	r7, r8
    a15a:	b580      	push	{r7, lr}
    a15c:	b087      	sub	sp, #28
    a15e:	0004      	movs	r4, r0
    a160:	9101      	str	r1, [sp, #4]
    a162:	0015      	movs	r5, r2
    a164:	001f      	movs	r7, r3
    assert((id != 0u) && (pData != NULL));
    a166:	2800      	cmp	r0, #0
    a168:	d00c      	beq.n	a184 <S_Nv_Write_Impl+0x30>
    a16a:	2b00      	cmp	r3, #0
    a16c:	d00a      	beq.n	a184 <S_Nv_Write_Impl+0x30>

    if ( PowerSupplyTooLow() )
    a16e:	4b35      	ldr	r3, [pc, #212]	; (a244 <S_Nv_Write_Impl+0xf0>)
    a170:	4798      	blx	r3
    {
        return S_Nv_ReturnValue_PowerSupplyTooLow;
    a172:	2305      	movs	r3, #5
    if ( PowerSupplyTooLow() )
    a174:	2800      	cmp	r0, #0
    a176:	d00b      	beq.n	a190 <S_Nv_Write_Impl+0x3c>
        //SYS_StartTimer(&compactItemTimer);
        }
    }

    return S_Nv_ReturnValue_Ok;
}
    a178:	0018      	movs	r0, r3
    a17a:	b007      	add	sp, #28
    a17c:	bc0c      	pop	{r2, r3}
    a17e:	4690      	mov	r8, r2
    a180:	4699      	mov	r9, r3
    a182:	bdf0      	pop	{r4, r5, r6, r7, pc}
    assert((id != 0u) && (pData != NULL));
    a184:	4b30      	ldr	r3, [pc, #192]	; (a248 <S_Nv_Write_Impl+0xf4>)
    a186:	4a31      	ldr	r2, [pc, #196]	; (a24c <S_Nv_Write_Impl+0xf8>)
    a188:	4931      	ldr	r1, [pc, #196]	; (a250 <S_Nv_Write_Impl+0xfc>)
    a18a:	4832      	ldr	r0, [pc, #200]	; (a254 <S_Nv_Write_Impl+0x100>)
    a18c:	4c32      	ldr	r4, [pc, #200]	; (a258 <S_Nv_Write_Impl+0x104>)
    a18e:	47a0      	blx	r4
    CompactSectorIfNeeded(BLOCK_HEADER_SIZE + dataLength);
    a190:	0028      	movs	r0, r5
    a192:	3010      	adds	r0, #16
    a194:	b280      	uxth	r0, r0
    a196:	4b31      	ldr	r3, [pc, #196]	; (a25c <S_Nv_Write_Impl+0x108>)
    a198:	4798      	blx	r3
    Item_t *cache = FindItemCache(id);
    a19a:	0020      	movs	r0, r4
    a19c:	4b30      	ldr	r3, [pc, #192]	; (a260 <S_Nv_Write_Impl+0x10c>)
    a19e:	4798      	blx	r3
    a1a0:	0006      	movs	r6, r0
        return S_Nv_ReturnValue_DoesNotExist;
    a1a2:	2303      	movs	r3, #3
    if ( cache == NULL )
    a1a4:	2800      	cmp	r0, #0
    a1a6:	d0e7      	beq.n	a178 <S_Nv_Write_Impl+0x24>
    uint16_t blockPointer = cache->lastBlock;
    a1a8:	7883      	ldrb	r3, [r0, #2]
    a1aa:	78c4      	ldrb	r4, [r0, #3]
    a1ac:	0224      	lsls	r4, r4, #8
    a1ae:	431c      	orrs	r4, r3
    a1b0:	46a0      	mov	r8, r4
    D_Nv_Read(s_sector, blockPointer, (uint8_t*) &blockHeader, BLOCK_HEADER_SIZE);
    a1b2:	4b2c      	ldr	r3, [pc, #176]	; (a264 <S_Nv_Write_Impl+0x110>)
    a1b4:	7818      	ldrb	r0, [r3, #0]
    a1b6:	2310      	movs	r3, #16
    a1b8:	aa02      	add	r2, sp, #8
    a1ba:	0021      	movs	r1, r4
    a1bc:	4c2a      	ldr	r4, [pc, #168]	; (a268 <S_Nv_Write_Impl+0x114>)
    a1be:	47a0      	blx	r4
    if ( ((uint32_t) offset + (uint32_t) dataLength) > (uint32_t) blockHeader.itemLength )
    a1c0:	ab02      	add	r3, sp, #8
    a1c2:	8919      	ldrh	r1, [r3, #8]
    a1c4:	9b01      	ldr	r3, [sp, #4]
    a1c6:	195a      	adds	r2, r3, r5
        return S_Nv_ReturnValue_BeyondEnd;
    a1c8:	2304      	movs	r3, #4
    if ( ((uint32_t) offset + (uint32_t) dataLength) > (uint32_t) blockHeader.itemLength )
    a1ca:	428a      	cmp	r2, r1
    a1cc:	d8d4      	bhi.n	a178 <S_Nv_Write_Impl+0x24>
    blockHeader.blockOffset = offset;
    a1ce:	ab02      	add	r3, sp, #8
    a1d0:	466a      	mov	r2, sp
    a1d2:	8892      	ldrh	r2, [r2, #4]
    a1d4:	809a      	strh	r2, [r3, #4]
    blockHeader.blockLength = dataLength;
    a1d6:	80dd      	strh	r5, [r3, #6]
    blockHeader.previousBlock = blockPointer;
    a1d8:	4642      	mov	r2, r8
    a1da:	815a      	strh	r2, [r3, #10]
    if ( blockHeader.blockLength == blockHeader.itemLength )
    a1dc:	428d      	cmp	r5, r1
    a1de:	d02c      	beq.n	a23a <S_Nv_Write_Impl+0xe6>
        blockHeader.writeCount++;
    a1e0:	ab02      	add	r3, sp, #8
    a1e2:	899b      	ldrh	r3, [r3, #12]
    a1e4:	3301      	adds	r3, #1
    a1e6:	aa02      	add	r2, sp, #8
    a1e8:	8193      	strh	r3, [r2, #12]
    uint16_t newBlockPointer = s_sectorHead;
    a1ea:	4b20      	ldr	r3, [pc, #128]	; (a26c <S_Nv_Write_Impl+0x118>)
    a1ec:	881c      	ldrh	r4, [r3, #0]
    if ( !WriteDataBlockAndHeader(&blockHeader, (uint8_t*) pData) )
    a1ee:	0039      	movs	r1, r7
    a1f0:	a802      	add	r0, sp, #8
    a1f2:	4b1f      	ldr	r3, [pc, #124]	; (a270 <S_Nv_Write_Impl+0x11c>)
    a1f4:	4798      	blx	r3
        return S_Nv_ReturnValue_Failure;
    a1f6:	2301      	movs	r3, #1
    if ( !WriteDataBlockAndHeader(&blockHeader, (uint8_t*) pData) )
    a1f8:	2800      	cmp	r0, #0
    a1fa:	d0bd      	beq.n	a178 <S_Nv_Write_Impl+0x24>
    cache->lastBlock = newBlockPointer;
    a1fc:	70b4      	strb	r4, [r6, #2]
    a1fe:	0a24      	lsrs	r4, r4, #8
    a200:	70f4      	strb	r4, [r6, #3]
    if ( blockHeader.writeCount > COMPACT_ITEM_THRESHOLD )
    a202:	ab02      	add	r3, sp, #8
    a204:	899a      	ldrh	r2, [r3, #12]
    return S_Nv_ReturnValue_Ok;
    a206:	2300      	movs	r3, #0
    if ( blockHeader.writeCount > COMPACT_ITEM_THRESHOLD )
    a208:	2a64      	cmp	r2, #100	; 0x64
    a20a:	d9b5      	bls.n	a178 <S_Nv_Write_Impl+0x24>
        s_compactItemId = blockHeader.id;
    a20c:	ab02      	add	r3, sp, #8
    a20e:	885a      	ldrh	r2, [r3, #2]
    a210:	4b18      	ldr	r3, [pc, #96]	; (a274 <S_Nv_Write_Impl+0x120>)
    a212:	801a      	strh	r2, [r3, #0]
        s_compactItemLength = 0u;           // no need to resize this item here
    a214:	2200      	movs	r2, #0
    a216:	4b18      	ldr	r3, [pc, #96]	; (a278 <S_Nv_Write_Impl+0x124>)
    a218:	801a      	strh	r2, [r3, #0]
        if (!SYS_TimerStarted(&compactItemTimer))
    a21a:	4818      	ldr	r0, [pc, #96]	; (a27c <S_Nv_Write_Impl+0x128>)
    a21c:	4b18      	ldr	r3, [pc, #96]	; (a280 <S_Nv_Write_Impl+0x12c>)
    a21e:	4798      	blx	r3
    return S_Nv_ReturnValue_Ok;
    a220:	2300      	movs	r3, #0
        if (!SYS_TimerStarted(&compactItemTimer))
    a222:	2800      	cmp	r0, #0
    a224:	d1a8      	bne.n	a178 <S_Nv_Write_Impl+0x24>
        compactItemTimer.handler = compactItemTimerFired;
    a226:	4b15      	ldr	r3, [pc, #84]	; (a27c <S_Nv_Write_Impl+0x128>)
    a228:	4a16      	ldr	r2, [pc, #88]	; (a284 <S_Nv_Write_Impl+0x130>)
    a22a:	611a      	str	r2, [r3, #16]
        compactItemTimer.timeout = COMPACT_ITEM_DELAY_MS;
    a22c:	4a16      	ldr	r2, [pc, #88]	; (a288 <S_Nv_Write_Impl+0x134>)
    a22e:	605a      	str	r2, [r3, #4]
        compactItemTimer.interval = COMPACT_ITEM_DELAY_MS;
    a230:	609a      	str	r2, [r3, #8]
        compactItemTimer.mode = SYS_TIMER_INTERVAL_MODE;
    a232:	2200      	movs	r2, #0
    a234:	731a      	strb	r2, [r3, #12]
    return S_Nv_ReturnValue_Ok;
    a236:	2300      	movs	r3, #0
    a238:	e79e      	b.n	a178 <S_Nv_Write_Impl+0x24>
        blockHeader.writeCount = 0u;
    a23a:	2300      	movs	r3, #0
    a23c:	aa02      	add	r2, sp, #8
    a23e:	8193      	strh	r3, [r2, #12]
    a240:	e7d3      	b.n	a1ea <S_Nv_Write_Impl+0x96>
    a242:	46c0      	nop			; (mov r8, r8)
    a244:	0000926d 	.word	0x0000926d
    a248:	00016328 	.word	0x00016328
    a24c:	000163f4 	.word	0x000163f4
    a250:	00000596 	.word	0x00000596
    a254:	00016294 	.word	0x00016294
    a258:	00014c75 	.word	0x00014c75
    a25c:	000099e1 	.word	0x000099e1
    a260:	00009465 	.word	0x00009465
    a264:	200003d0 	.word	0x200003d0
    a268:	0000901d 	.word	0x0000901d
    a26c:	200003d2 	.word	0x200003d2
    a270:	00009c95 	.word	0x00009c95
    a274:	20000398 	.word	0x20000398
    a278:	2000039a 	.word	0x2000039a
    a27c:	20000258 	.word	0x20000258
    a280:	0000bff1 	.word	0x0000bff1
    a284:	00009c89 	.word	0x00009c89
    a288:	00000bb8 	.word	0x00000bb8

0000a28c <S_Nv_Read_Impl>:
#if defined(S_XNV_LOGGING)
static S_Nv_ReturnValue_t S_Nv_Read_Original(S_Nv_ItemId_t id, uint16_t offset, uint16_t dataLength, void* pData)
#else
S_Nv_ReturnValue_t S_Nv_Read_Impl(S_Nv_ItemId_t id, uint16_t offset, uint16_t dataLength, void* pData)
#endif
{
    a28c:	b5f0      	push	{r4, r5, r6, r7, lr}
    a28e:	b083      	sub	sp, #12
    a290:	000c      	movs	r4, r1
    a292:	0015      	movs	r5, r2
    a294:	001e      	movs	r6, r3
    assert((id != 0u) && (pData != NULL));
    a296:	2800      	cmp	r0, #0
    a298:	d009      	beq.n	a2ae <S_Nv_Read_Impl+0x22>
    a29a:	2b00      	cmp	r3, #0
    a29c:	d007      	beq.n	a2ae <S_Nv_Read_Impl+0x22>

    // get the pointer to the last written block for the item
    uint16_t lastBlockPointer = FindItem(id);
    a29e:	4b10      	ldr	r3, [pc, #64]	; (a2e0 <S_Nv_Read_Impl+0x54>)
    a2a0:	4798      	blx	r3
    if ( lastBlockPointer == 0x0000u )
    {
        // item does not exist
        return S_Nv_ReturnValue_DoesNotExist;
    a2a2:	2303      	movs	r3, #3
    if ( lastBlockPointer == 0x0000u )
    a2a4:	2800      	cmp	r0, #0
    a2a6:	d108      	bne.n	a2ba <S_Nv_Read_Impl+0x2e>
    {
        return S_Nv_ReturnValue_BeyondEnd;
    }

    return S_Nv_ReturnValue_Ok;
}
    a2a8:	0018      	movs	r0, r3
    a2aa:	b003      	add	sp, #12
    a2ac:	bdf0      	pop	{r4, r5, r6, r7, pc}
    assert((id != 0u) && (pData != NULL));
    a2ae:	4b0d      	ldr	r3, [pc, #52]	; (a2e4 <S_Nv_Read_Impl+0x58>)
    a2b0:	4a0d      	ldr	r2, [pc, #52]	; (a2e8 <S_Nv_Read_Impl+0x5c>)
    a2b2:	490e      	ldr	r1, [pc, #56]	; (a2ec <S_Nv_Read_Impl+0x60>)
    a2b4:	480e      	ldr	r0, [pc, #56]	; (a2f0 <S_Nv_Read_Impl+0x64>)
    a2b6:	4c0f      	ldr	r4, [pc, #60]	; (a2f4 <S_Nv_Read_Impl+0x68>)
    a2b8:	47a0      	blx	r4
    if ( ((uint32_t) offset + (uint32_t) dataLength) >= 0x10000uL )
    a2ba:	1962      	adds	r2, r4, r5
    a2bc:	490e      	ldr	r1, [pc, #56]	; (a2f8 <S_Nv_Read_Impl+0x6c>)
        return S_Nv_ReturnValue_BeyondEnd;
    a2be:	3301      	adds	r3, #1
    if ( ((uint32_t) offset + (uint32_t) dataLength) >= 0x10000uL )
    a2c0:	428a      	cmp	r2, r1
    a2c2:	d8f1      	bhi.n	a2a8 <S_Nv_Read_Impl+0x1c>
    if ( !GatherData(s_sector, lastBlockPointer, offset, dataLength, pData ))
    a2c4:	4b0d      	ldr	r3, [pc, #52]	; (a2fc <S_Nv_Read_Impl+0x70>)
    a2c6:	781f      	ldrb	r7, [r3, #0]
    a2c8:	9600      	str	r6, [sp, #0]
    a2ca:	002b      	movs	r3, r5
    a2cc:	0022      	movs	r2, r4
    a2ce:	0001      	movs	r1, r0
    a2d0:	0038      	movs	r0, r7
    a2d2:	4c0b      	ldr	r4, [pc, #44]	; (a300 <S_Nv_Read_Impl+0x74>)
    a2d4:	47a0      	blx	r4
    return S_Nv_ReturnValue_Ok;
    a2d6:	4243      	negs	r3, r0
    a2d8:	4143      	adcs	r3, r0
    a2da:	009b      	lsls	r3, r3, #2
    a2dc:	e7e4      	b.n	a2a8 <S_Nv_Read_Impl+0x1c>
    a2de:	46c0      	nop			; (mov r8, r8)
    a2e0:	000094d9 	.word	0x000094d9
    a2e4:	00016328 	.word	0x00016328
    a2e8:	00016404 	.word	0x00016404
    a2ec:	000005ee 	.word	0x000005ee
    a2f0:	00016294 	.word	0x00016294
    a2f4:	00014c75 	.word	0x00014c75
    a2f8:	0000ffff 	.word	0x0000ffff
    a2fc:	200003d0 	.word	0x200003d0
    a300:	00009305 	.word	0x00009305

0000a304 <S_Nv_ItemLength_Impl>:

/** Interface function, see \ref S_Nv_ItemLength. */
uint16_t S_Nv_ItemLength_Impl(S_Nv_ItemId_t id)
{
    a304:	b510      	push	{r4, lr}
    a306:	b084      	sub	sp, #16
    assert(id != 0u);
    a308:	2800      	cmp	r0, #0
    a30a:	d005      	beq.n	a318 <S_Nv_ItemLength_Impl+0x14>

    uint16_t blockPointer = FindItem(id);
    a30c:	4b0a      	ldr	r3, [pc, #40]	; (a338 <S_Nv_ItemLength_Impl+0x34>)
    a30e:	4798      	blx	r3
    a310:	1e01      	subs	r1, r0, #0
    if ( blockPointer == 0x0000u )
    a312:	d107      	bne.n	a324 <S_Nv_ItemLength_Impl+0x20>

    // read last written item block header
    BlockHeader_t blockHeader;
    D_Nv_Read(s_sector, blockPointer, (uint8_t*) &blockHeader, BLOCK_HEADER_SIZE);
    return blockHeader.itemLength;
}
    a314:	b004      	add	sp, #16
    a316:	bd10      	pop	{r4, pc}
    assert(id != 0u);
    a318:	4b08      	ldr	r3, [pc, #32]	; (a33c <S_Nv_ItemLength_Impl+0x38>)
    a31a:	4a09      	ldr	r2, [pc, #36]	; (a340 <S_Nv_ItemLength_Impl+0x3c>)
    a31c:	4909      	ldr	r1, [pc, #36]	; (a344 <S_Nv_ItemLength_Impl+0x40>)
    a31e:	480a      	ldr	r0, [pc, #40]	; (a348 <S_Nv_ItemLength_Impl+0x44>)
    a320:	4c0a      	ldr	r4, [pc, #40]	; (a34c <S_Nv_ItemLength_Impl+0x48>)
    a322:	47a0      	blx	r4
    D_Nv_Read(s_sector, blockPointer, (uint8_t*) &blockHeader, BLOCK_HEADER_SIZE);
    a324:	4b0a      	ldr	r3, [pc, #40]	; (a350 <S_Nv_ItemLength_Impl+0x4c>)
    a326:	7818      	ldrb	r0, [r3, #0]
    a328:	2310      	movs	r3, #16
    a32a:	466a      	mov	r2, sp
    a32c:	4c09      	ldr	r4, [pc, #36]	; (a354 <S_Nv_ItemLength_Impl+0x50>)
    a32e:	47a0      	blx	r4
    return blockHeader.itemLength;
    a330:	466b      	mov	r3, sp
    a332:	8918      	ldrh	r0, [r3, #8]
    a334:	e7ee      	b.n	a314 <S_Nv_ItemLength_Impl+0x10>
    a336:	46c0      	nop			; (mov r8, r8)
    a338:	000094d9 	.word	0x000094d9
    a33c:	0001631c 	.word	0x0001631c
    a340:	00016414 	.word	0x00016414
    a344:	0000060b 	.word	0x0000060b
    a348:	00016294 	.word	0x00016294
    a34c:	00014c75 	.word	0x00014c75
    a350:	200003d0 	.word	0x200003d0
    a354:	0000901d 	.word	0x0000901d

0000a358 <S_Nv_ItemInit_Impl>:
{
    a358:	b5f0      	push	{r4, r5, r6, r7, lr}
    a35a:	b085      	sub	sp, #20
    a35c:	0004      	movs	r4, r0
    a35e:	000e      	movs	r6, r1
    a360:	0015      	movs	r5, r2
    assert((id != 0u) && (id < 0xF000u) && (itemLength <= MAX_ITEM_LENGTH));
    a362:	1e43      	subs	r3, r0, #1
    a364:	b29b      	uxth	r3, r3
    a366:	4a2e      	ldr	r2, [pc, #184]	; (a420 <S_Nv_ItemInit_Impl+0xc8>)
    a368:	4293      	cmp	r3, r2
    a36a:	d81e      	bhi.n	a3aa <S_Nv_ItemInit_Impl+0x52>
    a36c:	2380      	movs	r3, #128	; 0x80
    a36e:	011b      	lsls	r3, r3, #4
    a370:	4299      	cmp	r1, r3
    a372:	d81a      	bhi.n	a3aa <S_Nv_ItemInit_Impl+0x52>
    if ( FindItem(id) != 0x0000u )
    a374:	4b2b      	ldr	r3, [pc, #172]	; (a424 <S_Nv_ItemInit_Impl+0xcc>)
    a376:	4798      	blx	r3
    a378:	2800      	cmp	r0, #0
    a37a:	d01d      	beq.n	a3b8 <S_Nv_ItemInit_Impl+0x60>
        uint16_t oldItemLength = S_Nv_ItemLength(id);
    a37c:	0020      	movs	r0, r4
    a37e:	4b2a      	ldr	r3, [pc, #168]	; (a428 <S_Nv_ItemInit_Impl+0xd0>)
    a380:	4798      	blx	r3
        if ( oldItemLength != itemLength )
    a382:	4286      	cmp	r6, r0
    a384:	d007      	beq.n	a396 <S_Nv_ItemInit_Impl+0x3e>
            s_compactItemId = id;
    a386:	4b29      	ldr	r3, [pc, #164]	; (a42c <S_Nv_ItemInit_Impl+0xd4>)
    a388:	801c      	strh	r4, [r3, #0]
            s_compactItemLength = itemLength;
    a38a:	4b29      	ldr	r3, [pc, #164]	; (a430 <S_Nv_ItemInit_Impl+0xd8>)
    a38c:	801e      	strh	r6, [r3, #0]
            S_Nv_ReturnValue_t resizeResult = CompactItem();
    a38e:	4b29      	ldr	r3, [pc, #164]	; (a434 <S_Nv_ItemInit_Impl+0xdc>)
    a390:	4798      	blx	r3
    a392:	1e03      	subs	r3, r0, #0
            if ( resizeResult != S_Nv_ReturnValue_Ok )
    a394:	d115      	bne.n	a3c2 <S_Nv_ItemInit_Impl+0x6a>
        if (pDefaultData != NULL)
    a396:	2d00      	cmp	r5, #0
    a398:	d040      	beq.n	a41c <S_Nv_ItemInit_Impl+0xc4>
            return S_Nv_Read(id, 0u, itemLength, pDefaultData);
    a39a:	002b      	movs	r3, r5
    a39c:	0032      	movs	r2, r6
    a39e:	2100      	movs	r1, #0
    a3a0:	0020      	movs	r0, r4
    a3a2:	4c25      	ldr	r4, [pc, #148]	; (a438 <S_Nv_ItemInit_Impl+0xe0>)
    a3a4:	47a0      	blx	r4
    a3a6:	0003      	movs	r3, r0
    a3a8:	e00b      	b.n	a3c2 <S_Nv_ItemInit_Impl+0x6a>
    assert((id != 0u) && (id < 0xF000u) && (itemLength <= MAX_ITEM_LENGTH));
    a3aa:	4b24      	ldr	r3, [pc, #144]	; (a43c <S_Nv_ItemInit_Impl+0xe4>)
    a3ac:	4a24      	ldr	r2, [pc, #144]	; (a440 <S_Nv_ItemInit_Impl+0xe8>)
    a3ae:	21aa      	movs	r1, #170	; 0xaa
    a3b0:	00c9      	lsls	r1, r1, #3
    a3b2:	4824      	ldr	r0, [pc, #144]	; (a444 <S_Nv_ItemInit_Impl+0xec>)
    a3b4:	4c24      	ldr	r4, [pc, #144]	; (a448 <S_Nv_ItemInit_Impl+0xf0>)
    a3b6:	47a0      	blx	r4
    if ( PowerSupplyTooLow() )
    a3b8:	4b24      	ldr	r3, [pc, #144]	; (a44c <S_Nv_ItemInit_Impl+0xf4>)
    a3ba:	4798      	blx	r3
        return S_Nv_ReturnValue_PowerSupplyTooLow;
    a3bc:	2305      	movs	r3, #5
    if ( PowerSupplyTooLow() )
    a3be:	2800      	cmp	r0, #0
    a3c0:	d002      	beq.n	a3c8 <S_Nv_ItemInit_Impl+0x70>
}
    a3c2:	0018      	movs	r0, r3
    a3c4:	b005      	add	sp, #20
    a3c6:	bdf0      	pop	{r4, r5, r6, r7, pc}
    CompactSectorIfNeeded(BLOCK_HEADER_SIZE + itemLength);
    a3c8:	0030      	movs	r0, r6
    a3ca:	3010      	adds	r0, #16
    a3cc:	b280      	uxth	r0, r0
    a3ce:	4b20      	ldr	r3, [pc, #128]	; (a450 <S_Nv_ItemInit_Impl+0xf8>)
    a3d0:	4798      	blx	r3
    assert(s_itemCount < MAX_ITEM_COUNT);
    a3d2:	4b20      	ldr	r3, [pc, #128]	; (a454 <S_Nv_ItemInit_Impl+0xfc>)
    a3d4:	781b      	ldrb	r3, [r3, #0]
    a3d6:	2b09      	cmp	r3, #9
    a3d8:	d819      	bhi.n	a40e <S_Nv_ItemInit_Impl+0xb6>
    uint16_t newItemPointer = s_sectorHead;
    a3da:	4b1f      	ldr	r3, [pc, #124]	; (a458 <S_Nv_ItemInit_Impl+0x100>)
    a3dc:	881f      	ldrh	r7, [r3, #0]
    blockHeader.id = newItemId;
    a3de:	466b      	mov	r3, sp
    a3e0:	805c      	strh	r4, [r3, #2]
    blockHeader.blockOffset = 0x0000u;
    a3e2:	2300      	movs	r3, #0
    a3e4:	466a      	mov	r2, sp
    a3e6:	8093      	strh	r3, [r2, #4]
    blockHeader.blockLength = itemLength;
    a3e8:	80d6      	strh	r6, [r2, #6]
    blockHeader.itemLength = itemLength;
    a3ea:	8116      	strh	r6, [r2, #8]
    blockHeader.previousBlock = 0x0000u;
    a3ec:	8153      	strh	r3, [r2, #10]
    blockHeader.writeCount = 0u;
    a3ee:	8193      	strh	r3, [r2, #12]
    if ( !WriteDataBlockAndHeader(&blockHeader, (uint8_t*) pDefaultData) )
    a3f0:	0029      	movs	r1, r5
    a3f2:	4668      	mov	r0, sp
    a3f4:	4b19      	ldr	r3, [pc, #100]	; (a45c <S_Nv_ItemInit_Impl+0x104>)
    a3f6:	4798      	blx	r3
        return S_Nv_ReturnValue_Failure;
    a3f8:	2301      	movs	r3, #1
    if ( !WriteDataBlockAndHeader(&blockHeader, (uint8_t*) pDefaultData) )
    a3fa:	2800      	cmp	r0, #0
    a3fc:	d0e1      	beq.n	a3c2 <S_Nv_ItemInit_Impl+0x6a>
    Item_t *newItemCache = CreateItemCache(newItemId);
    a3fe:	0020      	movs	r0, r4
    a400:	4b17      	ldr	r3, [pc, #92]	; (a460 <S_Nv_ItemInit_Impl+0x108>)
    a402:	4798      	blx	r3
    newItemCache->lastBlock = newItemPointer;
    a404:	7087      	strb	r7, [r0, #2]
    a406:	0a3f      	lsrs	r7, r7, #8
    a408:	70c7      	strb	r7, [r0, #3]
    return S_Nv_ReturnValue_DidNotExist;
    a40a:	2302      	movs	r3, #2
    a40c:	e7d9      	b.n	a3c2 <S_Nv_ItemInit_Impl+0x6a>
    assert(s_itemCount < MAX_ITEM_COUNT);
    a40e:	4b15      	ldr	r3, [pc, #84]	; (a464 <S_Nv_ItemInit_Impl+0x10c>)
    a410:	4a0b      	ldr	r2, [pc, #44]	; (a440 <S_Nv_ItemInit_Impl+0xe8>)
    a412:	21af      	movs	r1, #175	; 0xaf
    a414:	00c9      	lsls	r1, r1, #3
    a416:	480b      	ldr	r0, [pc, #44]	; (a444 <S_Nv_ItemInit_Impl+0xec>)
    a418:	4c0b      	ldr	r4, [pc, #44]	; (a448 <S_Nv_ItemInit_Impl+0xf0>)
    a41a:	47a0      	blx	r4
            return S_Nv_ReturnValue_Ok;
    a41c:	2300      	movs	r3, #0
    a41e:	e7d0      	b.n	a3c2 <S_Nv_ItemInit_Impl+0x6a>
    a420:	0000effe 	.word	0x0000effe
    a424:	000094d9 	.word	0x000094d9
    a428:	0000a305 	.word	0x0000a305
    a42c:	20000398 	.word	0x20000398
    a430:	2000039a 	.word	0x2000039a
    a434:	00009a5d 	.word	0x00009a5d
    a438:	0000a28d 	.word	0x0000a28d
    a43c:	000162dc 	.word	0x000162dc
    a440:	000163e0 	.word	0x000163e0
    a444:	00016294 	.word	0x00016294
    a448:	00014c75 	.word	0x00014c75
    a44c:	0000926d 	.word	0x0000926d
    a450:	000099e1 	.word	0x000099e1
    a454:	200003c8 	.word	0x200003c8
    a458:	200003d2 	.word	0x200003d2
    a45c:	00009c95 	.word	0x00009c95
    a460:	000094f5 	.word	0x000094f5
    a464:	0001623c 	.word	0x0001623c

0000a468 <S_Nv_IsItemAvailable_Impl>:
/** Interface function, see \ref S_Nv_IsItemAvailable.
 *
 * Important: This will check whether the item is found in the storage area
 */
bool S_Nv_IsItemAvailable_Impl(S_Nv_ItemId_t id)
{
    a468:	b510      	push	{r4, lr}
  return ( FindItem(id) != 0x0000u );
    a46a:	4b03      	ldr	r3, [pc, #12]	; (a478 <S_Nv_IsItemAvailable_Impl+0x10>)
    a46c:	4798      	blx	r3
    a46e:	1e43      	subs	r3, r0, #1
    a470:	4198      	sbcs	r0, r3
    a472:	b2c0      	uxtb	r0, r0
}
    a474:	bd10      	pop	{r4, pc}
    a476:	46c0      	nop			; (mov r8, r8)
    a478:	000094d9 	.word	0x000094d9

0000a47c <pdsInitItemMask>:
\param[in] itemMask - itemMask to be initialized

\return true itemMask is initialized, false otherwise
******************************************************************************/
static bool pdsInitItemMask(S_Nv_ItemId_t memoryId, uint8_t *itemMask)
{
    a47c:	b5f0      	push	{r4, r5, r6, r7, lr}
    a47e:	46d6      	mov	lr, sl
    a480:	4647      	mov	r7, r8
    a482:	b580      	push	{r7, lr}
    a484:	b087      	sub	sp, #28
    a486:	000f      	movs	r7, r1
  if (PDS_ALL_EXISTENT_MEMORY == memoryId)
    a488:	4b24      	ldr	r3, [pc, #144]	; (a51c <pdsInitItemMask+0xa0>)
    a48a:	4298      	cmp	r0, r3
    a48c:	d012      	beq.n	a4b4 <pdsInitItemMask+0x38>
  {
    memset(itemMask, 0xFFU, PDS_ITEM_MASK_SIZE);
    itemMask[0] &= 0xFEU;
  }
  else if (PDS_DIRECTORY_MASK & memoryId)
    a48e:	0443      	lsls	r3, r0, #17
    a490:	d41c      	bmi.n	a4cc <pdsInitItemMask+0x50>
    else
      return false;
  }
  else
  {
    itemMask[memoryId / 8] |= 1 << (memoryId % 8);
    a492:	08c3      	lsrs	r3, r0, #3
    a494:	18cf      	adds	r7, r1, r3
    a496:	2307      	movs	r3, #7
    a498:	4018      	ands	r0, r3
    a49a:	3b06      	subs	r3, #6
    a49c:	4083      	lsls	r3, r0
    a49e:	783a      	ldrb	r2, [r7, #0]
    a4a0:	4313      	orrs	r3, r2
    a4a2:	703b      	strb	r3, [r7, #0]
  }

  return true;
    a4a4:	2301      	movs	r3, #1
    a4a6:	9301      	str	r3, [sp, #4]
}
    a4a8:	9801      	ldr	r0, [sp, #4]
    a4aa:	b007      	add	sp, #28
    a4ac:	bc0c      	pop	{r2, r3}
    a4ae:	4690      	mov	r8, r2
    a4b0:	469a      	mov	sl, r3
    a4b2:	bdf0      	pop	{r4, r5, r6, r7, pc}
    memset(itemMask, 0xFFU, PDS_ITEM_MASK_SIZE);
    a4b4:	2202      	movs	r2, #2
    a4b6:	21ff      	movs	r1, #255	; 0xff
    a4b8:	0038      	movs	r0, r7
    a4ba:	4b19      	ldr	r3, [pc, #100]	; (a520 <pdsInitItemMask+0xa4>)
    a4bc:	4798      	blx	r3
    itemMask[0] &= 0xFEU;
    a4be:	783b      	ldrb	r3, [r7, #0]
    a4c0:	2201      	movs	r2, #1
    a4c2:	4393      	bics	r3, r2
    a4c4:	703b      	strb	r3, [r7, #0]
  return true;
    a4c6:	2301      	movs	r3, #1
    a4c8:	9301      	str	r3, [sp, #4]
    a4ca:	e7ed      	b.n	a4a8 <pdsInitItemMask+0x2c>
    if (pdsGetDirDescr(memoryId, &dirDescr))
    a4cc:	a904      	add	r1, sp, #16
    a4ce:	4b15      	ldr	r3, [pc, #84]	; (a524 <pdsInitItemMask+0xa8>)
    a4d0:	4798      	blx	r3
    a4d2:	9001      	str	r0, [sp, #4]
    a4d4:	2800      	cmp	r0, #0
    a4d6:	d0e7      	beq.n	a4a8 <pdsInitItemMask+0x2c>
      for (uint8_t index=0U; index < dirDescr.filesCount; index++)
    a4d8:	ab04      	add	r3, sp, #16
    a4da:	889b      	ldrh	r3, [r3, #4]
    a4dc:	4698      	mov	r8, r3
    a4de:	2b00      	cmp	r3, #0
    a4e0:	d0e2      	beq.n	a4a8 <pdsInitItemMask+0x2c>
    a4e2:	2400      	movs	r4, #0
        memcpy(&memId, (void const FLASH_PTR*)(dirDescr.list + index), sizeof(uint16_t));
    a4e4:	ab02      	add	r3, sp, #8
    a4e6:	1d9d      	adds	r5, r3, #6
    a4e8:	4b0f      	ldr	r3, [pc, #60]	; (a528 <pdsInitItemMask+0xac>)
    a4ea:	469a      	mov	sl, r3
        itemMask[memId / 8U] |= 1U << (memId % 8U);
    a4ec:	2607      	movs	r6, #7
        memcpy(&memId, (void const FLASH_PTR*)(dirDescr.list + index), sizeof(uint16_t));
    a4ee:	0061      	lsls	r1, r4, #1
    a4f0:	9b04      	ldr	r3, [sp, #16]
    a4f2:	469c      	mov	ip, r3
    a4f4:	4461      	add	r1, ip
    a4f6:	2202      	movs	r2, #2
    a4f8:	0028      	movs	r0, r5
    a4fa:	47d0      	blx	sl
        itemMask[memId / 8U] |= 1U << (memId % 8U);
    a4fc:	8829      	ldrh	r1, [r5, #0]
    a4fe:	08ca      	lsrs	r2, r1, #3
    a500:	18ba      	adds	r2, r7, r2
    a502:	4031      	ands	r1, r6
    a504:	2301      	movs	r3, #1
    a506:	408b      	lsls	r3, r1
    a508:	7811      	ldrb	r1, [r2, #0]
    a50a:	430b      	orrs	r3, r1
    a50c:	7013      	strb	r3, [r2, #0]
      for (uint8_t index=0U; index < dirDescr.filesCount; index++)
    a50e:	3401      	adds	r4, #1
    a510:	b2e4      	uxtb	r4, r4
    a512:	b2a3      	uxth	r3, r4
    a514:	4543      	cmp	r3, r8
    a516:	d3ea      	bcc.n	a4ee <pdsInitItemMask+0x72>
    a518:	e7c6      	b.n	a4a8 <pdsInitItemMask+0x2c>
    a51a:	46c0      	nop			; (mov r8, r8)
    a51c:	00004002 	.word	0x00004002
    a520:	00014d49 	.word	0x00014d49
    a524:	0000ac0d 	.word	0x0000ac0d
    a528:	00014d37 	.word	0x00014d37

0000a52c <PDS_Restore>:
{
    a52c:	b5f0      	push	{r4, r5, r6, r7, lr}
    a52e:	b089      	sub	sp, #36	; 0x24
  uint8_t itemsToRestore[PDS_ITEM_MASK_SIZE] = {0U};
    a530:	a907      	add	r1, sp, #28
    a532:	2300      	movs	r3, #0
    a534:	800b      	strh	r3, [r1, #0]
  if (!pdsInitItemMask(memoryId, itemsToRestore))
    a536:	4b2b      	ldr	r3, [pc, #172]	; (a5e4 <PDS_Restore+0xb8>)
    a538:	4798      	blx	r3
    a53a:	9001      	str	r0, [sp, #4]
    a53c:	2600      	movs	r6, #0
    a53e:	2800      	cmp	r0, #0
    a540:	d148      	bne.n	a5d4 <PDS_Restore+0xa8>
    a542:	e041      	b.n	a5c8 <PDS_Restore+0x9c>
    assert((0U != itemDescr.itemSize) && (NULL != itemDescr.itemData));
    a544:	4b28      	ldr	r3, [pc, #160]	; (a5e8 <PDS_Restore+0xbc>)
    a546:	4a29      	ldr	r2, [pc, #164]	; (a5ec <PDS_Restore+0xc0>)
    a548:	21ab      	movs	r1, #171	; 0xab
    a54a:	0049      	lsls	r1, r1, #1
    a54c:	4828      	ldr	r0, [pc, #160]	; (a5f0 <PDS_Restore+0xc4>)
    a54e:	4c29      	ldr	r4, [pc, #164]	; (a5f4 <PDS_Restore+0xc8>)
    a550:	47a0      	blx	r4
      assert((S_Nv_ReturnValue_DidNotExist == ret) || (S_Nv_ReturnValue_Ok == ret));
    a552:	4b29      	ldr	r3, [pc, #164]	; (a5f8 <PDS_Restore+0xcc>)
    a554:	4a25      	ldr	r2, [pc, #148]	; (a5ec <PDS_Restore+0xc0>)
    a556:	2168      	movs	r1, #104	; 0x68
    a558:	31ff      	adds	r1, #255	; 0xff
    a55a:	4825      	ldr	r0, [pc, #148]	; (a5f0 <PDS_Restore+0xc4>)
    a55c:	4c25      	ldr	r4, [pc, #148]	; (a5f4 <PDS_Restore+0xc8>)
    a55e:	47a0      	blx	r4
    a560:	3701      	adds	r7, #1
    a562:	3501      	adds	r5, #1
    a564:	b2ad      	uxth	r5, r5
    for (j = 0U; j < 8U; j++)
    a566:	2f08      	cmp	r7, #8
    a568:	d031      	beq.n	a5ce <PDS_Restore+0xa2>
      if (itemsToRestore[i] & (1U << j))
    a56a:	ab07      	add	r3, sp, #28
    a56c:	5cf3      	ldrb	r3, [r6, r3]
    a56e:	40fb      	lsrs	r3, r7
    a570:	07db      	lsls	r3, r3, #31
    a572:	d5f5      	bpl.n	a560 <PDS_Restore+0x34>
  if (pdsGetItemDescr(id, &itemDescr))
    a574:	a903      	add	r1, sp, #12
    a576:	0028      	movs	r0, r5
    a578:	4b20      	ldr	r3, [pc, #128]	; (a5fc <PDS_Restore+0xd0>)
    a57a:	4798      	blx	r3
    a57c:	2800      	cmp	r0, #0
    a57e:	d021      	beq.n	a5c4 <PDS_Restore+0x98>
    assert((0U != itemDescr.itemSize) && (NULL != itemDescr.itemData));
    a580:	ab03      	add	r3, sp, #12
    a582:	885b      	ldrh	r3, [r3, #2]
    a584:	2b00      	cmp	r3, #0
    a586:	d0dd      	beq.n	a544 <PDS_Restore+0x18>
    a588:	9b04      	ldr	r3, [sp, #16]
    a58a:	2b00      	cmp	r3, #0
    a58c:	d0da      	beq.n	a544 <PDS_Restore+0x18>
    if (itemDescr.filler)
    a58e:	9b05      	ldr	r3, [sp, #20]
    a590:	2b00      	cmp	r3, #0
    a592:	d000      	beq.n	a596 <PDS_Restore+0x6a>
      itemDescr.filler();
    a594:	4798      	blx	r3
      oldSize = S_Nv_ItemLength(id);
    a596:	0028      	movs	r0, r5
    a598:	4b19      	ldr	r3, [pc, #100]	; (a600 <PDS_Restore+0xd4>)
    a59a:	4798      	blx	r3
    a59c:	0004      	movs	r4, r0
      S_Nv_ReturnValue_t ret = S_Nv_ItemInit(id, itemDescr.itemSize, itemDescr.itemData);
    a59e:	ab03      	add	r3, sp, #12
    a5a0:	9a04      	ldr	r2, [sp, #16]
    a5a2:	8859      	ldrh	r1, [r3, #2]
    a5a4:	0028      	movs	r0, r5
    a5a6:	4b17      	ldr	r3, [pc, #92]	; (a604 <PDS_Restore+0xd8>)
    a5a8:	4798      	blx	r3
      assert((S_Nv_ReturnValue_DidNotExist == ret) || (S_Nv_ReturnValue_Ok == ret));
    a5aa:	2802      	cmp	r0, #2
    a5ac:	d016      	beq.n	a5dc <PDS_Restore+0xb0>
    a5ae:	2800      	cmp	r0, #0
    a5b0:	d1cf      	bne.n	a552 <PDS_Restore+0x26>
        if (!pdsUpdateMemory(id, itemDescr.itemData, itemDescr.itemSize, oldSize))
    a5b2:	ab03      	add	r3, sp, #12
    a5b4:	885a      	ldrh	r2, [r3, #2]
    a5b6:	9904      	ldr	r1, [sp, #16]
    a5b8:	0023      	movs	r3, r4
    a5ba:	0028      	movs	r0, r5
    a5bc:	4c12      	ldr	r4, [pc, #72]	; (a608 <PDS_Restore+0xdc>)
    a5be:	47a0      	blx	r4
    a5c0:	2800      	cmp	r0, #0
    a5c2:	d1cd      	bne.n	a560 <PDS_Restore+0x34>
          return false;
    a5c4:	2300      	movs	r3, #0
    a5c6:	9301      	str	r3, [sp, #4]
}
    a5c8:	9801      	ldr	r0, [sp, #4]
    a5ca:	b009      	add	sp, #36	; 0x24
    a5cc:	bdf0      	pop	{r4, r5, r6, r7, pc}
    a5ce:	3601      	adds	r6, #1
  for (i = 0U; i < PDS_ITEM_MASK_SIZE; i++)
    a5d0:	2e02      	cmp	r6, #2
    a5d2:	d0f9      	beq.n	a5c8 <PDS_Restore+0x9c>
    a5d4:	00f5      	lsls	r5, r6, #3
    a5d6:	b2ad      	uxth	r5, r5
{
    a5d8:	2700      	movs	r7, #0
    a5da:	e7c6      	b.n	a56a <PDS_Restore+0x3e>
          return false;
    a5dc:	2300      	movs	r3, #0
    a5de:	9301      	str	r3, [sp, #4]
    a5e0:	e7f2      	b.n	a5c8 <PDS_Restore+0x9c>
    a5e2:	46c0      	nop			; (mov r8, r8)
    a5e4:	0000a47d 	.word	0x0000a47d
    a5e8:	0001642c 	.word	0x0001642c
    a5ec:	00016524 	.word	0x00016524
    a5f0:	00016468 	.word	0x00016468
    a5f4:	00014c75 	.word	0x00014c75
    a5f8:	000164b4 	.word	0x000164b4
    a5fc:	0000a961 	.word	0x0000a961
    a600:	0000a305 	.word	0x0000a305
    a604:	0000a359 	.word	0x0000a359
    a608:	0000a9c1 	.word	0x0000a9c1

0000a60c <PDS_Store>:
{
    a60c:	b510      	push	{r4, lr}
  if (!pdsInitItemMask(memoryId, itemsToStore))
    a60e:	4905      	ldr	r1, [pc, #20]	; (a624 <PDS_Store+0x18>)
    a610:	4b05      	ldr	r3, [pc, #20]	; (a628 <PDS_Store+0x1c>)
    a612:	4798      	blx	r3
    a614:	1e04      	subs	r4, r0, #0
    a616:	d101      	bne.n	a61c <PDS_Store+0x10>
}
    a618:	0020      	movs	r0, r4
    a61a:	bd10      	pop	{r4, pc}
  pdsPostTask(PDS_STORE_ITEM_TASK_ID);
    a61c:	2000      	movs	r0, #0
    a61e:	4b03      	ldr	r3, [pc, #12]	; (a62c <PDS_Store+0x20>)
    a620:	4798      	blx	r3
  return true;
    a622:	e7f9      	b.n	a618 <PDS_Store+0xc>
    a624:	200003d8 	.word	0x200003d8
    a628:	0000a47d 	.word	0x0000a47d
    a62c:	0000a899 	.word	0x0000a899

0000a630 <pdsStoreItemTaskHandler>:
{
    a630:	b5f0      	push	{r4, r5, r6, r7, lr}
    a632:	46de      	mov	lr, fp
    a634:	4657      	mov	r7, sl
    a636:	464e      	mov	r6, r9
    a638:	4645      	mov	r5, r8
    a63a:	b5e0      	push	{r5, r6, r7, lr}
    a63c:	b089      	sub	sp, #36	; 0x24
  for (i = 0U, byte_index = i_found + 1; i < PDS_ITEM_MASK_SIZE; i++, byte_index++)
    a63e:	4b51      	ldr	r3, [pc, #324]	; (a784 <pdsStoreItemTaskHandler+0x154>)
    a640:	7818      	ldrb	r0, [r3, #0]
    a642:	3001      	adds	r0, #1
    a644:	b2c0      	uxtb	r0, r0
    for (j = 0U, bit_index = j_found + 1; j < 8U; j++, bit_index++) {
    a646:	4b50      	ldr	r3, [pc, #320]	; (a788 <pdsStoreItemTaskHandler+0x158>)
    a648:	781b      	ldrb	r3, [r3, #0]
    a64a:	3301      	adds	r3, #1
      bit_index %= 8;
    a64c:	2207      	movs	r2, #7
    a64e:	4013      	ands	r3, r2
    a650:	4698      	mov	r8, r3
    a652:	2301      	movs	r3, #1
    a654:	4642      	mov	r2, r8
    a656:	4093      	lsls	r3, r2
    a658:	469a      	mov	sl, r3
    for (j = 0U, bit_index = j_found + 1; j < 8U; j++, bit_index++) {
    a65a:	2302      	movs	r3, #2
    a65c:	469c      	mov	ip, r3
    byte_index %= PDS_ITEM_MASK_SIZE;
    a65e:	2401      	movs	r4, #1
      if (itemsToStore[byte_index] & (1U << bit_index))
    a660:	4b4a      	ldr	r3, [pc, #296]	; (a78c <pdsStoreItemTaskHandler+0x15c>)
    a662:	469b      	mov	fp, r3
    a664:	4643      	mov	r3, r8
    a666:	3301      	adds	r3, #1
    a668:	9302      	str	r3, [sp, #8]
    a66a:	2507      	movs	r5, #7
    a66c:	4667      	mov	r7, ip
    a66e:	e035      	b.n	a6dc <pdsStoreItemTaskHandler+0xac>
    a670:	464f      	mov	r7, r9
        itemsToStore[byte_index] &= ~(1U << bit_index);
    a672:	2201      	movs	r2, #1
    a674:	9901      	ldr	r1, [sp, #4]
    a676:	408a      	lsls	r2, r1
    a678:	4397      	bics	r7, r2
    a67a:	4944      	ldr	r1, [pc, #272]	; (a78c <pdsStoreItemTaskHandler+0x15c>)
    a67c:	9c03      	ldr	r4, [sp, #12]
    a67e:	550f      	strb	r7, [r1, r4]
        i_found = byte_index;
    a680:	4a40      	ldr	r2, [pc, #256]	; (a784 <pdsStoreItemTaskHandler+0x154>)
    a682:	7010      	strb	r0, [r2, #0]
        j_found = bit_index;
    a684:	4a40      	ldr	r2, [pc, #256]	; (a788 <pdsStoreItemTaskHandler+0x158>)
    a686:	7013      	strb	r3, [r2, #0]
  if (!S_Nv_IsItemAvailable(((S_Nv_ItemId_t)byte_index << 3U) + bit_index))
    a688:	00c0      	lsls	r0, r0, #3
    a68a:	18c4      	adds	r4, r0, r3
    a68c:	0020      	movs	r0, r4
    a68e:	4b40      	ldr	r3, [pc, #256]	; (a790 <pdsStoreItemTaskHandler+0x160>)
    a690:	4798      	blx	r3
    a692:	2800      	cmp	r0, #0
    a694:	d13a      	bne.n	a70c <pdsStoreItemTaskHandler+0xdc>
    if(pdsGetItemDescr(((S_Nv_ItemId_t)byte_index << 3U) + bit_index, &itemDescr))
    a696:	a904      	add	r1, sp, #16
    a698:	0020      	movs	r0, r4
    a69a:	4b3e      	ldr	r3, [pc, #248]	; (a794 <pdsStoreItemTaskHandler+0x164>)
    a69c:	4798      	blx	r3
    a69e:	2800      	cmp	r0, #0
    a6a0:	d04e      	beq.n	a740 <pdsStoreItemTaskHandler+0x110>
      if (itemDescr.filler)
    a6a2:	9b06      	ldr	r3, [sp, #24]
    a6a4:	2b00      	cmp	r3, #0
    a6a6:	d000      	beq.n	a6aa <pdsStoreItemTaskHandler+0x7a>
        itemDescr.filler();
    a6a8:	4798      	blx	r3
      ret = S_Nv_ItemInit(((S_Nv_ItemId_t)byte_index << 3U) + bit_index, itemDescr.itemSize, itemDescr.itemData);
    a6aa:	9a05      	ldr	r2, [sp, #20]
    a6ac:	ab04      	add	r3, sp, #16
    a6ae:	8859      	ldrh	r1, [r3, #2]
    a6b0:	0020      	movs	r0, r4
    a6b2:	4b39      	ldr	r3, [pc, #228]	; (a798 <pdsStoreItemTaskHandler+0x168>)
    a6b4:	4798      	blx	r3
      assert((S_Nv_ReturnValue_DidNotExist == ret) || (S_Nv_ReturnValue_Ok == ret));
    a6b6:	23fd      	movs	r3, #253	; 0xfd
    a6b8:	4218      	tst	r0, r3
    a6ba:	d041      	beq.n	a740 <pdsStoreItemTaskHandler+0x110>
    a6bc:	4b37      	ldr	r3, [pc, #220]	; (a79c <pdsStoreItemTaskHandler+0x16c>)
    a6be:	4a38      	ldr	r2, [pc, #224]	; (a7a0 <pdsStoreItemTaskHandler+0x170>)
    a6c0:	21eb      	movs	r1, #235	; 0xeb
    a6c2:	4838      	ldr	r0, [pc, #224]	; (a7a4 <pdsStoreItemTaskHandler+0x174>)
    a6c4:	4c38      	ldr	r4, [pc, #224]	; (a7a8 <pdsStoreItemTaskHandler+0x178>)
    a6c6:	47a0      	blx	r4
    a6c8:	464f      	mov	r7, r9
      if (itemsToStore[byte_index] & (1U << bit_index))
    a6ca:	4643      	mov	r3, r8
    a6cc:	9301      	str	r3, [sp, #4]
    a6ce:	e7d0      	b.n	a672 <pdsStoreItemTaskHandler+0x42>
  for (i = 0U, byte_index = i_found + 1; i < PDS_ITEM_MASK_SIZE; i++, byte_index++)
    a6d0:	3001      	adds	r0, #1
    a6d2:	b2c0      	uxtb	r0, r0
    a6d4:	3f01      	subs	r7, #1
    a6d6:	b2ff      	uxtb	r7, r7
    a6d8:	2f00      	cmp	r7, #0
    a6da:	d0d5      	beq.n	a688 <pdsStoreItemTaskHandler+0x58>
    byte_index %= PDS_ITEM_MASK_SIZE;
    a6dc:	4020      	ands	r0, r4
      if (itemsToStore[byte_index] & (1U << bit_index))
    a6de:	9003      	str	r0, [sp, #12]
    a6e0:	465b      	mov	r3, fp
    a6e2:	5c1b      	ldrb	r3, [r3, r0]
    a6e4:	4699      	mov	r9, r3
    a6e6:	001e      	movs	r6, r3
    a6e8:	4653      	mov	r3, sl
    a6ea:	4233      	tst	r3, r6
    a6ec:	d1ec      	bne.n	a6c8 <pdsStoreItemTaskHandler+0x98>
    a6ee:	9b02      	ldr	r3, [sp, #8]
    a6f0:	002a      	movs	r2, r5
      bit_index %= 8;
    a6f2:	402b      	ands	r3, r5
      if (itemsToStore[byte_index] & (1U << bit_index))
    a6f4:	9301      	str	r3, [sp, #4]
    a6f6:	0031      	movs	r1, r6
    a6f8:	40d9      	lsrs	r1, r3
    a6fa:	420c      	tst	r4, r1
    a6fc:	d1b8      	bne.n	a670 <pdsStoreItemTaskHandler+0x40>
    for (j = 0U, bit_index = j_found + 1; j < 8U; j++, bit_index++) {
    a6fe:	3301      	adds	r3, #1
    a700:	b2db      	uxtb	r3, r3
    a702:	3a01      	subs	r2, #1
    a704:	b2d2      	uxtb	r2, r2
    a706:	2a00      	cmp	r2, #0
    a708:	d1f3      	bne.n	a6f2 <pdsStoreItemTaskHandler+0xc2>
    a70a:	e7e1      	b.n	a6d0 <pdsStoreItemTaskHandler+0xa0>
  if (pdsGetItemDescr(id, &itemDescr))
    a70c:	a904      	add	r1, sp, #16
    a70e:	0020      	movs	r0, r4
    a710:	4b20      	ldr	r3, [pc, #128]	; (a794 <pdsStoreItemTaskHandler+0x164>)
    a712:	4798      	blx	r3
    a714:	2800      	cmp	r0, #0
    a716:	d013      	beq.n	a740 <pdsStoreItemTaskHandler+0x110>
    assert((0U != itemDescr.itemSize) && (NULL != itemDescr.itemData));
    a718:	ab04      	add	r3, sp, #16
    a71a:	885b      	ldrh	r3, [r3, #2]
    a71c:	2b00      	cmp	r3, #0
    a71e:	d01e      	beq.n	a75e <pdsStoreItemTaskHandler+0x12e>
    a720:	9b05      	ldr	r3, [sp, #20]
    a722:	2b00      	cmp	r3, #0
    a724:	d01b      	beq.n	a75e <pdsStoreItemTaskHandler+0x12e>
    if (itemDescr.filler)
    a726:	9b06      	ldr	r3, [sp, #24]
    a728:	2b00      	cmp	r3, #0
    a72a:	d000      	beq.n	a72e <pdsStoreItemTaskHandler+0xfe>
      itemDescr.filler();
    a72c:	4798      	blx	r3
      ret = S_Nv_Write(id, 0U, itemDescr.itemSize, itemDescr.itemData);
    a72e:	9b05      	ldr	r3, [sp, #20]
    a730:	aa04      	add	r2, sp, #16
    a732:	8852      	ldrh	r2, [r2, #2]
    a734:	2100      	movs	r1, #0
    a736:	0020      	movs	r0, r4
    a738:	4c1c      	ldr	r4, [pc, #112]	; (a7ac <pdsStoreItemTaskHandler+0x17c>)
    a73a:	47a0      	blx	r4
      assert(ret == S_Nv_ReturnValue_Ok);
    a73c:	2800      	cmp	r0, #0
    a73e:	d115      	bne.n	a76c <pdsStoreItemTaskHandler+0x13c>
    if (itemsToStore[i])
    a740:	4b12      	ldr	r3, [pc, #72]	; (a78c <pdsStoreItemTaskHandler+0x15c>)
    a742:	781b      	ldrb	r3, [r3, #0]
    a744:	2b00      	cmp	r3, #0
    a746:	d118      	bne.n	a77a <pdsStoreItemTaskHandler+0x14a>
    a748:	4b10      	ldr	r3, [pc, #64]	; (a78c <pdsStoreItemTaskHandler+0x15c>)
    a74a:	785b      	ldrb	r3, [r3, #1]
    a74c:	2b00      	cmp	r3, #0
    a74e:	d114      	bne.n	a77a <pdsStoreItemTaskHandler+0x14a>
}
    a750:	b009      	add	sp, #36	; 0x24
    a752:	bc3c      	pop	{r2, r3, r4, r5}
    a754:	4690      	mov	r8, r2
    a756:	4699      	mov	r9, r3
    a758:	46a2      	mov	sl, r4
    a75a:	46ab      	mov	fp, r5
    a75c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    assert((0U != itemDescr.itemSize) && (NULL != itemDescr.itemData));
    a75e:	4b14      	ldr	r3, [pc, #80]	; (a7b0 <pdsStoreItemTaskHandler+0x180>)
    a760:	4a14      	ldr	r2, [pc, #80]	; (a7b4 <pdsStoreItemTaskHandler+0x184>)
    a762:	219a      	movs	r1, #154	; 0x9a
    a764:	0049      	lsls	r1, r1, #1
    a766:	480f      	ldr	r0, [pc, #60]	; (a7a4 <pdsStoreItemTaskHandler+0x174>)
    a768:	4c0f      	ldr	r4, [pc, #60]	; (a7a8 <pdsStoreItemTaskHandler+0x178>)
    a76a:	47a0      	blx	r4
      assert(ret == S_Nv_ReturnValue_Ok);
    a76c:	4b12      	ldr	r3, [pc, #72]	; (a7b8 <pdsStoreItemTaskHandler+0x188>)
    a76e:	4a11      	ldr	r2, [pc, #68]	; (a7b4 <pdsStoreItemTaskHandler+0x184>)
    a770:	21a1      	movs	r1, #161	; 0xa1
    a772:	0049      	lsls	r1, r1, #1
    a774:	480b      	ldr	r0, [pc, #44]	; (a7a4 <pdsStoreItemTaskHandler+0x174>)
    a776:	4c0c      	ldr	r4, [pc, #48]	; (a7a8 <pdsStoreItemTaskHandler+0x178>)
    a778:	47a0      	blx	r4
      pdsPostTask(PDS_STORE_ITEM_TASK_ID);
    a77a:	2000      	movs	r0, #0
    a77c:	4b0f      	ldr	r3, [pc, #60]	; (a7bc <pdsStoreItemTaskHandler+0x18c>)
    a77e:	4798      	blx	r3
}
    a780:	e7e6      	b.n	a750 <pdsStoreItemTaskHandler+0x120>
    a782:	46c0      	nop			; (mov r8, r8)
    a784:	200003d4 	.word	0x200003d4
    a788:	200003da 	.word	0x200003da
    a78c:	200003d8 	.word	0x200003d8
    a790:	0000a469 	.word	0x0000a469
    a794:	0000a961 	.word	0x0000a961
    a798:	0000a359 	.word	0x0000a359
    a79c:	000164b4 	.word	0x000164b4
    a7a0:	000164fc 	.word	0x000164fc
    a7a4:	00016468 	.word	0x00016468
    a7a8:	00014c75 	.word	0x00014c75
    a7ac:	0000a155 	.word	0x0000a155
    a7b0:	0001642c 	.word	0x0001642c
    a7b4:	00016514 	.word	0x00016514
    a7b8:	00016534 	.word	0x00016534
    a7bc:	0000a899 	.word	0x0000a899

0000a7c0 <PDS_IsAbleToRestore>:
{
    a7c0:	b5f0      	push	{r4, r5, r6, r7, lr}
    a7c2:	b085      	sub	sp, #20
  uint8_t itemsToBeAbleRestore[PDS_ITEM_MASK_SIZE] = {0U};
    a7c4:	a903      	add	r1, sp, #12
    a7c6:	2300      	movs	r3, #0
    a7c8:	800b      	strh	r3, [r1, #0]
  if (!pdsInitItemMask(memoryId, itemsToBeAbleRestore))
    a7ca:	4b11      	ldr	r3, [pc, #68]	; (a810 <PDS_IsAbleToRestore+0x50>)
    a7cc:	4798      	blx	r3
    a7ce:	9001      	str	r0, [sp, #4]
    a7d0:	2700      	movs	r7, #0
    a7d2:	2800      	cmp	r0, #0
    a7d4:	d116      	bne.n	a804 <PDS_IsAbleToRestore+0x44>
}
    a7d6:	9801      	ldr	r0, [sp, #4]
    a7d8:	b005      	add	sp, #20
    a7da:	bdf0      	pop	{r4, r5, r6, r7, pc}
    a7dc:	3501      	adds	r5, #1
    a7de:	3401      	adds	r4, #1
    a7e0:	b2a4      	uxth	r4, r4
    for (j = 0U; j < 8U; j++)
    a7e2:	2d08      	cmp	r5, #8
    a7e4:	d00b      	beq.n	a7fe <PDS_IsAbleToRestore+0x3e>
      if (itemsToBeAbleRestore[i] & (1U << j))
    a7e6:	ab03      	add	r3, sp, #12
    a7e8:	5ddb      	ldrb	r3, [r3, r7]
    a7ea:	40eb      	lsrs	r3, r5
    a7ec:	421e      	tst	r6, r3
    a7ee:	d0f5      	beq.n	a7dc <PDS_IsAbleToRestore+0x1c>
      if (!S_Nv_IsItemAvailable(((S_Nv_ItemId_t)i << 3U) + j))
    a7f0:	0020      	movs	r0, r4
    a7f2:	4b08      	ldr	r3, [pc, #32]	; (a814 <PDS_IsAbleToRestore+0x54>)
    a7f4:	4798      	blx	r3
    a7f6:	2800      	cmp	r0, #0
    a7f8:	d1f0      	bne.n	a7dc <PDS_IsAbleToRestore+0x1c>
          return false;
    a7fa:	9001      	str	r0, [sp, #4]
    a7fc:	e7eb      	b.n	a7d6 <PDS_IsAbleToRestore+0x16>
    a7fe:	3701      	adds	r7, #1
  for (i = 0U; i < PDS_ITEM_MASK_SIZE; i++)
    a800:	2f02      	cmp	r7, #2
    a802:	d0e8      	beq.n	a7d6 <PDS_IsAbleToRestore+0x16>
    a804:	00fc      	lsls	r4, r7, #3
    a806:	b2a4      	uxth	r4, r4
{
    a808:	2500      	movs	r5, #0
      if (itemsToBeAbleRestore[i] & (1U << j))
    a80a:	2601      	movs	r6, #1
    a80c:	e7eb      	b.n	a7e6 <PDS_IsAbleToRestore+0x26>
    a80e:	46c0      	nop			; (mov r8, r8)
    a810:	0000a47d 	.word	0x0000a47d
    a814:	0000a469 	.word	0x0000a469

0000a818 <PDS_Init>:
\brief Persistent Data Server initialization routine.
******************************************************************************/


void PDS_Init (void)
{
    a818:	b510      	push	{r4, lr}
  D_Nv_Init();
    a81a:	4b02      	ldr	r3, [pc, #8]	; (a824 <PDS_Init+0xc>)
    a81c:	4798      	blx	r3
  S_Nv_Init();
    a81e:	4b02      	ldr	r3, [pc, #8]	; (a828 <PDS_Init+0x10>)
    a820:	4798      	blx	r3
}
    a822:	bd10      	pop	{r4, pc}
    a824:	00008fcd 	.word	0x00008fcd
    a828:	0000a11d 	.word	0x0000a11d

0000a82c <PDS_InitItems>:

/******************************************************************************
\brief PDS item initialization routine
******************************************************************************/
void PDS_InitItems(void)
{
    a82c:	b570      	push	{r4, r5, r6, lr}
    a82e:	b084      	sub	sp, #16
  S_Nv_ReturnValue_t ret;
  ItemIdToMemoryMapping_t itemDesc;

  for (S_Nv_ItemId_t i = 1U; i < PDS_ITEM_AMOUNT; i++)
    a830:	2401      	movs	r4, #1
  {
    if (pdsGetItemDescr(i, &itemDesc))
    a832:	4e12      	ldr	r6, [pc, #72]	; (a87c <PDS_InitItems+0x50>)
        pdsSecureItemInit(i,itemDesc.itemSize);
      }
      else
#endif
      {
        ret = S_Nv_ItemInit(i, itemDesc.itemSize, NULL);
    a834:	4d12      	ldr	r5, [pc, #72]	; (a880 <PDS_InitItems+0x54>)
    a836:	e009      	b.n	a84c <PDS_InitItems+0x20>
      assert(itemDesc.itemSize);
    a838:	4b12      	ldr	r3, [pc, #72]	; (a884 <PDS_InitItems+0x58>)
    a83a:	4a13      	ldr	r2, [pc, #76]	; (a888 <PDS_InitItems+0x5c>)
    a83c:	3150      	adds	r1, #80	; 0x50
    a83e:	4813      	ldr	r0, [pc, #76]	; (a88c <PDS_InitItems+0x60>)
    a840:	4c13      	ldr	r4, [pc, #76]	; (a890 <PDS_InitItems+0x64>)
    a842:	47a0      	blx	r4
  for (S_Nv_ItemId_t i = 1U; i < PDS_ITEM_AMOUNT; i++)
    a844:	3401      	adds	r4, #1
    a846:	b2a4      	uxth	r4, r4
    a848:	2c0a      	cmp	r4, #10
    a84a:	d014      	beq.n	a876 <PDS_InitItems+0x4a>
    if (pdsGetItemDescr(i, &itemDesc))
    a84c:	4669      	mov	r1, sp
    a84e:	0020      	movs	r0, r4
    a850:	47b0      	blx	r6
    a852:	2800      	cmp	r0, #0
    a854:	d0f6      	beq.n	a844 <PDS_InitItems+0x18>
      assert(itemDesc.itemSize);
    a856:	466b      	mov	r3, sp
    a858:	8859      	ldrh	r1, [r3, #2]
    a85a:	2900      	cmp	r1, #0
    a85c:	d0ec      	beq.n	a838 <PDS_InitItems+0xc>
        ret = S_Nv_ItemInit(i, itemDesc.itemSize, NULL);
    a85e:	2200      	movs	r2, #0
    a860:	0020      	movs	r0, r4
    a862:	47a8      	blx	r5
        assert((S_Nv_ReturnValue_DidNotExist == ret) || (S_Nv_ReturnValue_Ok == ret));
    a864:	23fd      	movs	r3, #253	; 0xfd
    a866:	4218      	tst	r0, r3
    a868:	d0ec      	beq.n	a844 <PDS_InitItems+0x18>
    a86a:	4b0a      	ldr	r3, [pc, #40]	; (a894 <PDS_InitItems+0x68>)
    a86c:	4a06      	ldr	r2, [pc, #24]	; (a888 <PDS_InitItems+0x5c>)
    a86e:	215b      	movs	r1, #91	; 0x5b
    a870:	4806      	ldr	r0, [pc, #24]	; (a88c <PDS_InitItems+0x60>)
    a872:	4c07      	ldr	r4, [pc, #28]	; (a890 <PDS_InitItems+0x64>)
    a874:	47a0      	blx	r4
      }
    }
  }
}
    a876:	b004      	add	sp, #16
    a878:	bd70      	pop	{r4, r5, r6, pc}
    a87a:	46c0      	nop			; (mov r8, r8)
    a87c:	0000a961 	.word	0x0000a961
    a880:	0000a359 	.word	0x0000a359
    a884:	00016550 	.word	0x00016550
    a888:	000165a8 	.word	0x000165a8
    a88c:	00016564 	.word	0x00016564
    a890:	00014c75 	.word	0x00014c75
    a894:	000164b4 	.word	0x000164b4

0000a898 <pdsPostTask>:
\param[in] taskId - id of a task
******************************************************************************/

void pdsPostTask(PdsTaskId_t taskId)
{
  pendingTasks |= (1U << taskId);
    a898:	4a03      	ldr	r2, [pc, #12]	; (a8a8 <pdsPostTask+0x10>)
    a89a:	2301      	movs	r3, #1
    a89c:	4083      	lsls	r3, r0
    a89e:	7811      	ldrb	r1, [r2, #0]
    a8a0:	430b      	orrs	r3, r1
    a8a2:	7013      	strb	r3, [r2, #0]
//  SYS_PostTask(PDS_TASK_ID);
}
    a8a4:	4770      	bx	lr
    a8a6:	46c0      	nop			; (mov r8, r8)
    a8a8:	200003db 	.word	0x200003db

0000a8ac <PDS_TaskHandler>:

/******************************************************************************
\brief General PDS task handler
******************************************************************************/
void PDS_TaskHandler(void)
{
    a8ac:	b570      	push	{r4, r5, r6, lr}
  if (pendingTasks)
    a8ae:	4b0d      	ldr	r3, [pc, #52]	; (a8e4 <PDS_TaskHandler+0x38>)
    a8b0:	781d      	ldrb	r5, [r3, #0]
    a8b2:	2d00      	cmp	r5, #0
    a8b4:	d012      	beq.n	a8dc <PDS_TaskHandler+0x30>
  {
    uint8_t taskId = 0U;

    while (!(pendingTasks & (1U << taskId)))
    a8b6:	0028      	movs	r0, r5
    a8b8:	07eb      	lsls	r3, r5, #31
    a8ba:	d410      	bmi.n	a8de <PDS_TaskHandler+0x32>
    a8bc:	2300      	movs	r3, #0
    a8be:	2401      	movs	r4, #1
      taskId++;
    a8c0:	3301      	adds	r3, #1
    a8c2:	b2db      	uxtb	r3, r3
    while (!(pendingTasks & (1U << taskId)))
    a8c4:	0019      	movs	r1, r3
    a8c6:	0002      	movs	r2, r0
    a8c8:	40da      	lsrs	r2, r3
    a8ca:	4214      	tst	r4, r2
    a8cc:	d0f8      	beq.n	a8c0 <PDS_TaskHandler+0x14>

    pendingTasks ^= (1U << taskId);
    a8ce:	2301      	movs	r3, #1
    a8d0:	408b      	lsls	r3, r1
    a8d2:	405d      	eors	r5, r3
    a8d4:	4b03      	ldr	r3, [pc, #12]	; (a8e4 <PDS_TaskHandler+0x38>)
    a8d6:	701d      	strb	r5, [r3, #0]
    pdsTaskHandlers[taskId]();
    a8d8:	4b03      	ldr	r3, [pc, #12]	; (a8e8 <PDS_TaskHandler+0x3c>)
    a8da:	4798      	blx	r3
   
  }
}
    a8dc:	bd70      	pop	{r4, r5, r6, pc}
    while (!(pendingTasks & (1U << taskId)))
    a8de:	2100      	movs	r1, #0
    a8e0:	e7f5      	b.n	a8ce <PDS_TaskHandler+0x22>
    a8e2:	46c0      	nop			; (mov r8, r8)
    a8e4:	200003db 	.word	0x200003db
    a8e8:	0000a631 	.word	0x0000a631

0000a8ec <updateTable>:
\param[in] data    - pointer to data with table;
\param[in] size    - current item size;
\param[in] oldSize - last size of item
******************************************************************************/
static void updateTable(void *data, uint16_t size, uint16_t oldSize)
{
    a8ec:	b510      	push	{r4, lr}
	uint8_t *ptr = (uint8_t *)data;

	if (size > oldSize)
    a8ee:	4291      	cmp	r1, r2
    a8f0:	d800      	bhi.n	a8f4 <updateTable+0x8>
	memset(ptr + oldSize, 0U, size - oldSize);
}
    a8f2:	bd10      	pop	{r4, pc}
	memset(ptr + oldSize, 0U, size - oldSize);
    a8f4:	1a89      	subs	r1, r1, r2
    a8f6:	1880      	adds	r0, r0, r2
    a8f8:	000a      	movs	r2, r1
    a8fa:	2100      	movs	r1, #0
    a8fc:	4b01      	ldr	r3, [pc, #4]	; (a904 <updateTable+0x18>)
    a8fe:	4798      	blx	r3
}
    a900:	e7f7      	b.n	a8f2 <updateTable+0x6>
    a902:	46c0      	nop			; (mov r8, r8)
    a904:	00014d49 	.word	0x00014d49

0000a908 <fillGeneralInformation>:
{
    a908:	b570      	push	{r4, r5, r6, lr}
  memcpy(&genInfoMem.extendedAddress, myLongAddress, LONG_ADDR_LEN);
    a90a:	4c10      	ldr	r4, [pc, #64]	; (a94c <fillGeneralInformation+0x44>)
    a90c:	2208      	movs	r2, #8
    a90e:	4910      	ldr	r1, [pc, #64]	; (a950 <fillGeneralInformation+0x48>)
    a910:	0020      	movs	r0, r4
    a912:	4b10      	ldr	r3, [pc, #64]	; (a954 <fillGeneralInformation+0x4c>)
    a914:	4798      	blx	r3
  MiApp_Get(SHORT_ADDRESS, (uint8_t *)&genInfoMem.networkAddress);
    a916:	0021      	movs	r1, r4
    a918:	310e      	adds	r1, #14
    a91a:	2002      	movs	r0, #2
    a91c:	4d0e      	ldr	r5, [pc, #56]	; (a958 <fillGeneralInformation+0x50>)
    a91e:	47a8      	blx	r5
  MiApp_Get(PANID, (uint8_t *)&genInfoMem.panId );
    a920:	0021      	movs	r1, r4
    a922:	310c      	adds	r1, #12
    a924:	2001      	movs	r0, #1
    a926:	47a8      	blx	r5
  MiApp_Get(CHANNEL, (uint8_t *)&genInfoMem.logicalChannel );
    a928:	0021      	movs	r1, r4
    a92a:	3110      	adds	r1, #16
    a92c:	2000      	movs	r0, #0
    a92e:	47a8      	blx	r5
  MiApp_Get(CHANNELMAP, (uint8_t *)&genInfoMem.channelMap );
    a930:	0021      	movs	r1, r4
    a932:	3108      	adds	r1, #8
    a934:	2005      	movs	r0, #5
    a936:	47a8      	blx	r5
  MiApp_Get(CAPABILITYINFO, (uint8_t *)&genInfoMem.capabilityInfo );
    a938:	0021      	movs	r1, r4
    a93a:	3111      	adds	r1, #17
    a93c:	2006      	movs	r0, #6
    a93e:	47a8      	blx	r5
  genInfoMem.nwkSecurityLevel = defaultParamsRamOnly.securityLevel;
    a940:	2320      	movs	r3, #32
    a942:	4a06      	ldr	r2, [pc, #24]	; (a95c <fillGeneralInformation+0x54>)
    a944:	5cd3      	ldrb	r3, [r2, r3]
    a946:	74a3      	strb	r3, [r4, #18]
}
    a948:	bd70      	pop	{r4, r5, r6, pc}
    a94a:	46c0      	nop			; (mov r8, r8)
    a94c:	20001db0 	.word	0x20001db0
    a950:	20000094 	.word	0x20000094
    a954:	00014d37 	.word	0x00014d37
    a958:	0000db49 	.word	0x0000db49
    a95c:	2000000c 	.word	0x2000000c

0000a960 <pdsGetItemDescr>:
\param[in] itemDescrToGet    - pointer to item descriptor to be loaded;

returns true if descriptor is found out for the given item ID, false - otherwise
******************************************************************************/
bool pdsGetItemDescr(S_Nv_ItemId_t itemId, ItemIdToMemoryMapping_t *itemDescrToGet )
{
    a960:	b5f0      	push	{r4, r5, r6, r7, lr}
    a962:	b087      	sub	sp, #28
    a964:	9101      	str	r1, [sp, #4]
  /* Calculate raw data size */
  for (uint8_t fileIdx = 0; fileIdx < PDS_ITEM_AMOUNT; fileIdx++)
  {
    ItemIdToMemoryMapping_t itemDescr;

    memcpy(&itemDescr, (void const *)itemDescrPtr, sizeof(ItemIdToMemoryMapping_t));
    a966:	aa02      	add	r2, sp, #8
    a968:	4b11      	ldr	r3, [pc, #68]	; (a9b0 <pdsGetItemDescr+0x50>)
    a96a:	0011      	movs	r1, r2
    a96c:	cb70      	ldmia	r3!, {r4, r5, r6}
    a96e:	c170      	stmia	r1!, {r4, r5, r6}
    a970:	681b      	ldr	r3, [r3, #0]
    a972:	600b      	str	r3, [r1, #0]

    if(itemDescr.itemId == itemId)
    a974:	8813      	ldrh	r3, [r2, #0]
    a976:	4283      	cmp	r3, r0
    a978:	d012      	beq.n	a9a0 <pdsGetItemDescr+0x40>
    {
      memcpy(itemDescrToGet, &itemDescr, sizeof(ItemIdToMemoryMapping_t));
      return true;
    }
    itemDescrPtr++;
    a97a:	4b0e      	ldr	r3, [pc, #56]	; (a9b4 <pdsGetItemDescr+0x54>)
    memcpy(&itemDescr, (void const *)itemDescrPtr, sizeof(ItemIdToMemoryMapping_t));
    a97c:	aa02      	add	r2, sp, #8
  for (uint8_t fileIdx = 0; fileIdx < PDS_ITEM_AMOUNT; fileIdx++)
    a97e:	490e      	ldr	r1, [pc, #56]	; (a9b8 <pdsGetItemDescr+0x58>)
    a980:	468c      	mov	ip, r1
    memcpy(&itemDescr, (void const *)itemDescrPtr, sizeof(ItemIdToMemoryMapping_t));
    a982:	0011      	movs	r1, r2
    a984:	001c      	movs	r4, r3
    a986:	cce0      	ldmia	r4!, {r5, r6, r7}
    a988:	c1e0      	stmia	r1!, {r5, r6, r7}
    a98a:	6824      	ldr	r4, [r4, #0]
    a98c:	600c      	str	r4, [r1, #0]
    if(itemDescr.itemId == itemId)
    a98e:	8811      	ldrh	r1, [r2, #0]
    a990:	4281      	cmp	r1, r0
    a992:	d005      	beq.n	a9a0 <pdsGetItemDescr+0x40>
    itemDescrPtr++;
    a994:	3310      	adds	r3, #16
  for (uint8_t fileIdx = 0; fileIdx < PDS_ITEM_AMOUNT; fileIdx++)
    a996:	4563      	cmp	r3, ip
    a998:	d1f3      	bne.n	a982 <pdsGetItemDescr+0x22>

  }
  return false;
    a99a:	2000      	movs	r0, #0
}
    a99c:	b007      	add	sp, #28
    a99e:	bdf0      	pop	{r4, r5, r6, r7, pc}
      memcpy(itemDescrToGet, &itemDescr, sizeof(ItemIdToMemoryMapping_t));
    a9a0:	2210      	movs	r2, #16
    a9a2:	a902      	add	r1, sp, #8
    a9a4:	9801      	ldr	r0, [sp, #4]
    a9a6:	4b05      	ldr	r3, [pc, #20]	; (a9bc <pdsGetItemDescr+0x5c>)
    a9a8:	4798      	blx	r3
      return true;
    a9aa:	2001      	movs	r0, #1
    a9ac:	e7f6      	b.n	a99c <pdsGetItemDescr+0x3c>
    a9ae:	46c0      	nop			; (mov r8, r8)
    a9b0:	00006100 	.word	0x00006100
    a9b4:	00006110 	.word	0x00006110
    a9b8:	000061a0 	.word	0x000061a0
    a9bc:	00014d37 	.word	0x00014d37

0000a9c0 <pdsUpdateMemory>:
{
    a9c0:	b5f0      	push	{r4, r5, r6, r7, lr}
    a9c2:	46ce      	mov	lr, r9
    a9c4:	4647      	mov	r7, r8
    a9c6:	b580      	push	{r7, lr}
    a9c8:	b085      	sub	sp, #20
    a9ca:	0007      	movs	r7, r0
    a9cc:	000e      	movs	r6, r1
    a9ce:	0015      	movs	r5, r2
    a9d0:	001c      	movs	r4, r3
  if (size == oldSize)
    a9d2:	429a      	cmp	r2, r3
    a9d4:	d017      	beq.n	aa06 <pdsUpdateMemory+0x46>
  if (pdsGetItemDescr(id, &mapItem))
    a9d6:	4669      	mov	r1, sp
    a9d8:	4b78      	ldr	r3, [pc, #480]	; (abbc <pdsUpdateMemory+0x1fc>)
    a9da:	4798      	blx	r3
    a9dc:	2800      	cmp	r0, #0
    a9de:	d100      	bne.n	a9e2 <pdsUpdateMemory+0x22>
    a9e0:	e0e6      	b.n	abb0 <pdsUpdateMemory+0x1f0>
    assert (mapItem.flags & SIZE_MODIFICATION_ALLOWED);
    a9e2:	466b      	mov	r3, sp
    a9e4:	7b1b      	ldrb	r3, [r3, #12]
    a9e6:	07db      	lsls	r3, r3, #31
    a9e8:	d506      	bpl.n	a9f8 <pdsUpdateMemory+0x38>
  switch (id)
    a9ea:	2f09      	cmp	r7, #9
    a9ec:	d900      	bls.n	a9f0 <pdsUpdateMemory+0x30>
    a9ee:	e0d9      	b.n	aba4 <pdsUpdateMemory+0x1e4>
    a9f0:	00bf      	lsls	r7, r7, #2
    a9f2:	4b73      	ldr	r3, [pc, #460]	; (abc0 <pdsUpdateMemory+0x200>)
    a9f4:	59db      	ldr	r3, [r3, r7]
    a9f6:	469f      	mov	pc, r3
    assert (mapItem.flags & SIZE_MODIFICATION_ALLOWED);
    a9f8:	4b72      	ldr	r3, [pc, #456]	; (abc4 <pdsUpdateMemory+0x204>)
    a9fa:	4a73      	ldr	r2, [pc, #460]	; (abc8 <pdsUpdateMemory+0x208>)
    a9fc:	21bc      	movs	r1, #188	; 0xbc
    a9fe:	31ff      	adds	r1, #255	; 0xff
    aa00:	4872      	ldr	r0, [pc, #456]	; (abcc <pdsUpdateMemory+0x20c>)
    aa02:	4c73      	ldr	r4, [pc, #460]	; (abd0 <pdsUpdateMemory+0x210>)
    aa04:	47a0      	blx	r4
  switch (id)
    aa06:	2807      	cmp	r0, #7
    aa08:	d063      	beq.n	aad2 <pdsUpdateMemory+0x112>
    aa0a:	d92b      	bls.n	aa64 <pdsUpdateMemory+0xa4>
    aa0c:	2808      	cmp	r0, #8
    aa0e:	d100      	bne.n	aa12 <pdsUpdateMemory+0x52>
    aa10:	e088      	b.n	ab24 <pdsUpdateMemory+0x164>
    aa12:	2809      	cmp	r0, #9
    aa14:	d000      	beq.n	aa18 <pdsUpdateMemory+0x58>
    aa16:	e0c5      	b.n	aba4 <pdsUpdateMemory+0x1e4>
	if (size == oldSize)
    aa18:	42a5      	cmp	r5, r4
    aa1a:	d100      	bne.n	aa1e <pdsUpdateMemory+0x5e>
    aa1c:	e0c2      	b.n	aba4 <pdsUpdateMemory+0x1e4>
	updateTable(data, size, oldSize);
    aa1e:	0022      	movs	r2, r4
    aa20:	0029      	movs	r1, r5
    aa22:	0030      	movs	r0, r6
    aa24:	4b6b      	ldr	r3, [pc, #428]	; (abd4 <pdsUpdateMemory+0x214>)
    aa26:	4798      	blx	r3
	if (size > oldSize)
    aa28:	42a5      	cmp	r5, r4
    aa2a:	d800      	bhi.n	aa2e <pdsUpdateMemory+0x6e>
    aa2c:	e0ba      	b.n	aba4 <pdsUpdateMemory+0x1e4>
		uint8_t *ptr = (uint8_t *)data + oldSize; // points to added records;
    aa2e:	1933      	adds	r3, r6, r4
    aa30:	1b29      	subs	r1, r5, r4
    aa32:	3901      	subs	r1, #1
    aa34:	b289      	uxth	r1, r1
    aa36:	3101      	adds	r1, #1
    aa38:	1859      	adds	r1, r3, r1
			entry->msb = 0;
    aa3a:	2200      	movs	r2, #0
    aa3c:	701a      	strb	r2, [r3, #0]
			entry++;
    aa3e:	3301      	adds	r3, #1
		while (oldSize < size)
    aa40:	428b      	cmp	r3, r1
    aa42:	d1fa      	bne.n	aa3a <pdsUpdateMemory+0x7a>
		ret = S_Nv_Write(PDS_ROUTE_TABLE_HOP_ID, 0U, size, data);
    aa44:	0033      	movs	r3, r6
    aa46:	002a      	movs	r2, r5
    aa48:	2100      	movs	r1, #0
    aa4a:	2009      	movs	r0, #9
    aa4c:	4c62      	ldr	r4, [pc, #392]	; (abd8 <pdsUpdateMemory+0x218>)
    aa4e:	47a0      	blx	r4
		assert(ret == S_Nv_ReturnValue_Ok);
    aa50:	2800      	cmp	r0, #0
    aa52:	d100      	bne.n	aa56 <pdsUpdateMemory+0x96>
    aa54:	e0a6      	b.n	aba4 <pdsUpdateMemory+0x1e4>
    aa56:	4b61      	ldr	r3, [pc, #388]	; (abdc <pdsUpdateMemory+0x21c>)
    aa58:	4a61      	ldr	r2, [pc, #388]	; (abe0 <pdsUpdateMemory+0x220>)
    aa5a:	216e      	movs	r1, #110	; 0x6e
    aa5c:	31ff      	adds	r1, #255	; 0xff
    aa5e:	485b      	ldr	r0, [pc, #364]	; (abcc <pdsUpdateMemory+0x20c>)
    aa60:	4c5b      	ldr	r4, [pc, #364]	; (abd0 <pdsUpdateMemory+0x210>)
    aa62:	47a0      	blx	r4
  switch (id)
    aa64:	2801      	cmp	r0, #1
    aa66:	d000      	beq.n	aa6a <pdsUpdateMemory+0xaa>
    aa68:	e09c      	b.n	aba4 <pdsUpdateMemory+0x1e4>
    if (0xFFU != ptr[i])
    aa6a:	7833      	ldrb	r3, [r6, #0]
    aa6c:	2bff      	cmp	r3, #255	; 0xff
    aa6e:	d17b      	bne.n	ab68 <pdsUpdateMemory+0x1a8>
    aa70:	1c73      	adds	r3, r6, #1
    aa72:	0031      	movs	r1, r6
    aa74:	3118      	adds	r1, #24
    aa76:	781a      	ldrb	r2, [r3, #0]
    aa78:	2aff      	cmp	r2, #255	; 0xff
    aa7a:	d175      	bne.n	ab68 <pdsUpdateMemory+0x1a8>
    aa7c:	3301      	adds	r3, #1
  for (uint8_t i = 0U; i < sizeof(MeshGeneralInfotMem_t); i++)
    aa7e:	428b      	cmp	r3, r1
    aa80:	d1f9      	bne.n	aa76 <pdsUpdateMemory+0xb6>
    aa82:	e08f      	b.n	aba4 <pdsUpdateMemory+0x1e4>
	updateTable(data, size, oldSize);
    aa84:	0022      	movs	r2, r4
    aa86:	0029      	movs	r1, r5
    aa88:	0030      	movs	r0, r6
    aa8a:	4b52      	ldr	r3, [pc, #328]	; (abd4 <pdsUpdateMemory+0x214>)
    aa8c:	4798      	blx	r3
	if (size > oldSize)
    aa8e:	42a5      	cmp	r5, r4
    aa90:	d800      	bhi.n	aa94 <pdsUpdateMemory+0xd4>
    aa92:	e087      	b.n	aba4 <pdsUpdateMemory+0x1e4>
		uint8_t *ptr = (uint8_t *)data + oldSize; // points to added records;
    aa94:	1937      	adds	r7, r6, r4
			memset(entry->ieeeaddr, 0xFF, LONG_ADDR_LEN);
    aa96:	4b53      	ldr	r3, [pc, #332]	; (abe4 <pdsUpdateMemory+0x224>)
    aa98:	4699      	mov	r9, r3
			entry->currentTimeOut = 0;
    aa9a:	2300      	movs	r3, #0
    aa9c:	4698      	mov	r8, r3
			memset(entry->ieeeaddr, 0xFF, LONG_ADDR_LEN);
    aa9e:	2208      	movs	r2, #8
    aaa0:	21ff      	movs	r1, #255	; 0xff
    aaa2:	0038      	movs	r0, r7
    aaa4:	47c8      	blx	r9
			entry->currentTimeOut = 0;
    aaa6:	4643      	mov	r3, r8
    aaa8:	60bb      	str	r3, [r7, #8]
			entry++;
    aaaa:	3710      	adds	r7, #16
			oldSize += sizeof(DeviceTable_t);
    aaac:	3410      	adds	r4, #16
    aaae:	b2a4      	uxth	r4, r4
		while (oldSize < size)
    aab0:	42a5      	cmp	r5, r4
    aab2:	d8f4      	bhi.n	aa9e <pdsUpdateMemory+0xde>
		ret = S_Nv_Write(PDS_DEVICE_TABLE_NONSLEEP_ID, 0U, size, data);
    aab4:	0033      	movs	r3, r6
    aab6:	002a      	movs	r2, r5
    aab8:	2100      	movs	r1, #0
    aaba:	2006      	movs	r0, #6
    aabc:	4c46      	ldr	r4, [pc, #280]	; (abd8 <pdsUpdateMemory+0x218>)
    aabe:	47a0      	blx	r4
		assert(ret == S_Nv_ReturnValue_Ok);
    aac0:	2800      	cmp	r0, #0
    aac2:	d06f      	beq.n	aba4 <pdsUpdateMemory+0x1e4>
    aac4:	4b45      	ldr	r3, [pc, #276]	; (abdc <pdsUpdateMemory+0x21c>)
    aac6:	4a48      	ldr	r2, [pc, #288]	; (abe8 <pdsUpdateMemory+0x228>)
    aac8:	2184      	movs	r1, #132	; 0x84
    aaca:	0049      	lsls	r1, r1, #1
    aacc:	483f      	ldr	r0, [pc, #252]	; (abcc <pdsUpdateMemory+0x20c>)
    aace:	4c40      	ldr	r4, [pc, #256]	; (abd0 <pdsUpdateMemory+0x210>)
    aad0:	47a0      	blx	r4
	if (size == oldSize)
    aad2:	42a5      	cmp	r5, r4
    aad4:	d066      	beq.n	aba4 <pdsUpdateMemory+0x1e4>
	updateTable(data, size, oldSize);
    aad6:	0022      	movs	r2, r4
    aad8:	0029      	movs	r1, r5
    aada:	0030      	movs	r0, r6
    aadc:	4b3d      	ldr	r3, [pc, #244]	; (abd4 <pdsUpdateMemory+0x214>)
    aade:	4798      	blx	r3
	if (size > oldSize)
    aae0:	42a5      	cmp	r5, r4
    aae2:	d95f      	bls.n	aba4 <pdsUpdateMemory+0x1e4>
		uint8_t *ptr = (uint8_t *)data + oldSize; // points to added records;
    aae4:	1937      	adds	r7, r6, r4
			memset(entry->ieeeaddr, 0xFF, LONG_ADDR_LEN);
    aae6:	4b3f      	ldr	r3, [pc, #252]	; (abe4 <pdsUpdateMemory+0x224>)
    aae8:	4699      	mov	r9, r3
			entry->currentTimeOut = 0;
    aaea:	2300      	movs	r3, #0
    aaec:	4698      	mov	r8, r3
			memset(entry->ieeeaddr, 0xFF, LONG_ADDR_LEN);
    aaee:	2208      	movs	r2, #8
    aaf0:	21ff      	movs	r1, #255	; 0xff
    aaf2:	0038      	movs	r0, r7
    aaf4:	47c8      	blx	r9
			entry->currentTimeOut = 0;
    aaf6:	4643      	mov	r3, r8
    aaf8:	60fb      	str	r3, [r7, #12]
			entry->actualTimeOut = 0;
    aafa:	60bb      	str	r3, [r7, #8]
			entry++;
    aafc:	3714      	adds	r7, #20
			oldSize += sizeof(SleepDeviceTable_t);
    aafe:	3414      	adds	r4, #20
    ab00:	b2a4      	uxth	r4, r4
		while (oldSize < size)
    ab02:	42a5      	cmp	r5, r4
    ab04:	d8f3      	bhi.n	aaee <pdsUpdateMemory+0x12e>
		ret = S_Nv_Write(PDS_DEVICE_TABLE_SLEEP_ID, 0U, size, data);
    ab06:	0033      	movs	r3, r6
    ab08:	002a      	movs	r2, r5
    ab0a:	2100      	movs	r1, #0
    ab0c:	2007      	movs	r0, #7
    ab0e:	4c32      	ldr	r4, [pc, #200]	; (abd8 <pdsUpdateMemory+0x218>)
    ab10:	47a0      	blx	r4
		assert(ret == S_Nv_ReturnValue_Ok);
    ab12:	2800      	cmp	r0, #0
    ab14:	d046      	beq.n	aba4 <pdsUpdateMemory+0x1e4>
    ab16:	4b31      	ldr	r3, [pc, #196]	; (abdc <pdsUpdateMemory+0x21c>)
    ab18:	4a34      	ldr	r2, [pc, #208]	; (abec <pdsUpdateMemory+0x22c>)
    ab1a:	2195      	movs	r1, #149	; 0x95
    ab1c:	0049      	lsls	r1, r1, #1
    ab1e:	482b      	ldr	r0, [pc, #172]	; (abcc <pdsUpdateMemory+0x20c>)
    ab20:	4c2b      	ldr	r4, [pc, #172]	; (abd0 <pdsUpdateMemory+0x210>)
    ab22:	47a0      	blx	r4
	if (size == oldSize)
    ab24:	42a5      	cmp	r5, r4
    ab26:	d03d      	beq.n	aba4 <pdsUpdateMemory+0x1e4>
	updateTable(data, size, oldSize);
    ab28:	0022      	movs	r2, r4
    ab2a:	0029      	movs	r1, r5
    ab2c:	0030      	movs	r0, r6
    ab2e:	4b29      	ldr	r3, [pc, #164]	; (abd4 <pdsUpdateMemory+0x214>)
    ab30:	4798      	blx	r3
	if (size > oldSize)
    ab32:	42a5      	cmp	r5, r4
    ab34:	d936      	bls.n	aba4 <pdsUpdateMemory+0x1e4>
		uint8_t *ptr = (uint8_t *)data + oldSize; // points to added records;
    ab36:	1933      	adds	r3, r6, r4
			entry->nextHopAddr = 0xFF;
    ab38:	21ff      	movs	r1, #255	; 0xff
    ab3a:	7019      	strb	r1, [r3, #0]
			entry->score = 0;
    ab3c:	2200      	movs	r2, #0
    ab3e:	705a      	strb	r2, [r3, #1]
			entry++;
    ab40:	3302      	adds	r3, #2
			oldSize += sizeof(CoordRouteTable_t);
    ab42:	3402      	adds	r4, #2
    ab44:	b2a4      	uxth	r4, r4
		while (oldSize < size)
    ab46:	42a5      	cmp	r5, r4
    ab48:	d8f7      	bhi.n	ab3a <pdsUpdateMemory+0x17a>
		ret = S_Nv_Write(PDS_ROUTE_TABLE_COORD_ID, 0U, size, data);
    ab4a:	0033      	movs	r3, r6
    ab4c:	002a      	movs	r2, r5
    ab4e:	2100      	movs	r1, #0
    ab50:	2008      	movs	r0, #8
    ab52:	4c21      	ldr	r4, [pc, #132]	; (abd8 <pdsUpdateMemory+0x218>)
    ab54:	47a0      	blx	r4
		assert(ret == S_Nv_ReturnValue_Ok);
    ab56:	2800      	cmp	r0, #0
    ab58:	d024      	beq.n	aba4 <pdsUpdateMemory+0x1e4>
    ab5a:	4b20      	ldr	r3, [pc, #128]	; (abdc <pdsUpdateMemory+0x21c>)
    ab5c:	4a24      	ldr	r2, [pc, #144]	; (abf0 <pdsUpdateMemory+0x230>)
    ab5e:	21a6      	movs	r1, #166	; 0xa6
    ab60:	0049      	lsls	r1, r1, #1
    ab62:	481a      	ldr	r0, [pc, #104]	; (abcc <pdsUpdateMemory+0x20c>)
    ab64:	4c1a      	ldr	r4, [pc, #104]	; (abd0 <pdsUpdateMemory+0x210>)
    ab66:	47a0      	blx	r4
  memcpy(myLongAddress, &updateGenInfo->extendedAddress, LONG_ADDR_LEN);
    ab68:	2208      	movs	r2, #8
    ab6a:	0031      	movs	r1, r6
    ab6c:	4821      	ldr	r0, [pc, #132]	; (abf4 <pdsUpdateMemory+0x234>)
    ab6e:	4b22      	ldr	r3, [pc, #136]	; (abf8 <pdsUpdateMemory+0x238>)
    ab70:	4798      	blx	r3
  MiApp_Set(SHORT_ADDRESS, (uint8_t *)&updateGenInfo->networkAddress);
    ab72:	0031      	movs	r1, r6
    ab74:	310e      	adds	r1, #14
    ab76:	2002      	movs	r0, #2
    ab78:	4c20      	ldr	r4, [pc, #128]	; (abfc <pdsUpdateMemory+0x23c>)
    ab7a:	47a0      	blx	r4
  MiApp_Set(PANID, (uint8_t *)&updateGenInfo->panId );
    ab7c:	0031      	movs	r1, r6
    ab7e:	310c      	adds	r1, #12
    ab80:	2001      	movs	r0, #1
    ab82:	47a0      	blx	r4
  MiApp_Set(CHANNEL, (uint8_t *)&updateGenInfo->logicalChannel );
    ab84:	0031      	movs	r1, r6
    ab86:	3110      	adds	r1, #16
    ab88:	2000      	movs	r0, #0
    ab8a:	47a0      	blx	r4
  MiApp_Set(CHANNELMAP, (uint8_t *)&genInfoMem.channelMap );
    ab8c:	4d1c      	ldr	r5, [pc, #112]	; (ac00 <pdsUpdateMemory+0x240>)
    ab8e:	0029      	movs	r1, r5
    ab90:	2005      	movs	r0, #5
    ab92:	47a0      	blx	r4
  MiApp_Set(CAPABILITYINFO, (uint8_t *)&genInfoMem.capabilityInfo );
    ab94:	0029      	movs	r1, r5
    ab96:	3109      	adds	r1, #9
    ab98:	2006      	movs	r0, #6
    ab9a:	47a0      	blx	r4
  defaultParamsRamOnly.securityLevel = updateGenInfo->nwkSecurityLevel;
    ab9c:	7cb1      	ldrb	r1, [r6, #18]
    ab9e:	2320      	movs	r3, #32
    aba0:	4a18      	ldr	r2, [pc, #96]	; (ac04 <pdsUpdateMemory+0x244>)
    aba2:	54d1      	strb	r1, [r2, r3]
}
    aba4:	2001      	movs	r0, #1
    aba6:	b005      	add	sp, #20
    aba8:	bc0c      	pop	{r2, r3}
    abaa:	4690      	mov	r8, r2
    abac:	4699      	mov	r9, r3
    abae:	bdf0      	pop	{r4, r5, r6, r7, pc}
  switch (id)
    abb0:	2f09      	cmp	r7, #9
    abb2:	d8f7      	bhi.n	aba4 <pdsUpdateMemory+0x1e4>
    abb4:	00bf      	lsls	r7, r7, #2
    abb6:	4b14      	ldr	r3, [pc, #80]	; (ac08 <pdsUpdateMemory+0x248>)
    abb8:	59db      	ldr	r3, [r3, r7]
    abba:	469f      	mov	pc, r3
    abbc:	0000a961 	.word	0x0000a961
    abc0:	000165b8 	.word	0x000165b8
    abc4:	00016670 	.word	0x00016670
    abc8:	00016660 	.word	0x00016660
    abcc:	0001669c 	.word	0x0001669c
    abd0:	00014c75 	.word	0x00014c75
    abd4:	0000a8ed 	.word	0x0000a8ed
    abd8:	0000a155 	.word	0x0000a155
    abdc:	00016534 	.word	0x00016534
    abe0:	0001664c 	.word	0x0001664c
    abe4:	00014d49 	.word	0x00014d49
    abe8:	00016608 	.word	0x00016608
    abec:	00016620 	.word	0x00016620
    abf0:	00016634 	.word	0x00016634
    abf4:	20000094 	.word	0x20000094
    abf8:	00014d37 	.word	0x00014d37
    abfc:	0000d995 	.word	0x0000d995
    ac00:	20001db8 	.word	0x20001db8
    ac04:	2000000c 	.word	0x2000000c
    ac08:	000165e0 	.word	0x000165e0

0000ac0c <pdsGetDirDescr>:
\param[in] dirDescrToGet    - pointer to dir descriptor to be loaded;

returns true if descriptor is found out for the given dir ID, false - otherwise
******************************************************************************/
bool pdsGetDirDescr(S_Nv_ItemId_t itemId, PDS_DirDescr_t *dirDescrToGet )
{
    ac0c:	b570      	push	{r4, r5, r6, lr}
    ac0e:	b082      	sub	sp, #8
    ac10:	000c      	movs	r4, r1
  /* Calculate raw data size */
  for (uint8_t fileIdx = 0; fileIdx < PDS_DIRECTORIES_AMOUNT; fileIdx++)
  {
    PDS_DirDescr_t dirDescr;

    memcpy(&dirDescr, (void const *)dirDescrPtr, sizeof(PDS_DirDescr_t));
    ac12:	466b      	mov	r3, sp
    ac14:	4a08      	ldr	r2, [pc, #32]	; (ac38 <pdsGetDirDescr+0x2c>)
    ac16:	4669      	mov	r1, sp
    ac18:	ca60      	ldmia	r2!, {r5, r6}
    ac1a:	c160      	stmia	r1!, {r5, r6}
    if(dirDescr.memoryId == itemId)
    ac1c:	88da      	ldrh	r2, [r3, #6]
      memcpy(dirDescrToGet, &dirDescr, sizeof(PDS_DirDescr_t));
      return true;
    }
    dirDescrPtr++;
  }
  return false;
    ac1e:	2300      	movs	r3, #0
    if(dirDescr.memoryId == itemId)
    ac20:	4282      	cmp	r2, r0
    ac22:	d002      	beq.n	ac2a <pdsGetDirDescr+0x1e>
}
    ac24:	0018      	movs	r0, r3
    ac26:	b002      	add	sp, #8
    ac28:	bd70      	pop	{r4, r5, r6, pc}
      memcpy(dirDescrToGet, &dirDescr, sizeof(PDS_DirDescr_t));
    ac2a:	2208      	movs	r2, #8
    ac2c:	4669      	mov	r1, sp
    ac2e:	0020      	movs	r0, r4
    ac30:	4b02      	ldr	r3, [pc, #8]	; (ac3c <pdsGetDirDescr+0x30>)
    ac32:	4798      	blx	r3
      return true;
    ac34:	2301      	movs	r3, #1
    ac36:	e7f5      	b.n	ac24 <pdsGetDirDescr+0x18>
    ac38:	00006190 	.word	0x00006190
    ac3c:	00014d37 	.word	0x00014d37

0000ac40 <PHY_DataConf>:
 *      None
 *
 *****************************************************************************************/
void PHY_DataConf(uint8_t status)
{
	dataStatus = (miwi_status_t)status;
    ac40:	4b02      	ldr	r3, [pc, #8]	; (ac4c <PHY_DataConf+0xc>)
    ac42:	7018      	strb	r0, [r3, #0]
	dataConfAvailable = true;
    ac44:	2201      	movs	r2, #1
    ac46:	4b02      	ldr	r3, [pc, #8]	; (ac50 <PHY_DataConf+0x10>)
    ac48:	701a      	strb	r2, [r3, #0]
}
    ac4a:	4770      	bx	lr
    ac4c:	20001e5c 	.word	0x20001e5c
    ac50:	200003dc 	.word	0x200003dc

0000ac54 <MiMAC_SetAltAddress>:
{
    ac54:	b510      	push	{r4, lr}
	myNetworkAddress.v[0] = Address[0];
    ac56:	7802      	ldrb	r2, [r0, #0]
    ac58:	4b08      	ldr	r3, [pc, #32]	; (ac7c <MiMAC_SetAltAddress+0x28>)
    ac5a:	701a      	strb	r2, [r3, #0]
	myNetworkAddress.v[1] = Address[1];
    ac5c:	7842      	ldrb	r2, [r0, #1]
    ac5e:	705a      	strb	r2, [r3, #1]
	MAC_PANID.v[0] = PanId[0];
    ac60:	780a      	ldrb	r2, [r1, #0]
    ac62:	4c07      	ldr	r4, [pc, #28]	; (ac80 <MiMAC_SetAltAddress+0x2c>)
    ac64:	7022      	strb	r2, [r4, #0]
	MAC_PANID.v[1] = PanId[1];
    ac66:	784a      	ldrb	r2, [r1, #1]
    ac68:	7062      	strb	r2, [r4, #1]
	PHY_SetShortAddr(myNetworkAddress.Val);
    ac6a:	8818      	ldrh	r0, [r3, #0]
    ac6c:	4b05      	ldr	r3, [pc, #20]	; (ac84 <MiMAC_SetAltAddress+0x30>)
    ac6e:	4798      	blx	r3
	PHY_SetPanId(MAC_PANID.Val);
    ac70:	8820      	ldrh	r0, [r4, #0]
    ac72:	4b05      	ldr	r3, [pc, #20]	; (ac88 <MiMAC_SetAltAddress+0x34>)
    ac74:	4798      	blx	r3
}
    ac76:	2001      	movs	r0, #1
    ac78:	bd10      	pop	{r4, pc}
    ac7a:	46c0      	nop			; (mov r8, r8)
    ac7c:	20001e4c 	.word	0x20001e4c
    ac80:	20001e64 	.word	0x20001e64
    ac84:	0000b609 	.word	0x0000b609
    ac88:	0000b5e9 	.word	0x0000b5e9

0000ac8c <MiMAC_PowerState>:
{
    ac8c:	b510      	push	{r4, lr}
    switch (PowerState)
    ac8e:	2800      	cmp	r0, #0
    ac90:	d003      	beq.n	ac9a <MiMAC_PowerState+0xe>
    ac92:	28ff      	cmp	r0, #255	; 0xff
    ac94:	d005      	beq.n	aca2 <MiMAC_PowerState+0x16>
            return false;
    ac96:	2000      	movs	r0, #0
    ac98:	e002      	b.n	aca0 <MiMAC_PowerState+0x14>
			PHY_Sleep();
    ac9a:	4b04      	ldr	r3, [pc, #16]	; (acac <MiMAC_PowerState+0x20>)
    ac9c:	4798      	blx	r3
    return true;
    ac9e:	2001      	movs	r0, #1
}
    aca0:	bd10      	pop	{r4, pc}
			PHY_Wakeup();
    aca2:	4b03      	ldr	r3, [pc, #12]	; (acb0 <MiMAC_PowerState+0x24>)
    aca4:	4798      	blx	r3
    return true;
    aca6:	2001      	movs	r0, #1
            break;
    aca8:	e7fa      	b.n	aca0 <MiMAC_PowerState+0x14>
    acaa:	46c0      	nop			; (mov r8, r8)
    acac:	0000b635 	.word	0x0000b635
    acb0:	0000b661 	.word	0x0000b661

0000acb4 <MiMAC_Set>:
{
    acb4:	b510      	push	{r4, lr}
    switch(id)
    acb6:	2800      	cmp	r0, #0
    acb8:	d109      	bne.n	acce <MiMAC_Set+0x1a>
         if(*value > 26) //TODO: this check is necessary here? as we may connect a sub-gig or a 2.4gig?
    acba:	780b      	ldrb	r3, [r1, #0]
    acbc:	2b1a      	cmp	r3, #26
    acbe:	d807      	bhi.n	acd0 <MiMAC_Set+0x1c>
          MACCurrentChannel = *value;
    acc0:	4a04      	ldr	r2, [pc, #16]	; (acd4 <MiMAC_Set+0x20>)
    acc2:	7013      	strb	r3, [r2, #0]
          PHY_SetChannel(MACCurrentChannel);
    acc4:	0018      	movs	r0, r3
    acc6:	4b04      	ldr	r3, [pc, #16]	; (acd8 <MiMAC_Set+0x24>)
    acc8:	4798      	blx	r3
          return true;
    acca:	2001      	movs	r0, #1
    accc:	e000      	b.n	acd0 <MiMAC_Set+0x1c>
    return false;
    acce:	2000      	movs	r0, #0
}
    acd0:	bd10      	pop	{r4, pc}
    acd2:	46c0      	nop			; (mov r8, r8)
    acd4:	20001e66 	.word	0x20001e66
    acd8:	0000b68d 	.word	0x0000b68d

0000acdc <MiMAC_Init>:
{
    acdc:	b530      	push	{r4, r5, lr}
    acde:	b083      	sub	sp, #12
    ace0:	466c      	mov	r4, sp
    ace2:	9000      	str	r0, [sp, #0]
    ace4:	9101      	str	r1, [sp, #4]
	PHY_Init();
    ace6:	4b0f      	ldr	r3, [pc, #60]	; (ad24 <MiMAC_Init+0x48>)
    ace8:	4798      	blx	r3
	MACInitParams = initValue;
    acea:	4d0f      	ldr	r5, [pc, #60]	; (ad28 <MiMAC_Init+0x4c>)
    acec:	002b      	movs	r3, r5
    acee:	cc06      	ldmia	r4!, {r1, r2}
    acf0:	c306      	stmia	r3!, {r1, r2}
	uint16_t x =  PHY_RandomReq();
    acf2:	4b0e      	ldr	r3, [pc, #56]	; (ad2c <MiMAC_Init+0x50>)
    acf4:	4798      	blx	r3
    acf6:	0004      	movs	r4, r0
	PHY_SetRxState(true);
    acf8:	2001      	movs	r0, #1
    acfa:	4b0d      	ldr	r3, [pc, #52]	; (ad30 <MiMAC_Init+0x54>)
    acfc:	4798      	blx	r3
	IEEESeqNum =   x & 0xff;
    acfe:	4b0d      	ldr	r3, [pc, #52]	; (ad34 <MiMAC_Init+0x58>)
    ad00:	701c      	strb	r4, [r3, #0]
	PHY_SetIEEEAddr(MACInitParams.PAddress);
    ad02:	6868      	ldr	r0, [r5, #4]
    ad04:	4b0c      	ldr	r3, [pc, #48]	; (ad38 <MiMAC_Init+0x5c>)
    ad06:	4798      	blx	r3
		RxBuffer[i].PayloadLen = 0;
    ad08:	4b0c      	ldr	r3, [pc, #48]	; (ad3c <MiMAC_Init+0x60>)
    ad0a:	2200      	movs	r2, #0
    ad0c:	701a      	strb	r2, [r3, #0]
    ad0e:	217f      	movs	r1, #127	; 0x7f
    ad10:	545a      	strb	r2, [r3, r1]
    ad12:	317f      	adds	r1, #127	; 0x7f
    ad14:	545a      	strb	r2, [r3, r1]
    ad16:	217e      	movs	r1, #126	; 0x7e
    ad18:	31ff      	adds	r1, #255	; 0xff
    ad1a:	545a      	strb	r2, [r3, r1]
}
    ad1c:	2001      	movs	r0, #1
    ad1e:	b003      	add	sp, #12
    ad20:	bd30      	pop	{r4, r5, pc}
    ad22:	46c0      	nop			; (mov r8, r8)
    ad24:	0000b581 	.word	0x0000b581
    ad28:	20001e54 	.word	0x20001e54
    ad2c:	0000b531 	.word	0x0000b531
    ad30:	0000b5d5 	.word	0x0000b5d5
    ad34:	20001dc8 	.word	0x20001dc8
    ad38:	0000b6c9 	.word	0x0000b6c9
    ad3c:	20001e80 	.word	0x20001e80

0000ad40 <MiMAC_SendPacket>:
{
    ad40:	b5f0      	push	{r4, r5, r6, r7, lr}
    ad42:	46de      	mov	lr, fp
    ad44:	4657      	mov	r7, sl
    ad46:	464e      	mov	r6, r9
    ad48:	4645      	mov	r5, r8
    ad4a:	b5e0      	push	{r5, r6, r7, lr}
    ad4c:	b08b      	sub	sp, #44	; 0x2c
    ad4e:	9003      	str	r0, [sp, #12]
    ad50:	000e      	movs	r6, r1
    ad52:	9104      	str	r1, [sp, #16]
    ad54:	1c11      	adds	r1, r2, #0
    ad56:	0014      	movs	r4, r2
    ad58:	0a24      	lsrs	r4, r4, #8
    ad5a:	9205      	str	r2, [sp, #20]
    ad5c:	9301      	str	r3, [sp, #4]
    ad5e:	aa14      	add	r2, sp, #80	; 0x50
    ad60:	7815      	ldrb	r5, [r2, #0]
    ad62:	aa15      	add	r2, sp, #84	; 0x54
    ad64:	7813      	ldrb	r3, [r2, #0]
    ad66:	9302      	str	r3, [sp, #8]
    ad68:	b2c3      	uxtb	r3, r0
    ad6a:	4698      	mov	r8, r3
    ad6c:	0698      	lsls	r0, r3, #26
    ad6e:	0fc3      	lsrs	r3, r0, #31
    ad70:	4699      	mov	r9, r3
    ad72:	b2c9      	uxtb	r1, r1
    ad74:	b2e2      	uxtb	r2, r4
    if (transParam.flags.bits.broadcast)
    ad76:	4643      	mov	r3, r8
    ad78:	075b      	lsls	r3, r3, #29
    ad7a:	d500      	bpl.n	ad7e <MiMAC_SendPacket+0x3e>
        transParam.altDestAddr = true;
    ad7c:	2101      	movs	r1, #1
    if (transParam.flags.bits.packetType == PACKET_TYPE_COMMAND)
    ad7e:	2303      	movs	r3, #3
    ad80:	4644      	mov	r4, r8
    ad82:	4023      	ands	r3, r4
    ad84:	2b01      	cmp	r3, #1
    ad86:	d037      	beq.n	adf8 <MiMAC_SendPacket+0xb8>
    } else if (transParam.flags.bits.packetType == PACKET_TYPE_DATA)
    ad88:	425c      	negs	r4, r3
    ad8a:	415c      	adcs	r4, r3
        frameControl = 0x03;
    ad8c:	b2e0      	uxtb	r0, r4
    ad8e:	4682      	mov	sl, r0
    if ((transParam.DestPANID.Val == MAC_PANID.Val) && (MAC_PANID.Val != 0xFFFF)) // this is intraPAN
    ad90:	ac03      	add	r4, sp, #12
    ad92:	8964      	ldrh	r4, [r4, #10]
    ad94:	4f7b      	ldr	r7, [pc, #492]	; (af84 <MiMAC_SendPacket+0x244>)
    ad96:	883f      	ldrh	r7, [r7, #0]
    ad98:	42a7      	cmp	r7, r4
    ad9a:	d030      	beq.n	adfe <MiMAC_SendPacket+0xbe>
        IntraPAN = false;
    ad9c:	2000      	movs	r0, #0
    ad9e:	4684      	mov	ip, r0
        headerLength = 7;
    ada0:	3007      	adds	r0, #7
    ada2:	4683      	mov	fp, r0
        headerLength += 8;
    ada4:	465c      	mov	r4, fp
    ada6:	3408      	adds	r4, #8
    if (transParam.altDestAddr)
    ada8:	2900      	cmp	r1, #0
    adaa:	d000      	beq.n	adae <MiMAC_SendPacket+0x6e>
        headerLength += 2;
    adac:	3c06      	subs	r4, #6
    if (transParam.altSrcAddr)
    adae:	2a00      	cmp	r2, #0
    adb0:	d036      	beq.n	ae20 <MiMAC_SendPacket+0xe0>
        headerLength += 2;
    adb2:	3402      	adds	r4, #2
    adb4:	b2e4      	uxtb	r4, r4
    if (transParam.flags.bits.ackReq && transParam.flags.bits.broadcast == false)
    adb6:	2724      	movs	r7, #36	; 0x24
    adb8:	46bb      	mov	fp, r7
    adba:	4647      	mov	r7, r8
    adbc:	4658      	mov	r0, fp
    adbe:	4007      	ands	r7, r0
    adc0:	2f20      	cmp	r7, #32
    adc2:	d030      	beq.n	ae26 <MiMAC_SendPacket+0xe6>
    if (transParam.flags.bits.packetType == PACKET_TYPE_RESERVE)
    adc4:	2b03      	cmp	r3, #3
    adc6:	d032      	beq.n	ae2e <MiMAC_SendPacket+0xee>
		packet[loc++] = MACPayloadLen+headerLength;
    adc8:	4b6f      	ldr	r3, [pc, #444]	; (af88 <MiMAC_SendPacket+0x248>)
    adca:	1964      	adds	r4, r4, r5
    adcc:	701c      	strb	r4, [r3, #0]
	packet[loc++] = frameControl;
    adce:	4650      	mov	r0, sl
    add0:	7058      	strb	r0, [r3, #1]
    if (transParam.flags.bits.packetType == PACKET_TYPE_RESERVE)
    add2:	ac03      	add	r4, sp, #12
    add4:	464b      	mov	r3, r9
    add6:	015b      	lsls	r3, r3, #5
    add8:	7820      	ldrb	r0, [r4, #0]
    adda:	2720      	movs	r7, #32
    addc:	43b8      	bics	r0, r7
    adde:	4318      	orrs	r0, r3
    ade0:	7020      	strb	r0, [r4, #0]
    ade2:	43c4      	mvns	r4, r0
    ade4:	07a3      	lsls	r3, r4, #30
    ade6:	d029      	beq.n	ae3c <MiMAC_SendPacket+0xfc>
        if (transParam.altDestAddr && transParam.altSrcAddr)
    ade8:	2900      	cmp	r1, #0
    adea:	d048      	beq.n	ae7e <MiMAC_SendPacket+0x13e>
    adec:	2a00      	cmp	r2, #0
    adee:	d02f      	beq.n	ae50 <MiMAC_SendPacket+0x110>
			packet[loc++] = 0x88;
    adf0:	2488      	movs	r4, #136	; 0x88
    adf2:	4965      	ldr	r1, [pc, #404]	; (af88 <MiMAC_SendPacket+0x248>)
    adf4:	708c      	strb	r4, [r1, #2]
    adf6:	e02e      	b.n	ae56 <MiMAC_SendPacket+0x116>
        frameControl = 0x03;
    adf8:	2003      	movs	r0, #3
    adfa:	4682      	mov	sl, r0
    adfc:	e7c8      	b.n	ad90 <MiMAC_SendPacket+0x50>
    if ((transParam.DestPANID.Val == MAC_PANID.Val) && (MAC_PANID.Val != 0xFFFF)) // this is intraPAN
    adfe:	4863      	ldr	r0, [pc, #396]	; (af8c <MiMAC_SendPacket+0x24c>)
    ae00:	4284      	cmp	r4, r0
    ae02:	d008      	beq.n	ae16 <MiMAC_SendPacket+0xd6>
        frameControl |= 0x40;
    ae04:	2440      	movs	r4, #64	; 0x40
    ae06:	4650      	mov	r0, sl
    ae08:	4320      	orrs	r0, r4
    ae0a:	4682      	mov	sl, r0
        IntraPAN = true;
    ae0c:	2001      	movs	r0, #1
    ae0e:	4684      	mov	ip, r0
        headerLength = 5;
    ae10:	3004      	adds	r0, #4
    ae12:	4683      	mov	fp, r0
        IntraPAN = true;
    ae14:	e7c6      	b.n	ada4 <MiMAC_SendPacket+0x64>
        IntraPAN = false;
    ae16:	2000      	movs	r0, #0
    ae18:	4684      	mov	ip, r0
        headerLength = 7;
    ae1a:	3007      	adds	r0, #7
    ae1c:	4683      	mov	fp, r0
    ae1e:	e7c1      	b.n	ada4 <MiMAC_SendPacket+0x64>
        headerLength += 8;
    ae20:	3408      	adds	r4, #8
    ae22:	b2e4      	uxtb	r4, r4
    ae24:	e7c7      	b.n	adb6 <MiMAC_SendPacket+0x76>
        frameControl |= 0x20;
    ae26:	4650      	mov	r0, sl
    ae28:	4338      	orrs	r0, r7
    ae2a:	4682      	mov	sl, r0
    ae2c:	e7ca      	b.n	adc4 <MiMAC_SendPacket+0x84>
        transParam.altSrcAddr = true;
    ae2e:	2201      	movs	r2, #1
        transParam.flags.bits.ackReq = false;
    ae30:	2300      	movs	r3, #0
    ae32:	4699      	mov	r9, r3
        IntraPAN = false;
    ae34:	469c      	mov	ip, r3
        frameControl = 0x00;
    ae36:	469a      	mov	sl, r3
        headerLength = 7;
    ae38:	2407      	movs	r4, #7
    ae3a:	e7c5      	b.n	adc8 <MiMAC_SendPacket+0x88>
		packet[loc++] = 0x80;
    ae3c:	4952      	ldr	r1, [pc, #328]	; (af88 <MiMAC_SendPacket+0x248>)
    ae3e:	2080      	movs	r0, #128	; 0x80
    ae40:	7088      	strb	r0, [r1, #2]
		packet[loc++] = IEEESeqNum++;
    ae42:	4c53      	ldr	r4, [pc, #332]	; (af90 <MiMAC_SendPacket+0x250>)
    ae44:	7820      	ldrb	r0, [r4, #0]
    ae46:	1c46      	adds	r6, r0, #1
    ae48:	7026      	strb	r6, [r4, #0]
    ae4a:	70c8      	strb	r0, [r1, #3]
    ae4c:	2104      	movs	r1, #4
    ae4e:	e02c      	b.n	aeaa <MiMAC_SendPacket+0x16a>
			packet[loc++] = 0xC8;
    ae50:	24c8      	movs	r4, #200	; 0xc8
    ae52:	494d      	ldr	r1, [pc, #308]	; (af88 <MiMAC_SendPacket+0x248>)
    ae54:	708c      	strb	r4, [r1, #2]
		packet[loc++] = IEEESeqNum++;
    ae56:	4c4e      	ldr	r4, [pc, #312]	; (af90 <MiMAC_SendPacket+0x250>)
    ae58:	7821      	ldrb	r1, [r4, #0]
    ae5a:	1c4b      	adds	r3, r1, #1
    ae5c:	7023      	strb	r3, [r4, #0]
    ae5e:	4c4a      	ldr	r4, [pc, #296]	; (af88 <MiMAC_SendPacket+0x248>)
    ae60:	70e1      	strb	r1, [r4, #3]
		packet[loc++] = transParam.DestPANID.v[0];
    ae62:	a903      	add	r1, sp, #12
    ae64:	7a8b      	ldrb	r3, [r1, #10]
    ae66:	7123      	strb	r3, [r4, #4]
		packet[loc++] = transParam.DestPANID.v[1];
    ae68:	7ac9      	ldrb	r1, [r1, #11]
    ae6a:	7161      	strb	r1, [r4, #5]
        if (transParam.flags.bits.broadcast)
    ae6c:	0743      	lsls	r3, r0, #29
    ae6e:	d417      	bmi.n	aea0 <MiMAC_SendPacket+0x160>
				packet[loc++] = transParam.DestAddress[0];
    ae70:	7830      	ldrb	r0, [r6, #0]
    ae72:	4945      	ldr	r1, [pc, #276]	; (af88 <MiMAC_SendPacket+0x248>)
    ae74:	7188      	strb	r0, [r1, #6]
				packet[loc++] = transParam.DestAddress[1];
    ae76:	7870      	ldrb	r0, [r6, #1]
    ae78:	71c8      	strb	r0, [r1, #7]
    ae7a:	2108      	movs	r1, #8
    ae7c:	e015      	b.n	aeaa <MiMAC_SendPacket+0x16a>
        } else if (transParam.altDestAddr == 0 && transParam.altSrcAddr == 1)
    ae7e:	2a00      	cmp	r2, #0
    ae80:	d063      	beq.n	af4a <MiMAC_SendPacket+0x20a>
			packet[loc++] = 0x8C;
    ae82:	4c41      	ldr	r4, [pc, #260]	; (af88 <MiMAC_SendPacket+0x248>)
    ae84:	218c      	movs	r1, #140	; 0x8c
    ae86:	70a1      	strb	r1, [r4, #2]
		packet[loc++] = IEEESeqNum++;
    ae88:	4b41      	ldr	r3, [pc, #260]	; (af90 <MiMAC_SendPacket+0x250>)
    ae8a:	7819      	ldrb	r1, [r3, #0]
    ae8c:	1c4f      	adds	r7, r1, #1
    ae8e:	701f      	strb	r7, [r3, #0]
    ae90:	70e1      	strb	r1, [r4, #3]
		packet[loc++] = transParam.DestPANID.v[0];
    ae92:	a903      	add	r1, sp, #12
    ae94:	7a8b      	ldrb	r3, [r1, #10]
    ae96:	7123      	strb	r3, [r4, #4]
		packet[loc++] = transParam.DestPANID.v[1];
    ae98:	7ac9      	ldrb	r1, [r1, #11]
    ae9a:	7161      	strb	r1, [r4, #5]
        if (transParam.flags.bits.broadcast)
    ae9c:	0743      	lsls	r3, r0, #29
    ae9e:	d567      	bpl.n	af70 <MiMAC_SendPacket+0x230>
			packet[loc++] = 0xFF;
    aea0:	4939      	ldr	r1, [pc, #228]	; (af88 <MiMAC_SendPacket+0x248>)
    aea2:	20ff      	movs	r0, #255	; 0xff
    aea4:	7188      	strb	r0, [r1, #6]
			packet[loc++] = 0xFF;
    aea6:	71c8      	strb	r0, [r1, #7]
    aea8:	2108      	movs	r1, #8
    if (IntraPAN == false)
    aeaa:	4663      	mov	r3, ip
    aeac:	2b00      	cmp	r3, #0
    aeae:	d109      	bne.n	aec4 <MiMAC_SendPacket+0x184>
		packet[loc++] = MAC_PANID.v[0];
    aeb0:	1c48      	adds	r0, r1, #1
    aeb2:	b2c0      	uxtb	r0, r0
    aeb4:	4c34      	ldr	r4, [pc, #208]	; (af88 <MiMAC_SendPacket+0x248>)
    aeb6:	4e33      	ldr	r6, [pc, #204]	; (af84 <MiMAC_SendPacket+0x244>)
    aeb8:	7833      	ldrb	r3, [r6, #0]
    aeba:	5463      	strb	r3, [r4, r1]
		packet[loc++] = MAC_PANID.v[1];
    aebc:	3102      	adds	r1, #2
    aebe:	b2c9      	uxtb	r1, r1
    aec0:	7876      	ldrb	r6, [r6, #1]
    aec2:	5426      	strb	r6, [r4, r0]
    if (transParam.altSrcAddr)
    aec4:	2a00      	cmp	r2, #0
    aec6:	d031      	beq.n	af2c <MiMAC_SendPacket+0x1ec>
		packet[loc++] = myNetworkAddress.v[0];
    aec8:	482f      	ldr	r0, [pc, #188]	; (af88 <MiMAC_SendPacket+0x248>)
    aeca:	4c32      	ldr	r4, [pc, #200]	; (af94 <MiMAC_SendPacket+0x254>)
    aecc:	7822      	ldrb	r2, [r4, #0]
    aece:	5442      	strb	r2, [r0, r1]
		packet[loc++] = myNetworkAddress.v[1];
    aed0:	1c8a      	adds	r2, r1, #2
    aed2:	b2d2      	uxtb	r2, r2
		packet[loc++] = myNetworkAddress.v[0];
    aed4:	3101      	adds	r1, #1
		packet[loc++] = myNetworkAddress.v[1];
    aed6:	b2c9      	uxtb	r1, r1
    aed8:	7864      	ldrb	r4, [r4, #1]
    aeda:	5444      	strb	r4, [r0, r1]
    for (i = 0; i < MACPayloadLen; i++)
    aedc:	2d00      	cmp	r5, #0
    aede:	d00a      	beq.n	aef6 <MiMAC_SendPacket+0x1b6>
    aee0:	9901      	ldr	r1, [sp, #4]
    aee2:	1955      	adds	r5, r2, r5
    aee4:	b2ed      	uxtb	r5, r5
		packet[loc++] = MACPayload[i];
    aee6:	4e28      	ldr	r6, [pc, #160]	; (af88 <MiMAC_SendPacket+0x248>)
    aee8:	1c50      	adds	r0, r2, #1
    aeea:	780c      	ldrb	r4, [r1, #0]
    aeec:	54b4      	strb	r4, [r6, r2]
    aeee:	3101      	adds	r1, #1
    aef0:	b2c2      	uxtb	r2, r0
    for (i = 0; i < MACPayloadLen; i++)
    aef2:	4295      	cmp	r5, r2
    aef4:	d1f8      	bne.n	aee8 <MiMAC_SendPacket+0x1a8>
    dataPointer = MACPayload;
    aef6:	4a28      	ldr	r2, [pc, #160]	; (af98 <MiMAC_SendPacket+0x258>)
    aef8:	9b01      	ldr	r3, [sp, #4]
    aefa:	6013      	str	r3, [r2, #0]
	dataConfCallback = ConfCallback;
    aefc:	4b27      	ldr	r3, [pc, #156]	; (af9c <MiMAC_SendPacket+0x25c>)
    aefe:	9a16      	ldr	r2, [sp, #88]	; 0x58
    af00:	601a      	str	r2, [r3, #0]
    dataHandle = msghandle;
    af02:	4b27      	ldr	r3, [pc, #156]	; (afa0 <MiMAC_SendPacket+0x260>)
    af04:	466a      	mov	r2, sp
    af06:	7a12      	ldrb	r2, [r2, #8]
    af08:	701a      	strb	r2, [r3, #0]
    phyDataRequest.polledConfirmation = false;
    af0a:	a807      	add	r0, sp, #28
    af0c:	2300      	movs	r3, #0
    af0e:	7003      	strb	r3, [r0, #0]
    phyDataRequest.confirmCallback = PHY_DataConf;
    af10:	4b24      	ldr	r3, [pc, #144]	; (afa4 <MiMAC_SendPacket+0x264>)
    af12:	6083      	str	r3, [r0, #8]
    phyDataRequest.data = packet;
    af14:	4b1c      	ldr	r3, [pc, #112]	; (af88 <MiMAC_SendPacket+0x248>)
    af16:	6043      	str	r3, [r0, #4]
    PHY_DataReq(&phyDataRequest);
    af18:	4b23      	ldr	r3, [pc, #140]	; (afa8 <MiMAC_SendPacket+0x268>)
    af1a:	4798      	blx	r3
}
    af1c:	2001      	movs	r0, #1
    af1e:	b00b      	add	sp, #44	; 0x2c
    af20:	bc3c      	pop	{r2, r3, r4, r5}
    af22:	4690      	mov	r8, r2
    af24:	4699      	mov	r9, r3
    af26:	46a2      	mov	sl, r4
    af28:	46ab      	mov	fp, r5
    af2a:	bdf0      	pop	{r4, r5, r6, r7, pc}
			packet[loc++] = MACInitParams.PAddress[i];
    af2c:	4a1f      	ldr	r2, [pc, #124]	; (afac <MiMAC_SendPacket+0x26c>)
    af2e:	6850      	ldr	r0, [r2, #4]
    af30:	000e      	movs	r6, r1
    af32:	3608      	adds	r6, #8
    af34:	b2f6      	uxtb	r6, r6
    af36:	4b14      	ldr	r3, [pc, #80]	; (af88 <MiMAC_SendPacket+0x248>)
    af38:	1c4a      	adds	r2, r1, #1
    af3a:	b2d2      	uxtb	r2, r2
    af3c:	7804      	ldrb	r4, [r0, #0]
    af3e:	545c      	strb	r4, [r3, r1]
    af40:	3001      	adds	r0, #1
    af42:	0011      	movs	r1, r2
        for (i = 0; i < 8; i++)
    af44:	42b2      	cmp	r2, r6
    af46:	d1f7      	bne.n	af38 <MiMAC_SendPacket+0x1f8>
    af48:	e7c8      	b.n	aedc <MiMAC_SendPacket+0x19c>
			packet[loc++] = 0xCC;
    af4a:	4c0f      	ldr	r4, [pc, #60]	; (af88 <MiMAC_SendPacket+0x248>)
    af4c:	21cc      	movs	r1, #204	; 0xcc
    af4e:	70a1      	strb	r1, [r4, #2]
		packet[loc++] = IEEESeqNum++;
    af50:	4b0f      	ldr	r3, [pc, #60]	; (af90 <MiMAC_SendPacket+0x250>)
    af52:	4698      	mov	r8, r3
    af54:	7819      	ldrb	r1, [r3, #0]
    af56:	1c4b      	adds	r3, r1, #1
    af58:	4699      	mov	r9, r3
    af5a:	4643      	mov	r3, r8
    af5c:	464f      	mov	r7, r9
    af5e:	701f      	strb	r7, [r3, #0]
    af60:	70e1      	strb	r1, [r4, #3]
		packet[loc++] = transParam.DestPANID.v[0];
    af62:	a903      	add	r1, sp, #12
    af64:	7a8b      	ldrb	r3, [r1, #10]
    af66:	7123      	strb	r3, [r4, #4]
		packet[loc++] = transParam.DestPANID.v[1];
    af68:	7ac9      	ldrb	r1, [r1, #11]
    af6a:	7161      	strb	r1, [r4, #5]
        if (transParam.flags.bits.broadcast)
    af6c:	0743      	lsls	r3, r0, #29
    af6e:	d497      	bmi.n	aea0 <MiMAC_SendPacket+0x160>
        headerLength = 7;
    af70:	2000      	movs	r0, #0
					packet[loc++] = transParam.DestAddress[i];
    af72:	4b05      	ldr	r3, [pc, #20]	; (af88 <MiMAC_SendPacket+0x248>)
    af74:	5c34      	ldrb	r4, [r6, r0]
    af76:	18c1      	adds	r1, r0, r3
    af78:	718c      	strb	r4, [r1, #6]
    af7a:	3001      	adds	r0, #1
                for (i = 0; i < 8; i++)
    af7c:	2808      	cmp	r0, #8
    af7e:	d1f9      	bne.n	af74 <MiMAC_SendPacket+0x234>
					packet[loc++] = transParam.DestAddress[i];
    af80:	210e      	movs	r1, #14
    af82:	e792      	b.n	aeaa <MiMAC_SendPacket+0x16a>
    af84:	20001e64 	.word	0x20001e64
    af88:	20001dcc 	.word	0x20001dcc
    af8c:	0000ffff 	.word	0x0000ffff
    af90:	20001dc8 	.word	0x20001dc8
    af94:	20001e4c 	.word	0x20001e4c
    af98:	200003e8 	.word	0x200003e8
    af9c:	200003e0 	.word	0x200003e0
    afa0:	200003e4 	.word	0x200003e4
    afa4:	0000ac41 	.word	0x0000ac41
    afa8:	0000b455 	.word	0x0000b455
    afac:	20001e54 	.word	0x20001e54

0000afb0 <MiMAC_DiscardPacket>:
	if (BankIndex < BANK_SIZE)
    afb0:	4b04      	ldr	r3, [pc, #16]	; (afc4 <MiMAC_DiscardPacket+0x14>)
    afb2:	781b      	ldrb	r3, [r3, #0]
    afb4:	2b03      	cmp	r3, #3
    afb6:	d804      	bhi.n	afc2 <MiMAC_DiscardPacket+0x12>
		RxBuffer[BankIndex].PayloadLen = 0;
    afb8:	01da      	lsls	r2, r3, #7
    afba:	1ad3      	subs	r3, r2, r3
    afbc:	2100      	movs	r1, #0
    afbe:	4a02      	ldr	r2, [pc, #8]	; (afc8 <MiMAC_DiscardPacket+0x18>)
    afc0:	5499      	strb	r1, [r3, r2]
}
    afc2:	4770      	bx	lr
    afc4:	2000000a 	.word	0x2000000a
    afc8:	20001e80 	.word	0x20001e80

0000afcc <MiMAC_ReceivedPacket>:
{
    afcc:	b570      	push	{r4, r5, r6, lr}
	BankIndex = 0xFF;
    afce:	22ff      	movs	r2, #255	; 0xff
    afd0:	4bce      	ldr	r3, [pc, #824]	; (b30c <MiMAC_ReceivedPacket+0x340>)
    afd2:	701a      	strb	r2, [r3, #0]
		if (RxBuffer[i].PayloadLen > 0)
    afd4:	4bce      	ldr	r3, [pc, #824]	; (b310 <MiMAC_ReceivedPacket+0x344>)
    afd6:	781b      	ldrb	r3, [r3, #0]
    afd8:	2b00      	cmp	r3, #0
    afda:	d000      	beq.n	afde <MiMAC_ReceivedPacket+0x12>
    afdc:	e1bf      	b.n	b35e <MiMAC_ReceivedPacket+0x392>
    afde:	337f      	adds	r3, #127	; 0x7f
    afe0:	4acb      	ldr	r2, [pc, #812]	; (b310 <MiMAC_ReceivedPacket+0x344>)
    afe2:	5cd3      	ldrb	r3, [r2, r3]
    afe4:	2b00      	cmp	r3, #0
    afe6:	d10b      	bne.n	b000 <MiMAC_ReceivedPacket+0x34>
    afe8:	33fe      	adds	r3, #254	; 0xfe
    afea:	5cd3      	ldrb	r3, [r2, r3]
    afec:	2b00      	cmp	r3, #0
    afee:	d130      	bne.n	b052 <MiMAC_ReceivedPacket+0x86>
    aff0:	237e      	movs	r3, #126	; 0x7e
    aff2:	33ff      	adds	r3, #255	; 0xff
    aff4:	5cd3      	ldrb	r3, [r2, r3]
	return false;
    aff6:	2000      	movs	r0, #0
	for (i = 0; i < BANK_SIZE; i++)
    aff8:	2203      	movs	r2, #3
		if (RxBuffer[i].PayloadLen > 0)
    affa:	2b00      	cmp	r3, #0
    affc:	d101      	bne.n	b002 <MiMAC_ReceivedPacket+0x36>
}
    affe:	bd70      	pop	{r4, r5, r6, pc}
	for (i = 0; i < BANK_SIZE; i++)
    b000:	2201      	movs	r2, #1
			BankIndex = i;
    b002:	4bc2      	ldr	r3, [pc, #776]	; (b30c <MiMAC_ReceivedPacket+0x340>)
    b004:	701a      	strb	r2, [r3, #0]
	return false;
    b006:	2000      	movs	r0, #0
	if (BankIndex < BANK_SIZE)
    b008:	2a03      	cmp	r2, #3
    b00a:	d8f8      	bhi.n	affe <MiMAC_ReceivedPacket+0x32>
		if ((RxBuffer[BankIndex].Payload[0] & 0x40) == 0)
    b00c:	0010      	movs	r0, r2
    b00e:	01d1      	lsls	r1, r2, #7
    b010:	1a89      	subs	r1, r1, r2
    b012:	4bbf      	ldr	r3, [pc, #764]	; (b310 <MiMAC_ReceivedPacket+0x344>)
    b014:	185b      	adds	r3, r3, r1
    b016:	785d      	ldrb	r5, [r3, #1]
    b018:	2440      	movs	r4, #64	; 0x40
    b01a:	4025      	ands	r5, r4
		MACRxPacket.flags.Val = 0;
    b01c:	49bd      	ldr	r1, [pc, #756]	; (b314 <MiMAC_ReceivedPacket+0x348>)
    b01e:	2400      	movs	r4, #0
    b020:	700c      	strb	r4, [r1, #0]
		MACRxPacket.altSourceAddress = false;
    b022:	73cc      	strb	r4, [r1, #15]
		MACRxPacket.SourcePANID.Val = 0xFFFF;
    b024:	3c01      	subs	r4, #1
    b026:	820c      	strh	r4, [r1, #16]
		addrMode = RxBuffer[BankIndex].Payload[1] & 0xCC;
    b028:	789b      	ldrb	r3, [r3, #2]
    b02a:	2133      	movs	r1, #51	; 0x33
    b02c:	438b      	bics	r3, r1
		switch (addrMode)
    b02e:	b2d9      	uxtb	r1, r3
    b030:	2988      	cmp	r1, #136	; 0x88
    b032:	d100      	bne.n	b036 <MiMAC_ReceivedPacket+0x6a>
    b034:	e0c4      	b.n	b1c0 <MiMAC_ReceivedPacket+0x1f4>
    b036:	d90e      	bls.n	b056 <MiMAC_ReceivedPacket+0x8a>
    b038:	b2d9      	uxtb	r1, r3
    b03a:	29c8      	cmp	r1, #200	; 0xc8
    b03c:	d046      	beq.n	b0cc <MiMAC_ReceivedPacket+0x100>
    b03e:	29cc      	cmp	r1, #204	; 0xcc
    b040:	d100      	bne.n	b044 <MiMAC_ReceivedPacket+0x78>
    b042:	e08a      	b.n	b15a <MiMAC_ReceivedPacket+0x18e>
    b044:	298c      	cmp	r1, #140	; 0x8c
    b046:	d100      	bne.n	b04a <MiMAC_ReceivedPacket+0x7e>
    b048:	e104      	b.n	b254 <MiMAC_ReceivedPacket+0x288>
			MiMAC_DiscardPacket();
    b04a:	4bb3      	ldr	r3, [pc, #716]	; (b318 <MiMAC_ReceivedPacket+0x34c>)
    b04c:	4798      	blx	r3
			return false;
    b04e:	2000      	movs	r0, #0
    b050:	e7d5      	b.n	affe <MiMAC_ReceivedPacket+0x32>
	for (i = 0; i < BANK_SIZE; i++)
    b052:	2202      	movs	r2, #2
    b054:	e7d5      	b.n	b002 <MiMAC_ReceivedPacket+0x36>
		switch (addrMode)
    b056:	2b08      	cmp	r3, #8
    b058:	d100      	bne.n	b05c <MiMAC_ReceivedPacket+0x90>
    b05a:	e131      	b.n	b2c0 <MiMAC_ReceivedPacket+0x2f4>
    b05c:	2980      	cmp	r1, #128	; 0x80
    b05e:	d1f4      	bne.n	b04a <MiMAC_ReceivedPacket+0x7e>
				MACRxPacket.flags.bits.broadcast = 1;
    b060:	4bac      	ldr	r3, [pc, #688]	; (b314 <MiMAC_ReceivedPacket+0x348>)
    b062:	7819      	ldrb	r1, [r3, #0]
    b064:	2404      	movs	r4, #4
    b066:	4321      	orrs	r1, r4
				MACRxPacket.flags.bits.sourcePrsnt = 1;
    b068:	2480      	movs	r4, #128	; 0x80
    b06a:	4264      	negs	r4, r4
    b06c:	4321      	orrs	r1, r4
    b06e:	7019      	strb	r1, [r3, #0]
				MACRxPacket.altSourceAddress = true;
    b070:	2101      	movs	r1, #1
    b072:	73d9      	strb	r1, [r3, #15]
				MACRxPacket.SourcePANID.v[0] = RxBuffer[BankIndex].Payload[3];
    b074:	4ca6      	ldr	r4, [pc, #664]	; (b310 <MiMAC_ReceivedPacket+0x344>)
    b076:	01d1      	lsls	r1, r2, #7
    b078:	1a88      	subs	r0, r1, r2
    b07a:	1821      	adds	r1, r4, r0
    b07c:	790d      	ldrb	r5, [r1, #4]
    b07e:	741d      	strb	r5, [r3, #16]
				MACRxPacket.SourcePANID.v[1] = RxBuffer[BankIndex].Payload[4];
    b080:	7949      	ldrb	r1, [r1, #5]
    b082:	7459      	strb	r1, [r3, #17]
    b084:	01d1      	lsls	r1, r2, #7
    b086:	1a8a      	subs	r2, r1, r2
				MACRxPacket.SourceAddress = &(RxBuffer[BankIndex].Payload[5]);
    b088:	1d91      	adds	r1, r2, #6
    b08a:	1909      	adds	r1, r1, r4
    b08c:	6059      	str	r1, [r3, #4]
				MACRxPacket.PayloadLen = RxBuffer[BankIndex].PayloadLen - 11;
    b08e:	5d01      	ldrb	r1, [r0, r4]
    b090:	390b      	subs	r1, #11
    b092:	7319      	strb	r1, [r3, #12]
				MACRxPacket.Payload = &(RxBuffer[BankIndex].Payload[7]);
    b094:	3208      	adds	r2, #8
    b096:	1912      	adds	r2, r2, r4
    b098:	609a      	str	r2, [r3, #8]
		if (RxBuffer[BankIndex].Payload[0] & 0x08)
    b09a:	4b9c      	ldr	r3, [pc, #624]	; (b30c <MiMAC_ReceivedPacket+0x340>)
    b09c:	781b      	ldrb	r3, [r3, #0]
    b09e:	01d9      	lsls	r1, r3, #7
    b0a0:	1ac9      	subs	r1, r1, r3
    b0a2:	4a9b      	ldr	r2, [pc, #620]	; (b310 <MiMAC_ReceivedPacket+0x344>)
    b0a4:	1852      	adds	r2, r2, r1
    b0a6:	7851      	ldrb	r1, [r2, #1]
    b0a8:	070a      	lsls	r2, r1, #28
    b0aa:	d500      	bpl.n	b0ae <MiMAC_ReceivedPacket+0xe2>
    b0ac:	e129      	b.n	b302 <MiMAC_ReceivedPacket+0x336>
		switch (RxBuffer[BankIndex].Payload[0] & 0x07) // check frame type
    b0ae:	2207      	movs	r2, #7
    b0b0:	400a      	ands	r2, r1
    b0b2:	2a01      	cmp	r2, #1
    b0b4:	d100      	bne.n	b0b8 <MiMAC_ReceivedPacket+0xec>
    b0b6:	e131      	b.n	b31c <MiMAC_ReceivedPacket+0x350>
    b0b8:	2a00      	cmp	r2, #0
    b0ba:	d100      	bne.n	b0be <MiMAC_ReceivedPacket+0xf2>
    b0bc:	e149      	b.n	b352 <MiMAC_ReceivedPacket+0x386>
    b0be:	2a03      	cmp	r2, #3
    b0c0:	d100      	bne.n	b0c4 <MiMAC_ReceivedPacket+0xf8>
    b0c2:	e13e      	b.n	b342 <MiMAC_ReceivedPacket+0x376>
			MiMAC_DiscardPacket();
    b0c4:	4b94      	ldr	r3, [pc, #592]	; (b318 <MiMAC_ReceivedPacket+0x34c>)
    b0c6:	4798      	blx	r3
			return false;
    b0c8:	2000      	movs	r0, #0
    b0ca:	e798      	b.n	affe <MiMAC_ReceivedPacket+0x32>
			if (RxBuffer[BankIndex].Payload[5] == 0xFF && RxBuffer[BankIndex].Payload[6] == 0xFF)
    b0cc:	01d1      	lsls	r1, r2, #7
    b0ce:	1a89      	subs	r1, r1, r2
    b0d0:	4b8f      	ldr	r3, [pc, #572]	; (b310 <MiMAC_ReceivedPacket+0x344>)
    b0d2:	185b      	adds	r3, r3, r1
    b0d4:	799b      	ldrb	r3, [r3, #6]
    b0d6:	2bff      	cmp	r3, #255	; 0xff
    b0d8:	d01c      	beq.n	b114 <MiMAC_ReceivedPacket+0x148>
			MACRxPacket.flags.bits.sourcePrsnt = 1;
    b0da:	498e      	ldr	r1, [pc, #568]	; (b314 <MiMAC_ReceivedPacket+0x348>)
    b0dc:	780c      	ldrb	r4, [r1, #0]
    b0de:	2380      	movs	r3, #128	; 0x80
    b0e0:	425b      	negs	r3, r3
    b0e2:	4323      	orrs	r3, r4
    b0e4:	700b      	strb	r3, [r1, #0]
			if (bIntraPAN) // check if it is intraPAN
    b0e6:	2d00      	cmp	r5, #0
    b0e8:	d021      	beq.n	b12e <MiMAC_ReceivedPacket+0x162>
				MACRxPacket.SourcePANID.v[0] = RxBuffer[BankIndex].Payload[3];
    b0ea:	4c89      	ldr	r4, [pc, #548]	; (b310 <MiMAC_ReceivedPacket+0x344>)
    b0ec:	01c3      	lsls	r3, r0, #7
    b0ee:	1a18      	subs	r0, r3, r0
    b0f0:	1823      	adds	r3, r4, r0
    b0f2:	791d      	ldrb	r5, [r3, #4]
    b0f4:	740d      	strb	r5, [r1, #16]
				MACRxPacket.SourcePANID.v[1] = RxBuffer[BankIndex].Payload[4];
    b0f6:	795b      	ldrb	r3, [r3, #5]
    b0f8:	744b      	strb	r3, [r1, #17]
    b0fa:	01d3      	lsls	r3, r2, #7
    b0fc:	1a9a      	subs	r2, r3, r2
				MACRxPacket.SourceAddress = &(RxBuffer[BankIndex].Payload[7]);
    b0fe:	0013      	movs	r3, r2
    b100:	3308      	adds	r3, #8
    b102:	191b      	adds	r3, r3, r4
    b104:	604b      	str	r3, [r1, #4]
				MACRxPacket.PayloadLen = RxBuffer[BankIndex].PayloadLen - 19;
    b106:	5d03      	ldrb	r3, [r0, r4]
    b108:	3b13      	subs	r3, #19
    b10a:	730b      	strb	r3, [r1, #12]
				MACRxPacket.Payload = &(RxBuffer[BankIndex].Payload[15]);
    b10c:	3210      	adds	r2, #16
    b10e:	1912      	adds	r2, r2, r4
    b110:	608a      	str	r2, [r1, #8]
    b112:	e7c2      	b.n	b09a <MiMAC_ReceivedPacket+0xce>
			if (RxBuffer[BankIndex].Payload[5] == 0xFF && RxBuffer[BankIndex].Payload[6] == 0xFF)
    b114:	01d1      	lsls	r1, r2, #7
    b116:	1a89      	subs	r1, r1, r2
    b118:	4b7d      	ldr	r3, [pc, #500]	; (b310 <MiMAC_ReceivedPacket+0x344>)
    b11a:	185b      	adds	r3, r3, r1
    b11c:	79db      	ldrb	r3, [r3, #7]
    b11e:	2bff      	cmp	r3, #255	; 0xff
    b120:	d1db      	bne.n	b0da <MiMAC_ReceivedPacket+0x10e>
				MACRxPacket.flags.bits.broadcast = 1;
    b122:	497c      	ldr	r1, [pc, #496]	; (b314 <MiMAC_ReceivedPacket+0x348>)
    b124:	780b      	ldrb	r3, [r1, #0]
    b126:	2404      	movs	r4, #4
    b128:	4323      	orrs	r3, r4
    b12a:	700b      	strb	r3, [r1, #0]
    b12c:	e7d5      	b.n	b0da <MiMAC_ReceivedPacket+0x10e>
				MACRxPacket.SourcePANID.v[0] = RxBuffer[BankIndex].Payload[7];
    b12e:	4979      	ldr	r1, [pc, #484]	; (b314 <MiMAC_ReceivedPacket+0x348>)
    b130:	4c77      	ldr	r4, [pc, #476]	; (b310 <MiMAC_ReceivedPacket+0x344>)
    b132:	01c3      	lsls	r3, r0, #7
    b134:	1a18      	subs	r0, r3, r0
    b136:	1823      	adds	r3, r4, r0
    b138:	7a1d      	ldrb	r5, [r3, #8]
    b13a:	740d      	strb	r5, [r1, #16]
				MACRxPacket.SourcePANID.v[1] = RxBuffer[BankIndex].Payload[8];
    b13c:	7a5b      	ldrb	r3, [r3, #9]
    b13e:	744b      	strb	r3, [r1, #17]
    b140:	01d3      	lsls	r3, r2, #7
    b142:	1a9a      	subs	r2, r3, r2
				MACRxPacket.SourceAddress = &(RxBuffer[BankIndex].Payload[9]);
    b144:	0013      	movs	r3, r2
    b146:	330a      	adds	r3, #10
    b148:	191b      	adds	r3, r3, r4
    b14a:	604b      	str	r3, [r1, #4]
				MACRxPacket.PayloadLen = RxBuffer[BankIndex].PayloadLen - 21;
    b14c:	5d03      	ldrb	r3, [r0, r4]
    b14e:	3b15      	subs	r3, #21
    b150:	730b      	strb	r3, [r1, #12]
				MACRxPacket.Payload = &(RxBuffer[BankIndex].Payload[17]);
    b152:	3212      	adds	r2, #18
    b154:	1912      	adds	r2, r2, r4
    b156:	608a      	str	r2, [r1, #8]
    b158:	e79f      	b.n	b09a <MiMAC_ReceivedPacket+0xce>
			MACRxPacket.flags.bits.sourcePrsnt = 1;
    b15a:	496e      	ldr	r1, [pc, #440]	; (b314 <MiMAC_ReceivedPacket+0x348>)
    b15c:	780c      	ldrb	r4, [r1, #0]
    b15e:	2380      	movs	r3, #128	; 0x80
    b160:	425b      	negs	r3, r3
    b162:	4323      	orrs	r3, r4
    b164:	700b      	strb	r3, [r1, #0]
			if (bIntraPAN) // check if it is intraPAN
    b166:	2d00      	cmp	r5, #0
    b168:	d014      	beq.n	b194 <MiMAC_ReceivedPacket+0x1c8>
				MACRxPacket.SourcePANID.v[0] = RxBuffer[BankIndex].Payload[3];
    b16a:	4c69      	ldr	r4, [pc, #420]	; (b310 <MiMAC_ReceivedPacket+0x344>)
    b16c:	01d3      	lsls	r3, r2, #7
    b16e:	1a98      	subs	r0, r3, r2
    b170:	1823      	adds	r3, r4, r0
    b172:	791d      	ldrb	r5, [r3, #4]
    b174:	740d      	strb	r5, [r1, #16]
				MACRxPacket.SourcePANID.v[1] = RxBuffer[BankIndex].Payload[4];
    b176:	795b      	ldrb	r3, [r3, #5]
    b178:	744b      	strb	r3, [r1, #17]
    b17a:	01d3      	lsls	r3, r2, #7
    b17c:	1a9a      	subs	r2, r3, r2
				MACRxPacket.SourceAddress = &(RxBuffer[BankIndex].Payload[13]);
    b17e:	0013      	movs	r3, r2
    b180:	330e      	adds	r3, #14
    b182:	191b      	adds	r3, r3, r4
    b184:	604b      	str	r3, [r1, #4]
				MACRxPacket.PayloadLen = RxBuffer[BankIndex].PayloadLen - 25;
    b186:	5d03      	ldrb	r3, [r0, r4]
    b188:	3b19      	subs	r3, #25
    b18a:	730b      	strb	r3, [r1, #12]
				MACRxPacket.Payload = &(RxBuffer[BankIndex].Payload[21]);
    b18c:	3216      	adds	r2, #22
    b18e:	1912      	adds	r2, r2, r4
    b190:	608a      	str	r2, [r1, #8]
    b192:	e782      	b.n	b09a <MiMAC_ReceivedPacket+0xce>
				MACRxPacket.SourcePANID.v[0] = RxBuffer[BankIndex].Payload[13];
    b194:	495f      	ldr	r1, [pc, #380]	; (b314 <MiMAC_ReceivedPacket+0x348>)
    b196:	4c5e      	ldr	r4, [pc, #376]	; (b310 <MiMAC_ReceivedPacket+0x344>)
    b198:	01d3      	lsls	r3, r2, #7
    b19a:	1a98      	subs	r0, r3, r2
    b19c:	1823      	adds	r3, r4, r0
    b19e:	7b9d      	ldrb	r5, [r3, #14]
    b1a0:	740d      	strb	r5, [r1, #16]
				MACRxPacket.SourcePANID.v[1] = RxBuffer[BankIndex].Payload[14];
    b1a2:	7bdb      	ldrb	r3, [r3, #15]
    b1a4:	744b      	strb	r3, [r1, #17]
    b1a6:	01d3      	lsls	r3, r2, #7
    b1a8:	1a9a      	subs	r2, r3, r2
				MACRxPacket.SourceAddress = &(RxBuffer[BankIndex].Payload[15]);
    b1aa:	0013      	movs	r3, r2
    b1ac:	3310      	adds	r3, #16
    b1ae:	191b      	adds	r3, r3, r4
    b1b0:	604b      	str	r3, [r1, #4]
				MACRxPacket.PayloadLen = RxBuffer[BankIndex].PayloadLen - 27;
    b1b2:	5d03      	ldrb	r3, [r0, r4]
    b1b4:	3b1b      	subs	r3, #27
    b1b6:	730b      	strb	r3, [r1, #12]
				MACRxPacket.Payload = &(RxBuffer[BankIndex].Payload[23]);
    b1b8:	3218      	adds	r2, #24
    b1ba:	1912      	adds	r2, r2, r4
    b1bc:	608a      	str	r2, [r1, #8]
    b1be:	e76c      	b.n	b09a <MiMAC_ReceivedPacket+0xce>
				if (RxBuffer[BankIndex].Payload[5] == 0xFF && RxBuffer[BankIndex].Payload[6] == 0xFF)
    b1c0:	01d1      	lsls	r1, r2, #7
    b1c2:	1a89      	subs	r1, r1, r2
    b1c4:	4b52      	ldr	r3, [pc, #328]	; (b310 <MiMAC_ReceivedPacket+0x344>)
    b1c6:	185b      	adds	r3, r3, r1
    b1c8:	799b      	ldrb	r3, [r3, #6]
    b1ca:	2bff      	cmp	r3, #255	; 0xff
    b1cc:	d01f      	beq.n	b20e <MiMAC_ReceivedPacket+0x242>
				MACRxPacket.flags.bits.sourcePrsnt = 1;
    b1ce:	4b51      	ldr	r3, [pc, #324]	; (b314 <MiMAC_ReceivedPacket+0x348>)
    b1d0:	781c      	ldrb	r4, [r3, #0]
    b1d2:	2180      	movs	r1, #128	; 0x80
    b1d4:	4249      	negs	r1, r1
    b1d6:	4321      	orrs	r1, r4
    b1d8:	7019      	strb	r1, [r3, #0]
				MACRxPacket.altSourceAddress = true;
    b1da:	2101      	movs	r1, #1
    b1dc:	73d9      	strb	r1, [r3, #15]
				if (bIntraPAN == false)
    b1de:	2d00      	cmp	r5, #0
    b1e0:	d122      	bne.n	b228 <MiMAC_ReceivedPacket+0x25c>
					MACRxPacket.SourcePANID.v[0] = RxBuffer[BankIndex].Payload[7];
    b1e2:	0019      	movs	r1, r3
    b1e4:	4c4a      	ldr	r4, [pc, #296]	; (b310 <MiMAC_ReceivedPacket+0x344>)
    b1e6:	01c3      	lsls	r3, r0, #7
    b1e8:	1a18      	subs	r0, r3, r0
    b1ea:	1823      	adds	r3, r4, r0
    b1ec:	7a1d      	ldrb	r5, [r3, #8]
    b1ee:	740d      	strb	r5, [r1, #16]
					MACRxPacket.SourcePANID.v[1] = RxBuffer[BankIndex].Payload[8];
    b1f0:	7a5b      	ldrb	r3, [r3, #9]
    b1f2:	744b      	strb	r3, [r1, #17]
    b1f4:	01d3      	lsls	r3, r2, #7
    b1f6:	1a9a      	subs	r2, r3, r2
					MACRxPacket.SourceAddress = &(RxBuffer[BankIndex].Payload[9]);
    b1f8:	0013      	movs	r3, r2
    b1fa:	330a      	adds	r3, #10
    b1fc:	191b      	adds	r3, r3, r4
    b1fe:	604b      	str	r3, [r1, #4]
					MACRxPacket.PayloadLen = RxBuffer[BankIndex].PayloadLen - 15;
    b200:	5d03      	ldrb	r3, [r0, r4]
    b202:	3b0f      	subs	r3, #15
    b204:	730b      	strb	r3, [r1, #12]
					MACRxPacket.Payload = &(RxBuffer[BankIndex].Payload[11]);
    b206:	320c      	adds	r2, #12
    b208:	1912      	adds	r2, r2, r4
    b20a:	608a      	str	r2, [r1, #8]
    b20c:	e745      	b.n	b09a <MiMAC_ReceivedPacket+0xce>
				if (RxBuffer[BankIndex].Payload[5] == 0xFF && RxBuffer[BankIndex].Payload[6] == 0xFF)
    b20e:	01d1      	lsls	r1, r2, #7
    b210:	1a89      	subs	r1, r1, r2
    b212:	4b3f      	ldr	r3, [pc, #252]	; (b310 <MiMAC_ReceivedPacket+0x344>)
    b214:	185b      	adds	r3, r3, r1
    b216:	79db      	ldrb	r3, [r3, #7]
    b218:	2bff      	cmp	r3, #255	; 0xff
    b21a:	d1d8      	bne.n	b1ce <MiMAC_ReceivedPacket+0x202>
					MACRxPacket.flags.bits.broadcast = 1;
    b21c:	493d      	ldr	r1, [pc, #244]	; (b314 <MiMAC_ReceivedPacket+0x348>)
    b21e:	780b      	ldrb	r3, [r1, #0]
    b220:	2404      	movs	r4, #4
    b222:	4323      	orrs	r3, r4
    b224:	700b      	strb	r3, [r1, #0]
    b226:	e7d2      	b.n	b1ce <MiMAC_ReceivedPacket+0x202>
					MACRxPacket.SourcePANID.v[0] = RxBuffer[BankIndex].Payload[3];
    b228:	493a      	ldr	r1, [pc, #232]	; (b314 <MiMAC_ReceivedPacket+0x348>)
    b22a:	4c39      	ldr	r4, [pc, #228]	; (b310 <MiMAC_ReceivedPacket+0x344>)
    b22c:	01c3      	lsls	r3, r0, #7
    b22e:	1a18      	subs	r0, r3, r0
    b230:	1823      	adds	r3, r4, r0
    b232:	791d      	ldrb	r5, [r3, #4]
    b234:	740d      	strb	r5, [r1, #16]
					MACRxPacket.SourcePANID.v[1] = RxBuffer[BankIndex].Payload[4];
    b236:	795b      	ldrb	r3, [r3, #5]
    b238:	744b      	strb	r3, [r1, #17]
    b23a:	01d3      	lsls	r3, r2, #7
    b23c:	1a9a      	subs	r2, r3, r2
					MACRxPacket.SourceAddress = &(RxBuffer[BankIndex].Payload[7]);
    b23e:	0013      	movs	r3, r2
    b240:	3308      	adds	r3, #8
    b242:	191b      	adds	r3, r3, r4
    b244:	604b      	str	r3, [r1, #4]
					MACRxPacket.PayloadLen = RxBuffer[BankIndex].PayloadLen - 13;
    b246:	5d03      	ldrb	r3, [r0, r4]
    b248:	3b0d      	subs	r3, #13
    b24a:	730b      	strb	r3, [r1, #12]
					MACRxPacket.Payload = &(RxBuffer[BankIndex].Payload[9]);
    b24c:	320a      	adds	r2, #10
    b24e:	1912      	adds	r2, r2, r4
    b250:	608a      	str	r2, [r1, #8]
    b252:	e722      	b.n	b09a <MiMAC_ReceivedPacket+0xce>
				MACRxPacket.flags.bits.sourcePrsnt = 1;
    b254:	4b2f      	ldr	r3, [pc, #188]	; (b314 <MiMAC_ReceivedPacket+0x348>)
    b256:	781c      	ldrb	r4, [r3, #0]
    b258:	2180      	movs	r1, #128	; 0x80
    b25a:	4249      	negs	r1, r1
    b25c:	4321      	orrs	r1, r4
    b25e:	7019      	strb	r1, [r3, #0]
				MACRxPacket.altSourceAddress = true;
    b260:	2101      	movs	r1, #1
    b262:	73d9      	strb	r1, [r3, #15]
				if (bIntraPAN) // check if it is intraPAN
    b264:	2d00      	cmp	r5, #0
    b266:	d015      	beq.n	b294 <MiMAC_ReceivedPacket+0x2c8>
					MACRxPacket.SourcePANID.v[0] = RxBuffer[BankIndex].Payload[3];
    b268:	0019      	movs	r1, r3
    b26a:	4c29      	ldr	r4, [pc, #164]	; (b310 <MiMAC_ReceivedPacket+0x344>)
    b26c:	01d3      	lsls	r3, r2, #7
    b26e:	1a98      	subs	r0, r3, r2
    b270:	1823      	adds	r3, r4, r0
    b272:	791d      	ldrb	r5, [r3, #4]
    b274:	740d      	strb	r5, [r1, #16]
					MACRxPacket.SourcePANID.v[1] = RxBuffer[BankIndex].Payload[4];
    b276:	795b      	ldrb	r3, [r3, #5]
    b278:	744b      	strb	r3, [r1, #17]
    b27a:	01d3      	lsls	r3, r2, #7
    b27c:	1a9a      	subs	r2, r3, r2
					MACRxPacket.SourceAddress = &(RxBuffer[BankIndex].Payload[13]);
    b27e:	0013      	movs	r3, r2
    b280:	330e      	adds	r3, #14
    b282:	191b      	adds	r3, r3, r4
    b284:	604b      	str	r3, [r1, #4]
					MACRxPacket.PayloadLen = RxBuffer[BankIndex].PayloadLen - 19;
    b286:	5d03      	ldrb	r3, [r0, r4]
    b288:	3b13      	subs	r3, #19
    b28a:	730b      	strb	r3, [r1, #12]
					MACRxPacket.Payload = &(RxBuffer[BankIndex].Payload[15]);
    b28c:	3210      	adds	r2, #16
    b28e:	1912      	adds	r2, r2, r4
    b290:	608a      	str	r2, [r1, #8]
    b292:	e702      	b.n	b09a <MiMAC_ReceivedPacket+0xce>
					MACRxPacket.SourcePANID.v[0] = RxBuffer[BankIndex].Payload[12];
    b294:	491f      	ldr	r1, [pc, #124]	; (b314 <MiMAC_ReceivedPacket+0x348>)
    b296:	4c1e      	ldr	r4, [pc, #120]	; (b310 <MiMAC_ReceivedPacket+0x344>)
    b298:	01d3      	lsls	r3, r2, #7
    b29a:	1a98      	subs	r0, r3, r2
    b29c:	1823      	adds	r3, r4, r0
    b29e:	7b5d      	ldrb	r5, [r3, #13]
    b2a0:	740d      	strb	r5, [r1, #16]
					MACRxPacket.SourcePANID.v[1] = RxBuffer[BankIndex].Payload[13];
    b2a2:	7b9b      	ldrb	r3, [r3, #14]
    b2a4:	744b      	strb	r3, [r1, #17]
    b2a6:	01d3      	lsls	r3, r2, #7
    b2a8:	1a9a      	subs	r2, r3, r2
					MACRxPacket.SourceAddress = &(RxBuffer[BankIndex].Payload[14]);
    b2aa:	0013      	movs	r3, r2
    b2ac:	330f      	adds	r3, #15
    b2ae:	191b      	adds	r3, r3, r4
    b2b0:	604b      	str	r3, [r1, #4]
					MACRxPacket.PayloadLen = RxBuffer[BankIndex].PayloadLen - 21;
    b2b2:	5d03      	ldrb	r3, [r0, r4]
    b2b4:	3b15      	subs	r3, #21
    b2b6:	730b      	strb	r3, [r1, #12]
					MACRxPacket.Payload = &(RxBuffer[BankIndex].Payload[17]);
    b2b8:	3212      	adds	r2, #18
    b2ba:	1912      	adds	r2, r2, r4
    b2bc:	608a      	str	r2, [r1, #8]
    b2be:	e6ec      	b.n	b09a <MiMAC_ReceivedPacket+0xce>
				if (RxBuffer[BankIndex].Payload[5] == 0xFF && RxBuffer[BankIndex].Payload[6] == 0xFF)
    b2c0:	01d1      	lsls	r1, r2, #7
    b2c2:	1a89      	subs	r1, r1, r2
    b2c4:	4b12      	ldr	r3, [pc, #72]	; (b310 <MiMAC_ReceivedPacket+0x344>)
    b2c6:	185b      	adds	r3, r3, r1
    b2c8:	799b      	ldrb	r3, [r3, #6]
    b2ca:	2bff      	cmp	r3, #255	; 0xff
    b2cc:	d00c      	beq.n	b2e8 <MiMAC_ReceivedPacket+0x31c>
				MACRxPacket.PayloadLen = RxBuffer[BankIndex].PayloadLen - 10;
    b2ce:	4911      	ldr	r1, [pc, #68]	; (b314 <MiMAC_ReceivedPacket+0x348>)
    b2d0:	4c0f      	ldr	r4, [pc, #60]	; (b310 <MiMAC_ReceivedPacket+0x344>)
    b2d2:	01c3      	lsls	r3, r0, #7
    b2d4:	1a18      	subs	r0, r3, r0
    b2d6:	5d03      	ldrb	r3, [r0, r4]
    b2d8:	3b0a      	subs	r3, #10
    b2da:	730b      	strb	r3, [r1, #12]
				MACRxPacket.Payload = &(RxBuffer[BankIndex].Payload[7]);
    b2dc:	01d3      	lsls	r3, r2, #7
    b2de:	1a9a      	subs	r2, r3, r2
    b2e0:	3208      	adds	r2, #8
    b2e2:	1912      	adds	r2, r2, r4
    b2e4:	608a      	str	r2, [r1, #8]
			break;
    b2e6:	e6d8      	b.n	b09a <MiMAC_ReceivedPacket+0xce>
				if (RxBuffer[BankIndex].Payload[5] == 0xFF && RxBuffer[BankIndex].Payload[6] == 0xFF)
    b2e8:	01d1      	lsls	r1, r2, #7
    b2ea:	1a89      	subs	r1, r1, r2
    b2ec:	4b08      	ldr	r3, [pc, #32]	; (b310 <MiMAC_ReceivedPacket+0x344>)
    b2ee:	185b      	adds	r3, r3, r1
    b2f0:	79db      	ldrb	r3, [r3, #7]
    b2f2:	2bff      	cmp	r3, #255	; 0xff
    b2f4:	d1eb      	bne.n	b2ce <MiMAC_ReceivedPacket+0x302>
					MACRxPacket.flags.bits.broadcast = 1;
    b2f6:	4907      	ldr	r1, [pc, #28]	; (b314 <MiMAC_ReceivedPacket+0x348>)
    b2f8:	780b      	ldrb	r3, [r1, #0]
    b2fa:	2404      	movs	r4, #4
    b2fc:	4323      	orrs	r3, r4
    b2fe:	700b      	strb	r3, [r1, #0]
    b300:	e7e5      	b.n	b2ce <MiMAC_ReceivedPacket+0x302>
			MiMAC_DiscardPacket();
    b302:	4b05      	ldr	r3, [pc, #20]	; (b318 <MiMAC_ReceivedPacket+0x34c>)
    b304:	4798      	blx	r3
			return false;
    b306:	2000      	movs	r0, #0
    b308:	e679      	b.n	affe <MiMAC_ReceivedPacket+0x32>
    b30a:	46c0      	nop			; (mov r8, r8)
    b30c:	2000000a 	.word	0x2000000a
    b310:	20001e80 	.word	0x20001e80
    b314:	20002894 	.word	0x20002894
    b318:	0000afb1 	.word	0x0000afb1
			MACRxPacket.flags.bits.packetType = PACKET_TYPE_DATA;
    b31c:	4912      	ldr	r1, [pc, #72]	; (b368 <MiMAC_ReceivedPacket+0x39c>)
    b31e:	780a      	ldrb	r2, [r1, #0]
    b320:	2003      	movs	r0, #3
    b322:	4382      	bics	r2, r0
    b324:	700a      	strb	r2, [r1, #0]
		MACRxPacket.LQIValue = RxBuffer[BankIndex].Payload[RxBuffer[BankIndex].PayloadLen - 2];
    b326:	4a11      	ldr	r2, [pc, #68]	; (b36c <MiMAC_ReceivedPacket+0x3a0>)
    b328:	01d9      	lsls	r1, r3, #7
    b32a:	1acb      	subs	r3, r1, r3
    b32c:	5c98      	ldrb	r0, [r3, r2]
    b32e:	490e      	ldr	r1, [pc, #56]	; (b368 <MiMAC_ReceivedPacket+0x39c>)
    b330:	18d3      	adds	r3, r2, r3
    b332:	181a      	adds	r2, r3, r0
    b334:	3a01      	subs	r2, #1
    b336:	7812      	ldrb	r2, [r2, #0]
    b338:	738a      	strb	r2, [r1, #14]
		MACRxPacket.RSSIValue = RxBuffer[BankIndex].Payload[RxBuffer[BankIndex].PayloadLen - 1];
    b33a:	5c1b      	ldrb	r3, [r3, r0]
    b33c:	734b      	strb	r3, [r1, #13]
		return true;
    b33e:	2001      	movs	r0, #1
    b340:	e65d      	b.n	affe <MiMAC_ReceivedPacket+0x32>
			MACRxPacket.flags.bits.packetType = PACKET_TYPE_COMMAND;
    b342:	4909      	ldr	r1, [pc, #36]	; (b368 <MiMAC_ReceivedPacket+0x39c>)
    b344:	780a      	ldrb	r2, [r1, #0]
    b346:	2003      	movs	r0, #3
    b348:	4382      	bics	r2, r0
    b34a:	2001      	movs	r0, #1
    b34c:	4302      	orrs	r2, r0
    b34e:	700a      	strb	r2, [r1, #0]
			break;
    b350:	e7e9      	b.n	b326 <MiMAC_ReceivedPacket+0x35a>
			MACRxPacket.flags.bits.packetType = PACKET_TYPE_RESERVE;
    b352:	4905      	ldr	r1, [pc, #20]	; (b368 <MiMAC_ReceivedPacket+0x39c>)
    b354:	780a      	ldrb	r2, [r1, #0]
    b356:	2003      	movs	r0, #3
    b358:	4302      	orrs	r2, r0
    b35a:	700a      	strb	r2, [r1, #0]
			break;
    b35c:	e7e3      	b.n	b326 <MiMAC_ReceivedPacket+0x35a>
			BankIndex = i;
    b35e:	2200      	movs	r2, #0
    b360:	4b03      	ldr	r3, [pc, #12]	; (b370 <MiMAC_ReceivedPacket+0x3a4>)
    b362:	701a      	strb	r2, [r3, #0]
    b364:	e652      	b.n	b00c <MiMAC_ReceivedPacket+0x40>
    b366:	46c0      	nop			; (mov r8, r8)
    b368:	20002894 	.word	0x20002894
    b36c:	20001e80 	.word	0x20001e80
    b370:	2000000a 	.word	0x2000000a

0000b374 <MiMAC_SymbolToTicks>:
	return SYMBOLS_TO_TICKS(symbols);
    b374:	0100      	lsls	r0, r0, #4
}
    b376:	4770      	bx	lr

0000b378 <MiMAC_GetPHYChannelInfo>:
}
    b378:	4800      	ldr	r0, [pc, #0]	; (b37c <MiMAC_GetPHYChannelInfo+0x4>)
    b37a:	4770      	bx	lr
    b37c:	07fff800 	.word	0x07fff800

0000b380 <MiMAC_Task>:

void MiMAC_Task(void)
{
    b380:	b510      	push	{r4, lr}
  PHY_TaskHandler();
    b382:	4b0b      	ldr	r3, [pc, #44]	; (b3b0 <MiMAC_Task+0x30>)
    b384:	4798      	blx	r3
  if(dataConfCallback && dataConfAvailable)
    b386:	4b0b      	ldr	r3, [pc, #44]	; (b3b4 <MiMAC_Task+0x34>)
    b388:	681b      	ldr	r3, [r3, #0]
    b38a:	2b00      	cmp	r3, #0
    b38c:	d003      	beq.n	b396 <MiMAC_Task+0x16>
    b38e:	4a0a      	ldr	r2, [pc, #40]	; (b3b8 <MiMAC_Task+0x38>)
    b390:	7812      	ldrb	r2, [r2, #0]
    b392:	2a00      	cmp	r2, #0
    b394:	d100      	bne.n	b398 <MiMAC_Task+0x18>
  {
	  dataConfCallback(dataHandle, dataStatus, dataPointer);
	  dataConfAvailable = false;
  }
}
    b396:	bd10      	pop	{r4, pc}
	  dataConfCallback(dataHandle, dataStatus, dataPointer);
    b398:	4a08      	ldr	r2, [pc, #32]	; (b3bc <MiMAC_Task+0x3c>)
    b39a:	6812      	ldr	r2, [r2, #0]
    b39c:	4908      	ldr	r1, [pc, #32]	; (b3c0 <MiMAC_Task+0x40>)
    b39e:	7809      	ldrb	r1, [r1, #0]
    b3a0:	4808      	ldr	r0, [pc, #32]	; (b3c4 <MiMAC_Task+0x44>)
    b3a2:	7800      	ldrb	r0, [r0, #0]
    b3a4:	4798      	blx	r3
	  dataConfAvailable = false;
    b3a6:	2200      	movs	r2, #0
    b3a8:	4b03      	ldr	r3, [pc, #12]	; (b3b8 <MiMAC_Task+0x38>)
    b3aa:	701a      	strb	r2, [r3, #0]
}
    b3ac:	e7f3      	b.n	b396 <MiMAC_Task+0x16>
    b3ae:	46c0      	nop			; (mov r8, r8)
    b3b0:	0000b6e9 	.word	0x0000b6e9
    b3b4:	200003e0 	.word	0x200003e0
    b3b8:	200003dc 	.word	0x200003dc
    b3bc:	200003e8 	.word	0x200003e8
    b3c0:	20001e5c 	.word	0x20001e5c
    b3c4:	200003e4 	.word	0x200003e4

0000b3c8 <phyTrxSetState>:
}

/*************************************************************************//**
*****************************************************************************/
static void phyTrxSetState(uint8_t state)
{
    b3c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    b3ca:	0004      	movs	r4, r0
    if (PHY_STATE_SLEEP == phyState)
    b3cc:	4b0f      	ldr	r3, [pc, #60]	; (b40c <phyTrxSetState+0x44>)
    b3ce:	781b      	ldrb	r3, [r3, #0]
    b3d0:	2b02      	cmp	r3, #2
    b3d2:	d016      	beq.n	b402 <phyTrxSetState+0x3a>
	trx_reg_write(reg, value);
    b3d4:	4f0e      	ldr	r7, [pc, #56]	; (b410 <phyTrxSetState+0x48>)
	value = trx_reg_read(reg);
    b3d6:	4e0f      	ldr	r6, [pc, #60]	; (b414 <phyTrxSetState+0x4c>)
	{
		TRX_SLP_TR_LOW();
	}
	do { phyWriteRegister(TRX_STATE_REG, TRX_CMD_FORCE_TRX_OFF);
	} while (TRX_STATUS_TRX_OFF !=
			(phyReadRegister(TRX_STATUS_REG) & TRX_STATUS_MASK));
    b3d8:	251f      	movs	r5, #31
	trx_reg_write(reg, value);
    b3da:	2103      	movs	r1, #3
    b3dc:	2002      	movs	r0, #2
    b3de:	47b8      	blx	r7
	value = trx_reg_read(reg);
    b3e0:	2001      	movs	r0, #1
    b3e2:	47b0      	blx	r6
			(phyReadRegister(TRX_STATUS_REG) & TRX_STATUS_MASK));
    b3e4:	4028      	ands	r0, r5
    b3e6:	2808      	cmp	r0, #8
    b3e8:	d1f7      	bne.n	b3da <phyTrxSetState+0x12>
	trx_reg_write(reg, value);
    b3ea:	4f09      	ldr	r7, [pc, #36]	; (b410 <phyTrxSetState+0x48>)
	value = trx_reg_read(reg);
    b3ec:	4e09      	ldr	r6, [pc, #36]	; (b414 <phyTrxSetState+0x4c>)

	do { phyWriteRegister(TRX_STATE_REG,
			     state); } while (state !=
			(phyReadRegister(TRX_STATUS_REG) & TRX_STATUS_MASK));
    b3ee:	251f      	movs	r5, #31
	trx_reg_write(reg, value);
    b3f0:	0021      	movs	r1, r4
    b3f2:	2002      	movs	r0, #2
    b3f4:	47b8      	blx	r7
	value = trx_reg_read(reg);
    b3f6:	2001      	movs	r0, #1
    b3f8:	47b0      	blx	r6
			(phyReadRegister(TRX_STATUS_REG) & TRX_STATUS_MASK));
    b3fa:	4028      	ands	r0, r5
    b3fc:	4284      	cmp	r4, r0
    b3fe:	d1f7      	bne.n	b3f0 <phyTrxSetState+0x28>
}
    b400:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		port_base->OUTCLR.reg = pin_mask;
    b402:	2280      	movs	r2, #128	; 0x80
    b404:	0352      	lsls	r2, r2, #13
    b406:	4b04      	ldr	r3, [pc, #16]	; (b418 <phyTrxSetState+0x50>)
    b408:	615a      	str	r2, [r3, #20]
    b40a:	e7e3      	b.n	b3d4 <phyTrxSetState+0xc>
    b40c:	2000046d 	.word	0x2000046d
    b410:	0000c8fd 	.word	0x0000c8fd
    b414:	0000c801 	.word	0x0000c801
    b418:	41004400 	.word	0x41004400

0000b41c <phySetRxState>:
{
    b41c:	b510      	push	{r4, lr}
	phyTrxSetState(TRX_CMD_TRX_OFF);
    b41e:	2008      	movs	r0, #8
    b420:	4b08      	ldr	r3, [pc, #32]	; (b444 <phySetRxState+0x28>)
    b422:	4798      	blx	r3
	value = trx_reg_read(reg);
    b424:	200f      	movs	r0, #15
    b426:	4b08      	ldr	r3, [pc, #32]	; (b448 <phySetRxState+0x2c>)
    b428:	4798      	blx	r3
	if (phyRxState) {
    b42a:	4b08      	ldr	r3, [pc, #32]	; (b44c <phySetRxState+0x30>)
    b42c:	781b      	ldrb	r3, [r3, #0]
    b42e:	2b00      	cmp	r3, #0
    b430:	d100      	bne.n	b434 <phySetRxState+0x18>
}
    b432:	bd10      	pop	{r4, pc}
		phyTrxSetState(TRX_CMD_RX_AACK_ON);
    b434:	2016      	movs	r0, #22
    b436:	4b03      	ldr	r3, [pc, #12]	; (b444 <phySetRxState+0x28>)
    b438:	4798      	blx	r3
		phyState = PHY_STATE_IDLE;
    b43a:	2201      	movs	r2, #1
    b43c:	4b04      	ldr	r3, [pc, #16]	; (b450 <phySetRxState+0x34>)
    b43e:	701a      	strb	r2, [r3, #0]
}
    b440:	e7f7      	b.n	b432 <phySetRxState+0x16>
    b442:	46c0      	nop			; (mov r8, r8)
    b444:	0000b3c9 	.word	0x0000b3c9
    b448:	0000c801 	.word	0x0000c801
    b44c:	2000046c 	.word	0x2000046c
    b450:	2000046d 	.word	0x2000046d

0000b454 <PHY_DataReq>:
{
    b454:	b570      	push	{r4, r5, r6, lr}
    b456:	0005      	movs	r5, r0
    phyDataRequestPtr = (PhyTxFrame_t *) MiMem_Alloc(sizeof(PhyTxFrame_t));
    b458:	2010      	movs	r0, #16
    b45a:	4b09      	ldr	r3, [pc, #36]	; (b480 <PHY_DataReq+0x2c>)
    b45c:	4798      	blx	r3
    b45e:	1e04      	subs	r4, r0, #0
    if (NULL == phyDataRequestPtr)
    b460:	d009      	beq.n	b476 <PHY_DataReq+0x22>
	memcpy(&phyDataRequestPtr->phyDataReq, phyDataReq, sizeof(PHY_DataReq_t));
    b462:	3004      	adds	r0, #4
    b464:	220c      	movs	r2, #12
    b466:	0029      	movs	r1, r5
    b468:	4b06      	ldr	r3, [pc, #24]	; (b484 <PHY_DataReq+0x30>)
    b46a:	4798      	blx	r3
	miQueueAppend(&phyTxQueue, (miQueueBuffer_t *)phyDataRequestPtr);
    b46c:	0021      	movs	r1, r4
    b46e:	4806      	ldr	r0, [pc, #24]	; (b488 <PHY_DataReq+0x34>)
    b470:	4b06      	ldr	r3, [pc, #24]	; (b48c <PHY_DataReq+0x38>)
    b472:	4798      	blx	r3
}
    b474:	bd70      	pop	{r4, r5, r6, pc}
        phyDataReq->confirmCallback(PHY_STATUS_ERROR);
    b476:	68ab      	ldr	r3, [r5, #8]
    b478:	2001      	movs	r0, #1
    b47a:	4798      	blx	r3
        return;
    b47c:	e7fa      	b.n	b474 <PHY_DataReq+0x20>
    b47e:	46c0      	nop			; (mov r8, r8)
    b480:	0000bc69 	.word	0x0000bc69
    b484:	00014d37 	.word	0x00014d37
    b488:	20001e74 	.word	0x20001e74
    b48c:	0000be65 	.word	0x0000be65

0000b490 <PHY_TxHandler>:
{
    b490:	b510      	push	{r4, lr}
	if (phyTxQueue.size && ((phyState == PHY_STATE_IDLE) || (phyState == PHY_STATE_SLEEP)))
    b492:	4b1e      	ldr	r3, [pc, #120]	; (b50c <PHY_TxHandler+0x7c>)
    b494:	7a1b      	ldrb	r3, [r3, #8]
    b496:	2b00      	cmp	r3, #0
    b498:	d004      	beq.n	b4a4 <PHY_TxHandler+0x14>
    b49a:	4b1d      	ldr	r3, [pc, #116]	; (b510 <PHY_TxHandler+0x80>)
    b49c:	781b      	ldrb	r3, [r3, #0]
    b49e:	3b01      	subs	r3, #1
    b4a0:	2b01      	cmp	r3, #1
    b4a2:	d900      	bls.n	b4a6 <PHY_TxHandler+0x16>
}
    b4a4:	bd10      	pop	{r4, pc}
        phyTxPtr =  (PhyTxFrame_t *)miQueueRemove(&phyTxQueue, NULL);
    b4a6:	2100      	movs	r1, #0
    b4a8:	4818      	ldr	r0, [pc, #96]	; (b50c <PHY_TxHandler+0x7c>)
    b4aa:	4b1a      	ldr	r3, [pc, #104]	; (b514 <PHY_TxHandler+0x84>)
    b4ac:	4798      	blx	r3
    b4ae:	1e04      	subs	r4, r0, #0
        if (NULL != phyTxPtr)
    b4b0:	d0f8      	beq.n	b4a4 <PHY_TxHandler+0x14>
			if (phyTxPtr->phyDataReq.data[0] > MAX_PSDU)
    b4b2:	6883      	ldr	r3, [r0, #8]
    b4b4:	781b      	ldrb	r3, [r3, #0]
    b4b6:	2b7f      	cmp	r3, #127	; 0x7f
    b4b8:	d823      	bhi.n	b502 <PHY_TxHandler+0x72>
			gPhyDataReq.polledConfirmation = phyTxPtr->phyDataReq.polledConfirmation;
    b4ba:	4b17      	ldr	r3, [pc, #92]	; (b518 <PHY_TxHandler+0x88>)
    b4bc:	7902      	ldrb	r2, [r0, #4]
    b4be:	701a      	strb	r2, [r3, #0]
			gPhyDataReq.confirmCallback = phyTxPtr->phyDataReq.confirmCallback;
    b4c0:	68c2      	ldr	r2, [r0, #12]
    b4c2:	609a      	str	r2, [r3, #8]
			phyTrxSetState(TRX_CMD_TX_ARET_ON);
    b4c4:	2019      	movs	r0, #25
    b4c6:	4b15      	ldr	r3, [pc, #84]	; (b51c <PHY_TxHandler+0x8c>)
    b4c8:	4798      	blx	r3
	value = trx_reg_read(reg);
    b4ca:	200f      	movs	r0, #15
    b4cc:	4b14      	ldr	r3, [pc, #80]	; (b520 <PHY_TxHandler+0x90>)
    b4ce:	4798      	blx	r3
			phyTxPtr->phyDataReq.data[0] += 2;// 2
    b4d0:	68a2      	ldr	r2, [r4, #8]
    b4d2:	7813      	ldrb	r3, [r2, #0]
    b4d4:	3302      	adds	r3, #2
    b4d6:	7013      	strb	r3, [r2, #0]
			trx_frame_write(&phyTxPtr->phyDataReq.data[0], (phyTxPtr->phyDataReq.data[0]-1 ) /* length value*/);
    b4d8:	68a3      	ldr	r3, [r4, #8]
    b4da:	7819      	ldrb	r1, [r3, #0]
    b4dc:	3901      	subs	r1, #1
    b4de:	b2c9      	uxtb	r1, r1
    b4e0:	0018      	movs	r0, r3
    b4e2:	4b10      	ldr	r3, [pc, #64]	; (b524 <PHY_TxHandler+0x94>)
    b4e4:	4798      	blx	r3
			phyState = PHY_STATE_TX_WAIT_END;
    b4e6:	2203      	movs	r2, #3
    b4e8:	4b09      	ldr	r3, [pc, #36]	; (b510 <PHY_TxHandler+0x80>)
    b4ea:	701a      	strb	r2, [r3, #0]
		port_base->OUTSET.reg = pin_mask;
    b4ec:	4b0e      	ldr	r3, [pc, #56]	; (b528 <PHY_TxHandler+0x98>)
    b4ee:	2280      	movs	r2, #128	; 0x80
    b4f0:	0352      	lsls	r2, r2, #13
    b4f2:	619a      	str	r2, [r3, #24]
			TRX_TRIG_DELAY();
    b4f4:	46c0      	nop			; (mov r8, r8)
    b4f6:	46c0      	nop			; (mov r8, r8)
		port_base->OUTCLR.reg = pin_mask;
    b4f8:	615a      	str	r2, [r3, #20]
		    MiMem_Free((uint8_t *)phyTxPtr);
    b4fa:	0020      	movs	r0, r4
    b4fc:	4b0b      	ldr	r3, [pc, #44]	; (b52c <PHY_TxHandler+0x9c>)
    b4fe:	4798      	blx	r3
    b500:	e7d0      	b.n	b4a4 <PHY_TxHandler+0x14>
				phyTxPtr->phyDataReq.confirmCallback(PHY_STATUS_ERROR);
    b502:	68c3      	ldr	r3, [r0, #12]
    b504:	2001      	movs	r0, #1
    b506:	4798      	blx	r3
				return;
    b508:	e7cc      	b.n	b4a4 <PHY_TxHandler+0x14>
    b50a:	46c0      	nop			; (mov r8, r8)
    b50c:	20001e74 	.word	0x20001e74
    b510:	2000046d 	.word	0x2000046d
    b514:	0000be9d 	.word	0x0000be9d
    b518:	20001e68 	.word	0x20001e68
    b51c:	0000b3c9 	.word	0x0000b3c9
    b520:	0000c801 	.word	0x0000c801
    b524:	0000cb2d 	.word	0x0000cb2d
    b528:	41004400 	.word	0x41004400
    b52c:	0000bd25 	.word	0x0000bd25

0000b530 <PHY_RandomReq>:
{
    b530:	b5f0      	push	{r4, r5, r6, r7, lr}
    b532:	46c6      	mov	lr, r8
    b534:	b500      	push	{lr}
	phyTrxSetState(TRX_CMD_RX_ON);
    b536:	2006      	movs	r0, #6
    b538:	4b0d      	ldr	r3, [pc, #52]	; (b570 <PHY_RandomReq+0x40>)
    b53a:	4798      	blx	r3
    b53c:	2400      	movs	r4, #0
	uint16_t rnd = 0;
    b53e:	2500      	movs	r5, #0
		delay_cycles_us(1);
    b540:	4f0c      	ldr	r7, [pc, #48]	; (b574 <PHY_RandomReq+0x44>)
	value = trx_reg_read(reg);
    b542:	4e0d      	ldr	r6, [pc, #52]	; (b578 <PHY_RandomReq+0x48>)
		rndValue = (phyReadRegister(PHY_RSSI_REG) >> RND_VALUE) & 3;
    b544:	2303      	movs	r3, #3
    b546:	4698      	mov	r8, r3
		delay_cycles_us(1);
    b548:	2001      	movs	r0, #1
    b54a:	47b8      	blx	r7
	value = trx_reg_read(reg);
    b54c:	2006      	movs	r0, #6
    b54e:	47b0      	blx	r6
		rndValue = (phyReadRegister(PHY_RSSI_REG) >> RND_VALUE) & 3;
    b550:	0940      	lsrs	r0, r0, #5
		rnd |= rndValue << i;
    b552:	4643      	mov	r3, r8
    b554:	4018      	ands	r0, r3
    b556:	40a0      	lsls	r0, r4
    b558:	4305      	orrs	r5, r0
    b55a:	b2ad      	uxth	r5, r5
    b55c:	3402      	adds	r4, #2
	for (uint8_t i = 0; i < 16; i += 2) {
    b55e:	2c10      	cmp	r4, #16
    b560:	d1f2      	bne.n	b548 <PHY_RandomReq+0x18>
	phySetRxState();
    b562:	4b06      	ldr	r3, [pc, #24]	; (b57c <PHY_RandomReq+0x4c>)
    b564:	4798      	blx	r3
}
    b566:	0028      	movs	r0, r5
    b568:	bc04      	pop	{r2}
    b56a:	4690      	mov	r8, r2
    b56c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    b56e:	46c0      	nop			; (mov r8, r8)
    b570:	0000b3c9 	.word	0x0000b3c9
    b574:	00006521 	.word	0x00006521
    b578:	0000c801 	.word	0x0000c801
    b57c:	0000b41d 	.word	0x0000b41d

0000b580 <PHY_Init>:
{
    b580:	b570      	push	{r4, r5, r6, lr}
	trx_spi_init();
    b582:	4b0e      	ldr	r3, [pc, #56]	; (b5bc <PHY_Init+0x3c>)
    b584:	4798      	blx	r3
	PhyReset();
    b586:	4b0e      	ldr	r3, [pc, #56]	; (b5c0 <PHY_Init+0x40>)
    b588:	4798      	blx	r3
	phyRxState = false;
    b58a:	2200      	movs	r2, #0
    b58c:	4b0d      	ldr	r3, [pc, #52]	; (b5c4 <PHY_Init+0x44>)
    b58e:	701a      	strb	r2, [r3, #0]
	phyState = PHY_STATE_IDLE;
    b590:	3201      	adds	r2, #1
    b592:	4b0d      	ldr	r3, [pc, #52]	; (b5c8 <PHY_Init+0x48>)
    b594:	701a      	strb	r2, [r3, #0]
	trx_reg_write(reg, value);
    b596:	4e0d      	ldr	r6, [pc, #52]	; (b5cc <PHY_Init+0x4c>)
	value = trx_reg_read(reg);
    b598:	4d0d      	ldr	r5, [pc, #52]	; (b5d0 <PHY_Init+0x50>)
	(phyReadRegister(TRX_STATUS_REG) & TRX_STATUS_MASK));
    b59a:	241f      	movs	r4, #31
	trx_reg_write(reg, value);
    b59c:	2108      	movs	r1, #8
    b59e:	2002      	movs	r0, #2
    b5a0:	47b0      	blx	r6
	value = trx_reg_read(reg);
    b5a2:	2001      	movs	r0, #1
    b5a4:	47a8      	blx	r5
	(phyReadRegister(TRX_STATUS_REG) & TRX_STATUS_MASK));
    b5a6:	4020      	ands	r0, r4
    b5a8:	2808      	cmp	r0, #8
    b5aa:	d1f7      	bne.n	b59c <PHY_Init+0x1c>
	trx_reg_write(reg, value);
    b5ac:	212e      	movs	r1, #46	; 0x2e
    b5ae:	3804      	subs	r0, #4
    b5b0:	4c06      	ldr	r4, [pc, #24]	; (b5cc <PHY_Init+0x4c>)
    b5b2:	47a0      	blx	r4
    b5b4:	21a0      	movs	r1, #160	; 0xa0
    b5b6:	200c      	movs	r0, #12
    b5b8:	47a0      	blx	r4
}
    b5ba:	bd70      	pop	{r4, r5, r6, pc}
    b5bc:	0000c6b5 	.word	0x0000c6b5
    b5c0:	0000c7d1 	.word	0x0000c7d1
    b5c4:	2000046c 	.word	0x2000046c
    b5c8:	2000046d 	.word	0x2000046d
    b5cc:	0000c8fd 	.word	0x0000c8fd
    b5d0:	0000c801 	.word	0x0000c801

0000b5d4 <PHY_SetRxState>:
{
    b5d4:	b510      	push	{r4, lr}
	phyRxState = rx;
    b5d6:	4b02      	ldr	r3, [pc, #8]	; (b5e0 <PHY_SetRxState+0xc>)
    b5d8:	7018      	strb	r0, [r3, #0]
	phySetRxState();
    b5da:	4b02      	ldr	r3, [pc, #8]	; (b5e4 <PHY_SetRxState+0x10>)
    b5dc:	4798      	blx	r3
}
    b5de:	bd10      	pop	{r4, pc}
    b5e0:	2000046c 	.word	0x2000046c
    b5e4:	0000b41d 	.word	0x0000b41d

0000b5e8 <PHY_SetPanId>:
{
    b5e8:	b530      	push	{r4, r5, lr}
    b5ea:	b083      	sub	sp, #12
    b5ec:	466b      	mov	r3, sp
    b5ee:	1d9d      	adds	r5, r3, #6
    b5f0:	80d8      	strh	r0, [r3, #6]
	trx_reg_write(reg, value);
    b5f2:	b2c1      	uxtb	r1, r0
    b5f4:	2022      	movs	r0, #34	; 0x22
    b5f6:	4c03      	ldr	r4, [pc, #12]	; (b604 <PHY_SetPanId+0x1c>)
    b5f8:	47a0      	blx	r4
    b5fa:	7869      	ldrb	r1, [r5, #1]
    b5fc:	2023      	movs	r0, #35	; 0x23
    b5fe:	47a0      	blx	r4
}
    b600:	b003      	add	sp, #12
    b602:	bd30      	pop	{r4, r5, pc}
    b604:	0000c8fd 	.word	0x0000c8fd

0000b608 <PHY_SetShortAddr>:
{
    b608:	b570      	push	{r4, r5, r6, lr}
    b60a:	b082      	sub	sp, #8
    b60c:	466b      	mov	r3, sp
    b60e:	1d9e      	adds	r6, r3, #6
    b610:	80d8      	strh	r0, [r3, #6]
	phyWriteRegister(SHORT_ADDR_0_REG, d[0]);
    b612:	b2c4      	uxtb	r4, r0
	trx_reg_write(reg, value);
    b614:	0021      	movs	r1, r4
    b616:	2020      	movs	r0, #32
    b618:	4d05      	ldr	r5, [pc, #20]	; (b630 <PHY_SetShortAddr+0x28>)
    b61a:	47a8      	blx	r5
	phyWriteRegister(SHORT_ADDR_1_REG, d[1]);
    b61c:	7876      	ldrb	r6, [r6, #1]
	trx_reg_write(reg, value);
    b61e:	0031      	movs	r1, r6
    b620:	2021      	movs	r0, #33	; 0x21
    b622:	47a8      	blx	r5
	phyWriteRegister(CSMA_SEED_0_REG, d[0] + d[1]);
    b624:	19a4      	adds	r4, r4, r6
	trx_reg_write(reg, value);
    b626:	b2e1      	uxtb	r1, r4
    b628:	202d      	movs	r0, #45	; 0x2d
    b62a:	47a8      	blx	r5
}
    b62c:	b002      	add	sp, #8
    b62e:	bd70      	pop	{r4, r5, r6, pc}
    b630:	0000c8fd 	.word	0x0000c8fd

0000b634 <PHY_Sleep>:
{
    b634:	b510      	push	{r4, lr}
	if (PHY_STATE_SLEEP != phyState)
    b636:	4b07      	ldr	r3, [pc, #28]	; (b654 <PHY_Sleep+0x20>)
    b638:	781b      	ldrb	r3, [r3, #0]
    b63a:	2b02      	cmp	r3, #2
    b63c:	d009      	beq.n	b652 <PHY_Sleep+0x1e>
		phyTrxSetState(TRX_CMD_TRX_OFF);
    b63e:	2008      	movs	r0, #8
    b640:	4b05      	ldr	r3, [pc, #20]	; (b658 <PHY_Sleep+0x24>)
    b642:	4798      	blx	r3
		port_base->OUTSET.reg = pin_mask;
    b644:	2280      	movs	r2, #128	; 0x80
    b646:	0352      	lsls	r2, r2, #13
    b648:	4b04      	ldr	r3, [pc, #16]	; (b65c <PHY_Sleep+0x28>)
    b64a:	619a      	str	r2, [r3, #24]
		phyState = PHY_STATE_SLEEP;	
    b64c:	2202      	movs	r2, #2
    b64e:	4b01      	ldr	r3, [pc, #4]	; (b654 <PHY_Sleep+0x20>)
    b650:	701a      	strb	r2, [r3, #0]
}
    b652:	bd10      	pop	{r4, pc}
    b654:	2000046d 	.word	0x2000046d
    b658:	0000b3c9 	.word	0x0000b3c9
    b65c:	41004400 	.word	0x41004400

0000b660 <PHY_Wakeup>:
{
    b660:	b510      	push	{r4, lr}
	if (PHY_STATE_SLEEP == phyState)
    b662:	4b07      	ldr	r3, [pc, #28]	; (b680 <PHY_Wakeup+0x20>)
    b664:	781b      	ldrb	r3, [r3, #0]
    b666:	2b02      	cmp	r3, #2
    b668:	d000      	beq.n	b66c <PHY_Wakeup+0xc>
}
    b66a:	bd10      	pop	{r4, pc}
		port_base->OUTCLR.reg = pin_mask;
    b66c:	2280      	movs	r2, #128	; 0x80
    b66e:	0352      	lsls	r2, r2, #13
    b670:	4b04      	ldr	r3, [pc, #16]	; (b684 <PHY_Wakeup+0x24>)
    b672:	615a      	str	r2, [r3, #20]
	 	phySetRxState();
    b674:	4b04      	ldr	r3, [pc, #16]	; (b688 <PHY_Wakeup+0x28>)
    b676:	4798      	blx	r3
	 	phyState = PHY_STATE_IDLE;
    b678:	2201      	movs	r2, #1
    b67a:	4b01      	ldr	r3, [pc, #4]	; (b680 <PHY_Wakeup+0x20>)
    b67c:	701a      	strb	r2, [r3, #0]
}
    b67e:	e7f4      	b.n	b66a <PHY_Wakeup+0xa>
    b680:	2000046d 	.word	0x2000046d
    b684:	41004400 	.word	0x41004400
    b688:	0000b41d 	.word	0x0000b41d

0000b68c <PHY_SetChannel>:
{
    b68c:	b510      	push	{r4, lr}
    b68e:	0004      	movs	r4, r0
	if (PHY_STATE_SLEEP == phyState)
    b690:	4b09      	ldr	r3, [pc, #36]	; (b6b8 <PHY_SetChannel+0x2c>)
    b692:	781b      	ldrb	r3, [r3, #0]
    b694:	2b02      	cmp	r3, #2
    b696:	d00b      	beq.n	b6b0 <PHY_SetChannel+0x24>
	value = trx_reg_read(reg);
    b698:	2008      	movs	r0, #8
    b69a:	4b08      	ldr	r3, [pc, #32]	; (b6bc <PHY_SetChannel+0x30>)
    b69c:	4798      	blx	r3
	reg = phyReadRegister(PHY_CC_CCA_REG) & ~0x1f;
    b69e:	231f      	movs	r3, #31
    b6a0:	0001      	movs	r1, r0
    b6a2:	4399      	bics	r1, r3
	phyWriteRegister(PHY_CC_CCA_REG, reg | channel);
    b6a4:	4321      	orrs	r1, r4
	trx_reg_write(reg, value);
    b6a6:	b2c9      	uxtb	r1, r1
    b6a8:	2008      	movs	r0, #8
    b6aa:	4b05      	ldr	r3, [pc, #20]	; (b6c0 <PHY_SetChannel+0x34>)
    b6ac:	4798      	blx	r3
}
    b6ae:	bd10      	pop	{r4, pc}
		PHY_Wakeup();
    b6b0:	4b04      	ldr	r3, [pc, #16]	; (b6c4 <PHY_SetChannel+0x38>)
    b6b2:	4798      	blx	r3
    b6b4:	e7f0      	b.n	b698 <PHY_SetChannel+0xc>
    b6b6:	46c0      	nop			; (mov r8, r8)
    b6b8:	2000046d 	.word	0x2000046d
    b6bc:	0000c801 	.word	0x0000c801
    b6c0:	0000c8fd 	.word	0x0000c8fd
    b6c4:	0000b661 	.word	0x0000b661

0000b6c8 <PHY_SetIEEEAddr>:

/*************************************************************************//**
*****************************************************************************/
// Setting the IEEE address
void PHY_SetIEEEAddr(uint8_t *ieee_addr)
{
    b6c8:	b570      	push	{r4, r5, r6, lr}
    b6ca:	0005      	movs	r5, r0
    b6cc:	2424      	movs	r4, #36	; 0x24
	uint8_t *ptr_to_reg = ieee_addr;
	for (uint8_t i = 0; i < 8; i++) {
		trx_reg_write((IEEE_ADDR_0_REG + i), *ptr_to_reg);
    b6ce:	4e05      	ldr	r6, [pc, #20]	; (b6e4 <PHY_SetIEEEAddr+0x1c>)
    b6d0:	7829      	ldrb	r1, [r5, #0]
    b6d2:	0020      	movs	r0, r4
    b6d4:	47b0      	blx	r6
		ptr_to_reg++;
    b6d6:	3501      	adds	r5, #1
    b6d8:	3401      	adds	r4, #1
    b6da:	b2e4      	uxtb	r4, r4
	for (uint8_t i = 0; i < 8; i++) {
    b6dc:	2c2c      	cmp	r4, #44	; 0x2c
    b6de:	d1f7      	bne.n	b6d0 <PHY_SetIEEEAddr+0x8>
	}
}
    b6e0:	bd70      	pop	{r4, r5, r6, pc}
    b6e2:	46c0      	nop			; (mov r8, r8)
    b6e4:	0000c8fd 	.word	0x0000c8fd

0000b6e8 <PHY_TaskHandler>:
/*************************************************************************//**
*****************************************************************************/

// Handle Packet Received
void PHY_TaskHandler(void)
{
    b6e8:	b5f0      	push	{r4, r5, r6, r7, lr}
    b6ea:	b085      	sub	sp, #20
	PHY_TxHandler();
    b6ec:	4b3f      	ldr	r3, [pc, #252]	; (b7ec <PHY_TaskHandler+0x104>)
    b6ee:	4798      	blx	r3

	if (PHY_STATE_SLEEP == phyState)
    b6f0:	4b3f      	ldr	r3, [pc, #252]	; (b7f0 <PHY_TaskHandler+0x108>)
    b6f2:	781b      	ldrb	r3, [r3, #0]
    b6f4:	2b02      	cmp	r3, #2
    b6f6:	d00a      	beq.n	b70e <PHY_TaskHandler+0x26>
	value = trx_reg_read(reg);
    b6f8:	200f      	movs	r0, #15
    b6fa:	4b3e      	ldr	r3, [pc, #248]	; (b7f4 <PHY_TaskHandler+0x10c>)
    b6fc:	4798      	blx	r3
	{
		return;
	}

	if (phyReadRegister(IRQ_STATUS_REG) & (1 << TRX_END))
    b6fe:	0703      	lsls	r3, r0, #28
    b700:	d505      	bpl.n	b70e <PHY_TaskHandler+0x26>
	{
		if (PHY_STATE_IDLE == phyState)
    b702:	4b3b      	ldr	r3, [pc, #236]	; (b7f0 <PHY_TaskHandler+0x108>)
    b704:	781b      	ldrb	r3, [r3, #0]
    b706:	2b01      	cmp	r3, #1
    b708:	d003      	beq.n	b712 <PHY_TaskHandler+0x2a>
					}
				}
				phyWaitState(TRX_STATUS_RX_AACK_ON);
			}
		}
		else if (PHY_STATE_TX_WAIT_END == phyState)
    b70a:	2b03      	cmp	r3, #3
    b70c:	d053      	beq.n	b7b6 <PHY_TaskHandler+0xce>
		    gPhyDataReq.confirmCallback = NULL;
			phySetRxState();
			phyState = PHY_STATE_IDLE;
		}
	}
}
    b70e:	b005      	add	sp, #20
    b710:	bdf0      	pop	{r4, r5, r6, r7, pc}
				if (RxBuffer[i].PayloadLen == 0)
    b712:	4b39      	ldr	r3, [pc, #228]	; (b7f8 <PHY_TaskHandler+0x110>)
    b714:	781d      	ldrb	r5, [r3, #0]
    b716:	2d00      	cmp	r5, #0
    b718:	d010      	beq.n	b73c <PHY_TaskHandler+0x54>
    b71a:	237f      	movs	r3, #127	; 0x7f
    b71c:	4a36      	ldr	r2, [pc, #216]	; (b7f8 <PHY_TaskHandler+0x110>)
    b71e:	5cd3      	ldrb	r3, [r2, r3]
    b720:	2b00      	cmp	r3, #0
    b722:	d00a      	beq.n	b73a <PHY_TaskHandler+0x52>
    b724:	23fe      	movs	r3, #254	; 0xfe
    b726:	5cd3      	ldrb	r3, [r2, r3]
    b728:	2b00      	cmp	r3, #0
    b72a:	d042      	beq.n	b7b2 <PHY_TaskHandler+0xca>
    b72c:	237e      	movs	r3, #126	; 0x7e
    b72e:	33ff      	adds	r3, #255	; 0xff
    b730:	5cd3      	ldrb	r3, [r2, r3]
			for (i = 0; i < BANK_SIZE; i++)
    b732:	2503      	movs	r5, #3
				if (RxBuffer[i].PayloadLen == 0)
    b734:	2b00      	cmp	r3, #0
    b736:	d1ea      	bne.n	b70e <PHY_TaskHandler+0x26>
    b738:	e000      	b.n	b73c <PHY_TaskHandler+0x54>
			for (i = 0; i < BANK_SIZE; i++)
    b73a:	2501      	movs	r5, #1
	value = trx_reg_read(reg);
    b73c:	2007      	movs	r0, #7
    b73e:	4b2d      	ldr	r3, [pc, #180]	; (b7f4 <PHY_TaskHandler+0x10c>)
    b740:	4798      	blx	r3
    b742:	9001      	str	r0, [sp, #4]
				trx_frame_read(&size, 1);
    b744:	ab02      	add	r3, sp, #8
    b746:	1dde      	adds	r6, r3, #7
    b748:	2101      	movs	r1, #1
    b74a:	0030      	movs	r0, r6
    b74c:	4b2b      	ldr	r3, [pc, #172]	; (b7fc <PHY_TaskHandler+0x114>)
    b74e:	4798      	blx	r3
				if(size <= MAX_PSDU)
    b750:	7831      	ldrb	r1, [r6, #0]
    b752:	b24b      	sxtb	r3, r1
    b754:	2b00      	cmp	r3, #0
    b756:	db24      	blt.n	b7a2 <PHY_TaskHandler+0xba>
					trx_frame_read(phyRxBuffer, size + 2);
    b758:	3102      	adds	r1, #2
    b75a:	b2c9      	uxtb	r1, r1
    b75c:	4828      	ldr	r0, [pc, #160]	; (b800 <PHY_TaskHandler+0x118>)
    b75e:	4b27      	ldr	r3, [pc, #156]	; (b7fc <PHY_TaskHandler+0x114>)
    b760:	4798      	blx	r3
					RxBuffer[RxBank].PayloadLen = size + 2;
    b762:	002c      	movs	r4, r5
    b764:	ab02      	add	r3, sp, #8
    b766:	79d8      	ldrb	r0, [r3, #7]
    b768:	1c87      	adds	r7, r0, #2
    b76a:	b2ff      	uxtb	r7, r7
    b76c:	01eb      	lsls	r3, r5, #7
    b76e:	1b5d      	subs	r5, r3, r5
    b770:	4b21      	ldr	r3, [pc, #132]	; (b7f8 <PHY_TaskHandler+0x110>)
    b772:	54ef      	strb	r7, [r5, r3]
					if (RxBuffer[RxBank].PayloadLen < RX_PACKET_SIZE)
    b774:	2f7d      	cmp	r7, #125	; 0x7d
    b776:	d814      	bhi.n	b7a2 <PHY_TaskHandler+0xba>
						for (i = 1; i <= size+2; i++)
    b778:	3002      	adds	r0, #2
    b77a:	2201      	movs	r2, #1
    b77c:	2301      	movs	r3, #1
							RxBuffer[RxBank].Payload[i-1] = phyRxBuffer[i];
    b77e:	0029      	movs	r1, r5
    b780:	4d1d      	ldr	r5, [pc, #116]	; (b7f8 <PHY_TaskHandler+0x110>)
    b782:	186d      	adds	r5, r5, r1
    b784:	4e1e      	ldr	r6, [pc, #120]	; (b800 <PHY_TaskHandler+0x118>)
    b786:	5cb1      	ldrb	r1, [r6, r2]
    b788:	54a9      	strb	r1, [r5, r2]
						for (i = 1; i <= size+2; i++)
    b78a:	3301      	adds	r3, #1
    b78c:	b2db      	uxtb	r3, r3
    b78e:	001a      	movs	r2, r3
    b790:	4298      	cmp	r0, r3
    b792:	daf8      	bge.n	b786 <PHY_TaskHandler+0x9e>
						RxBuffer[RxBank].Payload[RxBuffer[RxBank].PayloadLen - 1] = rssi + PHY_RSSI_BASE_VAL;
    b794:	01e2      	lsls	r2, r4, #7
    b796:	1b12      	subs	r2, r2, r4
    b798:	4b17      	ldr	r3, [pc, #92]	; (b7f8 <PHY_TaskHandler+0x110>)
    b79a:	189b      	adds	r3, r3, r2
    b79c:	9c01      	ldr	r4, [sp, #4]
    b79e:	3c5e      	subs	r4, #94	; 0x5e
    b7a0:	55dc      	strb	r4, [r3, r7]
	value = trx_reg_read(reg);
    b7a2:	4d14      	ldr	r5, [pc, #80]	; (b7f4 <PHY_TaskHandler+0x10c>)
while (state != (phyReadRegister(TRX_STATUS_REG) & TRX_STATUS_MASK)) {
    b7a4:	241f      	movs	r4, #31
	value = trx_reg_read(reg);
    b7a6:	2001      	movs	r0, #1
    b7a8:	47a8      	blx	r5
while (state != (phyReadRegister(TRX_STATUS_REG) & TRX_STATUS_MASK)) {
    b7aa:	4020      	ands	r0, r4
    b7ac:	2816      	cmp	r0, #22
    b7ae:	d1fa      	bne.n	b7a6 <PHY_TaskHandler+0xbe>
    b7b0:	e7ad      	b.n	b70e <PHY_TaskHandler+0x26>
			for (i = 0; i < BANK_SIZE; i++)
    b7b2:	2502      	movs	r5, #2
    b7b4:	e7c2      	b.n	b73c <PHY_TaskHandler+0x54>
	value = trx_reg_read(reg);
    b7b6:	2002      	movs	r0, #2
    b7b8:	4b0e      	ldr	r3, [pc, #56]	; (b7f4 <PHY_TaskHandler+0x10c>)
    b7ba:	4798      	blx	r3
			uint8_t status = (phyReadRegister(TRX_STATE_REG) >>  TRAC_STATUS) & 7;
    b7bc:	0940      	lsrs	r0, r0, #5
    b7be:	b2c0      	uxtb	r0, r0
   			if (TRAC_STATUS_SUCCESS == status)
    b7c0:	2800      	cmp	r0, #0
    b7c2:	d004      	beq.n	b7ce <PHY_TaskHandler+0xe6>
			else if (TRAC_STATUS_CHANNEL_ACCESS_FAILURE == status)
    b7c4:	2803      	cmp	r0, #3
    b7c6:	d00d      	beq.n	b7e4 <PHY_TaskHandler+0xfc>
			else if (TRAC_STATUS_NO_ACK == status)
    b7c8:	2805      	cmp	r0, #5
    b7ca:	d00d      	beq.n	b7e8 <PHY_TaskHandler+0x100>
				status = PHY_STATUS_ERROR;
    b7cc:	2001      	movs	r0, #1
		    gPhyDataReq.confirmCallback(status);
    b7ce:	4c0d      	ldr	r4, [pc, #52]	; (b804 <PHY_TaskHandler+0x11c>)
    b7d0:	68a3      	ldr	r3, [r4, #8]
    b7d2:	4798      	blx	r3
		    gPhyDataReq.confirmCallback = NULL;
    b7d4:	2300      	movs	r3, #0
    b7d6:	60a3      	str	r3, [r4, #8]
			phySetRxState();
    b7d8:	4b0b      	ldr	r3, [pc, #44]	; (b808 <PHY_TaskHandler+0x120>)
    b7da:	4798      	blx	r3
			phyState = PHY_STATE_IDLE;
    b7dc:	2201      	movs	r2, #1
    b7de:	4b04      	ldr	r3, [pc, #16]	; (b7f0 <PHY_TaskHandler+0x108>)
    b7e0:	701a      	strb	r2, [r3, #0]
    b7e2:	e794      	b.n	b70e <PHY_TaskHandler+0x26>
				status = PHY_STATUS_CHANNEL_ACCESS_FAILURE;
    b7e4:	2002      	movs	r0, #2
    b7e6:	e7f2      	b.n	b7ce <PHY_TaskHandler+0xe6>
				status = PHY_STATUS_NO_ACK;
    b7e8:	2003      	movs	r0, #3
    b7ea:	e7f0      	b.n	b7ce <PHY_TaskHandler+0xe6>
    b7ec:	0000b491 	.word	0x0000b491
    b7f0:	2000046d 	.word	0x2000046d
    b7f4:	0000c801 	.word	0x0000c801
    b7f8:	20001e80 	.word	0x20001e80
    b7fc:	0000c9fd 	.word	0x0000c9fd
    b800:	200003ec 	.word	0x200003ec
    b804:	20001e68 	.word	0x20001e68
    b808:	0000b41d 	.word	0x0000b41d

0000b80c <stb_init>:
 * @brief STB Initialization
 *
 * This function initializes the STB.
 */
void stb_init(void)
{
    b80c:	b510      	push	{r4, lr}
	sal_init();
    b80e:	4b01      	ldr	r3, [pc, #4]	; (b814 <stb_init+0x8>)
    b810:	4798      	blx	r3
}
    b812:	bd10      	pop	{r4, pc}
    b814:	0000c489 	.word	0x0000c489

0000b818 <stb_ccm_secure>:
		uint8_t *key,
		uint8_t hdr_len,
		uint8_t pld_len,
		uint8_t sec_level,
		uint8_t aes_dir)
{
    b818:	b5f0      	push	{r4, r5, r6, r7, lr}
    b81a:	46de      	mov	lr, fp
    b81c:	4657      	mov	r7, sl
    b81e:	464e      	mov	r6, r9
    b820:	4645      	mov	r5, r8
    b822:	b5e0      	push	{r5, r6, r7, lr}
    b824:	b08b      	sub	sp, #44	; 0x2c
    b826:	9003      	str	r0, [sp, #12]
    b828:	000d      	movs	r5, r1
    b82a:	0014      	movs	r4, r2
    b82c:	9304      	str	r3, [sp, #16]
    b82e:	ab14      	add	r3, sp, #80	; 0x50
    b830:	781e      	ldrb	r6, [r3, #0]
    b832:	ab15      	add	r3, sp, #84	; 0x54
    b834:	781f      	ldrb	r7, [r3, #0]
    b836:	ab16      	add	r3, sp, #88	; 0x58
    b838:	781b      	ldrb	r3, [r3, #0]
    b83a:	469a      	mov	sl, r3
	uint8_t nonce_0; /* nonce[0] for MIC computation. */
	uint8_t mic_len = 0;
	uint8_t enc_flag = ENCRYPTION_NOT_REQD;

	if (stb_restart_required) {
    b83c:	4b77      	ldr	r3, [pc, #476]	; (ba1c <stb_ccm_secure+0x204>)
    b83e:	781b      	ldrb	r3, [r3, #0]
    b840:	2b00      	cmp	r3, #0
    b842:	d007      	beq.n	b854 <stb_ccm_secure+0x3c>
#if (SAL_TYPE != ATXMEGA_SAL)
		prev_trx_status = tal_trx_status;
    b844:	2202      	movs	r2, #2
    b846:	4b76      	ldr	r3, [pc, #472]	; (ba20 <stb_ccm_secure+0x208>)
    b848:	701a      	strb	r2, [r3, #0]
		if (tal_trx_status == TRX_SLEEP) {
			PHY_Wakeup();
		}
#endif
		sal_aes_restart();
    b84a:	4b76      	ldr	r3, [pc, #472]	; (ba24 <stb_ccm_secure+0x20c>)
    b84c:	4798      	blx	r3
		stb_restart_required = false;
    b84e:	2200      	movs	r2, #0
    b850:	4b72      	ldr	r3, [pc, #456]	; (ba1c <stb_ccm_secure+0x204>)
    b852:	701a      	strb	r2, [r3, #0]
	}

	switch (sec_level) {
    b854:	2f07      	cmp	r7, #7
    b856:	d817      	bhi.n	b888 <stb_ccm_secure+0x70>
    b858:	00bb      	lsls	r3, r7, #2
    b85a:	4a73      	ldr	r2, [pc, #460]	; (ba28 <stb_ccm_secure+0x210>)
    b85c:	58d3      	ldr	r3, [r2, r3]
    b85e:	469f      	mov	pc, r3
	uint8_t enc_flag = ENCRYPTION_NOT_REQD;
    b860:	2300      	movs	r3, #0
    b862:	4698      	mov	r8, r3
		mic_len = LEN_MIC_32;
		break;

	case SECURITY_02_LEVEL:
		/* MIC-64 & No Encryption at Security Level -2 */
		mic_len = LEN_MIC_64;
    b864:	2708      	movs	r7, #8
    b866:	e0bb      	b.n	b9e0 <stb_ccm_secure+0x1c8>
		break;

	case SECURITY_04_LEVEL:
		/* No MIC & Encryption at Security Level -4 */
		mic_len = LEN_MIC_00;
		enc_flag = ENCRYPTION_REQD;
    b868:	2301      	movs	r3, #1
    b86a:	4698      	mov	r8, r3
		mic_len = LEN_MIC_00;
    b86c:	2700      	movs	r7, #0
		break;
    b86e:	e0b7      	b.n	b9e0 <stb_ccm_secure+0x1c8>

	case SECURITY_05_LEVEL:
		/* MIC-32 & Encryption at Security Level -5 */
		mic_len = LEN_MIC_32;
		enc_flag = ENCRYPTION_REQD;
    b870:	2301      	movs	r3, #1
    b872:	4698      	mov	r8, r3
		mic_len = LEN_MIC_32;
    b874:	2704      	movs	r7, #4
		break;
    b876:	e0b3      	b.n	b9e0 <stb_ccm_secure+0x1c8>

	case SECURITY_06_LEVEL:
		/* MIC-64 & Encryption at Security Level -6 */
		mic_len = LEN_MIC_64;
		enc_flag = ENCRYPTION_REQD;
    b878:	2301      	movs	r3, #1
    b87a:	4698      	mov	r8, r3
		mic_len = LEN_MIC_64;
    b87c:	2708      	movs	r7, #8
		break;
    b87e:	e0af      	b.n	b9e0 <stb_ccm_secure+0x1c8>

	case SECURITY_07_LEVEL:
		/* MIC-128 & Encryption at Security Level -7 */
		mic_len = LEN_MIC_128;
		enc_flag = ENCRYPTION_REQD;
    b880:	2301      	movs	r3, #1
    b882:	4698      	mov	r8, r3
		mic_len = LEN_MIC_128;
    b884:	2710      	movs	r7, #16
		break;
    b886:	e0ab      	b.n	b9e0 <stb_ccm_secure+0x1c8>
		break;
	}

	/* Test on correct parameters. */

	if ((sec_level & ~0x7) ||
    b888:	2307      	movs	r3, #7
    b88a:	439f      	bics	r7, r3
    b88c:	d000      	beq.n	b890 <stb_ccm_secure+0x78>
    b88e:	e0b5      	b.n	b9fc <stb_ccm_secure+0x1e4>
	uint8_t enc_flag = ENCRYPTION_NOT_REQD;
    b890:	46b8      	mov	r8, r7
    b892:	e0a5      	b.n	b9e0 <stb_ccm_secure+0x1c8>
			(nonce == NULL) ||
			((uint16_t)pld_len + (uint16_t)hdr_len +
			(uint16_t)mic_len > 127)
			) {
#if (SAL_TYPE != ATXMEGA_SAL)
		TRX_SLEEP();
    b894:	4b65      	ldr	r3, [pc, #404]	; (ba2c <stb_ccm_secure+0x214>)
    b896:	4798      	blx	r3
    b898:	e0b5      	b.n	ba06 <stb_ccm_secure+0x1ee>
		sal_aes_clean_up();
#endif
		return (STB_CCM_ILLPARM);
	}

	if (key_change && (key == NULL)) {
    b89a:	4b65      	ldr	r3, [pc, #404]	; (ba30 <stb_ccm_secure+0x218>)
    b89c:	781b      	ldrb	r3, [r3, #0]
    b89e:	2b00      	cmp	r3, #0
    b8a0:	d01a      	beq.n	b8d8 <stb_ccm_secure+0xc0>
    b8a2:	2c00      	cmp	r4, #0
    b8a4:	d00d      	beq.n	b8c2 <stb_ccm_secure+0xaa>
	if (key_change) {
		/*
		 * Key must be non-NULL because of test above, and
		 * ECB encryption is always the initial encryption mode.
		 */
		sal_aes_setup(key, AES_MODE_ECB, AES_DIR_ENCRYPT);
    b8a6:	2200      	movs	r2, #0
    b8a8:	2100      	movs	r1, #0
    b8aa:	0020      	movs	r0, r4
    b8ac:	4b61      	ldr	r3, [pc, #388]	; (ba34 <stb_ccm_secure+0x21c>)
    b8ae:	4798      	blx	r3
		memcpy(last_key, key, AES_KEYSIZE);
    b8b0:	2210      	movs	r2, #16
    b8b2:	0021      	movs	r1, r4
    b8b4:	4860      	ldr	r0, [pc, #384]	; (ba38 <stb_ccm_secure+0x220>)
    b8b6:	4b61      	ldr	r3, [pc, #388]	; (ba3c <stb_ccm_secure+0x224>)
    b8b8:	4798      	blx	r3
		key_change = false;
    b8ba:	2200      	movs	r2, #0
    b8bc:	4b5c      	ldr	r3, [pc, #368]	; (ba30 <stb_ccm_secure+0x218>)
    b8be:	701a      	strb	r2, [r3, #0]
    b8c0:	e01e      	b.n	b900 <stb_ccm_secure+0xe8>
		TRX_SLEEP();
    b8c2:	4b57      	ldr	r3, [pc, #348]	; (ba20 <stb_ccm_secure+0x208>)
    b8c4:	781b      	ldrb	r3, [r3, #0]
    b8c6:	2b01      	cmp	r3, #1
    b8c8:	d003      	beq.n	b8d2 <stb_ccm_secure+0xba>
		sal_aes_clean_up();
    b8ca:	4b5d      	ldr	r3, [pc, #372]	; (ba40 <stb_ccm_secure+0x228>)
    b8cc:	4798      	blx	r3
		return (STB_CCM_KEYMISS);
    b8ce:	2002      	movs	r0, #2
    b8d0:	e09c      	b.n	ba0c <stb_ccm_secure+0x1f4>
		TRX_SLEEP();
    b8d2:	4b56      	ldr	r3, [pc, #344]	; (ba2c <stb_ccm_secure+0x214>)
    b8d4:	4798      	blx	r3
    b8d6:	e7f8      	b.n	b8ca <stb_ccm_secure+0xb2>
	if (!key_change && key != NULL) { /* There was some previous key. */
    b8d8:	2c00      	cmp	r4, #0
    b8da:	d011      	beq.n	b900 <stb_ccm_secure+0xe8>
    b8dc:	220f      	movs	r2, #15
			key_change |= (last_key[i] ^ key[i]);
    b8de:	4956      	ldr	r1, [pc, #344]	; (ba38 <stb_ccm_secure+0x220>)
    b8e0:	0018      	movs	r0, r3
    b8e2:	46ac      	mov	ip, r5
    b8e4:	5c53      	ldrb	r3, [r2, r1]
    b8e6:	5ca5      	ldrb	r5, [r4, r2]
    b8e8:	406b      	eors	r3, r5
    b8ea:	4303      	orrs	r3, r0
    b8ec:	1e58      	subs	r0, r3, #1
    b8ee:	4183      	sbcs	r3, r0
    b8f0:	b2d8      	uxtb	r0, r3
		for (i = AES_BLOCKSIZE; i--; /* */) {
    b8f2:	3a01      	subs	r2, #1
    b8f4:	d2f6      	bcs.n	b8e4 <stb_ccm_secure+0xcc>
    b8f6:	4665      	mov	r5, ip
    b8f8:	4a4d      	ldr	r2, [pc, #308]	; (ba30 <stb_ccm_secure+0x218>)
    b8fa:	7010      	strb	r0, [r2, #0]
	if (key_change) {
    b8fc:	2800      	cmp	r0, #0
    b8fe:	d1d2      	bne.n	b8a6 <stb_ccm_secure+0x8e>
	}

	/* Prepare nonce. */
	nonce[0] = LEN_FIELD; /* Always 2 bytes for length field. */

	if (mic_len > 0) {
    b900:	2f00      	cmp	r7, #0
    b902:	d129      	bne.n	b958 <stb_ccm_secure+0x140>
	nonce[0] = LEN_FIELD; /* Always 2 bytes for length field. */
    b904:	2301      	movs	r3, #1
    b906:	702b      	strb	r3, [r5, #0]
		nonce[0] |= (uint8_t)(((mic_len - 2) >> 1) << 3);
	}

	if (hdr_len) {
    b908:	9b04      	ldr	r3, [sp, #16]
    b90a:	2b00      	cmp	r3, #0
    b90c:	d003      	beq.n	b916 <stb_ccm_secure+0xfe>
		nonce[0] |= ADATA;
    b90e:	782b      	ldrb	r3, [r5, #0]
    b910:	2240      	movs	r2, #64	; 0x40
    b912:	4313      	orrs	r3, r2
    b914:	702b      	strb	r3, [r5, #0]
	}

	nonce_0 = nonce[0];
    b916:	782b      	ldrb	r3, [r5, #0]
    b918:	4699      	mov	r9, r3
	nonce[AES_BLOCKSIZE - 2] = 0;
    b91a:	2300      	movs	r3, #0
    b91c:	73ab      	strb	r3, [r5, #14]

	if (aes_dir == AES_DIR_ENCRYPT) {
    b91e:	4653      	mov	r3, sl
    b920:	2b00      	cmp	r3, #0
    b922:	d12a      	bne.n	b97a <stb_ccm_secure+0x162>
		/* Authenticate. */
		if (mic_len > 0) {
    b924:	2f00      	cmp	r7, #0
    b926:	d003      	beq.n	b930 <stb_ccm_secure+0x118>
			nonce[AES_BLOCKSIZE - 1] = pld_len;
    b928:	73ee      	strb	r6, [r5, #15]

			if (ENCRYPTION_REQD == enc_flag) {
    b92a:	4643      	mov	r3, r8
    b92c:	2b01      	cmp	r3, #1
    b92e:	d01a      	beq.n	b966 <stb_ccm_secure+0x14e>
						hdr_len,
						pld_len);
			}
		}

		nonce[0] = PLAINTEXT_FLAG;
    b930:	2301      	movs	r3, #1
    b932:	702b      	strb	r3, [r5, #0]
		encrypt_pldmic(buffer + hdr_len, nonce, mic_len,
    b934:	9b03      	ldr	r3, [sp, #12]
    b936:	9a04      	ldr	r2, [sp, #16]
    b938:	4694      	mov	ip, r2
    b93a:	4463      	add	r3, ip
    b93c:	0018      	movs	r0, r3
    b93e:	0033      	movs	r3, r6
    b940:	003a      	movs	r2, r7
    b942:	0029      	movs	r1, r5
    b944:	4c3f      	ldr	r4, [pc, #252]	; (ba44 <stb_ccm_secure+0x22c>)
    b946:	47a0      	blx	r4
			}
		}
	}

#if (SAL_TYPE != ATXMEGA_SAL)
	TRX_SLEEP();
    b948:	4b35      	ldr	r3, [pc, #212]	; (ba20 <stb_ccm_secure+0x208>)
    b94a:	781b      	ldrb	r3, [r3, #0]
    b94c:	2b01      	cmp	r3, #1
    b94e:	d03d      	beq.n	b9cc <stb_ccm_secure+0x1b4>
	sal_aes_clean_up();
    b950:	4b3b      	ldr	r3, [pc, #236]	; (ba40 <stb_ccm_secure+0x228>)
    b952:	4798      	blx	r3
#endif
	return (STB_CCM_OK);
    b954:	2000      	movs	r0, #0
    b956:	e059      	b.n	ba0c <stb_ccm_secure+0x1f4>
		nonce[0] |= (uint8_t)(((mic_len - 2) >> 1) << 3);
    b958:	9b05      	ldr	r3, [sp, #20]
    b95a:	3b02      	subs	r3, #2
    b95c:	009b      	lsls	r3, r3, #2
    b95e:	2201      	movs	r2, #1
    b960:	4313      	orrs	r3, r2
    b962:	702b      	strb	r3, [r5, #0]
    b964:	e7d0      	b.n	b908 <stb_ccm_secure+0xf0>
						buffer + hdr_len + pld_len,
    b966:	9b04      	ldr	r3, [sp, #16]
    b968:	1999      	adds	r1, r3, r6
				compute_mic(buffer,
    b96a:	9803      	ldr	r0, [sp, #12]
    b96c:	4684      	mov	ip, r0
    b96e:	4461      	add	r1, ip
    b970:	9600      	str	r6, [sp, #0]
    b972:	002a      	movs	r2, r5
    b974:	4c34      	ldr	r4, [pc, #208]	; (ba48 <stb_ccm_secure+0x230>)
    b976:	47a0      	blx	r4
    b978:	e7da      	b.n	b930 <stb_ccm_secure+0x118>
		if (enc_flag == ENCRYPTION_REQD) {
    b97a:	4643      	mov	r3, r8
    b97c:	2b01      	cmp	r3, #1
    b97e:	d00d      	beq.n	b99c <stb_ccm_secure+0x184>
		if (mic_len > 0) {
    b980:	2f00      	cmp	r7, #0
    b982:	d0e1      	beq.n	b948 <stb_ccm_secure+0x130>
			nonce[AES_BLOCKSIZE - 1] = pld_len;
    b984:	73ee      	strb	r6, [r5, #15]
			buffer += hdr_len + pld_len;
    b986:	9b03      	ldr	r3, [sp, #12]
    b988:	445b      	add	r3, fp
    b98a:	0018      	movs	r0, r3
			if (memcmp(buffer, rcvd_mic, mic_len)) {
    b98c:	003a      	movs	r2, r7
    b98e:	a906      	add	r1, sp, #24
    b990:	4b2e      	ldr	r3, [pc, #184]	; (ba4c <stb_ccm_secure+0x234>)
    b992:	4798      	blx	r3
    b994:	2800      	cmp	r0, #0
    b996:	d0d7      	beq.n	b948 <stb_ccm_secure+0x130>
				return STB_CCM_MICERR;
    b998:	2003      	movs	r0, #3
    b99a:	e037      	b.n	ba0c <stb_ccm_secure+0x1f4>
			nonce[0] = PLAINTEXT_FLAG;
    b99c:	702b      	strb	r3, [r5, #0]
			encrypt_pldmic(buffer + hdr_len, nonce, mic_len,
    b99e:	9b03      	ldr	r3, [sp, #12]
    b9a0:	9a04      	ldr	r2, [sp, #16]
    b9a2:	4694      	mov	ip, r2
    b9a4:	4463      	add	r3, ip
    b9a6:	0018      	movs	r0, r3
    b9a8:	0033      	movs	r3, r6
    b9aa:	003a      	movs	r2, r7
    b9ac:	0029      	movs	r1, r5
    b9ae:	4c25      	ldr	r4, [pc, #148]	; (ba44 <stb_ccm_secure+0x22c>)
    b9b0:	47a0      	blx	r4
		if (mic_len > 0) {
    b9b2:	2f00      	cmp	r7, #0
    b9b4:	d0c8      	beq.n	b948 <stb_ccm_secure+0x130>
			nonce[0] = nonce_0;
    b9b6:	464b      	mov	r3, r9
    b9b8:	702b      	strb	r3, [r5, #0]
			nonce[AES_BLOCKSIZE - 1] = pld_len;
    b9ba:	73ee      	strb	r6, [r5, #15]
				compute_mic(buffer,
    b9bc:	9600      	str	r6, [sp, #0]
    b9be:	9b04      	ldr	r3, [sp, #16]
    b9c0:	002a      	movs	r2, r5
    b9c2:	a906      	add	r1, sp, #24
    b9c4:	9803      	ldr	r0, [sp, #12]
    b9c6:	4c20      	ldr	r4, [pc, #128]	; (ba48 <stb_ccm_secure+0x230>)
    b9c8:	47a0      	blx	r4
    b9ca:	e7dc      	b.n	b986 <stb_ccm_secure+0x16e>
	TRX_SLEEP();
    b9cc:	4b17      	ldr	r3, [pc, #92]	; (ba2c <stb_ccm_secure+0x214>)
    b9ce:	4798      	blx	r3
    b9d0:	e7be      	b.n	b950 <stb_ccm_secure+0x138>
	uint8_t enc_flag = ENCRYPTION_NOT_REQD;
    b9d2:	2300      	movs	r3, #0
    b9d4:	4698      	mov	r8, r3
		mic_len = LEN_MIC_32;
    b9d6:	2704      	movs	r7, #4
    b9d8:	e002      	b.n	b9e0 <stb_ccm_secure+0x1c8>
	uint8_t enc_flag = ENCRYPTION_NOT_REQD;
    b9da:	2300      	movs	r3, #0
    b9dc:	4698      	mov	r8, r3
		mic_len = LEN_MIC_128;
    b9de:	2710      	movs	r7, #16
	if ((sec_level & ~0x7) ||
    b9e0:	9b03      	ldr	r3, [sp, #12]
    b9e2:	2b00      	cmp	r3, #0
    b9e4:	d00a      	beq.n	b9fc <stb_ccm_secure+0x1e4>
			(buffer == NULL) ||
    b9e6:	2d00      	cmp	r5, #0
    b9e8:	d008      	beq.n	b9fc <stb_ccm_secure+0x1e4>
			((uint16_t)pld_len + (uint16_t)hdr_len +
    b9ea:	9b04      	ldr	r3, [sp, #16]
    b9ec:	469b      	mov	fp, r3
    b9ee:	44b3      	add	fp, r6
			(uint16_t)mic_len > 127)
    b9f0:	9705      	str	r7, [sp, #20]
			((uint16_t)pld_len + (uint16_t)hdr_len +
    b9f2:	465b      	mov	r3, fp
    b9f4:	19db      	adds	r3, r3, r7
			(nonce == NULL) ||
    b9f6:	2b7f      	cmp	r3, #127	; 0x7f
    b9f8:	dc00      	bgt.n	b9fc <stb_ccm_secure+0x1e4>
    b9fa:	e74e      	b.n	b89a <stb_ccm_secure+0x82>
		TRX_SLEEP();
    b9fc:	4b08      	ldr	r3, [pc, #32]	; (ba20 <stb_ccm_secure+0x208>)
    b9fe:	781b      	ldrb	r3, [r3, #0]
    ba00:	2b01      	cmp	r3, #1
    ba02:	d100      	bne.n	ba06 <stb_ccm_secure+0x1ee>
    ba04:	e746      	b.n	b894 <stb_ccm_secure+0x7c>
		sal_aes_clean_up();
    ba06:	4b0e      	ldr	r3, [pc, #56]	; (ba40 <stb_ccm_secure+0x228>)
    ba08:	4798      	blx	r3
		return (STB_CCM_ILLPARM);
    ba0a:	2001      	movs	r0, #1
}
    ba0c:	b00b      	add	sp, #44	; 0x2c
    ba0e:	bc3c      	pop	{r2, r3, r4, r5}
    ba10:	4690      	mov	r8, r2
    ba12:	4699      	mov	r9, r3
    ba14:	46a2      	mov	sl, r4
    ba16:	46ab      	mov	fp, r5
    ba18:	bdf0      	pop	{r4, r5, r6, r7, pc}
    ba1a:	46c0      	nop			; (mov r8, r8)
    ba1c:	20000481 	.word	0x20000481
    ba20:	20000480 	.word	0x20000480
    ba24:	0000c48d 	.word	0x0000c48d
    ba28:	000166fc 	.word	0x000166fc
    ba2c:	0000b635 	.word	0x0000b635
    ba30:	20000088 	.word	0x20000088
    ba34:	0000c54d 	.word	0x0000c54d
    ba38:	20000470 	.word	0x20000470
    ba3c:	00014d37 	.word	0x00014d37
    ba40:	0000c4dd 	.word	0x0000c4dd
    ba44:	0000bb41 	.word	0x0000bb41
    ba48:	0000bab5 	.word	0x0000bab5
    ba4c:	00014d19 	.word	0x00014d19

0000ba50 <encrypt_with_padding>:
 *
 * @param start Pointer to start address
 * @param buflen Number of bytes to be encrypted; if 0, nothing happens
 */
void encrypt_with_padding(uint8_t *start, uint8_t buflen)
{
    ba50:	b5f0      	push	{r4, r5, r6, r7, lr}
    ba52:	b085      	sub	sp, #20
    ba54:	0004      	movs	r4, r0
    ba56:	000e      	movs	r6, r1
	/* Encrypt the "full blocks". */
	while (buflen >= AES_BLOCKSIZE) {
    ba58:	290f      	cmp	r1, #15
    ba5a:	d90f      	bls.n	ba7c <encrypt_with_padding+0x2c>
    ba5c:	000d      	movs	r5, r1
    ba5e:	3d10      	subs	r5, #16
    ba60:	b2ed      	uxtb	r5, r5
    ba62:	092d      	lsrs	r5, r5, #4
    ba64:	3501      	adds	r5, #1
    ba66:	012d      	lsls	r5, r5, #4
    ba68:	1945      	adds	r5, r0, r5
#if (SAL_TYPE == AT86RF2xx)
		sal_aes_wrrd(start, NULL);
    ba6a:	4f0f      	ldr	r7, [pc, #60]	; (baa8 <encrypt_with_padding+0x58>)
    ba6c:	2100      	movs	r1, #0
    ba6e:	0020      	movs	r0, r4
    ba70:	47b8      	blx	r7
#else
		sal_aes_exec(start);
#endif
		start += AES_BLOCKSIZE;
    ba72:	3410      	adds	r4, #16
	while (buflen >= AES_BLOCKSIZE) {
    ba74:	42ac      	cmp	r4, r5
    ba76:	d1f9      	bne.n	ba6c <encrypt_with_padding+0x1c>
    ba78:	230f      	movs	r3, #15
    ba7a:	401e      	ands	r6, r3
		buflen -= AES_BLOCKSIZE;
	}

	/* Pad the possible rest and encrypt it. */
	if (buflen) {
    ba7c:	2e00      	cmp	r6, #0
    ba7e:	d101      	bne.n	ba84 <encrypt_with_padding+0x34>
		sal_aes_wrrd(locbuf, NULL);
#else
		sal_aes_exec(locbuf);
#endif
	}
}
    ba80:	b005      	add	sp, #20
    ba82:	bdf0      	pop	{r4, r5, r6, r7, pc}
		memcpy(locbuf, start, buflen);
    ba84:	0032      	movs	r2, r6
    ba86:	0021      	movs	r1, r4
    ba88:	4668      	mov	r0, sp
    ba8a:	4b08      	ldr	r3, [pc, #32]	; (baac <encrypt_with_padding+0x5c>)
    ba8c:	4798      	blx	r3
		memset(locbuf + buflen, 0, AES_BLOCKSIZE - buflen);
    ba8e:	2210      	movs	r2, #16
    ba90:	1b92      	subs	r2, r2, r6
    ba92:	0030      	movs	r0, r6
    ba94:	4468      	add	r0, sp
    ba96:	2100      	movs	r1, #0
    ba98:	4b05      	ldr	r3, [pc, #20]	; (bab0 <encrypt_with_padding+0x60>)
    ba9a:	4798      	blx	r3
		sal_aes_wrrd(locbuf, NULL);
    ba9c:	2100      	movs	r1, #0
    ba9e:	4668      	mov	r0, sp
    baa0:	4b01      	ldr	r3, [pc, #4]	; (baa8 <encrypt_with_padding+0x58>)
    baa2:	4798      	blx	r3
}
    baa4:	e7ec      	b.n	ba80 <encrypt_with_padding+0x30>
    baa6:	46c0      	nop			; (mov r8, r8)
    baa8:	0000c4e1 	.word	0x0000c4e1
    baac:	00014d37 	.word	0x00014d37
    bab0:	00014d49 	.word	0x00014d49

0000bab4 <compute_mic>:
void compute_mic(uint8_t *buffer,
		uint8_t *mic,
		uint8_t *nonce,
		uint8_t hdr_len,
		uint8_t pld_len)
{
    bab4:	b5f0      	push	{r4, r5, r6, r7, lr}
    bab6:	b087      	sub	sp, #28
    bab8:	0005      	movs	r5, r0
    baba:	9100      	str	r1, [sp, #0]
    babc:	9201      	str	r2, [sp, #4]
    babe:	001c      	movs	r4, r3
    bac0:	ab0c      	add	r3, sp, #48	; 0x30
    bac2:	781e      	ldrb	r6, [r3, #0]
	sal_aes_setup(NULL, AES_MODE_ECB, AES_DIR_ENCRYPT);
    bac4:	2200      	movs	r2, #0
    bac6:	2100      	movs	r1, #0
    bac8:	2000      	movs	r0, #0
    baca:	4f18      	ldr	r7, [pc, #96]	; (bb2c <compute_mic+0x78>)
    bacc:	47b8      	blx	r7
#if (SAL_TYPE == AT86RF2xx)
	sal_aes_wrrd(nonce, NULL);
    bace:	2100      	movs	r1, #0
    bad0:	9801      	ldr	r0, [sp, #4]
    bad2:	4b17      	ldr	r3, [pc, #92]	; (bb30 <compute_mic+0x7c>)
    bad4:	4798      	blx	r3
#else
	sal_aes_exec(nonce);
#endif
	sal_aes_setup(NULL, AES_MODE_CBC, AES_DIR_ENCRYPT);
    bad6:	2200      	movs	r2, #0
    bad8:	2102      	movs	r1, #2
    bada:	2000      	movs	r0, #0
    badc:	47b8      	blx	r7

	if (hdr_len) {
    bade:	2c00      	cmp	r4, #0
    bae0:	d108      	bne.n	baf4 <compute_mic+0x40>
			encrypt_with_padding(buffer + firstlen,
					hdr_len - firstlen);
		}
	}

	encrypt_with_padding(buffer + hdr_len, pld_len);
    bae2:	1928      	adds	r0, r5, r4
    bae4:	0031      	movs	r1, r6
    bae6:	4b13      	ldr	r3, [pc, #76]	; (bb34 <compute_mic+0x80>)
    bae8:	4798      	blx	r3

	sal_aes_read(mic);
    baea:	9800      	ldr	r0, [sp, #0]
    baec:	4b12      	ldr	r3, [pc, #72]	; (bb38 <compute_mic+0x84>)
    baee:	4798      	blx	r3
}
    baf0:	b007      	add	sp, #28
    baf2:	bdf0      	pop	{r4, r5, r6, r7, pc}
		firstlen = MIN(AES_BLOCKSIZE - 2, hdr_len);
    baf4:	1c27      	adds	r7, r4, #0
    baf6:	2c0e      	cmp	r4, #14
    baf8:	d900      	bls.n	bafc <compute_mic+0x48>
    bafa:	270e      	movs	r7, #14
    bafc:	b2ff      	uxtb	r7, r7
		locbuf[0] = 0;
    bafe:	2300      	movs	r3, #0
    bb00:	aa02      	add	r2, sp, #8
    bb02:	7013      	strb	r3, [r2, #0]
		locbuf[1] = hdr_len;
    bb04:	0013      	movs	r3, r2
    bb06:	7054      	strb	r4, [r2, #1]
		memcpy(locbuf + 2, buffer, firstlen);
    bb08:	003a      	movs	r2, r7
    bb0a:	0029      	movs	r1, r5
    bb0c:	1c98      	adds	r0, r3, #2
    bb0e:	4b0b      	ldr	r3, [pc, #44]	; (bb3c <compute_mic+0x88>)
    bb10:	4798      	blx	r3
		encrypt_with_padding(locbuf, firstlen + 2);
    bb12:	1cb9      	adds	r1, r7, #2
    bb14:	b2c9      	uxtb	r1, r1
    bb16:	a802      	add	r0, sp, #8
    bb18:	4b06      	ldr	r3, [pc, #24]	; (bb34 <compute_mic+0x80>)
    bb1a:	4798      	blx	r3
		if (firstlen < hdr_len) {
    bb1c:	42bc      	cmp	r4, r7
    bb1e:	d9e0      	bls.n	bae2 <compute_mic+0x2e>
			encrypt_with_padding(buffer + firstlen,
    bb20:	1be1      	subs	r1, r4, r7
    bb22:	b2c9      	uxtb	r1, r1
    bb24:	19e8      	adds	r0, r5, r7
    bb26:	4b03      	ldr	r3, [pc, #12]	; (bb34 <compute_mic+0x80>)
    bb28:	4798      	blx	r3
    bb2a:	e7da      	b.n	bae2 <compute_mic+0x2e>
    bb2c:	0000c54d 	.word	0x0000c54d
    bb30:	0000c4e1 	.word	0x0000c4e1
    bb34:	0000ba51 	.word	0x0000ba51
    bb38:	0000c685 	.word	0x0000c685
    bb3c:	00014d37 	.word	0x00014d37

0000bb40 <encrypt_pldmic>:
 */
void encrypt_pldmic(uint8_t *buffer,
		uint8_t *nonce,
		uint8_t mic_len,
		uint8_t pld_len)
{
    bb40:	b5f0      	push	{r4, r5, r6, r7, lr}
    bb42:	46d6      	mov	lr, sl
    bb44:	464f      	mov	r7, r9
    bb46:	4646      	mov	r6, r8
    bb48:	b5c0      	push	{r6, r7, lr}
    bb4a:	b084      	sub	sp, #16
    bb4c:	0004      	movs	r4, r0
    bb4e:	000f      	movs	r7, r1
    bb50:	0016      	movs	r6, r2
    bb52:	001d      	movs	r5, r3
	uint8_t ctr;
	uint8_t i;
	uint8_t keystream[AES_BLOCKSIZE];
	uint8_t *keystreamptr;

	sal_aes_setup(NULL, AES_MODE_ECB, AES_DIR_ENCRYPT);
    bb54:	2200      	movs	r2, #0
    bb56:	2100      	movs	r1, #0
    bb58:	2000      	movs	r0, #0
    bb5a:	4b31      	ldr	r3, [pc, #196]	; (bc20 <encrypt_pldmic+0xe0>)
    bb5c:	4798      	blx	r3

	/* Init first keystream block. */
	nonce[AES_BLOCKSIZE - 1] = ctr = 1;
    bb5e:	2301      	movs	r3, #1
    bb60:	73fb      	strb	r3, [r7, #15]

	if (pld_len > 0) {
    bb62:	2d00      	cmp	r5, #0
    bb64:	d106      	bne.n	bb74 <encrypt_pldmic+0x34>
{
    bb66:	2301      	movs	r3, #1
    bb68:	469a      	mov	sl, r3
				/* Prepare the keystream for MIC. */
				nonce[AES_BLOCKSIZE - 1] = 0;

				sal_aes_wrrd(nonce, keystream);
			} else {
				sal_aes_read(keystream);
    bb6a:	4b2e      	ldr	r3, [pc, #184]	; (bc24 <encrypt_pldmic+0xe4>)
    bb6c:	4699      	mov	r9, r3
				sal_aes_wrrd(nonce, keystream);
    bb6e:	4b2e      	ldr	r3, [pc, #184]	; (bc28 <encrypt_pldmic+0xe8>)
    bb70:	4698      	mov	r8, r3
    bb72:	e02e      	b.n	bbd2 <encrypt_pldmic+0x92>
		sal_aes_wrrd(nonce, NULL);
    bb74:	2100      	movs	r1, #0
    bb76:	0038      	movs	r0, r7
    bb78:	4b2b      	ldr	r3, [pc, #172]	; (bc28 <encrypt_pldmic+0xe8>)
    bb7a:	4798      	blx	r3
    bb7c:	e7f3      	b.n	bb66 <encrypt_pldmic+0x26>
				sal_aes_read(keystream);
    bb7e:	4668      	mov	r0, sp
    bb80:	47c8      	blx	r9
    bb82:	e02f      	b.n	bbe4 <encrypt_pldmic+0xa4>
			}
		} else {
			/* Prepare the next keystream block. */
			nonce[AES_BLOCKSIZE - 1] = ++ctr;
    bb84:	4653      	mov	r3, sl
    bb86:	3301      	adds	r3, #1
    bb88:	b2db      	uxtb	r3, r3
    bb8a:	469a      	mov	sl, r3
    bb8c:	73fb      	strb	r3, [r7, #15]

			sal_aes_wrrd(nonce, keystream);
    bb8e:	4669      	mov	r1, sp
    bb90:	0038      	movs	r0, r7
    bb92:	4b25      	ldr	r3, [pc, #148]	; (bc28 <encrypt_pldmic+0xe8>)
    bb94:	4798      	blx	r3
		}

		/* En/decrypt payload. */

		for (i = MIN(pld_len, AES_BLOCKSIZE), keystreamptr = keystream;
    bb96:	1c2b      	adds	r3, r5, #0
    bb98:	2d10      	cmp	r5, #16
    bb9a:	d900      	bls.n	bb9e <encrypt_pldmic+0x5e>
    bb9c:	2310      	movs	r3, #16
    bb9e:	b2db      	uxtb	r3, r3
				i--;
    bba0:	1e58      	subs	r0, r3, #1
    bba2:	b2c0      	uxtb	r0, r0
		for (i = MIN(pld_len, AES_BLOCKSIZE), keystreamptr = keystream;
    bba4:	2b00      	cmp	r3, #0
    bba6:	d105      	bne.n	bbb4 <encrypt_pldmic+0x74>
    bba8:	e011      	b.n	bbce <encrypt_pldmic+0x8e>
    bbaa:	b2db      	uxtb	r3, r3
				i--;
    bbac:	1e58      	subs	r0, r3, #1
    bbae:	b2c0      	uxtb	r0, r0
		for (i = MIN(pld_len, AES_BLOCKSIZE), keystreamptr = keystream;
    bbb0:	2b00      	cmp	r3, #0
    bbb2:	d01c      	beq.n	bbee <encrypt_pldmic+0xae>
    bbb4:	3001      	adds	r0, #1
{
    bbb6:	2300      	movs	r3, #0
		                /* */) {
			*buffer++ ^= *keystreamptr++;
    bbb8:	466a      	mov	r2, sp
    bbba:	5c9a      	ldrb	r2, [r3, r2]
    bbbc:	5ce1      	ldrb	r1, [r4, r3]
    bbbe:	404a      	eors	r2, r1
    bbc0:	54e2      	strb	r2, [r4, r3]
    bbc2:	3301      	adds	r3, #1
		for (i = MIN(pld_len, AES_BLOCKSIZE), keystreamptr = keystream;
    bbc4:	4298      	cmp	r0, r3
    bbc6:	d1f7      	bne.n	bbb8 <encrypt_pldmic+0x78>
    bbc8:	18e4      	adds	r4, r4, r3
		}

		if (pld_len <= AES_BLOCKSIZE) {
    bbca:	2d10      	cmp	r5, #16
    bbcc:	d90f      	bls.n	bbee <encrypt_pldmic+0xae>
			break;
		}

		pld_len -= AES_BLOCKSIZE;
    bbce:	3d10      	subs	r5, #16
    bbd0:	b2ed      	uxtb	r5, r5
		if (pld_len <= AES_BLOCKSIZE) { /* Last block */
    bbd2:	2d10      	cmp	r5, #16
    bbd4:	d8d6      	bhi.n	bb84 <encrypt_pldmic+0x44>
			if (mic_len) {
    bbd6:	2e00      	cmp	r6, #0
    bbd8:	d0d1      	beq.n	bb7e <encrypt_pldmic+0x3e>
				nonce[AES_BLOCKSIZE - 1] = 0;
    bbda:	2300      	movs	r3, #0
    bbdc:	73fb      	strb	r3, [r7, #15]
				sal_aes_wrrd(nonce, keystream);
    bbde:	4669      	mov	r1, sp
    bbe0:	0038      	movs	r0, r7
    bbe2:	47c0      	blx	r8
		for (i = MIN(pld_len, AES_BLOCKSIZE), keystreamptr = keystream;
    bbe4:	1c2b      	adds	r3, r5, #0
    bbe6:	2d10      	cmp	r5, #16
    bbe8:	d9df      	bls.n	bbaa <encrypt_pldmic+0x6a>
    bbea:	2310      	movs	r3, #16
    bbec:	e7dd      	b.n	bbaa <encrypt_pldmic+0x6a>
	}

	/* En/decrypt MIC. */

	if (mic_len) {
    bbee:	2e00      	cmp	r6, #0
    bbf0:	d105      	bne.n	bbfe <encrypt_pldmic+0xbe>

		for (i = mic_len, keystreamptr = keystream; i--; /* */) {
			*buffer++ ^= *keystreamptr++;
		}
	}
}
    bbf2:	b004      	add	sp, #16
    bbf4:	bc1c      	pop	{r2, r3, r4}
    bbf6:	4690      	mov	r8, r2
    bbf8:	4699      	mov	r9, r3
    bbfa:	46a2      	mov	sl, r4
    bbfc:	bdf0      	pop	{r4, r5, r6, r7, pc}
		sal_aes_read(keystream);
    bbfe:	4668      	mov	r0, sp
    bc00:	4b08      	ldr	r3, [pc, #32]	; (bc24 <encrypt_pldmic+0xe4>)
    bc02:	4798      	blx	r3
		for (i = mic_len, keystreamptr = keystream; i--; /* */) {
    bc04:	3e01      	subs	r6, #1
    bc06:	b2f2      	uxtb	r2, r6
    bc08:	3201      	adds	r2, #1
    bc0a:	2300      	movs	r3, #0
			*buffer++ ^= *keystreamptr++;
    bc0c:	4669      	mov	r1, sp
    bc0e:	5c59      	ldrb	r1, [r3, r1]
    bc10:	5ce0      	ldrb	r0, [r4, r3]
    bc12:	4041      	eors	r1, r0
    bc14:	54e1      	strb	r1, [r4, r3]
    bc16:	3301      	adds	r3, #1
		for (i = mic_len, keystreamptr = keystream; i--; /* */) {
    bc18:	4293      	cmp	r3, r2
    bc1a:	d1f7      	bne.n	bc0c <encrypt_pldmic+0xcc>
    bc1c:	e7e9      	b.n	bbf2 <encrypt_pldmic+0xb2>
    bc1e:	46c0      	nop			; (mov r8, r8)
    bc20:	0000c54d 	.word	0x0000c54d
    bc24:	0000c685 	.word	0x0000c685
    bc28:	0000c4e1 	.word	0x0000c4e1

0000bc2c <MiMem_Init>:
* Output:		    none
*
* Overview:		    This function will initialize the Mimem buffers
********************************************************************/
void MiMem_Init(void)
{
    bc2c:	b510      	push	{r4, lr}
	size_t startAddress =  ALIGN((size_t)heapMem);
    bc2e:	4a0b      	ldr	r2, [pc, #44]	; (bc5c <MiMem_Init+0x30>)
    bc30:	1e50      	subs	r0, r2, #1
    bc32:	2403      	movs	r4, #3
    bc34:	43a0      	bics	r0, r4
    bc36:	1d01      	adds	r1, r0, #4

	/*Aligned heap is the base */
	base = (Block_t*) startAddress;
    bc38:	4b09      	ldr	r3, [pc, #36]	; (bc60 <MiMem_Init+0x34>)
    bc3a:	6019      	str	r1, [r3, #0]
	base->size = totalFreeBytesRemaining = HEAP_SIZE - (startAddress - (size_t)heapMem);
    bc3c:	4253      	negs	r3, r2
    bc3e:	43a3      	bics	r3, r4
    bc40:	24c0      	movs	r4, #192	; 0xc0
    bc42:	0164      	lsls	r4, r4, #5
    bc44:	46a4      	mov	ip, r4
    bc46:	4462      	add	r2, ip
    bc48:	189b      	adds	r3, r3, r2
    bc4a:	4a06      	ldr	r2, [pc, #24]	; (bc64 <MiMem_Init+0x38>)
    bc4c:	6013      	str	r3, [r2, #0]
    bc4e:	60c3      	str	r3, [r0, #12]
	base->free = true;
    bc50:	2301      	movs	r3, #1
    bc52:	7403      	strb	r3, [r0, #16]
	base->next = NULL;
    bc54:	2300      	movs	r3, #0
    bc56:	6043      	str	r3, [r0, #4]
	base->prev = NULL;
    bc58:	6083      	str	r3, [r0, #8]
}
    bc5a:	bd10      	pop	{r4, pc}
    bc5c:	20000488 	.word	0x20000488
    bc60:	20000484 	.word	0x20000484
    bc64:	20001c88 	.word	0x20001c88

0000bc68 <MiMem_Alloc>:
*  or returns NULL if no memory available
*
* Note:			    none
********************************************************************/
void* MiMem_Alloc(uint8_t size)
{
    bc68:	b570      	push	{r4, r5, r6, lr}
    bc6a:	0005      	movs	r5, r0
	size_t requestedSize = 0U;
	void* requestedMemPtr = NULL;

	/* Initialize the Heap */
	if (!base)
    bc6c:	4b29      	ldr	r3, [pc, #164]	; (bd14 <MiMem_Alloc+0xac>)
    bc6e:	681b      	ldr	r3, [r3, #0]
    bc70:	2b00      	cmp	r3, #0
    bc72:	d012      	beq.n	bc9a <MiMem_Alloc+0x32>
	{
		MiMem_Init();
	}
	/* if requested size is of non zero */
	if (size)
    bc74:	2d00      	cmp	r5, #0
    bc76:	d047      	beq.n	bd08 <MiMem_Alloc+0xa0>
	{
		requestedSize =  size + blockMetaDataSize;
		requestedSize = ALIGN(requestedSize);
    bc78:	0029      	movs	r1, r5
    bc7a:	310f      	adds	r1, #15
    bc7c:	2303      	movs	r3, #3
    bc7e:	4399      	bics	r1, r3
    bc80:	3104      	adds	r1, #4
		if (requestedSize <= totalFreeBytesRemaining)
    bc82:	4b25      	ldr	r3, [pc, #148]	; (bd18 <MiMem_Alloc+0xb0>)
    bc84:	6818      	ldr	r0, [r3, #0]
    bc86:	4281      	cmp	r1, r0
    bc88:	d840      	bhi.n	bd0c <MiMem_Alloc+0xa4>
		{
			size_t receivedSize = (size_t)~0U;
			Block_t *requestedBlock = NULL;
			Block_t *blockPtr = base;
    bc8a:	4b22      	ldr	r3, [pc, #136]	; (bd14 <MiMem_Alloc+0xac>)
    bc8c:	681b      	ldr	r3, [r3, #0]

			/* Find best fit free Block */
			while (blockPtr)
    bc8e:	2b00      	cmp	r3, #0
    bc90:	d03e      	beq.n	bd10 <MiMem_Alloc+0xa8>
    bc92:	2600      	movs	r6, #0
    bc94:	2401      	movs	r4, #1
    bc96:	4264      	negs	r4, r4
    bc98:	e005      	b.n	bca6 <MiMem_Alloc+0x3e>
		MiMem_Init();
    bc9a:	4b20      	ldr	r3, [pc, #128]	; (bd1c <MiMem_Alloc+0xb4>)
    bc9c:	4798      	blx	r3
    bc9e:	e7e9      	b.n	bc74 <MiMem_Alloc+0xc>
				if ((blockPtr->free) && (blockPtr->size >= requestedSize) && (blockPtr->size < receivedSize))
				{
					receivedSize = blockPtr->size;
					requestedBlock = blockPtr;
				}
				blockPtr = blockPtr->next;
    bca0:	681b      	ldr	r3, [r3, #0]
			while (blockPtr)
    bca2:	2b00      	cmp	r3, #0
    bca4:	d00a      	beq.n	bcbc <MiMem_Alloc+0x54>
				if ((blockPtr->free) && (blockPtr->size >= requestedSize) && (blockPtr->size < receivedSize))
    bca6:	7b1a      	ldrb	r2, [r3, #12]
    bca8:	2a00      	cmp	r2, #0
    bcaa:	d0f9      	beq.n	bca0 <MiMem_Alloc+0x38>
    bcac:	689a      	ldr	r2, [r3, #8]
    bcae:	4291      	cmp	r1, r2
    bcb0:	d8f6      	bhi.n	bca0 <MiMem_Alloc+0x38>
    bcb2:	42a2      	cmp	r2, r4
    bcb4:	d2f4      	bcs.n	bca0 <MiMem_Alloc+0x38>
    bcb6:	001e      	movs	r6, r3
					receivedSize = blockPtr->size;
    bcb8:	0014      	movs	r4, r2
    bcba:	e7f1      	b.n	bca0 <MiMem_Alloc+0x38>
    bcbc:	2400      	movs	r4, #0
			}

			if (requestedBlock)
    bcbe:	2e00      	cmp	r6, #0
    bcc0:	d012      	beq.n	bce8 <MiMem_Alloc+0x80>
			{
				if ((requestedBlock->size - requestedSize) > HEAP_MINIMUM_BLOCK_SIZE)
    bcc2:	68b3      	ldr	r3, [r6, #8]
    bcc4:	1a5b      	subs	r3, r3, r1
    bcc6:	2b14      	cmp	r3, #20
    bcc8:	d810      	bhi.n	bcec <MiMem_Alloc+0x84>
				splitBlock (requestedBlock, requestedSize);
				requestedBlock->free = false;
    bcca:	2300      	movs	r3, #0
    bccc:	7333      	strb	r3, [r6, #12]
				totalFreeBytesRemaining -= requestedBlock->size;
    bcce:	68b3      	ldr	r3, [r6, #8]
    bcd0:	1ac0      	subs	r0, r0, r3
    bcd2:	4b11      	ldr	r3, [pc, #68]	; (bd18 <MiMem_Alloc+0xb0>)
    bcd4:	6018      	str	r0, [r3, #0]
				requestedMemPtr = ( void* )(((uint8_t*)requestedBlock) + blockMetaDataSize);
    bcd6:	0034      	movs	r4, r6
    bcd8:	3410      	adds	r4, #16
			}
		}
	}
	if (NULL != requestedMemPtr)
    bcda:	2c00      	cmp	r4, #0
    bcdc:	d004      	beq.n	bce8 <MiMem_Alloc+0x80>
	{
		memset(requestedMemPtr, 0, size);
    bcde:	002a      	movs	r2, r5
    bce0:	2100      	movs	r1, #0
    bce2:	0020      	movs	r0, r4
    bce4:	4b0e      	ldr	r3, [pc, #56]	; (bd20 <MiMem_Alloc+0xb8>)
    bce6:	4798      	blx	r3
	}
	return requestedMemPtr;
}
    bce8:	0020      	movs	r0, r4
    bcea:	bd70      	pop	{r4, r5, r6, pc}
  \param[in] size size of the memory chunk requested
  \return None.
 ******************************************************************************/
static void splitBlock(Block_t* blockTobeSplitted, size_t size)
{
	uint8_t* ptr = (uint8_t*)blockTobeSplitted + size;
    bcec:	1872      	adds	r2, r6, r1
	Block_t* newBlock = (Block_t*)ptr;

	newBlock->size = blockTobeSplitted->size - size;
    bcee:	6093      	str	r3, [r2, #8]

	if (blockTobeSplitted->next)
    bcf0:	6833      	ldr	r3, [r6, #0]
    bcf2:	2b00      	cmp	r3, #0
    bcf4:	d000      	beq.n	bcf8 <MiMem_Alloc+0x90>
		blockTobeSplitted->next->prev = newBlock;
    bcf6:	605a      	str	r2, [r3, #4]

	newBlock->next = blockTobeSplitted->next;
    bcf8:	6833      	ldr	r3, [r6, #0]
    bcfa:	6013      	str	r3, [r2, #0]
	newBlock->prev = blockTobeSplitted;
    bcfc:	6056      	str	r6, [r2, #4]
	newBlock->free = true;
    bcfe:	2301      	movs	r3, #1
    bd00:	7313      	strb	r3, [r2, #12]

	blockTobeSplitted->next = newBlock;
    bd02:	6032      	str	r2, [r6, #0]
	blockTobeSplitted->size = size;
    bd04:	60b1      	str	r1, [r6, #8]
    bd06:	e7e0      	b.n	bcca <MiMem_Alloc+0x62>
    bd08:	2400      	movs	r4, #0
    bd0a:	e7ed      	b.n	bce8 <MiMem_Alloc+0x80>
    bd0c:	2400      	movs	r4, #0
    bd0e:	e7eb      	b.n	bce8 <MiMem_Alloc+0x80>
			while (blockPtr)
    bd10:	2400      	movs	r4, #0
    bd12:	e7e9      	b.n	bce8 <MiMem_Alloc+0x80>
    bd14:	20000484 	.word	0x20000484
    bd18:	20001c88 	.word	0x20001c88
    bd1c:	0000bc2d 	.word	0x0000bc2d
    bd20:	00014d49 	.word	0x00014d49

0000bd24 <MiMem_Free>:
	Block_t* blockPtr = base;
    bd24:	4b1c      	ldr	r3, [pc, #112]	; (bd98 <MiMem_Free+0x74>)
    bd26:	681b      	ldr	r3, [r3, #0]
	Block_t* freeBlockPtr = (Block_t*)((uint8_t*)ptr - (uint8_t*)blockMetaDataSize);
    bd28:	3810      	subs	r0, #16
	for(; ((blockPtr != NULL) && (blockPtr != freeBlockPtr)); blockPtr = blockPtr->next);
    bd2a:	2b00      	cmp	r3, #0
    bd2c:	d030      	beq.n	bd90 <MiMem_Free+0x6c>
    bd2e:	4283      	cmp	r3, r0
    bd30:	d02f      	beq.n	bd92 <MiMem_Free+0x6e>
    bd32:	681b      	ldr	r3, [r3, #0]
    bd34:	2b00      	cmp	r3, #0
    bd36:	d02b      	beq.n	bd90 <MiMem_Free+0x6c>
    bd38:	4298      	cmp	r0, r3
    bd3a:	d1fa      	bne.n	bd32 <MiMem_Free+0xe>
		blockPtr->free = true;
    bd3c:	2301      	movs	r3, #1
    bd3e:	7303      	strb	r3, [r0, #12]
		totalFreeBytesRemaining += blockPtr->size;
    bd40:	6881      	ldr	r1, [r0, #8]
    bd42:	4a16      	ldr	r2, [pc, #88]	; (bd9c <MiMem_Free+0x78>)
    bd44:	6813      	ldr	r3, [r2, #0]
    bd46:	185b      	adds	r3, r3, r1
    bd48:	6013      	str	r3, [r2, #0]
		if (blockPtr->prev && blockPtr->prev->free)
    bd4a:	6843      	ldr	r3, [r0, #4]
    bd4c:	2b00      	cmp	r3, #0
    bd4e:	d00f      	beq.n	bd70 <MiMem_Free+0x4c>
    bd50:	7b1a      	ldrb	r2, [r3, #12]
    bd52:	2a00      	cmp	r2, #0
    bd54:	d00c      	beq.n	bd70 <MiMem_Free+0x4c>
			blockPtr->prev->size += blockPtr->size;
    bd56:	689a      	ldr	r2, [r3, #8]
    bd58:	4694      	mov	ip, r2
    bd5a:	4461      	add	r1, ip
    bd5c:	6099      	str	r1, [r3, #8]
			if (blockPtr->next)
    bd5e:	6803      	ldr	r3, [r0, #0]
    bd60:	2b00      	cmp	r3, #0
    bd62:	d001      	beq.n	bd68 <MiMem_Free+0x44>
			blockPtr->next->prev = blockPtr->prev;
    bd64:	6842      	ldr	r2, [r0, #4]
    bd66:	605a      	str	r2, [r3, #4]
			blockPtr->prev->next = blockPtr->next;
    bd68:	6843      	ldr	r3, [r0, #4]
    bd6a:	6802      	ldr	r2, [r0, #0]
    bd6c:	601a      	str	r2, [r3, #0]
			blockPtr = blockPtr->prev;
    bd6e:	6840      	ldr	r0, [r0, #4]
		if (blockPtr->next && blockPtr->next->free)
    bd70:	6803      	ldr	r3, [r0, #0]
    bd72:	2b00      	cmp	r3, #0
    bd74:	d00c      	beq.n	bd90 <MiMem_Free+0x6c>
    bd76:	7b1a      	ldrb	r2, [r3, #12]
    bd78:	2a00      	cmp	r2, #0
    bd7a:	d009      	beq.n	bd90 <MiMem_Free+0x6c>
			blockPtr->size += blockPtr->next->size ;
    bd7c:	6882      	ldr	r2, [r0, #8]
    bd7e:	6899      	ldr	r1, [r3, #8]
    bd80:	468c      	mov	ip, r1
    bd82:	4462      	add	r2, ip
    bd84:	6082      	str	r2, [r0, #8]
			blockPtr->next = blockPtr->next->next;
    bd86:	681b      	ldr	r3, [r3, #0]
    bd88:	6003      	str	r3, [r0, #0]
			if (blockPtr->next)
    bd8a:	2b00      	cmp	r3, #0
    bd8c:	d000      	beq.n	bd90 <MiMem_Free+0x6c>
			blockPtr->next->prev = blockPtr;
    bd8e:	6058      	str	r0, [r3, #4]
}
    bd90:	4770      	bx	lr
	Block_t* blockPtr = base;
    bd92:	0018      	movs	r0, r3
    bd94:	e7d2      	b.n	bd3c <MiMem_Free+0x18>
    bd96:	46c0      	nop			; (mov r8, r8)
    bd98:	20000484 	.word	0x20000484
    bd9c:	20001c88 	.word	0x20001c88

0000bda0 <MiMem_PercentageOfFreeBuffers>:
}

uint8_t MiMem_PercentageOfFreeBuffers(void)
{
    bda0:	b510      	push	{r4, lr}
	return (totalFreeBytesRemaining * 100) / HEAP_SIZE;;
    bda2:	4b05      	ldr	r3, [pc, #20]	; (bdb8 <MiMem_PercentageOfFreeBuffers+0x18>)
    bda4:	6818      	ldr	r0, [r3, #0]
    bda6:	2364      	movs	r3, #100	; 0x64
    bda8:	4358      	muls	r0, r3
    bdaa:	21c0      	movs	r1, #192	; 0xc0
    bdac:	0149      	lsls	r1, r1, #5
    bdae:	4b03      	ldr	r3, [pc, #12]	; (bdbc <MiMem_PercentageOfFreeBuffers+0x1c>)
    bdb0:	4798      	blx	r3
    bdb2:	b2c0      	uxtb	r0, r0
}
    bdb4:	bd10      	pop	{r4, pc}
    bdb6:	46c0      	nop			; (mov r8, r8)
    bdb8:	20001c88 	.word	0x20001c88
    bdbc:	000124c1 	.word	0x000124c1

0000bdc0 <miQueueReadOrRemove>:
 *         removed or read, otherwise NULL is returned.
 * \ingroup group_qmm
 */
static miQueueBuffer_t *miQueueReadOrRemove(MiQueue_t *q,
						buffer_mode_t mode,search_t *search)
{
    bdc0:	b5f0      	push	{r4, r5, r6, r7, lr}
    bdc2:	46c6      	mov	lr, r8
    bdc4:	b500      	push	{lr}
    bdc6:	0007      	movs	r7, r0
    bdc8:	4688      	mov	r8, r1
    bdca:	0015      	movs	r5, r2
  __ASM volatile ("cpsid i" : : : "memory");
    bdcc:	b672      	cpsid	i
  __ASM volatile ("dmb 0xF":::"memory");
    bdce:	f3bf 8f5f 	dmb	sy
	miQueueBuffer_t *buffer_current = NULL;
	miQueueBuffer_t *buffer_previous;

	cpu_irq_disable();
    bdd2:	2200      	movs	r2, #0
    bdd4:	4b1f      	ldr	r3, [pc, #124]	; (be54 <miQueueReadOrRemove+0x94>)
    bdd6:	701a      	strb	r2, [r3, #0]
	/* Check whether queue is empty */
	if (q->size != 0) {
    bdd8:	7a03      	ldrb	r3, [r0, #8]
    bdda:	2b00      	cmp	r3, #0
    bddc:	d037      	beq.n	be4e <miQueueReadOrRemove+0x8e>
		buffer_current = q->head;
    bdde:	6804      	ldr	r4, [r0, #0]
		buffer_previous = q->head;

		/* First get buffer matching with criteria */
		if (NULL != search) {
    bde0:	2d00      	cmp	r5, #0
    bde2:	d019      	beq.n	be18 <miQueueReadOrRemove+0x58>
			uint8_t match;
			/* Search for all buffers in the queue */
			while (NULL != buffer_current) {
    bde4:	2c00      	cmp	r4, #0
    bde6:	d00c      	beq.n	be02 <miQueueReadOrRemove+0x42>
    bde8:	0026      	movs	r6, r4
    bdea:	e000      	b.n	bdee <miQueueReadOrRemove+0x2e>
					/* Break, if search criteria matches */
					break;
				}

				buffer_previous = buffer_current;
				buffer_current = buffer_current->nextItem;
    bdec:	001c      	movs	r4, r3
				match = search->criteria_func(
    bdee:	6869      	ldr	r1, [r5, #4]
    bdf0:	6860      	ldr	r0, [r4, #4]
    bdf2:	682b      	ldr	r3, [r5, #0]
    bdf4:	4798      	blx	r3
				if (match) {
    bdf6:	2800      	cmp	r0, #0
    bdf8:	d10f      	bne.n	be1a <miQueueReadOrRemove+0x5a>
				buffer_current = buffer_current->nextItem;
    bdfa:	6823      	ldr	r3, [r4, #0]
    bdfc:	0026      	movs	r6, r4
			while (NULL != buffer_current) {
    bdfe:	2b00      	cmp	r3, #0
    be00:	d1f4      	bne.n	bdec <miQueueReadOrRemove+0x2c>
	miQueueBuffer_t *buffer_current = NULL;
    be02:	2400      	movs	r4, #0
				**/
			}
		}
	} /* q->size != 0 */

	cpu_irq_enable();
    be04:	2201      	movs	r2, #1
    be06:	4b13      	ldr	r3, [pc, #76]	; (be54 <miQueueReadOrRemove+0x94>)
    be08:	701a      	strb	r2, [r3, #0]
    be0a:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
    be0e:	b662      	cpsie	i

	/* Return the buffer. note that pointer to header of buffer is returned
	**/
	return (buffer_current);
} /* queue_read_or_remove */
    be10:	0020      	movs	r0, r4
    be12:	bc04      	pop	{r2}
    be14:	4690      	mov	r8, r2
    be16:	bdf0      	pop	{r4, r5, r6, r7, pc}
		buffer_previous = q->head;
    be18:	0026      	movs	r6, r4
		if (NULL != buffer_current) {
    be1a:	2c00      	cmp	r4, #0
    be1c:	d0f2      	beq.n	be04 <miQueueReadOrRemove+0x44>
			if (REMOVE_MODE == mode) {
    be1e:	4643      	mov	r3, r8
    be20:	2b00      	cmp	r3, #0
    be22:	d1ef      	bne.n	be04 <miQueueReadOrRemove+0x44>
				if (buffer_current == q->head) {
    be24:	683b      	ldr	r3, [r7, #0]
    be26:	429c      	cmp	r4, r3
    be28:	d00c      	beq.n	be44 <miQueueReadOrRemove+0x84>
						= buffer_current->nextItem;
    be2a:	6823      	ldr	r3, [r4, #0]
    be2c:	6033      	str	r3, [r6, #0]
				if (buffer_current == q->tail) {
    be2e:	687b      	ldr	r3, [r7, #4]
    be30:	429c      	cmp	r4, r3
    be32:	d00a      	beq.n	be4a <miQueueReadOrRemove+0x8a>
				q->size--;
    be34:	7a3b      	ldrb	r3, [r7, #8]
    be36:	3b01      	subs	r3, #1
    be38:	723b      	strb	r3, [r7, #8]
				if (NULL == q->head) {
    be3a:	683b      	ldr	r3, [r7, #0]
    be3c:	2b00      	cmp	r3, #0
    be3e:	d1e1      	bne.n	be04 <miQueueReadOrRemove+0x44>
					q->tail = NULL;
    be40:	607b      	str	r3, [r7, #4]
    be42:	e7df      	b.n	be04 <miQueueReadOrRemove+0x44>
					q->head = buffer_current->nextItem;
    be44:	6823      	ldr	r3, [r4, #0]
    be46:	603b      	str	r3, [r7, #0]
    be48:	e7f1      	b.n	be2e <miQueueReadOrRemove+0x6e>
					q->tail = buffer_previous;
    be4a:	607e      	str	r6, [r7, #4]
    be4c:	e7f2      	b.n	be34 <miQueueReadOrRemove+0x74>
	miQueueBuffer_t *buffer_current = NULL;
    be4e:	2400      	movs	r4, #0
    be50:	e7d8      	b.n	be04 <miQueueReadOrRemove+0x44>
    be52:	46c0      	nop			; (mov r8, r8)
    be54:	20000008 	.word	0x20000008

0000be58 <miQueueInit>:
	q->head = NULL;
    be58:	2300      	movs	r3, #0
    be5a:	6003      	str	r3, [r0, #0]
	q->tail = NULL;
    be5c:	6043      	str	r3, [r0, #4]
	q->size = 0;
    be5e:	7203      	strb	r3, [r0, #8]
}
    be60:	4770      	bx	lr
    be62:	Address 0x0000be62 is out of bounds.


0000be64 <miQueueAppend>:
  __ASM volatile ("cpsid i" : : : "memory");
    be64:	b672      	cpsid	i
  __ASM volatile ("dmb 0xF":::"memory");
    be66:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
    be6a:	2200      	movs	r2, #0
    be6c:	4b0a      	ldr	r3, [pc, #40]	; (be98 <miQueueAppend+0x34>)
    be6e:	701a      	strb	r2, [r3, #0]
	if (q->size == 0) {
    be70:	7a03      	ldrb	r3, [r0, #8]
    be72:	2b00      	cmp	r3, #0
    be74:	d00e      	beq.n	be94 <miQueueAppend+0x30>
		q->tail->nextItem = bufPtr;
    be76:	6843      	ldr	r3, [r0, #4]
    be78:	6019      	str	r1, [r3, #0]
	q->tail = bufPtr;
    be7a:	6041      	str	r1, [r0, #4]
	bufPtr->nextItem = NULL;
    be7c:	2300      	movs	r3, #0
    be7e:	600b      	str	r3, [r1, #0]
	q->size++;
    be80:	7a03      	ldrb	r3, [r0, #8]
    be82:	3301      	adds	r3, #1
    be84:	7203      	strb	r3, [r0, #8]
	cpu_irq_enable();
    be86:	2201      	movs	r2, #1
    be88:	4b03      	ldr	r3, [pc, #12]	; (be98 <miQueueAppend+0x34>)
    be8a:	701a      	strb	r2, [r3, #0]
    be8c:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
    be90:	b662      	cpsie	i
} /* miQueueAppend */
    be92:	4770      	bx	lr
		q->head = bufPtr;
    be94:	6001      	str	r1, [r0, #0]
    be96:	e7f0      	b.n	be7a <miQueueAppend+0x16>
    be98:	20000008 	.word	0x20000008

0000be9c <miQueueRemove>:
 *
 * @return Pointer to the buffer header, if the buffer is
 * successfully removed, NULL otherwise.
 */
miQueueBuffer_t *miQueueRemove(MiQueue_t *q, search_t *search)
{
    be9c:	b510      	push	{r4, lr}
    be9e:	000a      	movs	r2, r1
	return (miQueueReadOrRemove(q, REMOVE_MODE, search));
    bea0:	2100      	movs	r1, #0
    bea2:	4b01      	ldr	r3, [pc, #4]	; (bea8 <miQueueRemove+0xc>)
    bea4:	4798      	blx	r3
}
    bea6:	bd10      	pop	{r4, pc}
    bea8:	0000bdc1 	.word	0x0000bdc1

0000beac <miQueueRead>:
 *
 * @return Pointer to the buffer header which is to be read, NULL if the buffer
 * is not available
 */
miQueueBuffer_t *miQueueRead(MiQueue_t *q, search_t *search)
{
    beac:	b510      	push	{r4, lr}
    beae:	000a      	movs	r2, r1
	return (miQueueReadOrRemove(q, READ_MODE, search));
    beb0:	2101      	movs	r1, #1
    beb2:	4b01      	ldr	r3, [pc, #4]	; (beb8 <miQueueRead+0xc>)
    beb4:	4798      	blx	r3
}
    beb6:	bd10      	pop	{r4, pc}
    beb8:	0000bdc1 	.word	0x0000bdc1

0000bebc <placeTimer>:
}

/*************************************************************************//**
*****************************************************************************/
static void placeTimer(SYS_Timer_t *timer)
{
    bebc:	b530      	push	{r4, r5, lr}
	if (timers) {
    bebe:	4b14      	ldr	r3, [pc, #80]	; (bf10 <placeTimer+0x54>)
    bec0:	681d      	ldr	r5, [r3, #0]
    bec2:	2d00      	cmp	r5, #0
    bec4:	d01c      	beq.n	bf00 <placeTimer+0x44>
		SYS_Timer_t *prev = NULL;
		uint32_t timeout = timer->interval;
    bec6:	6882      	ldr	r2, [r0, #8]

		for (SYS_Timer_t *t = timers; t; t = t->next) {
			if (timeout < t->timeout) {
    bec8:	6869      	ldr	r1, [r5, #4]
    beca:	428a      	cmp	r2, r1
    becc:	d309      	bcc.n	bee2 <placeTimer+0x26>
    bece:	002c      	movs	r4, r5
				t->timeout -= timeout;
				break;
			} else {
				timeout -= t->timeout;
    bed0:	1a52      	subs	r2, r2, r1
		for (SYS_Timer_t *t = timers; t; t = t->next) {
    bed2:	6823      	ldr	r3, [r4, #0]
    bed4:	2b00      	cmp	r3, #0
    bed6:	d008      	beq.n	beea <placeTimer+0x2e>
			if (timeout < t->timeout) {
    bed8:	6859      	ldr	r1, [r3, #4]
    beda:	4291      	cmp	r1, r2
    bedc:	d803      	bhi.n	bee6 <placeTimer+0x2a>
		for (SYS_Timer_t *t = timers; t; t = t->next) {
    bede:	001c      	movs	r4, r3
    bee0:	e7f6      	b.n	bed0 <placeTimer+0x14>
    bee2:	002b      	movs	r3, r5
		SYS_Timer_t *prev = NULL;
    bee4:	2400      	movs	r4, #0
				t->timeout -= timeout;
    bee6:	1a89      	subs	r1, r1, r2
    bee8:	6059      	str	r1, [r3, #4]
			}

			prev = t;
		}

		timer->timeout = timeout;
    beea:	6042      	str	r2, [r0, #4]

		if (prev) {
    beec:	2c00      	cmp	r4, #0
    beee:	d003      	beq.n	bef8 <placeTimer+0x3c>
			timer->next = prev->next;
    bef0:	6823      	ldr	r3, [r4, #0]
    bef2:	6003      	str	r3, [r0, #0]
			prev->next = timer;
    bef4:	6020      	str	r0, [r4, #0]
	} else {
		timer->next = NULL;
		timer->timeout = timer->interval;
		timers = timer;
	}
}
    bef6:	bd30      	pop	{r4, r5, pc}
			timer->next = timers;
    bef8:	6005      	str	r5, [r0, #0]
			timers = timer;
    befa:	4b05      	ldr	r3, [pc, #20]	; (bf10 <placeTimer+0x54>)
    befc:	6018      	str	r0, [r3, #0]
    befe:	e7fa      	b.n	bef6 <placeTimer+0x3a>
		timer->next = NULL;
    bf00:	2300      	movs	r3, #0
    bf02:	6003      	str	r3, [r0, #0]
		timer->timeout = timer->interval;
    bf04:	6883      	ldr	r3, [r0, #8]
    bf06:	6043      	str	r3, [r0, #4]
		timers = timer;
    bf08:	4b01      	ldr	r3, [pc, #4]	; (bf10 <placeTimer+0x54>)
    bf0a:	6018      	str	r0, [r3, #0]
}
    bf0c:	e7f3      	b.n	bef6 <placeTimer+0x3a>
    bf0e:	46c0      	nop			; (mov r8, r8)
    bf10:	20001c8c 	.word	0x20001c8c

0000bf14 <SYS_HwOverflow_Cb>:
	common_tc_delay(SYS_TIMER_INTERVAL * MS);
}

static void SYS_HwOverflow_Cb(void)
{
	timerExtension1++;
    bf14:	4a06      	ldr	r2, [pc, #24]	; (bf30 <SYS_HwOverflow_Cb+0x1c>)
    bf16:	7813      	ldrb	r3, [r2, #0]
    bf18:	3301      	adds	r3, #1
    bf1a:	b2db      	uxtb	r3, r3
    bf1c:	7013      	strb	r3, [r2, #0]
	if(timerExtension1 == 0)
    bf1e:	7813      	ldrb	r3, [r2, #0]
    bf20:	2b00      	cmp	r3, #0
    bf22:	d104      	bne.n	bf2e <SYS_HwOverflow_Cb+0x1a>
	{
		timerExtension2++;
    bf24:	4a03      	ldr	r2, [pc, #12]	; (bf34 <SYS_HwOverflow_Cb+0x20>)
    bf26:	7813      	ldrb	r3, [r2, #0]
    bf28:	3301      	adds	r3, #1
    bf2a:	b2db      	uxtb	r3, r3
    bf2c:	7013      	strb	r3, [r2, #0]
	}
}
    bf2e:	4770      	bx	lr
    bf30:	20002690 	.word	0x20002690
    bf34:	20002691 	.word	0x20002691

0000bf38 <SYS_HwExpiry_Cb>:
{
    bf38:	b510      	push	{r4, lr}
	SysTimerIrqCount++;
    bf3a:	4a04      	ldr	r2, [pc, #16]	; (bf4c <SYS_HwExpiry_Cb+0x14>)
    bf3c:	6813      	ldr	r3, [r2, #0]
    bf3e:	3301      	adds	r3, #1
    bf40:	6013      	str	r3, [r2, #0]
	common_tc_delay(SYS_TIMER_INTERVAL * MS);
    bf42:	4803      	ldr	r0, [pc, #12]	; (bf50 <SYS_HwExpiry_Cb+0x18>)
    bf44:	4b03      	ldr	r3, [pc, #12]	; (bf54 <SYS_HwExpiry_Cb+0x1c>)
    bf46:	4798      	blx	r3
}
    bf48:	bd10      	pop	{r4, pc}
    bf4a:	46c0      	nop			; (mov r8, r8)
    bf4c:	2000268c 	.word	0x2000268c
    bf50:	00002710 	.word	0x00002710
    bf54:	0000d20d 	.word	0x0000d20d

0000bf58 <SYS_TimerInit>:
{
    bf58:	b510      	push	{r4, lr}
	SysTimerIrqCount = 0;
    bf5a:	2400      	movs	r4, #0
    bf5c:	4b09      	ldr	r3, [pc, #36]	; (bf84 <SYS_TimerInit+0x2c>)
    bf5e:	601c      	str	r4, [r3, #0]
    timerExtension1 = 0;
    bf60:	4b09      	ldr	r3, [pc, #36]	; (bf88 <SYS_TimerInit+0x30>)
    bf62:	701c      	strb	r4, [r3, #0]
    timerExtension2 = 0;
    bf64:	4b09      	ldr	r3, [pc, #36]	; (bf8c <SYS_TimerInit+0x34>)
    bf66:	701c      	strb	r4, [r3, #0]
    set_common_tc_overflow_callback(SYS_HwOverflow_Cb);
    bf68:	4809      	ldr	r0, [pc, #36]	; (bf90 <SYS_TimerInit+0x38>)
    bf6a:	4b0a      	ldr	r3, [pc, #40]	; (bf94 <SYS_TimerInit+0x3c>)
    bf6c:	4798      	blx	r3
	set_common_tc_expiry_callback(SYS_HwExpiry_Cb);
    bf6e:	480a      	ldr	r0, [pc, #40]	; (bf98 <SYS_TimerInit+0x40>)
    bf70:	4b0a      	ldr	r3, [pc, #40]	; (bf9c <SYS_TimerInit+0x44>)
    bf72:	4798      	blx	r3
	common_tc_init();
    bf74:	4b0a      	ldr	r3, [pc, #40]	; (bfa0 <SYS_TimerInit+0x48>)
    bf76:	4798      	blx	r3
	common_tc_delay(SYS_TIMER_INTERVAL * MS);
    bf78:	480a      	ldr	r0, [pc, #40]	; (bfa4 <SYS_TimerInit+0x4c>)
    bf7a:	4b0b      	ldr	r3, [pc, #44]	; (bfa8 <SYS_TimerInit+0x50>)
    bf7c:	4798      	blx	r3
	timers = NULL;
    bf7e:	4b0b      	ldr	r3, [pc, #44]	; (bfac <SYS_TimerInit+0x54>)
    bf80:	601c      	str	r4, [r3, #0]
}
    bf82:	bd10      	pop	{r4, pc}
    bf84:	2000268c 	.word	0x2000268c
    bf88:	20002690 	.word	0x20002690
    bf8c:	20002691 	.word	0x20002691
    bf90:	0000bf15 	.word	0x0000bf15
    bf94:	0000d2fd 	.word	0x0000d2fd
    bf98:	0000bf39 	.word	0x0000bf39
    bf9c:	0000d309 	.word	0x0000d309
    bfa0:	0000d279 	.word	0x0000d279
    bfa4:	00002710 	.word	0x00002710
    bfa8:	0000d20d 	.word	0x0000d20d
    bfac:	20001c8c 	.word	0x20001c8c

0000bfb0 <SYS_TimerStop>:
	for (SYS_Timer_t *t = timers; t; t = t->next) {
    bfb0:	4b0e      	ldr	r3, [pc, #56]	; (bfec <SYS_TimerStop+0x3c>)
    bfb2:	681a      	ldr	r2, [r3, #0]
    bfb4:	2a00      	cmp	r2, #0
    bfb6:	d014      	beq.n	bfe2 <SYS_TimerStop+0x32>
		if (t == timer) {
    bfb8:	4282      	cmp	r2, r0
    bfba:	d013      	beq.n	bfe4 <SYS_TimerStop+0x34>
	for (SYS_Timer_t *t = timers; t; t = t->next) {
    bfbc:	6813      	ldr	r3, [r2, #0]
    bfbe:	2b00      	cmp	r3, #0
    bfc0:	d00f      	beq.n	bfe2 <SYS_TimerStop+0x32>
		if (t == timer) {
    bfc2:	4298      	cmp	r0, r3
    bfc4:	d001      	beq.n	bfca <SYS_TimerStop+0x1a>
	for (SYS_Timer_t *t = timers; t; t = t->next) {
    bfc6:	001a      	movs	r2, r3
    bfc8:	e7f8      	b.n	bfbc <SYS_TimerStop+0xc>
			if (prev) {
    bfca:	2a00      	cmp	r2, #0
    bfcc:	d00a      	beq.n	bfe4 <SYS_TimerStop+0x34>
				prev->next = t->next;
    bfce:	6803      	ldr	r3, [r0, #0]
    bfd0:	6013      	str	r3, [r2, #0]
			if (t->next) {
    bfd2:	6803      	ldr	r3, [r0, #0]
    bfd4:	2b00      	cmp	r3, #0
    bfd6:	d004      	beq.n	bfe2 <SYS_TimerStop+0x32>
				t->next->timeout += timer->timeout;
    bfd8:	6842      	ldr	r2, [r0, #4]
    bfda:	6859      	ldr	r1, [r3, #4]
    bfdc:	468c      	mov	ip, r1
    bfde:	4462      	add	r2, ip
    bfe0:	605a      	str	r2, [r3, #4]
}
    bfe2:	4770      	bx	lr
				timers = t->next;
    bfe4:	4b01      	ldr	r3, [pc, #4]	; (bfec <SYS_TimerStop+0x3c>)
    bfe6:	6802      	ldr	r2, [r0, #0]
    bfe8:	601a      	str	r2, [r3, #0]
    bfea:	e7f2      	b.n	bfd2 <SYS_TimerStop+0x22>
    bfec:	20001c8c 	.word	0x20001c8c

0000bff0 <SYS_TimerStarted>:
	for (SYS_Timer_t *t = timers; t; t = t->next) {
    bff0:	4b09      	ldr	r3, [pc, #36]	; (c018 <SYS_TimerStarted+0x28>)
    bff2:	681b      	ldr	r3, [r3, #0]
    bff4:	2b00      	cmp	r3, #0
    bff6:	d00a      	beq.n	c00e <SYS_TimerStarted+0x1e>
		if (t == timer) {
    bff8:	4283      	cmp	r3, r0
    bffa:	d00a      	beq.n	c012 <SYS_TimerStarted+0x22>
	for (SYS_Timer_t *t = timers; t; t = t->next) {
    bffc:	681b      	ldr	r3, [r3, #0]
    bffe:	2b00      	cmp	r3, #0
    c000:	d003      	beq.n	c00a <SYS_TimerStarted+0x1a>
		if (t == timer) {
    c002:	4298      	cmp	r0, r3
    c004:	d1fa      	bne.n	bffc <SYS_TimerStarted+0xc>
			return true;
    c006:	2001      	movs	r0, #1
    c008:	e000      	b.n	c00c <SYS_TimerStarted+0x1c>
	return false;
    c00a:	2000      	movs	r0, #0
}
    c00c:	4770      	bx	lr
	return false;
    c00e:	2000      	movs	r0, #0
    c010:	e7fc      	b.n	c00c <SYS_TimerStarted+0x1c>
			return true;
    c012:	2001      	movs	r0, #1
    c014:	e7fa      	b.n	c00c <SYS_TimerStarted+0x1c>
    c016:	46c0      	nop			; (mov r8, r8)
    c018:	20001c8c 	.word	0x20001c8c

0000c01c <SYS_TimerStart>:
{
    c01c:	b510      	push	{r4, lr}
    c01e:	0004      	movs	r4, r0
	if (!SYS_TimerStarted(timer)) {
    c020:	4b04      	ldr	r3, [pc, #16]	; (c034 <SYS_TimerStart+0x18>)
    c022:	4798      	blx	r3
    c024:	2800      	cmp	r0, #0
    c026:	d000      	beq.n	c02a <SYS_TimerStart+0xe>
}
    c028:	bd10      	pop	{r4, pc}
		placeTimer(timer);
    c02a:	0020      	movs	r0, r4
    c02c:	4b02      	ldr	r3, [pc, #8]	; (c038 <SYS_TimerStart+0x1c>)
    c02e:	4798      	blx	r3
}
    c030:	e7fa      	b.n	c028 <SYS_TimerStart+0xc>
    c032:	46c0      	nop			; (mov r8, r8)
    c034:	0000bff1 	.word	0x0000bff1
    c038:	0000bebd 	.word	0x0000bebd

0000c03c <SYS_TimerTaskHandler>:
{
    c03c:	b5f0      	push	{r4, r5, r6, r7, lr}
    c03e:	b083      	sub	sp, #12
	if (0 == SysTimerIrqCount) {
    c040:	4b1d      	ldr	r3, [pc, #116]	; (c0b8 <SYS_TimerTaskHandler+0x7c>)
    c042:	681b      	ldr	r3, [r3, #0]
    c044:	2b00      	cmp	r3, #0
    c046:	d034      	beq.n	c0b2 <SYS_TimerTaskHandler+0x76>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
    c048:	f3ef 8210 	mrs	r2, PRIMASK
static volatile uint32_t cpu_irq_critical_section_counter;
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = cpu_irq_is_enabled();
    c04c:	4253      	negs	r3, r2
    c04e:	4153      	adcs	r3, r2
    c050:	9301      	str	r3, [sp, #4]
  __ASM volatile ("cpsid i" : : : "memory");
    c052:	b672      	cpsid	i
  __ASM volatile ("dmb 0xF":::"memory");
    c054:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
    c058:	2100      	movs	r1, #0
    c05a:	4b18      	ldr	r3, [pc, #96]	; (c0bc <SYS_TimerTaskHandler+0x80>)
    c05c:	7019      	strb	r1, [r3, #0]
	return flags;
    c05e:	9801      	ldr	r0, [sp, #4]
	cnt = SysTimerIrqCount;
    c060:	4a15      	ldr	r2, [pc, #84]	; (c0b8 <SYS_TimerTaskHandler+0x7c>)
    c062:	6813      	ldr	r3, [r2, #0]
	SysTimerIrqCount = 0;
    c064:	6011      	str	r1, [r2, #0]
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
    c066:	2800      	cmp	r0, #0
    c068:	d005      	beq.n	c076 <SYS_TimerTaskHandler+0x3a>
		cpu_irq_enable();
    c06a:	3101      	adds	r1, #1
    c06c:	4a13      	ldr	r2, [pc, #76]	; (c0bc <SYS_TimerTaskHandler+0x80>)
    c06e:	7011      	strb	r1, [r2, #0]
    c070:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
    c074:	b662      	cpsie	i
	elapsed = cnt * SYS_TIMER_INTERVAL;
    c076:	009d      	lsls	r5, r3, #2
    c078:	18ed      	adds	r5, r5, r3
    c07a:	006d      	lsls	r5, r5, #1
	while (timers && (timers->timeout <= elapsed)) {
    c07c:	4e10      	ldr	r6, [pc, #64]	; (c0c0 <SYS_TimerTaskHandler+0x84>)
		timers = timers->next;
    c07e:	0037      	movs	r7, r6
	while (timers && (timers->timeout <= elapsed)) {
    c080:	e005      	b.n	c08e <SYS_TimerTaskHandler+0x52>
			placeTimer(timer);
    c082:	0020      	movs	r0, r4
    c084:	4b0f      	ldr	r3, [pc, #60]	; (c0c4 <SYS_TimerTaskHandler+0x88>)
    c086:	4798      	blx	r3
    c088:	e00d      	b.n	c0a6 <SYS_TimerTaskHandler+0x6a>
			timer->handler(timer);
    c08a:	0020      	movs	r0, r4
    c08c:	4798      	blx	r3
	while (timers && (timers->timeout <= elapsed)) {
    c08e:	6834      	ldr	r4, [r6, #0]
    c090:	2c00      	cmp	r4, #0
    c092:	d00e      	beq.n	c0b2 <SYS_TimerTaskHandler+0x76>
    c094:	6863      	ldr	r3, [r4, #4]
    c096:	429d      	cmp	r5, r3
    c098:	d309      	bcc.n	c0ae <SYS_TimerTaskHandler+0x72>
		elapsed -= timers->timeout;
    c09a:	1aed      	subs	r5, r5, r3
		timers = timers->next;
    c09c:	6823      	ldr	r3, [r4, #0]
    c09e:	603b      	str	r3, [r7, #0]
		if (SYS_TIMER_PERIODIC_MODE == timer->mode) {
    c0a0:	7b23      	ldrb	r3, [r4, #12]
    c0a2:	2b01      	cmp	r3, #1
    c0a4:	d0ed      	beq.n	c082 <SYS_TimerTaskHandler+0x46>
		if (timer->handler) {
    c0a6:	6923      	ldr	r3, [r4, #16]
    c0a8:	2b00      	cmp	r3, #0
    c0aa:	d1ee      	bne.n	c08a <SYS_TimerTaskHandler+0x4e>
    c0ac:	e7ef      	b.n	c08e <SYS_TimerTaskHandler+0x52>
		timers->timeout -= elapsed;
    c0ae:	1b5d      	subs	r5, r3, r5
    c0b0:	6065      	str	r5, [r4, #4]
}
    c0b2:	b003      	add	sp, #12
    c0b4:	bdf0      	pop	{r4, r5, r6, r7, pc}
    c0b6:	46c0      	nop			; (mov r8, r8)
    c0b8:	2000268c 	.word	0x2000268c
    c0bc:	20000008 	.word	0x20000008
    c0c0:	20001c8c 	.word	0x20001c8c
    c0c4:	0000bebd 	.word	0x0000bebd

0000c0c8 <MiWi_TickGet>:
{
    c0c8:	b570      	push	{r4, r5, r6, lr}
	uint8_t current_timerExtension1 = timerExtension1;
    c0ca:	4e0f      	ldr	r6, [pc, #60]	; (c108 <MiWi_TickGet+0x40>)
    c0cc:	7835      	ldrb	r5, [r6, #0]
    c0ce:	b2ed      	uxtb	r5, r5
	currentTime.word.w0 = common_tc_read_count();
    c0d0:	4b0e      	ldr	r3, [pc, #56]	; (c10c <MiWi_TickGet+0x44>)
    c0d2:	4798      	blx	r3
    c0d4:	0004      	movs	r4, r0
	nop();
    c0d6:	46c0      	nop			; (mov r8, r8)
	if (current_timerExtension1 != timerExtension1)
    c0d8:	7833      	ldrb	r3, [r6, #0]
    c0da:	b2db      	uxtb	r3, r3
    c0dc:	429d      	cmp	r5, r3
    c0de:	d004      	beq.n	c0ea <MiWi_TickGet+0x22>
		currentTime.word.w0 = common_tc_read_count();
    c0e0:	4b0a      	ldr	r3, [pc, #40]	; (c10c <MiWi_TickGet+0x44>)
    c0e2:	4798      	blx	r3
    c0e4:	0c24      	lsrs	r4, r4, #16
    c0e6:	0424      	lsls	r4, r4, #16
    c0e8:	4304      	orrs	r4, r0
    currentTime.byte.b2 = timerExtension1;
    c0ea:	4b07      	ldr	r3, [pc, #28]	; (c108 <MiWi_TickGet+0x40>)
    c0ec:	781b      	ldrb	r3, [r3, #0]
    c0ee:	041b      	lsls	r3, r3, #16
    c0f0:	4807      	ldr	r0, [pc, #28]	; (c110 <MiWi_TickGet+0x48>)
    c0f2:	4004      	ands	r4, r0
    c0f4:	431c      	orrs	r4, r3
    currentTime.byte.b3 = timerExtension2;
    c0f6:	4b07      	ldr	r3, [pc, #28]	; (c114 <MiWi_TickGet+0x4c>)
    c0f8:	781b      	ldrb	r3, [r3, #0]
    c0fa:	061b      	lsls	r3, r3, #24
    c0fc:	0224      	lsls	r4, r4, #8
    c0fe:	0a24      	lsrs	r4, r4, #8
    c100:	431c      	orrs	r4, r3
}
    c102:	0020      	movs	r0, r4
    c104:	bd70      	pop	{r4, r5, r6, pc}
    c106:	46c0      	nop			; (mov r8, r8)
    c108:	20002690 	.word	0x20002690
    c10c:	0000d1c1 	.word	0x0000d1c1
    c110:	ff00ffff 	.word	0xff00ffff
    c114:	20002691 	.word	0x20002691

0000c118 <MiWi_TickGetDiff>:
	if (current_tick.Val > previous_tick.Val)
    c118:	4288      	cmp	r0, r1
    c11a:	d802      	bhi.n	c122 <MiWi_TickGetDiff+0xa>
		ret_val = (0xFFFFFFFF - previous_tick.Val) + current_tick.Val;
    c11c:	3801      	subs	r0, #1
    c11e:	1a40      	subs	r0, r0, r1
}
    c120:	4770      	bx	lr
		ret_val = current_tick.Val - previous_tick.Val;
    c122:	1a40      	subs	r0, r0, r1
    c124:	e7fc      	b.n	c120 <MiWi_TickGetDiff+0x8>
    c126:	Address 0x0000c126 is out of bounds.


0000c128 <tc_cca_callback>:
}

/*! \brief  hw timer compare callback
 */
static void tc_cca_callback(struct tc_module *const module_instance)
{
    c128:	b510      	push	{r4, lr}
	tmr_cca_callback();
    c12a:	4b01      	ldr	r3, [pc, #4]	; (c130 <tc_cca_callback+0x8>)
    c12c:	4798      	blx	r3
}
    c12e:	bd10      	pop	{r4, pc}
    c130:	0000d2e1 	.word	0x0000d2e1

0000c134 <tc_ovf_callback>:
{
    c134:	b510      	push	{r4, lr}
	tmr_ovf_callback();
    c136:	4b01      	ldr	r3, [pc, #4]	; (c13c <tc_ovf_callback+0x8>)
    c138:	4798      	blx	r3
}
    c13a:	bd10      	pop	{r4, pc}
    c13c:	0000d299 	.word	0x0000d299

0000c140 <tmr_read_count>:
{
    c140:	b510      	push	{r4, lr}
	return ((uint16_t)tc_get_count_value(&module_inst));
    c142:	4802      	ldr	r0, [pc, #8]	; (c14c <tmr_read_count+0xc>)
    c144:	4b02      	ldr	r3, [pc, #8]	; (c150 <tmr_read_count+0x10>)
    c146:	4798      	blx	r3
    c148:	b280      	uxth	r0, r0
}
    c14a:	bd10      	pop	{r4, pc}
    c14c:	200026c8 	.word	0x200026c8
    c150:	00008abd 	.word	0x00008abd

0000c154 <tmr_disable_cc_interrupt>:
	/* Sanity check arguments */
	Assert(module);

	/* Disable callback */
	if (callback_type == TC_CALLBACK_CC_CHANNEL0) {
		module->hw->COUNT8.INTENCLR.reg = TC_INTFLAG_MC(1);
    c154:	4b03      	ldr	r3, [pc, #12]	; (c164 <tmr_disable_cc_interrupt+0x10>)
    c156:	2110      	movs	r1, #16
    c158:	681a      	ldr	r2, [r3, #0]
    c15a:	7311      	strb	r1, [r2, #12]
		module->enable_callback_mask &= ~TC_INTFLAG_MC(1);
    c15c:	7e5a      	ldrb	r2, [r3, #25]
    c15e:	438a      	bics	r2, r1
    c160:	765a      	strb	r2, [r3, #25]
}
    c162:	4770      	bx	lr
    c164:	200026c8 	.word	0x200026c8

0000c168 <tmr_enable_cc_interrupt>:
{
    c168:	b570      	push	{r4, r5, r6, lr}
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    c16a:	4c0b      	ldr	r4, [pc, #44]	; (c198 <tmr_enable_cc_interrupt+0x30>)
	if (status_flags & TC_STATUS_COUNT_OVERFLOW) {
		int_flags |= TC_INTFLAG_OVF;
	}

	/* Clear interrupt flag */
	tc_module->INTFLAG.reg = int_flags;
    c16c:	2510      	movs	r5, #16
    c16e:	6823      	ldr	r3, [r4, #0]
    c170:	739d      	strb	r5, [r3, #14]
	system_interrupt_enable(_tc_interrupt_get_interrupt_vector(_tc_get_inst_index(module->hw)));
    c172:	0018      	movs	r0, r3
    c174:	4b09      	ldr	r3, [pc, #36]	; (c19c <tmr_enable_cc_interrupt+0x34>)
    c176:	4798      	blx	r3
	return (enum system_interrupt_vector)tc_interrupt_vectors[inst_num];
    c178:	4b09      	ldr	r3, [pc, #36]	; (c1a0 <tmr_enable_cc_interrupt+0x38>)
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
    c17a:	5c1b      	ldrb	r3, [r3, r0]
    c17c:	221f      	movs	r2, #31
    c17e:	401a      	ands	r2, r3
    c180:	2301      	movs	r3, #1
    c182:	4093      	lsls	r3, r2
    c184:	4a07      	ldr	r2, [pc, #28]	; (c1a4 <tmr_enable_cc_interrupt+0x3c>)
    c186:	6013      	str	r3, [r2, #0]
		module->enable_callback_mask |= TC_INTFLAG_MC(1);
    c188:	7e63      	ldrb	r3, [r4, #25]
    c18a:	2210      	movs	r2, #16
    c18c:	4313      	orrs	r3, r2
    c18e:	7663      	strb	r3, [r4, #25]
		module->hw->COUNT8.INTENSET.reg = TC_INTFLAG_MC(1);
    c190:	6823      	ldr	r3, [r4, #0]
    c192:	735d      	strb	r5, [r3, #13]
}
    c194:	bd70      	pop	{r4, r5, r6, pc}
    c196:	46c0      	nop			; (mov r8, r8)
    c198:	200026c8 	.word	0x200026c8
    c19c:	00008849 	.word	0x00008849
    c1a0:	0001671c 	.word	0x0001671c
    c1a4:	e000e100 	.word	0xe000e100

0000c1a8 <tmr_write_cmpreg>:
{
    c1a8:	b510      	push	{r4, lr}
    c1aa:	0002      	movs	r2, r0
	tc_set_compare_value(&module_inst, TC_COMPARE_CAPTURE_CHANNEL_0,
    c1ac:	2100      	movs	r1, #0
    c1ae:	4802      	ldr	r0, [pc, #8]	; (c1b8 <tmr_write_cmpreg+0x10>)
    c1b0:	4b02      	ldr	r3, [pc, #8]	; (c1bc <tmr_write_cmpreg+0x14>)
    c1b2:	4798      	blx	r3
}
    c1b4:	bd10      	pop	{r4, pc}
    c1b6:	46c0      	nop			; (mov r8, r8)
    c1b8:	200026c8 	.word	0x200026c8
    c1bc:	00008ae9 	.word	0x00008ae9

0000c1c0 <tmr_init>:

/*! \brief  to initialize hw timer
 */
uint8_t tmr_init(void)
{
    c1c0:	b570      	push	{r4, r5, r6, lr}
	config->clock_source               = GCLK_GENERATOR_0;
    c1c2:	4a30      	ldr	r2, [pc, #192]	; (c284 <tmr_init+0xc4>)
    c1c4:	2300      	movs	r3, #0
    c1c6:	7013      	strb	r3, [r2, #0]
	config->counter_size               = TC_COUNTER_SIZE_16BIT;
    c1c8:	7093      	strb	r3, [r2, #2]
	config->clock_prescaler            = TC_CLOCK_PRESCALER_DIV1;
    c1ca:	2100      	movs	r1, #0
    c1cc:	8093      	strh	r3, [r2, #4]
	config->wave_generation            = TC_WAVE_GENERATION_NORMAL_FREQ;
    c1ce:	7191      	strb	r1, [r2, #6]
	config->reload_action              = TC_RELOAD_ACTION_GCLK;
    c1d0:	8113      	strh	r3, [r2, #8]
	config->run_in_standby             = false;
    c1d2:	7051      	strb	r1, [r2, #1]
	config->waveform_invert_output     = TC_WAVEFORM_INVERT_OUTPUT_NONE;
    c1d4:	7291      	strb	r1, [r2, #10]
	config->enable_capture_on_channel[TC_COMPARE_CAPTURE_CHANNEL_0] = false;
    c1d6:	72d1      	strb	r1, [r2, #11]
	config->enable_capture_on_channel[TC_COMPARE_CAPTURE_CHANNEL_1] = false;
    c1d8:	7311      	strb	r1, [r2, #12]
	config->count_direction            = TC_COUNT_DIRECTION_UP;
    c1da:	7391      	strb	r1, [r2, #14]
	config->oneshot                    = false;
    c1dc:	7351      	strb	r1, [r2, #13]
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_0].enabled = false;
    c1de:	7411      	strb	r1, [r2, #16]
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_0].pin_out = 0;
    c1e0:	6153      	str	r3, [r2, #20]
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_0].pin_mux = 0;
    c1e2:	6193      	str	r3, [r2, #24]
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_1].enabled = false;
    c1e4:	7711      	strb	r1, [r2, #28]
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_1].pin_out = 0;
    c1e6:	6213      	str	r3, [r2, #32]
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_1].pin_mux = 0;
    c1e8:	6253      	str	r3, [r2, #36]	; 0x24
	config->counter_16_bit.value                   = 0x0000;
    c1ea:	8513      	strh	r3, [r2, #40]	; 0x28
		[TC_COMPARE_CAPTURE_CHANNEL_1]                        = 0x0000;
    c1ec:	8593      	strh	r3, [r2, #44]	; 0x2c
		timer_config.clock_source = GCLK_GENERATOR_1;
		timer_config.clock_prescaler = TC_CLOCK_PRESCALER_DIV2;
		timer_config.run_in_standby = true;
	}
	#endif
	timer_config.counter_16_bit.compare_capture_channel[0] = TIMER_PERIOD;
    c1ee:	3b01      	subs	r3, #1
    c1f0:	8553      	strh	r3, [r2, #42]	; 0x2a
	tc_init(&module_inst, TIMER, &timer_config);
    c1f2:	4c25      	ldr	r4, [pc, #148]	; (c288 <tmr_init+0xc8>)
    c1f4:	4925      	ldr	r1, [pc, #148]	; (c28c <tmr_init+0xcc>)
    c1f6:	0020      	movs	r0, r4
    c1f8:	4b25      	ldr	r3, [pc, #148]	; (c290 <tmr_init+0xd0>)
    c1fa:	4798      	blx	r3
	tc_register_callback(&module_inst, tc_ovf_callback,
    c1fc:	2200      	movs	r2, #0
    c1fe:	4925      	ldr	r1, [pc, #148]	; (c294 <tmr_init+0xd4>)
    c200:	0020      	movs	r0, r4
    c202:	4d25      	ldr	r5, [pc, #148]	; (c298 <tmr_init+0xd8>)
    c204:	47a8      	blx	r5
			TC_CALLBACK_OVERFLOW);
	tc_register_callback(&module_inst, tc_cca_callback,
    c206:	2202      	movs	r2, #2
    c208:	4924      	ldr	r1, [pc, #144]	; (c29c <tmr_init+0xdc>)
    c20a:	0020      	movs	r0, r4
    c20c:	47a8      	blx	r5
	system_interrupt_enable(_tc_interrupt_get_interrupt_vector(_tc_get_inst_index(module->hw)));
    c20e:	6820      	ldr	r0, [r4, #0]
    c210:	4b23      	ldr	r3, [pc, #140]	; (c2a0 <tmr_init+0xe0>)
    c212:	4798      	blx	r3
	return (enum system_interrupt_vector)tc_interrupt_vectors[inst_num];
    c214:	4b23      	ldr	r3, [pc, #140]	; (c2a4 <tmr_init+0xe4>)
    c216:	5c1a      	ldrb	r2, [r3, r0]
    c218:	231f      	movs	r3, #31
    c21a:	4013      	ands	r3, r2
    c21c:	2101      	movs	r1, #1
    c21e:	000a      	movs	r2, r1
    c220:	409a      	lsls	r2, r3
    c222:	4b21      	ldr	r3, [pc, #132]	; (c2a8 <tmr_init+0xe8>)
    c224:	601a      	str	r2, [r3, #0]
		module->enable_callback_mask |= (1 << callback_type);
    c226:	7e63      	ldrb	r3, [r4, #25]
    c228:	2201      	movs	r2, #1
    c22a:	4313      	orrs	r3, r2
    c22c:	7663      	strb	r3, [r4, #25]
		module->hw->COUNT8.INTENSET.reg = (1 << callback_type);
    c22e:	6822      	ldr	r2, [r4, #0]
    c230:	7351      	strb	r1, [r2, #13]
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
    c232:	7bd3      	ldrb	r3, [r2, #15]
	while (tc_is_syncing(module_inst)) {
    c234:	b25b      	sxtb	r3, r3
    c236:	2b00      	cmp	r3, #0
    c238:	dbfb      	blt.n	c232 <tmr_init+0x72>
	tc_module->CTRLA.reg |= TC_CTRLA_ENABLE;
    c23a:	8813      	ldrh	r3, [r2, #0]
    c23c:	2102      	movs	r1, #2
    c23e:	430b      	orrs	r3, r1
    c240:	8013      	strh	r3, [r2, #0]
	} else {
		timer_multiplier = system_gclk_gen_get_hz(0) / (float) DEF_1MHZ;
	}

    #else
	timer_multiplier = system_gclk_gen_get_hz(0) / (float) DEF_1MHZ;	
    c242:	2000      	movs	r0, #0
    c244:	4b19      	ldr	r3, [pc, #100]	; (c2ac <tmr_init+0xec>)
    c246:	4798      	blx	r3
    c248:	4d19      	ldr	r5, [pc, #100]	; (c2b0 <tmr_init+0xf0>)
    c24a:	47a8      	blx	r5
    c24c:	4919      	ldr	r1, [pc, #100]	; (c2b4 <tmr_init+0xf4>)
    c24e:	4b1a      	ldr	r3, [pc, #104]	; (c2b8 <tmr_init+0xf8>)
    c250:	4798      	blx	r3
    c252:	1c04      	adds	r4, r0, #0
	#endif
	
	if ((timer_multiplier - (uint32_t)timer_multiplier) >= 0.5f)
    c254:	4b19      	ldr	r3, [pc, #100]	; (c2bc <tmr_init+0xfc>)
    c256:	4798      	blx	r3
    c258:	47a8      	blx	r5
    c25a:	1c01      	adds	r1, r0, #0
    c25c:	1c20      	adds	r0, r4, #0
    c25e:	4b18      	ldr	r3, [pc, #96]	; (c2c0 <tmr_init+0x100>)
    c260:	4798      	blx	r3
    c262:	21fc      	movs	r1, #252	; 0xfc
    c264:	0589      	lsls	r1, r1, #22
    c266:	4b17      	ldr	r3, [pc, #92]	; (c2c4 <tmr_init+0x104>)
    c268:	4798      	blx	r3
    c26a:	2800      	cmp	r0, #0
    c26c:	d005      	beq.n	c27a <tmr_init+0xba>
	{
		timer_multiplier += 1.0f;
    c26e:	21fe      	movs	r1, #254	; 0xfe
    c270:	0589      	lsls	r1, r1, #22
    c272:	1c20      	adds	r0, r4, #0
    c274:	4b14      	ldr	r3, [pc, #80]	; (c2c8 <tmr_init+0x108>)
    c276:	4798      	blx	r3
    c278:	1c04      	adds	r4, r0, #0
	}
	
	return (uint8_t) timer_multiplier;
    c27a:	1c20      	adds	r0, r4, #0
    c27c:	4b0f      	ldr	r3, [pc, #60]	; (c2bc <tmr_init+0xfc>)
    c27e:	4798      	blx	r3
    c280:	b2c0      	uxtb	r0, r0
}
    c282:	bd70      	pop	{r4, r5, r6, pc}
    c284:	20002694 	.word	0x20002694
    c288:	200026c8 	.word	0x200026c8
    c28c:	42002c00 	.word	0x42002c00
    c290:	00008881 	.word	0x00008881
    c294:	0000c135 	.word	0x0000c135
    c298:	00008781 	.word	0x00008781
    c29c:	0000c129 	.word	0x0000c129
    c2a0:	00008849 	.word	0x00008849
    c2a4:	0001671c 	.word	0x0001671c
    c2a8:	e000e100 	.word	0xe000e100
    c2ac:	00008511 	.word	0x00008511
    c2b0:	00013321 	.word	0x00013321
    c2b4:	49742400 	.word	0x49742400
    c2b8:	00012bc9 	.word	0x00012bc9
    c2bc:	00012875 	.word	0x00012875
    c2c0:	00012fa9 	.word	0x00012fa9
    c2c4:	0001280d 	.word	0x0001280d
    c2c8:	000128a5 	.word	0x000128a5

0000c2cc <edbg_eui_read_eui64>:
#define LEN_EUI    256
uint8_t readbuf[LEN_EUI];

uint8_t *
edbg_eui_read_eui64(void)
{
    c2cc:	b570      	push	{r4, r5, r6, lr}
    c2ce:	b090      	sub	sp, #64	; 0x40
	config->baud_rate        = I2C_MASTER_BAUD_RATE_100KHZ;
    c2d0:	aa03      	add	r2, sp, #12
    c2d2:	2364      	movs	r3, #100	; 0x64
    c2d4:	9303      	str	r3, [sp, #12]
	config->baud_rate_high_speed = I2C_MASTER_BAUD_RATE_3400KHZ;
    c2d6:	4b4d      	ldr	r3, [pc, #308]	; (c40c <edbg_eui_read_eui64+0x140>)
    c2d8:	6053      	str	r3, [r2, #4]
	config->transfer_speed       = I2C_MASTER_SPEED_STANDARD_AND_FAST;
    c2da:	2300      	movs	r3, #0
    c2dc:	6093      	str	r3, [r2, #8]
	config->generator_source = GCLK_GENERATOR_0;
    c2de:	7313      	strb	r3, [r2, #12]
	config->run_in_standby   = false;
    c2e0:	7613      	strb	r3, [r2, #24]
	config->start_hold_time  = I2C_MASTER_START_HOLD_TIME_300NS_600NS;
    c2e2:	2180      	movs	r1, #128	; 0x80
    c2e4:	0389      	lsls	r1, r1, #14
    c2e6:	6111      	str	r1, [r2, #16]
	config->buffer_timeout   = 65535;
    c2e8:	2101      	movs	r1, #1
    c2ea:	4249      	negs	r1, r1
    c2ec:	82d1      	strh	r1, [r2, #22]
	config->unknown_bus_state_timeout = 65535;
    c2ee:	8291      	strh	r1, [r2, #20]
	config->scl_low_timeout  = false;
    c2f0:	3125      	adds	r1, #37	; 0x25
    c2f2:	5453      	strb	r3, [r2, r1]
	config->inactive_timeout = I2C_MASTER_INACTIVE_TIMEOUT_DISABLED;
    c2f4:	6293      	str	r3, [r2, #40]	; 0x28
	config->scl_stretch_only_after_ack_bit = false;
    c2f6:	3108      	adds	r1, #8
    c2f8:	5453      	strb	r3, [r2, r1]
	config->slave_scl_low_extend_timeout   = false;
    c2fa:	3101      	adds	r1, #1
    c2fc:	5453      	strb	r3, [r2, r1]
	config->master_scl_low_extend_timeout  = false;
    c2fe:	3101      	adds	r1, #1
    c300:	5453      	strb	r3, [r2, r1]
	config->sda_scl_rise_time_ns = 215;
    c302:	33d7      	adds	r3, #215	; 0xd7
    c304:	8613      	strh	r3, [r2, #48]	; 0x30
  int timeout2 = 0;
  bool random_mac_address = false;
  uint8_t edbg_status = 0xFF;
  struct i2c_master_config config_i2c_master;
  i2c_master_get_config_defaults(&config_i2c_master);
  config_i2c_master.pinmux_pad0  = EDBG_I2C_SERCOM_PINMUX_PAD0;
    c306:	4b42      	ldr	r3, [pc, #264]	; (c410 <edbg_eui_read_eui64+0x144>)
    c308:	61d3      	str	r3, [r2, #28]
  config_i2c_master.pinmux_pad1  = EDBG_I2C_SERCOM_PINMUX_PAD1;
    c30a:	4b42      	ldr	r3, [pc, #264]	; (c414 <edbg_eui_read_eui64+0x148>)
    c30c:	6213      	str	r3, [r2, #32]

  i2c_master_init(&i2c_master_instance, EDBG_I2C_MODULE, &config_i2c_master);
    c30e:	4c42      	ldr	r4, [pc, #264]	; (c418 <edbg_eui_read_eui64+0x14c>)
    c310:	4942      	ldr	r1, [pc, #264]	; (c41c <edbg_eui_read_eui64+0x150>)
    c312:	0020      	movs	r0, r4
    c314:	4b42      	ldr	r3, [pc, #264]	; (c420 <edbg_eui_read_eui64+0x154>)
    c316:	4798      	blx	r3
	SercomI2cm *const i2c_module = &(module->hw->I2CM);
    c318:	6822      	ldr	r2, [r4, #0]
	return (i2c_hw->SYNCBUSY.reg & SERCOM_I2CM_SYNCBUSY_MASK);
    c31a:	2107      	movs	r1, #7
    c31c:	69d3      	ldr	r3, [r2, #28]
	while (i2c_master_is_syncing(module)) {
    c31e:	4219      	tst	r1, r3
    c320:	d1fc      	bne.n	c31c <edbg_eui_read_eui64+0x50>
	i2c_module->CTRLA.reg |= SERCOM_I2CM_CTRLA_ENABLE;
    c322:	6813      	ldr	r3, [r2, #0]
    c324:	2102      	movs	r1, #2
    c326:	430b      	orrs	r3, r1
    c328:	6013      	str	r3, [r2, #0]
		if(timeout_counter >= (module->unknown_bus_state_timeout)) {
    c32a:	4b3b      	ldr	r3, [pc, #236]	; (c418 <edbg_eui_read_eui64+0x14c>)
    c32c:	88dc      	ldrh	r4, [r3, #6]
	uint32_t timeout_counter = 0;
    c32e:	2300      	movs	r3, #0
	while (!(i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE(1))) {
    c330:	2010      	movs	r0, #16
    c332:	8b51      	ldrh	r1, [r2, #26]
    c334:	4201      	tst	r1, r0
    c336:	d104      	bne.n	c342 <edbg_eui_read_eui64+0x76>
		timeout_counter++;
    c338:	3301      	adds	r3, #1
		if(timeout_counter >= (module->unknown_bus_state_timeout)) {
    c33a:	42a3      	cmp	r3, r4
    c33c:	d3f9      	bcc.n	c332 <edbg_eui_read_eui64+0x66>
			i2c_module->STATUS.reg = SERCOM_I2CM_STATUS_BUSSTATE(1);
    c33e:	2310      	movs	r3, #16
    c340:	8353      	strh	r3, [r2, #26]

  i2c_master_enable(&i2c_master_instance);

  struct i2c_master_packet packet = {
    c342:	466a      	mov	r2, sp
    c344:	4b37      	ldr	r3, [pc, #220]	; (c424 <edbg_eui_read_eui64+0x158>)
    c346:	cb13      	ldmia	r3!, {r0, r1, r4}
    c348:	c213      	stmia	r2!, {r0, r1, r4}
  int timeout2 = 0;
    c34a:	2600      	movs	r6, #0
    .hs_master_code  = 0x0,
  };
   
    do
    {
	    edbg_status = i2c_master_write_packet_wait_no_stop(&i2c_master_instance, &packet);
    c34c:	4c32      	ldr	r4, [pc, #200]	; (c418 <edbg_eui_read_eui64+0x14c>)
    c34e:	4d36      	ldr	r5, [pc, #216]	; (c428 <edbg_eui_read_eui64+0x15c>)
    c350:	e003      	b.n	c35a <edbg_eui_read_eui64+0x8e>
	    if(edbg_status == STATUS_ERR_BAD_ADDRESS)
		{
			if(timeout2++ == SLAVE_WAIT_TIMEOUT)
    c352:	1c73      	adds	r3, r6, #1
    c354:	2e0a      	cmp	r6, #10
    c356:	d033      	beq.n	c3c0 <edbg_eui_read_eui64+0xf4>
    c358:	001e      	movs	r6, r3
	    edbg_status = i2c_master_write_packet_wait_no_stop(&i2c_master_instance, &packet);
    c35a:	4669      	mov	r1, sp
    c35c:	0020      	movs	r0, r4
    c35e:	47a8      	blx	r5
	    if(edbg_status == STATUS_ERR_BAD_ADDRESS)
    c360:	2818      	cmp	r0, #24
    c362:	d0f6      	beq.n	c352 <edbg_eui_read_eui64+0x86>
				random_mac_address = true;
				timeout2 = 0;
				break;
			}
		}
		else if(edbg_status == STATUS_ERR_TIMEOUT) {
    c364:	2812      	cmp	r0, #18
    c366:	d02b      	beq.n	c3c0 <edbg_eui_read_eui64+0xf4>
		PRINTF("Timeout 1\n");
		random_mac_address = true;	
		break;
		}
    } while (edbg_status!=STATUS_OK && edbg_status!=0xFF);
    c368:	3801      	subs	r0, #1
    c36a:	b2c0      	uxtb	r0, r0
    c36c:	28fd      	cmp	r0, #253	; 0xfd
    c36e:	d9f4      	bls.n	c35a <edbg_eui_read_eui64+0x8e>
	
  packet.data = readbuf;
    c370:	4b2e      	ldr	r3, [pc, #184]	; (c42c <edbg_eui_read_eui64+0x160>)
    c372:	9301      	str	r3, [sp, #4]
  packet.data_length = sizeof(readbuf);
    c374:	2380      	movs	r3, #128	; 0x80
    c376:	005b      	lsls	r3, r3, #1
    c378:	466a      	mov	r2, sp
    c37a:	8053      	strh	r3, [r2, #2]
if(random_mac_address == false)
{
  do 
  {
	  edbg_status = i2c_master_read_packet_wait(&i2c_master_instance, &packet) ;
    c37c:	4c26      	ldr	r4, [pc, #152]	; (c418 <edbg_eui_read_eui64+0x14c>)
    c37e:	4d2c      	ldr	r5, [pc, #176]	; (c430 <edbg_eui_read_eui64+0x164>)
    c380:	4669      	mov	r1, sp
    c382:	0020      	movs	r0, r4
    c384:	47a8      	blx	r5
	    if(edbg_status==STATUS_ERR_BAD_ADDRESS)
    c386:	2818      	cmp	r0, #24
    c388:	d03c      	beq.n	c404 <edbg_eui_read_eui64+0x138>
	    {			
			PRINTF("I2C Slave Not Available");
			random_mac_address = true;	
		    break;
	    }
		else if(edbg_status == STATUS_ERR_TIMEOUT) {
    c38a:	2812      	cmp	r0, #18
    c38c:	d03a      	beq.n	c404 <edbg_eui_read_eui64+0x138>
			random_mac_address = true;	
			PRINTF("Timeout 2\n");
			break;
		}		
  } while (edbg_status!=STATUS_OK && edbg_status!=0xFF);
    c38e:	3801      	subs	r0, #1
    c390:	b2c0      	uxtb	r0, r0
    c392:	28fd      	cmp	r0, #253	; 0xfd
    c394:	d9f4      	bls.n	c380 <edbg_eui_read_eui64+0xb4>
}
  i2c_master_reset(&i2c_master_instance);
    c396:	4820      	ldr	r0, [pc, #128]	; (c418 <edbg_eui_read_eui64+0x14c>)
    c398:	4b26      	ldr	r3, [pc, #152]	; (c434 <edbg_eui_read_eui64+0x168>)
    c39a:	4798      	blx	r3
  if(random_mac_address || !(readbuf[0] ^ readbuf[1] ^ readbuf[2] ^ readbuf[3] ^ readbuf[4] ^ readbuf[5] ^ readbuf[6] ^ readbuf[7]))
    c39c:	4a23      	ldr	r2, [pc, #140]	; (c42c <edbg_eui_read_eui64+0x160>)
    c39e:	7813      	ldrb	r3, [r2, #0]
    c3a0:	7851      	ldrb	r1, [r2, #1]
    c3a2:	404b      	eors	r3, r1
    c3a4:	7891      	ldrb	r1, [r2, #2]
    c3a6:	404b      	eors	r3, r1
    c3a8:	78d1      	ldrb	r1, [r2, #3]
    c3aa:	404b      	eors	r3, r1
    c3ac:	7911      	ldrb	r1, [r2, #4]
    c3ae:	404b      	eors	r3, r1
    c3b0:	7951      	ldrb	r1, [r2, #5]
    c3b2:	404b      	eors	r3, r1
    c3b4:	7991      	ldrb	r1, [r2, #6]
    c3b6:	79d2      	ldrb	r2, [r2, #7]
    c3b8:	404b      	eors	r3, r1
    c3ba:	429a      	cmp	r2, r3
    c3bc:	d11f      	bne.n	c3fe <edbg_eui_read_eui64+0x132>
    c3be:	e008      	b.n	c3d2 <edbg_eui_read_eui64+0x106>
  packet.data = readbuf;
    c3c0:	4b1a      	ldr	r3, [pc, #104]	; (c42c <edbg_eui_read_eui64+0x160>)
    c3c2:	9301      	str	r3, [sp, #4]
  packet.data_length = sizeof(readbuf);
    c3c4:	2380      	movs	r3, #128	; 0x80
    c3c6:	005b      	lsls	r3, r3, #1
    c3c8:	466a      	mov	r2, sp
    c3ca:	8053      	strh	r3, [r2, #2]
  i2c_master_reset(&i2c_master_instance);
    c3cc:	4812      	ldr	r0, [pc, #72]	; (c418 <edbg_eui_read_eui64+0x14c>)
    c3ce:	4b19      	ldr	r3, [pc, #100]	; (c434 <edbg_eui_read_eui64+0x168>)
    c3d0:	4798      	blx	r3
  {
	  unsigned int seed;
	  seed = ((*S_NO_WORD0) ^ (*S_NO_WORD1) ^ (*S_NO_WORD2) ^ (*S_NO_WORD3));
    c3d2:	4b19      	ldr	r3, [pc, #100]	; (c438 <edbg_eui_read_eui64+0x16c>)
    c3d4:	6818      	ldr	r0, [r3, #0]
    c3d6:	4b19      	ldr	r3, [pc, #100]	; (c43c <edbg_eui_read_eui64+0x170>)
    c3d8:	681b      	ldr	r3, [r3, #0]
    c3da:	4058      	eors	r0, r3
    c3dc:	4b18      	ldr	r3, [pc, #96]	; (c440 <edbg_eui_read_eui64+0x174>)
    c3de:	681b      	ldr	r3, [r3, #0]
    c3e0:	4058      	eors	r0, r3
    c3e2:	4b18      	ldr	r3, [pc, #96]	; (c444 <edbg_eui_read_eui64+0x178>)
    c3e4:	681b      	ldr	r3, [r3, #0]
    c3e6:	4058      	eors	r0, r3
	  srand(seed);
    c3e8:	4b17      	ldr	r3, [pc, #92]	; (c448 <edbg_eui_read_eui64+0x17c>)
    c3ea:	4798      	blx	r3
    c3ec:	4c0f      	ldr	r4, [pc, #60]	; (c42c <edbg_eui_read_eui64+0x160>)
    c3ee:	0026      	movs	r6, r4
    c3f0:	3608      	adds	r6, #8
	  //printf("\r\n Generating Random MAC \r\n");
	  for (uint8_t i = 0; i < 8; i++) {
		  *(readbuf+i) = rand();
    c3f2:	4d16      	ldr	r5, [pc, #88]	; (c44c <edbg_eui_read_eui64+0x180>)
    c3f4:	47a8      	blx	r5
    c3f6:	7020      	strb	r0, [r4, #0]
    c3f8:	3401      	adds	r4, #1
	  for (uint8_t i = 0; i < 8; i++) {
    c3fa:	42a6      	cmp	r6, r4
    c3fc:	d1fa      	bne.n	c3f4 <edbg_eui_read_eui64+0x128>
	  }
	  
  }
  return readbuf;
}
    c3fe:	480b      	ldr	r0, [pc, #44]	; (c42c <edbg_eui_read_eui64+0x160>)
    c400:	b010      	add	sp, #64	; 0x40
    c402:	bd70      	pop	{r4, r5, r6, pc}
  i2c_master_reset(&i2c_master_instance);
    c404:	4804      	ldr	r0, [pc, #16]	; (c418 <edbg_eui_read_eui64+0x14c>)
    c406:	4b0b      	ldr	r3, [pc, #44]	; (c434 <edbg_eui_read_eui64+0x168>)
    c408:	4798      	blx	r3
    c40a:	e7e2      	b.n	c3d2 <edbg_eui_read_eui64+0x106>
    c40c:	00000d48 	.word	0x00000d48
    c410:	00100002 	.word	0x00100002
    c414:	00110002 	.word	0x00110002
    c418:	200027e4 	.word	0x200027e4
    c41c:	42000c00 	.word	0x42000c00
    c420:	00006abd 	.word	0x00006abd
    c424:	00016720 	.word	0x00016720
    c428:	000070d5 	.word	0x000070d5
    c42c:	200026e4 	.word	0x200026e4
    c430:	000070c1 	.word	0x000070c1
    c434:	00006d85 	.word	0x00006d85
    c438:	0080a00c 	.word	0x0080a00c
    c43c:	0080a040 	.word	0x0080a040
    c440:	0080a044 	.word	0x0080a044
    c444:	0080a048 	.word	0x0080a048
    c448:	00015325 	.word	0x00015325
    c44c:	00015381 	.word	0x00015381

0000c450 <nvm_init>:

	return STATUS_OK;
}

status_code_t nvm_init(mem_type_t mem)
{
    c450:	b500      	push	{lr}
    c452:	b083      	sub	sp, #12
	if (INT_FLASH == mem) {
    c454:	2800      	cmp	r0, #0
    c456:	d110      	bne.n	c47a <nvm_init+0x2a>
	config->sleep_power_mode  = NVM_SLEEP_POWER_MODE_WAKEONACCESS;
    c458:	2300      	movs	r3, #0
    c45a:	466a      	mov	r2, sp
    c45c:	7013      	strb	r3, [r2, #0]
	config->wait_states       = NVMCTRL->CTRLB.bit.RWS;
    c45e:	4a08      	ldr	r2, [pc, #32]	; (c480 <nvm_init+0x30>)
    c460:	6852      	ldr	r2, [r2, #4]
	config->disable_cache     = false;
    c462:	466a      	mov	r2, sp
    c464:	70d3      	strb	r3, [r2, #3]
	config->cache_readmode    = NVM_CACHE_READMODE_NO_MISS_PENALTY;
    c466:	7113      	strb	r3, [r2, #4]
		struct nvm_config config;
		/* Get the default configuration */
		nvm_get_config_defaults(&config);

		/* Enable automatic page write mode */
		config.manual_page_write = false;
    c468:	7053      	strb	r3, [r2, #1]

		/* Set wait state to 1 */
		config.wait_states = 2;
    c46a:	3302      	adds	r3, #2
    c46c:	7093      	strb	r3, [r2, #2]

		/* Set the NVM configuration */
		nvm_set_config(&config);
    c46e:	4668      	mov	r0, sp
    c470:	4b04      	ldr	r3, [pc, #16]	; (c484 <nvm_init+0x34>)
    c472:	4798      	blx	r3

		return STATUS_OK;
    c474:	2000      	movs	r0, #0
	}

	return ERR_INVALID_ARG;
}
    c476:	b003      	add	sp, #12
    c478:	bd00      	pop	{pc}
	return ERR_INVALID_ARG;
    c47a:	2008      	movs	r0, #8
    c47c:	4240      	negs	r0, r0
    c47e:	e7fa      	b.n	c476 <nvm_init+0x26>
    c480:	41004000 	.word	0x41004000
    c484:	00006861 	.word	0x00006861

0000c488 <sal_init>:
 *
 * This functions initializes the SAL.
 */
void sal_init(void)
{
}
    c488:	4770      	bx	lr
    c48a:	Address 0x0000c48a is out of bounds.


0000c48c <sal_aes_restart>:
 * When using sal_aes_wrrd(), call sal_aes_read() to get the result
 * of the last AES operation BEFORE you put the transceiver unit to
 * sleep state!
 */
void sal_aes_restart(void)
{
    c48c:	b570      	push	{r4, r5, r6, lr}
	 * This is not required anymore for SPI transceivers beyond
	 * these two mentioned transceivers.
	 */
	uint8_t *keyp;
	uint8_t save_cmd;
	if (last_dir == AES_DIR_ENCRYPT) {
    c48e:	4b0c      	ldr	r3, [pc, #48]	; (c4c0 <sal_aes_restart+0x34>)
    c490:	781b      	ldrb	r3, [r3, #0]
    c492:	2b00      	cmp	r3, #0
    c494:	d012      	beq.n	c4bc <sal_aes_restart+0x30>
		keyp = enc_key;
	} else {
		keyp = dec_key;
    c496:	490b      	ldr	r1, [pc, #44]	; (c4c4 <sal_aes_restart+0x38>)
	}

	save_cmd = aes_buf[0];
    c498:	4c0b      	ldr	r4, [pc, #44]	; (c4c8 <sal_aes_restart+0x3c>)
    c49a:	7825      	ldrb	r5, [r4, #0]
	aes_buf[0] = SR_MASK(SR_AES_MODE, AES_MODE_KEY);
    c49c:	2310      	movs	r3, #16
    c49e:	7023      	strb	r3, [r4, #0]

	/* Fill in key. */
	memcpy(aes_buf + 1, keyp, AES_KEYSIZE);
    c4a0:	1c60      	adds	r0, r4, #1
    c4a2:	2210      	movs	r2, #16
    c4a4:	4b09      	ldr	r3, [pc, #36]	; (c4cc <sal_aes_restart+0x40>)
    c4a6:	4798      	blx	r3

	/* Write to SRAM in one step. */
	trx_sram_write((AES_BASE_ADDR + RG_AES_CTRL), aes_buf,
    c4a8:	2211      	movs	r2, #17
    c4aa:	0021      	movs	r1, r4
    c4ac:	2083      	movs	r0, #131	; 0x83
    c4ae:	4b08      	ldr	r3, [pc, #32]	; (c4d0 <sal_aes_restart+0x44>)
    c4b0:	4798      	blx	r3
			AES_BLOCKSIZE + 1);

	aes_buf[0] = save_cmd;
    c4b2:	7025      	strb	r5, [r4, #0]
	setup_flag = true;
    c4b4:	2201      	movs	r2, #1
    c4b6:	4b07      	ldr	r3, [pc, #28]	; (c4d4 <sal_aes_restart+0x48>)
    c4b8:	701a      	strb	r2, [r3, #0]
}
    c4ba:	bd70      	pop	{r4, r5, r6, pc}
		keyp = enc_key;
    c4bc:	4906      	ldr	r1, [pc, #24]	; (c4d8 <sal_aes_restart+0x4c>)
    c4be:	e7eb      	b.n	c498 <sal_aes_restart+0xc>
    c4c0:	2000008e 	.word	0x2000008e
    c4c4:	20001ca4 	.word	0x20001ca4
    c4c8:	20001c90 	.word	0x20001c90
    c4cc:	00014d37 	.word	0x00014d37
    c4d0:	0000cc49 	.word	0x0000cc49
    c4d4:	20001cc4 	.word	0x20001cc4
    c4d8:	20001cb4 	.word	0x20001cb4

0000c4dc <_sal_aes_clean_up>:
/**
 * @brief Cleans up the SAL/AES after STB has been finished
 */
void _sal_aes_clean_up(void)
{
}
    c4dc:	4770      	bx	lr
    c4de:	Address 0x0000c4de is out of bounds.


0000c4e0 <sal_aes_wrrd>:
 * @param[in]  idata  AES block to be en/decrypted
 * @param[out] odata  Result of previous operation
 *                    (odata may be NULL or equal to idata)
 */
void sal_aes_wrrd(uint8_t *idata, uint8_t *odata)
{
    c4e0:	b570      	push	{r4, r5, r6, lr}
    c4e2:	0003      	movs	r3, r0
    c4e4:	000d      	movs	r5, r1
	 * Write data and start the operation.
	 * AES_MODE in aes_buf[0] and aes_buf[AES_BLOCKSIZE+1] as well as
	 * AES_REQUEST in aes_buf[AES_BLOCKSIZE+1]
	 * were set before in sal_aes_setup()
	 */
	memcpy(aes_buf + 1, idata, AES_BLOCKSIZE);
    c4e6:	4c14      	ldr	r4, [pc, #80]	; (c538 <sal_aes_wrrd+0x58>)
    c4e8:	1c60      	adds	r0, r4, #1
    c4ea:	2210      	movs	r2, #16
    c4ec:	0019      	movs	r1, r3
    c4ee:	4b13      	ldr	r3, [pc, #76]	; (c53c <sal_aes_wrrd+0x5c>)
    c4f0:	4798      	blx	r3

	/* trx_aes_wrrd() overwrites aes_buf, the last byte must be saved.
	**/
	save_cmd = aes_buf[AES_BLOCKSIZE + 1];
    c4f2:	7c64      	ldrb	r4, [r4, #17]

	if (setup_flag) {
    c4f4:	4b12      	ldr	r3, [pc, #72]	; (c540 <sal_aes_wrrd+0x60>)
    c4f6:	781b      	ldrb	r3, [r3, #0]
    c4f8:	2b00      	cmp	r3, #0
    c4fa:	d015      	beq.n	c528 <sal_aes_wrrd+0x48>
		trx_aes_wrrd((AES_BASE_ADDR + RG_AES_CTRL), aes_buf,
    c4fc:	2212      	movs	r2, #18
    c4fe:	490e      	ldr	r1, [pc, #56]	; (c538 <sal_aes_wrrd+0x58>)
    c500:	2083      	movs	r0, #131	; 0x83
    c502:	4b10      	ldr	r3, [pc, #64]	; (c544 <sal_aes_wrrd+0x64>)
    c504:	4798      	blx	r3
				AES_BLOCKSIZE + 2);

		setup_flag = false;
    c506:	2200      	movs	r2, #0
    c508:	4b0d      	ldr	r3, [pc, #52]	; (c540 <sal_aes_wrrd+0x60>)
    c50a:	701a      	strb	r2, [r3, #0]
		trx_aes_wrrd((AES_BASE_ADDR + RG_AES_STATE_KEY_0),
				aes_buf + 1, AES_BLOCKSIZE + 1);
	}

	/* Restore the result. */
	if (odata != NULL) {
    c50c:	2d00      	cmp	r5, #0
    c50e:	d005      	beq.n	c51c <sal_aes_wrrd+0x3c>
		memcpy(odata, aes_buf + 1, AES_BLOCKSIZE);
    c510:	2210      	movs	r2, #16
    c512:	4909      	ldr	r1, [pc, #36]	; (c538 <sal_aes_wrrd+0x58>)
    c514:	3101      	adds	r1, #1
    c516:	0028      	movs	r0, r5
    c518:	4b08      	ldr	r3, [pc, #32]	; (c53c <sal_aes_wrrd+0x5c>)
    c51a:	4798      	blx	r3
	}

	aes_buf[AES_BLOCKSIZE + 1] = save_cmd;
    c51c:	4b06      	ldr	r3, [pc, #24]	; (c538 <sal_aes_wrrd+0x58>)
    c51e:	745c      	strb	r4, [r3, #17]

	/* Wait for the operation to finish for 24 us. */
	delay_us(24);
    c520:	2018      	movs	r0, #24
    c522:	4b09      	ldr	r3, [pc, #36]	; (c548 <sal_aes_wrrd+0x68>)
    c524:	4798      	blx	r3
}
    c526:	bd70      	pop	{r4, r5, r6, pc}
		trx_aes_wrrd((AES_BASE_ADDR + RG_AES_STATE_KEY_0),
    c528:	2211      	movs	r2, #17
    c52a:	4903      	ldr	r1, [pc, #12]	; (c538 <sal_aes_wrrd+0x58>)
    c52c:	3101      	adds	r1, #1
    c52e:	2084      	movs	r0, #132	; 0x84
    c530:	4b04      	ldr	r3, [pc, #16]	; (c544 <sal_aes_wrrd+0x64>)
    c532:	4798      	blx	r3
    c534:	e7ea      	b.n	c50c <sal_aes_wrrd+0x2c>
    c536:	46c0      	nop			; (mov r8, r8)
    c538:	20001c90 	.word	0x20001c90
    c53c:	00014d37 	.word	0x00014d37
    c540:	20001cc4 	.word	0x20001cc4
    c544:	0000cf3d 	.word	0x0000cf3d
    c548:	00006521 	.word	0x00006521

0000c54c <sal_aes_setup>:
{
    c54c:	b5f0      	push	{r4, r5, r6, r7, lr}
    c54e:	46c6      	mov	lr, r8
    c550:	b500      	push	{lr}
    c552:	b084      	sub	sp, #16
    c554:	0005      	movs	r5, r0
    c556:	000e      	movs	r6, r1
    c558:	0014      	movs	r4, r2
	if (key != NULL) {
    c55a:	2800      	cmp	r0, #0
    c55c:	d017      	beq.n	c58e <sal_aes_setup+0x42>
		dec_initialized = false;
    c55e:	2200      	movs	r2, #0
    c560:	4b3e      	ldr	r3, [pc, #248]	; (c65c <sal_aes_setup+0x110>)
    c562:	701a      	strb	r2, [r3, #0]
		last_dir = AES_DIR_VOID;
    c564:	3202      	adds	r2, #2
    c566:	4b3e      	ldr	r3, [pc, #248]	; (c660 <sal_aes_setup+0x114>)
    c568:	701a      	strb	r2, [r3, #0]
		memcpy(enc_key, key, AES_KEYSIZE);
    c56a:	320e      	adds	r2, #14
    c56c:	0001      	movs	r1, r0
    c56e:	483d      	ldr	r0, [pc, #244]	; (c664 <sal_aes_setup+0x118>)
    c570:	4b3d      	ldr	r3, [pc, #244]	; (c668 <sal_aes_setup+0x11c>)
    c572:	4698      	mov	r8, r3
    c574:	4798      	blx	r3
		aes_buf[0] = SR_MASK(SR_AES_MODE, AES_MODE_KEY);
    c576:	4f3d      	ldr	r7, [pc, #244]	; (c66c <sal_aes_setup+0x120>)
    c578:	2310      	movs	r3, #16
    c57a:	703b      	strb	r3, [r7, #0]
		memcpy(aes_buf + 1, key, AES_KEYSIZE);
    c57c:	1c78      	adds	r0, r7, #1
    c57e:	2210      	movs	r2, #16
    c580:	0029      	movs	r1, r5
    c582:	47c0      	blx	r8
		trx_sram_write((AES_BASE_ADDR + RG_AES_CTRL), aes_buf,
    c584:	2211      	movs	r2, #17
    c586:	0039      	movs	r1, r7
    c588:	2083      	movs	r0, #131	; 0x83
    c58a:	4b39      	ldr	r3, [pc, #228]	; (c670 <sal_aes_setup+0x124>)
    c58c:	4798      	blx	r3
	switch (dir) {
    c58e:	2c00      	cmp	r4, #0
    c590:	d003      	beq.n	c59a <sal_aes_setup+0x4e>
    c592:	2c01      	cmp	r4, #1
    c594:	d02f      	beq.n	c5f6 <sal_aes_setup+0xaa>
		return false;
    c596:	2000      	movs	r0, #0
    c598:	e01b      	b.n	c5d2 <sal_aes_setup+0x86>
		if (last_dir == AES_DIR_DECRYPT) {
    c59a:	4b31      	ldr	r3, [pc, #196]	; (c660 <sal_aes_setup+0x114>)
    c59c:	781b      	ldrb	r3, [r3, #0]
    c59e:	2b01      	cmp	r3, #1
    c5a0:	d01b      	beq.n	c5da <sal_aes_setup+0x8e>
	last_dir = dir;
    c5a2:	4b2f      	ldr	r3, [pc, #188]	; (c660 <sal_aes_setup+0x114>)
    c5a4:	701c      	strb	r4, [r3, #0]
	switch (enc_mode) {
    c5a6:	2e00      	cmp	r6, #0
    c5a8:	d002      	beq.n	c5b0 <sal_aes_setup+0x64>
		return (false);
    c5aa:	2000      	movs	r0, #0
	switch (enc_mode) {
    c5ac:	2e02      	cmp	r6, #2
    c5ae:	d110      	bne.n	c5d2 <sal_aes_setup+0x86>
		aes_buf[0] = SR_MASK(SR_AES_MODE, enc_mode) |
    c5b0:	0136      	lsls	r6, r6, #4
    c5b2:	2370      	movs	r3, #112	; 0x70
    c5b4:	401e      	ands	r6, r3
				SR_MASK(SR_AES_DIR, dir);
    c5b6:	00e4      	lsls	r4, r4, #3
    c5b8:	3b68      	subs	r3, #104	; 0x68
    c5ba:	401c      	ands	r4, r3
		aes_buf[0] = SR_MASK(SR_AES_MODE, enc_mode) |
    c5bc:	4334      	orrs	r4, r6
    c5be:	4b2b      	ldr	r3, [pc, #172]	; (c66c <sal_aes_setup+0x120>)
    c5c0:	701c      	strb	r4, [r3, #0]
				SR_MASK(SR_AES_DIR, dir) |
    c5c2:	2680      	movs	r6, #128	; 0x80
    c5c4:	4276      	negs	r6, r6
    c5c6:	4334      	orrs	r4, r6
		aes_buf[AES_BLOCKSIZE + 1] = SR_MASK(SR_AES_MODE, enc_mode) |
    c5c8:	745c      	strb	r4, [r3, #17]
	setup_flag = true;
    c5ca:	2201      	movs	r2, #1
    c5cc:	4b29      	ldr	r3, [pc, #164]	; (c674 <sal_aes_setup+0x128>)
    c5ce:	701a      	strb	r2, [r3, #0]
	return (true);
    c5d0:	2001      	movs	r0, #1
}
    c5d2:	b004      	add	sp, #16
    c5d4:	bc04      	pop	{r2}
    c5d6:	4690      	mov	r8, r2
    c5d8:	bdf0      	pop	{r4, r5, r6, r7, pc}
			aes_buf[0] = SR_MASK(SR_AES_MODE, AES_MODE_KEY);
    c5da:	4d24      	ldr	r5, [pc, #144]	; (c66c <sal_aes_setup+0x120>)
    c5dc:	330f      	adds	r3, #15
    c5de:	702b      	strb	r3, [r5, #0]
			memcpy(aes_buf + 1, enc_key, AES_KEYSIZE);
    c5e0:	1c68      	adds	r0, r5, #1
    c5e2:	2210      	movs	r2, #16
    c5e4:	491f      	ldr	r1, [pc, #124]	; (c664 <sal_aes_setup+0x118>)
    c5e6:	4b20      	ldr	r3, [pc, #128]	; (c668 <sal_aes_setup+0x11c>)
    c5e8:	4798      	blx	r3
			trx_sram_write((AES_BASE_ADDR + RG_AES_CTRL),
    c5ea:	2211      	movs	r2, #17
    c5ec:	0029      	movs	r1, r5
    c5ee:	2083      	movs	r0, #131	; 0x83
    c5f0:	4b1f      	ldr	r3, [pc, #124]	; (c670 <sal_aes_setup+0x124>)
    c5f2:	4798      	blx	r3
    c5f4:	e7d5      	b.n	c5a2 <sal_aes_setup+0x56>
		if (last_dir != AES_DIR_DECRYPT) {
    c5f6:	4b1a      	ldr	r3, [pc, #104]	; (c660 <sal_aes_setup+0x114>)
    c5f8:	781b      	ldrb	r3, [r3, #0]
    c5fa:	2b01      	cmp	r3, #1
    c5fc:	d0d1      	beq.n	c5a2 <sal_aes_setup+0x56>
			aes_buf[0] = SR_MASK(SR_AES_MODE, AES_MODE_KEY);
    c5fe:	2210      	movs	r2, #16
    c600:	4b1a      	ldr	r3, [pc, #104]	; (c66c <sal_aes_setup+0x120>)
    c602:	701a      	strb	r2, [r3, #0]
			if (!dec_initialized) {
    c604:	4b15      	ldr	r3, [pc, #84]	; (c65c <sal_aes_setup+0x110>)
    c606:	781b      	ldrb	r3, [r3, #0]
    c608:	2b00      	cmp	r3, #0
    c60a:	d00e      	beq.n	c62a <sal_aes_setup+0xde>
			memcpy(aes_buf + 1, dec_key, AES_KEYSIZE);
    c60c:	4d17      	ldr	r5, [pc, #92]	; (c66c <sal_aes_setup+0x120>)
    c60e:	1c68      	adds	r0, r5, #1
    c610:	2210      	movs	r2, #16
    c612:	4919      	ldr	r1, [pc, #100]	; (c678 <sal_aes_setup+0x12c>)
    c614:	4b14      	ldr	r3, [pc, #80]	; (c668 <sal_aes_setup+0x11c>)
    c616:	4798      	blx	r3
			trx_sram_write((AES_BASE_ADDR + RG_AES_CTRL),
    c618:	2211      	movs	r2, #17
    c61a:	0029      	movs	r1, r5
    c61c:	2083      	movs	r0, #131	; 0x83
    c61e:	4b14      	ldr	r3, [pc, #80]	; (c670 <sal_aes_setup+0x124>)
    c620:	4798      	blx	r3
			dec_initialized = true;
    c622:	4b0e      	ldr	r3, [pc, #56]	; (c65c <sal_aes_setup+0x110>)
    c624:	2201      	movs	r2, #1
    c626:	701a      	strb	r2, [r3, #0]
    c628:	e7bb      	b.n	c5a2 <sal_aes_setup+0x56>
				aes_buf[0] = SR_MASK(SR_AES_MODE, AES_MODE_ECB);
    c62a:	4d10      	ldr	r5, [pc, #64]	; (c66c <sal_aes_setup+0x120>)
    c62c:	702b      	strb	r3, [r5, #0]
				aes_buf[AES_BLOCKSIZE + 1] = SR_MASK(
    c62e:	3380      	adds	r3, #128	; 0x80
    c630:	746b      	strb	r3, [r5, #17]
				setup_flag = true; /* Needed in sal_aes_wrrd().
    c632:	3a0f      	subs	r2, #15
    c634:	4b0f      	ldr	r3, [pc, #60]	; (c674 <sal_aes_setup+0x128>)
    c636:	701a      	strb	r2, [r3, #0]
				sal_aes_wrrd(dummy, NULL);
    c638:	2100      	movs	r1, #0
    c63a:	4668      	mov	r0, sp
    c63c:	4b0f      	ldr	r3, [pc, #60]	; (c67c <sal_aes_setup+0x130>)
    c63e:	4798      	blx	r3
				aes_buf[0] = SR_MASK(SR_AES_MODE, AES_MODE_KEY);
    c640:	2310      	movs	r3, #16
    c642:	702b      	strb	r3, [r5, #0]
				trx_sram_write(
    c644:	2201      	movs	r2, #1
    c646:	0029      	movs	r1, r5
    c648:	2083      	movs	r0, #131	; 0x83
    c64a:	4b09      	ldr	r3, [pc, #36]	; (c670 <sal_aes_setup+0x124>)
    c64c:	4798      	blx	r3
				trx_sram_read((AES_BASE_ADDR +
    c64e:	2210      	movs	r2, #16
    c650:	4909      	ldr	r1, [pc, #36]	; (c678 <sal_aes_setup+0x12c>)
    c652:	2084      	movs	r0, #132	; 0x84
    c654:	4b0a      	ldr	r3, [pc, #40]	; (c680 <sal_aes_setup+0x134>)
    c656:	4798      	blx	r3
    c658:	e7d8      	b.n	c60c <sal_aes_setup+0xc0>
    c65a:	46c0      	nop			; (mov r8, r8)
    c65c:	20001ca2 	.word	0x20001ca2
    c660:	2000008e 	.word	0x2000008e
    c664:	20001cb4 	.word	0x20001cb4
    c668:	00014d37 	.word	0x00014d37
    c66c:	20001c90 	.word	0x20001c90
    c670:	0000cc49 	.word	0x0000cc49
    c674:	20001cc4 	.word	0x20001cc4
    c678:	20001ca4 	.word	0x20001ca4
    c67c:	0000c4e1 	.word	0x0000c4e1
    c680:	0000cdb5 	.word	0x0000cdb5

0000c684 <sal_aes_read>:
 * of a series of sal_aes_wrrd() calls.
 *
 * @param[out] data     - result of previous operation
 */
void sal_aes_read(uint8_t *data)
{
    c684:	b510      	push	{r4, lr}
    c686:	0001      	movs	r1, r0
	trx_sram_read((AES_BASE_ADDR + RG_AES_STATE_KEY_0), data,
    c688:	2210      	movs	r2, #16
    c68a:	2084      	movs	r0, #132	; 0x84
    c68c:	4b01      	ldr	r3, [pc, #4]	; (c694 <sal_aes_read+0x10>)
    c68e:	4798      	blx	r3
			AES_BLOCKSIZE);
}
    c690:	bd10      	pop	{r4, pc}
    c692:	46c0      	nop			; (mov r8, r8)
    c694:	0000cdb5 	.word	0x0000cdb5

0000c698 <AT86RFX_ISR>:
void AT86RFX_ISR(void)
#else
AT86RFX_ISR()
#endif

{
    c698:	b510      	push	{r4, lr}
	eic_module->INTFLAG.reg = eic_mask;
    c69a:	2201      	movs	r2, #1
    c69c:	4b03      	ldr	r3, [pc, #12]	; (c6ac <AT86RFX_ISR+0x14>)
    c69e:	611a      	str	r2, [r3, #16]
	/*Clearing the RF interrupt*/
	trx_irq_flag_clr();
  	/*Calling the interrupt routines*/
	if (irq_hdl_trx) {
    c6a0:	4b03      	ldr	r3, [pc, #12]	; (c6b0 <AT86RFX_ISR+0x18>)
    c6a2:	681b      	ldr	r3, [r3, #0]
    c6a4:	2b00      	cmp	r3, #0
    c6a6:	d000      	beq.n	c6aa <AT86RFX_ISR+0x12>
		irq_hdl_trx();
    c6a8:	4798      	blx	r3
	}
}
    c6aa:	bd10      	pop	{r4, pc}
    c6ac:	40001800 	.word	0x40001800
    c6b0:	20001cc8 	.word	0x20001cc8

0000c6b4 <trx_spi_init>:

void trx_spi_init(void)
{
    c6b4:	b530      	push	{r4, r5, lr}
    c6b6:	b085      	sub	sp, #20
	config->address_enabled = false;
    c6b8:	4a34      	ldr	r2, [pc, #208]	; (c78c <trx_spi_init+0xd8>)
    c6ba:	2300      	movs	r3, #0
    c6bc:	7053      	strb	r3, [r2, #1]
	config->address         = 0;
    c6be:	7093      	strb	r3, [r2, #2]
	/* Initialize SPI in master mode to access the transceiver */
#if SAMD || SAMR21 || SAML21 || SAMR30
	spi_slave_inst_get_config_defaults(&slave_dev_config);
	slave_dev_config.ss_pin = AT86RFX_SPI_CS;
    c6c0:	213f      	movs	r1, #63	; 0x3f
    c6c2:	7011      	strb	r1, [r2, #0]
	slave->ss_pin          = config->ss_pin;
    c6c4:	4c32      	ldr	r4, [pc, #200]	; (c790 <trx_spi_init+0xdc>)
    c6c6:	7021      	strb	r1, [r4, #0]
	slave->address_enabled = config->address_enabled;
    c6c8:	7063      	strb	r3, [r4, #1]
	slave->address         = config->address;
    c6ca:	70a3      	strb	r3, [r4, #2]
	config->input_pull = PORT_PIN_PULL_UP;
    c6cc:	2201      	movs	r2, #1
    c6ce:	4669      	mov	r1, sp
    c6d0:	704a      	strb	r2, [r1, #1]
	config->powersave  = false;
    c6d2:	708b      	strb	r3, [r1, #2]
	pin_conf.direction = PORT_PIN_DIR_OUTPUT;
    c6d4:	700a      	strb	r2, [r1, #0]
	port_pin_set_config(slave->ss_pin, &pin_conf);
    c6d6:	203f      	movs	r0, #63	; 0x3f
    c6d8:	4b2e      	ldr	r3, [pc, #184]	; (c794 <trx_spi_init+0xe0>)
    c6da:	4798      	blx	r3
	port_pin_set_output_level(slave->ss_pin, true);
    c6dc:	7822      	ldrb	r2, [r4, #0]
	if (port_index < PORT_INST_NUM) {
    c6de:	09d1      	lsrs	r1, r2, #7
		return NULL;
    c6e0:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
    c6e2:	2900      	cmp	r1, #0
    c6e4:	d104      	bne.n	c6f0 <trx_spi_init+0x3c>
		return &(ports[port_index]->Group[group_index]);
    c6e6:	0953      	lsrs	r3, r2, #5
    c6e8:	01db      	lsls	r3, r3, #7
    c6ea:	492b      	ldr	r1, [pc, #172]	; (c798 <trx_spi_init+0xe4>)
    c6ec:	468c      	mov	ip, r1
    c6ee:	4463      	add	r3, ip
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    c6f0:	211f      	movs	r1, #31
    c6f2:	4011      	ands	r1, r2
    c6f4:	2201      	movs	r2, #1
    c6f6:	0010      	movs	r0, r2
    c6f8:	4088      	lsls	r0, r1
		port_base->OUTSET.reg = pin_mask;
    c6fa:	6198      	str	r0, [r3, #24]
	config->mode             = SPI_MODE_MASTER;
    c6fc:	4c27      	ldr	r4, [pc, #156]	; (c79c <trx_spi_init+0xe8>)
    c6fe:	7022      	strb	r2, [r4, #0]
	config->data_order       = SPI_DATA_ORDER_MSB;
    c700:	2300      	movs	r3, #0
    c702:	6063      	str	r3, [r4, #4]
	config->transfer_mode    = SPI_TRANSFER_MODE_0;
    c704:	60a3      	str	r3, [r4, #8]
	config->character_size   = SPI_CHARACTER_SIZE_8BIT;
    c706:	7423      	strb	r3, [r4, #16]
	config->run_in_standby   = false;
    c708:	7463      	strb	r3, [r4, #17]
	config->receiver_enable  = true;
    c70a:	74a2      	strb	r2, [r4, #18]
	config->select_slave_low_detect_enable= true;
    c70c:	74e2      	strb	r2, [r4, #19]
	config->master_slave_select_enable= false;
    c70e:	7523      	strb	r3, [r4, #20]
	config->generator_source = GCLK_GENERATOR_0;
    c710:	3223      	adds	r2, #35	; 0x23
    c712:	54a3      	strb	r3, [r4, r2]
	memset(&(config->mode_specific), 0, sizeof(config->mode_specific));
    c714:	0020      	movs	r0, r4
    c716:	3018      	adds	r0, #24
    c718:	3a18      	subs	r2, #24
    c71a:	2100      	movs	r1, #0
    c71c:	4b20      	ldr	r3, [pc, #128]	; (c7a0 <trx_spi_init+0xec>)
    c71e:	4798      	blx	r3
	spi_attach_slave(&slave, &slave_dev_config);
	spi_get_config_defaults(&config);
	config.mux_setting = AT86RFX_SPI_SERCOM_MUX_SETTING;
    c720:	2380      	movs	r3, #128	; 0x80
    c722:	025b      	lsls	r3, r3, #9
    c724:	60e3      	str	r3, [r4, #12]
	config.mode_specific.master.baudrate = AT86RFX_SPI_BAUDRATE;
    c726:	4b1f      	ldr	r3, [pc, #124]	; (c7a4 <trx_spi_init+0xf0>)
    c728:	61a3      	str	r3, [r4, #24]
	config.pinmux_pad0 = AT86RFX_SPI_SERCOM_PINMUX_PAD0;
    c72a:	4b1f      	ldr	r3, [pc, #124]	; (c7a8 <trx_spi_init+0xf4>)
    c72c:	62a3      	str	r3, [r4, #40]	; 0x28
	config.pinmux_pad1 = AT86RFX_SPI_SERCOM_PINMUX_PAD1;
    c72e:	2301      	movs	r3, #1
    c730:	425b      	negs	r3, r3
    c732:	62e3      	str	r3, [r4, #44]	; 0x2c
	config.pinmux_pad2 = AT86RFX_SPI_SERCOM_PINMUX_PAD2;
    c734:	4b1d      	ldr	r3, [pc, #116]	; (c7ac <trx_spi_init+0xf8>)
    c736:	6323      	str	r3, [r4, #48]	; 0x30
	config.pinmux_pad3 = AT86RFX_SPI_SERCOM_PINMUX_PAD3;
    c738:	4b1d      	ldr	r3, [pc, #116]	; (c7b0 <trx_spi_init+0xfc>)
    c73a:	6363      	str	r3, [r4, #52]	; 0x34
	spi_init(&master, AT86RFX_SPI, &config);
    c73c:	4d1d      	ldr	r5, [pc, #116]	; (c7b4 <trx_spi_init+0x100>)
    c73e:	0022      	movs	r2, r4
    c740:	491d      	ldr	r1, [pc, #116]	; (c7b8 <trx_spi_init+0x104>)
    c742:	0028      	movs	r0, r5
    c744:	4b1d      	ldr	r3, [pc, #116]	; (c7bc <trx_spi_init+0x108>)
    c746:	4798      	blx	r3
	SercomSpi *const spi_module = &(module->hw->SPI);
    c748:	682a      	ldr	r2, [r5, #0]
	return (spi_module->SYNCBUSY.reg);
    c74a:	69d3      	ldr	r3, [r2, #28]
	while (spi_is_syncing(module)) {
    c74c:	2b00      	cmp	r3, #0
    c74e:	d1fc      	bne.n	c74a <trx_spi_init+0x96>
	spi_module->CTRLA.reg |= SERCOM_SPI_CTRLA_ENABLE;
    c750:	6813      	ldr	r3, [r2, #0]
    c752:	2502      	movs	r5, #2
    c754:	432b      	orrs	r3, r5
    c756:	6013      	str	r3, [r2, #0]
	spi_enable(&master);

	struct extint_chan_conf eint_chan_conf;
	extint_chan_get_config_defaults(&eint_chan_conf);
    c758:	ac01      	add	r4, sp, #4
    c75a:	0020      	movs	r0, r4
    c75c:	4b18      	ldr	r3, [pc, #96]	; (c7c0 <trx_spi_init+0x10c>)
    c75e:	4798      	blx	r3
	eint_chan_conf.gpio_pin = AT86RFX_IRQ_PIN;
    c760:	2320      	movs	r3, #32
    c762:	9301      	str	r3, [sp, #4]
	eint_chan_conf.gpio_pin_mux = AT86RFX_IRQ_PINMUX;
    c764:	2380      	movs	r3, #128	; 0x80
    c766:	039b      	lsls	r3, r3, #14
    c768:	6063      	str	r3, [r4, #4]
	eint_chan_conf.gpio_pin_pull      = EXTINT_PULL_DOWN;
    c76a:	7225      	strb	r5, [r4, #8]
	#if (SAML21 || SAMR30)
	eint_chan_conf.enable_async_edge_detection = false;
	#else
	eint_chan_conf.wake_if_sleeping    = true;
    c76c:	2301      	movs	r3, #1
    c76e:	7263      	strb	r3, [r4, #9]
	#endif
	eint_chan_conf.filter_input_signal = false;
    c770:	2200      	movs	r2, #0
    c772:	72a2      	strb	r2, [r4, #10]
	eint_chan_conf.detection_criteria  = EXTINT_DETECT_RISING;
    c774:	72e3      	strb	r3, [r4, #11]
	extint_chan_set_config(AT86RFX_IRQ_CHAN, &eint_chan_conf);
    c776:	0021      	movs	r1, r4
    c778:	2000      	movs	r0, #0
    c77a:	4b12      	ldr	r3, [pc, #72]	; (c7c4 <trx_spi_init+0x110>)
    c77c:	4798      	blx	r3
	extint_register_callback(AT86RFX_ISR, AT86RFX_IRQ_CHAN,
    c77e:	2200      	movs	r2, #0
    c780:	2100      	movs	r1, #0
    c782:	4811      	ldr	r0, [pc, #68]	; (c7c8 <trx_spi_init+0x114>)
    c784:	4b11      	ldr	r3, [pc, #68]	; (c7cc <trx_spi_init+0x118>)
    c786:	4798      	blx	r3
	spi_master_setup_device(AT86RFX_SPI, &SPI_AT86RFX_DEVICE, SPI_MODE_0,
			AT86RFX_SPI_BAUDRATE, 0);
	spi_enable(AT86RFX_SPI);
	AT86RFX_INTC_INIT();
#endif
}
    c788:	b005      	add	sp, #20
    c78a:	bd30      	pop	{r4, r5, pc}
    c78c:	200027f4 	.word	0x200027f4
    c790:	200027f8 	.word	0x200027f8
    c794:	00006a8d 	.word	0x00006a8d
    c798:	41004400 	.word	0x41004400
    c79c:	200027fc 	.word	0x200027fc
    c7a0:	00014d49 	.word	0x00014d49
    c7a4:	003d0900 	.word	0x003d0900
    c7a8:	00530005 	.word	0x00530005
    c7ac:	003e0005 	.word	0x003e0005
    c7b0:	00520005 	.word	0x00520005
    c7b4:	20002834 	.word	0x20002834
    c7b8:	42001800 	.word	0x42001800
    c7bc:	0000752d 	.word	0x0000752d
    c7c0:	000067d5 	.word	0x000067d5
    c7c4:	000067e9 	.word	0x000067e9
    c7c8:	0000c699 	.word	0x0000c699
    c7cc:	00006691 	.word	0x00006691

0000c7d0 <PhyReset>:

void PhyReset(void)
{
    c7d0:	b570      	push	{r4, r5, r6, lr}
    c7d2:	4c08      	ldr	r4, [pc, #32]	; (c7f4 <PhyReset+0x24>)
    c7d4:	2580      	movs	r5, #128	; 0x80
    c7d6:	022d      	lsls	r5, r5, #8
    c7d8:	61a5      	str	r5, [r4, #24]
		port_base->OUTCLR.reg = pin_mask;
    c7da:	2280      	movs	r2, #128	; 0x80
    c7dc:	0352      	lsls	r2, r2, #13
    c7de:	4b06      	ldr	r3, [pc, #24]	; (c7f8 <PhyReset+0x28>)
    c7e0:	615a      	str	r2, [r3, #20]
	/* Ensure control lines have correct levels. */
	RST_HIGH();
	SLP_TR_LOW();

	/* Wait typical time of timer TR1. */
	delay_us(330);
    c7e2:	20a5      	movs	r0, #165	; 0xa5
    c7e4:	0040      	lsls	r0, r0, #1
    c7e6:	4e05      	ldr	r6, [pc, #20]	; (c7fc <PhyReset+0x2c>)
    c7e8:	47b0      	blx	r6
    c7ea:	6165      	str	r5, [r4, #20]

	RST_LOW();
	delay_us(10);
    c7ec:	200a      	movs	r0, #10
    c7ee:	47b0      	blx	r6
		port_base->OUTSET.reg = pin_mask;
    c7f0:	61a5      	str	r5, [r4, #24]
	RST_HIGH();
}
    c7f2:	bd70      	pop	{r4, r5, r6, pc}
    c7f4:	41004480 	.word	0x41004480
    c7f8:	41004400 	.word	0x41004400
    c7fc:	00006521 	.word	0x00006521

0000c800 <trx_reg_read>:

uint8_t trx_reg_read(uint8_t addr)
{
    c800:	b570      	push	{r4, r5, r6, lr}
    c802:	b082      	sub	sp, #8
    c804:	0005      	movs	r5, r0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
    c806:	f3ef 8310 	mrs	r3, PRIMASK
	volatile irqflags_t flags = cpu_irq_is_enabled();
    c80a:	425a      	negs	r2, r3
    c80c:	4153      	adcs	r3, r2
    c80e:	9301      	str	r3, [sp, #4]
  __ASM volatile ("cpsid i" : : : "memory");
    c810:	b672      	cpsid	i
  __ASM volatile ("dmb 0xF":::"memory");
    c812:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
    c816:	2200      	movs	r2, #0
    c818:	4b33      	ldr	r3, [pc, #204]	; (c8e8 <trx_reg_read+0xe8>)
    c81a:	701a      	strb	r2, [r3, #0]
	return flags;
    c81c:	9c01      	ldr	r4, [sp, #4]
	/* Prepare the command byte */
	addr |= READ_ACCESS_COMMAND;

#if SAMD || SAMR21 || SAML21 || SAMR30
	/* Start SPI transaction by pulling SEL low */
	spi_select_slave(&master, &slave, true);
    c81e:	4e33      	ldr	r6, [pc, #204]	; (c8ec <trx_reg_read+0xec>)
    c820:	3201      	adds	r2, #1
    c822:	4933      	ldr	r1, [pc, #204]	; (c8f0 <trx_reg_read+0xf0>)
    c824:	0030      	movs	r0, r6
    c826:	4b33      	ldr	r3, [pc, #204]	; (c8f4 <trx_reg_read+0xf4>)
    c828:	4798      	blx	r3
	SercomSpi *const spi_module = &(module->hw->SPI);
    c82a:	6833      	ldr	r3, [r6, #0]

	/* Send the Read command byte */
	while (!spi_is_ready_to_write(&master)) {
    c82c:	2101      	movs	r1, #1
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    c82e:	7e1a      	ldrb	r2, [r3, #24]
    c830:	420a      	tst	r2, r1
    c832:	d0fc      	beq.n	c82e <trx_reg_read+0x2e>
    c834:	7e1a      	ldrb	r2, [r3, #24]
	if (!spi_is_ready_to_write(module)) {
    c836:	07d2      	lsls	r2, r2, #31
    c838:	d502      	bpl.n	c840 <trx_reg_read+0x40>
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    c83a:	2280      	movs	r2, #128	; 0x80
    c83c:	4315      	orrs	r5, r2
    c83e:	629d      	str	r5, [r3, #40]	; 0x28
	}
	spi_write(&master, addr);
	while (!spi_is_write_complete(&master)) {
    c840:	2102      	movs	r1, #2
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
    c842:	7e1a      	ldrb	r2, [r3, #24]
    c844:	420a      	tst	r2, r1
    c846:	d0fc      	beq.n	c842 <trx_reg_read+0x42>
	}
	/* Dummy read since SPI RX is double buffered */
	while (!spi_is_ready_to_read(&master)) {
    c848:	2104      	movs	r1, #4
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    c84a:	7e1a      	ldrb	r2, [r3, #24]
    c84c:	420a      	tst	r2, r1
    c84e:	d0fc      	beq.n	c84a <trx_reg_read+0x4a>
    c850:	7e1a      	ldrb	r2, [r3, #24]
	if (!spi_is_ready_to_read(module)) {
    c852:	0752      	lsls	r2, r2, #29
    c854:	d50c      	bpl.n	c870 <trx_reg_read+0x70>
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    c856:	8b5a      	ldrh	r2, [r3, #26]
    c858:	0752      	lsls	r2, r2, #29
    c85a:	d501      	bpl.n	c860 <trx_reg_read+0x60>
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
    c85c:	2204      	movs	r2, #4
    c85e:	835a      	strh	r2, [r3, #26]
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    c860:	4a22      	ldr	r2, [pc, #136]	; (c8ec <trx_reg_read+0xec>)
    c862:	7992      	ldrb	r2, [r2, #6]
    c864:	2a01      	cmp	r2, #1
    c866:	d034      	beq.n	c8d2 <trx_reg_read+0xd2>
		*rx_data = (uint8_t)spi_module->DATA.reg;
    c868:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    c86a:	b2d2      	uxtb	r2, r2
    c86c:	4922      	ldr	r1, [pc, #136]	; (c8f8 <trx_reg_read+0xf8>)
    c86e:	800a      	strh	r2, [r1, #0]
	}
	spi_read(&master, &dummy_read);

	while (!spi_is_ready_to_write(&master)) {
    c870:	2101      	movs	r1, #1
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    c872:	7e1a      	ldrb	r2, [r3, #24]
    c874:	420a      	tst	r2, r1
    c876:	d0fc      	beq.n	c872 <trx_reg_read+0x72>
    c878:	7e1a      	ldrb	r2, [r3, #24]
	if (!spi_is_ready_to_write(module)) {
    c87a:	07d2      	lsls	r2, r2, #31
    c87c:	d501      	bpl.n	c882 <trx_reg_read+0x82>
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    c87e:	2200      	movs	r2, #0
    c880:	629a      	str	r2, [r3, #40]	; 0x28
	}
	spi_write(&master, 0);
	while (!spi_is_write_complete(&master)) {
    c882:	2102      	movs	r1, #2
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
    c884:	7e1a      	ldrb	r2, [r3, #24]
    c886:	420a      	tst	r2, r1
    c888:	d0fc      	beq.n	c884 <trx_reg_read+0x84>
	}
	while (!spi_is_ready_to_read(&master)) {
    c88a:	2104      	movs	r1, #4
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    c88c:	7e1a      	ldrb	r2, [r3, #24]
    c88e:	420a      	tst	r2, r1
    c890:	d0fc      	beq.n	c88c <trx_reg_read+0x8c>
    c892:	7e1a      	ldrb	r2, [r3, #24]
	uint16_t register_value = 0;
    c894:	2500      	movs	r5, #0
	if (!spi_is_ready_to_read(module)) {
    c896:	0752      	lsls	r2, r2, #29
    c898:	d50a      	bpl.n	c8b0 <trx_reg_read+0xb0>
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    c89a:	8b5a      	ldrh	r2, [r3, #26]
    c89c:	0752      	lsls	r2, r2, #29
    c89e:	d501      	bpl.n	c8a4 <trx_reg_read+0xa4>
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
    c8a0:	2204      	movs	r2, #4
    c8a2:	835a      	strh	r2, [r3, #26]
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    c8a4:	4a11      	ldr	r2, [pc, #68]	; (c8ec <trx_reg_read+0xec>)
    c8a6:	7992      	ldrb	r2, [r2, #6]
    c8a8:	2a01      	cmp	r2, #1
    c8aa:	d018      	beq.n	c8de <trx_reg_read+0xde>
		*rx_data = (uint8_t)spi_module->DATA.reg;
    c8ac:	6a9d      	ldr	r5, [r3, #40]	; 0x28
    c8ae:	b2ed      	uxtb	r5, r5
	}
	spi_read(&master, &register_value);

	/* Stop the SPI transaction by setting SEL high */
	spi_select_slave(&master, &slave, false);
    c8b0:	2200      	movs	r2, #0
    c8b2:	490f      	ldr	r1, [pc, #60]	; (c8f0 <trx_reg_read+0xf0>)
    c8b4:	480d      	ldr	r0, [pc, #52]	; (c8ec <trx_reg_read+0xec>)
    c8b6:	4b0f      	ldr	r3, [pc, #60]	; (c8f4 <trx_reg_read+0xf4>)
    c8b8:	4798      	blx	r3
	if (cpu_irq_is_enabled_flags(flags))
    c8ba:	23ff      	movs	r3, #255	; 0xff
    c8bc:	4223      	tst	r3, r4
    c8be:	d005      	beq.n	c8cc <trx_reg_read+0xcc>
		cpu_irq_enable();
    c8c0:	2201      	movs	r2, #1
    c8c2:	4b09      	ldr	r3, [pc, #36]	; (c8e8 <trx_reg_read+0xe8>)
    c8c4:	701a      	strb	r2, [r3, #0]
    c8c6:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
    c8ca:	b662      	cpsie	i

	/*Restoring the interrupt status which was stored & enabling the global
	 * interrupt */
	LEAVE_TRX_CRITICAL_REGION();

	return register_value;
    c8cc:	b2e8      	uxtb	r0, r5
}
    c8ce:	b002      	add	sp, #8
    c8d0:	bd70      	pop	{r4, r5, r6, pc}
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
    c8d2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    c8d4:	05d2      	lsls	r2, r2, #23
    c8d6:	0dd2      	lsrs	r2, r2, #23
    c8d8:	4907      	ldr	r1, [pc, #28]	; (c8f8 <trx_reg_read+0xf8>)
    c8da:	800a      	strh	r2, [r1, #0]
    c8dc:	e7c8      	b.n	c870 <trx_reg_read+0x70>
    c8de:	6a9d      	ldr	r5, [r3, #40]	; 0x28
    c8e0:	05ed      	lsls	r5, r5, #23
    c8e2:	0ded      	lsrs	r5, r5, #23
    c8e4:	e7e4      	b.n	c8b0 <trx_reg_read+0xb0>
    c8e6:	46c0      	nop			; (mov r8, r8)
    c8e8:	20000008 	.word	0x20000008
    c8ec:	20002834 	.word	0x20002834
    c8f0:	200027f8 	.word	0x200027f8
    c8f4:	000077f1 	.word	0x000077f1
    c8f8:	200027f0 	.word	0x200027f0

0000c8fc <trx_reg_write>:

void trx_reg_write(uint8_t addr, uint8_t data)
{
    c8fc:	b5f0      	push	{r4, r5, r6, r7, lr}
    c8fe:	b083      	sub	sp, #12
    c900:	0006      	movs	r6, r0
    c902:	000c      	movs	r4, r1
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
    c904:	f3ef 8310 	mrs	r3, PRIMASK
	volatile irqflags_t flags = cpu_irq_is_enabled();
    c908:	425a      	negs	r2, r3
    c90a:	4153      	adcs	r3, r2
    c90c:	9301      	str	r3, [sp, #4]
  __ASM volatile ("cpsid i" : : : "memory");
    c90e:	b672      	cpsid	i
  __ASM volatile ("dmb 0xF":::"memory");
    c910:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
    c914:	2200      	movs	r2, #0
    c916:	4b34      	ldr	r3, [pc, #208]	; (c9e8 <trx_reg_write+0xec>)
    c918:	701a      	strb	r2, [r3, #0]
	return flags;
    c91a:	9d01      	ldr	r5, [sp, #4]
	/* Prepare the command byte */
	addr |= WRITE_ACCESS_COMMAND;

#if SAMD || SAMR21 || SAML21 || SAMR30
	/* Start SPI transaction by pulling SEL low */
	spi_select_slave(&master, &slave, true);
    c91c:	4f33      	ldr	r7, [pc, #204]	; (c9ec <trx_reg_write+0xf0>)
    c91e:	3201      	adds	r2, #1
    c920:	4933      	ldr	r1, [pc, #204]	; (c9f0 <trx_reg_write+0xf4>)
    c922:	0038      	movs	r0, r7
    c924:	4b33      	ldr	r3, [pc, #204]	; (c9f4 <trx_reg_write+0xf8>)
    c926:	4798      	blx	r3
	SercomSpi *const spi_module = &(module->hw->SPI);
    c928:	683b      	ldr	r3, [r7, #0]

	/* Send the Read command byte */
	while (!spi_is_ready_to_write(&master)) {
    c92a:	2101      	movs	r1, #1
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    c92c:	7e1a      	ldrb	r2, [r3, #24]
    c92e:	420a      	tst	r2, r1
    c930:	d0fc      	beq.n	c92c <trx_reg_write+0x30>
    c932:	7e1a      	ldrb	r2, [r3, #24]
	if (!spi_is_ready_to_write(module)) {
    c934:	07d2      	lsls	r2, r2, #31
    c936:	d502      	bpl.n	c93e <trx_reg_write+0x42>
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    c938:	22c0      	movs	r2, #192	; 0xc0
    c93a:	4316      	orrs	r6, r2
    c93c:	629e      	str	r6, [r3, #40]	; 0x28
	}
	spi_write(&master, addr);
	while (!spi_is_write_complete(&master)) {
    c93e:	2102      	movs	r1, #2
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
    c940:	7e1a      	ldrb	r2, [r3, #24]
    c942:	420a      	tst	r2, r1
    c944:	d0fc      	beq.n	c940 <trx_reg_write+0x44>
	}
	/* Dummy read since SPI RX is double buffered */
	while (!spi_is_ready_to_read(&master)) {
    c946:	2104      	movs	r1, #4
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    c948:	7e1a      	ldrb	r2, [r3, #24]
    c94a:	420a      	tst	r2, r1
    c94c:	d0fc      	beq.n	c948 <trx_reg_write+0x4c>
    c94e:	7e1a      	ldrb	r2, [r3, #24]
	if (!spi_is_ready_to_read(module)) {
    c950:	0752      	lsls	r2, r2, #29
    c952:	d50c      	bpl.n	c96e <trx_reg_write+0x72>
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    c954:	8b5a      	ldrh	r2, [r3, #26]
    c956:	0752      	lsls	r2, r2, #29
    c958:	d501      	bpl.n	c95e <trx_reg_write+0x62>
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
    c95a:	2204      	movs	r2, #4
    c95c:	835a      	strh	r2, [r3, #26]
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    c95e:	4a23      	ldr	r2, [pc, #140]	; (c9ec <trx_reg_write+0xf0>)
    c960:	7992      	ldrb	r2, [r2, #6]
    c962:	2a01      	cmp	r2, #1
    c964:	d033      	beq.n	c9ce <trx_reg_write+0xd2>
		*rx_data = (uint8_t)spi_module->DATA.reg;
    c966:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    c968:	b2d2      	uxtb	r2, r2
    c96a:	4923      	ldr	r1, [pc, #140]	; (c9f8 <trx_reg_write+0xfc>)
    c96c:	800a      	strh	r2, [r1, #0]
	}
	spi_read(&master, &dummy_read);

	/* Write the byte in the transceiver data register */
	while (!spi_is_ready_to_write(&master)) {
    c96e:	2101      	movs	r1, #1
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    c970:	7e1a      	ldrb	r2, [r3, #24]
    c972:	420a      	tst	r2, r1
    c974:	d0fc      	beq.n	c970 <trx_reg_write+0x74>
    c976:	7e1a      	ldrb	r2, [r3, #24]
	if (!spi_is_ready_to_write(module)) {
    c978:	07d2      	lsls	r2, r2, #31
    c97a:	d500      	bpl.n	c97e <trx_reg_write+0x82>
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    c97c:	629c      	str	r4, [r3, #40]	; 0x28
	}
	spi_write(&master, data);
	while (!spi_is_write_complete(&master)) {
    c97e:	2102      	movs	r1, #2
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
    c980:	7e1a      	ldrb	r2, [r3, #24]
    c982:	420a      	tst	r2, r1
    c984:	d0fc      	beq.n	c980 <trx_reg_write+0x84>
	}
	/* Dummy read since SPI RX is double buffered */
	while (!spi_is_ready_to_read(&master)) {
    c986:	2104      	movs	r1, #4
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    c988:	7e1a      	ldrb	r2, [r3, #24]
    c98a:	420a      	tst	r2, r1
    c98c:	d0fc      	beq.n	c988 <trx_reg_write+0x8c>
    c98e:	7e1a      	ldrb	r2, [r3, #24]
	if (!spi_is_ready_to_read(module)) {
    c990:	0752      	lsls	r2, r2, #29
    c992:	d50c      	bpl.n	c9ae <trx_reg_write+0xb2>
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    c994:	8b5a      	ldrh	r2, [r3, #26]
    c996:	0752      	lsls	r2, r2, #29
    c998:	d501      	bpl.n	c99e <trx_reg_write+0xa2>
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
    c99a:	2204      	movs	r2, #4
    c99c:	835a      	strh	r2, [r3, #26]
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    c99e:	4a13      	ldr	r2, [pc, #76]	; (c9ec <trx_reg_write+0xf0>)
    c9a0:	7992      	ldrb	r2, [r2, #6]
    c9a2:	2a01      	cmp	r2, #1
    c9a4:	d019      	beq.n	c9da <trx_reg_write+0xde>
		*rx_data = (uint8_t)spi_module->DATA.reg;
    c9a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    c9a8:	b2db      	uxtb	r3, r3
    c9aa:	4a13      	ldr	r2, [pc, #76]	; (c9f8 <trx_reg_write+0xfc>)
    c9ac:	8013      	strh	r3, [r2, #0]
	}
	spi_read(&master, &dummy_read);

	/* Stop the SPI transaction by setting SEL high */
	spi_select_slave(&master, &slave, false);
    c9ae:	2200      	movs	r2, #0
    c9b0:	490f      	ldr	r1, [pc, #60]	; (c9f0 <trx_reg_write+0xf4>)
    c9b2:	480e      	ldr	r0, [pc, #56]	; (c9ec <trx_reg_write+0xf0>)
    c9b4:	4b0f      	ldr	r3, [pc, #60]	; (c9f4 <trx_reg_write+0xf8>)
    c9b6:	4798      	blx	r3
	if (cpu_irq_is_enabled_flags(flags))
    c9b8:	23ff      	movs	r3, #255	; 0xff
    c9ba:	422b      	tst	r3, r5
    c9bc:	d005      	beq.n	c9ca <trx_reg_write+0xce>
		cpu_irq_enable();
    c9be:	2201      	movs	r2, #1
    c9c0:	4b09      	ldr	r3, [pc, #36]	; (c9e8 <trx_reg_write+0xec>)
    c9c2:	701a      	strb	r2, [r3, #0]
    c9c4:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
    c9c8:	b662      	cpsie	i
#endif

	/*Restoring the interrupt status which was stored & enabling the global
	 * interrupt */
	LEAVE_TRX_CRITICAL_REGION();
}
    c9ca:	b003      	add	sp, #12
    c9cc:	bdf0      	pop	{r4, r5, r6, r7, pc}
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
    c9ce:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    c9d0:	05d2      	lsls	r2, r2, #23
    c9d2:	0dd2      	lsrs	r2, r2, #23
    c9d4:	4908      	ldr	r1, [pc, #32]	; (c9f8 <trx_reg_write+0xfc>)
    c9d6:	800a      	strh	r2, [r1, #0]
    c9d8:	e7c9      	b.n	c96e <trx_reg_write+0x72>
    c9da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    c9dc:	05db      	lsls	r3, r3, #23
    c9de:	0ddb      	lsrs	r3, r3, #23
    c9e0:	4a05      	ldr	r2, [pc, #20]	; (c9f8 <trx_reg_write+0xfc>)
    c9e2:	8013      	strh	r3, [r2, #0]
    c9e4:	e7e3      	b.n	c9ae <trx_reg_write+0xb2>
    c9e6:	46c0      	nop			; (mov r8, r8)
    c9e8:	20000008 	.word	0x20000008
    c9ec:	20002834 	.word	0x20002834
    c9f0:	200027f8 	.word	0x200027f8
    c9f4:	000077f1 	.word	0x000077f1
    c9f8:	200027f0 	.word	0x200027f0

0000c9fc <trx_frame_read>:
	new_value |= current_reg_value;
	trx_reg_write(reg_addr, new_value);
}

void trx_frame_read(uint8_t *data, uint8_t length)
{
    c9fc:	b5f0      	push	{r4, r5, r6, r7, lr}
    c9fe:	46d6      	mov	lr, sl
    ca00:	464f      	mov	r7, r9
    ca02:	4646      	mov	r6, r8
    ca04:	b5c0      	push	{r6, r7, lr}
    ca06:	b082      	sub	sp, #8
    ca08:	0005      	movs	r5, r0
    ca0a:	000c      	movs	r4, r1
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
    ca0c:	f3ef 8310 	mrs	r3, PRIMASK
	volatile irqflags_t flags = cpu_irq_is_enabled();
    ca10:	425a      	negs	r2, r3
    ca12:	4153      	adcs	r3, r2
    ca14:	9301      	str	r3, [sp, #4]
  __ASM volatile ("cpsid i" : : : "memory");
    ca16:	b672      	cpsid	i
  __ASM volatile ("dmb 0xF":::"memory");
    ca18:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
    ca1c:	2200      	movs	r2, #0
    ca1e:	4b3e      	ldr	r3, [pc, #248]	; (cb18 <trx_frame_read+0x11c>)
    ca20:	701a      	strb	r2, [r3, #0]
	return flags;
    ca22:	9b01      	ldr	r3, [sp, #4]
    ca24:	4698      	mov	r8, r3
	ENTER_TRX_CRITICAL_REGION();

#if SAMD || SAMR21 || SAML21 || SAMR30
	uint16_t temp;
	/* Start SPI transaction by pulling SEL low */
	spi_select_slave(&master, &slave, true);
    ca26:	4f3d      	ldr	r7, [pc, #244]	; (cb1c <trx_frame_read+0x120>)
    ca28:	3201      	adds	r2, #1
    ca2a:	493d      	ldr	r1, [pc, #244]	; (cb20 <trx_frame_read+0x124>)
    ca2c:	0038      	movs	r0, r7
    ca2e:	4b3d      	ldr	r3, [pc, #244]	; (cb24 <trx_frame_read+0x128>)
    ca30:	4798      	blx	r3
	SercomSpi *const spi_module = &(module->hw->SPI);
    ca32:	683b      	ldr	r3, [r7, #0]

	temp = TRX_CMD_FR;

	/* Send the command byte */
	while (!spi_is_ready_to_write(&master)) {
    ca34:	2101      	movs	r1, #1
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    ca36:	7e1a      	ldrb	r2, [r3, #24]
    ca38:	420a      	tst	r2, r1
    ca3a:	d0fc      	beq.n	ca36 <trx_frame_read+0x3a>
    ca3c:	7e1a      	ldrb	r2, [r3, #24]
	if (!spi_is_ready_to_write(module)) {
    ca3e:	07d2      	lsls	r2, r2, #31
    ca40:	d501      	bpl.n	ca46 <trx_frame_read+0x4a>
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    ca42:	2220      	movs	r2, #32
    ca44:	629a      	str	r2, [r3, #40]	; 0x28
	}
	spi_write(&master, temp);
	while (!spi_is_write_complete(&master)) {
    ca46:	2102      	movs	r1, #2
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
    ca48:	7e1a      	ldrb	r2, [r3, #24]
    ca4a:	420a      	tst	r2, r1
    ca4c:	d0fc      	beq.n	ca48 <trx_frame_read+0x4c>
	}
	/* Dummy read since SPI RX is double buffered */
	while (!spi_is_ready_to_read(&master)) {
    ca4e:	2104      	movs	r1, #4
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    ca50:	7e1a      	ldrb	r2, [r3, #24]
    ca52:	420a      	tst	r2, r1
    ca54:	d0fc      	beq.n	ca50 <trx_frame_read+0x54>
    ca56:	7e1a      	ldrb	r2, [r3, #24]
	if (!spi_is_ready_to_read(module)) {
    ca58:	0752      	lsls	r2, r2, #29
    ca5a:	d50c      	bpl.n	ca76 <trx_frame_read+0x7a>
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    ca5c:	8b5a      	ldrh	r2, [r3, #26]
    ca5e:	0752      	lsls	r2, r2, #29
    ca60:	d501      	bpl.n	ca66 <trx_frame_read+0x6a>
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
    ca62:	2204      	movs	r2, #4
    ca64:	835a      	strh	r2, [r3, #26]
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    ca66:	4a2d      	ldr	r2, [pc, #180]	; (cb1c <trx_frame_read+0x120>)
    ca68:	7992      	ldrb	r2, [r2, #6]
    ca6a:	2a01      	cmp	r2, #1
    ca6c:	d013      	beq.n	ca96 <trx_frame_read+0x9a>
		*rx_data = (uint8_t)spi_module->DATA.reg;
    ca6e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    ca70:	b2db      	uxtb	r3, r3
    ca72:	4a2d      	ldr	r2, [pc, #180]	; (cb28 <trx_frame_read+0x12c>)
    ca74:	8013      	strh	r3, [r2, #0]
	}
	spi_read(&master, &dummy_read);

	while (length--) {
    ca76:	1e63      	subs	r3, r4, #1
    ca78:	b2db      	uxtb	r3, r3
    ca7a:	2c00      	cmp	r4, #0
    ca7c:	d036      	beq.n	caec <trx_frame_read+0xf0>
    ca7e:	3301      	adds	r3, #1
    ca80:	469c      	mov	ip, r3
    ca82:	44ac      	add	ip, r5
    ca84:	2720      	movs	r7, #32
	SercomSpi *const spi_module = &(module->hw->SPI);
    ca86:	4e25      	ldr	r6, [pc, #148]	; (cb1c <trx_frame_read+0x120>)
		while (!spi_is_ready_to_write(&master)) {
    ca88:	2001      	movs	r0, #1
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    ca8a:	2300      	movs	r3, #0
    ca8c:	469a      	mov	sl, r3
		}
		spi_write(&master, 0);
		while (!spi_is_write_complete(&master)) {
    ca8e:	2402      	movs	r4, #2
		}
		/* Dummy read since SPI RX is double buffered */
		while (!spi_is_ready_to_read(&master)) {
    ca90:	2104      	movs	r1, #4
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    ca92:	46b1      	mov	r9, r6
    ca94:	e00f      	b.n	cab6 <trx_frame_read+0xba>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
    ca96:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    ca98:	05db      	lsls	r3, r3, #23
    ca9a:	0ddb      	lsrs	r3, r3, #23
    ca9c:	4a22      	ldr	r2, [pc, #136]	; (cb28 <trx_frame_read+0x12c>)
    ca9e:	8013      	strh	r3, [r2, #0]
    caa0:	e7e9      	b.n	ca76 <trx_frame_read+0x7a>
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    caa2:	464a      	mov	r2, r9
    caa4:	7992      	ldrb	r2, [r2, #6]
    caa6:	2a01      	cmp	r2, #1
    caa8:	d01c      	beq.n	cae4 <trx_frame_read+0xe8>
		*rx_data = (uint8_t)spi_module->DATA.reg;
    caaa:	6a9f      	ldr	r7, [r3, #40]	; 0x28
    caac:	b2ff      	uxtb	r7, r7
		}
		spi_read(&master, &temp);
		*data = temp;
    caae:	702f      	strb	r7, [r5, #0]
		data++;
    cab0:	3501      	adds	r5, #1
	while (length--) {
    cab2:	4565      	cmp	r5, ip
    cab4:	d01a      	beq.n	caec <trx_frame_read+0xf0>
	SercomSpi *const spi_module = &(module->hw->SPI);
    cab6:	6833      	ldr	r3, [r6, #0]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    cab8:	7e1a      	ldrb	r2, [r3, #24]
		while (!spi_is_ready_to_write(&master)) {
    caba:	4202      	tst	r2, r0
    cabc:	d0fc      	beq.n	cab8 <trx_frame_read+0xbc>
    cabe:	7e1a      	ldrb	r2, [r3, #24]
	if (!spi_is_ready_to_write(module)) {
    cac0:	4202      	tst	r2, r0
    cac2:	d001      	beq.n	cac8 <trx_frame_read+0xcc>
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    cac4:	4652      	mov	r2, sl
    cac6:	629a      	str	r2, [r3, #40]	; 0x28
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
    cac8:	7e1a      	ldrb	r2, [r3, #24]
		while (!spi_is_write_complete(&master)) {
    caca:	4222      	tst	r2, r4
    cacc:	d0fc      	beq.n	cac8 <trx_frame_read+0xcc>
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    cace:	7e1a      	ldrb	r2, [r3, #24]
		while (!spi_is_ready_to_read(&master)) {
    cad0:	420a      	tst	r2, r1
    cad2:	d0fc      	beq.n	cace <trx_frame_read+0xd2>
    cad4:	7e1a      	ldrb	r2, [r3, #24]
	if (!spi_is_ready_to_read(module)) {
    cad6:	420a      	tst	r2, r1
    cad8:	d0e9      	beq.n	caae <trx_frame_read+0xb2>
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    cada:	8b5a      	ldrh	r2, [r3, #26]
    cadc:	420a      	tst	r2, r1
    cade:	d0e0      	beq.n	caa2 <trx_frame_read+0xa6>
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
    cae0:	8359      	strh	r1, [r3, #26]
    cae2:	e7de      	b.n	caa2 <trx_frame_read+0xa6>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
    cae4:	6a9f      	ldr	r7, [r3, #40]	; 0x28
    cae6:	05ff      	lsls	r7, r7, #23
    cae8:	0dff      	lsrs	r7, r7, #23
    caea:	e7e0      	b.n	caae <trx_frame_read+0xb2>
	}

	/* Stop the SPI transaction by setting SEL high */
	spi_select_slave(&master, &slave, false);
    caec:	2200      	movs	r2, #0
    caee:	490c      	ldr	r1, [pc, #48]	; (cb20 <trx_frame_read+0x124>)
    caf0:	480a      	ldr	r0, [pc, #40]	; (cb1c <trx_frame_read+0x120>)
    caf2:	4b0c      	ldr	r3, [pc, #48]	; (cb24 <trx_frame_read+0x128>)
    caf4:	4798      	blx	r3
	if (cpu_irq_is_enabled_flags(flags))
    caf6:	23ff      	movs	r3, #255	; 0xff
    caf8:	4642      	mov	r2, r8
    cafa:	4213      	tst	r3, r2
    cafc:	d005      	beq.n	cb0a <trx_frame_read+0x10e>
		cpu_irq_enable();
    cafe:	2201      	movs	r2, #1
    cb00:	4b05      	ldr	r3, [pc, #20]	; (cb18 <trx_frame_read+0x11c>)
    cb02:	701a      	strb	r2, [r3, #0]
    cb04:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
    cb08:	b662      	cpsie	i
#endif

	/*Restoring the interrupt status which was stored & enabling the global
	 * interrupt */
	LEAVE_TRX_CRITICAL_REGION();
}
    cb0a:	b002      	add	sp, #8
    cb0c:	bc1c      	pop	{r2, r3, r4}
    cb0e:	4690      	mov	r8, r2
    cb10:	4699      	mov	r9, r3
    cb12:	46a2      	mov	sl, r4
    cb14:	bdf0      	pop	{r4, r5, r6, r7, pc}
    cb16:	46c0      	nop			; (mov r8, r8)
    cb18:	20000008 	.word	0x20000008
    cb1c:	20002834 	.word	0x20002834
    cb20:	200027f8 	.word	0x200027f8
    cb24:	000077f1 	.word	0x000077f1
    cb28:	200027f0 	.word	0x200027f0

0000cb2c <trx_frame_write>:

void trx_frame_write(uint8_t *data, uint8_t length)
{
    cb2c:	b5f0      	push	{r4, r5, r6, r7, lr}
    cb2e:	46c6      	mov	lr, r8
    cb30:	b500      	push	{lr}
    cb32:	b082      	sub	sp, #8
    cb34:	0004      	movs	r4, r0
    cb36:	000d      	movs	r5, r1
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
    cb38:	f3ef 8310 	mrs	r3, PRIMASK
	volatile irqflags_t flags = cpu_irq_is_enabled();
    cb3c:	425a      	negs	r2, r3
    cb3e:	4153      	adcs	r3, r2
    cb40:	9301      	str	r3, [sp, #4]
  __ASM volatile ("cpsid i" : : : "memory");
    cb42:	b672      	cpsid	i
  __ASM volatile ("dmb 0xF":::"memory");
    cb44:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
    cb48:	2200      	movs	r2, #0
    cb4a:	4b3a      	ldr	r3, [pc, #232]	; (cc34 <trx_frame_write+0x108>)
    cb4c:	701a      	strb	r2, [r3, #0]
	return flags;
    cb4e:	9b01      	ldr	r3, [sp, #4]
    cb50:	4698      	mov	r8, r3
	**/
	ENTER_TRX_CRITICAL_REGION();

#if SAMD || SAMR21 || SAML21 || SAMR30
	/* Start SPI transaction by pulling SEL low */
	spi_select_slave(&master, &slave, true);
    cb52:	4f39      	ldr	r7, [pc, #228]	; (cc38 <trx_frame_write+0x10c>)
    cb54:	3201      	adds	r2, #1
    cb56:	4939      	ldr	r1, [pc, #228]	; (cc3c <trx_frame_write+0x110>)
    cb58:	0038      	movs	r0, r7
    cb5a:	4b39      	ldr	r3, [pc, #228]	; (cc40 <trx_frame_write+0x114>)
    cb5c:	4798      	blx	r3
	SercomSpi *const spi_module = &(module->hw->SPI);
    cb5e:	683b      	ldr	r3, [r7, #0]

	temp = TRX_CMD_FW;

	/* Send the command byte */
	while (!spi_is_ready_to_write(&master)) {
    cb60:	2101      	movs	r1, #1
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    cb62:	7e1a      	ldrb	r2, [r3, #24]
    cb64:	420a      	tst	r2, r1
    cb66:	d0fc      	beq.n	cb62 <trx_frame_write+0x36>
    cb68:	7e1a      	ldrb	r2, [r3, #24]
	if (!spi_is_ready_to_write(module)) {
    cb6a:	07d2      	lsls	r2, r2, #31
    cb6c:	d501      	bpl.n	cb72 <trx_frame_write+0x46>
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    cb6e:	2260      	movs	r2, #96	; 0x60
    cb70:	629a      	str	r2, [r3, #40]	; 0x28
	}
	spi_write(&master, temp);
	while (!spi_is_write_complete(&master)) {
    cb72:	2102      	movs	r1, #2
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
    cb74:	7e1a      	ldrb	r2, [r3, #24]
    cb76:	420a      	tst	r2, r1
    cb78:	d0fc      	beq.n	cb74 <trx_frame_write+0x48>
	} 
	/* Dummy read since SPI RX is double buffered */
	while (!spi_is_ready_to_read(&master)) {
    cb7a:	2104      	movs	r1, #4
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    cb7c:	7e1a      	ldrb	r2, [r3, #24]
    cb7e:	420a      	tst	r2, r1
    cb80:	d0fc      	beq.n	cb7c <trx_frame_write+0x50>
    cb82:	7e1a      	ldrb	r2, [r3, #24]
	if (!spi_is_ready_to_read(module)) {
    cb84:	0752      	lsls	r2, r2, #29
    cb86:	d50c      	bpl.n	cba2 <trx_frame_write+0x76>
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    cb88:	8b5a      	ldrh	r2, [r3, #26]
    cb8a:	0752      	lsls	r2, r2, #29
    cb8c:	d501      	bpl.n	cb92 <trx_frame_write+0x66>
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
    cb8e:	2204      	movs	r2, #4
    cb90:	835a      	strh	r2, [r3, #26]
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    cb92:	4a29      	ldr	r2, [pc, #164]	; (cc38 <trx_frame_write+0x10c>)
    cb94:	7992      	ldrb	r2, [r2, #6]
    cb96:	2a01      	cmp	r2, #1
    cb98:	d00b      	beq.n	cbb2 <trx_frame_write+0x86>
		*rx_data = (uint8_t)spi_module->DATA.reg;
    cb9a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    cb9c:	b2d2      	uxtb	r2, r2
    cb9e:	4929      	ldr	r1, [pc, #164]	; (cc44 <trx_frame_write+0x118>)
    cba0:	800a      	strh	r2, [r1, #0]
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    cba2:	4a25      	ldr	r2, [pc, #148]	; (cc38 <trx_frame_write+0x10c>)
    cba4:	7992      	ldrb	r2, [r2, #6]
    cba6:	4694      	mov	ip, r2
    cba8:	0021      	movs	r1, r4
	}
	spi_read(&master, &dummy_read);
	while (length--) {
		while (!spi_is_ready_to_write(&master)) {
    cbaa:	2701      	movs	r7, #1
		}
		spi_write(&master, *data++);
		while (!spi_is_write_complete(&master)) {
    cbac:	2002      	movs	r0, #2
		}
		/* Dummy read since SPI RX is double buffered */
		while (!spi_is_ready_to_read(&master)) {
    cbae:	2404      	movs	r4, #4
    cbb0:	e00d      	b.n	cbce <trx_frame_write+0xa2>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
    cbb2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    cbb4:	05d2      	lsls	r2, r2, #23
    cbb6:	0dd2      	lsrs	r2, r2, #23
    cbb8:	4922      	ldr	r1, [pc, #136]	; (cc44 <trx_frame_write+0x118>)
    cbba:	800a      	strh	r2, [r1, #0]
    cbbc:	e7f1      	b.n	cba2 <trx_frame_write+0x76>
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    cbbe:	4662      	mov	r2, ip
    cbc0:	2a01      	cmp	r2, #1
    cbc2:	d01e      	beq.n	cc02 <trx_frame_write+0xd6>
		*rx_data = (uint8_t)spi_module->DATA.reg;
    cbc4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    cbc6:	b2d2      	uxtb	r2, r2
    cbc8:	4e1e      	ldr	r6, [pc, #120]	; (cc44 <trx_frame_write+0x118>)
    cbca:	8032      	strh	r2, [r6, #0]
    cbcc:	3101      	adds	r1, #1
	while (length--) {
    cbce:	3d01      	subs	r5, #1
    cbd0:	b2ed      	uxtb	r5, r5
    cbd2:	2dff      	cmp	r5, #255	; 0xff
    cbd4:	d01b      	beq.n	cc0e <trx_frame_write+0xe2>
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    cbd6:	7e1a      	ldrb	r2, [r3, #24]
		while (!spi_is_ready_to_write(&master)) {
    cbd8:	423a      	tst	r2, r7
    cbda:	d0fc      	beq.n	cbd6 <trx_frame_write+0xaa>
    cbdc:	7e1a      	ldrb	r2, [r3, #24]
	if (!spi_is_ready_to_write(module)) {
    cbde:	423a      	tst	r2, r7
    cbe0:	d001      	beq.n	cbe6 <trx_frame_write+0xba>
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    cbe2:	780a      	ldrb	r2, [r1, #0]
    cbe4:	629a      	str	r2, [r3, #40]	; 0x28
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
    cbe6:	7e1a      	ldrb	r2, [r3, #24]
		while (!spi_is_write_complete(&master)) {
    cbe8:	4202      	tst	r2, r0
    cbea:	d0fc      	beq.n	cbe6 <trx_frame_write+0xba>
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    cbec:	7e1a      	ldrb	r2, [r3, #24]
		while (!spi_is_ready_to_read(&master)) {
    cbee:	4222      	tst	r2, r4
    cbf0:	d0fc      	beq.n	cbec <trx_frame_write+0xc0>
    cbf2:	7e1a      	ldrb	r2, [r3, #24]
	if (!spi_is_ready_to_read(module)) {
    cbf4:	4222      	tst	r2, r4
    cbf6:	d0e9      	beq.n	cbcc <trx_frame_write+0xa0>
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    cbf8:	8b5a      	ldrh	r2, [r3, #26]
    cbfa:	4222      	tst	r2, r4
    cbfc:	d0df      	beq.n	cbbe <trx_frame_write+0x92>
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
    cbfe:	835c      	strh	r4, [r3, #26]
    cc00:	e7dd      	b.n	cbbe <trx_frame_write+0x92>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
    cc02:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    cc04:	05d2      	lsls	r2, r2, #23
    cc06:	0dd2      	lsrs	r2, r2, #23
    cc08:	4e0e      	ldr	r6, [pc, #56]	; (cc44 <trx_frame_write+0x118>)
    cc0a:	8032      	strh	r2, [r6, #0]
    cc0c:	e7de      	b.n	cbcc <trx_frame_write+0xa0>
		}
		spi_read(&master, &dummy_read);
	}

	/* Stop the SPI transaction by setting SEL high */
	spi_select_slave(&master, &slave, false);
    cc0e:	2200      	movs	r2, #0
    cc10:	490a      	ldr	r1, [pc, #40]	; (cc3c <trx_frame_write+0x110>)
    cc12:	4809      	ldr	r0, [pc, #36]	; (cc38 <trx_frame_write+0x10c>)
    cc14:	4b0a      	ldr	r3, [pc, #40]	; (cc40 <trx_frame_write+0x114>)
    cc16:	4798      	blx	r3
	if (cpu_irq_is_enabled_flags(flags))
    cc18:	23ff      	movs	r3, #255	; 0xff
    cc1a:	4642      	mov	r2, r8
    cc1c:	4213      	tst	r3, r2
    cc1e:	d005      	beq.n	cc2c <trx_frame_write+0x100>
		cpu_irq_enable();
    cc20:	2201      	movs	r2, #1
    cc22:	4b04      	ldr	r3, [pc, #16]	; (cc34 <trx_frame_write+0x108>)
    cc24:	701a      	strb	r2, [r3, #0]
    cc26:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
    cc2a:	b662      	cpsie	i
#endif

	/*Restoring the interrupt status which was stored & enabling the global
	 * interrupt */
	LEAVE_TRX_CRITICAL_REGION();
}
    cc2c:	b002      	add	sp, #8
    cc2e:	bc04      	pop	{r2}
    cc30:	4690      	mov	r8, r2
    cc32:	bdf0      	pop	{r4, r5, r6, r7, pc}
    cc34:	20000008 	.word	0x20000008
    cc38:	20002834 	.word	0x20002834
    cc3c:	200027f8 	.word	0x200027f8
    cc40:	000077f1 	.word	0x000077f1
    cc44:	200027f0 	.word	0x200027f0

0000cc48 <trx_sram_write>:
 * @param addr Start address in the SRAM for the write operation
 * @param data Pointer to the data to be written into SRAM
 * @param length Number of bytes to be written into SRAM
 */
void trx_sram_write(uint8_t addr, uint8_t *data, uint8_t length)
{
    cc48:	b5f0      	push	{r4, r5, r6, r7, lr}
    cc4a:	46c6      	mov	lr, r8
    cc4c:	b500      	push	{lr}
    cc4e:	b082      	sub	sp, #8
    cc50:	0006      	movs	r6, r0
    cc52:	000d      	movs	r5, r1
    cc54:	0014      	movs	r4, r2
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
    cc56:	f3ef 8310 	mrs	r3, PRIMASK
	volatile irqflags_t flags = cpu_irq_is_enabled();
    cc5a:	425a      	negs	r2, r3
    cc5c:	4153      	adcs	r3, r2
    cc5e:	9301      	str	r3, [sp, #4]
  __ASM volatile ("cpsid i" : : : "memory");
    cc60:	b672      	cpsid	i
  __ASM volatile ("dmb 0xF":::"memory");
    cc62:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
    cc66:	2200      	movs	r2, #0
    cc68:	4b4d      	ldr	r3, [pc, #308]	; (cda0 <trx_sram_write+0x158>)
    cc6a:	701a      	strb	r2, [r3, #0]
	return flags;
    cc6c:	9b01      	ldr	r3, [sp, #4]
    cc6e:	4698      	mov	r8, r3
	**/
	ENTER_TRX_CRITICAL_REGION();

#if SAMD || SAMR21 || SAML21 || SAMR30
	/* Start SPI transaction by pulling SEL low */
	spi_select_slave(&master, &slave, true);
    cc70:	4f4c      	ldr	r7, [pc, #304]	; (cda4 <trx_sram_write+0x15c>)
    cc72:	3201      	adds	r2, #1
    cc74:	494c      	ldr	r1, [pc, #304]	; (cda8 <trx_sram_write+0x160>)
    cc76:	0038      	movs	r0, r7
    cc78:	4b4c      	ldr	r3, [pc, #304]	; (cdac <trx_sram_write+0x164>)
    cc7a:	4798      	blx	r3
	SercomSpi *const spi_module = &(module->hw->SPI);
    cc7c:	683b      	ldr	r3, [r7, #0]

	/* Send the command byte */
	temp = TRX_CMD_SW;

	/* Send the command byte */
	while (!spi_is_ready_to_write(&master)) {
    cc7e:	2101      	movs	r1, #1
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    cc80:	7e1a      	ldrb	r2, [r3, #24]
    cc82:	420a      	tst	r2, r1
    cc84:	d0fc      	beq.n	cc80 <trx_sram_write+0x38>
    cc86:	7e1a      	ldrb	r2, [r3, #24]
	if (!spi_is_ready_to_write(module)) {
    cc88:	07d2      	lsls	r2, r2, #31
    cc8a:	d501      	bpl.n	cc90 <trx_sram_write+0x48>
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    cc8c:	2240      	movs	r2, #64	; 0x40
    cc8e:	629a      	str	r2, [r3, #40]	; 0x28
	}
	spi_write(&master, temp);
	while (!spi_is_write_complete(&master)) {
    cc90:	2102      	movs	r1, #2
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
    cc92:	7e1a      	ldrb	r2, [r3, #24]
    cc94:	420a      	tst	r2, r1
    cc96:	d0fc      	beq.n	cc92 <trx_sram_write+0x4a>
	}
	/* Dummy read since SPI RX is double buffered */
	while (!spi_is_ready_to_read(&master)) {
    cc98:	2104      	movs	r1, #4
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    cc9a:	7e1a      	ldrb	r2, [r3, #24]
    cc9c:	420a      	tst	r2, r1
    cc9e:	d0fc      	beq.n	cc9a <trx_sram_write+0x52>
    cca0:	7e1a      	ldrb	r2, [r3, #24]
	if (!spi_is_ready_to_read(module)) {
    cca2:	0752      	lsls	r2, r2, #29
    cca4:	d50c      	bpl.n	ccc0 <trx_sram_write+0x78>
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    cca6:	8b5a      	ldrh	r2, [r3, #26]
    cca8:	0752      	lsls	r2, r2, #29
    ccaa:	d501      	bpl.n	ccb0 <trx_sram_write+0x68>
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
    ccac:	2204      	movs	r2, #4
    ccae:	835a      	strh	r2, [r3, #26]
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    ccb0:	4a3c      	ldr	r2, [pc, #240]	; (cda4 <trx_sram_write+0x15c>)
    ccb2:	7992      	ldrb	r2, [r2, #6]
    ccb4:	2a01      	cmp	r2, #1
    ccb6:	d02b      	beq.n	cd10 <trx_sram_write+0xc8>
		*rx_data = (uint8_t)spi_module->DATA.reg;
    ccb8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    ccba:	b2d2      	uxtb	r2, r2
    ccbc:	493c      	ldr	r1, [pc, #240]	; (cdb0 <trx_sram_write+0x168>)
    ccbe:	800a      	strh	r2, [r1, #0]
	}
	spi_read(&master, &dummy_read);

	/* Send the address from which the write operation should start */
	while (!spi_is_ready_to_write(&master)) {
    ccc0:	2101      	movs	r1, #1
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    ccc2:	7e1a      	ldrb	r2, [r3, #24]
    ccc4:	420a      	tst	r2, r1
    ccc6:	d0fc      	beq.n	ccc2 <trx_sram_write+0x7a>
    ccc8:	7e1a      	ldrb	r2, [r3, #24]
	if (!spi_is_ready_to_write(module)) {
    ccca:	07d2      	lsls	r2, r2, #31
    cccc:	d500      	bpl.n	ccd0 <trx_sram_write+0x88>
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    ccce:	629e      	str	r6, [r3, #40]	; 0x28
	}
	spi_write(&master, addr);
	while (!spi_is_write_complete(&master)) {
    ccd0:	2102      	movs	r1, #2
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
    ccd2:	7e1a      	ldrb	r2, [r3, #24]
    ccd4:	420a      	tst	r2, r1
    ccd6:	d0fc      	beq.n	ccd2 <trx_sram_write+0x8a>
	}
	/* Dummy read since SPI RX is double buffered */
	while (!spi_is_ready_to_read(&master)) {
    ccd8:	2104      	movs	r1, #4
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    ccda:	7e1a      	ldrb	r2, [r3, #24]
    ccdc:	420a      	tst	r2, r1
    ccde:	d0fc      	beq.n	ccda <trx_sram_write+0x92>
    cce0:	7e1a      	ldrb	r2, [r3, #24]
	if (!spi_is_ready_to_read(module)) {
    cce2:	0752      	lsls	r2, r2, #29
    cce4:	d50c      	bpl.n	cd00 <trx_sram_write+0xb8>
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    cce6:	8b5a      	ldrh	r2, [r3, #26]
    cce8:	0752      	lsls	r2, r2, #29
    ccea:	d501      	bpl.n	ccf0 <trx_sram_write+0xa8>
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
    ccec:	2204      	movs	r2, #4
    ccee:	835a      	strh	r2, [r3, #26]
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    ccf0:	4a2c      	ldr	r2, [pc, #176]	; (cda4 <trx_sram_write+0x15c>)
    ccf2:	7992      	ldrb	r2, [r2, #6]
    ccf4:	2a01      	cmp	r2, #1
    ccf6:	d011      	beq.n	cd1c <trx_sram_write+0xd4>
		*rx_data = (uint8_t)spi_module->DATA.reg;
    ccf8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    ccfa:	b2d2      	uxtb	r2, r2
    ccfc:	492c      	ldr	r1, [pc, #176]	; (cdb0 <trx_sram_write+0x168>)
    ccfe:	800a      	strh	r2, [r1, #0]
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    cd00:	4a28      	ldr	r2, [pc, #160]	; (cda4 <trx_sram_write+0x15c>)
    cd02:	7992      	ldrb	r2, [r2, #6]
    cd04:	4694      	mov	ip, r2
    cd06:	0028      	movs	r0, r5
	}
	spi_read(&master, &dummy_read);

	while (length--) {
		while (!spi_is_ready_to_write(&master)) {
    cd08:	2601      	movs	r6, #1
		}
		spi_write(&master, *data++);
		while (!spi_is_write_complete(&master)) {
    cd0a:	2502      	movs	r5, #2
		}
		/* Dummy read since SPI RX is double buffered */
		while (!spi_is_ready_to_read(&master)) {
    cd0c:	2104      	movs	r1, #4
    cd0e:	e013      	b.n	cd38 <trx_sram_write+0xf0>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
    cd10:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    cd12:	05d2      	lsls	r2, r2, #23
    cd14:	0dd2      	lsrs	r2, r2, #23
    cd16:	4926      	ldr	r1, [pc, #152]	; (cdb0 <trx_sram_write+0x168>)
    cd18:	800a      	strh	r2, [r1, #0]
    cd1a:	e7d1      	b.n	ccc0 <trx_sram_write+0x78>
    cd1c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    cd1e:	05d2      	lsls	r2, r2, #23
    cd20:	0dd2      	lsrs	r2, r2, #23
    cd22:	4923      	ldr	r1, [pc, #140]	; (cdb0 <trx_sram_write+0x168>)
    cd24:	800a      	strh	r2, [r1, #0]
    cd26:	e7eb      	b.n	cd00 <trx_sram_write+0xb8>
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    cd28:	4662      	mov	r2, ip
    cd2a:	2a01      	cmp	r2, #1
    cd2c:	d01e      	beq.n	cd6c <trx_sram_write+0x124>
		*rx_data = (uint8_t)spi_module->DATA.reg;
    cd2e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    cd30:	b2d2      	uxtb	r2, r2
    cd32:	4f1f      	ldr	r7, [pc, #124]	; (cdb0 <trx_sram_write+0x168>)
    cd34:	803a      	strh	r2, [r7, #0]
    cd36:	3001      	adds	r0, #1
	while (length--) {
    cd38:	3c01      	subs	r4, #1
    cd3a:	b2e4      	uxtb	r4, r4
    cd3c:	2cff      	cmp	r4, #255	; 0xff
    cd3e:	d01b      	beq.n	cd78 <trx_sram_write+0x130>
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    cd40:	7e1a      	ldrb	r2, [r3, #24]
		while (!spi_is_ready_to_write(&master)) {
    cd42:	4232      	tst	r2, r6
    cd44:	d0fc      	beq.n	cd40 <trx_sram_write+0xf8>
    cd46:	7e1a      	ldrb	r2, [r3, #24]
	if (!spi_is_ready_to_write(module)) {
    cd48:	4232      	tst	r2, r6
    cd4a:	d001      	beq.n	cd50 <trx_sram_write+0x108>
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    cd4c:	7802      	ldrb	r2, [r0, #0]
    cd4e:	629a      	str	r2, [r3, #40]	; 0x28
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
    cd50:	7e1a      	ldrb	r2, [r3, #24]
		while (!spi_is_write_complete(&master)) {
    cd52:	422a      	tst	r2, r5
    cd54:	d0fc      	beq.n	cd50 <trx_sram_write+0x108>
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    cd56:	7e1a      	ldrb	r2, [r3, #24]
		while (!spi_is_ready_to_read(&master)) {
    cd58:	420a      	tst	r2, r1
    cd5a:	d0fc      	beq.n	cd56 <trx_sram_write+0x10e>
    cd5c:	7e1a      	ldrb	r2, [r3, #24]
	if (!spi_is_ready_to_read(module)) {
    cd5e:	420a      	tst	r2, r1
    cd60:	d0e9      	beq.n	cd36 <trx_sram_write+0xee>
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    cd62:	8b5a      	ldrh	r2, [r3, #26]
    cd64:	420a      	tst	r2, r1
    cd66:	d0df      	beq.n	cd28 <trx_sram_write+0xe0>
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
    cd68:	8359      	strh	r1, [r3, #26]
    cd6a:	e7dd      	b.n	cd28 <trx_sram_write+0xe0>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
    cd6c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    cd6e:	05d2      	lsls	r2, r2, #23
    cd70:	0dd2      	lsrs	r2, r2, #23
    cd72:	4f0f      	ldr	r7, [pc, #60]	; (cdb0 <trx_sram_write+0x168>)
    cd74:	803a      	strh	r2, [r7, #0]
    cd76:	e7de      	b.n	cd36 <trx_sram_write+0xee>
		}
		spi_read(&master, &dummy_read);
	}

	/* Stop the SPI transaction by setting SEL high */
	spi_select_slave(&master, &slave, false);
    cd78:	2200      	movs	r2, #0
    cd7a:	490b      	ldr	r1, [pc, #44]	; (cda8 <trx_sram_write+0x160>)
    cd7c:	4809      	ldr	r0, [pc, #36]	; (cda4 <trx_sram_write+0x15c>)
    cd7e:	4b0b      	ldr	r3, [pc, #44]	; (cdac <trx_sram_write+0x164>)
    cd80:	4798      	blx	r3
	if (cpu_irq_is_enabled_flags(flags))
    cd82:	23ff      	movs	r3, #255	; 0xff
    cd84:	4642      	mov	r2, r8
    cd86:	4213      	tst	r3, r2
    cd88:	d005      	beq.n	cd96 <trx_sram_write+0x14e>
		cpu_irq_enable();
    cd8a:	2201      	movs	r2, #1
    cd8c:	4b04      	ldr	r3, [pc, #16]	; (cda0 <trx_sram_write+0x158>)
    cd8e:	701a      	strb	r2, [r3, #0]
    cd90:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
    cd94:	b662      	cpsie	i
#endif

	/*Restoring the interrupt status which was stored & enabling the global
	 * interrupt */
	LEAVE_TRX_CRITICAL_REGION();
}
    cd96:	b002      	add	sp, #8
    cd98:	bc04      	pop	{r2}
    cd9a:	4690      	mov	r8, r2
    cd9c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    cd9e:	46c0      	nop			; (mov r8, r8)
    cda0:	20000008 	.word	0x20000008
    cda4:	20002834 	.word	0x20002834
    cda8:	200027f8 	.word	0x200027f8
    cdac:	000077f1 	.word	0x000077f1
    cdb0:	200027f0 	.word	0x200027f0

0000cdb4 <trx_sram_read>:
 * @param[in] addr Start address in SRAM for read operation
 * @param[out] data Pointer to the location where data stored
 * @param[in] length Number of bytes to be read from SRAM
 */
void trx_sram_read(uint8_t addr, uint8_t *data, uint8_t length)
{
    cdb4:	b5f0      	push	{r4, r5, r6, r7, lr}
    cdb6:	46d6      	mov	lr, sl
    cdb8:	464f      	mov	r7, r9
    cdba:	4646      	mov	r6, r8
    cdbc:	b5c0      	push	{r6, r7, lr}
    cdbe:	b082      	sub	sp, #8
    cdc0:	0004      	movs	r4, r0
    cdc2:	000d      	movs	r5, r1
    cdc4:	0017      	movs	r7, r2
	delay_us(1); /* wap_rf4ce */
    cdc6:	2001      	movs	r0, #1
    cdc8:	4b56      	ldr	r3, [pc, #344]	; (cf24 <trx_sram_read+0x170>)
    cdca:	4798      	blx	r3
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
    cdcc:	f3ef 8310 	mrs	r3, PRIMASK
	volatile irqflags_t flags = cpu_irq_is_enabled();
    cdd0:	425a      	negs	r2, r3
    cdd2:	4153      	adcs	r3, r2
    cdd4:	9301      	str	r3, [sp, #4]
  __ASM volatile ("cpsid i" : : : "memory");
    cdd6:	b672      	cpsid	i
  __ASM volatile ("dmb 0xF":::"memory");
    cdd8:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
    cddc:	2200      	movs	r2, #0
    cdde:	4b52      	ldr	r3, [pc, #328]	; (cf28 <trx_sram_read+0x174>)
    cde0:	701a      	strb	r2, [r3, #0]
	return flags;
    cde2:	9b01      	ldr	r3, [sp, #4]
    cde4:	4698      	mov	r8, r3
	**/
	ENTER_TRX_CRITICAL_REGION();
#if SAMD || SAMR21 || SAML21 || SAMR30
	uint16_t temp;
	/* Start SPI transaction by pulling SEL low */
	spi_select_slave(&master, &slave, true);
    cde6:	4e51      	ldr	r6, [pc, #324]	; (cf2c <trx_sram_read+0x178>)
    cde8:	3201      	adds	r2, #1
    cdea:	4951      	ldr	r1, [pc, #324]	; (cf30 <trx_sram_read+0x17c>)
    cdec:	0030      	movs	r0, r6
    cdee:	4b51      	ldr	r3, [pc, #324]	; (cf34 <trx_sram_read+0x180>)
    cdf0:	4798      	blx	r3
	SercomSpi *const spi_module = &(module->hw->SPI);
    cdf2:	6833      	ldr	r3, [r6, #0]

	temp = TRX_CMD_SR;

	/* Send the command byte */
	while (!spi_is_ready_to_write(&master)) {
    cdf4:	2101      	movs	r1, #1
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    cdf6:	7e1a      	ldrb	r2, [r3, #24]
    cdf8:	420a      	tst	r2, r1
    cdfa:	d0fc      	beq.n	cdf6 <trx_sram_read+0x42>
    cdfc:	7e1a      	ldrb	r2, [r3, #24]
	if (!spi_is_ready_to_write(module)) {
    cdfe:	07d2      	lsls	r2, r2, #31
    ce00:	d501      	bpl.n	ce06 <trx_sram_read+0x52>
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    ce02:	2200      	movs	r2, #0
    ce04:	629a      	str	r2, [r3, #40]	; 0x28
	}
	spi_write(&master, temp);
	while (!spi_is_write_complete(&master)) {
    ce06:	2102      	movs	r1, #2
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
    ce08:	7e1a      	ldrb	r2, [r3, #24]
    ce0a:	420a      	tst	r2, r1
    ce0c:	d0fc      	beq.n	ce08 <trx_sram_read+0x54>
	}
	/* Dummy read since SPI RX is double buffered */
	while (!spi_is_ready_to_read(&master)) {
    ce0e:	2104      	movs	r1, #4
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    ce10:	7e1a      	ldrb	r2, [r3, #24]
    ce12:	420a      	tst	r2, r1
    ce14:	d0fc      	beq.n	ce10 <trx_sram_read+0x5c>
    ce16:	7e1a      	ldrb	r2, [r3, #24]
	if (!spi_is_ready_to_read(module)) {
    ce18:	0752      	lsls	r2, r2, #29
    ce1a:	d50c      	bpl.n	ce36 <trx_sram_read+0x82>
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    ce1c:	8b5a      	ldrh	r2, [r3, #26]
    ce1e:	0752      	lsls	r2, r2, #29
    ce20:	d501      	bpl.n	ce26 <trx_sram_read+0x72>
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
    ce22:	2204      	movs	r2, #4
    ce24:	835a      	strh	r2, [r3, #26]
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    ce26:	4a41      	ldr	r2, [pc, #260]	; (cf2c <trx_sram_read+0x178>)
    ce28:	7992      	ldrb	r2, [r2, #6]
    ce2a:	2a01      	cmp	r2, #1
    ce2c:	d033      	beq.n	ce96 <trx_sram_read+0xe2>
		*rx_data = (uint8_t)spi_module->DATA.reg;
    ce2e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    ce30:	b2d2      	uxtb	r2, r2
    ce32:	4941      	ldr	r1, [pc, #260]	; (cf38 <trx_sram_read+0x184>)
    ce34:	800a      	strh	r2, [r1, #0]
	}
	spi_read(&master, &dummy_read);

	/* Send the address from which the read operation should start */
	while (!spi_is_ready_to_write(&master)) {
    ce36:	2101      	movs	r1, #1
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    ce38:	7e1a      	ldrb	r2, [r3, #24]
    ce3a:	420a      	tst	r2, r1
    ce3c:	d0fc      	beq.n	ce38 <trx_sram_read+0x84>
    ce3e:	7e1a      	ldrb	r2, [r3, #24]
	if (!spi_is_ready_to_write(module)) {
    ce40:	07d2      	lsls	r2, r2, #31
    ce42:	d500      	bpl.n	ce46 <trx_sram_read+0x92>
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    ce44:	629c      	str	r4, [r3, #40]	; 0x28
	}
	spi_write(&master, addr);
	while (!spi_is_write_complete(&master)) {
    ce46:	2102      	movs	r1, #2
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
    ce48:	7e1a      	ldrb	r2, [r3, #24]
    ce4a:	420a      	tst	r2, r1
    ce4c:	d0fc      	beq.n	ce48 <trx_sram_read+0x94>
	}
	/* Dummy read since SPI RX is double buffered */
	while (!spi_is_ready_to_read(&master)) {
    ce4e:	2104      	movs	r1, #4
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    ce50:	7e1a      	ldrb	r2, [r3, #24]
    ce52:	420a      	tst	r2, r1
    ce54:	d0fc      	beq.n	ce50 <trx_sram_read+0x9c>
    ce56:	7e1a      	ldrb	r2, [r3, #24]
	if (!spi_is_ready_to_read(module)) {
    ce58:	0752      	lsls	r2, r2, #29
    ce5a:	d50c      	bpl.n	ce76 <trx_sram_read+0xc2>
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    ce5c:	8b5a      	ldrh	r2, [r3, #26]
    ce5e:	0752      	lsls	r2, r2, #29
    ce60:	d501      	bpl.n	ce66 <trx_sram_read+0xb2>
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
    ce62:	2204      	movs	r2, #4
    ce64:	835a      	strh	r2, [r3, #26]
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    ce66:	4a31      	ldr	r2, [pc, #196]	; (cf2c <trx_sram_read+0x178>)
    ce68:	7992      	ldrb	r2, [r2, #6]
    ce6a:	2a01      	cmp	r2, #1
    ce6c:	d019      	beq.n	cea2 <trx_sram_read+0xee>
		*rx_data = (uint8_t)spi_module->DATA.reg;
    ce6e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    ce70:	b2db      	uxtb	r3, r3
    ce72:	4a31      	ldr	r2, [pc, #196]	; (cf38 <trx_sram_read+0x184>)
    ce74:	8013      	strh	r3, [r2, #0]
	}
	spi_read(&master, &dummy_read);

	/* Upload the received byte in the user provided location */
	while (length--) {
    ce76:	1e7b      	subs	r3, r7, #1
    ce78:	b2db      	uxtb	r3, r3
    ce7a:	2f00      	cmp	r7, #0
    ce7c:	d03c      	beq.n	cef8 <trx_sram_read+0x144>
    ce7e:	3301      	adds	r3, #1
    ce80:	469c      	mov	ip, r3
    ce82:	44ac      	add	ip, r5
    ce84:	2700      	movs	r7, #0
	SercomSpi *const spi_module = &(module->hw->SPI);
    ce86:	4e29      	ldr	r6, [pc, #164]	; (cf2c <trx_sram_read+0x178>)
		while (!spi_is_ready_to_write(&master)) {
    ce88:	2001      	movs	r0, #1
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    ce8a:	2300      	movs	r3, #0
    ce8c:	469a      	mov	sl, r3
		}
		spi_write(&master, 0);
		while (!spi_is_write_complete(&master)) {
    ce8e:	2402      	movs	r4, #2
		}
		/* Dummy read since SPI RX is double buffered */
		while (!spi_is_ready_to_read(&master)) {
    ce90:	2104      	movs	r1, #4
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    ce92:	46b1      	mov	r9, r6
    ce94:	e015      	b.n	cec2 <trx_sram_read+0x10e>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
    ce96:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    ce98:	05d2      	lsls	r2, r2, #23
    ce9a:	0dd2      	lsrs	r2, r2, #23
    ce9c:	4926      	ldr	r1, [pc, #152]	; (cf38 <trx_sram_read+0x184>)
    ce9e:	800a      	strh	r2, [r1, #0]
    cea0:	e7c9      	b.n	ce36 <trx_sram_read+0x82>
    cea2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    cea4:	05db      	lsls	r3, r3, #23
    cea6:	0ddb      	lsrs	r3, r3, #23
    cea8:	4a23      	ldr	r2, [pc, #140]	; (cf38 <trx_sram_read+0x184>)
    ceaa:	8013      	strh	r3, [r2, #0]
    ceac:	e7e3      	b.n	ce76 <trx_sram_read+0xc2>
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    ceae:	464a      	mov	r2, r9
    ceb0:	7992      	ldrb	r2, [r2, #6]
    ceb2:	2a01      	cmp	r2, #1
    ceb4:	d01c      	beq.n	cef0 <trx_sram_read+0x13c>
		*rx_data = (uint8_t)spi_module->DATA.reg;
    ceb6:	6a9f      	ldr	r7, [r3, #40]	; 0x28
    ceb8:	b2ff      	uxtb	r7, r7
		}
		spi_read(&master, &temp);
		*data = temp;
    ceba:	702f      	strb	r7, [r5, #0]
		data++;
    cebc:	3501      	adds	r5, #1
	while (length--) {
    cebe:	4565      	cmp	r5, ip
    cec0:	d01a      	beq.n	cef8 <trx_sram_read+0x144>
	SercomSpi *const spi_module = &(module->hw->SPI);
    cec2:	6833      	ldr	r3, [r6, #0]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    cec4:	7e1a      	ldrb	r2, [r3, #24]
		while (!spi_is_ready_to_write(&master)) {
    cec6:	4202      	tst	r2, r0
    cec8:	d0fc      	beq.n	cec4 <trx_sram_read+0x110>
    ceca:	7e1a      	ldrb	r2, [r3, #24]
	if (!spi_is_ready_to_write(module)) {
    cecc:	4202      	tst	r2, r0
    cece:	d001      	beq.n	ced4 <trx_sram_read+0x120>
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    ced0:	4652      	mov	r2, sl
    ced2:	629a      	str	r2, [r3, #40]	; 0x28
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
    ced4:	7e1a      	ldrb	r2, [r3, #24]
		while (!spi_is_write_complete(&master)) {
    ced6:	4222      	tst	r2, r4
    ced8:	d0fc      	beq.n	ced4 <trx_sram_read+0x120>
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    ceda:	7e1a      	ldrb	r2, [r3, #24]
		while (!spi_is_ready_to_read(&master)) {
    cedc:	420a      	tst	r2, r1
    cede:	d0fc      	beq.n	ceda <trx_sram_read+0x126>
    cee0:	7e1a      	ldrb	r2, [r3, #24]
	if (!spi_is_ready_to_read(module)) {
    cee2:	420a      	tst	r2, r1
    cee4:	d0e9      	beq.n	ceba <trx_sram_read+0x106>
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    cee6:	8b5a      	ldrh	r2, [r3, #26]
    cee8:	420a      	tst	r2, r1
    ceea:	d0e0      	beq.n	ceae <trx_sram_read+0xfa>
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
    ceec:	8359      	strh	r1, [r3, #26]
    ceee:	e7de      	b.n	ceae <trx_sram_read+0xfa>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
    cef0:	6a9f      	ldr	r7, [r3, #40]	; 0x28
    cef2:	05ff      	lsls	r7, r7, #23
    cef4:	0dff      	lsrs	r7, r7, #23
    cef6:	e7e0      	b.n	ceba <trx_sram_read+0x106>
	}

	/* Stop the SPI transaction by setting SEL high */
	spi_select_slave(&master, &slave, false);
    cef8:	2200      	movs	r2, #0
    cefa:	490d      	ldr	r1, [pc, #52]	; (cf30 <trx_sram_read+0x17c>)
    cefc:	480b      	ldr	r0, [pc, #44]	; (cf2c <trx_sram_read+0x178>)
    cefe:	4b0d      	ldr	r3, [pc, #52]	; (cf34 <trx_sram_read+0x180>)
    cf00:	4798      	blx	r3
	if (cpu_irq_is_enabled_flags(flags))
    cf02:	23ff      	movs	r3, #255	; 0xff
    cf04:	4642      	mov	r2, r8
    cf06:	4213      	tst	r3, r2
    cf08:	d005      	beq.n	cf16 <trx_sram_read+0x162>
		cpu_irq_enable();
    cf0a:	2201      	movs	r2, #1
    cf0c:	4b06      	ldr	r3, [pc, #24]	; (cf28 <trx_sram_read+0x174>)
    cf0e:	701a      	strb	r2, [r3, #0]
    cf10:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
    cf14:	b662      	cpsie	i
#endif

	/*Restoring the interrupt status which was stored & enabling the global
	 * interrupt */
	LEAVE_TRX_CRITICAL_REGION();
}
    cf16:	b002      	add	sp, #8
    cf18:	bc1c      	pop	{r2, r3, r4}
    cf1a:	4690      	mov	r8, r2
    cf1c:	4699      	mov	r9, r3
    cf1e:	46a2      	mov	sl, r4
    cf20:	bdf0      	pop	{r4, r5, r6, r7, pc}
    cf22:	46c0      	nop			; (mov r8, r8)
    cf24:	00006521 	.word	0x00006521
    cf28:	20000008 	.word	0x20000008
    cf2c:	20002834 	.word	0x20002834
    cf30:	200027f8 	.word	0x200027f8
    cf34:	000077f1 	.word	0x000077f1
    cf38:	200027f0 	.word	0x200027f0

0000cf3c <trx_aes_wrrd>:
 * @param addr Start address in the SRAM for the write operation
 * @param idata Pointer to the data written/read into/from SRAM
 * @param length Number of bytes written/read into/from SRAM
 */
void trx_aes_wrrd(uint8_t addr, uint8_t *idata, uint8_t length)
{
    cf3c:	b5f0      	push	{r4, r5, r6, r7, lr}
    cf3e:	46d6      	mov	lr, sl
    cf40:	464f      	mov	r7, r9
    cf42:	4646      	mov	r6, r8
    cf44:	b5c0      	push	{r6, r7, lr}
    cf46:	0006      	movs	r6, r0
    cf48:	468a      	mov	sl, r1
    cf4a:	0014      	movs	r4, r2
#if SAMD || SAMR21 || SAML21 || SAMR30
	uint16_t odata_var = 0;
#endif
	uint8_t temp;

	delay_us(1); /* wap_rf4ce */
    cf4c:	2001      	movs	r0, #1
    cf4e:	4b76      	ldr	r3, [pc, #472]	; (d128 <trx_aes_wrrd+0x1ec>)
    cf50:	4798      	blx	r3

	ENTER_TRX_REGION();
    cf52:	2100      	movs	r1, #0
    cf54:	2000      	movs	r0, #0
    cf56:	4b75      	ldr	r3, [pc, #468]	; (d12c <trx_aes_wrrd+0x1f0>)
    cf58:	4798      	blx	r3
		/* wait until SPI gets available */
	}
#endif
#if SAMD || SAMR21 || SAML21 || SAMR30
	/* Start SPI transaction by pulling SEL low */
	spi_select_slave(&master, &slave, true);
    cf5a:	4f75      	ldr	r7, [pc, #468]	; (d130 <trx_aes_wrrd+0x1f4>)
    cf5c:	2201      	movs	r2, #1
    cf5e:	4975      	ldr	r1, [pc, #468]	; (d134 <trx_aes_wrrd+0x1f8>)
    cf60:	0038      	movs	r0, r7
    cf62:	4b75      	ldr	r3, [pc, #468]	; (d138 <trx_aes_wrrd+0x1fc>)
    cf64:	4798      	blx	r3
	SercomSpi *const spi_module = &(module->hw->SPI);
    cf66:	683b      	ldr	r3, [r7, #0]

	/* Send the command byte */
	temp = TRX_CMD_SW;

	while (!spi_is_ready_to_write(&master)) {
    cf68:	2101      	movs	r1, #1
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    cf6a:	7e1a      	ldrb	r2, [r3, #24]
    cf6c:	420a      	tst	r2, r1
    cf6e:	d0fc      	beq.n	cf6a <trx_aes_wrrd+0x2e>
    cf70:	7e1a      	ldrb	r2, [r3, #24]
	if (!spi_is_ready_to_write(module)) {
    cf72:	07d2      	lsls	r2, r2, #31
    cf74:	d501      	bpl.n	cf7a <trx_aes_wrrd+0x3e>
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    cf76:	2240      	movs	r2, #64	; 0x40
    cf78:	629a      	str	r2, [r3, #40]	; 0x28
	}
	spi_write(&master, temp);
	while (!spi_is_write_complete(&master)) {
    cf7a:	2102      	movs	r1, #2
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
    cf7c:	7e1a      	ldrb	r2, [r3, #24]
    cf7e:	420a      	tst	r2, r1
    cf80:	d0fc      	beq.n	cf7c <trx_aes_wrrd+0x40>
	}
	/* Dummy read since SPI RX is double buffered */
	while (!spi_is_ready_to_read(&master)) {
    cf82:	2104      	movs	r1, #4
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    cf84:	7e1a      	ldrb	r2, [r3, #24]
    cf86:	420a      	tst	r2, r1
    cf88:	d0fc      	beq.n	cf84 <trx_aes_wrrd+0x48>
    cf8a:	7e1a      	ldrb	r2, [r3, #24]
	if (!spi_is_ready_to_read(module)) {
    cf8c:	0752      	lsls	r2, r2, #29
    cf8e:	d50c      	bpl.n	cfaa <trx_aes_wrrd+0x6e>
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    cf90:	8b5a      	ldrh	r2, [r3, #26]
    cf92:	0752      	lsls	r2, r2, #29
    cf94:	d501      	bpl.n	cf9a <trx_aes_wrrd+0x5e>
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
    cf96:	2204      	movs	r2, #4
    cf98:	835a      	strh	r2, [r3, #26]
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    cf9a:	4a65      	ldr	r2, [pc, #404]	; (d130 <trx_aes_wrrd+0x1f4>)
    cf9c:	7992      	ldrb	r2, [r2, #6]
    cf9e:	2a01      	cmp	r2, #1
    cfa0:	d055      	beq.n	d04e <trx_aes_wrrd+0x112>
		*rx_data = (uint8_t)spi_module->DATA.reg;
    cfa2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    cfa4:	b2d2      	uxtb	r2, r2
    cfa6:	4965      	ldr	r1, [pc, #404]	; (d13c <trx_aes_wrrd+0x200>)
    cfa8:	800a      	strh	r2, [r1, #0]
	}
	spi_read(&master, &dummy_read);

	/* write SRAM start address */
	while (!spi_is_ready_to_write(&master)) {
    cfaa:	2101      	movs	r1, #1
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    cfac:	7e1a      	ldrb	r2, [r3, #24]
    cfae:	420a      	tst	r2, r1
    cfb0:	d0fc      	beq.n	cfac <trx_aes_wrrd+0x70>
    cfb2:	7e1a      	ldrb	r2, [r3, #24]
	if (!spi_is_ready_to_write(module)) {
    cfb4:	07d2      	lsls	r2, r2, #31
    cfb6:	d500      	bpl.n	cfba <trx_aes_wrrd+0x7e>
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    cfb8:	629e      	str	r6, [r3, #40]	; 0x28
	}
	spi_write(&master, addr);
	while (!spi_is_write_complete(&master)) {
    cfba:	2102      	movs	r1, #2
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
    cfbc:	7e1a      	ldrb	r2, [r3, #24]
    cfbe:	420a      	tst	r2, r1
    cfc0:	d0fc      	beq.n	cfbc <trx_aes_wrrd+0x80>
	}
	/* Dummy read since SPI RX is double buffered */
	while (!spi_is_ready_to_read(&master)) {
    cfc2:	2104      	movs	r1, #4
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    cfc4:	7e1a      	ldrb	r2, [r3, #24]
    cfc6:	420a      	tst	r2, r1
    cfc8:	d0fc      	beq.n	cfc4 <trx_aes_wrrd+0x88>
    cfca:	7e1a      	ldrb	r2, [r3, #24]
	if (!spi_is_ready_to_read(module)) {
    cfcc:	0752      	lsls	r2, r2, #29
    cfce:	d50c      	bpl.n	cfea <trx_aes_wrrd+0xae>
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    cfd0:	8b5a      	ldrh	r2, [r3, #26]
    cfd2:	0752      	lsls	r2, r2, #29
    cfd4:	d501      	bpl.n	cfda <trx_aes_wrrd+0x9e>
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
    cfd6:	2204      	movs	r2, #4
    cfd8:	835a      	strh	r2, [r3, #26]
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    cfda:	4a55      	ldr	r2, [pc, #340]	; (d130 <trx_aes_wrrd+0x1f4>)
    cfdc:	7992      	ldrb	r2, [r2, #6]
    cfde:	2a01      	cmp	r2, #1
    cfe0:	d03b      	beq.n	d05a <trx_aes_wrrd+0x11e>
		*rx_data = (uint8_t)spi_module->DATA.reg;
    cfe2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    cfe4:	b2d2      	uxtb	r2, r2
    cfe6:	4955      	ldr	r1, [pc, #340]	; (d13c <trx_aes_wrrd+0x200>)
    cfe8:	800a      	strh	r2, [r1, #0]

	/* now transfer data */
	odata = idata;

	/* write data byte 0 - the obtained value in SPDR is meaningless */
	while (!spi_is_ready_to_write(&master)) {
    cfea:	2101      	movs	r1, #1
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    cfec:	7e1a      	ldrb	r2, [r3, #24]
    cfee:	420a      	tst	r2, r1
    cff0:	d0fc      	beq.n	cfec <trx_aes_wrrd+0xb0>
    cff2:	7e1a      	ldrb	r2, [r3, #24]
	if (!spi_is_ready_to_write(module)) {
    cff4:	07d2      	lsls	r2, r2, #31
    cff6:	d502      	bpl.n	cffe <trx_aes_wrrd+0xc2>
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    cff8:	4652      	mov	r2, sl
    cffa:	7812      	ldrb	r2, [r2, #0]
    cffc:	629a      	str	r2, [r3, #40]	; 0x28
	}
	spi_write(&master, *idata++);
	while (!spi_is_write_complete(&master)) {
    cffe:	2102      	movs	r1, #2
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
    d000:	7e1a      	ldrb	r2, [r3, #24]
    d002:	420a      	tst	r2, r1
    d004:	d0fc      	beq.n	d000 <trx_aes_wrrd+0xc4>
	}
	/* Dummy read since SPI RX is double buffered */
	while (!spi_is_ready_to_read(&master)) {
    d006:	2104      	movs	r1, #4
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    d008:	7e1a      	ldrb	r2, [r3, #24]
    d00a:	420a      	tst	r2, r1
    d00c:	d0fc      	beq.n	d008 <trx_aes_wrrd+0xcc>
    d00e:	7e1a      	ldrb	r2, [r3, #24]
	if (!spi_is_ready_to_read(module)) {
    d010:	0752      	lsls	r2, r2, #29
    d012:	d50c      	bpl.n	d02e <trx_aes_wrrd+0xf2>
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    d014:	8b5a      	ldrh	r2, [r3, #26]
    d016:	0752      	lsls	r2, r2, #29
    d018:	d501      	bpl.n	d01e <trx_aes_wrrd+0xe2>
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
    d01a:	2204      	movs	r2, #4
    d01c:	835a      	strh	r2, [r3, #26]
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    d01e:	4a44      	ldr	r2, [pc, #272]	; (d130 <trx_aes_wrrd+0x1f4>)
    d020:	7992      	ldrb	r2, [r2, #6]
    d022:	2a01      	cmp	r2, #1
    d024:	d01f      	beq.n	d066 <trx_aes_wrrd+0x12a>
		*rx_data = (uint8_t)spi_module->DATA.reg;
    d026:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    d028:	b2db      	uxtb	r3, r3
    d02a:	4a44      	ldr	r2, [pc, #272]	; (d13c <trx_aes_wrrd+0x200>)
    d02c:	8013      	strh	r3, [r2, #0]
	}
	spi_read(&master, &dummy_read);

	/* Reading Spi Data for the length specified */
	while (length > 0) {
    d02e:	2700      	movs	r7, #0
    d030:	2c00      	cmp	r4, #0
    d032:	d043      	beq.n	d0bc <trx_aes_wrrd+0x180>
    d034:	4656      	mov	r6, sl
    d036:	3c01      	subs	r4, #1
    d038:	b2e4      	uxtb	r4, r4
    d03a:	3401      	adds	r4, #1
    d03c:	44a2      	add	sl, r4
    d03e:	46d0      	mov	r8, sl
    d040:	2700      	movs	r7, #0
	SercomSpi *const spi_module = &(module->hw->SPI);
    d042:	4d3b      	ldr	r5, [pc, #236]	; (d130 <trx_aes_wrrd+0x1f4>)
		while (!spi_is_ready_to_write(&master)) {
    d044:	2001      	movs	r0, #1
		}
		spi_write(&master, *idata++);
		while (!spi_is_write_complete(&master)) {
    d046:	2402      	movs	r4, #2
		}
		while (!spi_is_ready_to_read(&master)) {
    d048:	2104      	movs	r1, #4
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    d04a:	46a9      	mov	r9, r5
    d04c:	e01b      	b.n	d086 <trx_aes_wrrd+0x14a>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
    d04e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    d050:	05d2      	lsls	r2, r2, #23
    d052:	0dd2      	lsrs	r2, r2, #23
    d054:	4939      	ldr	r1, [pc, #228]	; (d13c <trx_aes_wrrd+0x200>)
    d056:	800a      	strh	r2, [r1, #0]
    d058:	e7a7      	b.n	cfaa <trx_aes_wrrd+0x6e>
    d05a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    d05c:	05d2      	lsls	r2, r2, #23
    d05e:	0dd2      	lsrs	r2, r2, #23
    d060:	4936      	ldr	r1, [pc, #216]	; (d13c <trx_aes_wrrd+0x200>)
    d062:	800a      	strh	r2, [r1, #0]
    d064:	e7c1      	b.n	cfea <trx_aes_wrrd+0xae>
    d066:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    d068:	05db      	lsls	r3, r3, #23
    d06a:	0ddb      	lsrs	r3, r3, #23
    d06c:	4a33      	ldr	r2, [pc, #204]	; (d13c <trx_aes_wrrd+0x200>)
    d06e:	8013      	strh	r3, [r2, #0]
    d070:	e7dd      	b.n	d02e <trx_aes_wrrd+0xf2>
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    d072:	464a      	mov	r2, r9
    d074:	7992      	ldrb	r2, [r2, #6]
    d076:	2a01      	cmp	r2, #1
    d078:	d01c      	beq.n	d0b4 <trx_aes_wrrd+0x178>
		*rx_data = (uint8_t)spi_module->DATA.reg;
    d07a:	6a9f      	ldr	r7, [r3, #40]	; 0x28
    d07c:	b2ff      	uxtb	r7, r7
		}

#if SAMD || SAMR21 || SAML21 || SAMR30
		spi_read(&master, &odata_var);
		*odata++ = (uint8_t)odata_var;
    d07e:	7037      	strb	r7, [r6, #0]
    d080:	3601      	adds	r6, #1
	while (length > 0) {
    d082:	45b0      	cmp	r8, r6
    d084:	d01a      	beq.n	d0bc <trx_aes_wrrd+0x180>
	SercomSpi *const spi_module = &(module->hw->SPI);
    d086:	682b      	ldr	r3, [r5, #0]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    d088:	7e1a      	ldrb	r2, [r3, #24]
		while (!spi_is_ready_to_write(&master)) {
    d08a:	4202      	tst	r2, r0
    d08c:	d0fc      	beq.n	d088 <trx_aes_wrrd+0x14c>
    d08e:	7e1a      	ldrb	r2, [r3, #24]
	if (!spi_is_ready_to_write(module)) {
    d090:	4202      	tst	r2, r0
    d092:	d001      	beq.n	d098 <trx_aes_wrrd+0x15c>
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    d094:	7872      	ldrb	r2, [r6, #1]
    d096:	629a      	str	r2, [r3, #40]	; 0x28
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
    d098:	7e1a      	ldrb	r2, [r3, #24]
		while (!spi_is_write_complete(&master)) {
    d09a:	4222      	tst	r2, r4
    d09c:	d0fc      	beq.n	d098 <trx_aes_wrrd+0x15c>
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    d09e:	7e1a      	ldrb	r2, [r3, #24]
		while (!spi_is_ready_to_read(&master)) {
    d0a0:	420a      	tst	r2, r1
    d0a2:	d0fc      	beq.n	d09e <trx_aes_wrrd+0x162>
    d0a4:	7e1a      	ldrb	r2, [r3, #24]
	if (!spi_is_ready_to_read(module)) {
    d0a6:	420a      	tst	r2, r1
    d0a8:	d0e9      	beq.n	d07e <trx_aes_wrrd+0x142>
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    d0aa:	8b5a      	ldrh	r2, [r3, #26]
    d0ac:	420a      	tst	r2, r1
    d0ae:	d0e0      	beq.n	d072 <trx_aes_wrrd+0x136>
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
    d0b0:	8359      	strh	r1, [r3, #26]
    d0b2:	e7de      	b.n	d072 <trx_aes_wrrd+0x136>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
    d0b4:	6a9f      	ldr	r7, [r3, #40]	; 0x28
    d0b6:	05ff      	lsls	r7, r7, #23
    d0b8:	0dff      	lsrs	r7, r7, #23
    d0ba:	e7e0      	b.n	d07e <trx_aes_wrrd+0x142>
	SercomSpi *const spi_module = &(module->hw->SPI);
    d0bc:	4b1c      	ldr	r3, [pc, #112]	; (d130 <trx_aes_wrrd+0x1f4>)
    d0be:	681b      	ldr	r3, [r3, #0]
#endif
		length--;
	}

	/* To get the last data byte, write some dummy byte */
	while (!spi_is_ready_to_write(&master)) {
    d0c0:	2101      	movs	r1, #1
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    d0c2:	7e1a      	ldrb	r2, [r3, #24]
    d0c4:	420a      	tst	r2, r1
    d0c6:	d0fc      	beq.n	d0c2 <trx_aes_wrrd+0x186>
    d0c8:	7e1a      	ldrb	r2, [r3, #24]
	if (!spi_is_ready_to_write(module)) {
    d0ca:	07d2      	lsls	r2, r2, #31
    d0cc:	d501      	bpl.n	d0d2 <trx_aes_wrrd+0x196>
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    d0ce:	2200      	movs	r2, #0
    d0d0:	629a      	str	r2, [r3, #40]	; 0x28
	}
	spi_write(&master, 0);
	while (!spi_is_write_complete(&master)) {
    d0d2:	2102      	movs	r1, #2
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
    d0d4:	7e1a      	ldrb	r2, [r3, #24]
    d0d6:	420a      	tst	r2, r1
    d0d8:	d0fc      	beq.n	d0d4 <trx_aes_wrrd+0x198>
	}
	while (!spi_is_ready_to_read(&master)) {
    d0da:	2104      	movs	r1, #4
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    d0dc:	7e1a      	ldrb	r2, [r3, #24]
    d0de:	420a      	tst	r2, r1
    d0e0:	d0fc      	beq.n	d0dc <trx_aes_wrrd+0x1a0>
    d0e2:	7e1a      	ldrb	r2, [r3, #24]
	if (!spi_is_ready_to_read(module)) {
    d0e4:	0752      	lsls	r2, r2, #29
    d0e6:	d50a      	bpl.n	d0fe <trx_aes_wrrd+0x1c2>
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    d0e8:	8b5a      	ldrh	r2, [r3, #26]
    d0ea:	0752      	lsls	r2, r2, #29
    d0ec:	d501      	bpl.n	d0f2 <trx_aes_wrrd+0x1b6>
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
    d0ee:	2204      	movs	r2, #4
    d0f0:	835a      	strh	r2, [r3, #26]
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    d0f2:	4a0f      	ldr	r2, [pc, #60]	; (d130 <trx_aes_wrrd+0x1f4>)
    d0f4:	7992      	ldrb	r2, [r2, #6]
    d0f6:	2a01      	cmp	r2, #1
    d0f8:	d011      	beq.n	d11e <trx_aes_wrrd+0x1e2>
		*rx_data = (uint8_t)spi_module->DATA.reg;
    d0fa:	6a9f      	ldr	r7, [r3, #40]	; 0x28
    d0fc:	b2ff      	uxtb	r7, r7
	}
#if SAMD || SAMR21 || SAML21 || SAMR30
	spi_read(&master, &odata_var);
	*odata = (uint8_t)odata_var;
    d0fe:	4653      	mov	r3, sl
    d100:	701f      	strb	r7, [r3, #0]
#else
	spi_read(&master, (uint16_t *)odata);
#endif

	/* Stop the SPI transaction by setting SEL high */
	spi_select_slave(&master, &slave, false);
    d102:	2200      	movs	r2, #0
    d104:	490b      	ldr	r1, [pc, #44]	; (d134 <trx_aes_wrrd+0x1f8>)
    d106:	480a      	ldr	r0, [pc, #40]	; (d130 <trx_aes_wrrd+0x1f4>)
    d108:	4b0b      	ldr	r3, [pc, #44]	; (d138 <trx_aes_wrrd+0x1fc>)
    d10a:	4798      	blx	r3
	spi_read_packet(AT86RFX_SPI, odata, 1);

	/* Stop the SPI transaction by setting SEL high */
	spi_deselect_device(AT86RFX_SPI, &SPI_AT86RFX_DEVICE);
#endif
	LEAVE_TRX_REGION();
    d10c:	2100      	movs	r1, #0
    d10e:	2000      	movs	r0, #0
    d110:	4b0b      	ldr	r3, [pc, #44]	; (d140 <trx_aes_wrrd+0x204>)
    d112:	4798      	blx	r3
}
    d114:	bc1c      	pop	{r2, r3, r4}
    d116:	4690      	mov	r8, r2
    d118:	4699      	mov	r9, r3
    d11a:	46a2      	mov	sl, r4
    d11c:	bdf0      	pop	{r4, r5, r6, r7, pc}
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
    d11e:	6a9f      	ldr	r7, [r3, #40]	; 0x28
    d120:	05ff      	lsls	r7, r7, #23
    d122:	0dff      	lsrs	r7, r7, #23
    d124:	e7eb      	b.n	d0fe <trx_aes_wrrd+0x1c2>
    d126:	46c0      	nop			; (mov r8, r8)
    d128:	00006521 	.word	0x00006521
    d12c:	000066dd 	.word	0x000066dd
    d130:	20002834 	.word	0x20002834
    d134:	200027f8 	.word	0x200027f8
    d138:	000077f1 	.word	0x000077f1
    d13c:	200027f0 	.word	0x200027f0
    d140:	000066bd 	.word	0x000066bd

0000d144 <ReadMacAddress>:
* Overview:		    Uses the MAC Address from the EEPROM for addressing
*
* Note:			    
**********************************************************************/
void ReadMacAddress(void)
{
    d144:	b510      	push	{r4, lr}
   {
     myLongAddress[i] = (NVM_UID_ADDRESS[j] & 0xFF);
	 myLongAddress[i + 1] = (NVM_UID_ADDRESS[j] >> 8);
   }
#elif ((BOARD == SAMR30_XPLAINED_PRO) || (BOARD == SAMR21_XPLAINED_PRO))
   uint8_t* peui64 = edbg_eui_read_eui64();
    d146:	4b06      	ldr	r3, [pc, #24]	; (d160 <ReadMacAddress+0x1c>)
    d148:	4798      	blx	r3
    d14a:	1dc3      	adds	r3, r0, #7
    d14c:	4a05      	ldr	r2, [pc, #20]	; (d164 <ReadMacAddress+0x20>)
    d14e:	3801      	subs	r0, #1
	for(uint8_t k=0; k<MY_ADDRESS_LENGTH; k++)
   {
		myLongAddress[k] = peui64[MY_ADDRESS_LENGTH-k-1];
    d150:	7819      	ldrb	r1, [r3, #0]
    d152:	7011      	strb	r1, [r2, #0]
    d154:	3b01      	subs	r3, #1
    d156:	3201      	adds	r2, #1
	for(uint8_t k=0; k<MY_ADDRESS_LENGTH; k++)
    d158:	4283      	cmp	r3, r0
    d15a:	d1f9      	bne.n	d150 <ReadMacAddress+0xc>
   }
#endif
}
    d15c:	bd10      	pop	{r4, pc}
    d15e:	46c0      	nop			; (mov r8, r8)
    d160:	0000c2cd 	.word	0x0000c2cd
    d164:	20000094 	.word	0x20000094

0000d168 <main>:
{
    d168:	b510      	push	{r4, lr}
	system_init();
    d16a:	4b0c      	ldr	r3, [pc, #48]	; (d19c <main+0x34>)
    d16c:	4798      	blx	r3
	delay_init();
    d16e:	4b0c      	ldr	r3, [pc, #48]	; (d1a0 <main+0x38>)
    d170:	4798      	blx	r3
	cpu_irq_enable();	
    d172:	2201      	movs	r2, #1
    d174:	4b0b      	ldr	r3, [pc, #44]	; (d1a4 <main+0x3c>)
    d176:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dmb 0xF":::"memory");
    d178:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
    d17c:	b662      	cpsie	i
	ReadMacAddress();
    d17e:	4b0a      	ldr	r3, [pc, #40]	; (d1a8 <main+0x40>)
    d180:	4798      	blx	r3
    SYS_TimerInit();
    d182:	4b0a      	ldr	r3, [pc, #40]	; (d1ac <main+0x44>)
    d184:	4798      	blx	r3
    nvm_init(INT_FLASH);
    d186:	2000      	movs	r0, #0
    d188:	4b09      	ldr	r3, [pc, #36]	; (d1b0 <main+0x48>)
    d18a:	4798      	blx	r3
    PDS_Init();
    d18c:	4b09      	ldr	r3, [pc, #36]	; (d1b4 <main+0x4c>)
    d18e:	4798      	blx	r3
	wsndemo_init();
    d190:	4b09      	ldr	r3, [pc, #36]	; (d1b8 <main+0x50>)
    d192:	4798      	blx	r3
		wsndemo_task();
    d194:	4c09      	ldr	r4, [pc, #36]	; (d1bc <main+0x54>)
    d196:	47a0      	blx	r4
    d198:	e7fd      	b.n	d196 <main+0x2e>
    d19a:	46c0      	nop			; (mov r8, r8)
    d19c:	00008755 	.word	0x00008755
    d1a0:	000064e1 	.word	0x000064e1
    d1a4:	20000008 	.word	0x20000008
    d1a8:	0000d145 	.word	0x0000d145
    d1ac:	0000bf59 	.word	0x0000bf59
    d1b0:	0000c451 	.word	0x0000c451
    d1b4:	0000a819 	.word	0x0000a819
    d1b8:	00006325 	.word	0x00006325
    d1bc:	000063c1 	.word	0x000063c1

0000d1c0 <common_tc_read_count>:
    d1c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    d1c2:	4b0d      	ldr	r3, [pc, #52]	; (d1f8 <common_tc_read_count+0x38>)
    d1c4:	4798      	blx	r3
    d1c6:	4b0d      	ldr	r3, [pc, #52]	; (d1fc <common_tc_read_count+0x3c>)
    d1c8:	781b      	ldrb	r3, [r3, #0]
    d1ca:	2b00      	cmp	r3, #0
    d1cc:	d00e      	beq.n	d1ec <common_tc_read_count+0x2c>
    d1ce:	4b0c      	ldr	r3, [pc, #48]	; (d200 <common_tc_read_count+0x40>)
    d1d0:	781d      	ldrb	r5, [r3, #0]
    d1d2:	4b0a      	ldr	r3, [pc, #40]	; (d1fc <common_tc_read_count+0x3c>)
    d1d4:	781f      	ldrb	r7, [r3, #0]
    d1d6:	4c0b      	ldr	r4, [pc, #44]	; (d204 <common_tc_read_count+0x44>)
    d1d8:	1c29      	adds	r1, r5, #0
    d1da:	47a0      	blx	r4
    d1dc:	1c06      	adds	r6, r0, #0
    d1de:	480a      	ldr	r0, [pc, #40]	; (d208 <common_tc_read_count+0x48>)
    d1e0:	1c29      	adds	r1, r5, #0
    d1e2:	47a0      	blx	r4
    d1e4:	4378      	muls	r0, r7
    d1e6:	1830      	adds	r0, r6, r0
    d1e8:	b280      	uxth	r0, r0
    d1ea:	e004      	b.n	d1f6 <common_tc_read_count+0x36>
    d1ec:	4b04      	ldr	r3, [pc, #16]	; (d200 <common_tc_read_count+0x40>)
    d1ee:	7819      	ldrb	r1, [r3, #0]
    d1f0:	4b04      	ldr	r3, [pc, #16]	; (d204 <common_tc_read_count+0x44>)
    d1f2:	4798      	blx	r3
    d1f4:	b280      	uxth	r0, r0
    d1f6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    d1f8:	0000c141 	.word	0x0000c141
    d1fc:	20001ccc 	.word	0x20001ccc
    d200:	20002840 	.word	0x20002840
    d204:	000125d5 	.word	0x000125d5
    d208:	0000ffff 	.word	0x0000ffff

0000d20c <common_tc_delay>:
    d20c:	b510      	push	{r4, lr}
    d20e:	1c04      	adds	r4, r0, #0
    d210:	4b13      	ldr	r3, [pc, #76]	; (d260 <common_tc_delay+0x54>)
    d212:	4798      	blx	r3
    d214:	4b13      	ldr	r3, [pc, #76]	; (d264 <common_tc_delay+0x58>)
    d216:	781a      	ldrb	r2, [r3, #0]
    d218:	4362      	muls	r2, r4
    d21a:	1881      	adds	r1, r0, r2
    d21c:	4b12      	ldr	r3, [pc, #72]	; (d268 <common_tc_delay+0x5c>)
    d21e:	6059      	str	r1, [r3, #4]
    d220:	6859      	ldr	r1, [r3, #4]
    d222:	0c09      	lsrs	r1, r1, #16
    d224:	6059      	str	r1, [r3, #4]
    d226:	685b      	ldr	r3, [r3, #4]
    d228:	2b00      	cmp	r3, #0
    d22a:	d007      	beq.n	d23c <common_tc_delay+0x30>
    d22c:	4b0e      	ldr	r3, [pc, #56]	; (d268 <common_tc_delay+0x5c>)
    d22e:	6859      	ldr	r1, [r3, #4]
    d230:	3201      	adds	r2, #1
    d232:	1880      	adds	r0, r0, r2
    d234:	8118      	strh	r0, [r3, #8]
    d236:	4b0d      	ldr	r3, [pc, #52]	; (d26c <common_tc_delay+0x60>)
    d238:	4798      	blx	r3
    d23a:	e004      	b.n	d246 <common_tc_delay+0x3a>
    d23c:	1882      	adds	r2, r0, r2
    d23e:	4b0a      	ldr	r3, [pc, #40]	; (d268 <common_tc_delay+0x5c>)
    d240:	811a      	strh	r2, [r3, #8]
    d242:	4b0b      	ldr	r3, [pc, #44]	; (d270 <common_tc_delay+0x64>)
    d244:	4798      	blx	r3
    d246:	4b08      	ldr	r3, [pc, #32]	; (d268 <common_tc_delay+0x5c>)
    d248:	891b      	ldrh	r3, [r3, #8]
    d24a:	2b63      	cmp	r3, #99	; 0x63
    d24c:	d802      	bhi.n	d254 <common_tc_delay+0x48>
    d24e:	3364      	adds	r3, #100	; 0x64
    d250:	4a05      	ldr	r2, [pc, #20]	; (d268 <common_tc_delay+0x5c>)
    d252:	8113      	strh	r3, [r2, #8]
    d254:	4b04      	ldr	r3, [pc, #16]	; (d268 <common_tc_delay+0x5c>)
    d256:	8918      	ldrh	r0, [r3, #8]
    d258:	4b06      	ldr	r3, [pc, #24]	; (d274 <common_tc_delay+0x68>)
    d25a:	4798      	blx	r3
    d25c:	bd10      	pop	{r4, pc}
    d25e:	46c0      	nop			; (mov r8, r8)
    d260:	0000c141 	.word	0x0000c141
    d264:	20002840 	.word	0x20002840
    d268:	20001ccc 	.word	0x20001ccc
    d26c:	0000c155 	.word	0x0000c155
    d270:	0000c169 	.word	0x0000c169
    d274:	0000c1a9 	.word	0x0000c1a9

0000d278 <common_tc_init>:
    d278:	b508      	push	{r3, lr}
    d27a:	2200      	movs	r2, #0
    d27c:	4b03      	ldr	r3, [pc, #12]	; (d28c <common_tc_init+0x14>)
    d27e:	701a      	strb	r2, [r3, #0]
    d280:	4b03      	ldr	r3, [pc, #12]	; (d290 <common_tc_init+0x18>)
    d282:	4798      	blx	r3
    d284:	4b03      	ldr	r3, [pc, #12]	; (d294 <common_tc_init+0x1c>)
    d286:	7018      	strb	r0, [r3, #0]
    d288:	bd08      	pop	{r3, pc}
    d28a:	46c0      	nop			; (mov r8, r8)
    d28c:	20001ccc 	.word	0x20001ccc
    d290:	0000c1c1 	.word	0x0000c1c1
    d294:	20002840 	.word	0x20002840

0000d298 <tmr_ovf_callback>:
    d298:	b508      	push	{r3, lr}
    d29a:	4b0e      	ldr	r3, [pc, #56]	; (d2d4 <tmr_ovf_callback+0x3c>)
    d29c:	685b      	ldr	r3, [r3, #4]
    d29e:	2b00      	cmp	r3, #0
    d2a0:	d007      	beq.n	d2b2 <tmr_ovf_callback+0x1a>
    d2a2:	4a0c      	ldr	r2, [pc, #48]	; (d2d4 <tmr_ovf_callback+0x3c>)
    d2a4:	6853      	ldr	r3, [r2, #4]
    d2a6:	3b01      	subs	r3, #1
    d2a8:	6053      	str	r3, [r2, #4]
    d2aa:	2b00      	cmp	r3, #0
    d2ac:	d101      	bne.n	d2b2 <tmr_ovf_callback+0x1a>
    d2ae:	4b0a      	ldr	r3, [pc, #40]	; (d2d8 <tmr_ovf_callback+0x40>)
    d2b0:	4798      	blx	r3
    d2b2:	4a08      	ldr	r2, [pc, #32]	; (d2d4 <tmr_ovf_callback+0x3c>)
    d2b4:	7813      	ldrb	r3, [r2, #0]
    d2b6:	3301      	adds	r3, #1
    d2b8:	b2db      	uxtb	r3, r3
    d2ba:	7013      	strb	r3, [r2, #0]
    d2bc:	4a07      	ldr	r2, [pc, #28]	; (d2dc <tmr_ovf_callback+0x44>)
    d2be:	7812      	ldrb	r2, [r2, #0]
    d2c0:	429a      	cmp	r2, r3
    d2c2:	d806      	bhi.n	d2d2 <tmr_ovf_callback+0x3a>
    d2c4:	4b03      	ldr	r3, [pc, #12]	; (d2d4 <tmr_ovf_callback+0x3c>)
    d2c6:	2200      	movs	r2, #0
    d2c8:	701a      	strb	r2, [r3, #0]
    d2ca:	68db      	ldr	r3, [r3, #12]
    d2cc:	2b00      	cmp	r3, #0
    d2ce:	d000      	beq.n	d2d2 <tmr_ovf_callback+0x3a>
    d2d0:	4798      	blx	r3
    d2d2:	bd08      	pop	{r3, pc}
    d2d4:	20001ccc 	.word	0x20001ccc
    d2d8:	0000c169 	.word	0x0000c169
    d2dc:	20002840 	.word	0x20002840

0000d2e0 <tmr_cca_callback>:
    d2e0:	b508      	push	{r3, lr}
    d2e2:	4b04      	ldr	r3, [pc, #16]	; (d2f4 <tmr_cca_callback+0x14>)
    d2e4:	4798      	blx	r3
    d2e6:	4b04      	ldr	r3, [pc, #16]	; (d2f8 <tmr_cca_callback+0x18>)
    d2e8:	691b      	ldr	r3, [r3, #16]
    d2ea:	2b00      	cmp	r3, #0
    d2ec:	d000      	beq.n	d2f0 <tmr_cca_callback+0x10>
    d2ee:	4798      	blx	r3
    d2f0:	bd08      	pop	{r3, pc}
    d2f2:	46c0      	nop			; (mov r8, r8)
    d2f4:	0000c155 	.word	0x0000c155
    d2f8:	20001ccc 	.word	0x20001ccc

0000d2fc <set_common_tc_overflow_callback>:
    d2fc:	4b01      	ldr	r3, [pc, #4]	; (d304 <set_common_tc_overflow_callback+0x8>)
    d2fe:	60d8      	str	r0, [r3, #12]
    d300:	4770      	bx	lr
    d302:	46c0      	nop			; (mov r8, r8)
    d304:	20001ccc 	.word	0x20001ccc

0000d308 <set_common_tc_expiry_callback>:
    d308:	4b01      	ldr	r3, [pc, #4]	; (d310 <set_common_tc_expiry_callback+0x8>)
    d30a:	6118      	str	r0, [r3, #16]
    d30c:	4770      	bx	lr
    d30e:	46c0      	nop			; (mov r8, r8)
    d310:	20001ccc 	.word	0x20001ccc

0000d314 <frameTxCallback>:
    d314:	b570      	push	{r4, r5, r6, lr}
    d316:	4c0a      	ldr	r4, [pc, #40]	; (d340 <frameTxCallback+0x2c>)
    d318:	7823      	ldrb	r3, [r4, #0]
    d31a:	3b01      	subs	r3, #1
    d31c:	7023      	strb	r3, [r4, #0]
    d31e:	2401      	movs	r4, #1
    d320:	4b08      	ldr	r3, [pc, #32]	; (d344 <frameTxCallback+0x30>)
    d322:	701c      	strb	r4, [r3, #0]
    d324:	4c08      	ldr	r4, [pc, #32]	; (d348 <frameTxCallback+0x34>)
    d326:	6823      	ldr	r3, [r4, #0]
    d328:	691b      	ldr	r3, [r3, #16]
    d32a:	2b00      	cmp	r3, #0
    d32c:	d004      	beq.n	d338 <frameTxCallback+0x24>
    d32e:	4798      	blx	r3
    d330:	4d06      	ldr	r5, [pc, #24]	; (d34c <frameTxCallback+0x38>)
    d332:	6820      	ldr	r0, [r4, #0]
    d334:	47a8      	blx	r5
    d336:	bd70      	pop	{r4, r5, r6, pc}
    d338:	0010      	movs	r0, r2
    d33a:	4d04      	ldr	r5, [pc, #16]	; (d34c <frameTxCallback+0x38>)
    d33c:	47a8      	blx	r5
    d33e:	e7f8      	b.n	d332 <frameTxCallback+0x1e>
    d340:	20001ce0 	.word	0x20001ce0
    d344:	20000090 	.word	0x20000090
    d348:	2000288c 	.word	0x2000288c
    d34c:	0000bd25 	.word	0x0000bd25

0000d350 <nonAckDataCallback>:
    d350:	b5f0      	push	{r4, r5, r6, r7, lr}
    d352:	46c6      	mov	lr, r8
    d354:	4d14      	ldr	r5, [pc, #80]	; (d3a8 <nonAckDataCallback+0x58>)
    d356:	b500      	push	{lr}
    d358:	4680      	mov	r8, r0
    d35a:	0010      	movs	r0, r2
    d35c:	0016      	movs	r6, r2
    d35e:	000f      	movs	r7, r1
    d360:	47a8      	blx	r5
    d362:	4b12      	ldr	r3, [pc, #72]	; (d3ac <nonAckDataCallback+0x5c>)
    d364:	2100      	movs	r1, #0
    d366:	4812      	ldr	r0, [pc, #72]	; (d3b0 <nonAckDataCallback+0x60>)
    d368:	4798      	blx	r3
    d36a:	22ff      	movs	r2, #255	; 0xff
    d36c:	4b11      	ldr	r3, [pc, #68]	; (d3b4 <nonAckDataCallback+0x64>)
    d36e:	0004      	movs	r4, r0
    d370:	881b      	ldrh	r3, [r3, #0]
    d372:	421a      	tst	r2, r3
    d374:	d10d      	bne.n	d392 <nonAckDataCallback+0x42>
    d376:	2c00      	cmp	r4, #0
    d378:	d010      	beq.n	d39c <nonAckDataCallback+0x4c>
    d37a:	68a3      	ldr	r3, [r4, #8]
    d37c:	2b00      	cmp	r3, #0
    d37e:	d003      	beq.n	d388 <nonAckDataCallback+0x38>
    d380:	0032      	movs	r2, r6
    d382:	0039      	movs	r1, r7
    d384:	4640      	mov	r0, r8
    d386:	4798      	blx	r3
    d388:	0020      	movs	r0, r4
    d38a:	47a8      	blx	r5
    d38c:	bc04      	pop	{r2}
    d38e:	4690      	mov	r8, r2
    d390:	bdf0      	pop	{r4, r5, r6, r7, pc}
    d392:	0038      	movs	r0, r7
    d394:	4b08      	ldr	r3, [pc, #32]	; (d3b8 <nonAckDataCallback+0x68>)
    d396:	4798      	blx	r3
    d398:	2c00      	cmp	r4, #0
    d39a:	d1ee      	bne.n	d37a <nonAckDataCallback+0x2a>
    d39c:	4b07      	ldr	r3, [pc, #28]	; (d3bc <nonAckDataCallback+0x6c>)
    d39e:	781b      	ldrb	r3, [r3, #0]
    d3a0:	2b08      	cmp	r3, #8
    d3a2:	d1f3      	bne.n	d38c <nonAckDataCallback+0x3c>
    d3a4:	e7e9      	b.n	d37a <nonAckDataCallback+0x2a>
    d3a6:	46c0      	nop			; (mov r8, r8)
    d3a8:	0000bd25 	.word	0x0000bd25
    d3ac:	0000be9d 	.word	0x0000be9d
    d3b0:	20002844 	.word	0x20002844
    d3b4:	200028b8 	.word	0x200028b8
    d3b8:	000119d5 	.word	0x000119d5
    d3bc:	20001ce1 	.word	0x20001ce1

0000d3c0 <dataTimerHandler>:
    d3c0:	b5f0      	push	{r4, r5, r6, r7, lr}
    d3c2:	464e      	mov	r6, r9
    d3c4:	46de      	mov	lr, fp
    d3c6:	4657      	mov	r7, sl
    d3c8:	4645      	mov	r5, r8
    d3ca:	b5e0      	push	{r5, r6, r7, lr}
    d3cc:	4e5b      	ldr	r6, [pc, #364]	; (d53c <dataTimerHandler+0x17c>)
    d3ce:	b083      	sub	sp, #12
    d3d0:	7a33      	ldrb	r3, [r6, #8]
    d3d2:	2b00      	cmp	r3, #0
    d3d4:	d04d      	beq.n	d472 <dataTimerHandler+0xb2>
    d3d6:	4b5a      	ldr	r3, [pc, #360]	; (d540 <dataTimerHandler+0x180>)
    d3d8:	2500      	movs	r5, #0
    d3da:	4698      	mov	r8, r3
    d3dc:	4b59      	ldr	r3, [pc, #356]	; (d544 <dataTimerHandler+0x184>)
    d3de:	4f5a      	ldr	r7, [pc, #360]	; (d548 <dataTimerHandler+0x188>)
    d3e0:	469a      	mov	sl, r3
    d3e2:	4b5a      	ldr	r3, [pc, #360]	; (d54c <dataTimerHandler+0x18c>)
    d3e4:	4699      	mov	r9, r3
    d3e6:	2100      	movs	r1, #0
    d3e8:	0030      	movs	r0, r6
    d3ea:	47b8      	blx	r7
    d3ec:	1e04      	subs	r4, r0, #0
    d3ee:	d040      	beq.n	d472 <dataTimerHandler+0xb2>
    d3f0:	7c03      	ldrb	r3, [r0, #16]
    d3f2:	2b00      	cmp	r3, #0
    d3f4:	d04c      	beq.n	d490 <dataTimerHandler+0xd0>
    d3f6:	3b01      	subs	r3, #1
    d3f8:	b2db      	uxtb	r3, r3
    d3fa:	7403      	strb	r3, [r0, #16]
    d3fc:	2b00      	cmp	r3, #0
    d3fe:	d147      	bne.n	d490 <dataTimerHandler+0xd0>
    d400:	7c43      	ldrb	r3, [r0, #17]
    d402:	2b00      	cmp	r3, #0
    d404:	d04d      	beq.n	d4a2 <dataTimerHandler+0xe2>
    d406:	3b01      	subs	r3, #1
    d408:	b2db      	uxtb	r3, r3
    d40a:	7443      	strb	r3, [r0, #17]
    d40c:	2b00      	cmp	r3, #0
    d40e:	d148      	bne.n	d4a2 <dataTimerHandler+0xe2>
    d410:	6883      	ldr	r3, [r0, #8]
    d412:	2b00      	cmp	r3, #0
    d414:	d003      	beq.n	d41e <dataTimerHandler+0x5e>
    d416:	7c80      	ldrb	r0, [r0, #18]
    d418:	0022      	movs	r2, r4
    d41a:	2103      	movs	r1, #3
    d41c:	4798      	blx	r3
    d41e:	0020      	movs	r0, r4
    d420:	4b4b      	ldr	r3, [pc, #300]	; (d550 <dataTimerHandler+0x190>)
    d422:	4798      	blx	r3
    d424:	23ff      	movs	r3, #255	; 0xff
    d426:	8ba0      	ldrh	r0, [r4, #28]
    d428:	4203      	tst	r3, r0
    d42a:	d11d      	bne.n	d468 <dataTimerHandler+0xa8>
    d42c:	0001      	movs	r1, r0
    d42e:	4a49      	ldr	r2, [pc, #292]	; (d554 <dataTimerHandler+0x194>)
    d430:	4399      	bics	r1, r3
    d432:	8812      	ldrh	r2, [r2, #0]
    d434:	4291      	cmp	r1, r2
    d436:	d017      	beq.n	d468 <dataTimerHandler+0xa8>
    d438:	4b47      	ldr	r3, [pc, #284]	; (d558 <dataTimerHandler+0x198>)
    d43a:	0a02      	lsrs	r2, r0, #8
    d43c:	681b      	ldr	r3, [r3, #0]
    d43e:	0052      	lsls	r2, r2, #1
    d440:	689b      	ldr	r3, [r3, #8]
    d442:	189a      	adds	r2, r3, r2
    d444:	7854      	ldrb	r4, [r2, #1]
    d446:	230f      	movs	r3, #15
    d448:	0021      	movs	r1, r4
    d44a:	469b      	mov	fp, r3
    d44c:	4399      	bics	r1, r3
    d44e:	d00b      	beq.n	d468 <dataTimerHandler+0xa8>
    d450:	0921      	lsrs	r1, r4, #4
    d452:	310f      	adds	r1, #15
    d454:	4019      	ands	r1, r3
    d456:	010b      	lsls	r3, r1, #4
    d458:	469c      	mov	ip, r3
    d45a:	465b      	mov	r3, fp
    d45c:	4023      	ands	r3, r4
    d45e:	4664      	mov	r4, ip
    d460:	4323      	orrs	r3, r4
    d462:	7053      	strb	r3, [r2, #1]
    d464:	2900      	cmp	r1, #0
    d466:	d05e      	beq.n	d526 <dataTimerHandler+0x166>
    d468:	3501      	adds	r5, #1
    d46a:	7a33      	ldrb	r3, [r6, #8]
    d46c:	b2ed      	uxtb	r5, r5
    d46e:	42ab      	cmp	r3, r5
    d470:	d8b9      	bhi.n	d3e6 <dataTimerHandler+0x26>
    d472:	4b3a      	ldr	r3, [pc, #232]	; (d55c <dataTimerHandler+0x19c>)
    d474:	4798      	blx	r3
    d476:	4b3a      	ldr	r3, [pc, #232]	; (d560 <dataTimerHandler+0x1a0>)
    d478:	781b      	ldrb	r3, [r3, #0]
    d47a:	2b06      	cmp	r3, #6
    d47c:	d056      	beq.n	d52c <dataTimerHandler+0x16c>
    d47e:	4b39      	ldr	r3, [pc, #228]	; (d564 <dataTimerHandler+0x1a4>)
    d480:	4798      	blx	r3
    d482:	b003      	add	sp, #12
    d484:	bc3c      	pop	{r2, r3, r4, r5}
    d486:	4690      	mov	r8, r2
    d488:	4699      	mov	r9, r3
    d48a:	46a2      	mov	sl, r4
    d48c:	46ab      	mov	fp, r5
    d48e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    d490:	0021      	movs	r1, r4
    d492:	0030      	movs	r0, r6
    d494:	47c0      	blx	r8
    d496:	3501      	adds	r5, #1
    d498:	7a33      	ldrb	r3, [r6, #8]
    d49a:	b2ed      	uxtb	r5, r5
    d49c:	42ab      	cmp	r3, r5
    d49e:	d8a2      	bhi.n	d3e6 <dataTimerHandler+0x26>
    d4a0:	e7e7      	b.n	d472 <dataTimerHandler+0xb2>
    d4a2:	2301      	movs	r3, #1
    d4a4:	89a1      	ldrh	r1, [r4, #12]
    d4a6:	74e3      	strb	r3, [r4, #19]
    d4a8:	4652      	mov	r2, sl
    d4aa:	0020      	movs	r0, r4
    d4ac:	47c8      	blx	r9
    d4ae:	2800      	cmp	r0, #0
    d4b0:	d102      	bne.n	d4b8 <dataTimerHandler+0xf8>
    d4b2:	7c63      	ldrb	r3, [r4, #17]
    d4b4:	3b01      	subs	r3, #1
    d4b6:	7463      	strb	r3, [r4, #17]
    d4b8:	8ba2      	ldrh	r2, [r4, #28]
    d4ba:	2133      	movs	r1, #51	; 0x33
    d4bc:	9201      	str	r2, [sp, #4]
    d4be:	4a25      	ldr	r2, [pc, #148]	; (d554 <dataTimerHandler+0x194>)
    d4c0:	4b25      	ldr	r3, [pc, #148]	; (d558 <dataTimerHandler+0x198>)
    d4c2:	8812      	ldrh	r2, [r2, #0]
    d4c4:	681b      	ldr	r3, [r3, #0]
    d4c6:	4694      	mov	ip, r2
    d4c8:	5c58      	ldrb	r0, [r3, r1]
    d4ca:	22ff      	movs	r2, #255	; 0xff
    d4cc:	3001      	adds	r0, #1
    d4ce:	b2c0      	uxtb	r0, r0
    d4d0:	0041      	lsls	r1, r0, #1
    d4d2:	1808      	adds	r0, r1, r0
    d4d4:	4661      	mov	r1, ip
    d4d6:	0100      	lsls	r0, r0, #4
    d4d8:	420a      	tst	r2, r1
    d4da:	d008      	beq.n	d4ee <dataTimerHandler+0x12e>
    d4dc:	4a1d      	ldr	r2, [pc, #116]	; (d554 <dataTimerHandler+0x194>)
    d4de:	8811      	ldrh	r1, [r2, #0]
    d4e0:	060a      	lsls	r2, r1, #24
    d4e2:	d404      	bmi.n	d4ee <dataTimerHandler+0x12e>
    d4e4:	21fa      	movs	r1, #250	; 0xfa
    d4e6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
    d4e8:	0089      	lsls	r1, r1, #2
    d4ea:	4351      	muls	r1, r2
    d4ec:	1840      	adds	r0, r0, r1
    d4ee:	21ff      	movs	r1, #255	; 0xff
    d4f0:	9a01      	ldr	r2, [sp, #4]
    d4f2:	4211      	tst	r1, r2
    d4f4:	d006      	beq.n	d504 <dataTimerHandler+0x144>
    d4f6:	0612      	lsls	r2, r2, #24
    d4f8:	d404      	bmi.n	d504 <dataTimerHandler+0x144>
    d4fa:	6b9a      	ldr	r2, [r3, #56]	; 0x38
    d4fc:	23fa      	movs	r3, #250	; 0xfa
    d4fe:	009b      	lsls	r3, r3, #2
    d500:	4353      	muls	r3, r2
    d502:	18c0      	adds	r0, r0, r3
    d504:	21fa      	movs	r1, #250	; 0xfa
    d506:	4b18      	ldr	r3, [pc, #96]	; (d568 <dataTimerHandler+0x1a8>)
    d508:	0089      	lsls	r1, r1, #2
    d50a:	4798      	blx	r3
    d50c:	3001      	adds	r0, #1
    d50e:	7420      	strb	r0, [r4, #16]
    d510:	4b0b      	ldr	r3, [pc, #44]	; (d540 <dataTimerHandler+0x180>)
    d512:	0021      	movs	r1, r4
    d514:	0030      	movs	r0, r6
    d516:	4798      	blx	r3
    d518:	3501      	adds	r5, #1
    d51a:	7a33      	ldrb	r3, [r6, #8]
    d51c:	b2ed      	uxtb	r5, r5
    d51e:	42ab      	cmp	r3, r5
    d520:	d900      	bls.n	d524 <dataTimerHandler+0x164>
    d522:	e760      	b.n	d3e6 <dataTimerHandler+0x26>
    d524:	e7a5      	b.n	d472 <dataTimerHandler+0xb2>
    d526:	4b11      	ldr	r3, [pc, #68]	; (d56c <dataTimerHandler+0x1ac>)
    d528:	4798      	blx	r3
    d52a:	e79d      	b.n	d468 <dataTimerHandler+0xa8>
    d52c:	4b10      	ldr	r3, [pc, #64]	; (d570 <dataTimerHandler+0x1b0>)
    d52e:	4798      	blx	r3
    d530:	4b10      	ldr	r3, [pc, #64]	; (d574 <dataTimerHandler+0x1b4>)
    d532:	4798      	blx	r3
    d534:	4b10      	ldr	r3, [pc, #64]	; (d578 <dataTimerHandler+0x1b8>)
    d536:	4798      	blx	r3
    d538:	e7a1      	b.n	d47e <dataTimerHandler+0xbe>
    d53a:	46c0      	nop			; (mov r8, r8)
    d53c:	2000287c 	.word	0x2000287c
    d540:	0000be65 	.word	0x0000be65
    d544:	0000d57d 	.word	0x0000d57d
    d548:	0000be9d 	.word	0x0000be9d
    d54c:	0000f2ad 	.word	0x0000f2ad
    d550:	0000bd25 	.word	0x0000bd25
    d554:	200028b8 	.word	0x200028b8
    d558:	2000285c 	.word	0x2000285c
    d55c:	000102c9 	.word	0x000102c9
    d560:	20001ce1 	.word	0x20001ce1
    d564:	000118a1 	.word	0x000118a1
    d568:	000124c1 	.word	0x000124c1
    d56c:	00011f55 	.word	0x00011f55
    d570:	00011fe9 	.word	0x00011fe9
    d574:	0000f639 	.word	0x0000f639
    d578:	0000f87d 	.word	0x0000f87d

0000d57c <ackReqDataConfcb>:
    d57c:	b5f0      	push	{r4, r5, r6, r7, lr}
    d57e:	46de      	mov	lr, fp
    d580:	4645      	mov	r5, r8
    d582:	4657      	mov	r7, sl
    d584:	464e      	mov	r6, r9
    d586:	0013      	movs	r3, r2
    d588:	b5e0      	push	{r5, r6, r7, lr}
    d58a:	b085      	sub	sp, #20
    d58c:	9202      	str	r2, [sp, #8]
    d58e:	7892      	ldrb	r2, [r2, #2]
    d590:	4683      	mov	fp, r0
    d592:	0018      	movs	r0, r3
    d594:	4b73      	ldr	r3, [pc, #460]	; (d764 <ackReqDataConfcb+0x1e8>)
    d596:	4690      	mov	r8, r2
    d598:	9100      	str	r1, [sp, #0]
    d59a:	4798      	blx	r3
    d59c:	22ff      	movs	r2, #255	; 0xff
    d59e:	4b72      	ldr	r3, [pc, #456]	; (d768 <ackReqDataConfcb+0x1ec>)
    d5a0:	881b      	ldrh	r3, [r3, #0]
    d5a2:	421a      	tst	r2, r3
    d5a4:	d000      	beq.n	d5a8 <ackReqDataConfcb+0x2c>
    d5a6:	e0a6      	b.n	d6f6 <ackReqDataConfcb+0x17a>
    d5a8:	4e70      	ldr	r6, [pc, #448]	; (d76c <ackReqDataConfcb+0x1f0>)
    d5aa:	7a33      	ldrb	r3, [r6, #8]
    d5ac:	2b00      	cmp	r3, #0
    d5ae:	d037      	beq.n	d620 <ackReqDataConfcb+0xa4>
    d5b0:	4b6f      	ldr	r3, [pc, #444]	; (d770 <ackReqDataConfcb+0x1f4>)
    d5b2:	2400      	movs	r4, #0
    d5b4:	4f6f      	ldr	r7, [pc, #444]	; (d774 <ackReqDataConfcb+0x1f8>)
    d5b6:	469a      	mov	sl, r3
    d5b8:	e007      	b.n	d5ca <ackReqDataConfcb+0x4e>
    d5ba:	0029      	movs	r1, r5
    d5bc:	0030      	movs	r0, r6
    d5be:	47d0      	blx	sl
    d5c0:	3401      	adds	r4, #1
    d5c2:	7a33      	ldrb	r3, [r6, #8]
    d5c4:	b2e4      	uxtb	r4, r4
    d5c6:	42a3      	cmp	r3, r4
    d5c8:	d92a      	bls.n	d620 <ackReqDataConfcb+0xa4>
    d5ca:	2100      	movs	r1, #0
    d5cc:	0030      	movs	r0, r6
    d5ce:	47b8      	blx	r7
    d5d0:	1e05      	subs	r5, r0, #0
    d5d2:	d025      	beq.n	d620 <ackReqDataConfcb+0xa4>
    d5d4:	2320      	movs	r3, #32
    d5d6:	5cc3      	ldrb	r3, [r0, r3]
    d5d8:	4543      	cmp	r3, r8
    d5da:	d1ee      	bne.n	d5ba <ackReqDataConfcb+0x3e>
    d5dc:	7c83      	ldrb	r3, [r0, #18]
    d5de:	4699      	mov	r9, r3
    d5e0:	455b      	cmp	r3, fp
    d5e2:	d1ea      	bne.n	d5ba <ackReqDataConfcb+0x3e>
    d5e4:	9a00      	ldr	r2, [sp, #0]
    d5e6:	8b83      	ldrh	r3, [r0, #28]
    d5e8:	2a00      	cmp	r2, #0
    d5ea:	d031      	beq.n	d650 <ackReqDataConfcb+0xd4>
    d5ec:	2a03      	cmp	r2, #3
    d5ee:	d100      	bne.n	d5f2 <ackReqDataConfcb+0x76>
    d5f0:	e08f      	b.n	d712 <ackReqDataConfcb+0x196>
    d5f2:	7c6b      	ldrb	r3, [r5, #17]
    d5f4:	2b00      	cmp	r3, #0
    d5f6:	d01a      	beq.n	d62e <ackReqDataConfcb+0xb2>
    d5f8:	3b01      	subs	r3, #1
    d5fa:	b2db      	uxtb	r3, r3
    d5fc:	746b      	strb	r3, [r5, #17]
    d5fe:	2b00      	cmp	r3, #0
    d600:	d115      	bne.n	d62e <ackReqDataConfcb+0xb2>
    d602:	68ab      	ldr	r3, [r5, #8]
    d604:	2b00      	cmp	r3, #0
    d606:	d003      	beq.n	d610 <ackReqDataConfcb+0x94>
    d608:	9a02      	ldr	r2, [sp, #8]
    d60a:	9900      	ldr	r1, [sp, #0]
    d60c:	4648      	mov	r0, r9
    d60e:	4798      	blx	r3
    d610:	4b54      	ldr	r3, [pc, #336]	; (d764 <ackReqDataConfcb+0x1e8>)
    d612:	0028      	movs	r0, r5
    d614:	4798      	blx	r3
    d616:	3401      	adds	r4, #1
    d618:	7a33      	ldrb	r3, [r6, #8]
    d61a:	b2e4      	uxtb	r4, r4
    d61c:	42a3      	cmp	r3, r4
    d61e:	d8d4      	bhi.n	d5ca <ackReqDataConfcb+0x4e>
    d620:	b005      	add	sp, #20
    d622:	bc3c      	pop	{r2, r3, r4, r5}
    d624:	4690      	mov	r8, r2
    d626:	4699      	mov	r9, r3
    d628:	46a2      	mov	sl, r4
    d62a:	46ab      	mov	fp, r5
    d62c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    d62e:	4b52      	ldr	r3, [pc, #328]	; (d778 <ackReqDataConfcb+0x1fc>)
    d630:	781b      	ldrb	r3, [r3, #0]
    d632:	2b08      	cmp	r3, #8
    d634:	d0e5      	beq.n	d602 <ackReqDataConfcb+0x86>
    d636:	2301      	movs	r3, #1
    d638:	89a9      	ldrh	r1, [r5, #12]
    d63a:	74eb      	strb	r3, [r5, #19]
    d63c:	4a4f      	ldr	r2, [pc, #316]	; (d77c <ackReqDataConfcb+0x200>)
    d63e:	0028      	movs	r0, r5
    d640:	4b4f      	ldr	r3, [pc, #316]	; (d780 <ackReqDataConfcb+0x204>)
    d642:	4798      	blx	r3
    d644:	2800      	cmp	r0, #0
    d646:	d133      	bne.n	d6b0 <ackReqDataConfcb+0x134>
    d648:	7c6b      	ldrb	r3, [r5, #17]
    d64a:	3b01      	subs	r3, #1
    d64c:	746b      	strb	r3, [r5, #17]
    d64e:	e02f      	b.n	d6b0 <ackReqDataConfcb+0x134>
    d650:	21ff      	movs	r1, #255	; 0xff
    d652:	000a      	movs	r2, r1
    d654:	401a      	ands	r2, r3
    d656:	d030      	beq.n	d6ba <ackReqDataConfcb+0x13e>
    d658:	484a      	ldr	r0, [pc, #296]	; (d784 <ackReqDataConfcb+0x208>)
    d65a:	6801      	ldr	r1, [r0, #0]
    d65c:	2033      	movs	r0, #51	; 0x33
    d65e:	9103      	str	r1, [sp, #12]
    d660:	5c08      	ldrb	r0, [r1, r0]
    d662:	3001      	adds	r0, #1
    d664:	b2c0      	uxtb	r0, r0
    d666:	0041      	lsls	r1, r0, #1
    d668:	468c      	mov	ip, r1
    d66a:	493f      	ldr	r1, [pc, #252]	; (d768 <ackReqDataConfcb+0x1ec>)
    d66c:	4460      	add	r0, ip
    d66e:	8809      	ldrh	r1, [r1, #0]
    d670:	0100      	lsls	r0, r0, #4
    d672:	468c      	mov	ip, r1
    d674:	9001      	str	r0, [sp, #4]
    d676:	21ff      	movs	r1, #255	; 0xff
    d678:	4660      	mov	r0, ip
    d67a:	4201      	tst	r1, r0
    d67c:	d003      	beq.n	d686 <ackReqDataConfcb+0x10a>
    d67e:	493a      	ldr	r1, [pc, #232]	; (d768 <ackReqDataConfcb+0x1ec>)
    d680:	8809      	ldrh	r1, [r1, #0]
    d682:	0609      	lsls	r1, r1, #24
    d684:	d53b      	bpl.n	d6fe <ackReqDataConfcb+0x182>
    d686:	2a00      	cmp	r2, #0
    d688:	d00b      	beq.n	d6a2 <ackReqDataConfcb+0x126>
    d68a:	061b      	lsls	r3, r3, #24
    d68c:	d409      	bmi.n	d6a2 <ackReqDataConfcb+0x126>
    d68e:	22fa      	movs	r2, #250	; 0xfa
    d690:	9b03      	ldr	r3, [sp, #12]
    d692:	0092      	lsls	r2, r2, #2
    d694:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    d696:	4353      	muls	r3, r2
    d698:	9a01      	ldr	r2, [sp, #4]
    d69a:	4694      	mov	ip, r2
    d69c:	449c      	add	ip, r3
    d69e:	4663      	mov	r3, ip
    d6a0:	9301      	str	r3, [sp, #4]
    d6a2:	21fa      	movs	r1, #250	; 0xfa
    d6a4:	9801      	ldr	r0, [sp, #4]
    d6a6:	0089      	lsls	r1, r1, #2
    d6a8:	4b37      	ldr	r3, [pc, #220]	; (d788 <ackReqDataConfcb+0x20c>)
    d6aa:	4798      	blx	r3
    d6ac:	3001      	adds	r0, #1
    d6ae:	7428      	strb	r0, [r5, #16]
    d6b0:	0029      	movs	r1, r5
    d6b2:	0030      	movs	r0, r6
    d6b4:	4b2e      	ldr	r3, [pc, #184]	; (d770 <ackReqDataConfcb+0x1f4>)
    d6b6:	4798      	blx	r3
    d6b8:	e782      	b.n	d5c0 <ackReqDataConfcb+0x44>
    d6ba:	482b      	ldr	r0, [pc, #172]	; (d768 <ackReqDataConfcb+0x1ec>)
    d6bc:	8800      	ldrh	r0, [r0, #0]
    d6be:	4684      	mov	ip, r0
    d6c0:	0018      	movs	r0, r3
    d6c2:	4388      	bics	r0, r1
    d6c4:	4584      	cmp	ip, r0
    d6c6:	d0c7      	beq.n	d658 <ackReqDataConfcb+0xdc>
    d6c8:	482e      	ldr	r0, [pc, #184]	; (d784 <ackReqDataConfcb+0x208>)
    d6ca:	0a1b      	lsrs	r3, r3, #8
    d6cc:	6802      	ldr	r2, [r0, #0]
    d6ce:	005b      	lsls	r3, r3, #1
    d6d0:	6892      	ldr	r2, [r2, #8]
    d6d2:	4691      	mov	r9, r2
    d6d4:	4499      	add	r9, r3
    d6d6:	464b      	mov	r3, r9
    d6d8:	785a      	ldrb	r2, [r3, #1]
    d6da:	4694      	mov	ip, r2
    d6dc:	220f      	movs	r2, #15
    d6de:	4663      	mov	r3, ip
    d6e0:	401a      	ands	r2, r3
    d6e2:	2330      	movs	r3, #48	; 0x30
    d6e4:	469c      	mov	ip, r3
    d6e6:	4663      	mov	r3, ip
    d6e8:	431a      	orrs	r2, r3
    d6ea:	464b      	mov	r3, r9
    d6ec:	705a      	strb	r2, [r3, #1]
    d6ee:	000a      	movs	r2, r1
    d6f0:	8bab      	ldrh	r3, [r5, #28]
    d6f2:	401a      	ands	r2, r3
    d6f4:	e7b1      	b.n	d65a <ackReqDataConfcb+0xde>
    d6f6:	9800      	ldr	r0, [sp, #0]
    d6f8:	4b24      	ldr	r3, [pc, #144]	; (d78c <ackReqDataConfcb+0x210>)
    d6fa:	4798      	blx	r3
    d6fc:	e754      	b.n	d5a8 <ackReqDataConfcb+0x2c>
    d6fe:	21fa      	movs	r1, #250	; 0xfa
    d700:	9803      	ldr	r0, [sp, #12]
    d702:	0089      	lsls	r1, r1, #2
    d704:	6b80      	ldr	r0, [r0, #56]	; 0x38
    d706:	4341      	muls	r1, r0
    d708:	468c      	mov	ip, r1
    d70a:	9901      	ldr	r1, [sp, #4]
    d70c:	4461      	add	r1, ip
    d70e:	9101      	str	r1, [sp, #4]
    d710:	e7b9      	b.n	d686 <ackReqDataConfcb+0x10a>
    d712:	32fc      	adds	r2, #252	; 0xfc
    d714:	421a      	tst	r2, r3
    d716:	d000      	beq.n	d71a <ackReqDataConfcb+0x19e>
    d718:	e76b      	b.n	d5f2 <ackReqDataConfcb+0x76>
    d71a:	0018      	movs	r0, r3
    d71c:	4912      	ldr	r1, [pc, #72]	; (d768 <ackReqDataConfcb+0x1ec>)
    d71e:	4390      	bics	r0, r2
    d720:	8809      	ldrh	r1, [r1, #0]
    d722:	4281      	cmp	r1, r0
    d724:	d100      	bne.n	d728 <ackReqDataConfcb+0x1ac>
    d726:	e764      	b.n	d5f2 <ackReqDataConfcb+0x76>
    d728:	4816      	ldr	r0, [pc, #88]	; (d784 <ackReqDataConfcb+0x208>)
    d72a:	0a1a      	lsrs	r2, r3, #8
    d72c:	6801      	ldr	r1, [r0, #0]
    d72e:	0052      	lsls	r2, r2, #1
    d730:	6889      	ldr	r1, [r1, #8]
    d732:	468c      	mov	ip, r1
    d734:	4494      	add	ip, r2
    d736:	4662      	mov	r2, ip
    d738:	7850      	ldrb	r0, [r2, #1]
    d73a:	220f      	movs	r2, #15
    d73c:	0001      	movs	r1, r0
    d73e:	4391      	bics	r1, r2
    d740:	d100      	bne.n	d744 <ackReqDataConfcb+0x1c8>
    d742:	e756      	b.n	d5f2 <ackReqDataConfcb+0x76>
    d744:	0901      	lsrs	r1, r0, #4
    d746:	310f      	adds	r1, #15
    d748:	4011      	ands	r1, r2
    d74a:	4002      	ands	r2, r0
    d74c:	0108      	lsls	r0, r1, #4
    d74e:	4302      	orrs	r2, r0
    d750:	4660      	mov	r0, ip
    d752:	7042      	strb	r2, [r0, #1]
    d754:	2900      	cmp	r1, #0
    d756:	d000      	beq.n	d75a <ackReqDataConfcb+0x1de>
    d758:	e74b      	b.n	d5f2 <ackReqDataConfcb+0x76>
    d75a:	0018      	movs	r0, r3
    d75c:	4b0c      	ldr	r3, [pc, #48]	; (d790 <ackReqDataConfcb+0x214>)
    d75e:	4798      	blx	r3
    d760:	e747      	b.n	d5f2 <ackReqDataConfcb+0x76>
    d762:	46c0      	nop			; (mov r8, r8)
    d764:	0000bd25 	.word	0x0000bd25
    d768:	200028b8 	.word	0x200028b8
    d76c:	2000287c 	.word	0x2000287c
    d770:	0000be65 	.word	0x0000be65
    d774:	0000be9d 	.word	0x0000be9d
    d778:	20001ce1 	.word	0x20001ce1
    d77c:	0000d57d 	.word	0x0000d57d
    d780:	0000f2ad 	.word	0x0000f2ad
    d784:	2000285c 	.word	0x2000285c
    d788:	000124c1 	.word	0x000124c1
    d78c:	000119d5 	.word	0x000119d5
    d790:	00011f55 	.word	0x00011f55

0000d794 <MiApp_ProtocolInit>:
    d794:	b5f0      	push	{r4, r5, r6, r7, lr}
    d796:	46c6      	mov	lr, r8
    d798:	b500      	push	{lr}
    d79a:	4b52      	ldr	r3, [pc, #328]	; (d8e4 <MiApp_ProtocolInit+0x150>)
    d79c:	b084      	sub	sp, #16
    d79e:	781a      	ldrb	r2, [r3, #0]
    d7a0:	2370      	movs	r3, #112	; 0x70
    d7a2:	0112      	lsls	r2, r2, #4
    d7a4:	4013      	ands	r3, r2
    d7a6:	4a50      	ldr	r2, [pc, #320]	; (d8e8 <MiApp_ProtocolInit+0x154>)
    d7a8:	7812      	ldrb	r2, [r2, #0]
    d7aa:	0912      	lsrs	r2, r2, #4
    d7ac:	4313      	orrs	r3, r2
    d7ae:	2b1f      	cmp	r3, #31
    d7b0:	d000      	beq.n	d7b4 <MiApp_ProtocolInit+0x20>
    d7b2:	e7fe      	b.n	d7b2 <MiApp_ProtocolInit+0x1e>
    d7b4:	4b4d      	ldr	r3, [pc, #308]	; (d8ec <MiApp_ProtocolInit+0x158>)
    d7b6:	4c4e      	ldr	r4, [pc, #312]	; (d8f0 <MiApp_ProtocolInit+0x15c>)
    d7b8:	6019      	str	r1, [r3, #0]
    d7ba:	6020      	str	r0, [r4, #0]
    d7bc:	8e03      	ldrh	r3, [r0, #48]	; 0x30
    d7be:	2002      	movs	r0, #2
    d7c0:	4d4c      	ldr	r5, [pc, #304]	; (d8f4 <MiApp_ProtocolInit+0x160>)
    d7c2:	aa02      	add	r2, sp, #8
    d7c4:	802b      	strh	r3, [r5, #0]
    d7c6:	7813      	ldrb	r3, [r2, #0]
    d7c8:	2601      	movs	r6, #1
    d7ca:	4303      	orrs	r3, r0
    d7cc:	2087      	movs	r0, #135	; 0x87
    d7ce:	4003      	ands	r3, r0
    d7d0:	2040      	movs	r0, #64	; 0x40
    d7d2:	4303      	orrs	r3, r0
    d7d4:	2004      	movs	r0, #4
    d7d6:	b2db      	uxtb	r3, r3
    d7d8:	4303      	orrs	r3, r0
    d7da:	b2db      	uxtb	r3, r3
    d7dc:	43b3      	bics	r3, r6
    d7de:	7013      	strb	r3, [r2, #0]
    d7e0:	4945      	ldr	r1, [pc, #276]	; (d8f8 <MiApp_ProtocolInit+0x164>)
    d7e2:	4b46      	ldr	r3, [pc, #280]	; (d8fc <MiApp_ProtocolInit+0x168>)
    d7e4:	9802      	ldr	r0, [sp, #8]
    d7e6:	9103      	str	r1, [sp, #12]
    d7e8:	4798      	blx	r3
    d7ea:	4b45      	ldr	r3, [pc, #276]	; (d900 <MiApp_ProtocolInit+0x16c>)
    d7ec:	4798      	blx	r3
    d7ee:	2701      	movs	r7, #1
    d7f0:	466b      	mov	r3, sp
    d7f2:	0029      	movs	r1, r5
    d7f4:	1d98      	adds	r0, r3, #6
    d7f6:	427f      	negs	r7, r7
    d7f8:	4b42      	ldr	r3, [pc, #264]	; (d904 <MiApp_ProtocolInit+0x170>)
    d7fa:	8007      	strh	r7, [r0, #0]
    d7fc:	4798      	blx	r3
    d7fe:	4b42      	ldr	r3, [pc, #264]	; (d908 <MiApp_ProtocolInit+0x174>)
    d800:	4798      	blx	r3
    d802:	4b42      	ldr	r3, [pc, #264]	; (d90c <MiApp_ProtocolInit+0x178>)
    d804:	6018      	str	r0, [r3, #0]
    d806:	4b42      	ldr	r3, [pc, #264]	; (d910 <MiApp_ProtocolInit+0x17c>)
    d808:	4798      	blx	r3
    d80a:	4b42      	ldr	r3, [pc, #264]	; (d914 <MiApp_ProtocolInit+0x180>)
    d80c:	4798      	blx	r3
    d80e:	4b42      	ldr	r3, [pc, #264]	; (d918 <MiApp_ProtocolInit+0x184>)
    d810:	4798      	blx	r3
    d812:	4b42      	ldr	r3, [pc, #264]	; (d91c <MiApp_ProtocolInit+0x188>)
    d814:	4798      	blx	r3
    d816:	4d42      	ldr	r5, [pc, #264]	; (d920 <MiApp_ProtocolInit+0x18c>)
    d818:	4b42      	ldr	r3, [pc, #264]	; (d924 <MiApp_ProtocolInit+0x190>)
    d81a:	802f      	strh	r7, [r5, #0]
    d81c:	4842      	ldr	r0, [pc, #264]	; (d928 <MiApp_ProtocolInit+0x194>)
    d81e:	4f43      	ldr	r7, [pc, #268]	; (d92c <MiApp_ProtocolInit+0x198>)
    d820:	701e      	strb	r6, [r3, #0]
    d822:	4698      	mov	r8, r3
    d824:	47b8      	blx	r7
    d826:	4842      	ldr	r0, [pc, #264]	; (d930 <MiApp_ProtocolInit+0x19c>)
    d828:	47b8      	blx	r7
    d82a:	4842      	ldr	r0, [pc, #264]	; (d934 <MiApp_ProtocolInit+0x1a0>)
    d82c:	47b8      	blx	r7
    d82e:	4842      	ldr	r0, [pc, #264]	; (d938 <MiApp_ProtocolInit+0x1a4>)
    d830:	47b8      	blx	r7
    d832:	23fa      	movs	r3, #250	; 0xfa
    d834:	4841      	ldr	r0, [pc, #260]	; (d93c <MiApp_ProtocolInit+0x1a8>)
    d836:	009b      	lsls	r3, r3, #2
    d838:	6083      	str	r3, [r0, #8]
    d83a:	4b41      	ldr	r3, [pc, #260]	; (d940 <MiApp_ProtocolInit+0x1ac>)
    d83c:	7306      	strb	r6, [r0, #12]
    d83e:	4e41      	ldr	r6, [pc, #260]	; (d944 <MiApp_ProtocolInit+0x1b0>)
    d840:	6103      	str	r3, [r0, #16]
    d842:	47b0      	blx	r6
    d844:	4b40      	ldr	r3, [pc, #256]	; (d948 <MiApp_ProtocolInit+0x1b4>)
    d846:	4798      	blx	r3
    d848:	4b40      	ldr	r3, [pc, #256]	; (d94c <MiApp_ProtocolInit+0x1b8>)
    d84a:	4798      	blx	r3
    d84c:	4b40      	ldr	r3, [pc, #256]	; (d950 <MiApp_ProtocolInit+0x1bc>)
    d84e:	4798      	blx	r3
    d850:	4b40      	ldr	r3, [pc, #256]	; (d954 <MiApp_ProtocolInit+0x1c0>)
    d852:	4798      	blx	r3
    d854:	4b40      	ldr	r3, [pc, #256]	; (d958 <MiApp_ProtocolInit+0x1c4>)
    d856:	7018      	strb	r0, [r3, #0]
    d858:	4840      	ldr	r0, [pc, #256]	; (d95c <MiApp_ProtocolInit+0x1c8>)
    d85a:	4b41      	ldr	r3, [pc, #260]	; (d960 <MiApp_ProtocolInit+0x1cc>)
    d85c:	4798      	blx	r3
    d85e:	2800      	cmp	r0, #0
    d860:	d13a      	bne.n	d8d8 <MiApp_ProtocolInit+0x144>
    d862:	4b40      	ldr	r3, [pc, #256]	; (d964 <MiApp_ProtocolInit+0x1d0>)
    d864:	4798      	blx	r3
    d866:	882a      	ldrh	r2, [r5, #0]
    d868:	4b3f      	ldr	r3, [pc, #252]	; (d968 <MiApp_ProtocolInit+0x1d4>)
    d86a:	429a      	cmp	r2, r3
    d86c:	d02f      	beq.n	d8ce <MiApp_ProtocolInit+0x13a>
    d86e:	2306      	movs	r3, #6
    d870:	4642      	mov	r2, r8
    d872:	7013      	strb	r3, [r2, #0]
    d874:	4b3d      	ldr	r3, [pc, #244]	; (d96c <MiApp_ProtocolInit+0x1d8>)
    d876:	681b      	ldr	r3, [r3, #0]
    d878:	2b00      	cmp	r3, #0
    d87a:	d001      	beq.n	d880 <MiApp_ProtocolInit+0xec>
    d87c:	2000      	movs	r0, #0
    d87e:	4798      	blx	r3
    d880:	882a      	ldrh	r2, [r5, #0]
    d882:	2300      	movs	r3, #0
    d884:	0612      	lsls	r2, r2, #24
    d886:	d502      	bpl.n	d88e <MiApp_ProtocolInit+0xfa>
    d888:	22ff      	movs	r2, #255	; 0xff
    d88a:	882b      	ldrh	r3, [r5, #0]
    d88c:	4393      	bics	r3, r2
    d88e:	20fa      	movs	r0, #250	; 0xfa
    d890:	4a37      	ldr	r2, [pc, #220]	; (d970 <MiApp_ProtocolInit+0x1dc>)
    d892:	0080      	lsls	r0, r0, #2
    d894:	8013      	strh	r3, [r2, #0]
    d896:	6823      	ldr	r3, [r4, #0]
    d898:	2105      	movs	r1, #5
    d89a:	8a9b      	ldrh	r3, [r3, #20]
    d89c:	4358      	muls	r0, r3
    d89e:	4b35      	ldr	r3, [pc, #212]	; (d974 <MiApp_ProtocolInit+0x1e0>)
    d8a0:	4798      	blx	r3
    d8a2:	4b35      	ldr	r3, [pc, #212]	; (d978 <MiApp_ProtocolInit+0x1e4>)
    d8a4:	4a35      	ldr	r2, [pc, #212]	; (d97c <MiApp_ProtocolInit+0x1e8>)
    d8a6:	6058      	str	r0, [r3, #4]
    d8a8:	611a      	str	r2, [r3, #16]
    d8aa:	2201      	movs	r2, #1
    d8ac:	6098      	str	r0, [r3, #8]
    d8ae:	0018      	movs	r0, r3
    d8b0:	731a      	strb	r2, [r3, #12]
    d8b2:	47b0      	blx	r6
    d8b4:	4b32      	ldr	r3, [pc, #200]	; (d980 <MiApp_ProtocolInit+0x1ec>)
    d8b6:	781b      	ldrb	r3, [r3, #0]
    d8b8:	2bff      	cmp	r3, #255	; 0xff
    d8ba:	d008      	beq.n	d8ce <MiApp_ProtocolInit+0x13a>
    d8bc:	4831      	ldr	r0, [pc, #196]	; (d984 <MiApp_ProtocolInit+0x1f0>)
    d8be:	4b32      	ldr	r3, [pc, #200]	; (d988 <MiApp_ProtocolInit+0x1f4>)
    d8c0:	6103      	str	r3, [r0, #16]
    d8c2:	4b32      	ldr	r3, [pc, #200]	; (d98c <MiApp_ProtocolInit+0x1f8>)
    d8c4:	6043      	str	r3, [r0, #4]
    d8c6:	6083      	str	r3, [r0, #8]
    d8c8:	2300      	movs	r3, #0
    d8ca:	7303      	strb	r3, [r0, #12]
    d8cc:	47b0      	blx	r6
    d8ce:	2000      	movs	r0, #0
    d8d0:	b004      	add	sp, #16
    d8d2:	bc04      	pop	{r2}
    d8d4:	4690      	mov	r8, r2
    d8d6:	bdf0      	pop	{r4, r5, r6, r7, pc}
    d8d8:	4820      	ldr	r0, [pc, #128]	; (d95c <MiApp_ProtocolInit+0x1c8>)
    d8da:	4b2d      	ldr	r3, [pc, #180]	; (d990 <MiApp_ProtocolInit+0x1fc>)
    d8dc:	4798      	blx	r3
    d8de:	2800      	cmp	r0, #0
    d8e0:	d0bf      	beq.n	d862 <MiApp_ProtocolInit+0xce>
    d8e2:	e7c0      	b.n	d866 <MiApp_ProtocolInit+0xd2>
    d8e4:	41003fe8 	.word	0x41003fe8
    d8e8:	41003fe4 	.word	0x41003fe4
    d8ec:	20002860 	.word	0x20002860
    d8f0:	2000285c 	.word	0x2000285c
    d8f4:	200028a8 	.word	0x200028a8
    d8f8:	20000094 	.word	0x20000094
    d8fc:	0000acdd 	.word	0x0000acdd
    d900:	0000b80d 	.word	0x0000b80d
    d904:	0000ac55 	.word	0x0000ac55
    d908:	0000c0c9 	.word	0x0000c0c9
    d90c:	20001cf8 	.word	0x20001cf8
    d910:	00011acd 	.word	0x00011acd
    d914:	00011739 	.word	0x00011739
    d918:	0000f60d 	.word	0x0000f60d
    d91c:	00010299 	.word	0x00010299
    d920:	200028b8 	.word	0x200028b8
    d924:	20001ce1 	.word	0x20001ce1
    d928:	2000287c 	.word	0x2000287c
    d92c:	0000be59 	.word	0x0000be59
    d930:	20002844 	.word	0x20002844
    d934:	20002850 	.word	0x20002850
    d938:	200028ac 	.word	0x200028ac
    d93c:	20001ce4 	.word	0x20001ce4
    d940:	0000d3c1 	.word	0x0000d3c1
    d944:	0000c01d 	.word	0x0000c01d
    d948:	0000bc2d 	.word	0x0000bc2d
    d94c:	0000b531 	.word	0x0000b531
    d950:	00015325 	.word	0x00015325
    d954:	00015381 	.word	0x00015381
    d958:	20002890 	.word	0x20002890
    d95c:	00004001 	.word	0x00004001
    d960:	0000a7c1 	.word	0x0000a7c1
    d964:	0000a82d 	.word	0x0000a82d
    d968:	0000ffff 	.word	0x0000ffff
    d96c:	200028d4 	.word	0x200028d4
    d970:	2000009c 	.word	0x2000009c
    d974:	00011a4d 	.word	0x00011a4d
    d978:	200028bc 	.word	0x200028bc
    d97c:	00010509 	.word	0x00010509
    d980:	2000008f 	.word	0x2000008f
    d984:	200028dc 	.word	0x200028dc
    d988:	0000efc9 	.word	0x0000efc9
    d98c:	00003a98 	.word	0x00003a98
    d990:	0000a52d 	.word	0x0000a52d

0000d994 <MiApp_Set>:
    d994:	b530      	push	{r4, r5, lr}
    d996:	000c      	movs	r4, r1
    d998:	b083      	sub	sp, #12
    d99a:	2805      	cmp	r0, #5
    d99c:	d049      	beq.n	da32 <MiApp_Set+0x9e>
    d99e:	d907      	bls.n	d9b0 <MiApp_Set+0x1c>
    d9a0:	2880      	cmp	r0, #128	; 0x80
    d9a2:	d030      	beq.n	da06 <MiApp_Set+0x72>
    d9a4:	2881      	cmp	r0, #129	; 0x81
    d9a6:	d022      	beq.n	d9ee <MiApp_Set+0x5a>
    d9a8:	2806      	cmp	r0, #6
    d9aa:	d027      	beq.n	d9fc <MiApp_Set+0x68>
    d9ac:	2000      	movs	r0, #0
    d9ae:	e013      	b.n	d9d8 <MiApp_Set+0x44>
    d9b0:	2801      	cmp	r0, #1
    d9b2:	d02f      	beq.n	da14 <MiApp_Set+0x80>
    d9b4:	2800      	cmp	r0, #0
    d9b6:	d011      	beq.n	d9dc <MiApp_Set+0x48>
    d9b8:	2802      	cmp	r0, #2
    d9ba:	d1f7      	bne.n	d9ac <MiApp_Set+0x18>
    d9bc:	780b      	ldrb	r3, [r1, #0]
    d9be:	ad01      	add	r5, sp, #4
    d9c0:	702b      	strb	r3, [r5, #0]
    d9c2:	784b      	ldrb	r3, [r1, #1]
    d9c4:	0028      	movs	r0, r5
    d9c6:	706b      	strb	r3, [r5, #1]
    d9c8:	491d      	ldr	r1, [pc, #116]	; (da40 <MiApp_Set+0xac>)
    d9ca:	4b1e      	ldr	r3, [pc, #120]	; (da44 <MiApp_Set+0xb0>)
    d9cc:	4798      	blx	r3
    d9ce:	2800      	cmp	r0, #0
    d9d0:	d002      	beq.n	d9d8 <MiApp_Set+0x44>
    d9d2:	882a      	ldrh	r2, [r5, #0]
    d9d4:	4b1c      	ldr	r3, [pc, #112]	; (da48 <MiApp_Set+0xb4>)
    d9d6:	801a      	strh	r2, [r3, #0]
    d9d8:	b003      	add	sp, #12
    d9da:	bd30      	pop	{r4, r5, pc}
    d9dc:	2000      	movs	r0, #0
    d9de:	4b1b      	ldr	r3, [pc, #108]	; (da4c <MiApp_Set+0xb8>)
    d9e0:	4798      	blx	r3
    d9e2:	2800      	cmp	r0, #0
    d9e4:	d0f8      	beq.n	d9d8 <MiApp_Set+0x44>
    d9e6:	7822      	ldrb	r2, [r4, #0]
    d9e8:	4b19      	ldr	r3, [pc, #100]	; (da50 <MiApp_Set+0xbc>)
    d9ea:	701a      	strb	r2, [r3, #0]
    d9ec:	e7f4      	b.n	d9d8 <MiApp_Set+0x44>
    d9ee:	780b      	ldrb	r3, [r1, #0]
    d9f0:	2001      	movs	r0, #1
    d9f2:	1e5a      	subs	r2, r3, #1
    d9f4:	4193      	sbcs	r3, r2
    d9f6:	4a17      	ldr	r2, [pc, #92]	; (da54 <MiApp_Set+0xc0>)
    d9f8:	7013      	strb	r3, [r2, #0]
    d9fa:	e7ed      	b.n	d9d8 <MiApp_Set+0x44>
    d9fc:	780a      	ldrb	r2, [r1, #0]
    d9fe:	4b16      	ldr	r3, [pc, #88]	; (da58 <MiApp_Set+0xc4>)
    da00:	2001      	movs	r0, #1
    da02:	701a      	strb	r2, [r3, #0]
    da04:	e7e8      	b.n	d9d8 <MiApp_Set+0x44>
    da06:	780b      	ldrb	r3, [r1, #0]
    da08:	2001      	movs	r0, #1
    da0a:	1e5a      	subs	r2, r3, #1
    da0c:	4193      	sbcs	r3, r2
    da0e:	4a13      	ldr	r2, [pc, #76]	; (da5c <MiApp_Set+0xc8>)
    da10:	7013      	strb	r3, [r2, #0]
    da12:	e7e1      	b.n	d9d8 <MiApp_Set+0x44>
    da14:	780b      	ldrb	r3, [r1, #0]
    da16:	ad01      	add	r5, sp, #4
    da18:	702b      	strb	r3, [r5, #0]
    da1a:	784b      	ldrb	r3, [r1, #1]
    da1c:	480a      	ldr	r0, [pc, #40]	; (da48 <MiApp_Set+0xb4>)
    da1e:	706b      	strb	r3, [r5, #1]
    da20:	0029      	movs	r1, r5
    da22:	4b08      	ldr	r3, [pc, #32]	; (da44 <MiApp_Set+0xb0>)
    da24:	4798      	blx	r3
    da26:	2800      	cmp	r0, #0
    da28:	d0d6      	beq.n	d9d8 <MiApp_Set+0x44>
    da2a:	882a      	ldrh	r2, [r5, #0]
    da2c:	4b04      	ldr	r3, [pc, #16]	; (da40 <MiApp_Set+0xac>)
    da2e:	801a      	strh	r2, [r3, #0]
    da30:	e7d2      	b.n	d9d8 <MiApp_Set+0x44>
    da32:	2204      	movs	r2, #4
    da34:	480a      	ldr	r0, [pc, #40]	; (da60 <MiApp_Set+0xcc>)
    da36:	4b0b      	ldr	r3, [pc, #44]	; (da64 <MiApp_Set+0xd0>)
    da38:	4798      	blx	r3
    da3a:	2001      	movs	r0, #1
    da3c:	e7cc      	b.n	d9d8 <MiApp_Set+0x44>
    da3e:	46c0      	nop			; (mov r8, r8)
    da40:	200028a8 	.word	0x200028a8
    da44:	0000ac55 	.word	0x0000ac55
    da48:	200028b8 	.word	0x200028b8
    da4c:	0000acb5 	.word	0x0000acb5
    da50:	20002888 	.word	0x20002888
    da54:	20001d1c 	.word	0x20001d1c
    da58:	200028fc 	.word	0x200028fc
    da5c:	20000091 	.word	0x20000091
    da60:	200028f8 	.word	0x200028f8
    da64:	00014d37 	.word	0x00014d37

0000da68 <MeshTasks>:
    da68:	b5f0      	push	{r4, r5, r6, r7, lr}
    da6a:	46c6      	mov	lr, r8
    da6c:	b500      	push	{lr}
    da6e:	4b24      	ldr	r3, [pc, #144]	; (db00 <MeshTasks+0x98>)
    da70:	b084      	sub	sp, #16
    da72:	4798      	blx	r3
    da74:	4b23      	ldr	r3, [pc, #140]	; (db04 <MeshTasks+0x9c>)
    da76:	4798      	blx	r3
    da78:	4c23      	ldr	r4, [pc, #140]	; (db08 <MeshTasks+0xa0>)
    da7a:	0005      	movs	r5, r0
    da7c:	7a23      	ldrb	r3, [r4, #8]
    da7e:	2b00      	cmp	r3, #0
    da80:	d003      	beq.n	da8a <MeshTasks+0x22>
    da82:	4e22      	ldr	r6, [pc, #136]	; (db0c <MeshTasks+0xa4>)
    da84:	7833      	ldrb	r3, [r6, #0]
    da86:	2b00      	cmp	r3, #0
    da88:	d10e      	bne.n	daa8 <MeshTasks+0x40>
    da8a:	4b21      	ldr	r3, [pc, #132]	; (db10 <MeshTasks+0xa8>)
    da8c:	4798      	blx	r3
    da8e:	2800      	cmp	r0, #0
    da90:	d004      	beq.n	da9c <MeshTasks+0x34>
    da92:	4b20      	ldr	r3, [pc, #128]	; (db14 <MeshTasks+0xac>)
    da94:	4820      	ldr	r0, [pc, #128]	; (db18 <MeshTasks+0xb0>)
    da96:	4798      	blx	r3
    da98:	4b20      	ldr	r3, [pc, #128]	; (db1c <MeshTasks+0xb4>)
    da9a:	4798      	blx	r3
    da9c:	4b20      	ldr	r3, [pc, #128]	; (db20 <MeshTasks+0xb8>)
    da9e:	4798      	blx	r3
    daa0:	b004      	add	sp, #16
    daa2:	bc04      	pop	{r2}
    daa4:	4690      	mov	r8, r2
    daa6:	bdf0      	pop	{r4, r5, r6, r7, pc}
    daa8:	4f1e      	ldr	r7, [pc, #120]	; (db24 <MeshTasks+0xbc>)
    daaa:	4b1f      	ldr	r3, [pc, #124]	; (db28 <MeshTasks+0xc0>)
    daac:	6839      	ldr	r1, [r7, #0]
    daae:	4798      	blx	r3
    dab0:	4b1e      	ldr	r3, [pc, #120]	; (db2c <MeshTasks+0xc4>)
    dab2:	4698      	mov	r8, r3
    dab4:	681b      	ldr	r3, [r3, #0]
    dab6:	4298      	cmp	r0, r3
    dab8:	d9e7      	bls.n	da8a <MeshTasks+0x22>
    daba:	0020      	movs	r0, r4
    dabc:	2100      	movs	r1, #0
    dabe:	4b1c      	ldr	r3, [pc, #112]	; (db30 <MeshTasks+0xc8>)
    dac0:	4798      	blx	r3
    dac2:	1e04      	subs	r4, r0, #0
    dac4:	d0e1      	beq.n	da8a <MeshTasks+0x22>
    dac6:	4b1b      	ldr	r3, [pc, #108]	; (db34 <MeshTasks+0xcc>)
    dac8:	6018      	str	r0, [r3, #0]
    daca:	4b1b      	ldr	r3, [pc, #108]	; (db38 <MeshTasks+0xd0>)
    dacc:	2048      	movs	r0, #72	; 0x48
    dace:	4798      	blx	r3
    dad0:	4643      	mov	r3, r8
    dad2:	4a1a      	ldr	r2, [pc, #104]	; (db3c <MeshTasks+0xd4>)
    dad4:	6018      	str	r0, [r3, #0]
    dad6:	7813      	ldrb	r3, [r2, #0]
    dad8:	603d      	str	r5, [r7, #0]
    dada:	3301      	adds	r3, #1
    dadc:	7013      	strb	r3, [r2, #0]
    dade:	4a18      	ldr	r2, [pc, #96]	; (db40 <MeshTasks+0xd8>)
    dae0:	6963      	ldr	r3, [r4, #20]
    dae2:	9202      	str	r2, [sp, #8]
    dae4:	2225      	movs	r2, #37	; 0x25
    dae6:	5ca2      	ldrb	r2, [r4, r2]
    dae8:	9201      	str	r2, [sp, #4]
    daea:	2224      	movs	r2, #36	; 0x24
    daec:	5ca2      	ldrb	r2, [r4, r2]
    daee:	3418      	adds	r4, #24
    daf0:	9200      	str	r2, [sp, #0]
    daf2:	cc07      	ldmia	r4!, {r0, r1, r2}
    daf4:	4c13      	ldr	r4, [pc, #76]	; (db44 <MeshTasks+0xdc>)
    daf6:	47a0      	blx	r4
    daf8:	2300      	movs	r3, #0
    dafa:	7033      	strb	r3, [r6, #0]
    dafc:	e7c5      	b.n	da8a <MeshTasks+0x22>
    dafe:	46c0      	nop			; (mov r8, r8)
    db00:	0000b381 	.word	0x0000b381
    db04:	0000c0c9 	.word	0x0000c0c9
    db08:	200028ac 	.word	0x200028ac
    db0c:	20000090 	.word	0x20000090
    db10:	0000afcd 	.word	0x0000afcd
    db14:	0000f985 	.word	0x0000f985
    db18:	20002894 	.word	0x20002894
    db1c:	0000afb1 	.word	0x0000afb1
    db20:	0000c03d 	.word	0x0000c03d
    db24:	20001cf8 	.word	0x20001cf8
    db28:	0000c119 	.word	0x0000c119
    db2c:	20001cfc 	.word	0x20001cfc
    db30:	0000be9d 	.word	0x0000be9d
    db34:	2000288c 	.word	0x2000288c
    db38:	0000b375 	.word	0x0000b375
    db3c:	20001ce0 	.word	0x20001ce0
    db40:	0000d315 	.word	0x0000d315
    db44:	0000ad41 	.word	0x0000ad41

0000db48 <MiApp_Get>:
    db48:	b510      	push	{r4, lr}
    db4a:	000b      	movs	r3, r1
    db4c:	2806      	cmp	r0, #6
    db4e:	d820      	bhi.n	db92 <MiApp_Get+0x4a>
    db50:	4a11      	ldr	r2, [pc, #68]	; (db98 <MiApp_Get+0x50>)
    db52:	0080      	lsls	r0, r0, #2
    db54:	5812      	ldr	r2, [r2, r0]
    db56:	4697      	mov	pc, r2
    db58:	2001      	movs	r0, #1
    db5a:	4a10      	ldr	r2, [pc, #64]	; (db9c <MiApp_Get+0x54>)
    db5c:	7812      	ldrb	r2, [r2, #0]
    db5e:	700a      	strb	r2, [r1, #0]
    db60:	bd10      	pop	{r4, pc}
    db62:	4a0f      	ldr	r2, [pc, #60]	; (dba0 <MiApp_Get+0x58>)
    db64:	2001      	movs	r0, #1
    db66:	7812      	ldrb	r2, [r2, #0]
    db68:	700a      	strb	r2, [r1, #0]
    db6a:	e7f9      	b.n	db60 <MiApp_Get+0x18>
    db6c:	4a0d      	ldr	r2, [pc, #52]	; (dba4 <MiApp_Get+0x5c>)
    db6e:	8811      	ldrh	r1, [r2, #0]
    db70:	2001      	movs	r0, #1
    db72:	7019      	strb	r1, [r3, #0]
    db74:	8812      	ldrh	r2, [r2, #0]
    db76:	0a12      	lsrs	r2, r2, #8
    db78:	705a      	strb	r2, [r3, #1]
    db7a:	e7f1      	b.n	db60 <MiApp_Get+0x18>
    db7c:	4a0a      	ldr	r2, [pc, #40]	; (dba8 <MiApp_Get+0x60>)
    db7e:	e7f6      	b.n	db6e <MiApp_Get+0x26>
    db80:	4a0a      	ldr	r2, [pc, #40]	; (dbac <MiApp_Get+0x64>)
    db82:	e7f4      	b.n	db6e <MiApp_Get+0x26>
    db84:	0018      	movs	r0, r3
    db86:	2204      	movs	r2, #4
    db88:	4909      	ldr	r1, [pc, #36]	; (dbb0 <MiApp_Get+0x68>)
    db8a:	4b0a      	ldr	r3, [pc, #40]	; (dbb4 <MiApp_Get+0x6c>)
    db8c:	4798      	blx	r3
    db8e:	2001      	movs	r0, #1
    db90:	e7e6      	b.n	db60 <MiApp_Get+0x18>
    db92:	2000      	movs	r0, #0
    db94:	e7e4      	b.n	db60 <MiApp_Get+0x18>
    db96:	46c0      	nop			; (mov r8, r8)
    db98:	0001672c 	.word	0x0001672c
    db9c:	200028fc 	.word	0x200028fc
    dba0:	20002888 	.word	0x20002888
    dba4:	200028a8 	.word	0x200028a8
    dba8:	200028b8 	.word	0x200028b8
    dbac:	2000009c 	.word	0x2000009c
    dbb0:	200028f8 	.word	0x200028f8
    dbb4:	00014d37 	.word	0x00014d37

0000dbb8 <calculateAckWaitTimeout>:
    dbb8:	0003      	movs	r3, r0
    dbba:	b510      	push	{r4, lr}
    dbbc:	24ff      	movs	r4, #255	; 0xff
    dbbe:	0040      	lsls	r0, r0, #1
    dbc0:	18c0      	adds	r0, r0, r3
    dbc2:	4b11      	ldr	r3, [pc, #68]	; (dc08 <calculateAckWaitTimeout+0x50>)
    dbc4:	0100      	lsls	r0, r0, #4
    dbc6:	881a      	ldrh	r2, [r3, #0]
    dbc8:	4214      	tst	r4, r2
    dbca:	d002      	beq.n	dbd2 <calculateAckWaitTimeout+0x1a>
    dbcc:	881b      	ldrh	r3, [r3, #0]
    dbce:	061b      	lsls	r3, r3, #24
    dbd0:	d512      	bpl.n	dbf8 <calculateAckWaitTimeout+0x40>
    dbd2:	23ff      	movs	r3, #255	; 0xff
    dbd4:	420b      	tst	r3, r1
    dbd6:	d008      	beq.n	dbea <calculateAckWaitTimeout+0x32>
    dbd8:	060b      	lsls	r3, r1, #24
    dbda:	d406      	bmi.n	dbea <calculateAckWaitTimeout+0x32>
    dbdc:	4b0b      	ldr	r3, [pc, #44]	; (dc0c <calculateAckWaitTimeout+0x54>)
    dbde:	681b      	ldr	r3, [r3, #0]
    dbe0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
    dbe2:	23fa      	movs	r3, #250	; 0xfa
    dbe4:	009b      	lsls	r3, r3, #2
    dbe6:	4353      	muls	r3, r2
    dbe8:	18c0      	adds	r0, r0, r3
    dbea:	21fa      	movs	r1, #250	; 0xfa
    dbec:	4b08      	ldr	r3, [pc, #32]	; (dc10 <calculateAckWaitTimeout+0x58>)
    dbee:	0089      	lsls	r1, r1, #2
    dbf0:	4798      	blx	r3
    dbf2:	3001      	adds	r0, #1
    dbf4:	b2c0      	uxtb	r0, r0
    dbf6:	bd10      	pop	{r4, pc}
    dbf8:	4b04      	ldr	r3, [pc, #16]	; (dc0c <calculateAckWaitTimeout+0x54>)
    dbfa:	681b      	ldr	r3, [r3, #0]
    dbfc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
    dbfe:	23fa      	movs	r3, #250	; 0xfa
    dc00:	009b      	lsls	r3, r3, #2
    dc02:	4353      	muls	r3, r2
    dc04:	18c0      	adds	r0, r0, r3
    dc06:	e7e4      	b.n	dbd2 <calculateAckWaitTimeout+0x1a>
    dc08:	200028b8 	.word	0x200028b8
    dc0c:	2000285c 	.word	0x2000285c
    dc10:	000124c1 	.word	0x000124c1

0000dc14 <MiApp_SendData>:
    dc14:	b5f0      	push	{r4, r5, r6, r7, lr}
    dc16:	4657      	mov	r7, sl
    dc18:	4645      	mov	r5, r8
    dc1a:	464e      	mov	r6, r9
    dc1c:	46de      	mov	lr, fp
    dc1e:	b5e0      	push	{r5, r6, r7, lr}
    dc20:	b083      	sub	sp, #12
    dc22:	4698      	mov	r8, r3
    dc24:	ab0c      	add	r3, sp, #48	; 0x30
    dc26:	781b      	ldrb	r3, [r3, #0]
    dc28:	784c      	ldrb	r4, [r1, #1]
    dc2a:	4699      	mov	r9, r3
    dc2c:	ab0d      	add	r3, sp, #52	; 0x34
    dc2e:	781f      	ldrb	r7, [r3, #0]
    dc30:	23ff      	movs	r3, #255	; 0xff
    dc32:	469a      	mov	sl, r3
    dc34:	780b      	ldrb	r3, [r1, #0]
    dc36:	0224      	lsls	r4, r4, #8
    dc38:	0015      	movs	r5, r2
    dc3a:	431c      	orrs	r4, r3
    dc3c:	2a50      	cmp	r2, #80	; 0x50
    dc3e:	d80a      	bhi.n	dc56 <MiApp_SendData+0x42>
    dc40:	4e9f      	ldr	r6, [pc, #636]	; (dec0 <MiApp_SendData+0x2ac>)
    dc42:	b2a4      	uxth	r4, r4
    dc44:	8833      	ldrh	r3, [r6, #0]
    dc46:	429c      	cmp	r4, r3
    dc48:	d005      	beq.n	dc56 <MiApp_SendData+0x42>
    dc4a:	4b9e      	ldr	r3, [pc, #632]	; (dec4 <MiApp_SendData+0x2b0>)
    dc4c:	469b      	mov	fp, r3
    dc4e:	781b      	ldrb	r3, [r3, #0]
    dc50:	3b06      	subs	r3, #6
    dc52:	2b01      	cmp	r3, #1
    dc54:	d908      	bls.n	dc68 <MiApp_SendData+0x54>
    dc56:	2400      	movs	r4, #0
    dc58:	0020      	movs	r0, r4
    dc5a:	b003      	add	sp, #12
    dc5c:	bc3c      	pop	{r2, r3, r4, r5}
    dc5e:	4690      	mov	r8, r2
    dc60:	4699      	mov	r9, r3
    dc62:	46a2      	mov	sl, r4
    dc64:	46ab      	mov	fp, r5
    dc66:	bdf0      	pop	{r4, r5, r6, r7, pc}
    dc68:	2802      	cmp	r0, #2
    dc6a:	d1f4      	bne.n	dc56 <MiApp_SendData+0x42>
    dc6c:	309e      	adds	r0, #158	; 0x9e
    dc6e:	4b96      	ldr	r3, [pc, #600]	; (dec8 <MiApp_SendData+0x2b4>)
    dc70:	4798      	blx	r3
    dc72:	9001      	str	r0, [sp, #4]
    dc74:	1e01      	subs	r1, r0, #0
    dc76:	d0ee      	beq.n	dc56 <MiApp_SendData+0x42>
    dc78:	2203      	movs	r2, #3
    dc7a:	7e43      	ldrb	r3, [r0, #25]
    dc7c:	8384      	strh	r4, [r0, #28]
    dc7e:	4393      	bics	r3, r2
    dc80:	7643      	strb	r3, [r0, #25]
    dc82:	8833      	ldrh	r3, [r6, #0]
    dc84:	83c3      	strh	r3, [r0, #30]
    dc86:	2301      	movs	r3, #1
    dc88:	403b      	ands	r3, r7
    dc8a:	011a      	lsls	r2, r3, #4
    dc8c:	7e43      	ldrb	r3, [r0, #25]
    dc8e:	2010      	movs	r0, #16
    dc90:	4383      	bics	r3, r0
    dc92:	4313      	orrs	r3, r2
    dc94:	764b      	strb	r3, [r1, #25]
    dc96:	2338      	movs	r3, #56	; 0x38
    dc98:	54cd      	strb	r5, [r1, r3]
    dc9a:	464b      	mov	r3, r9
    dc9c:	748b      	strb	r3, [r1, #18]
    dc9e:	2300      	movs	r3, #0
    dca0:	0008      	movs	r0, r1
    dca2:	74cb      	strb	r3, [r1, #19]
    dca4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    dca6:	002a      	movs	r2, r5
    dca8:	608b      	str	r3, [r1, #8]
    dcaa:	3039      	adds	r0, #57	; 0x39
    dcac:	4641      	mov	r1, r8
    dcae:	4d87      	ldr	r5, [pc, #540]	; (decc <MiApp_SendData+0x2b8>)
    dcb0:	47a8      	blx	r5
    dcb2:	4b87      	ldr	r3, [pc, #540]	; (ded0 <MiApp_SendData+0x2bc>)
    dcb4:	429c      	cmp	r4, r3
    dcb6:	d91d      	bls.n	dcf4 <MiApp_SendData+0xe0>
    dcb8:	2110      	movs	r1, #16
    dcba:	9a01      	ldr	r2, [sp, #4]
    dcbc:	7e53      	ldrb	r3, [r2, #25]
    dcbe:	438b      	bics	r3, r1
    dcc0:	7653      	strb	r3, [r2, #25]
    dcc2:	4b84      	ldr	r3, [pc, #528]	; (ded4 <MiApp_SendData+0x2c0>)
    dcc4:	429c      	cmp	r4, r3
    dcc6:	d100      	bne.n	dcca <MiApp_SendData+0xb6>
    dcc8:	e085      	b.n	ddd6 <MiApp_SendData+0x1c2>
    dcca:	4a83      	ldr	r2, [pc, #524]	; (ded8 <MiApp_SendData+0x2c4>)
    dccc:	4981      	ldr	r1, [pc, #516]	; (ded4 <MiApp_SendData+0x2c0>)
    dcce:	9801      	ldr	r0, [sp, #4]
    dcd0:	4b82      	ldr	r3, [pc, #520]	; (dedc <MiApp_SendData+0x2c8>)
    dcd2:	4798      	blx	r3
    dcd4:	1e04      	subs	r4, r0, #0
    dcd6:	d000      	beq.n	dcda <MiApp_SendData+0xc6>
    dcd8:	e0b7      	b.n	de4a <MiApp_SendData+0x236>
    dcda:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    dcdc:	2b00      	cmp	r3, #0
    dcde:	d005      	beq.n	dcec <MiApp_SendData+0xd8>
    dce0:	9b01      	ldr	r3, [sp, #4]
    dce2:	2101      	movs	r1, #1
    dce4:	7c98      	ldrb	r0, [r3, #18]
    dce6:	001a      	movs	r2, r3
    dce8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    dcea:	4798      	blx	r3
    dcec:	9801      	ldr	r0, [sp, #4]
    dcee:	4b7c      	ldr	r3, [pc, #496]	; (dee0 <MiApp_SendData+0x2cc>)
    dcf0:	4798      	blx	r3
    dcf2:	e7b1      	b.n	dc58 <MiApp_SendData+0x44>
    dcf4:	4653      	mov	r3, sl
    dcf6:	4223      	tst	r3, r4
    dcf8:	d006      	beq.n	dd08 <MiApp_SendData+0xf4>
    dcfa:	0023      	movs	r3, r4
    dcfc:	4651      	mov	r1, sl
    dcfe:	8832      	ldrh	r2, [r6, #0]
    dd00:	438b      	bics	r3, r1
    dd02:	429a      	cmp	r2, r3
    dd04:	d100      	bne.n	dd08 <MiApp_SendData+0xf4>
    dd06:	e0b8      	b.n	de7a <MiApp_SendData+0x266>
    dd08:	465b      	mov	r3, fp
    dd0a:	781b      	ldrb	r3, [r3, #0]
    dd0c:	2b07      	cmp	r3, #7
    dd0e:	d147      	bne.n	dda0 <MiApp_SendData+0x18c>
    dd10:	8835      	ldrh	r5, [r6, #0]
    dd12:	33f8      	adds	r3, #248	; 0xf8
    dd14:	439d      	bics	r5, r3
    dd16:	9b01      	ldr	r3, [sp, #4]
    dd18:	819d      	strh	r5, [r3, #12]
    dd1a:	2f00      	cmp	r7, #0
    dd1c:	d100      	bne.n	dd20 <MiApp_SendData+0x10c>
    dd1e:	e099      	b.n	de54 <MiApp_SendData+0x240>
    dd20:	42ac      	cmp	r4, r5
    dd22:	d100      	bne.n	dd26 <MiApp_SendData+0x112>
    dd24:	e0ba      	b.n	de9c <MiApp_SendData+0x288>
    dd26:	4b6f      	ldr	r3, [pc, #444]	; (dee4 <MiApp_SendData+0x2d0>)
    dd28:	21ff      	movs	r1, #255	; 0xff
    dd2a:	681c      	ldr	r4, [r3, #0]
    dd2c:	9b01      	ldr	r3, [sp, #4]
    dd2e:	8b9a      	ldrh	r2, [r3, #28]
    dd30:	2333      	movs	r3, #51	; 0x33
    dd32:	5ce0      	ldrb	r0, [r4, r3]
    dd34:	3001      	adds	r0, #1
    dd36:	b2c0      	uxtb	r0, r0
    dd38:	0043      	lsls	r3, r0, #1
    dd3a:	1818      	adds	r0, r3, r0
    dd3c:	8833      	ldrh	r3, [r6, #0]
    dd3e:	0100      	lsls	r0, r0, #4
    dd40:	4219      	tst	r1, r3
    dd42:	d007      	beq.n	dd54 <MiApp_SendData+0x140>
    dd44:	8833      	ldrh	r3, [r6, #0]
    dd46:	061b      	lsls	r3, r3, #24
    dd48:	d404      	bmi.n	dd54 <MiApp_SendData+0x140>
    dd4a:	23fa      	movs	r3, #250	; 0xfa
    dd4c:	6ba1      	ldr	r1, [r4, #56]	; 0x38
    dd4e:	009b      	lsls	r3, r3, #2
    dd50:	434b      	muls	r3, r1
    dd52:	18c0      	adds	r0, r0, r3
    dd54:	23ff      	movs	r3, #255	; 0xff
    dd56:	4213      	tst	r3, r2
    dd58:	d006      	beq.n	dd68 <MiApp_SendData+0x154>
    dd5a:	0613      	lsls	r3, r2, #24
    dd5c:	d404      	bmi.n	dd68 <MiApp_SendData+0x154>
    dd5e:	23fa      	movs	r3, #250	; 0xfa
    dd60:	6ba2      	ldr	r2, [r4, #56]	; 0x38
    dd62:	009b      	lsls	r3, r3, #2
    dd64:	4353      	muls	r3, r2
    dd66:	18c0      	adds	r0, r0, r3
    dd68:	21fa      	movs	r1, #250	; 0xfa
    dd6a:	4b5f      	ldr	r3, [pc, #380]	; (dee8 <MiApp_SendData+0x2d4>)
    dd6c:	0089      	lsls	r1, r1, #2
    dd6e:	4798      	blx	r3
    dd70:	9b01      	ldr	r3, [sp, #4]
    dd72:	3001      	adds	r0, #1
    dd74:	7418      	strb	r0, [r3, #16]
    dd76:	233e      	movs	r3, #62	; 0x3e
    dd78:	5ce3      	ldrb	r3, [r4, r3]
    dd7a:	9c01      	ldr	r4, [sp, #4]
    dd7c:	3301      	adds	r3, #1
    dd7e:	7463      	strb	r3, [r4, #17]
    dd80:	4a5a      	ldr	r2, [pc, #360]	; (deec <MiApp_SendData+0x2d8>)
    dd82:	0029      	movs	r1, r5
    dd84:	0020      	movs	r0, r4
    dd86:	4b55      	ldr	r3, [pc, #340]	; (dedc <MiApp_SendData+0x2c8>)
    dd88:	4798      	blx	r3
    dd8a:	2800      	cmp	r0, #0
    dd8c:	d102      	bne.n	dd94 <MiApp_SendData+0x180>
    dd8e:	7c63      	ldrb	r3, [r4, #17]
    dd90:	3b01      	subs	r3, #1
    dd92:	7463      	strb	r3, [r4, #17]
    dd94:	9901      	ldr	r1, [sp, #4]
    dd96:	4856      	ldr	r0, [pc, #344]	; (def0 <MiApp_SendData+0x2dc>)
    dd98:	4b56      	ldr	r3, [pc, #344]	; (def4 <MiApp_SendData+0x2e0>)
    dd9a:	4798      	blx	r3
    dd9c:	2401      	movs	r4, #1
    dd9e:	e75b      	b.n	dc58 <MiApp_SendData+0x44>
    dda0:	23ff      	movs	r3, #255	; 0xff
    dda2:	0020      	movs	r0, r4
    dda4:	4398      	bics	r0, r3
    dda6:	4b54      	ldr	r3, [pc, #336]	; (def8 <MiApp_SendData+0x2e4>)
    dda8:	4798      	blx	r3
    ddaa:	9b01      	ldr	r3, [sp, #4]
    ddac:	0005      	movs	r5, r0
    ddae:	8198      	strh	r0, [r3, #12]
    ddb0:	4b48      	ldr	r3, [pc, #288]	; (ded4 <MiApp_SendData+0x2c0>)
    ddb2:	4298      	cmp	r0, r3
    ddb4:	d1b1      	bne.n	dd1a <MiApp_SendData+0x106>
    ddb6:	0020      	movs	r0, r4
    ddb8:	4b50      	ldr	r3, [pc, #320]	; (defc <MiApp_SendData+0x2e8>)
    ddba:	4798      	blx	r3
    ddbc:	1e04      	subs	r4, r0, #0
    ddbe:	d08c      	beq.n	dcda <MiApp_SendData+0xc6>
    ddc0:	4b48      	ldr	r3, [pc, #288]	; (dee4 <MiApp_SendData+0x2d0>)
    ddc2:	9a01      	ldr	r2, [sp, #4]
    ddc4:	681b      	ldr	r3, [r3, #0]
    ddc6:	0011      	movs	r1, r2
    ddc8:	7f5b      	ldrb	r3, [r3, #29]
    ddca:	484d      	ldr	r0, [pc, #308]	; (df00 <MiApp_SendData+0x2ec>)
    ddcc:	3301      	adds	r3, #1
    ddce:	7413      	strb	r3, [r2, #16]
    ddd0:	4b48      	ldr	r3, [pc, #288]	; (def4 <MiApp_SendData+0x2e0>)
    ddd2:	4798      	blx	r3
    ddd4:	e740      	b.n	dc58 <MiApp_SendData+0x44>
    ddd6:	4f43      	ldr	r7, [pc, #268]	; (dee4 <MiApp_SendData+0x2d0>)
    ddd8:	683b      	ldr	r3, [r7, #0]
    ddda:	7eda      	ldrb	r2, [r3, #27]
    dddc:	2a01      	cmp	r2, #1
    ddde:	d800      	bhi.n	dde2 <MiApp_SendData+0x1ce>
    dde0:	e773      	b.n	dcca <MiApp_SendData+0xb6>
    dde2:	4a48      	ldr	r2, [pc, #288]	; (df04 <MiApp_SendData+0x2f0>)
    dde4:	2401      	movs	r4, #1
    dde6:	4690      	mov	r8, r2
    dde8:	4a47      	ldr	r2, [pc, #284]	; (df08 <MiApp_SendData+0x2f4>)
    ddea:	4692      	mov	sl, r2
    ddec:	4a47      	ldr	r2, [pc, #284]	; (df0c <MiApp_SendData+0x2f8>)
    ddee:	4693      	mov	fp, r2
    ddf0:	e006      	b.n	de00 <MiApp_SendData+0x1ec>
    ddf2:	683b      	ldr	r3, [r7, #0]
    ddf4:	3401      	adds	r4, #1
    ddf6:	7eda      	ldrb	r2, [r3, #27]
    ddf8:	b2e4      	uxtb	r4, r4
    ddfa:	42a2      	cmp	r2, r4
    ddfc:	d800      	bhi.n	de00 <MiApp_SendData+0x1ec>
    ddfe:	e764      	b.n	dcca <MiApp_SendData+0xb6>
    de00:	00a0      	lsls	r0, r4, #2
    de02:	1900      	adds	r0, r0, r4
    de04:	685b      	ldr	r3, [r3, #4]
    de06:	0080      	lsls	r0, r0, #2
    de08:	1818      	adds	r0, r3, r0
    de0a:	47c0      	blx	r8
    de0c:	2800      	cmp	r0, #0
    de0e:	d0f0      	beq.n	ddf2 <MiApp_SendData+0x1de>
    de10:	47d0      	blx	sl
    de12:	2832      	cmp	r0, #50	; 0x32
    de14:	d9ed      	bls.n	ddf2 <MiApp_SendData+0x1de>
    de16:	20a0      	movs	r0, #160	; 0xa0
    de18:	4b2b      	ldr	r3, [pc, #172]	; (dec8 <MiApp_SendData+0x2b4>)
    de1a:	4798      	blx	r3
    de1c:	4681      	mov	r9, r0
    de1e:	2800      	cmp	r0, #0
    de20:	d0e7      	beq.n	ddf2 <MiApp_SendData+0x1de>
    de22:	9901      	ldr	r1, [sp, #4]
    de24:	22a0      	movs	r2, #160	; 0xa0
    de26:	47a8      	blx	r5
    de28:	464a      	mov	r2, r9
    de2a:	683b      	ldr	r3, [r7, #0]
    de2c:	4649      	mov	r1, r9
    de2e:	7f9b      	ldrb	r3, [r3, #30]
    de30:	4658      	mov	r0, fp
    de32:	3301      	adds	r3, #1
    de34:	7413      	strb	r3, [r2, #16]
    de36:	2200      	movs	r2, #0
    de38:	464b      	mov	r3, r9
    de3a:	745a      	strb	r2, [r3, #17]
    de3c:	8833      	ldrh	r3, [r6, #0]
    de3e:	608a      	str	r2, [r1, #8]
    de40:	191b      	adds	r3, r3, r4
    de42:	818b      	strh	r3, [r1, #12]
    de44:	4b2b      	ldr	r3, [pc, #172]	; (def4 <MiApp_SendData+0x2e0>)
    de46:	4798      	blx	r3
    de48:	e7d3      	b.n	ddf2 <MiApp_SendData+0x1de>
    de4a:	9901      	ldr	r1, [sp, #4]
    de4c:	4830      	ldr	r0, [pc, #192]	; (df10 <MiApp_SendData+0x2fc>)
    de4e:	4b29      	ldr	r3, [pc, #164]	; (def4 <MiApp_SendData+0x2e0>)
    de50:	4798      	blx	r3
    de52:	e701      	b.n	dc58 <MiApp_SendData+0x44>
    de54:	2300      	movs	r3, #0
    de56:	9801      	ldr	r0, [sp, #4]
    de58:	0029      	movs	r1, r5
    de5a:	7443      	strb	r3, [r0, #17]
    de5c:	4a1e      	ldr	r2, [pc, #120]	; (ded8 <MiApp_SendData+0x2c4>)
    de5e:	4b1f      	ldr	r3, [pc, #124]	; (dedc <MiApp_SendData+0x2c8>)
    de60:	0005      	movs	r5, r0
    de62:	4798      	blx	r3
    de64:	1e04      	subs	r4, r0, #0
    de66:	d1f0      	bne.n	de4a <MiApp_SendData+0x236>
    de68:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    de6a:	2b00      	cmp	r3, #0
    de6c:	d100      	bne.n	de70 <MiApp_SendData+0x25c>
    de6e:	e73d      	b.n	dcec <MiApp_SendData+0xd8>
    de70:	002a      	movs	r2, r5
    de72:	7ca8      	ldrb	r0, [r5, #18]
    de74:	2101      	movs	r1, #1
    de76:	4798      	blx	r3
    de78:	e738      	b.n	dcec <MiApp_SendData+0xd8>
    de7a:	9b01      	ldr	r3, [sp, #4]
    de7c:	819c      	strh	r4, [r3, #12]
    de7e:	0623      	lsls	r3, r4, #24
    de80:	d50f      	bpl.n	dea2 <MiApp_SendData+0x28e>
    de82:	0025      	movs	r5, r4
    de84:	2f00      	cmp	r7, #0
    de86:	d0e5      	beq.n	de54 <MiApp_SendData+0x240>
    de88:	0021      	movs	r1, r4
    de8a:	4b22      	ldr	r3, [pc, #136]	; (df14 <MiApp_SendData+0x300>)
    de8c:	2001      	movs	r0, #1
    de8e:	4798      	blx	r3
    de90:	9a01      	ldr	r2, [sp, #4]
    de92:	4b14      	ldr	r3, [pc, #80]	; (dee4 <MiApp_SendData+0x2d0>)
    de94:	7410      	strb	r0, [r2, #16]
    de96:	681c      	ldr	r4, [r3, #0]
    de98:	8995      	ldrh	r5, [r2, #12]
    de9a:	e76c      	b.n	dd76 <MiApp_SendData+0x162>
    de9c:	9b01      	ldr	r3, [sp, #4]
    de9e:	8b9c      	ldrh	r4, [r3, #28]
    dea0:	e7f2      	b.n	de88 <MiApp_SendData+0x274>
    dea2:	4b10      	ldr	r3, [pc, #64]	; (dee4 <MiApp_SendData+0x2d0>)
    dea4:	9901      	ldr	r1, [sp, #4]
    dea6:	681a      	ldr	r2, [r3, #0]
    dea8:	4818      	ldr	r0, [pc, #96]	; (df0c <MiApp_SendData+0x2f8>)
    deaa:	7f93      	ldrb	r3, [r2, #30]
    deac:	2401      	movs	r4, #1
    deae:	3301      	adds	r3, #1
    deb0:	740b      	strb	r3, [r1, #16]
    deb2:	233e      	movs	r3, #62	; 0x3e
    deb4:	5cd3      	ldrb	r3, [r2, r3]
    deb6:	3301      	adds	r3, #1
    deb8:	744b      	strb	r3, [r1, #17]
    deba:	4b0e      	ldr	r3, [pc, #56]	; (def4 <MiApp_SendData+0x2e0>)
    debc:	4798      	blx	r3
    debe:	e6cb      	b.n	dc58 <MiApp_SendData+0x44>
    dec0:	200028b8 	.word	0x200028b8
    dec4:	20001ce1 	.word	0x20001ce1
    dec8:	0000bc69 	.word	0x0000bc69
    decc:	00014d37 	.word	0x00014d37
    ded0:	0000fffc 	.word	0x0000fffc
    ded4:	0000ffff 	.word	0x0000ffff
    ded8:	0000d351 	.word	0x0000d351
    dedc:	0000f2ad 	.word	0x0000f2ad
    dee0:	0000bd25 	.word	0x0000bd25
    dee4:	2000285c 	.word	0x2000285c
    dee8:	000124c1 	.word	0x000124c1
    deec:	0000d57d 	.word	0x0000d57d
    def0:	2000287c 	.word	0x2000287c
    def4:	0000be65 	.word	0x0000be65
    def8:	00011fc1 	.word	0x00011fc1
    defc:	000121fd 	.word	0x000121fd
    df00:	20002908 	.word	0x20002908
    df04:	00011861 	.word	0x00011861
    df08:	0000bda1 	.word	0x0000bda1
    df0c:	20002850 	.word	0x20002850
    df10:	20002844 	.word	0x20002844
    df14:	0000dbb9 	.word	0x0000dbb9

0000df18 <bloomFilterAddressCheck>:
    df18:	b5f0      	push	{r4, r5, r6, r7, lr}
    df1a:	464e      	mov	r6, r9
    df1c:	46de      	mov	lr, fp
    df1e:	4657      	mov	r7, sl
    df20:	4645      	mov	r5, r8
    df22:	b5e0      	push	{r5, r6, r7, lr}
    df24:	4bf5      	ldr	r3, [pc, #980]	; (e2fc <bloomFilterAddressCheck+0x3e4>)
    df26:	b087      	sub	sp, #28
    df28:	781b      	ldrb	r3, [r3, #0]
    df2a:	9003      	str	r0, [sp, #12]
    df2c:	000e      	movs	r6, r1
    df2e:	9300      	str	r3, [sp, #0]
    df30:	2b00      	cmp	r3, #0
    df32:	d001      	beq.n	df38 <bloomFilterAddressCheck+0x20>
    df34:	f000 fe65 	bl	ec02 <bloomFilterAddressCheck+0xcea>
    df38:	7811      	ldrb	r1, [r2, #0]
    df3a:	020b      	lsls	r3, r1, #8
    df3c:	0249      	lsls	r1, r1, #9
    df3e:	b209      	sxth	r1, r1
    df40:	b218      	sxth	r0, r3
    df42:	468c      	mov	ip, r1
    df44:	4680      	mov	r8, r0
    df46:	4660      	mov	r0, ip
    df48:	4644      	mov	r4, r8
    df4a:	49ed      	ldr	r1, [pc, #948]	; (e300 <bloomFilterAddressCheck+0x3e8>)
    df4c:	005b      	lsls	r3, r3, #1
    df4e:	4041      	eors	r1, r0
    df50:	b29b      	uxth	r3, r3
    df52:	b289      	uxth	r1, r1
    df54:	9304      	str	r3, [sp, #16]
    df56:	1c18      	adds	r0, r3, #0
    df58:	2c00      	cmp	r4, #0
    df5a:	da01      	bge.n	df60 <bloomFilterAddressCheck+0x48>
    df5c:	f000 fe5b 	bl	ec16 <bloomFilterAddressCheck+0xcfe>
    df60:	b284      	uxth	r4, r0
    df62:	49e7      	ldr	r1, [pc, #924]	; (e300 <bloomFilterAddressCheck+0x3e8>)
    df64:	0064      	lsls	r4, r4, #1
    df66:	4061      	eors	r1, r4
    df68:	b209      	sxth	r1, r1
    df6a:	b289      	uxth	r1, r1
    df6c:	0044      	lsls	r4, r0, #1
    df6e:	0403      	lsls	r3, r0, #16
    df70:	d501      	bpl.n	df76 <bloomFilterAddressCheck+0x5e>
    df72:	f000 fe53 	bl	ec1c <bloomFilterAddressCheck+0xd04>
    df76:	b2a0      	uxth	r0, r4
    df78:	49e1      	ldr	r1, [pc, #900]	; (e300 <bloomFilterAddressCheck+0x3e8>)
    df7a:	0040      	lsls	r0, r0, #1
    df7c:	4041      	eors	r1, r0
    df7e:	b289      	uxth	r1, r1
    df80:	0060      	lsls	r0, r4, #1
    df82:	0423      	lsls	r3, r4, #16
    df84:	d501      	bpl.n	df8a <bloomFilterAddressCheck+0x72>
    df86:	f000 fe54 	bl	ec32 <bloomFilterAddressCheck+0xd1a>
    df8a:	b284      	uxth	r4, r0
    df8c:	49dc      	ldr	r1, [pc, #880]	; (e300 <bloomFilterAddressCheck+0x3e8>)
    df8e:	0064      	lsls	r4, r4, #1
    df90:	4061      	eors	r1, r4
    df92:	b289      	uxth	r1, r1
    df94:	0044      	lsls	r4, r0, #1
    df96:	0403      	lsls	r3, r0, #16
    df98:	d501      	bpl.n	df9e <bloomFilterAddressCheck+0x86>
    df9a:	f000 fe55 	bl	ec48 <bloomFilterAddressCheck+0xd30>
    df9e:	b2a0      	uxth	r0, r4
    dfa0:	49d7      	ldr	r1, [pc, #860]	; (e300 <bloomFilterAddressCheck+0x3e8>)
    dfa2:	0040      	lsls	r0, r0, #1
    dfa4:	4041      	eors	r1, r0
    dfa6:	b289      	uxth	r1, r1
    dfa8:	0060      	lsls	r0, r4, #1
    dfaa:	0423      	lsls	r3, r4, #16
    dfac:	d501      	bpl.n	dfb2 <bloomFilterAddressCheck+0x9a>
    dfae:	f000 fe56 	bl	ec5e <bloomFilterAddressCheck+0xd46>
    dfb2:	b284      	uxth	r4, r0
    dfb4:	49d2      	ldr	r1, [pc, #840]	; (e300 <bloomFilterAddressCheck+0x3e8>)
    dfb6:	0064      	lsls	r4, r4, #1
    dfb8:	4061      	eors	r1, r4
    dfba:	b289      	uxth	r1, r1
    dfbc:	0044      	lsls	r4, r0, #1
    dfbe:	0403      	lsls	r3, r0, #16
    dfc0:	d501      	bpl.n	dfc6 <bloomFilterAddressCheck+0xae>
    dfc2:	f000 fe57 	bl	ec74 <bloomFilterAddressCheck+0xd5c>
    dfc6:	b2a0      	uxth	r0, r4
    dfc8:	49cd      	ldr	r1, [pc, #820]	; (e300 <bloomFilterAddressCheck+0x3e8>)
    dfca:	0040      	lsls	r0, r0, #1
    dfcc:	4041      	eors	r1, r0
    dfce:	b289      	uxth	r1, r1
    dfd0:	0060      	lsls	r0, r4, #1
    dfd2:	0423      	lsls	r3, r4, #16
    dfd4:	d501      	bpl.n	dfda <bloomFilterAddressCheck+0xc2>
    dfd6:	f000 fe58 	bl	ec8a <bloomFilterAddressCheck+0xd72>
    dfda:	b284      	uxth	r4, r0
    dfdc:	49c8      	ldr	r1, [pc, #800]	; (e300 <bloomFilterAddressCheck+0x3e8>)
    dfde:	0064      	lsls	r4, r4, #1
    dfe0:	4061      	eors	r1, r4
    dfe2:	2401      	movs	r4, #1
    dfe4:	5714      	ldrsb	r4, [r2, r4]
    dfe6:	b289      	uxth	r1, r1
    dfe8:	0224      	lsls	r4, r4, #8
    dfea:	0045      	lsls	r5, r0, #1
    dfec:	0403      	lsls	r3, r0, #16
    dfee:	d501      	bpl.n	dff4 <bloomFilterAddressCheck+0xdc>
    dff0:	f000 fe4e 	bl	ec90 <bloomFilterAddressCheck+0xd78>
    dff4:	4065      	eors	r5, r4
    dff6:	b22d      	sxth	r5, r5
    dff8:	b2a9      	uxth	r1, r5
    dffa:	48c1      	ldr	r0, [pc, #772]	; (e300 <bloomFilterAddressCheck+0x3e8>)
    dffc:	0049      	lsls	r1, r1, #1
    dffe:	4048      	eors	r0, r1
    e000:	b280      	uxth	r0, r0
    e002:	2d00      	cmp	r5, #0
    e004:	da01      	bge.n	e00a <bloomFilterAddressCheck+0xf2>
    e006:	f000 fe46 	bl	ec96 <bloomFilterAddressCheck+0xd7e>
    e00a:	48bd      	ldr	r0, [pc, #756]	; (e300 <bloomFilterAddressCheck+0x3e8>)
    e00c:	b28d      	uxth	r5, r1
    e00e:	006d      	lsls	r5, r5, #1
    e010:	4045      	eors	r5, r0
    e012:	b2ad      	uxth	r5, r5
    e014:	0048      	lsls	r0, r1, #1
    e016:	040b      	lsls	r3, r1, #16
    e018:	d501      	bpl.n	e01e <bloomFilterAddressCheck+0x106>
    e01a:	f000 fe47 	bl	ecac <bloomFilterAddressCheck+0xd94>
    e01e:	b285      	uxth	r5, r0
    e020:	49b7      	ldr	r1, [pc, #732]	; (e300 <bloomFilterAddressCheck+0x3e8>)
    e022:	006d      	lsls	r5, r5, #1
    e024:	4069      	eors	r1, r5
    e026:	b289      	uxth	r1, r1
    e028:	0045      	lsls	r5, r0, #1
    e02a:	0403      	lsls	r3, r0, #16
    e02c:	d501      	bpl.n	e032 <bloomFilterAddressCheck+0x11a>
    e02e:	f000 fe48 	bl	ecc2 <bloomFilterAddressCheck+0xdaa>
    e032:	b2a8      	uxth	r0, r5
    e034:	49b2      	ldr	r1, [pc, #712]	; (e300 <bloomFilterAddressCheck+0x3e8>)
    e036:	0040      	lsls	r0, r0, #1
    e038:	4041      	eors	r1, r0
    e03a:	b289      	uxth	r1, r1
    e03c:	0068      	lsls	r0, r5, #1
    e03e:	042b      	lsls	r3, r5, #16
    e040:	d501      	bpl.n	e046 <bloomFilterAddressCheck+0x12e>
    e042:	f000 fe49 	bl	ecd8 <bloomFilterAddressCheck+0xdc0>
    e046:	b285      	uxth	r5, r0
    e048:	49ad      	ldr	r1, [pc, #692]	; (e300 <bloomFilterAddressCheck+0x3e8>)
    e04a:	006d      	lsls	r5, r5, #1
    e04c:	4069      	eors	r1, r5
    e04e:	b289      	uxth	r1, r1
    e050:	0045      	lsls	r5, r0, #1
    e052:	0403      	lsls	r3, r0, #16
    e054:	d501      	bpl.n	e05a <bloomFilterAddressCheck+0x142>
    e056:	f000 fe4a 	bl	ecee <bloomFilterAddressCheck+0xdd6>
    e05a:	b2a8      	uxth	r0, r5
    e05c:	49a8      	ldr	r1, [pc, #672]	; (e300 <bloomFilterAddressCheck+0x3e8>)
    e05e:	0040      	lsls	r0, r0, #1
    e060:	4041      	eors	r1, r0
    e062:	b289      	uxth	r1, r1
    e064:	0068      	lsls	r0, r5, #1
    e066:	042b      	lsls	r3, r5, #16
    e068:	d501      	bpl.n	e06e <bloomFilterAddressCheck+0x156>
    e06a:	f000 fe4b 	bl	ed04 <bloomFilterAddressCheck+0xdec>
    e06e:	b285      	uxth	r5, r0
    e070:	49a3      	ldr	r1, [pc, #652]	; (e300 <bloomFilterAddressCheck+0x3e8>)
    e072:	006d      	lsls	r5, r5, #1
    e074:	4069      	eors	r1, r5
    e076:	b289      	uxth	r1, r1
    e078:	0045      	lsls	r5, r0, #1
    e07a:	0403      	lsls	r3, r0, #16
    e07c:	d501      	bpl.n	e082 <bloomFilterAddressCheck+0x16a>
    e07e:	f000 fe4c 	bl	ed1a <bloomFilterAddressCheck+0xe02>
    e082:	b2a8      	uxth	r0, r5
    e084:	499e      	ldr	r1, [pc, #632]	; (e300 <bloomFilterAddressCheck+0x3e8>)
    e086:	0040      	lsls	r0, r0, #1
    e088:	4041      	eors	r1, r0
    e08a:	2002      	movs	r0, #2
    e08c:	5610      	ldrsb	r0, [r2, r0]
    e08e:	006f      	lsls	r7, r5, #1
    e090:	b289      	uxth	r1, r1
    e092:	0200      	lsls	r0, r0, #8
    e094:	46b9      	mov	r9, r7
    e096:	042b      	lsls	r3, r5, #16
    e098:	d501      	bpl.n	e09e <bloomFilterAddressCheck+0x186>
    e09a:	f000 fe41 	bl	ed20 <bloomFilterAddressCheck+0xe08>
    e09e:	464d      	mov	r5, r9
    e0a0:	4045      	eors	r5, r0
    e0a2:	b22d      	sxth	r5, r5
    e0a4:	b2a9      	uxth	r1, r5
    e0a6:	0049      	lsls	r1, r1, #1
    e0a8:	4689      	mov	r9, r1
    e0aa:	464f      	mov	r7, r9
    e0ac:	4994      	ldr	r1, [pc, #592]	; (e300 <bloomFilterAddressCheck+0x3e8>)
    e0ae:	4079      	eors	r1, r7
    e0b0:	b289      	uxth	r1, r1
    e0b2:	468a      	mov	sl, r1
    e0b4:	4649      	mov	r1, r9
    e0b6:	2d00      	cmp	r5, #0
    e0b8:	da01      	bge.n	e0be <bloomFilterAddressCheck+0x1a6>
    e0ba:	f000 fe34 	bl	ed26 <bloomFilterAddressCheck+0xe0e>
    e0be:	b28d      	uxth	r5, r1
    e0c0:	006d      	lsls	r5, r5, #1
    e0c2:	46a9      	mov	r9, r5
    e0c4:	464f      	mov	r7, r9
    e0c6:	4d8e      	ldr	r5, [pc, #568]	; (e300 <bloomFilterAddressCheck+0x3e8>)
    e0c8:	407d      	eors	r5, r7
    e0ca:	b2ad      	uxth	r5, r5
    e0cc:	46a9      	mov	r9, r5
    e0ce:	004d      	lsls	r5, r1, #1
    e0d0:	040b      	lsls	r3, r1, #16
    e0d2:	d501      	bpl.n	e0d8 <bloomFilterAddressCheck+0x1c0>
    e0d4:	f000 fe2a 	bl	ed2c <bloomFilterAddressCheck+0xe14>
    e0d8:	b2a9      	uxth	r1, r5
    e0da:	0049      	lsls	r1, r1, #1
    e0dc:	4689      	mov	r9, r1
    e0de:	464f      	mov	r7, r9
    e0e0:	4987      	ldr	r1, [pc, #540]	; (e300 <bloomFilterAddressCheck+0x3e8>)
    e0e2:	4079      	eors	r1, r7
    e0e4:	006f      	lsls	r7, r5, #1
    e0e6:	b289      	uxth	r1, r1
    e0e8:	46b9      	mov	r9, r7
    e0ea:	042b      	lsls	r3, r5, #16
    e0ec:	d501      	bpl.n	e0f2 <bloomFilterAddressCheck+0x1da>
    e0ee:	f000 fe20 	bl	ed32 <bloomFilterAddressCheck+0xe1a>
    e0f2:	4649      	mov	r1, r9
    e0f4:	466b      	mov	r3, sp
    e0f6:	b28d      	uxth	r5, r1
    e0f8:	8099      	strh	r1, [r3, #4]
    e0fa:	4981      	ldr	r1, [pc, #516]	; (e300 <bloomFilterAddressCheck+0x3e8>)
    e0fc:	006d      	lsls	r5, r5, #1
    e0fe:	4069      	eors	r1, r5
    e100:	464f      	mov	r7, r9
    e102:	464d      	mov	r5, r9
    e104:	b289      	uxth	r1, r1
    e106:	006d      	lsls	r5, r5, #1
    e108:	043b      	lsls	r3, r7, #16
    e10a:	d501      	bpl.n	e110 <bloomFilterAddressCheck+0x1f8>
    e10c:	f000 fe14 	bl	ed38 <bloomFilterAddressCheck+0xe20>
    e110:	b2a9      	uxth	r1, r5
    e112:	0049      	lsls	r1, r1, #1
    e114:	4689      	mov	r9, r1
    e116:	464f      	mov	r7, r9
    e118:	4979      	ldr	r1, [pc, #484]	; (e300 <bloomFilterAddressCheck+0x3e8>)
    e11a:	4079      	eors	r1, r7
    e11c:	006f      	lsls	r7, r5, #1
    e11e:	b289      	uxth	r1, r1
    e120:	46b9      	mov	r9, r7
    e122:	042b      	lsls	r3, r5, #16
    e124:	d501      	bpl.n	e12a <bloomFilterAddressCheck+0x212>
    e126:	f000 fe0a 	bl	ed3e <bloomFilterAddressCheck+0xe26>
    e12a:	4649      	mov	r1, r9
    e12c:	466b      	mov	r3, sp
    e12e:	b28d      	uxth	r5, r1
    e130:	8099      	strh	r1, [r3, #4]
    e132:	4973      	ldr	r1, [pc, #460]	; (e300 <bloomFilterAddressCheck+0x3e8>)
    e134:	006d      	lsls	r5, r5, #1
    e136:	4069      	eors	r1, r5
    e138:	464f      	mov	r7, r9
    e13a:	464d      	mov	r5, r9
    e13c:	b289      	uxth	r1, r1
    e13e:	006d      	lsls	r5, r5, #1
    e140:	043b      	lsls	r3, r7, #16
    e142:	d501      	bpl.n	e148 <bloomFilterAddressCheck+0x230>
    e144:	f000 fdfe 	bl	ed44 <bloomFilterAddressCheck+0xe2c>
    e148:	b2a9      	uxth	r1, r5
    e14a:	0049      	lsls	r1, r1, #1
    e14c:	4689      	mov	r9, r1
    e14e:	464f      	mov	r7, r9
    e150:	496b      	ldr	r1, [pc, #428]	; (e300 <bloomFilterAddressCheck+0x3e8>)
    e152:	4079      	eors	r1, r7
    e154:	006f      	lsls	r7, r5, #1
    e156:	b289      	uxth	r1, r1
    e158:	46ba      	mov	sl, r7
    e15a:	042b      	lsls	r3, r5, #16
    e15c:	d501      	bpl.n	e162 <bloomFilterAddressCheck+0x24a>
    e15e:	f000 fdf4 	bl	ed4a <bloomFilterAddressCheck+0xe32>
    e162:	4651      	mov	r1, sl
    e164:	466b      	mov	r3, sp
    e166:	b28d      	uxth	r5, r1
    e168:	8099      	strh	r1, [r3, #4]
    e16a:	4965      	ldr	r1, [pc, #404]	; (e300 <bloomFilterAddressCheck+0x3e8>)
    e16c:	006d      	lsls	r5, r5, #1
    e16e:	4069      	eors	r1, r5
    e170:	b289      	uxth	r1, r1
    e172:	4689      	mov	r9, r1
    e174:	2103      	movs	r1, #3
    e176:	4655      	mov	r5, sl
    e178:	4657      	mov	r7, sl
    e17a:	5651      	ldrsb	r1, [r2, r1]
    e17c:	006d      	lsls	r5, r5, #1
    e17e:	0209      	lsls	r1, r1, #8
    e180:	043b      	lsls	r3, r7, #16
    e182:	d501      	bpl.n	e188 <bloomFilterAddressCheck+0x270>
    e184:	f000 fde4 	bl	ed50 <bloomFilterAddressCheck+0xe38>
    e188:	404d      	eors	r5, r1
    e18a:	b22d      	sxth	r5, r5
    e18c:	466b      	mov	r3, sp
    e18e:	46a9      	mov	r9, r5
    e190:	4f5b      	ldr	r7, [pc, #364]	; (e300 <bloomFilterAddressCheck+0x3e8>)
    e192:	b2ad      	uxth	r5, r5
    e194:	006d      	lsls	r5, r5, #1
    e196:	406f      	eors	r7, r5
    e198:	809f      	strh	r7, [r3, #4]
    e19a:	b2bf      	uxth	r7, r7
    e19c:	46ba      	mov	sl, r7
    e19e:	464f      	mov	r7, r9
    e1a0:	2f00      	cmp	r7, #0
    e1a2:	da01      	bge.n	e1a8 <bloomFilterAddressCheck+0x290>
    e1a4:	f000 fdd7 	bl	ed56 <bloomFilterAddressCheck+0xe3e>
    e1a8:	b2af      	uxth	r7, r5
    e1aa:	007f      	lsls	r7, r7, #1
    e1ac:	46ba      	mov	sl, r7
    e1ae:	4f54      	ldr	r7, [pc, #336]	; (e300 <bloomFilterAddressCheck+0x3e8>)
    e1b0:	46b9      	mov	r9, r7
    e1b2:	4657      	mov	r7, sl
    e1b4:	464b      	mov	r3, r9
    e1b6:	405f      	eors	r7, r3
    e1b8:	1c3b      	adds	r3, r7, #0
    e1ba:	466f      	mov	r7, sp
    e1bc:	80bb      	strh	r3, [r7, #4]
    e1be:	88bb      	ldrh	r3, [r7, #4]
    e1c0:	469a      	mov	sl, r3
    e1c2:	006b      	lsls	r3, r5, #1
    e1c4:	4699      	mov	r9, r3
    e1c6:	042b      	lsls	r3, r5, #16
    e1c8:	d501      	bpl.n	e1ce <bloomFilterAddressCheck+0x2b6>
    e1ca:	f000 fdc7 	bl	ed5c <bloomFilterAddressCheck+0xe44>
    e1ce:	464b      	mov	r3, r9
    e1d0:	466d      	mov	r5, sp
    e1d2:	80ab      	strh	r3, [r5, #4]
    e1d4:	88ad      	ldrh	r5, [r5, #4]
    e1d6:	006b      	lsls	r3, r5, #1
    e1d8:	4d49      	ldr	r5, [pc, #292]	; (e300 <bloomFilterAddressCheck+0x3e8>)
    e1da:	405d      	eors	r5, r3
    e1dc:	464b      	mov	r3, r9
    e1de:	005b      	lsls	r3, r3, #1
    e1e0:	469a      	mov	sl, r3
    e1e2:	464b      	mov	r3, r9
    e1e4:	b2ad      	uxth	r5, r5
    e1e6:	041b      	lsls	r3, r3, #16
    e1e8:	d501      	bpl.n	e1ee <bloomFilterAddressCheck+0x2d6>
    e1ea:	f000 fdba 	bl	ed62 <bloomFilterAddressCheck+0xe4a>
    e1ee:	4653      	mov	r3, sl
    e1f0:	466d      	mov	r5, sp
    e1f2:	80ab      	strh	r3, [r5, #4]
    e1f4:	88ad      	ldrh	r5, [r5, #4]
    e1f6:	006b      	lsls	r3, r5, #1
    e1f8:	4d41      	ldr	r5, [pc, #260]	; (e300 <bloomFilterAddressCheck+0x3e8>)
    e1fa:	405d      	eors	r5, r3
    e1fc:	4653      	mov	r3, sl
    e1fe:	005b      	lsls	r3, r3, #1
    e200:	4699      	mov	r9, r3
    e202:	4653      	mov	r3, sl
    e204:	b2ad      	uxth	r5, r5
    e206:	041b      	lsls	r3, r3, #16
    e208:	d501      	bpl.n	e20e <bloomFilterAddressCheck+0x2f6>
    e20a:	f000 fdad 	bl	ed68 <bloomFilterAddressCheck+0xe50>
    e20e:	464b      	mov	r3, r9
    e210:	466d      	mov	r5, sp
    e212:	80ab      	strh	r3, [r5, #4]
    e214:	88ad      	ldrh	r5, [r5, #4]
    e216:	006b      	lsls	r3, r5, #1
    e218:	4d39      	ldr	r5, [pc, #228]	; (e300 <bloomFilterAddressCheck+0x3e8>)
    e21a:	405d      	eors	r5, r3
    e21c:	464b      	mov	r3, r9
    e21e:	005b      	lsls	r3, r3, #1
    e220:	469a      	mov	sl, r3
    e222:	464b      	mov	r3, r9
    e224:	b2ad      	uxth	r5, r5
    e226:	041b      	lsls	r3, r3, #16
    e228:	d501      	bpl.n	e22e <bloomFilterAddressCheck+0x316>
    e22a:	f000 fda0 	bl	ed6e <bloomFilterAddressCheck+0xe56>
    e22e:	4653      	mov	r3, sl
    e230:	466d      	mov	r5, sp
    e232:	80ab      	strh	r3, [r5, #4]
    e234:	88ad      	ldrh	r5, [r5, #4]
    e236:	006b      	lsls	r3, r5, #1
    e238:	4d31      	ldr	r5, [pc, #196]	; (e300 <bloomFilterAddressCheck+0x3e8>)
    e23a:	405d      	eors	r5, r3
    e23c:	4653      	mov	r3, sl
    e23e:	005b      	lsls	r3, r3, #1
    e240:	4699      	mov	r9, r3
    e242:	4653      	mov	r3, sl
    e244:	b2ad      	uxth	r5, r5
    e246:	041b      	lsls	r3, r3, #16
    e248:	d501      	bpl.n	e24e <bloomFilterAddressCheck+0x336>
    e24a:	f000 fd93 	bl	ed74 <bloomFilterAddressCheck+0xe5c>
    e24e:	464b      	mov	r3, r9
    e250:	466d      	mov	r5, sp
    e252:	80ab      	strh	r3, [r5, #4]
    e254:	88ad      	ldrh	r5, [r5, #4]
    e256:	006b      	lsls	r3, r5, #1
    e258:	4d29      	ldr	r5, [pc, #164]	; (e300 <bloomFilterAddressCheck+0x3e8>)
    e25a:	405d      	eors	r5, r3
    e25c:	464b      	mov	r3, r9
    e25e:	005b      	lsls	r3, r3, #1
    e260:	469a      	mov	sl, r3
    e262:	464b      	mov	r3, r9
    e264:	b2ad      	uxth	r5, r5
    e266:	041b      	lsls	r3, r3, #16
    e268:	d501      	bpl.n	e26e <bloomFilterAddressCheck+0x356>
    e26a:	f000 fd86 	bl	ed7a <bloomFilterAddressCheck+0xe62>
    e26e:	4653      	mov	r3, sl
    e270:	466d      	mov	r5, sp
    e272:	80ab      	strh	r3, [r5, #4]
    e274:	88ad      	ldrh	r5, [r5, #4]
    e276:	006b      	lsls	r3, r5, #1
    e278:	4d21      	ldr	r5, [pc, #132]	; (e300 <bloomFilterAddressCheck+0x3e8>)
    e27a:	405d      	eors	r5, r3
    e27c:	b2ab      	uxth	r3, r5
    e27e:	2504      	movs	r5, #4
    e280:	5755      	ldrsb	r5, [r2, r5]
    e282:	4699      	mov	r9, r3
    e284:	022b      	lsls	r3, r5, #8
    e286:	469b      	mov	fp, r3
    e288:	4653      	mov	r3, sl
    e28a:	005d      	lsls	r5, r3, #1
    e28c:	041b      	lsls	r3, r3, #16
    e28e:	d501      	bpl.n	e294 <bloomFilterAddressCheck+0x37c>
    e290:	f000 fd76 	bl	ed80 <bloomFilterAddressCheck+0xe68>
    e294:	465b      	mov	r3, fp
    e296:	405d      	eors	r5, r3
    e298:	b22b      	sxth	r3, r5
    e29a:	466d      	mov	r5, sp
    e29c:	4699      	mov	r9, r3
    e29e:	80ab      	strh	r3, [r5, #4]
    e2a0:	4b17      	ldr	r3, [pc, #92]	; (e300 <bloomFilterAddressCheck+0x3e8>)
    e2a2:	88ad      	ldrh	r5, [r5, #4]
    e2a4:	001f      	movs	r7, r3
    e2a6:	006d      	lsls	r5, r5, #1
    e2a8:	406f      	eors	r7, r5
    e2aa:	1c3b      	adds	r3, r7, #0
    e2ac:	466f      	mov	r7, sp
    e2ae:	80bb      	strh	r3, [r7, #4]
    e2b0:	88bb      	ldrh	r3, [r7, #4]
    e2b2:	469a      	mov	sl, r3
    e2b4:	464b      	mov	r3, r9
    e2b6:	2b00      	cmp	r3, #0
    e2b8:	da01      	bge.n	e2be <bloomFilterAddressCheck+0x3a6>
    e2ba:	f000 fd64 	bl	ed86 <bloomFilterAddressCheck+0xe6e>
    e2be:	b2ab      	uxth	r3, r5
    e2c0:	005b      	lsls	r3, r3, #1
    e2c2:	469a      	mov	sl, r3
    e2c4:	4657      	mov	r7, sl
    e2c6:	4b0e      	ldr	r3, [pc, #56]	; (e300 <bloomFilterAddressCheck+0x3e8>)
    e2c8:	405f      	eors	r7, r3
    e2ca:	1c3b      	adds	r3, r7, #0
    e2cc:	466f      	mov	r7, sp
    e2ce:	80bb      	strh	r3, [r7, #4]
    e2d0:	88bb      	ldrh	r3, [r7, #4]
    e2d2:	469a      	mov	sl, r3
    e2d4:	006b      	lsls	r3, r5, #1
    e2d6:	4699      	mov	r9, r3
    e2d8:	042b      	lsls	r3, r5, #16
    e2da:	d501      	bpl.n	e2e0 <bloomFilterAddressCheck+0x3c8>
    e2dc:	f000 fd56 	bl	ed8c <bloomFilterAddressCheck+0xe74>
    e2e0:	464b      	mov	r3, r9
    e2e2:	466d      	mov	r5, sp
    e2e4:	80ab      	strh	r3, [r5, #4]
    e2e6:	88ad      	ldrh	r5, [r5, #4]
    e2e8:	006b      	lsls	r3, r5, #1
    e2ea:	4d05      	ldr	r5, [pc, #20]	; (e300 <bloomFilterAddressCheck+0x3e8>)
    e2ec:	405d      	eors	r5, r3
    e2ee:	464b      	mov	r3, r9
    e2f0:	005b      	lsls	r3, r3, #1
    e2f2:	469a      	mov	sl, r3
    e2f4:	464b      	mov	r3, r9
    e2f6:	b2ad      	uxth	r5, r5
    e2f8:	e004      	b.n	e304 <bloomFilterAddressCheck+0x3ec>
    e2fa:	46c0      	nop			; (mov r8, r8)
    e2fc:	20000091 	.word	0x20000091
    e300:	00001021 	.word	0x00001021
    e304:	041b      	lsls	r3, r3, #16
    e306:	d501      	bpl.n	e30c <bloomFilterAddressCheck+0x3f4>
    e308:	f000 fd43 	bl	ed92 <bloomFilterAddressCheck+0xe7a>
    e30c:	4653      	mov	r3, sl
    e30e:	466d      	mov	r5, sp
    e310:	80ab      	strh	r3, [r5, #4]
    e312:	88ad      	ldrh	r5, [r5, #4]
    e314:	006b      	lsls	r3, r5, #1
    e316:	4de9      	ldr	r5, [pc, #932]	; (e6bc <bloomFilterAddressCheck+0x7a4>)
    e318:	405d      	eors	r5, r3
    e31a:	4653      	mov	r3, sl
    e31c:	005b      	lsls	r3, r3, #1
    e31e:	4699      	mov	r9, r3
    e320:	4653      	mov	r3, sl
    e322:	b2ad      	uxth	r5, r5
    e324:	041b      	lsls	r3, r3, #16
    e326:	d501      	bpl.n	e32c <bloomFilterAddressCheck+0x414>
    e328:	f000 fd36 	bl	ed98 <bloomFilterAddressCheck+0xe80>
    e32c:	464b      	mov	r3, r9
    e32e:	466d      	mov	r5, sp
    e330:	80ab      	strh	r3, [r5, #4]
    e332:	88ad      	ldrh	r5, [r5, #4]
    e334:	006b      	lsls	r3, r5, #1
    e336:	4de1      	ldr	r5, [pc, #900]	; (e6bc <bloomFilterAddressCheck+0x7a4>)
    e338:	405d      	eors	r5, r3
    e33a:	464b      	mov	r3, r9
    e33c:	005b      	lsls	r3, r3, #1
    e33e:	469a      	mov	sl, r3
    e340:	464b      	mov	r3, r9
    e342:	b2ad      	uxth	r5, r5
    e344:	041b      	lsls	r3, r3, #16
    e346:	d501      	bpl.n	e34c <bloomFilterAddressCheck+0x434>
    e348:	f000 fd29 	bl	ed9e <bloomFilterAddressCheck+0xe86>
    e34c:	4653      	mov	r3, sl
    e34e:	466d      	mov	r5, sp
    e350:	80ab      	strh	r3, [r5, #4]
    e352:	88ad      	ldrh	r5, [r5, #4]
    e354:	006b      	lsls	r3, r5, #1
    e356:	4dd9      	ldr	r5, [pc, #868]	; (e6bc <bloomFilterAddressCheck+0x7a4>)
    e358:	405d      	eors	r5, r3
    e35a:	4653      	mov	r3, sl
    e35c:	005b      	lsls	r3, r3, #1
    e35e:	4699      	mov	r9, r3
    e360:	4653      	mov	r3, sl
    e362:	b2ad      	uxth	r5, r5
    e364:	041b      	lsls	r3, r3, #16
    e366:	d501      	bpl.n	e36c <bloomFilterAddressCheck+0x454>
    e368:	f000 fd1c 	bl	eda4 <bloomFilterAddressCheck+0xe8c>
    e36c:	464b      	mov	r3, r9
    e36e:	466d      	mov	r5, sp
    e370:	80ab      	strh	r3, [r5, #4]
    e372:	88ad      	ldrh	r5, [r5, #4]
    e374:	006b      	lsls	r3, r5, #1
    e376:	4dd1      	ldr	r5, [pc, #836]	; (e6bc <bloomFilterAddressCheck+0x7a4>)
    e378:	405d      	eors	r5, r3
    e37a:	464b      	mov	r3, r9
    e37c:	005b      	lsls	r3, r3, #1
    e37e:	469a      	mov	sl, r3
    e380:	464b      	mov	r3, r9
    e382:	b2ad      	uxth	r5, r5
    e384:	041b      	lsls	r3, r3, #16
    e386:	d501      	bpl.n	e38c <bloomFilterAddressCheck+0x474>
    e388:	f000 fd0f 	bl	edaa <bloomFilterAddressCheck+0xe92>
    e38c:	4653      	mov	r3, sl
    e38e:	466d      	mov	r5, sp
    e390:	80ab      	strh	r3, [r5, #4]
    e392:	88ad      	ldrh	r5, [r5, #4]
    e394:	006b      	lsls	r3, r5, #1
    e396:	4dc9      	ldr	r5, [pc, #804]	; (e6bc <bloomFilterAddressCheck+0x7a4>)
    e398:	405d      	eors	r5, r3
    e39a:	b2ab      	uxth	r3, r5
    e39c:	2505      	movs	r5, #5
    e39e:	5755      	ldrsb	r5, [r2, r5]
    e3a0:	4699      	mov	r9, r3
    e3a2:	022b      	lsls	r3, r5, #8
    e3a4:	9301      	str	r3, [sp, #4]
    e3a6:	4653      	mov	r3, sl
    e3a8:	005d      	lsls	r5, r3, #1
    e3aa:	041b      	lsls	r3, r3, #16
    e3ac:	d501      	bpl.n	e3b2 <bloomFilterAddressCheck+0x49a>
    e3ae:	f000 fcff 	bl	edb0 <bloomFilterAddressCheck+0xe98>
    e3b2:	9b01      	ldr	r3, [sp, #4]
    e3b4:	405d      	eors	r5, r3
    e3b6:	b22b      	sxth	r3, r5
    e3b8:	466d      	mov	r5, sp
    e3ba:	4699      	mov	r9, r3
    e3bc:	812b      	strh	r3, [r5, #8]
    e3be:	4bbf      	ldr	r3, [pc, #764]	; (e6bc <bloomFilterAddressCheck+0x7a4>)
    e3c0:	892d      	ldrh	r5, [r5, #8]
    e3c2:	001f      	movs	r7, r3
    e3c4:	006d      	lsls	r5, r5, #1
    e3c6:	406f      	eors	r7, r5
    e3c8:	1c3b      	adds	r3, r7, #0
    e3ca:	466f      	mov	r7, sp
    e3cc:	813b      	strh	r3, [r7, #8]
    e3ce:	893b      	ldrh	r3, [r7, #8]
    e3d0:	469a      	mov	sl, r3
    e3d2:	464b      	mov	r3, r9
    e3d4:	2b00      	cmp	r3, #0
    e3d6:	da01      	bge.n	e3dc <bloomFilterAddressCheck+0x4c4>
    e3d8:	f000 fced 	bl	edb6 <bloomFilterAddressCheck+0xe9e>
    e3dc:	b2ab      	uxth	r3, r5
    e3de:	005b      	lsls	r3, r3, #1
    e3e0:	469a      	mov	sl, r3
    e3e2:	4657      	mov	r7, sl
    e3e4:	4bb5      	ldr	r3, [pc, #724]	; (e6bc <bloomFilterAddressCheck+0x7a4>)
    e3e6:	405f      	eors	r7, r3
    e3e8:	1c3b      	adds	r3, r7, #0
    e3ea:	466f      	mov	r7, sp
    e3ec:	813b      	strh	r3, [r7, #8]
    e3ee:	893b      	ldrh	r3, [r7, #8]
    e3f0:	469a      	mov	sl, r3
    e3f2:	006b      	lsls	r3, r5, #1
    e3f4:	4699      	mov	r9, r3
    e3f6:	042b      	lsls	r3, r5, #16
    e3f8:	d501      	bpl.n	e3fe <bloomFilterAddressCheck+0x4e6>
    e3fa:	f000 fcdf 	bl	edbc <bloomFilterAddressCheck+0xea4>
    e3fe:	464b      	mov	r3, r9
    e400:	466d      	mov	r5, sp
    e402:	812b      	strh	r3, [r5, #8]
    e404:	892d      	ldrh	r5, [r5, #8]
    e406:	006b      	lsls	r3, r5, #1
    e408:	4dac      	ldr	r5, [pc, #688]	; (e6bc <bloomFilterAddressCheck+0x7a4>)
    e40a:	405d      	eors	r5, r3
    e40c:	464b      	mov	r3, r9
    e40e:	005b      	lsls	r3, r3, #1
    e410:	469a      	mov	sl, r3
    e412:	464b      	mov	r3, r9
    e414:	b2ad      	uxth	r5, r5
    e416:	041b      	lsls	r3, r3, #16
    e418:	d501      	bpl.n	e41e <bloomFilterAddressCheck+0x506>
    e41a:	f000 fcd2 	bl	edc2 <bloomFilterAddressCheck+0xeaa>
    e41e:	4653      	mov	r3, sl
    e420:	466d      	mov	r5, sp
    e422:	812b      	strh	r3, [r5, #8]
    e424:	892d      	ldrh	r5, [r5, #8]
    e426:	006b      	lsls	r3, r5, #1
    e428:	4da4      	ldr	r5, [pc, #656]	; (e6bc <bloomFilterAddressCheck+0x7a4>)
    e42a:	405d      	eors	r5, r3
    e42c:	4653      	mov	r3, sl
    e42e:	005b      	lsls	r3, r3, #1
    e430:	4699      	mov	r9, r3
    e432:	4653      	mov	r3, sl
    e434:	b2ad      	uxth	r5, r5
    e436:	041b      	lsls	r3, r3, #16
    e438:	d501      	bpl.n	e43e <bloomFilterAddressCheck+0x526>
    e43a:	f000 fcc5 	bl	edc8 <bloomFilterAddressCheck+0xeb0>
    e43e:	464b      	mov	r3, r9
    e440:	466d      	mov	r5, sp
    e442:	812b      	strh	r3, [r5, #8]
    e444:	892d      	ldrh	r5, [r5, #8]
    e446:	006b      	lsls	r3, r5, #1
    e448:	4d9c      	ldr	r5, [pc, #624]	; (e6bc <bloomFilterAddressCheck+0x7a4>)
    e44a:	405d      	eors	r5, r3
    e44c:	464b      	mov	r3, r9
    e44e:	005b      	lsls	r3, r3, #1
    e450:	469a      	mov	sl, r3
    e452:	464b      	mov	r3, r9
    e454:	b2ad      	uxth	r5, r5
    e456:	041b      	lsls	r3, r3, #16
    e458:	d501      	bpl.n	e45e <bloomFilterAddressCheck+0x546>
    e45a:	f000 fcb8 	bl	edce <bloomFilterAddressCheck+0xeb6>
    e45e:	4653      	mov	r3, sl
    e460:	466d      	mov	r5, sp
    e462:	812b      	strh	r3, [r5, #8]
    e464:	892d      	ldrh	r5, [r5, #8]
    e466:	006b      	lsls	r3, r5, #1
    e468:	4d94      	ldr	r5, [pc, #592]	; (e6bc <bloomFilterAddressCheck+0x7a4>)
    e46a:	405d      	eors	r5, r3
    e46c:	4653      	mov	r3, sl
    e46e:	005b      	lsls	r3, r3, #1
    e470:	4699      	mov	r9, r3
    e472:	4653      	mov	r3, sl
    e474:	b2ad      	uxth	r5, r5
    e476:	041b      	lsls	r3, r3, #16
    e478:	d501      	bpl.n	e47e <bloomFilterAddressCheck+0x566>
    e47a:	f000 fcab 	bl	edd4 <bloomFilterAddressCheck+0xebc>
    e47e:	464b      	mov	r3, r9
    e480:	466d      	mov	r5, sp
    e482:	812b      	strh	r3, [r5, #8]
    e484:	892d      	ldrh	r5, [r5, #8]
    e486:	006b      	lsls	r3, r5, #1
    e488:	4d8c      	ldr	r5, [pc, #560]	; (e6bc <bloomFilterAddressCheck+0x7a4>)
    e48a:	405d      	eors	r5, r3
    e48c:	464b      	mov	r3, r9
    e48e:	005b      	lsls	r3, r3, #1
    e490:	469a      	mov	sl, r3
    e492:	464b      	mov	r3, r9
    e494:	b2ad      	uxth	r5, r5
    e496:	041b      	lsls	r3, r3, #16
    e498:	d501      	bpl.n	e49e <bloomFilterAddressCheck+0x586>
    e49a:	f000 fc9e 	bl	edda <bloomFilterAddressCheck+0xec2>
    e49e:	4653      	mov	r3, sl
    e4a0:	466d      	mov	r5, sp
    e4a2:	812b      	strh	r3, [r5, #8]
    e4a4:	892d      	ldrh	r5, [r5, #8]
    e4a6:	006b      	lsls	r3, r5, #1
    e4a8:	4d84      	ldr	r5, [pc, #528]	; (e6bc <bloomFilterAddressCheck+0x7a4>)
    e4aa:	405d      	eors	r5, r3
    e4ac:	b2ab      	uxth	r3, r5
    e4ae:	2506      	movs	r5, #6
    e4b0:	5755      	ldrsb	r5, [r2, r5]
    e4b2:	4699      	mov	r9, r3
    e4b4:	022b      	lsls	r3, r5, #8
    e4b6:	9302      	str	r3, [sp, #8]
    e4b8:	4653      	mov	r3, sl
    e4ba:	005d      	lsls	r5, r3, #1
    e4bc:	041b      	lsls	r3, r3, #16
    e4be:	d501      	bpl.n	e4c4 <bloomFilterAddressCheck+0x5ac>
    e4c0:	f000 fc8e 	bl	ede0 <bloomFilterAddressCheck+0xec8>
    e4c4:	9b02      	ldr	r3, [sp, #8]
    e4c6:	405d      	eors	r5, r3
    e4c8:	b22b      	sxth	r3, r5
    e4ca:	466d      	mov	r5, sp
    e4cc:	4699      	mov	r9, r3
    e4ce:	82ab      	strh	r3, [r5, #20]
    e4d0:	4b7a      	ldr	r3, [pc, #488]	; (e6bc <bloomFilterAddressCheck+0x7a4>)
    e4d2:	8aad      	ldrh	r5, [r5, #20]
    e4d4:	001f      	movs	r7, r3
    e4d6:	006d      	lsls	r5, r5, #1
    e4d8:	406f      	eors	r7, r5
    e4da:	1c3b      	adds	r3, r7, #0
    e4dc:	466f      	mov	r7, sp
    e4de:	82bb      	strh	r3, [r7, #20]
    e4e0:	8abb      	ldrh	r3, [r7, #20]
    e4e2:	469a      	mov	sl, r3
    e4e4:	464b      	mov	r3, r9
    e4e6:	2b00      	cmp	r3, #0
    e4e8:	da01      	bge.n	e4ee <bloomFilterAddressCheck+0x5d6>
    e4ea:	f000 fc7c 	bl	ede6 <bloomFilterAddressCheck+0xece>
    e4ee:	b2ab      	uxth	r3, r5
    e4f0:	005b      	lsls	r3, r3, #1
    e4f2:	469a      	mov	sl, r3
    e4f4:	4657      	mov	r7, sl
    e4f6:	4b71      	ldr	r3, [pc, #452]	; (e6bc <bloomFilterAddressCheck+0x7a4>)
    e4f8:	405f      	eors	r7, r3
    e4fa:	1c3b      	adds	r3, r7, #0
    e4fc:	466f      	mov	r7, sp
    e4fe:	82bb      	strh	r3, [r7, #20]
    e500:	8abb      	ldrh	r3, [r7, #20]
    e502:	4699      	mov	r9, r3
    e504:	006b      	lsls	r3, r5, #1
    e506:	469a      	mov	sl, r3
    e508:	042b      	lsls	r3, r5, #16
    e50a:	d501      	bpl.n	e510 <bloomFilterAddressCheck+0x5f8>
    e50c:	f000 fc6e 	bl	edec <bloomFilterAddressCheck+0xed4>
    e510:	4653      	mov	r3, sl
    e512:	466d      	mov	r5, sp
    e514:	82ab      	strh	r3, [r5, #20]
    e516:	8aad      	ldrh	r5, [r5, #20]
    e518:	006b      	lsls	r3, r5, #1
    e51a:	4d68      	ldr	r5, [pc, #416]	; (e6bc <bloomFilterAddressCheck+0x7a4>)
    e51c:	405d      	eors	r5, r3
    e51e:	4653      	mov	r3, sl
    e520:	005b      	lsls	r3, r3, #1
    e522:	4699      	mov	r9, r3
    e524:	4653      	mov	r3, sl
    e526:	b2ad      	uxth	r5, r5
    e528:	041b      	lsls	r3, r3, #16
    e52a:	d501      	bpl.n	e530 <bloomFilterAddressCheck+0x618>
    e52c:	f000 fc61 	bl	edf2 <bloomFilterAddressCheck+0xeda>
    e530:	464b      	mov	r3, r9
    e532:	466d      	mov	r5, sp
    e534:	82ab      	strh	r3, [r5, #20]
    e536:	8aad      	ldrh	r5, [r5, #20]
    e538:	006b      	lsls	r3, r5, #1
    e53a:	4d60      	ldr	r5, [pc, #384]	; (e6bc <bloomFilterAddressCheck+0x7a4>)
    e53c:	405d      	eors	r5, r3
    e53e:	464b      	mov	r3, r9
    e540:	005b      	lsls	r3, r3, #1
    e542:	469a      	mov	sl, r3
    e544:	464b      	mov	r3, r9
    e546:	b2ad      	uxth	r5, r5
    e548:	041b      	lsls	r3, r3, #16
    e54a:	d501      	bpl.n	e550 <bloomFilterAddressCheck+0x638>
    e54c:	f000 fc54 	bl	edf8 <bloomFilterAddressCheck+0xee0>
    e550:	4653      	mov	r3, sl
    e552:	466d      	mov	r5, sp
    e554:	82ab      	strh	r3, [r5, #20]
    e556:	8aad      	ldrh	r5, [r5, #20]
    e558:	006b      	lsls	r3, r5, #1
    e55a:	4d58      	ldr	r5, [pc, #352]	; (e6bc <bloomFilterAddressCheck+0x7a4>)
    e55c:	405d      	eors	r5, r3
    e55e:	4653      	mov	r3, sl
    e560:	005b      	lsls	r3, r3, #1
    e562:	4699      	mov	r9, r3
    e564:	4653      	mov	r3, sl
    e566:	b2ad      	uxth	r5, r5
    e568:	041b      	lsls	r3, r3, #16
    e56a:	d501      	bpl.n	e570 <bloomFilterAddressCheck+0x658>
    e56c:	f000 fc47 	bl	edfe <bloomFilterAddressCheck+0xee6>
    e570:	464b      	mov	r3, r9
    e572:	466d      	mov	r5, sp
    e574:	82ab      	strh	r3, [r5, #20]
    e576:	8aad      	ldrh	r5, [r5, #20]
    e578:	006b      	lsls	r3, r5, #1
    e57a:	4d50      	ldr	r5, [pc, #320]	; (e6bc <bloomFilterAddressCheck+0x7a4>)
    e57c:	405d      	eors	r5, r3
    e57e:	464b      	mov	r3, r9
    e580:	005b      	lsls	r3, r3, #1
    e582:	469a      	mov	sl, r3
    e584:	464b      	mov	r3, r9
    e586:	b2ad      	uxth	r5, r5
    e588:	041b      	lsls	r3, r3, #16
    e58a:	d501      	bpl.n	e590 <bloomFilterAddressCheck+0x678>
    e58c:	f000 fc3a 	bl	ee04 <bloomFilterAddressCheck+0xeec>
    e590:	4653      	mov	r3, sl
    e592:	466d      	mov	r5, sp
    e594:	82ab      	strh	r3, [r5, #20]
    e596:	8aad      	ldrh	r5, [r5, #20]
    e598:	006b      	lsls	r3, r5, #1
    e59a:	4d48      	ldr	r5, [pc, #288]	; (e6bc <bloomFilterAddressCheck+0x7a4>)
    e59c:	405d      	eors	r5, r3
    e59e:	4653      	mov	r3, sl
    e5a0:	005b      	lsls	r3, r3, #1
    e5a2:	4699      	mov	r9, r3
    e5a4:	4653      	mov	r3, sl
    e5a6:	b2ad      	uxth	r5, r5
    e5a8:	041b      	lsls	r3, r3, #16
    e5aa:	d501      	bpl.n	e5b0 <bloomFilterAddressCheck+0x698>
    e5ac:	f000 fc2d 	bl	ee0a <bloomFilterAddressCheck+0xef2>
    e5b0:	464b      	mov	r3, r9
    e5b2:	466d      	mov	r5, sp
    e5b4:	82ab      	strh	r3, [r5, #20]
    e5b6:	8aad      	ldrh	r5, [r5, #20]
    e5b8:	79d2      	ldrb	r2, [r2, #7]
    e5ba:	006b      	lsls	r3, r5, #1
    e5bc:	4d3f      	ldr	r5, [pc, #252]	; (e6bc <bloomFilterAddressCheck+0x7a4>)
    e5be:	b252      	sxtb	r2, r2
    e5c0:	405d      	eors	r5, r3
    e5c2:	0213      	lsls	r3, r2, #8
    e5c4:	469a      	mov	sl, r3
    e5c6:	464b      	mov	r3, r9
    e5c8:	b2ad      	uxth	r5, r5
    e5ca:	005a      	lsls	r2, r3, #1
    e5cc:	041b      	lsls	r3, r3, #16
    e5ce:	d501      	bpl.n	e5d4 <bloomFilterAddressCheck+0x6bc>
    e5d0:	f000 fc1e 	bl	ee10 <bloomFilterAddressCheck+0xef8>
    e5d4:	4653      	mov	r3, sl
    e5d6:	405a      	eors	r2, r3
    e5d8:	4b38      	ldr	r3, [pc, #224]	; (e6bc <bloomFilterAddressCheck+0x7a4>)
    e5da:	b212      	sxth	r2, r2
    e5dc:	001f      	movs	r7, r3
    e5de:	b295      	uxth	r5, r2
    e5e0:	006d      	lsls	r5, r5, #1
    e5e2:	406f      	eors	r7, r5
    e5e4:	1c3b      	adds	r3, r7, #0
    e5e6:	466f      	mov	r7, sp
    e5e8:	82bb      	strh	r3, [r7, #20]
    e5ea:	8abb      	ldrh	r3, [r7, #20]
    e5ec:	b2ad      	uxth	r5, r5
    e5ee:	2a00      	cmp	r2, #0
    e5f0:	da00      	bge.n	e5f4 <bloomFilterAddressCheck+0x6dc>
    e5f2:	e30e      	b.n	ec12 <bloomFilterAddressCheck+0xcfa>
    e5f4:	1c2a      	adds	r2, r5, #0
    e5f6:	466f      	mov	r7, sp
    e5f8:	b295      	uxth	r5, r2
    e5fa:	006b      	lsls	r3, r5, #1
    e5fc:	4d2f      	ldr	r5, [pc, #188]	; (e6bc <bloomFilterAddressCheck+0x7a4>)
    e5fe:	405d      	eors	r5, r3
    e600:	0053      	lsls	r3, r2, #1
    e602:	82bb      	strh	r3, [r7, #20]
    e604:	8abb      	ldrh	r3, [r7, #20]
    e606:	b2ad      	uxth	r5, r5
    e608:	4699      	mov	r9, r3
    e60a:	0413      	lsls	r3, r2, #16
    e60c:	d501      	bpl.n	e612 <bloomFilterAddressCheck+0x6fa>
    e60e:	f000 fcb4 	bl	ef7a <bloomFilterAddressCheck+0x1062>
    e612:	464a      	mov	r2, r9
    e614:	466f      	mov	r7, sp
    e616:	b295      	uxth	r5, r2
    e618:	006b      	lsls	r3, r5, #1
    e61a:	4d28      	ldr	r5, [pc, #160]	; (e6bc <bloomFilterAddressCheck+0x7a4>)
    e61c:	405d      	eors	r5, r3
    e61e:	0053      	lsls	r3, r2, #1
    e620:	82bb      	strh	r3, [r7, #20]
    e622:	8abb      	ldrh	r3, [r7, #20]
    e624:	b2ad      	uxth	r5, r5
    e626:	4699      	mov	r9, r3
    e628:	0413      	lsls	r3, r2, #16
    e62a:	d400      	bmi.n	e62e <bloomFilterAddressCheck+0x716>
    e62c:	464d      	mov	r5, r9
    e62e:	466f      	mov	r7, sp
    e630:	b2aa      	uxth	r2, r5
    e632:	0053      	lsls	r3, r2, #1
    e634:	4a21      	ldr	r2, [pc, #132]	; (e6bc <bloomFilterAddressCheck+0x7a4>)
    e636:	405a      	eors	r2, r3
    e638:	006b      	lsls	r3, r5, #1
    e63a:	82bb      	strh	r3, [r7, #20]
    e63c:	8abb      	ldrh	r3, [r7, #20]
    e63e:	b292      	uxth	r2, r2
    e640:	4699      	mov	r9, r3
    e642:	042b      	lsls	r3, r5, #16
    e644:	d400      	bmi.n	e648 <bloomFilterAddressCheck+0x730>
    e646:	464a      	mov	r2, r9
    e648:	466f      	mov	r7, sp
    e64a:	b295      	uxth	r5, r2
    e64c:	006b      	lsls	r3, r5, #1
    e64e:	4d1b      	ldr	r5, [pc, #108]	; (e6bc <bloomFilterAddressCheck+0x7a4>)
    e650:	405d      	eors	r5, r3
    e652:	0053      	lsls	r3, r2, #1
    e654:	82bb      	strh	r3, [r7, #20]
    e656:	8abb      	ldrh	r3, [r7, #20]
    e658:	b2ad      	uxth	r5, r5
    e65a:	4699      	mov	r9, r3
    e65c:	0413      	lsls	r3, r2, #16
    e65e:	d400      	bmi.n	e662 <bloomFilterAddressCheck+0x74a>
    e660:	464d      	mov	r5, r9
    e662:	466f      	mov	r7, sp
    e664:	b2aa      	uxth	r2, r5
    e666:	0053      	lsls	r3, r2, #1
    e668:	4a14      	ldr	r2, [pc, #80]	; (e6bc <bloomFilterAddressCheck+0x7a4>)
    e66a:	405a      	eors	r2, r3
    e66c:	006b      	lsls	r3, r5, #1
    e66e:	82bb      	strh	r3, [r7, #20]
    e670:	8abb      	ldrh	r3, [r7, #20]
    e672:	b292      	uxth	r2, r2
    e674:	4699      	mov	r9, r3
    e676:	042b      	lsls	r3, r5, #16
    e678:	d400      	bmi.n	e67c <bloomFilterAddressCheck+0x764>
    e67a:	464a      	mov	r2, r9
    e67c:	b295      	uxth	r5, r2
    e67e:	006b      	lsls	r3, r5, #1
    e680:	4d0e      	ldr	r5, [pc, #56]	; (e6bc <bloomFilterAddressCheck+0x7a4>)
    e682:	405d      	eors	r5, r3
    e684:	b2ab      	uxth	r3, r5
    e686:	0055      	lsls	r5, r2, #1
    e688:	4699      	mov	r9, r3
    e68a:	b2ad      	uxth	r5, r5
    e68c:	0413      	lsls	r3, r2, #16
    e68e:	d501      	bpl.n	e694 <bloomFilterAddressCheck+0x77c>
    e690:	f000 fc70 	bl	ef74 <bloomFilterAddressCheck+0x105c>
    e694:	1c2a      	adds	r2, r5, #0
    e696:	b295      	uxth	r5, r2
    e698:	b213      	sxth	r3, r2
    e69a:	001f      	movs	r7, r3
    e69c:	006b      	lsls	r3, r5, #1
    e69e:	4d07      	ldr	r5, [pc, #28]	; (e6bc <bloomFilterAddressCheck+0x7a4>)
    e6a0:	0052      	lsls	r2, r2, #1
    e6a2:	405d      	eors	r5, r3
    e6a4:	b2ab      	uxth	r3, r5
    e6a6:	9305      	str	r3, [sp, #20]
    e6a8:	b293      	uxth	r3, r2
    e6aa:	4699      	mov	r9, r3
    e6ac:	4663      	mov	r3, ip
    e6ae:	4a04      	ldr	r2, [pc, #16]	; (e6c0 <bloomFilterAddressCheck+0x7a8>)
    e6b0:	4645      	mov	r5, r8
    e6b2:	405a      	eors	r2, r3
    e6b4:	466b      	mov	r3, sp
    e6b6:	b292      	uxth	r2, r2
    e6b8:	8a1b      	ldrh	r3, [r3, #16]
    e6ba:	e003      	b.n	e6c4 <bloomFilterAddressCheck+0x7ac>
    e6bc:	00001021 	.word	0x00001021
    e6c0:	ffff8005 	.word	0xffff8005
    e6c4:	2d00      	cmp	r5, #0
    e6c6:	da01      	bge.n	e6cc <bloomFilterAddressCheck+0x7b4>
    e6c8:	f000 fc51 	bl	ef6e <bloomFilterAddressCheck+0x1056>
    e6cc:	b29d      	uxth	r5, r3
    e6ce:	4ae9      	ldr	r2, [pc, #932]	; (ea74 <bloomFilterAddressCheck+0xb5c>)
    e6d0:	006d      	lsls	r5, r5, #1
    e6d2:	406a      	eors	r2, r5
    e6d4:	b212      	sxth	r2, r2
    e6d6:	b295      	uxth	r5, r2
    e6d8:	005a      	lsls	r2, r3, #1
    e6da:	b292      	uxth	r2, r2
    e6dc:	041b      	lsls	r3, r3, #16
    e6de:	d501      	bpl.n	e6e4 <bloomFilterAddressCheck+0x7cc>
    e6e0:	f000 fc42 	bl	ef68 <bloomFilterAddressCheck+0x1050>
    e6e4:	4be3      	ldr	r3, [pc, #908]	; (ea74 <bloomFilterAddressCheck+0xb5c>)
    e6e6:	b295      	uxth	r5, r2
    e6e8:	006d      	lsls	r5, r5, #1
    e6ea:	405d      	eors	r5, r3
    e6ec:	0053      	lsls	r3, r2, #1
    e6ee:	b2ad      	uxth	r5, r5
    e6f0:	b29b      	uxth	r3, r3
    e6f2:	0412      	lsls	r2, r2, #16
    e6f4:	d501      	bpl.n	e6fa <bloomFilterAddressCheck+0x7e2>
    e6f6:	f000 fc34 	bl	ef62 <bloomFilterAddressCheck+0x104a>
    e6fa:	4ade      	ldr	r2, [pc, #888]	; (ea74 <bloomFilterAddressCheck+0xb5c>)
    e6fc:	b29d      	uxth	r5, r3
    e6fe:	006d      	lsls	r5, r5, #1
    e700:	4055      	eors	r5, r2
    e702:	005a      	lsls	r2, r3, #1
    e704:	b2ad      	uxth	r5, r5
    e706:	b292      	uxth	r2, r2
    e708:	041b      	lsls	r3, r3, #16
    e70a:	d501      	bpl.n	e710 <bloomFilterAddressCheck+0x7f8>
    e70c:	f000 fc26 	bl	ef5c <bloomFilterAddressCheck+0x1044>
    e710:	4bd8      	ldr	r3, [pc, #864]	; (ea74 <bloomFilterAddressCheck+0xb5c>)
    e712:	b295      	uxth	r5, r2
    e714:	006d      	lsls	r5, r5, #1
    e716:	405d      	eors	r5, r3
    e718:	0053      	lsls	r3, r2, #1
    e71a:	b2ad      	uxth	r5, r5
    e71c:	b29b      	uxth	r3, r3
    e71e:	0412      	lsls	r2, r2, #16
    e720:	d501      	bpl.n	e726 <bloomFilterAddressCheck+0x80e>
    e722:	f000 fc18 	bl	ef56 <bloomFilterAddressCheck+0x103e>
    e726:	4ad3      	ldr	r2, [pc, #844]	; (ea74 <bloomFilterAddressCheck+0xb5c>)
    e728:	b29d      	uxth	r5, r3
    e72a:	006d      	lsls	r5, r5, #1
    e72c:	4055      	eors	r5, r2
    e72e:	005a      	lsls	r2, r3, #1
    e730:	b2ad      	uxth	r5, r5
    e732:	b292      	uxth	r2, r2
    e734:	041b      	lsls	r3, r3, #16
    e736:	d501      	bpl.n	e73c <bloomFilterAddressCheck+0x824>
    e738:	f000 fc0a 	bl	ef50 <bloomFilterAddressCheck+0x1038>
    e73c:	4bcd      	ldr	r3, [pc, #820]	; (ea74 <bloomFilterAddressCheck+0xb5c>)
    e73e:	b295      	uxth	r5, r2
    e740:	006d      	lsls	r5, r5, #1
    e742:	405d      	eors	r5, r3
    e744:	0053      	lsls	r3, r2, #1
    e746:	b2ad      	uxth	r5, r5
    e748:	b29b      	uxth	r3, r3
    e74a:	0412      	lsls	r2, r2, #16
    e74c:	d500      	bpl.n	e750 <bloomFilterAddressCheck+0x838>
    e74e:	e3c1      	b.n	eed4 <bloomFilterAddressCheck+0xfbc>
    e750:	b29a      	uxth	r2, r3
    e752:	4dc8      	ldr	r5, [pc, #800]	; (ea74 <bloomFilterAddressCheck+0xb5c>)
    e754:	0052      	lsls	r2, r2, #1
    e756:	4055      	eors	r5, r2
    e758:	005a      	lsls	r2, r3, #1
    e75a:	b2ad      	uxth	r5, r5
    e75c:	b292      	uxth	r2, r2
    e75e:	041b      	lsls	r3, r3, #16
    e760:	d500      	bpl.n	e764 <bloomFilterAddressCheck+0x84c>
    e762:	e3b5      	b.n	eed0 <bloomFilterAddressCheck+0xfb8>
    e764:	4054      	eors	r4, r2
    e766:	b224      	sxth	r4, r4
    e768:	b2a2      	uxth	r2, r4
    e76a:	4bc2      	ldr	r3, [pc, #776]	; (ea74 <bloomFilterAddressCheck+0xb5c>)
    e76c:	0052      	lsls	r2, r2, #1
    e76e:	4053      	eors	r3, r2
    e770:	b29d      	uxth	r5, r3
    e772:	b293      	uxth	r3, r2
    e774:	2c00      	cmp	r4, #0
    e776:	da00      	bge.n	e77a <bloomFilterAddressCheck+0x862>
    e778:	e3a8      	b.n	eecc <bloomFilterAddressCheck+0xfb4>
    e77a:	4abe      	ldr	r2, [pc, #760]	; (ea74 <bloomFilterAddressCheck+0xb5c>)
    e77c:	b29c      	uxth	r4, r3
    e77e:	0064      	lsls	r4, r4, #1
    e780:	4054      	eors	r4, r2
    e782:	005a      	lsls	r2, r3, #1
    e784:	b2a4      	uxth	r4, r4
    e786:	b292      	uxth	r2, r2
    e788:	041b      	lsls	r3, r3, #16
    e78a:	d500      	bpl.n	e78e <bloomFilterAddressCheck+0x876>
    e78c:	e39c      	b.n	eec8 <bloomFilterAddressCheck+0xfb0>
    e78e:	4bb9      	ldr	r3, [pc, #740]	; (ea74 <bloomFilterAddressCheck+0xb5c>)
    e790:	b294      	uxth	r4, r2
    e792:	0064      	lsls	r4, r4, #1
    e794:	405c      	eors	r4, r3
    e796:	0053      	lsls	r3, r2, #1
    e798:	b2a4      	uxth	r4, r4
    e79a:	b29b      	uxth	r3, r3
    e79c:	0412      	lsls	r2, r2, #16
    e79e:	d500      	bpl.n	e7a2 <bloomFilterAddressCheck+0x88a>
    e7a0:	e390      	b.n	eec4 <bloomFilterAddressCheck+0xfac>
    e7a2:	4ab4      	ldr	r2, [pc, #720]	; (ea74 <bloomFilterAddressCheck+0xb5c>)
    e7a4:	b29c      	uxth	r4, r3
    e7a6:	0064      	lsls	r4, r4, #1
    e7a8:	4054      	eors	r4, r2
    e7aa:	005a      	lsls	r2, r3, #1
    e7ac:	b2a4      	uxth	r4, r4
    e7ae:	b292      	uxth	r2, r2
    e7b0:	041b      	lsls	r3, r3, #16
    e7b2:	d500      	bpl.n	e7b6 <bloomFilterAddressCheck+0x89e>
    e7b4:	e384      	b.n	eec0 <bloomFilterAddressCheck+0xfa8>
    e7b6:	4baf      	ldr	r3, [pc, #700]	; (ea74 <bloomFilterAddressCheck+0xb5c>)
    e7b8:	b294      	uxth	r4, r2
    e7ba:	0064      	lsls	r4, r4, #1
    e7bc:	405c      	eors	r4, r3
    e7be:	0053      	lsls	r3, r2, #1
    e7c0:	b2a4      	uxth	r4, r4
    e7c2:	b29b      	uxth	r3, r3
    e7c4:	0412      	lsls	r2, r2, #16
    e7c6:	d500      	bpl.n	e7ca <bloomFilterAddressCheck+0x8b2>
    e7c8:	e378      	b.n	eebc <bloomFilterAddressCheck+0xfa4>
    e7ca:	4aaa      	ldr	r2, [pc, #680]	; (ea74 <bloomFilterAddressCheck+0xb5c>)
    e7cc:	b29c      	uxth	r4, r3
    e7ce:	0064      	lsls	r4, r4, #1
    e7d0:	4054      	eors	r4, r2
    e7d2:	005a      	lsls	r2, r3, #1
    e7d4:	b2a4      	uxth	r4, r4
    e7d6:	b292      	uxth	r2, r2
    e7d8:	041b      	lsls	r3, r3, #16
    e7da:	d500      	bpl.n	e7de <bloomFilterAddressCheck+0x8c6>
    e7dc:	e36c      	b.n	eeb8 <bloomFilterAddressCheck+0xfa0>
    e7de:	4ba5      	ldr	r3, [pc, #660]	; (ea74 <bloomFilterAddressCheck+0xb5c>)
    e7e0:	b294      	uxth	r4, r2
    e7e2:	0064      	lsls	r4, r4, #1
    e7e4:	405c      	eors	r4, r3
    e7e6:	0053      	lsls	r3, r2, #1
    e7e8:	b2a4      	uxth	r4, r4
    e7ea:	b29b      	uxth	r3, r3
    e7ec:	0412      	lsls	r2, r2, #16
    e7ee:	d500      	bpl.n	e7f2 <bloomFilterAddressCheck+0x8da>
    e7f0:	e360      	b.n	eeb4 <bloomFilterAddressCheck+0xf9c>
    e7f2:	b29a      	uxth	r2, r3
    e7f4:	4c9f      	ldr	r4, [pc, #636]	; (ea74 <bloomFilterAddressCheck+0xb5c>)
    e7f6:	0052      	lsls	r2, r2, #1
    e7f8:	4054      	eors	r4, r2
    e7fa:	005a      	lsls	r2, r3, #1
    e7fc:	b2a4      	uxth	r4, r4
    e7fe:	b292      	uxth	r2, r2
    e800:	041b      	lsls	r3, r3, #16
    e802:	d500      	bpl.n	e806 <bloomFilterAddressCheck+0x8ee>
    e804:	e354      	b.n	eeb0 <bloomFilterAddressCheck+0xf98>
    e806:	4050      	eors	r0, r2
    e808:	b200      	sxth	r0, r0
    e80a:	b282      	uxth	r2, r0
    e80c:	4b99      	ldr	r3, [pc, #612]	; (ea74 <bloomFilterAddressCheck+0xb5c>)
    e80e:	0052      	lsls	r2, r2, #1
    e810:	4053      	eors	r3, r2
    e812:	b29c      	uxth	r4, r3
    e814:	b293      	uxth	r3, r2
    e816:	2800      	cmp	r0, #0
    e818:	da00      	bge.n	e81c <bloomFilterAddressCheck+0x904>
    e81a:	e347      	b.n	eeac <bloomFilterAddressCheck+0xf94>
    e81c:	4a95      	ldr	r2, [pc, #596]	; (ea74 <bloomFilterAddressCheck+0xb5c>)
    e81e:	b298      	uxth	r0, r3
    e820:	0040      	lsls	r0, r0, #1
    e822:	4050      	eors	r0, r2
    e824:	005a      	lsls	r2, r3, #1
    e826:	b280      	uxth	r0, r0
    e828:	b292      	uxth	r2, r2
    e82a:	041b      	lsls	r3, r3, #16
    e82c:	d500      	bpl.n	e830 <bloomFilterAddressCheck+0x918>
    e82e:	e33b      	b.n	eea8 <bloomFilterAddressCheck+0xf90>
    e830:	4b90      	ldr	r3, [pc, #576]	; (ea74 <bloomFilterAddressCheck+0xb5c>)
    e832:	b290      	uxth	r0, r2
    e834:	0040      	lsls	r0, r0, #1
    e836:	4058      	eors	r0, r3
    e838:	0053      	lsls	r3, r2, #1
    e83a:	b280      	uxth	r0, r0
    e83c:	b29b      	uxth	r3, r3
    e83e:	0412      	lsls	r2, r2, #16
    e840:	d500      	bpl.n	e844 <bloomFilterAddressCheck+0x92c>
    e842:	e32f      	b.n	eea4 <bloomFilterAddressCheck+0xf8c>
    e844:	4a8b      	ldr	r2, [pc, #556]	; (ea74 <bloomFilterAddressCheck+0xb5c>)
    e846:	b298      	uxth	r0, r3
    e848:	0040      	lsls	r0, r0, #1
    e84a:	4050      	eors	r0, r2
    e84c:	005a      	lsls	r2, r3, #1
    e84e:	b280      	uxth	r0, r0
    e850:	b292      	uxth	r2, r2
    e852:	041b      	lsls	r3, r3, #16
    e854:	d500      	bpl.n	e858 <bloomFilterAddressCheck+0x940>
    e856:	e323      	b.n	eea0 <bloomFilterAddressCheck+0xf88>
    e858:	4b86      	ldr	r3, [pc, #536]	; (ea74 <bloomFilterAddressCheck+0xb5c>)
    e85a:	b290      	uxth	r0, r2
    e85c:	0040      	lsls	r0, r0, #1
    e85e:	4058      	eors	r0, r3
    e860:	0053      	lsls	r3, r2, #1
    e862:	b280      	uxth	r0, r0
    e864:	b29b      	uxth	r3, r3
    e866:	0412      	lsls	r2, r2, #16
    e868:	d500      	bpl.n	e86c <bloomFilterAddressCheck+0x954>
    e86a:	e317      	b.n	ee9c <bloomFilterAddressCheck+0xf84>
    e86c:	4a81      	ldr	r2, [pc, #516]	; (ea74 <bloomFilterAddressCheck+0xb5c>)
    e86e:	b298      	uxth	r0, r3
    e870:	0040      	lsls	r0, r0, #1
    e872:	4050      	eors	r0, r2
    e874:	005a      	lsls	r2, r3, #1
    e876:	b280      	uxth	r0, r0
    e878:	b292      	uxth	r2, r2
    e87a:	041b      	lsls	r3, r3, #16
    e87c:	d500      	bpl.n	e880 <bloomFilterAddressCheck+0x968>
    e87e:	e30b      	b.n	ee98 <bloomFilterAddressCheck+0xf80>
    e880:	4b7c      	ldr	r3, [pc, #496]	; (ea74 <bloomFilterAddressCheck+0xb5c>)
    e882:	b290      	uxth	r0, r2
    e884:	0040      	lsls	r0, r0, #1
    e886:	4058      	eors	r0, r3
    e888:	0053      	lsls	r3, r2, #1
    e88a:	b280      	uxth	r0, r0
    e88c:	b29b      	uxth	r3, r3
    e88e:	0412      	lsls	r2, r2, #16
    e890:	d500      	bpl.n	e894 <bloomFilterAddressCheck+0x97c>
    e892:	e2ff      	b.n	ee94 <bloomFilterAddressCheck+0xf7c>
    e894:	b29a      	uxth	r2, r3
    e896:	4877      	ldr	r0, [pc, #476]	; (ea74 <bloomFilterAddressCheck+0xb5c>)
    e898:	0052      	lsls	r2, r2, #1
    e89a:	4050      	eors	r0, r2
    e89c:	005a      	lsls	r2, r3, #1
    e89e:	b280      	uxth	r0, r0
    e8a0:	b292      	uxth	r2, r2
    e8a2:	041b      	lsls	r3, r3, #16
    e8a4:	d500      	bpl.n	e8a8 <bloomFilterAddressCheck+0x990>
    e8a6:	e2f3      	b.n	ee90 <bloomFilterAddressCheck+0xf78>
    e8a8:	4051      	eors	r1, r2
    e8aa:	b209      	sxth	r1, r1
    e8ac:	b28b      	uxth	r3, r1
    e8ae:	4a71      	ldr	r2, [pc, #452]	; (ea74 <bloomFilterAddressCheck+0xb5c>)
    e8b0:	005b      	lsls	r3, r3, #1
    e8b2:	405a      	eors	r2, r3
    e8b4:	b292      	uxth	r2, r2
    e8b6:	2900      	cmp	r1, #0
    e8b8:	da00      	bge.n	e8bc <bloomFilterAddressCheck+0x9a4>
    e8ba:	e2e7      	b.n	ee8c <bloomFilterAddressCheck+0xf74>
    e8bc:	4a6d      	ldr	r2, [pc, #436]	; (ea74 <bloomFilterAddressCheck+0xb5c>)
    e8be:	b299      	uxth	r1, r3
    e8c0:	0049      	lsls	r1, r1, #1
    e8c2:	4051      	eors	r1, r2
    e8c4:	b289      	uxth	r1, r1
    e8c6:	005a      	lsls	r2, r3, #1
    e8c8:	041b      	lsls	r3, r3, #16
    e8ca:	d500      	bpl.n	e8ce <bloomFilterAddressCheck+0x9b6>
    e8cc:	e2dc      	b.n	ee88 <bloomFilterAddressCheck+0xf70>
    e8ce:	b291      	uxth	r1, r2
    e8d0:	4b68      	ldr	r3, [pc, #416]	; (ea74 <bloomFilterAddressCheck+0xb5c>)
    e8d2:	0049      	lsls	r1, r1, #1
    e8d4:	404b      	eors	r3, r1
    e8d6:	b29b      	uxth	r3, r3
    e8d8:	0051      	lsls	r1, r2, #1
    e8da:	0412      	lsls	r2, r2, #16
    e8dc:	d500      	bpl.n	e8e0 <bloomFilterAddressCheck+0x9c8>
    e8de:	e2d1      	b.n	ee84 <bloomFilterAddressCheck+0xf6c>
    e8e0:	b28a      	uxth	r2, r1
    e8e2:	4b64      	ldr	r3, [pc, #400]	; (ea74 <bloomFilterAddressCheck+0xb5c>)
    e8e4:	0052      	lsls	r2, r2, #1
    e8e6:	4053      	eors	r3, r2
    e8e8:	b29b      	uxth	r3, r3
    e8ea:	004a      	lsls	r2, r1, #1
    e8ec:	0409      	lsls	r1, r1, #16
    e8ee:	d500      	bpl.n	e8f2 <bloomFilterAddressCheck+0x9da>
    e8f0:	e2c6      	b.n	ee80 <bloomFilterAddressCheck+0xf68>
    e8f2:	b291      	uxth	r1, r2
    e8f4:	4b5f      	ldr	r3, [pc, #380]	; (ea74 <bloomFilterAddressCheck+0xb5c>)
    e8f6:	0049      	lsls	r1, r1, #1
    e8f8:	404b      	eors	r3, r1
    e8fa:	b29b      	uxth	r3, r3
    e8fc:	0051      	lsls	r1, r2, #1
    e8fe:	0412      	lsls	r2, r2, #16
    e900:	d500      	bpl.n	e904 <bloomFilterAddressCheck+0x9ec>
    e902:	e2bb      	b.n	ee7c <bloomFilterAddressCheck+0xf64>
    e904:	b28a      	uxth	r2, r1
    e906:	4b5b      	ldr	r3, [pc, #364]	; (ea74 <bloomFilterAddressCheck+0xb5c>)
    e908:	0052      	lsls	r2, r2, #1
    e90a:	4053      	eors	r3, r2
    e90c:	b29b      	uxth	r3, r3
    e90e:	004a      	lsls	r2, r1, #1
    e910:	0409      	lsls	r1, r1, #16
    e912:	d500      	bpl.n	e916 <bloomFilterAddressCheck+0x9fe>
    e914:	e2b0      	b.n	ee78 <bloomFilterAddressCheck+0xf60>
    e916:	b291      	uxth	r1, r2
    e918:	4b56      	ldr	r3, [pc, #344]	; (ea74 <bloomFilterAddressCheck+0xb5c>)
    e91a:	0049      	lsls	r1, r1, #1
    e91c:	404b      	eors	r3, r1
    e91e:	b29b      	uxth	r3, r3
    e920:	0051      	lsls	r1, r2, #1
    e922:	0412      	lsls	r2, r2, #16
    e924:	d500      	bpl.n	e928 <bloomFilterAddressCheck+0xa10>
    e926:	e2a5      	b.n	ee74 <bloomFilterAddressCheck+0xf5c>
    e928:	b28a      	uxth	r2, r1
    e92a:	4b52      	ldr	r3, [pc, #328]	; (ea74 <bloomFilterAddressCheck+0xb5c>)
    e92c:	0052      	lsls	r2, r2, #1
    e92e:	4053      	eors	r3, r2
    e930:	b29b      	uxth	r3, r3
    e932:	004a      	lsls	r2, r1, #1
    e934:	0409      	lsls	r1, r1, #16
    e936:	d500      	bpl.n	e93a <bloomFilterAddressCheck+0xa22>
    e938:	e29a      	b.n	ee70 <bloomFilterAddressCheck+0xf58>
    e93a:	465b      	mov	r3, fp
    e93c:	4053      	eors	r3, r2
    e93e:	b21a      	sxth	r2, r3
    e940:	b293      	uxth	r3, r2
    e942:	494c      	ldr	r1, [pc, #304]	; (ea74 <bloomFilterAddressCheck+0xb5c>)
    e944:	005b      	lsls	r3, r3, #1
    e946:	4059      	eors	r1, r3
    e948:	b289      	uxth	r1, r1
    e94a:	2a00      	cmp	r2, #0
    e94c:	da00      	bge.n	e950 <bloomFilterAddressCheck+0xa38>
    e94e:	e28d      	b.n	ee6c <bloomFilterAddressCheck+0xf54>
    e950:	b299      	uxth	r1, r3
    e952:	4a48      	ldr	r2, [pc, #288]	; (ea74 <bloomFilterAddressCheck+0xb5c>)
    e954:	0049      	lsls	r1, r1, #1
    e956:	404a      	eors	r2, r1
    e958:	b292      	uxth	r2, r2
    e95a:	0059      	lsls	r1, r3, #1
    e95c:	041b      	lsls	r3, r3, #16
    e95e:	d500      	bpl.n	e962 <bloomFilterAddressCheck+0xa4a>
    e960:	e282      	b.n	ee68 <bloomFilterAddressCheck+0xf50>
    e962:	b28a      	uxth	r2, r1
    e964:	4b43      	ldr	r3, [pc, #268]	; (ea74 <bloomFilterAddressCheck+0xb5c>)
    e966:	0052      	lsls	r2, r2, #1
    e968:	4053      	eors	r3, r2
    e96a:	b29b      	uxth	r3, r3
    e96c:	004a      	lsls	r2, r1, #1
    e96e:	0409      	lsls	r1, r1, #16
    e970:	d500      	bpl.n	e974 <bloomFilterAddressCheck+0xa5c>
    e972:	e277      	b.n	ee64 <bloomFilterAddressCheck+0xf4c>
    e974:	b291      	uxth	r1, r2
    e976:	4b3f      	ldr	r3, [pc, #252]	; (ea74 <bloomFilterAddressCheck+0xb5c>)
    e978:	0049      	lsls	r1, r1, #1
    e97a:	404b      	eors	r3, r1
    e97c:	b29b      	uxth	r3, r3
    e97e:	0051      	lsls	r1, r2, #1
    e980:	0412      	lsls	r2, r2, #16
    e982:	d500      	bpl.n	e986 <bloomFilterAddressCheck+0xa6e>
    e984:	e26c      	b.n	ee60 <bloomFilterAddressCheck+0xf48>
    e986:	b28a      	uxth	r2, r1
    e988:	4b3a      	ldr	r3, [pc, #232]	; (ea74 <bloomFilterAddressCheck+0xb5c>)
    e98a:	0052      	lsls	r2, r2, #1
    e98c:	4053      	eors	r3, r2
    e98e:	b29b      	uxth	r3, r3
    e990:	004a      	lsls	r2, r1, #1
    e992:	0409      	lsls	r1, r1, #16
    e994:	d500      	bpl.n	e998 <bloomFilterAddressCheck+0xa80>
    e996:	e261      	b.n	ee5c <bloomFilterAddressCheck+0xf44>
    e998:	b291      	uxth	r1, r2
    e99a:	4b36      	ldr	r3, [pc, #216]	; (ea74 <bloomFilterAddressCheck+0xb5c>)
    e99c:	0049      	lsls	r1, r1, #1
    e99e:	404b      	eors	r3, r1
    e9a0:	b29b      	uxth	r3, r3
    e9a2:	0051      	lsls	r1, r2, #1
    e9a4:	0412      	lsls	r2, r2, #16
    e9a6:	d500      	bpl.n	e9aa <bloomFilterAddressCheck+0xa92>
    e9a8:	e242      	b.n	ee30 <bloomFilterAddressCheck+0xf18>
    e9aa:	b28a      	uxth	r2, r1
    e9ac:	4b31      	ldr	r3, [pc, #196]	; (ea74 <bloomFilterAddressCheck+0xb5c>)
    e9ae:	0052      	lsls	r2, r2, #1
    e9b0:	4053      	eors	r3, r2
    e9b2:	b29b      	uxth	r3, r3
    e9b4:	004a      	lsls	r2, r1, #1
    e9b6:	0409      	lsls	r1, r1, #16
    e9b8:	d500      	bpl.n	e9bc <bloomFilterAddressCheck+0xaa4>
    e9ba:	e243      	b.n	ee44 <bloomFilterAddressCheck+0xf2c>
    e9bc:	b291      	uxth	r1, r2
    e9be:	4b2d      	ldr	r3, [pc, #180]	; (ea74 <bloomFilterAddressCheck+0xb5c>)
    e9c0:	0049      	lsls	r1, r1, #1
    e9c2:	404b      	eors	r3, r1
    e9c4:	b29b      	uxth	r3, r3
    e9c6:	0055      	lsls	r5, r2, #1
    e9c8:	0412      	lsls	r2, r2, #16
    e9ca:	d500      	bpl.n	e9ce <bloomFilterAddressCheck+0xab6>
    e9cc:	e244      	b.n	ee58 <bloomFilterAddressCheck+0xf40>
    e9ce:	9b01      	ldr	r3, [sp, #4]
    e9d0:	4a28      	ldr	r2, [pc, #160]	; (ea74 <bloomFilterAddressCheck+0xb5c>)
    e9d2:	406b      	eors	r3, r5
    e9d4:	b21d      	sxth	r5, r3
    e9d6:	b2ab      	uxth	r3, r5
    e9d8:	005b      	lsls	r3, r3, #1
    e9da:	405a      	eors	r2, r3
    e9dc:	b292      	uxth	r2, r2
    e9de:	2d00      	cmp	r5, #0
    e9e0:	da00      	bge.n	e9e4 <bloomFilterAddressCheck+0xacc>
    e9e2:	e2a7      	b.n	ef34 <bloomFilterAddressCheck+0x101c>
    e9e4:	b299      	uxth	r1, r3
    e9e6:	4a23      	ldr	r2, [pc, #140]	; (ea74 <bloomFilterAddressCheck+0xb5c>)
    e9e8:	0049      	lsls	r1, r1, #1
    e9ea:	404a      	eors	r2, r1
    e9ec:	b292      	uxth	r2, r2
    e9ee:	0059      	lsls	r1, r3, #1
    e9f0:	041b      	lsls	r3, r3, #16
    e9f2:	d500      	bpl.n	e9f6 <bloomFilterAddressCheck+0xade>
    e9f4:	e29c      	b.n	ef30 <bloomFilterAddressCheck+0x1018>
    e9f6:	b28a      	uxth	r2, r1
    e9f8:	4b1e      	ldr	r3, [pc, #120]	; (ea74 <bloomFilterAddressCheck+0xb5c>)
    e9fa:	0052      	lsls	r2, r2, #1
    e9fc:	4053      	eors	r3, r2
    e9fe:	b29b      	uxth	r3, r3
    ea00:	004a      	lsls	r2, r1, #1
    ea02:	0409      	lsls	r1, r1, #16
    ea04:	d500      	bpl.n	ea08 <bloomFilterAddressCheck+0xaf0>
    ea06:	e291      	b.n	ef2c <bloomFilterAddressCheck+0x1014>
    ea08:	b291      	uxth	r1, r2
    ea0a:	4b1a      	ldr	r3, [pc, #104]	; (ea74 <bloomFilterAddressCheck+0xb5c>)
    ea0c:	0049      	lsls	r1, r1, #1
    ea0e:	404b      	eors	r3, r1
    ea10:	b29b      	uxth	r3, r3
    ea12:	0051      	lsls	r1, r2, #1
    ea14:	0412      	lsls	r2, r2, #16
    ea16:	d500      	bpl.n	ea1a <bloomFilterAddressCheck+0xb02>
    ea18:	e286      	b.n	ef28 <bloomFilterAddressCheck+0x1010>
    ea1a:	b28a      	uxth	r2, r1
    ea1c:	4b15      	ldr	r3, [pc, #84]	; (ea74 <bloomFilterAddressCheck+0xb5c>)
    ea1e:	0052      	lsls	r2, r2, #1
    ea20:	4053      	eors	r3, r2
    ea22:	b29b      	uxth	r3, r3
    ea24:	004a      	lsls	r2, r1, #1
    ea26:	0409      	lsls	r1, r1, #16
    ea28:	d500      	bpl.n	ea2c <bloomFilterAddressCheck+0xb14>
    ea2a:	e27b      	b.n	ef24 <bloomFilterAddressCheck+0x100c>
    ea2c:	b291      	uxth	r1, r2
    ea2e:	4b11      	ldr	r3, [pc, #68]	; (ea74 <bloomFilterAddressCheck+0xb5c>)
    ea30:	0049      	lsls	r1, r1, #1
    ea32:	404b      	eors	r3, r1
    ea34:	b29b      	uxth	r3, r3
    ea36:	0051      	lsls	r1, r2, #1
    ea38:	0412      	lsls	r2, r2, #16
    ea3a:	d500      	bpl.n	ea3e <bloomFilterAddressCheck+0xb26>
    ea3c:	e270      	b.n	ef20 <bloomFilterAddressCheck+0x1008>
    ea3e:	b28a      	uxth	r2, r1
    ea40:	4b0c      	ldr	r3, [pc, #48]	; (ea74 <bloomFilterAddressCheck+0xb5c>)
    ea42:	0052      	lsls	r2, r2, #1
    ea44:	4053      	eors	r3, r2
    ea46:	b29b      	uxth	r3, r3
    ea48:	004a      	lsls	r2, r1, #1
    ea4a:	0409      	lsls	r1, r1, #16
    ea4c:	d500      	bpl.n	ea50 <bloomFilterAddressCheck+0xb38>
    ea4e:	e265      	b.n	ef1c <bloomFilterAddressCheck+0x1004>
    ea50:	b291      	uxth	r1, r2
    ea52:	4b08      	ldr	r3, [pc, #32]	; (ea74 <bloomFilterAddressCheck+0xb5c>)
    ea54:	0049      	lsls	r1, r1, #1
    ea56:	404b      	eors	r3, r1
    ea58:	b29b      	uxth	r3, r3
    ea5a:	0055      	lsls	r5, r2, #1
    ea5c:	0412      	lsls	r2, r2, #16
    ea5e:	d500      	bpl.n	ea62 <bloomFilterAddressCheck+0xb4a>
    ea60:	e25a      	b.n	ef18 <bloomFilterAddressCheck+0x1000>
    ea62:	9b02      	ldr	r3, [sp, #8]
    ea64:	4a03      	ldr	r2, [pc, #12]	; (ea74 <bloomFilterAddressCheck+0xb5c>)
    ea66:	406b      	eors	r3, r5
    ea68:	b21d      	sxth	r5, r3
    ea6a:	b2ab      	uxth	r3, r5
    ea6c:	005b      	lsls	r3, r3, #1
    ea6e:	405a      	eors	r2, r3
    ea70:	b292      	uxth	r2, r2
    ea72:	e001      	b.n	ea78 <bloomFilterAddressCheck+0xb60>
    ea74:	ffff8005 	.word	0xffff8005
    ea78:	2d00      	cmp	r5, #0
    ea7a:	da00      	bge.n	ea7e <bloomFilterAddressCheck+0xb66>
    ea7c:	e24a      	b.n	ef14 <bloomFilterAddressCheck+0xffc>
    ea7e:	b299      	uxth	r1, r3
    ea80:	4ae8      	ldr	r2, [pc, #928]	; (ee24 <bloomFilterAddressCheck+0xf0c>)
    ea82:	0049      	lsls	r1, r1, #1
    ea84:	404a      	eors	r2, r1
    ea86:	b292      	uxth	r2, r2
    ea88:	0059      	lsls	r1, r3, #1
    ea8a:	041b      	lsls	r3, r3, #16
    ea8c:	d500      	bpl.n	ea90 <bloomFilterAddressCheck+0xb78>
    ea8e:	e23f      	b.n	ef10 <bloomFilterAddressCheck+0xff8>
    ea90:	b28a      	uxth	r2, r1
    ea92:	4be4      	ldr	r3, [pc, #912]	; (ee24 <bloomFilterAddressCheck+0xf0c>)
    ea94:	0052      	lsls	r2, r2, #1
    ea96:	4053      	eors	r3, r2
    ea98:	b29b      	uxth	r3, r3
    ea9a:	004a      	lsls	r2, r1, #1
    ea9c:	0409      	lsls	r1, r1, #16
    ea9e:	d500      	bpl.n	eaa2 <bloomFilterAddressCheck+0xb8a>
    eaa0:	e234      	b.n	ef0c <bloomFilterAddressCheck+0xff4>
    eaa2:	b291      	uxth	r1, r2
    eaa4:	4bdf      	ldr	r3, [pc, #892]	; (ee24 <bloomFilterAddressCheck+0xf0c>)
    eaa6:	0049      	lsls	r1, r1, #1
    eaa8:	404b      	eors	r3, r1
    eaaa:	b29b      	uxth	r3, r3
    eaac:	0051      	lsls	r1, r2, #1
    eaae:	0412      	lsls	r2, r2, #16
    eab0:	d500      	bpl.n	eab4 <bloomFilterAddressCheck+0xb9c>
    eab2:	e229      	b.n	ef08 <bloomFilterAddressCheck+0xff0>
    eab4:	b28a      	uxth	r2, r1
    eab6:	4bdb      	ldr	r3, [pc, #876]	; (ee24 <bloomFilterAddressCheck+0xf0c>)
    eab8:	0052      	lsls	r2, r2, #1
    eaba:	4053      	eors	r3, r2
    eabc:	b29b      	uxth	r3, r3
    eabe:	004a      	lsls	r2, r1, #1
    eac0:	0409      	lsls	r1, r1, #16
    eac2:	d500      	bpl.n	eac6 <bloomFilterAddressCheck+0xbae>
    eac4:	e21e      	b.n	ef04 <bloomFilterAddressCheck+0xfec>
    eac6:	b291      	uxth	r1, r2
    eac8:	4bd6      	ldr	r3, [pc, #856]	; (ee24 <bloomFilterAddressCheck+0xf0c>)
    eaca:	0049      	lsls	r1, r1, #1
    eacc:	404b      	eors	r3, r1
    eace:	b29b      	uxth	r3, r3
    ead0:	0051      	lsls	r1, r2, #1
    ead2:	0412      	lsls	r2, r2, #16
    ead4:	d500      	bpl.n	ead8 <bloomFilterAddressCheck+0xbc0>
    ead6:	e1ff      	b.n	eed8 <bloomFilterAddressCheck+0xfc0>
    ead8:	b28a      	uxth	r2, r1
    eada:	4bd2      	ldr	r3, [pc, #840]	; (ee24 <bloomFilterAddressCheck+0xf0c>)
    eadc:	0052      	lsls	r2, r2, #1
    eade:	4053      	eors	r3, r2
    eae0:	b29b      	uxth	r3, r3
    eae2:	0048      	lsls	r0, r1, #1
    eae4:	040a      	lsls	r2, r1, #16
    eae6:	d500      	bpl.n	eaea <bloomFilterAddressCheck+0xbd2>
    eae8:	e200      	b.n	eeec <bloomFilterAddressCheck+0xfd4>
    eaea:	b282      	uxth	r2, r0
    eaec:	4bcd      	ldr	r3, [pc, #820]	; (ee24 <bloomFilterAddressCheck+0xf0c>)
    eaee:	0052      	lsls	r2, r2, #1
    eaf0:	4053      	eors	r3, r2
    eaf2:	b29b      	uxth	r3, r3
    eaf4:	0042      	lsls	r2, r0, #1
    eaf6:	0401      	lsls	r1, r0, #16
    eaf8:	d500      	bpl.n	eafc <bloomFilterAddressCheck+0xbe4>
    eafa:	e201      	b.n	ef00 <bloomFilterAddressCheck+0xfe8>
    eafc:	4653      	mov	r3, sl
    eafe:	4053      	eors	r3, r2
    eb00:	b21a      	sxth	r2, r3
    eb02:	b291      	uxth	r1, r2
    eb04:	4bc7      	ldr	r3, [pc, #796]	; (ee24 <bloomFilterAddressCheck+0xf0c>)
    eb06:	0049      	lsls	r1, r1, #1
    eb08:	404b      	eors	r3, r1
    eb0a:	b298      	uxth	r0, r3
    eb0c:	b28b      	uxth	r3, r1
    eb0e:	2a00      	cmp	r2, #0
    eb10:	da00      	bge.n	eb14 <bloomFilterAddressCheck+0xbfc>
    eb12:	e21b      	b.n	ef4c <bloomFilterAddressCheck+0x1034>
    eb14:	4ac3      	ldr	r2, [pc, #780]	; (ee24 <bloomFilterAddressCheck+0xf0c>)
    eb16:	b299      	uxth	r1, r3
    eb18:	0049      	lsls	r1, r1, #1
    eb1a:	4051      	eors	r1, r2
    eb1c:	005a      	lsls	r2, r3, #1
    eb1e:	b289      	uxth	r1, r1
    eb20:	b292      	uxth	r2, r2
    eb22:	041b      	lsls	r3, r3, #16
    eb24:	d500      	bpl.n	eb28 <bloomFilterAddressCheck+0xc10>
    eb26:	e20f      	b.n	ef48 <bloomFilterAddressCheck+0x1030>
    eb28:	4bbe      	ldr	r3, [pc, #760]	; (ee24 <bloomFilterAddressCheck+0xf0c>)
    eb2a:	b291      	uxth	r1, r2
    eb2c:	0049      	lsls	r1, r1, #1
    eb2e:	4059      	eors	r1, r3
    eb30:	0053      	lsls	r3, r2, #1
    eb32:	b289      	uxth	r1, r1
    eb34:	b29b      	uxth	r3, r3
    eb36:	0412      	lsls	r2, r2, #16
    eb38:	d500      	bpl.n	eb3c <bloomFilterAddressCheck+0xc24>
    eb3a:	e203      	b.n	ef44 <bloomFilterAddressCheck+0x102c>
    eb3c:	4ab9      	ldr	r2, [pc, #740]	; (ee24 <bloomFilterAddressCheck+0xf0c>)
    eb3e:	b299      	uxth	r1, r3
    eb40:	0049      	lsls	r1, r1, #1
    eb42:	4051      	eors	r1, r2
    eb44:	005a      	lsls	r2, r3, #1
    eb46:	b289      	uxth	r1, r1
    eb48:	b292      	uxth	r2, r2
    eb4a:	041b      	lsls	r3, r3, #16
    eb4c:	d500      	bpl.n	eb50 <bloomFilterAddressCheck+0xc38>
    eb4e:	e1f7      	b.n	ef40 <bloomFilterAddressCheck+0x1028>
    eb50:	4bb4      	ldr	r3, [pc, #720]	; (ee24 <bloomFilterAddressCheck+0xf0c>)
    eb52:	b291      	uxth	r1, r2
    eb54:	0049      	lsls	r1, r1, #1
    eb56:	4059      	eors	r1, r3
    eb58:	0053      	lsls	r3, r2, #1
    eb5a:	b289      	uxth	r1, r1
    eb5c:	b29b      	uxth	r3, r3
    eb5e:	0412      	lsls	r2, r2, #16
    eb60:	d500      	bpl.n	eb64 <bloomFilterAddressCheck+0xc4c>
    eb62:	e1eb      	b.n	ef3c <bloomFilterAddressCheck+0x1024>
    eb64:	4aaf      	ldr	r2, [pc, #700]	; (ee24 <bloomFilterAddressCheck+0xf0c>)
    eb66:	b299      	uxth	r1, r3
    eb68:	0049      	lsls	r1, r1, #1
    eb6a:	4051      	eors	r1, r2
    eb6c:	005a      	lsls	r2, r3, #1
    eb6e:	b289      	uxth	r1, r1
    eb70:	b292      	uxth	r2, r2
    eb72:	041b      	lsls	r3, r3, #16
    eb74:	d500      	bpl.n	eb78 <bloomFilterAddressCheck+0xc60>
    eb76:	e1df      	b.n	ef38 <bloomFilterAddressCheck+0x1020>
    eb78:	b293      	uxth	r3, r2
    eb7a:	4caa      	ldr	r4, [pc, #680]	; (ee24 <bloomFilterAddressCheck+0xf0c>)
    eb7c:	005b      	lsls	r3, r3, #1
    eb7e:	405c      	eors	r4, r3
    eb80:	b2a1      	uxth	r1, r4
    eb82:	0054      	lsls	r4, r2, #1
    eb84:	b2a4      	uxth	r4, r4
    eb86:	0413      	lsls	r3, r2, #16
    eb88:	d500      	bpl.n	eb8c <bloomFilterAddressCheck+0xc74>
    eb8a:	e149      	b.n	ee20 <bloomFilterAddressCheck+0xf08>
    eb8c:	b223      	sxth	r3, r4
    eb8e:	b2a2      	uxth	r2, r4
    eb90:	469b      	mov	fp, r3
    eb92:	4ba4      	ldr	r3, [pc, #656]	; (ee24 <bloomFilterAddressCheck+0xf0c>)
    eb94:	0052      	lsls	r2, r2, #1
    eb96:	4053      	eors	r3, r2
    eb98:	00f5      	lsls	r5, r6, #3
    eb9a:	b29b      	uxth	r3, r3
    eb9c:	0064      	lsls	r4, r4, #1
    eb9e:	3d01      	subs	r5, #1
    eba0:	4698      	mov	r8, r3
    eba2:	b2a4      	uxth	r4, r4
    eba4:	b2ed      	uxtb	r5, r5
    eba6:	2f00      	cmp	r7, #0
    eba8:	da00      	bge.n	ebac <bloomFilterAddressCheck+0xc94>
    ebaa:	e136      	b.n	ee1a <bloomFilterAddressCheck+0xf02>
    ebac:	4648      	mov	r0, r9
    ebae:	4b9e      	ldr	r3, [pc, #632]	; (ee28 <bloomFilterAddressCheck+0xf10>)
    ebb0:	b280      	uxth	r0, r0
    ebb2:	0029      	movs	r1, r5
    ebb4:	469a      	mov	sl, r3
    ebb6:	4798      	blx	r3
    ebb8:	465b      	mov	r3, fp
    ebba:	4689      	mov	r9, r1
    ebbc:	2b00      	cmp	r3, #0
    ebbe:	da00      	bge.n	ebc2 <bloomFilterAddressCheck+0xcaa>
    ebc0:	e129      	b.n	ee16 <bloomFilterAddressCheck+0xefe>
    ebc2:	b2a0      	uxth	r0, r4
    ebc4:	0029      	movs	r1, r5
    ebc6:	47d0      	blx	sl
    ebc8:	b2cb      	uxtb	r3, r1
    ebca:	08db      	lsrs	r3, r3, #3
    ebcc:	9f03      	ldr	r7, [sp, #12]
    ebce:	3301      	adds	r3, #1
    ebd0:	1af3      	subs	r3, r6, r3
    ebd2:	466a      	mov	r2, sp
    ebd4:	5cf8      	ldrb	r0, [r7, r3]
    ebd6:	464b      	mov	r3, r9
    ebd8:	7113      	strb	r3, [r2, #4]
    ebda:	7913      	ldrb	r3, [r2, #4]
    ebdc:	2201      	movs	r2, #1
    ebde:	08db      	lsrs	r3, r3, #3
    ebe0:	3301      	adds	r3, #1
    ebe2:	1af6      	subs	r6, r6, r3
    ebe4:	2407      	movs	r4, #7
    ebe6:	464b      	mov	r3, r9
    ebe8:	0015      	movs	r5, r2
    ebea:	4023      	ands	r3, r4
    ebec:	409d      	lsls	r5, r3
    ebee:	5dbb      	ldrb	r3, [r7, r6]
    ebf0:	421d      	tst	r5, r3
    ebf2:	d006      	beq.n	ec02 <bloomFilterAddressCheck+0xcea>
    ebf4:	4021      	ands	r1, r4
    ebf6:	408a      	lsls	r2, r1
    ebf8:	4002      	ands	r2, r0
    ebfa:	1e50      	subs	r0, r2, #1
    ebfc:	4182      	sbcs	r2, r0
    ebfe:	b2d3      	uxtb	r3, r2
    ec00:	9300      	str	r3, [sp, #0]
    ec02:	9800      	ldr	r0, [sp, #0]
    ec04:	b007      	add	sp, #28
    ec06:	bc3c      	pop	{r2, r3, r4, r5}
    ec08:	4690      	mov	r8, r2
    ec0a:	4699      	mov	r9, r3
    ec0c:	46a2      	mov	sl, r4
    ec0e:	46ab      	mov	fp, r5
    ec10:	bdf0      	pop	{r4, r5, r6, r7, pc}
    ec12:	1c1a      	adds	r2, r3, #0
    ec14:	e4ef      	b.n	e5f6 <bloomFilterAddressCheck+0x6de>
    ec16:	1c08      	adds	r0, r1, #0
    ec18:	f7ff f9a2 	bl	df60 <bloomFilterAddressCheck+0x48>
    ec1c:	1c0c      	adds	r4, r1, #0
    ec1e:	b2a0      	uxth	r0, r4
    ec20:	4982      	ldr	r1, [pc, #520]	; (ee2c <bloomFilterAddressCheck+0xf14>)
    ec22:	0040      	lsls	r0, r0, #1
    ec24:	4041      	eors	r1, r0
    ec26:	b289      	uxth	r1, r1
    ec28:	0060      	lsls	r0, r4, #1
    ec2a:	0423      	lsls	r3, r4, #16
    ec2c:	d401      	bmi.n	ec32 <bloomFilterAddressCheck+0xd1a>
    ec2e:	f7ff f9ac 	bl	df8a <bloomFilterAddressCheck+0x72>
    ec32:	1c08      	adds	r0, r1, #0
    ec34:	b284      	uxth	r4, r0
    ec36:	497d      	ldr	r1, [pc, #500]	; (ee2c <bloomFilterAddressCheck+0xf14>)
    ec38:	0064      	lsls	r4, r4, #1
    ec3a:	4061      	eors	r1, r4
    ec3c:	b289      	uxth	r1, r1
    ec3e:	0044      	lsls	r4, r0, #1
    ec40:	0403      	lsls	r3, r0, #16
    ec42:	d401      	bmi.n	ec48 <bloomFilterAddressCheck+0xd30>
    ec44:	f7ff f9ab 	bl	df9e <bloomFilterAddressCheck+0x86>
    ec48:	1c0c      	adds	r4, r1, #0
    ec4a:	b2a0      	uxth	r0, r4
    ec4c:	4977      	ldr	r1, [pc, #476]	; (ee2c <bloomFilterAddressCheck+0xf14>)
    ec4e:	0040      	lsls	r0, r0, #1
    ec50:	4041      	eors	r1, r0
    ec52:	b289      	uxth	r1, r1
    ec54:	0060      	lsls	r0, r4, #1
    ec56:	0423      	lsls	r3, r4, #16
    ec58:	d401      	bmi.n	ec5e <bloomFilterAddressCheck+0xd46>
    ec5a:	f7ff f9aa 	bl	dfb2 <bloomFilterAddressCheck+0x9a>
    ec5e:	1c08      	adds	r0, r1, #0
    ec60:	b284      	uxth	r4, r0
    ec62:	4972      	ldr	r1, [pc, #456]	; (ee2c <bloomFilterAddressCheck+0xf14>)
    ec64:	0064      	lsls	r4, r4, #1
    ec66:	4061      	eors	r1, r4
    ec68:	b289      	uxth	r1, r1
    ec6a:	0044      	lsls	r4, r0, #1
    ec6c:	0403      	lsls	r3, r0, #16
    ec6e:	d401      	bmi.n	ec74 <bloomFilterAddressCheck+0xd5c>
    ec70:	f7ff f9a9 	bl	dfc6 <bloomFilterAddressCheck+0xae>
    ec74:	1c0c      	adds	r4, r1, #0
    ec76:	b2a0      	uxth	r0, r4
    ec78:	496c      	ldr	r1, [pc, #432]	; (ee2c <bloomFilterAddressCheck+0xf14>)
    ec7a:	0040      	lsls	r0, r0, #1
    ec7c:	4041      	eors	r1, r0
    ec7e:	b289      	uxth	r1, r1
    ec80:	0060      	lsls	r0, r4, #1
    ec82:	0423      	lsls	r3, r4, #16
    ec84:	d401      	bmi.n	ec8a <bloomFilterAddressCheck+0xd72>
    ec86:	f7ff f9a8 	bl	dfda <bloomFilterAddressCheck+0xc2>
    ec8a:	1c08      	adds	r0, r1, #0
    ec8c:	f7ff f9a5 	bl	dfda <bloomFilterAddressCheck+0xc2>
    ec90:	1c0d      	adds	r5, r1, #0
    ec92:	f7ff f9af 	bl	dff4 <bloomFilterAddressCheck+0xdc>
    ec96:	1c01      	adds	r1, r0, #0
    ec98:	b28d      	uxth	r5, r1
    ec9a:	4864      	ldr	r0, [pc, #400]	; (ee2c <bloomFilterAddressCheck+0xf14>)
    ec9c:	006d      	lsls	r5, r5, #1
    ec9e:	4045      	eors	r5, r0
    eca0:	b2ad      	uxth	r5, r5
    eca2:	0048      	lsls	r0, r1, #1
    eca4:	040b      	lsls	r3, r1, #16
    eca6:	d401      	bmi.n	ecac <bloomFilterAddressCheck+0xd94>
    eca8:	f7ff f9b9 	bl	e01e <bloomFilterAddressCheck+0x106>
    ecac:	1c28      	adds	r0, r5, #0
    ecae:	b285      	uxth	r5, r0
    ecb0:	495e      	ldr	r1, [pc, #376]	; (ee2c <bloomFilterAddressCheck+0xf14>)
    ecb2:	006d      	lsls	r5, r5, #1
    ecb4:	4069      	eors	r1, r5
    ecb6:	b289      	uxth	r1, r1
    ecb8:	0045      	lsls	r5, r0, #1
    ecba:	0403      	lsls	r3, r0, #16
    ecbc:	d401      	bmi.n	ecc2 <bloomFilterAddressCheck+0xdaa>
    ecbe:	f7ff f9b8 	bl	e032 <bloomFilterAddressCheck+0x11a>
    ecc2:	1c0d      	adds	r5, r1, #0
    ecc4:	b2a8      	uxth	r0, r5
    ecc6:	4959      	ldr	r1, [pc, #356]	; (ee2c <bloomFilterAddressCheck+0xf14>)
    ecc8:	0040      	lsls	r0, r0, #1
    ecca:	4041      	eors	r1, r0
    eccc:	b289      	uxth	r1, r1
    ecce:	0068      	lsls	r0, r5, #1
    ecd0:	042b      	lsls	r3, r5, #16
    ecd2:	d401      	bmi.n	ecd8 <bloomFilterAddressCheck+0xdc0>
    ecd4:	f7ff f9b7 	bl	e046 <bloomFilterAddressCheck+0x12e>
    ecd8:	1c08      	adds	r0, r1, #0
    ecda:	b285      	uxth	r5, r0
    ecdc:	4953      	ldr	r1, [pc, #332]	; (ee2c <bloomFilterAddressCheck+0xf14>)
    ecde:	006d      	lsls	r5, r5, #1
    ece0:	4069      	eors	r1, r5
    ece2:	b289      	uxth	r1, r1
    ece4:	0045      	lsls	r5, r0, #1
    ece6:	0403      	lsls	r3, r0, #16
    ece8:	d401      	bmi.n	ecee <bloomFilterAddressCheck+0xdd6>
    ecea:	f7ff f9b6 	bl	e05a <bloomFilterAddressCheck+0x142>
    ecee:	1c0d      	adds	r5, r1, #0
    ecf0:	b2a8      	uxth	r0, r5
    ecf2:	494e      	ldr	r1, [pc, #312]	; (ee2c <bloomFilterAddressCheck+0xf14>)
    ecf4:	0040      	lsls	r0, r0, #1
    ecf6:	4041      	eors	r1, r0
    ecf8:	b289      	uxth	r1, r1
    ecfa:	0068      	lsls	r0, r5, #1
    ecfc:	042b      	lsls	r3, r5, #16
    ecfe:	d401      	bmi.n	ed04 <bloomFilterAddressCheck+0xdec>
    ed00:	f7ff f9b5 	bl	e06e <bloomFilterAddressCheck+0x156>
    ed04:	1c08      	adds	r0, r1, #0
    ed06:	b285      	uxth	r5, r0
    ed08:	4948      	ldr	r1, [pc, #288]	; (ee2c <bloomFilterAddressCheck+0xf14>)
    ed0a:	006d      	lsls	r5, r5, #1
    ed0c:	4069      	eors	r1, r5
    ed0e:	b289      	uxth	r1, r1
    ed10:	0045      	lsls	r5, r0, #1
    ed12:	0403      	lsls	r3, r0, #16
    ed14:	d401      	bmi.n	ed1a <bloomFilterAddressCheck+0xe02>
    ed16:	f7ff f9b4 	bl	e082 <bloomFilterAddressCheck+0x16a>
    ed1a:	1c0d      	adds	r5, r1, #0
    ed1c:	f7ff f9b1 	bl	e082 <bloomFilterAddressCheck+0x16a>
    ed20:	4689      	mov	r9, r1
    ed22:	f7ff f9bc 	bl	e09e <bloomFilterAddressCheck+0x186>
    ed26:	4651      	mov	r1, sl
    ed28:	f7ff f9c9 	bl	e0be <bloomFilterAddressCheck+0x1a6>
    ed2c:	464d      	mov	r5, r9
    ed2e:	f7ff f9d3 	bl	e0d8 <bloomFilterAddressCheck+0x1c0>
    ed32:	4689      	mov	r9, r1
    ed34:	f7ff f9dd 	bl	e0f2 <bloomFilterAddressCheck+0x1da>
    ed38:	1c0d      	adds	r5, r1, #0
    ed3a:	f7ff f9e9 	bl	e110 <bloomFilterAddressCheck+0x1f8>
    ed3e:	4689      	mov	r9, r1
    ed40:	f7ff f9f3 	bl	e12a <bloomFilterAddressCheck+0x212>
    ed44:	1c0d      	adds	r5, r1, #0
    ed46:	f7ff f9ff 	bl	e148 <bloomFilterAddressCheck+0x230>
    ed4a:	468a      	mov	sl, r1
    ed4c:	f7ff fa09 	bl	e162 <bloomFilterAddressCheck+0x24a>
    ed50:	464d      	mov	r5, r9
    ed52:	f7ff fa19 	bl	e188 <bloomFilterAddressCheck+0x270>
    ed56:	4655      	mov	r5, sl
    ed58:	f7ff fa26 	bl	e1a8 <bloomFilterAddressCheck+0x290>
    ed5c:	46d1      	mov	r9, sl
    ed5e:	f7ff fa36 	bl	e1ce <bloomFilterAddressCheck+0x2b6>
    ed62:	46aa      	mov	sl, r5
    ed64:	f7ff fa43 	bl	e1ee <bloomFilterAddressCheck+0x2d6>
    ed68:	46a9      	mov	r9, r5
    ed6a:	f7ff fa50 	bl	e20e <bloomFilterAddressCheck+0x2f6>
    ed6e:	46aa      	mov	sl, r5
    ed70:	f7ff fa5d 	bl	e22e <bloomFilterAddressCheck+0x316>
    ed74:	46a9      	mov	r9, r5
    ed76:	f7ff fa6a 	bl	e24e <bloomFilterAddressCheck+0x336>
    ed7a:	46aa      	mov	sl, r5
    ed7c:	f7ff fa77 	bl	e26e <bloomFilterAddressCheck+0x356>
    ed80:	464d      	mov	r5, r9
    ed82:	f7ff fa87 	bl	e294 <bloomFilterAddressCheck+0x37c>
    ed86:	4655      	mov	r5, sl
    ed88:	f7ff fa99 	bl	e2be <bloomFilterAddressCheck+0x3a6>
    ed8c:	46d1      	mov	r9, sl
    ed8e:	f7ff faa7 	bl	e2e0 <bloomFilterAddressCheck+0x3c8>
    ed92:	46aa      	mov	sl, r5
    ed94:	f7ff faba 	bl	e30c <bloomFilterAddressCheck+0x3f4>
    ed98:	46a9      	mov	r9, r5
    ed9a:	f7ff fac7 	bl	e32c <bloomFilterAddressCheck+0x414>
    ed9e:	46aa      	mov	sl, r5
    eda0:	f7ff fad4 	bl	e34c <bloomFilterAddressCheck+0x434>
    eda4:	46a9      	mov	r9, r5
    eda6:	f7ff fae1 	bl	e36c <bloomFilterAddressCheck+0x454>
    edaa:	46aa      	mov	sl, r5
    edac:	f7ff faee 	bl	e38c <bloomFilterAddressCheck+0x474>
    edb0:	464d      	mov	r5, r9
    edb2:	f7ff fafe 	bl	e3b2 <bloomFilterAddressCheck+0x49a>
    edb6:	4655      	mov	r5, sl
    edb8:	f7ff fb10 	bl	e3dc <bloomFilterAddressCheck+0x4c4>
    edbc:	46d1      	mov	r9, sl
    edbe:	f7ff fb1e 	bl	e3fe <bloomFilterAddressCheck+0x4e6>
    edc2:	46aa      	mov	sl, r5
    edc4:	f7ff fb2b 	bl	e41e <bloomFilterAddressCheck+0x506>
    edc8:	46a9      	mov	r9, r5
    edca:	f7ff fb38 	bl	e43e <bloomFilterAddressCheck+0x526>
    edce:	46aa      	mov	sl, r5
    edd0:	f7ff fb45 	bl	e45e <bloomFilterAddressCheck+0x546>
    edd4:	46a9      	mov	r9, r5
    edd6:	f7ff fb52 	bl	e47e <bloomFilterAddressCheck+0x566>
    edda:	46aa      	mov	sl, r5
    eddc:	f7ff fb5f 	bl	e49e <bloomFilterAddressCheck+0x586>
    ede0:	464d      	mov	r5, r9
    ede2:	f7ff fb6f 	bl	e4c4 <bloomFilterAddressCheck+0x5ac>
    ede6:	4655      	mov	r5, sl
    ede8:	f7ff fb81 	bl	e4ee <bloomFilterAddressCheck+0x5d6>
    edec:	46ca      	mov	sl, r9
    edee:	f7ff fb8f 	bl	e510 <bloomFilterAddressCheck+0x5f8>
    edf2:	46a9      	mov	r9, r5
    edf4:	f7ff fb9c 	bl	e530 <bloomFilterAddressCheck+0x618>
    edf8:	46aa      	mov	sl, r5
    edfa:	f7ff fba9 	bl	e550 <bloomFilterAddressCheck+0x638>
    edfe:	46a9      	mov	r9, r5
    ee00:	f7ff fbb6 	bl	e570 <bloomFilterAddressCheck+0x658>
    ee04:	46aa      	mov	sl, r5
    ee06:	f7ff fbc3 	bl	e590 <bloomFilterAddressCheck+0x678>
    ee0a:	46a9      	mov	r9, r5
    ee0c:	f7ff fbd0 	bl	e5b0 <bloomFilterAddressCheck+0x698>
    ee10:	1c2a      	adds	r2, r5, #0
    ee12:	f7ff fbdf 	bl	e5d4 <bloomFilterAddressCheck+0x6bc>
    ee16:	4644      	mov	r4, r8
    ee18:	e6d3      	b.n	ebc2 <bloomFilterAddressCheck+0xcaa>
    ee1a:	466b      	mov	r3, sp
    ee1c:	8a98      	ldrh	r0, [r3, #20]
    ee1e:	e6c6      	b.n	ebae <bloomFilterAddressCheck+0xc96>
    ee20:	1c0c      	adds	r4, r1, #0
    ee22:	e6b3      	b.n	eb8c <bloomFilterAddressCheck+0xc74>
    ee24:	ffff8005 	.word	0xffff8005
    ee28:	000127a1 	.word	0x000127a1
    ee2c:	00001021 	.word	0x00001021
    ee30:	1c19      	adds	r1, r3, #0
    ee32:	b28a      	uxth	r2, r1
    ee34:	4b52      	ldr	r3, [pc, #328]	; (ef80 <bloomFilterAddressCheck+0x1068>)
    ee36:	0052      	lsls	r2, r2, #1
    ee38:	4053      	eors	r3, r2
    ee3a:	b29b      	uxth	r3, r3
    ee3c:	004a      	lsls	r2, r1, #1
    ee3e:	0409      	lsls	r1, r1, #16
    ee40:	d400      	bmi.n	ee44 <bloomFilterAddressCheck+0xf2c>
    ee42:	e5bb      	b.n	e9bc <bloomFilterAddressCheck+0xaa4>
    ee44:	1c1a      	adds	r2, r3, #0
    ee46:	b291      	uxth	r1, r2
    ee48:	4b4d      	ldr	r3, [pc, #308]	; (ef80 <bloomFilterAddressCheck+0x1068>)
    ee4a:	0049      	lsls	r1, r1, #1
    ee4c:	404b      	eors	r3, r1
    ee4e:	b29b      	uxth	r3, r3
    ee50:	0055      	lsls	r5, r2, #1
    ee52:	0412      	lsls	r2, r2, #16
    ee54:	d400      	bmi.n	ee58 <bloomFilterAddressCheck+0xf40>
    ee56:	e5ba      	b.n	e9ce <bloomFilterAddressCheck+0xab6>
    ee58:	1c1d      	adds	r5, r3, #0
    ee5a:	e5b8      	b.n	e9ce <bloomFilterAddressCheck+0xab6>
    ee5c:	1c1a      	adds	r2, r3, #0
    ee5e:	e59b      	b.n	e998 <bloomFilterAddressCheck+0xa80>
    ee60:	1c19      	adds	r1, r3, #0
    ee62:	e590      	b.n	e986 <bloomFilterAddressCheck+0xa6e>
    ee64:	1c1a      	adds	r2, r3, #0
    ee66:	e585      	b.n	e974 <bloomFilterAddressCheck+0xa5c>
    ee68:	1c11      	adds	r1, r2, #0
    ee6a:	e57a      	b.n	e962 <bloomFilterAddressCheck+0xa4a>
    ee6c:	1c0b      	adds	r3, r1, #0
    ee6e:	e56f      	b.n	e950 <bloomFilterAddressCheck+0xa38>
    ee70:	1c1a      	adds	r2, r3, #0
    ee72:	e562      	b.n	e93a <bloomFilterAddressCheck+0xa22>
    ee74:	1c19      	adds	r1, r3, #0
    ee76:	e557      	b.n	e928 <bloomFilterAddressCheck+0xa10>
    ee78:	1c1a      	adds	r2, r3, #0
    ee7a:	e54c      	b.n	e916 <bloomFilterAddressCheck+0x9fe>
    ee7c:	1c19      	adds	r1, r3, #0
    ee7e:	e541      	b.n	e904 <bloomFilterAddressCheck+0x9ec>
    ee80:	1c1a      	adds	r2, r3, #0
    ee82:	e536      	b.n	e8f2 <bloomFilterAddressCheck+0x9da>
    ee84:	1c19      	adds	r1, r3, #0
    ee86:	e52b      	b.n	e8e0 <bloomFilterAddressCheck+0x9c8>
    ee88:	1c0a      	adds	r2, r1, #0
    ee8a:	e520      	b.n	e8ce <bloomFilterAddressCheck+0x9b6>
    ee8c:	1c13      	adds	r3, r2, #0
    ee8e:	e515      	b.n	e8bc <bloomFilterAddressCheck+0x9a4>
    ee90:	1c02      	adds	r2, r0, #0
    ee92:	e509      	b.n	e8a8 <bloomFilterAddressCheck+0x990>
    ee94:	1c03      	adds	r3, r0, #0
    ee96:	e4fd      	b.n	e894 <bloomFilterAddressCheck+0x97c>
    ee98:	1c02      	adds	r2, r0, #0
    ee9a:	e4f1      	b.n	e880 <bloomFilterAddressCheck+0x968>
    ee9c:	1c03      	adds	r3, r0, #0
    ee9e:	e4e5      	b.n	e86c <bloomFilterAddressCheck+0x954>
    eea0:	1c02      	adds	r2, r0, #0
    eea2:	e4d9      	b.n	e858 <bloomFilterAddressCheck+0x940>
    eea4:	1c03      	adds	r3, r0, #0
    eea6:	e4cd      	b.n	e844 <bloomFilterAddressCheck+0x92c>
    eea8:	1c02      	adds	r2, r0, #0
    eeaa:	e4c1      	b.n	e830 <bloomFilterAddressCheck+0x918>
    eeac:	1c23      	adds	r3, r4, #0
    eeae:	e4b5      	b.n	e81c <bloomFilterAddressCheck+0x904>
    eeb0:	1c22      	adds	r2, r4, #0
    eeb2:	e4a8      	b.n	e806 <bloomFilterAddressCheck+0x8ee>
    eeb4:	1c23      	adds	r3, r4, #0
    eeb6:	e49c      	b.n	e7f2 <bloomFilterAddressCheck+0x8da>
    eeb8:	1c22      	adds	r2, r4, #0
    eeba:	e490      	b.n	e7de <bloomFilterAddressCheck+0x8c6>
    eebc:	1c23      	adds	r3, r4, #0
    eebe:	e484      	b.n	e7ca <bloomFilterAddressCheck+0x8b2>
    eec0:	1c22      	adds	r2, r4, #0
    eec2:	e478      	b.n	e7b6 <bloomFilterAddressCheck+0x89e>
    eec4:	1c23      	adds	r3, r4, #0
    eec6:	e46c      	b.n	e7a2 <bloomFilterAddressCheck+0x88a>
    eec8:	1c22      	adds	r2, r4, #0
    eeca:	e460      	b.n	e78e <bloomFilterAddressCheck+0x876>
    eecc:	1c2b      	adds	r3, r5, #0
    eece:	e454      	b.n	e77a <bloomFilterAddressCheck+0x862>
    eed0:	1c2a      	adds	r2, r5, #0
    eed2:	e447      	b.n	e764 <bloomFilterAddressCheck+0x84c>
    eed4:	1c2b      	adds	r3, r5, #0
    eed6:	e43b      	b.n	e750 <bloomFilterAddressCheck+0x838>
    eed8:	1c19      	adds	r1, r3, #0
    eeda:	b28a      	uxth	r2, r1
    eedc:	4b28      	ldr	r3, [pc, #160]	; (ef80 <bloomFilterAddressCheck+0x1068>)
    eede:	0052      	lsls	r2, r2, #1
    eee0:	4053      	eors	r3, r2
    eee2:	b29b      	uxth	r3, r3
    eee4:	0048      	lsls	r0, r1, #1
    eee6:	040a      	lsls	r2, r1, #16
    eee8:	d400      	bmi.n	eeec <bloomFilterAddressCheck+0xfd4>
    eeea:	e5fe      	b.n	eaea <bloomFilterAddressCheck+0xbd2>
    eeec:	1c18      	adds	r0, r3, #0
    eeee:	b282      	uxth	r2, r0
    eef0:	4b23      	ldr	r3, [pc, #140]	; (ef80 <bloomFilterAddressCheck+0x1068>)
    eef2:	0052      	lsls	r2, r2, #1
    eef4:	4053      	eors	r3, r2
    eef6:	b29b      	uxth	r3, r3
    eef8:	0042      	lsls	r2, r0, #1
    eefa:	0401      	lsls	r1, r0, #16
    eefc:	d400      	bmi.n	ef00 <bloomFilterAddressCheck+0xfe8>
    eefe:	e5fd      	b.n	eafc <bloomFilterAddressCheck+0xbe4>
    ef00:	1c1a      	adds	r2, r3, #0
    ef02:	e5fb      	b.n	eafc <bloomFilterAddressCheck+0xbe4>
    ef04:	1c1a      	adds	r2, r3, #0
    ef06:	e5de      	b.n	eac6 <bloomFilterAddressCheck+0xbae>
    ef08:	1c19      	adds	r1, r3, #0
    ef0a:	e5d3      	b.n	eab4 <bloomFilterAddressCheck+0xb9c>
    ef0c:	1c1a      	adds	r2, r3, #0
    ef0e:	e5c8      	b.n	eaa2 <bloomFilterAddressCheck+0xb8a>
    ef10:	1c11      	adds	r1, r2, #0
    ef12:	e5bd      	b.n	ea90 <bloomFilterAddressCheck+0xb78>
    ef14:	1c13      	adds	r3, r2, #0
    ef16:	e5b2      	b.n	ea7e <bloomFilterAddressCheck+0xb66>
    ef18:	1c1d      	adds	r5, r3, #0
    ef1a:	e5a2      	b.n	ea62 <bloomFilterAddressCheck+0xb4a>
    ef1c:	1c1a      	adds	r2, r3, #0
    ef1e:	e597      	b.n	ea50 <bloomFilterAddressCheck+0xb38>
    ef20:	1c19      	adds	r1, r3, #0
    ef22:	e58c      	b.n	ea3e <bloomFilterAddressCheck+0xb26>
    ef24:	1c1a      	adds	r2, r3, #0
    ef26:	e581      	b.n	ea2c <bloomFilterAddressCheck+0xb14>
    ef28:	1c19      	adds	r1, r3, #0
    ef2a:	e576      	b.n	ea1a <bloomFilterAddressCheck+0xb02>
    ef2c:	1c1a      	adds	r2, r3, #0
    ef2e:	e56b      	b.n	ea08 <bloomFilterAddressCheck+0xaf0>
    ef30:	1c11      	adds	r1, r2, #0
    ef32:	e560      	b.n	e9f6 <bloomFilterAddressCheck+0xade>
    ef34:	1c13      	adds	r3, r2, #0
    ef36:	e555      	b.n	e9e4 <bloomFilterAddressCheck+0xacc>
    ef38:	1c0a      	adds	r2, r1, #0
    ef3a:	e61d      	b.n	eb78 <bloomFilterAddressCheck+0xc60>
    ef3c:	1c0b      	adds	r3, r1, #0
    ef3e:	e611      	b.n	eb64 <bloomFilterAddressCheck+0xc4c>
    ef40:	1c0a      	adds	r2, r1, #0
    ef42:	e605      	b.n	eb50 <bloomFilterAddressCheck+0xc38>
    ef44:	1c0b      	adds	r3, r1, #0
    ef46:	e5f9      	b.n	eb3c <bloomFilterAddressCheck+0xc24>
    ef48:	1c0a      	adds	r2, r1, #0
    ef4a:	e5ed      	b.n	eb28 <bloomFilterAddressCheck+0xc10>
    ef4c:	1c03      	adds	r3, r0, #0
    ef4e:	e5e1      	b.n	eb14 <bloomFilterAddressCheck+0xbfc>
    ef50:	1c2a      	adds	r2, r5, #0
    ef52:	f7ff fbf3 	bl	e73c <bloomFilterAddressCheck+0x824>
    ef56:	1c2b      	adds	r3, r5, #0
    ef58:	f7ff fbe5 	bl	e726 <bloomFilterAddressCheck+0x80e>
    ef5c:	1c2a      	adds	r2, r5, #0
    ef5e:	f7ff fbd7 	bl	e710 <bloomFilterAddressCheck+0x7f8>
    ef62:	1c2b      	adds	r3, r5, #0
    ef64:	f7ff fbc9 	bl	e6fa <bloomFilterAddressCheck+0x7e2>
    ef68:	1c2a      	adds	r2, r5, #0
    ef6a:	f7ff fbbb 	bl	e6e4 <bloomFilterAddressCheck+0x7cc>
    ef6e:	1c13      	adds	r3, r2, #0
    ef70:	f7ff fbac 	bl	e6cc <bloomFilterAddressCheck+0x7b4>
    ef74:	464a      	mov	r2, r9
    ef76:	f7ff fb8e 	bl	e696 <bloomFilterAddressCheck+0x77e>
    ef7a:	1c2a      	adds	r2, r5, #0
    ef7c:	f7ff fb4a 	bl	e614 <bloomFilterAddressCheck+0x6fc>
    ef80:	ffff8005 	.word	0xffff8005

0000ef84 <handleCommissiongMessage>:
    ef84:	b510      	push	{r4, lr}
    ef86:	780b      	ldrb	r3, [r1, #0]
    ef88:	2b21      	cmp	r3, #33	; 0x21
    ef8a:	d105      	bne.n	ef98 <handleCommissiongMessage+0x14>
    ef8c:	88c3      	ldrh	r3, [r0, #6]
    ef8e:	2b00      	cmp	r3, #0
    ef90:	d102      	bne.n	ef98 <handleCommissiongMessage+0x14>
    ef92:	784b      	ldrb	r3, [r1, #1]
    ef94:	2b08      	cmp	r3, #8
    ef96:	d000      	beq.n	ef9a <handleCommissiongMessage+0x16>
    ef98:	bd10      	pop	{r4, pc}
    ef9a:	3102      	adds	r1, #2
    ef9c:	2208      	movs	r2, #8
    ef9e:	4b03      	ldr	r3, [pc, #12]	; (efac <handleCommissiongMessage+0x28>)
    efa0:	4803      	ldr	r0, [pc, #12]	; (efb0 <handleCommissiongMessage+0x2c>)
    efa2:	4798      	blx	r3
    efa4:	4b03      	ldr	r3, [pc, #12]	; (efb4 <handleCommissiongMessage+0x30>)
    efa6:	2004      	movs	r0, #4
    efa8:	4798      	blx	r3
    efaa:	e7f5      	b.n	ef98 <handleCommissiongMessage+0x14>
    efac:	00014d37 	.word	0x00014d37
    efb0:	200028f0 	.word	0x200028f0
    efb4:	0000a60d 	.word	0x0000a60d

0000efb8 <nwkAckConfCb>:
    efb8:	b510      	push	{r4, lr}
    efba:	0010      	movs	r0, r2
    efbc:	4b01      	ldr	r3, [pc, #4]	; (efc4 <nwkAckConfCb+0xc>)
    efbe:	4798      	blx	r3
    efc0:	bd10      	pop	{r4, pc}
    efc2:	46c0      	nop			; (mov r8, r8)
    efc4:	0000bd25 	.word	0x0000bd25

0000efc8 <channelUpdateTimerExpired>:
    efc8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    efca:	4e1f      	ldr	r6, [pc, #124]	; (f048 <channelUpdateTimerExpired+0x80>)
    efcc:	6833      	ldr	r3, [r6, #0]
    efce:	7e9a      	ldrb	r2, [r3, #26]
    efd0:	2a00      	cmp	r2, #0
    efd2:	d012      	beq.n	effa <channelUpdateTimerExpired+0x32>
    efd4:	2400      	movs	r4, #0
    efd6:	4f1d      	ldr	r7, [pc, #116]	; (f04c <channelUpdateTimerExpired+0x84>)
    efd8:	6818      	ldr	r0, [r3, #0]
    efda:	0125      	lsls	r5, r4, #4
    efdc:	1940      	adds	r0, r0, r5
    efde:	47b8      	blx	r7
    efe0:	6833      	ldr	r3, [r6, #0]
    efe2:	2800      	cmp	r0, #0
    efe4:	d004      	beq.n	eff0 <channelUpdateTimerExpired+0x28>
    efe6:	681a      	ldr	r2, [r3, #0]
    efe8:	4694      	mov	ip, r2
    efea:	8dda      	ldrh	r2, [r3, #46]	; 0x2e
    efec:	4465      	add	r5, ip
    efee:	60aa      	str	r2, [r5, #8]
    eff0:	3401      	adds	r4, #1
    eff2:	7e9a      	ldrb	r2, [r3, #26]
    eff4:	b2e4      	uxtb	r4, r4
    eff6:	42a2      	cmp	r2, r4
    eff8:	d8ee      	bhi.n	efd8 <channelUpdateTimerExpired+0x10>
    effa:	7eda      	ldrb	r2, [r3, #27]
    effc:	2a01      	cmp	r2, #1
    effe:	d914      	bls.n	f02a <channelUpdateTimerExpired+0x62>
    f000:	2401      	movs	r4, #1
    f002:	4f12      	ldr	r7, [pc, #72]	; (f04c <channelUpdateTimerExpired+0x84>)
    f004:	00a5      	lsls	r5, r4, #2
    f006:	6858      	ldr	r0, [r3, #4]
    f008:	192d      	adds	r5, r5, r4
    f00a:	00ad      	lsls	r5, r5, #2
    f00c:	1940      	adds	r0, r0, r5
    f00e:	47b8      	blx	r7
    f010:	6833      	ldr	r3, [r6, #0]
    f012:	2800      	cmp	r0, #0
    f014:	d004      	beq.n	f020 <channelUpdateTimerExpired+0x58>
    f016:	685a      	ldr	r2, [r3, #4]
    f018:	4694      	mov	ip, r2
    f01a:	4465      	add	r5, ip
    f01c:	68aa      	ldr	r2, [r5, #8]
    f01e:	60ea      	str	r2, [r5, #12]
    f020:	3401      	adds	r4, #1
    f022:	7eda      	ldrb	r2, [r3, #27]
    f024:	b2e4      	uxtb	r4, r4
    f026:	42a2      	cmp	r2, r4
    f028:	d8ec      	bhi.n	f004 <channelUpdateTimerExpired+0x3c>
    f02a:	4c09      	ldr	r4, [pc, #36]	; (f050 <channelUpdateTimerExpired+0x88>)
    f02c:	7823      	ldrb	r3, [r4, #0]
    f02e:	2bff      	cmp	r3, #255	; 0xff
    f030:	d008      	beq.n	f044 <channelUpdateTimerExpired+0x7c>
    f032:	4b08      	ldr	r3, [pc, #32]	; (f054 <channelUpdateTimerExpired+0x8c>)
    f034:	0021      	movs	r1, r4
    f036:	2000      	movs	r0, #0
    f038:	4798      	blx	r3
    f03a:	23ff      	movs	r3, #255	; 0xff
    f03c:	2005      	movs	r0, #5
    f03e:	7023      	strb	r3, [r4, #0]
    f040:	4b05      	ldr	r3, [pc, #20]	; (f058 <channelUpdateTimerExpired+0x90>)
    f042:	4798      	blx	r3
    f044:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    f046:	46c0      	nop			; (mov r8, r8)
    f048:	2000285c 	.word	0x2000285c
    f04c:	00011861 	.word	0x00011861
    f050:	2000008f 	.word	0x2000008f
    f054:	0000d995 	.word	0x0000d995
    f058:	0000a60d 	.word	0x0000a60d

0000f05c <memFreeConfcb>:
    f05c:	b510      	push	{r4, lr}
    f05e:	0010      	movs	r0, r2
    f060:	4b01      	ldr	r3, [pc, #4]	; (f068 <memFreeConfcb+0xc>)
    f062:	4798      	blx	r3
    f064:	bd10      	pop	{r4, pc}
    f066:	46c0      	nop			; (mov r8, r8)
    f068:	0000bd25 	.word	0x0000bd25

0000f06c <MiApp_SubscribeDataIndicationCallback>:
    f06c:	2800      	cmp	r0, #0
    f06e:	d003      	beq.n	f078 <MiApp_SubscribeDataIndicationCallback+0xc>
    f070:	4b02      	ldr	r3, [pc, #8]	; (f07c <MiApp_SubscribeDataIndicationCallback+0x10>)
    f072:	6018      	str	r0, [r3, #0]
    f074:	2001      	movs	r0, #1
    f076:	4770      	bx	lr
    f078:	2000      	movs	r0, #0
    f07a:	e7fc      	b.n	f076 <MiApp_SubscribeDataIndicationCallback+0xa>
    f07c:	20001d04 	.word	0x20001d04

0000f080 <prepareGenericHeader>:
    f080:	b510      	push	{r4, lr}
    f082:	28ff      	cmp	r0, #255	; 0xff
    f084:	d105      	bne.n	f092 <prepareGenericHeader+0x12>
    f086:	480f      	ldr	r0, [pc, #60]	; (f0c4 <prepareGenericHeader+0x44>)
    f088:	6804      	ldr	r4, [r0, #0]
    f08a:	2033      	movs	r0, #51	; 0x33
    f08c:	5c20      	ldrb	r0, [r4, r0]
    f08e:	3001      	adds	r0, #1
    f090:	b2c0      	uxtb	r0, r0
    f092:	2403      	movs	r4, #3
    f094:	7018      	strb	r0, [r3, #0]
    f096:	7858      	ldrb	r0, [r3, #1]
    f098:	80d9      	strh	r1, [r3, #6]
    f09a:	43a0      	bics	r0, r4
    f09c:	2401      	movs	r4, #1
    f09e:	4304      	orrs	r4, r0
    f0a0:	20f7      	movs	r0, #247	; 0xf7
    f0a2:	4020      	ands	r0, r4
    f0a4:	2404      	movs	r4, #4
    f0a6:	4320      	orrs	r0, r4
    f0a8:	2407      	movs	r4, #7
    f0aa:	4907      	ldr	r1, [pc, #28]	; (f0c8 <prepareGenericHeader+0x48>)
    f0ac:	4020      	ands	r0, r4
    f0ae:	7058      	strb	r0, [r3, #1]
    f0b0:	809a      	strh	r2, [r3, #4]
    f0b2:	4806      	ldr	r0, [pc, #24]	; (f0cc <prepareGenericHeader+0x4c>)
    f0b4:	780a      	ldrb	r2, [r1, #0]
    f0b6:	8800      	ldrh	r0, [r0, #0]
    f0b8:	3201      	adds	r2, #1
    f0ba:	b2d2      	uxtb	r2, r2
    f0bc:	8058      	strh	r0, [r3, #2]
    f0be:	700a      	strb	r2, [r1, #0]
    f0c0:	721a      	strb	r2, [r3, #8]
    f0c2:	bd10      	pop	{r4, pc}
    f0c4:	2000285c 	.word	0x2000285c
    f0c8:	20002890 	.word	0x20002890
    f0cc:	200028a8 	.word	0x200028a8

0000f0d0 <generalFrameConstruct>:
    f0d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    f0d2:	7802      	ldrb	r2, [r0, #0]
    f0d4:	0003      	movs	r3, r0
    f0d6:	700a      	strb	r2, [r1, #0]
    f0d8:	7842      	ldrb	r2, [r0, #1]
    f0da:	000c      	movs	r4, r1
    f0dc:	704a      	strb	r2, [r1, #1]
    f0de:	7a02      	ldrb	r2, [r0, #8]
    f0e0:	708a      	strb	r2, [r1, #2]
    f0e2:	7842      	ldrb	r2, [r0, #1]
    f0e4:	0691      	lsls	r1, r2, #26
    f0e6:	d42b      	bmi.n	f140 <generalFrameConstruct+0x70>
    f0e8:	8842      	ldrh	r2, [r0, #2]
    f0ea:	2516      	movs	r5, #22
    f0ec:	70e2      	strb	r2, [r4, #3]
    f0ee:	8842      	ldrh	r2, [r0, #2]
    f0f0:	260e      	movs	r6, #14
    f0f2:	0a12      	lsrs	r2, r2, #8
    f0f4:	7122      	strb	r2, [r4, #4]
    f0f6:	8882      	ldrh	r2, [r0, #4]
    f0f8:	210a      	movs	r1, #10
    f0fa:	7162      	strb	r2, [r4, #5]
    f0fc:	8882      	ldrh	r2, [r0, #4]
    f0fe:	2709      	movs	r7, #9
    f100:	0a12      	lsrs	r2, r2, #8
    f102:	71a2      	strb	r2, [r4, #6]
    f104:	88c2      	ldrh	r2, [r0, #6]
    f106:	71e2      	strb	r2, [r4, #7]
    f108:	88c2      	ldrh	r2, [r0, #6]
    f10a:	0a12      	lsrs	r2, r2, #8
    f10c:	7222      	strb	r2, [r4, #8]
    f10e:	7842      	ldrb	r2, [r0, #1]
    f110:	2009      	movs	r0, #9
    f112:	0752      	lsls	r2, r2, #29
    f114:	d513      	bpl.n	f13e <generalFrameConstruct+0x6e>
    f116:	4a0d      	ldr	r2, [pc, #52]	; (f14c <generalFrameConstruct+0x7c>)
    f118:	6810      	ldr	r0, [r2, #0]
    f11a:	2220      	movs	r2, #32
    f11c:	5c82      	ldrb	r2, [r0, r2]
    f11e:	480c      	ldr	r0, [pc, #48]	; (f150 <generalFrameConstruct+0x80>)
    f120:	741a      	strb	r2, [r3, #16]
    f122:	6800      	ldr	r0, [r0, #0]
    f124:	3314      	adds	r3, #20
    f126:	6018      	str	r0, [r3, #0]
    f128:	55e2      	strb	r2, [r4, r7]
    f12a:	1860      	adds	r0, r4, r1
    f12c:	2204      	movs	r2, #4
    f12e:	0019      	movs	r1, r3
    f130:	4f08      	ldr	r7, [pc, #32]	; (f154 <generalFrameConstruct+0x84>)
    f132:	47b8      	blx	r7
    f134:	19a0      	adds	r0, r4, r6
    f136:	2208      	movs	r2, #8
    f138:	4907      	ldr	r1, [pc, #28]	; (f158 <generalFrameConstruct+0x88>)
    f13a:	47b8      	blx	r7
    f13c:	0028      	movs	r0, r5
    f13e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    f140:	2510      	movs	r5, #16
    f142:	2608      	movs	r6, #8
    f144:	2104      	movs	r1, #4
    f146:	2703      	movs	r7, #3
    f148:	2003      	movs	r0, #3
    f14a:	e7e2      	b.n	f112 <generalFrameConstruct+0x42>
    f14c:	20002860 	.word	0x20002860
    f150:	20002914 	.word	0x20002914
    f154:	00014d37 	.word	0x00014d37
    f158:	20000094 	.word	0x20000094

0000f15c <frameTransmit>:
    f15c:	b5f0      	push	{r4, r5, r6, r7, lr}
    f15e:	4657      	mov	r7, sl
    f160:	464e      	mov	r6, r9
    f162:	46de      	mov	lr, fp
    f164:	4645      	mov	r5, r8
    f166:	b5e0      	push	{r5, r6, r7, lr}
    f168:	b085      	sub	sp, #20
    f16a:	4699      	mov	r9, r3
    f16c:	ab0e      	add	r3, sp, #56	; 0x38
    f16e:	781e      	ldrb	r6, [r3, #0]
    f170:	ab10      	add	r3, sp, #64	; 0x40
    f172:	781b      	ldrb	r3, [r3, #0]
    f174:	0007      	movs	r7, r0
    f176:	469a      	mov	sl, r3
    f178:	2028      	movs	r0, #40	; 0x28
    f17a:	4b43      	ldr	r3, [pc, #268]	; (f288 <frameTransmit+0x12c>)
    f17c:	4688      	mov	r8, r1
    f17e:	9203      	str	r2, [sp, #12]
    f180:	4798      	blx	r3
    f182:	1e04      	subs	r4, r0, #0
    f184:	d100      	bne.n	f188 <frameTransmit+0x2c>
    f186:	e07d      	b.n	f284 <frameTransmit+0x128>
    f188:	2300      	movs	r3, #0
    f18a:	7603      	strb	r3, [r0, #24]
    f18c:	787b      	ldrb	r3, [r7, #1]
    f18e:	075b      	lsls	r3, r3, #29
    f190:	d457      	bmi.n	f242 <frameTransmit+0xe6>
    f192:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    f194:	781a      	ldrb	r2, [r3, #0]
    f196:	785b      	ldrb	r3, [r3, #1]
    f198:	2e02      	cmp	r6, #2
    f19a:	d067      	beq.n	f26c <frameTransmit+0x110>
    f19c:	2101      	movs	r1, #1
    f19e:	2200      	movs	r2, #0
    f1a0:	2020      	movs	r0, #32
    f1a2:	7e23      	ldrb	r3, [r4, #24]
    f1a4:	0149      	lsls	r1, r1, #5
    f1a6:	4383      	bics	r3, r0
    f1a8:	430b      	orrs	r3, r1
    f1aa:	2104      	movs	r1, #4
    f1ac:	0092      	lsls	r2, r2, #2
    f1ae:	438b      	bics	r3, r1
    f1b0:	4313      	orrs	r3, r2
    f1b2:	2208      	movs	r2, #8
    f1b4:	4393      	bics	r3, r2
    f1b6:	7623      	strb	r3, [r4, #24]
    f1b8:	4b34      	ldr	r3, [pc, #208]	; (f28c <frameTransmit+0x130>)
    f1ba:	881a      	ldrh	r2, [r3, #0]
    f1bc:	4b34      	ldr	r3, [pc, #208]	; (f290 <frameTransmit+0x134>)
    f1be:	429a      	cmp	r2, r3
    f1c0:	d05e      	beq.n	f280 <frameTransmit+0x124>
    f1c2:	4b34      	ldr	r3, [pc, #208]	; (f294 <frameTransmit+0x138>)
    f1c4:	3903      	subs	r1, #3
    f1c6:	781a      	ldrb	r2, [r3, #0]
    f1c8:	2300      	movs	r3, #0
    f1ca:	3a06      	subs	r2, #6
    f1cc:	b2d2      	uxtb	r2, r2
    f1ce:	4291      	cmp	r1, r2
    f1d0:	415b      	adcs	r3, r3
    f1d2:	b2db      	uxtb	r3, r3
    f1d4:	2221      	movs	r2, #33	; 0x21
    f1d6:	54a3      	strb	r3, [r4, r2]
    f1d8:	1eb3      	subs	r3, r6, #2
    f1da:	425a      	negs	r2, r3
    f1dc:	4153      	adcs	r3, r2
    f1de:	2220      	movs	r2, #32
    f1e0:	2101      	movs	r1, #1
    f1e2:	54a3      	strb	r3, [r4, r2]
    f1e4:	7e23      	ldrb	r3, [r4, #24]
    f1e6:	089a      	lsrs	r2, r3, #2
    f1e8:	4051      	eors	r1, r2
    f1ea:	2201      	movs	r2, #1
    f1ec:	400a      	ands	r2, r1
    f1ee:	2140      	movs	r1, #64	; 0x40
    f1f0:	0192      	lsls	r2, r2, #6
    f1f2:	438b      	bics	r3, r1
    f1f4:	4313      	orrs	r3, r2
    f1f6:	2280      	movs	r2, #128	; 0x80
    f1f8:	4252      	negs	r2, r2
    f1fa:	4313      	orrs	r3, r2
    f1fc:	7623      	strb	r3, [r4, #24]
    f1fe:	887b      	ldrh	r3, [r7, #2]
    f200:	0027      	movs	r7, r4
    f202:	8463      	strh	r3, [r4, #34]	; 0x22
    f204:	464b      	mov	r3, r9
    f206:	3708      	adds	r7, #8
    f208:	6163      	str	r3, [r4, #20]
    f20a:	0032      	movs	r2, r6
    f20c:	990f      	ldr	r1, [sp, #60]	; 0x3c
    f20e:	4b22      	ldr	r3, [pc, #136]	; (f298 <frameTransmit+0x13c>)
    f210:	0038      	movs	r0, r7
    f212:	4798      	blx	r3
    f214:	9b11      	ldr	r3, [sp, #68]	; 0x44
    f216:	4652      	mov	r2, sl
    f218:	6123      	str	r3, [r4, #16]
    f21a:	2325      	movs	r3, #37	; 0x25
    f21c:	61e7      	str	r7, [r4, #28]
    f21e:	54e2      	strb	r2, [r4, r3]
    f220:	9b03      	ldr	r3, [sp, #12]
    f222:	481e      	ldr	r0, [pc, #120]	; (f29c <frameTransmit+0x140>)
    f224:	4443      	add	r3, r8
    f226:	001d      	movs	r5, r3
    f228:	2324      	movs	r3, #36	; 0x24
    f22a:	0021      	movs	r1, r4
    f22c:	54e5      	strb	r5, [r4, r3]
    f22e:	4b1c      	ldr	r3, [pc, #112]	; (f2a0 <frameTransmit+0x144>)
    f230:	4798      	blx	r3
    f232:	2001      	movs	r0, #1
    f234:	b005      	add	sp, #20
    f236:	bc3c      	pop	{r2, r3, r4, r5}
    f238:	4690      	mov	r8, r2
    f23a:	4699      	mov	r9, r3
    f23c:	46a2      	mov	sl, r4
    f23e:	46ab      	mov	fp, r5
    f240:	bdf0      	pop	{r4, r5, r6, r7, pc}
    f242:	4b18      	ldr	r3, [pc, #96]	; (f2a4 <frameTransmit+0x148>)
    f244:	0030      	movs	r0, r6
    f246:	4798      	blx	r3
    f248:	464b      	mov	r3, r9
    f24a:	9000      	str	r0, [sp, #0]
    f24c:	9a03      	ldr	r2, [sp, #12]
    f24e:	4641      	mov	r1, r8
    f250:	0038      	movs	r0, r7
    f252:	4d15      	ldr	r5, [pc, #84]	; (f2a8 <frameTransmit+0x14c>)
    f254:	47a8      	blx	r5
    f256:	28ff      	cmp	r0, #255	; 0xff
    f258:	d014      	beq.n	f284 <frameTransmit+0x128>
    f25a:	9b03      	ldr	r3, [sp, #12]
    f25c:	181d      	adds	r5, r3, r0
    f25e:	b2eb      	uxtb	r3, r5
    f260:	9303      	str	r3, [sp, #12]
    f262:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    f264:	781a      	ldrb	r2, [r3, #0]
    f266:	785b      	ldrb	r3, [r3, #1]
    f268:	2e02      	cmp	r6, #2
    f26a:	d197      	bne.n	f19c <frameTransmit+0x40>
    f26c:	021b      	lsls	r3, r3, #8
    f26e:	189b      	adds	r3, r3, r2
    f270:	4a07      	ldr	r2, [pc, #28]	; (f290 <frameTransmit+0x134>)
    f272:	b29b      	uxth	r3, r3
    f274:	4293      	cmp	r3, r2
    f276:	d000      	beq.n	f27a <frameTransmit+0x11e>
    f278:	e790      	b.n	f19c <frameTransmit+0x40>
    f27a:	2100      	movs	r1, #0
    f27c:	2201      	movs	r2, #1
    f27e:	e78f      	b.n	f1a0 <frameTransmit+0x44>
    f280:	2300      	movs	r3, #0
    f282:	e7a7      	b.n	f1d4 <frameTransmit+0x78>
    f284:	2000      	movs	r0, #0
    f286:	e7d5      	b.n	f234 <frameTransmit+0xd8>
    f288:	0000bc69 	.word	0x0000bc69
    f28c:	200028b8 	.word	0x200028b8
    f290:	0000ffff 	.word	0x0000ffff
    f294:	20001ce1 	.word	0x20001ce1
    f298:	00014d37 	.word	0x00014d37
    f29c:	200028ac 	.word	0x200028ac
    f2a0:	0000be65 	.word	0x0000be65
    f2a4:	000122c5 	.word	0x000122c5
    f2a8:	000122e9 	.word	0x000122e9

0000f2ac <sendDataFrame>:
    f2ac:	b5f0      	push	{r4, r5, r6, r7, lr}
    f2ae:	46de      	mov	lr, fp
    f2b0:	464e      	mov	r6, r9
    f2b2:	4645      	mov	r5, r8
    f2b4:	4657      	mov	r7, sl
    f2b6:	b5e0      	push	{r5, r6, r7, lr}
    f2b8:	b093      	sub	sp, #76	; 0x4c
    f2ba:	ab04      	add	r3, sp, #16
    f2bc:	469c      	mov	ip, r3
    f2be:	2616      	movs	r6, #22
    f2c0:	4ba8      	ldr	r3, [pc, #672]	; (f564 <sendDataFrame+0x2b8>)
    f2c2:	9205      	str	r2, [sp, #20]
    f2c4:	469b      	mov	fp, r3
    f2c6:	881b      	ldrh	r3, [r3, #0]
    f2c8:	4466      	add	r6, ip
    f2ca:	b28a      	uxth	r2, r1
    f2cc:	0005      	movs	r5, r0
    f2ce:	8031      	strh	r1, [r6, #0]
    f2d0:	429a      	cmp	r2, r3
    f2d2:	d100      	bne.n	f2d6 <sendDataFrame+0x2a>
    f2d4:	e0ba      	b.n	f44c <sendDataFrame+0x1a0>
    f2d6:	2800      	cmp	r0, #0
    f2d8:	d100      	bne.n	f2dc <sendDataFrame+0x30>
    f2da:	e0b7      	b.n	f44c <sendDataFrame+0x1a0>
    f2dc:	2088      	movs	r0, #136	; 0x88
    f2de:	4ba2      	ldr	r3, [pc, #648]	; (f568 <sendDataFrame+0x2bc>)
    f2e0:	4798      	blx	r3
    f2e2:	1e07      	subs	r7, r0, #0
    f2e4:	d100      	bne.n	f2e8 <sendDataFrame+0x3c>
    f2e6:	e0b1      	b.n	f44c <sendDataFrame+0x1a0>
    f2e8:	4aa0      	ldr	r2, [pc, #640]	; (f56c <sendDataFrame+0x2c0>)
    f2ea:	ac0a      	add	r4, sp, #40	; 0x28
    f2ec:	4692      	mov	sl, r2
    f2ee:	4651      	mov	r1, sl
    f2f0:	2233      	movs	r2, #51	; 0x33
    f2f2:	6809      	ldr	r1, [r1, #0]
    f2f4:	8beb      	ldrh	r3, [r5, #30]
    f2f6:	5c8a      	ldrb	r2, [r1, r2]
    f2f8:	8ba8      	ldrh	r0, [r5, #28]
    f2fa:	3201      	adds	r2, #1
    f2fc:	b2d2      	uxtb	r2, r2
    f2fe:	9206      	str	r2, [sp, #24]
    f300:	7022      	strb	r2, [r4, #0]
    f302:	2208      	movs	r2, #8
    f304:	7861      	ldrb	r1, [r4, #1]
    f306:	80e3      	strh	r3, [r4, #6]
    f308:	4391      	bics	r1, r2
    f30a:	2204      	movs	r2, #4
    f30c:	4694      	mov	ip, r2
    f30e:	4662      	mov	r2, ip
    f310:	4b97      	ldr	r3, [pc, #604]	; (f570 <sendDataFrame+0x2c4>)
    f312:	4311      	orrs	r1, r2
    f314:	4a97      	ldr	r2, [pc, #604]	; (f574 <sendDataFrame+0x2c8>)
    f316:	781b      	ldrb	r3, [r3, #0]
    f318:	8812      	ldrh	r2, [r2, #0]
    f31a:	3301      	adds	r3, #1
    f31c:	8062      	strh	r2, [r4, #2]
    f31e:	4a94      	ldr	r2, [pc, #592]	; (f570 <sendDataFrame+0x2c4>)
    f320:	b2db      	uxtb	r3, r3
    f322:	7013      	strb	r3, [r2, #0]
    f324:	7223      	strb	r3, [r4, #8]
    f326:	7e6b      	ldrb	r3, [r5, #25]
    f328:	80a0      	strh	r0, [r4, #4]
    f32a:	469c      	mov	ip, r3
    f32c:	2303      	movs	r3, #3
    f32e:	4698      	mov	r8, r3
    f330:	4663      	mov	r3, ip
    f332:	4642      	mov	r2, r8
    f334:	4013      	ands	r3, r2
    f336:	4699      	mov	r9, r3
    f338:	231f      	movs	r3, #31
    f33a:	400b      	ands	r3, r1
    f33c:	4393      	bics	r3, r2
    f33e:	2110      	movs	r1, #16
    f340:	4662      	mov	r2, ip
    f342:	4011      	ands	r1, r2
    f344:	464a      	mov	r2, r9
    f346:	4313      	orrs	r3, r2
    f348:	2210      	movs	r2, #16
    f34a:	4393      	bics	r3, r2
    f34c:	4319      	orrs	r1, r3
    f34e:	23ff      	movs	r3, #255	; 0xff
    f350:	7061      	strb	r1, [r4, #1]
    f352:	4203      	tst	r3, r0
    f354:	d012      	beq.n	f37c <sendDataFrame+0xd0>
    f356:	465a      	mov	r2, fp
    f358:	8811      	ldrh	r1, [r2, #0]
    f35a:	0002      	movs	r2, r0
    f35c:	439a      	bics	r2, r3
    f35e:	428a      	cmp	r2, r1
    f360:	d100      	bne.n	f364 <sendDataFrame+0xb8>
    f362:	e0b5      	b.n	f4d0 <sendDataFrame+0x224>
    f364:	4984      	ldr	r1, [pc, #528]	; (f578 <sendDataFrame+0x2cc>)
    f366:	4288      	cmp	r0, r1
    f368:	d108      	bne.n	f37c <sendDataFrame+0xd0>
    f36a:	89a9      	ldrh	r1, [r5, #12]
    f36c:	420b      	tst	r3, r1
    f36e:	d005      	beq.n	f37c <sendDataFrame+0xd0>
    f370:	465a      	mov	r2, fp
    f372:	8810      	ldrh	r0, [r2, #0]
    f374:	4399      	bics	r1, r3
    f376:	4281      	cmp	r1, r0
    f378:	d100      	bne.n	f37c <sendDataFrame+0xd0>
    f37a:	e0a9      	b.n	f4d0 <sendDataFrame+0x224>
    f37c:	466b      	mov	r3, sp
    f37e:	7e1b      	ldrb	r3, [r3, #24]
    f380:	703b      	strb	r3, [r7, #0]
    f382:	7863      	ldrb	r3, [r4, #1]
    f384:	707b      	strb	r3, [r7, #1]
    f386:	7a23      	ldrb	r3, [r4, #8]
    f388:	70bb      	strb	r3, [r7, #2]
    f38a:	7863      	ldrb	r3, [r4, #1]
    f38c:	069a      	lsls	r2, r3, #26
    f38e:	d565      	bpl.n	f45c <sendDataFrame+0x1b0>
    f390:	2210      	movs	r2, #16
    f392:	2103      	movs	r1, #3
    f394:	9207      	str	r2, [sp, #28]
    f396:	9208      	str	r2, [sp, #32]
    f398:	3a08      	subs	r2, #8
    f39a:	4691      	mov	r9, r2
    f39c:	2003      	movs	r0, #3
    f39e:	3a04      	subs	r2, #4
    f3a0:	9106      	str	r1, [sp, #24]
    f3a2:	075b      	lsls	r3, r3, #29
    f3a4:	d500      	bpl.n	f3a8 <sendDataFrame+0xfc>
    f3a6:	e074      	b.n	f492 <sendDataFrame+0x1e6>
    f3a8:	4b74      	ldr	r3, [pc, #464]	; (f57c <sendDataFrame+0x2d0>)
    f3aa:	4698      	mov	r8, r3
    f3ac:	7ceb      	ldrb	r3, [r5, #19]
    f3ae:	2b00      	cmp	r3, #0
    f3b0:	d100      	bne.n	f3b4 <sendDataFrame+0x108>
    f3b2:	e089      	b.n	f4c8 <sendDataFrame+0x21c>
    f3b4:	2320      	movs	r3, #32
    f3b6:	5ceb      	ldrb	r3, [r5, r3]
    f3b8:	4a6d      	ldr	r2, [pc, #436]	; (f570 <sendDataFrame+0x2c4>)
    f3ba:	70bb      	strb	r3, [r7, #2]
    f3bc:	4b6c      	ldr	r3, [pc, #432]	; (f570 <sendDataFrame+0x2c4>)
    f3be:	781b      	ldrb	r3, [r3, #0]
    f3c0:	3b01      	subs	r3, #1
    f3c2:	7013      	strb	r3, [r2, #0]
    f3c4:	2338      	movs	r3, #56	; 0x38
    f3c6:	0029      	movs	r1, r5
    f3c8:	4699      	mov	r9, r3
    f3ca:	5cea      	ldrb	r2, [r5, r3]
    f3cc:	1838      	adds	r0, r7, r0
    f3ce:	3139      	adds	r1, #57	; 0x39
    f3d0:	47c0      	blx	r8
    f3d2:	464b      	mov	r3, r9
    f3d4:	5ceb      	ldrb	r3, [r5, r3]
    f3d6:	8830      	ldrh	r0, [r6, #0]
    f3d8:	4698      	mov	r8, r3
    f3da:	4b67      	ldr	r3, [pc, #412]	; (f578 <sendDataFrame+0x2cc>)
    f3dc:	4298      	cmp	r0, r3
    f3de:	d00d      	beq.n	f3fc <sendDataFrame+0x150>
    f3e0:	9b05      	ldr	r3, [sp, #20]
    f3e2:	4642      	mov	r2, r8
    f3e4:	9303      	str	r3, [sp, #12]
    f3e6:	7cab      	ldrb	r3, [r5, #18]
    f3e8:	9906      	ldr	r1, [sp, #24]
    f3ea:	9302      	str	r3, [sp, #8]
    f3ec:	2302      	movs	r3, #2
    f3ee:	9601      	str	r6, [sp, #4]
    f3f0:	9300      	str	r3, [sp, #0]
    f3f2:	0020      	movs	r0, r4
    f3f4:	003b      	movs	r3, r7
    f3f6:	4c62      	ldr	r4, [pc, #392]	; (f580 <sendDataFrame+0x2d4>)
    f3f8:	47a0      	blx	r4
    f3fa:	e028      	b.n	f44e <sendDataFrame+0x1a2>
    f3fc:	465b      	mov	r3, fp
    f3fe:	881b      	ldrh	r3, [r3, #0]
    f400:	b29b      	uxth	r3, r3
    f402:	9307      	str	r3, [sp, #28]
    f404:	4653      	mov	r3, sl
    f406:	681b      	ldr	r3, [r3, #0]
    f408:	7fda      	ldrb	r2, [r3, #31]
    f40a:	2a00      	cmp	r2, #0
    f40c:	d01b      	beq.n	f446 <sendDataFrame+0x19a>
    f40e:	691b      	ldr	r3, [r3, #16]
    f410:	469c      	mov	ip, r3
    f412:	881b      	ldrh	r3, [r3, #0]
    f414:	4283      	cmp	r3, r0
    f416:	d100      	bne.n	f41a <sendDataFrame+0x16e>
    f418:	e09f      	b.n	f55a <sendDataFrame+0x2ae>
    f41a:	4663      	mov	r3, ip
    f41c:	3a01      	subs	r2, #1
    f41e:	b2d1      	uxtb	r1, r2
    f420:	3101      	adds	r1, #1
    f422:	0089      	lsls	r1, r1, #2
    f424:	4461      	add	r1, ip
    f426:	46a9      	mov	r9, r5
    f428:	3304      	adds	r3, #4
    f42a:	4665      	mov	r5, ip
    f42c:	46bc      	mov	ip, r7
    f42e:	e007      	b.n	f440 <sendDataFrame+0x194>
    f430:	1b5f      	subs	r7, r3, r5
    f432:	469b      	mov	fp, r3
    f434:	3304      	adds	r3, #4
    f436:	1f1a      	subs	r2, r3, #4
    f438:	8812      	ldrh	r2, [r2, #0]
    f43a:	4282      	cmp	r2, r0
    f43c:	d100      	bne.n	f440 <sendDataFrame+0x194>
    f43e:	e077      	b.n	f530 <sendDataFrame+0x284>
    f440:	4299      	cmp	r1, r3
    f442:	d1f5      	bne.n	f430 <sendDataFrame+0x184>
    f444:	4667      	mov	r7, ip
    f446:	0038      	movs	r0, r7
    f448:	4b4e      	ldr	r3, [pc, #312]	; (f584 <sendDataFrame+0x2d8>)
    f44a:	4798      	blx	r3
    f44c:	2000      	movs	r0, #0
    f44e:	b013      	add	sp, #76	; 0x4c
    f450:	bc3c      	pop	{r2, r3, r4, r5}
    f452:	4690      	mov	r8, r2
    f454:	4699      	mov	r9, r3
    f456:	46a2      	mov	sl, r4
    f458:	46ab      	mov	fp, r5
    f45a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    f45c:	8862      	ldrh	r2, [r4, #2]
    f45e:	2109      	movs	r1, #9
    f460:	70fa      	strb	r2, [r7, #3]
    f462:	8862      	ldrh	r2, [r4, #2]
    f464:	2009      	movs	r0, #9
    f466:	0a12      	lsrs	r2, r2, #8
    f468:	713a      	strb	r2, [r7, #4]
    f46a:	88a2      	ldrh	r2, [r4, #4]
    f46c:	717a      	strb	r2, [r7, #5]
    f46e:	88a2      	ldrh	r2, [r4, #4]
    f470:	0a12      	lsrs	r2, r2, #8
    f472:	71ba      	strb	r2, [r7, #6]
    f474:	88e2      	ldrh	r2, [r4, #6]
    f476:	71fa      	strb	r2, [r7, #7]
    f478:	88e2      	ldrh	r2, [r4, #6]
    f47a:	9106      	str	r1, [sp, #24]
    f47c:	0a12      	lsrs	r2, r2, #8
    f47e:	723a      	strb	r2, [r7, #8]
    f480:	2216      	movs	r2, #22
    f482:	9207      	str	r2, [sp, #28]
    f484:	9208      	str	r2, [sp, #32]
    f486:	3a08      	subs	r2, #8
    f488:	4691      	mov	r9, r2
    f48a:	3a04      	subs	r2, #4
    f48c:	075b      	lsls	r3, r3, #29
    f48e:	d400      	bmi.n	f492 <sendDataFrame+0x1e6>
    f490:	e78a      	b.n	f3a8 <sendDataFrame+0xfc>
    f492:	4b3d      	ldr	r3, [pc, #244]	; (f588 <sendDataFrame+0x2dc>)
    f494:	6819      	ldr	r1, [r3, #0]
    f496:	2320      	movs	r3, #32
    f498:	5ccb      	ldrb	r3, [r1, r3]
    f49a:	493c      	ldr	r1, [pc, #240]	; (f58c <sendDataFrame+0x2e0>)
    f49c:	7423      	strb	r3, [r4, #16]
    f49e:	6809      	ldr	r1, [r1, #0]
    f4a0:	6161      	str	r1, [r4, #20]
    f4a2:	543b      	strb	r3, [r7, r0]
    f4a4:	4b35      	ldr	r3, [pc, #212]	; (f57c <sendDataFrame+0x2d0>)
    f4a6:	18b8      	adds	r0, r7, r2
    f4a8:	a90f      	add	r1, sp, #60	; 0x3c
    f4aa:	2204      	movs	r2, #4
    f4ac:	4698      	mov	r8, r3
    f4ae:	4798      	blx	r3
    f4b0:	464b      	mov	r3, r9
    f4b2:	2208      	movs	r2, #8
    f4b4:	18f8      	adds	r0, r7, r3
    f4b6:	4936      	ldr	r1, [pc, #216]	; (f590 <sendDataFrame+0x2e4>)
    f4b8:	47c0      	blx	r8
    f4ba:	9b08      	ldr	r3, [sp, #32]
    f4bc:	9807      	ldr	r0, [sp, #28]
    f4be:	9306      	str	r3, [sp, #24]
    f4c0:	7ceb      	ldrb	r3, [r5, #19]
    f4c2:	2b00      	cmp	r3, #0
    f4c4:	d000      	beq.n	f4c8 <sendDataFrame+0x21c>
    f4c6:	e775      	b.n	f3b4 <sendDataFrame+0x108>
    f4c8:	2320      	movs	r3, #32
    f4ca:	78ba      	ldrb	r2, [r7, #2]
    f4cc:	54ea      	strb	r2, [r5, r3]
    f4ce:	e779      	b.n	f3c4 <sendDataFrame+0x118>
    f4d0:	4b30      	ldr	r3, [pc, #192]	; (f594 <sendDataFrame+0x2e8>)
    f4d2:	2100      	movs	r1, #0
    f4d4:	4698      	mov	r8, r3
    f4d6:	0018      	movs	r0, r3
    f4d8:	4b2f      	ldr	r3, [pc, #188]	; (f598 <sendDataFrame+0x2ec>)
    f4da:	4798      	blx	r3
    f4dc:	4643      	mov	r3, r8
    f4de:	7a1b      	ldrb	r3, [r3, #8]
    f4e0:	469c      	mov	ip, r3
    f4e2:	2b00      	cmp	r3, #0
    f4e4:	d021      	beq.n	f52a <sendDataFrame+0x27e>
    f4e6:	2240      	movs	r2, #64	; 0x40
    f4e8:	8833      	ldrh	r3, [r6, #0]
    f4ea:	4691      	mov	r9, r2
    f4ec:	4a22      	ldr	r2, [pc, #136]	; (f578 <sendDataFrame+0x2cc>)
    f4ee:	9306      	str	r3, [sp, #24]
    f4f0:	4661      	mov	r1, ip
    f4f2:	2300      	movs	r3, #0
    f4f4:	4690      	mov	r8, r2
    f4f6:	46bc      	mov	ip, r7
    f4f8:	e006      	b.n	f508 <sendDataFrame+0x25c>
    f4fa:	4542      	cmp	r2, r8
    f4fc:	d00f      	beq.n	f51e <sendDataFrame+0x272>
    f4fe:	3301      	adds	r3, #1
    f500:	b2db      	uxtb	r3, r3
    f502:	6800      	ldr	r0, [r0, #0]
    f504:	428b      	cmp	r3, r1
    f506:	d00f      	beq.n	f528 <sendDataFrame+0x27c>
    f508:	2800      	cmp	r0, #0
    f50a:	d0f8      	beq.n	f4fe <sendDataFrame+0x252>
    f50c:	8b82      	ldrh	r2, [r0, #28]
    f50e:	8baf      	ldrh	r7, [r5, #28]
    f510:	4297      	cmp	r7, r2
    f512:	d1f2      	bne.n	f4fa <sendDataFrame+0x24e>
    f514:	464f      	mov	r7, r9
    f516:	7862      	ldrb	r2, [r4, #1]
    f518:	433a      	orrs	r2, r7
    f51a:	7062      	strb	r2, [r4, #1]
    f51c:	e7ef      	b.n	f4fe <sendDataFrame+0x252>
    f51e:	8982      	ldrh	r2, [r0, #12]
    f520:	9f06      	ldr	r7, [sp, #24]
    f522:	42ba      	cmp	r2, r7
    f524:	d1eb      	bne.n	f4fe <sendDataFrame+0x252>
    f526:	e7f5      	b.n	f514 <sendDataFrame+0x268>
    f528:	4667      	mov	r7, ip
    f52a:	7823      	ldrb	r3, [r4, #0]
    f52c:	9306      	str	r3, [sp, #24]
    f52e:	e725      	b.n	f37c <sendDataFrame+0xd0>
    f530:	464d      	mov	r5, r9
    f532:	46b9      	mov	r9, r7
    f534:	4667      	mov	r7, ip
    f536:	4669      	mov	r1, sp
    f538:	465b      	mov	r3, fp
    f53a:	8b89      	ldrh	r1, [r1, #28]
    f53c:	78ba      	ldrb	r2, [r7, #2]
    f53e:	8019      	strh	r1, [r3, #0]
    f540:	4653      	mov	r3, sl
    f542:	681b      	ldr	r3, [r3, #0]
    f544:	691b      	ldr	r3, [r3, #16]
    f546:	444b      	add	r3, r9
    f548:	709a      	strb	r2, [r3, #2]
    f54a:	4653      	mov	r3, sl
    f54c:	2220      	movs	r2, #32
    f54e:	681b      	ldr	r3, [r3, #0]
    f550:	5c9a      	ldrb	r2, [r3, r2]
    f552:	691b      	ldr	r3, [r3, #16]
    f554:	444b      	add	r3, r9
    f556:	70da      	strb	r2, [r3, #3]
    f558:	e742      	b.n	f3e0 <sendDataFrame+0x134>
    f55a:	2300      	movs	r3, #0
    f55c:	46e3      	mov	fp, ip
    f55e:	4699      	mov	r9, r3
    f560:	e7e9      	b.n	f536 <sendDataFrame+0x28a>
    f562:	46c0      	nop			; (mov r8, r8)
    f564:	200028b8 	.word	0x200028b8
    f568:	0000bc69 	.word	0x0000bc69
    f56c:	2000285c 	.word	0x2000285c
    f570:	20002890 	.word	0x20002890
    f574:	200028a8 	.word	0x200028a8
    f578:	0000ffff 	.word	0x0000ffff
    f57c:	00014d37 	.word	0x00014d37
    f580:	0000f15d 	.word	0x0000f15d
    f584:	0000bd25 	.word	0x0000bd25
    f588:	20002860 	.word	0x20002860
    f58c:	20002914 	.word	0x20002914
    f590:	20000094 	.word	0x20000094
    f594:	20002850 	.word	0x20002850
    f598:	0000bead 	.word	0x0000bead

0000f59c <addRebroadcastTableEntry>:
    f59c:	b5f0      	push	{r4, r5, r6, r7, lr}
    f59e:	46c6      	mov	lr, r8
    f5a0:	b500      	push	{lr}
    f5a2:	4e18      	ldr	r6, [pc, #96]	; (f604 <addRebroadcastTableEntry+0x68>)
    f5a4:	4684      	mov	ip, r0
    f5a6:	6833      	ldr	r3, [r6, #0]
    f5a8:	4688      	mov	r8, r1
    f5aa:	7fda      	ldrb	r2, [r3, #31]
    f5ac:	2a00      	cmp	r2, #0
    f5ae:	d014      	beq.n	f5da <addRebroadcastTableEntry+0x3e>
    f5b0:	691d      	ldr	r5, [r3, #16]
    f5b2:	4f15      	ldr	r7, [pc, #84]	; (f608 <addRebroadcastTableEntry+0x6c>)
    f5b4:	882b      	ldrh	r3, [r5, #0]
    f5b6:	42bb      	cmp	r3, r7
    f5b8:	d013      	beq.n	f5e2 <addRebroadcastTableEntry+0x46>
    f5ba:	3a01      	subs	r2, #1
    f5bc:	b2d2      	uxtb	r2, r2
    f5be:	3201      	adds	r2, #1
    f5c0:	0092      	lsls	r2, r2, #2
    f5c2:	1d2b      	adds	r3, r5, #4
    f5c4:	18aa      	adds	r2, r5, r2
    f5c6:	e006      	b.n	f5d6 <addRebroadcastTableEntry+0x3a>
    f5c8:	1b59      	subs	r1, r3, r5
    f5ca:	0018      	movs	r0, r3
    f5cc:	3304      	adds	r3, #4
    f5ce:	1f1c      	subs	r4, r3, #4
    f5d0:	8824      	ldrh	r4, [r4, #0]
    f5d2:	42bc      	cmp	r4, r7
    f5d4:	d007      	beq.n	f5e6 <addRebroadcastTableEntry+0x4a>
    f5d6:	4293      	cmp	r3, r2
    f5d8:	d1f6      	bne.n	f5c8 <addRebroadcastTableEntry+0x2c>
    f5da:	2000      	movs	r0, #0
    f5dc:	bc04      	pop	{r2}
    f5de:	4690      	mov	r8, r2
    f5e0:	bdf0      	pop	{r4, r5, r6, r7, pc}
    f5e2:	0028      	movs	r0, r5
    f5e4:	2100      	movs	r1, #0
    f5e6:	4663      	mov	r3, ip
    f5e8:	4642      	mov	r2, r8
    f5ea:	8003      	strh	r3, [r0, #0]
    f5ec:	6833      	ldr	r3, [r6, #0]
    f5ee:	2001      	movs	r0, #1
    f5f0:	691b      	ldr	r3, [r3, #16]
    f5f2:	185b      	adds	r3, r3, r1
    f5f4:	709a      	strb	r2, [r3, #2]
    f5f6:	2220      	movs	r2, #32
    f5f8:	6833      	ldr	r3, [r6, #0]
    f5fa:	5c9a      	ldrb	r2, [r3, r2]
    f5fc:	691b      	ldr	r3, [r3, #16]
    f5fe:	185b      	adds	r3, r3, r1
    f600:	70da      	strb	r2, [r3, #3]
    f602:	e7eb      	b.n	f5dc <addRebroadcastTableEntry+0x40>
    f604:	2000285c 	.word	0x2000285c
    f608:	0000ffff 	.word	0x0000ffff

0000f60c <initRebroadcastTable>:
    f60c:	b510      	push	{r4, lr}
    f60e:	4809      	ldr	r0, [pc, #36]	; (f634 <initRebroadcastTable+0x28>)
    f610:	2300      	movs	r3, #0
    f612:	6802      	ldr	r2, [r0, #0]
    f614:	7fd1      	ldrb	r1, [r2, #31]
    f616:	2900      	cmp	r1, #0
    f618:	d00a      	beq.n	f630 <initRebroadcastTable+0x24>
    f61a:	2401      	movs	r4, #1
    f61c:	4264      	negs	r4, r4
    f61e:	6912      	ldr	r2, [r2, #16]
    f620:	0099      	lsls	r1, r3, #2
    f622:	528c      	strh	r4, [r1, r2]
    f624:	6802      	ldr	r2, [r0, #0]
    f626:	3301      	adds	r3, #1
    f628:	7fd1      	ldrb	r1, [r2, #31]
    f62a:	b2db      	uxtb	r3, r3
    f62c:	4299      	cmp	r1, r3
    f62e:	d8f6      	bhi.n	f61e <initRebroadcastTable+0x12>
    f630:	bd10      	pop	{r4, pc}
    f632:	46c0      	nop			; (mov r8, r8)
    f634:	2000285c 	.word	0x2000285c

0000f638 <rebroadcastTimerHandler>:
    f638:	b5f0      	push	{r4, r5, r6, r7, lr}
    f63a:	4f11      	ldr	r7, [pc, #68]	; (f680 <rebroadcastTimerHandler+0x48>)
    f63c:	2300      	movs	r3, #0
    f63e:	683c      	ldr	r4, [r7, #0]
    f640:	7fe5      	ldrb	r5, [r4, #31]
    f642:	2d00      	cmp	r5, #0
    f644:	d01b      	beq.n	f67e <rebroadcastTimerHandler+0x46>
    f646:	2201      	movs	r2, #1
    f648:	4252      	negs	r2, r2
    f64a:	4694      	mov	ip, r2
    f64c:	4e0d      	ldr	r6, [pc, #52]	; (f684 <rebroadcastTimerHandler+0x4c>)
    f64e:	6922      	ldr	r2, [r4, #16]
    f650:	0098      	lsls	r0, r3, #2
    f652:	1812      	adds	r2, r2, r0
    f654:	8811      	ldrh	r1, [r2, #0]
    f656:	42b1      	cmp	r1, r6
    f658:	d00d      	beq.n	f676 <rebroadcastTimerHandler+0x3e>
    f65a:	78d1      	ldrb	r1, [r2, #3]
    f65c:	2900      	cmp	r1, #0
    f65e:	d00a      	beq.n	f676 <rebroadcastTimerHandler+0x3e>
    f660:	3901      	subs	r1, #1
    f662:	b2c9      	uxtb	r1, r1
    f664:	70d1      	strb	r1, [r2, #3]
    f666:	2900      	cmp	r1, #0
    f668:	d103      	bne.n	f672 <rebroadcastTimerHandler+0x3a>
    f66a:	4661      	mov	r1, ip
    f66c:	683a      	ldr	r2, [r7, #0]
    f66e:	6912      	ldr	r2, [r2, #16]
    f670:	5211      	strh	r1, [r2, r0]
    f672:	683c      	ldr	r4, [r7, #0]
    f674:	7fe5      	ldrb	r5, [r4, #31]
    f676:	3301      	adds	r3, #1
    f678:	b2db      	uxtb	r3, r3
    f67a:	42ab      	cmp	r3, r5
    f67c:	d3e7      	bcc.n	f64e <rebroadcastTimerHandler+0x16>
    f67e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    f680:	2000285c 	.word	0x2000285c
    f684:	0000ffff 	.word	0x0000ffff

0000f688 <handleDataMessage>:
    f688:	b5f0      	push	{r4, r5, r6, r7, lr}
    f68a:	46de      	mov	lr, fp
    f68c:	4657      	mov	r7, sl
    f68e:	464e      	mov	r6, r9
    f690:	4645      	mov	r5, r8
    f692:	b5e0      	push	{r5, r6, r7, lr}
    f694:	780b      	ldrb	r3, [r1, #0]
    f696:	b083      	sub	sp, #12
    f698:	0004      	movs	r4, r0
    f69a:	2b31      	cmp	r3, #49	; 0x31
    f69c:	d050      	beq.n	f740 <handleDataMessage+0xb8>
    f69e:	2b32      	cmp	r3, #50	; 0x32
    f6a0:	d147      	bne.n	f732 <handleDataMessage+0xaa>
    f6a2:	4d67      	ldr	r5, [pc, #412]	; (f840 <handleDataMessage+0x1b8>)
    f6a4:	7a2b      	ldrb	r3, [r5, #8]
    f6a6:	2b00      	cmp	r3, #0
    f6a8:	d043      	beq.n	f732 <handleDataMessage+0xaa>
    f6aa:	4a66      	ldr	r2, [pc, #408]	; (f844 <handleDataMessage+0x1bc>)
    f6ac:	4b66      	ldr	r3, [pc, #408]	; (f848 <handleDataMessage+0x1c0>)
    f6ae:	4691      	mov	r9, r2
    f6b0:	4a66      	ldr	r2, [pc, #408]	; (f84c <handleDataMessage+0x1c4>)
    f6b2:	2600      	movs	r6, #0
    f6b4:	4692      	mov	sl, r2
    f6b6:	4a66      	ldr	r2, [pc, #408]	; (f850 <handleDataMessage+0x1c8>)
    f6b8:	4698      	mov	r8, r3
    f6ba:	4693      	mov	fp, r2
    f6bc:	e007      	b.n	f6ce <handleDataMessage+0x46>
    f6be:	0039      	movs	r1, r7
    f6c0:	0028      	movs	r0, r5
    f6c2:	47c8      	blx	r9
    f6c4:	3601      	adds	r6, #1
    f6c6:	7a2b      	ldrb	r3, [r5, #8]
    f6c8:	b2f6      	uxtb	r6, r6
    f6ca:	42b3      	cmp	r3, r6
    f6cc:	d931      	bls.n	f732 <handleDataMessage+0xaa>
    f6ce:	2100      	movs	r1, #0
    f6d0:	0028      	movs	r0, r5
    f6d2:	47c0      	blx	r8
    f6d4:	1e07      	subs	r7, r0, #0
    f6d6:	d02c      	beq.n	f732 <handleDataMessage+0xaa>
    f6d8:	2320      	movs	r3, #32
    f6da:	7a22      	ldrb	r2, [r4, #8]
    f6dc:	5cc3      	ldrb	r3, [r0, r3]
    f6de:	429a      	cmp	r2, r3
    f6e0:	d1ed      	bne.n	f6be <handleDataMessage+0x36>
    f6e2:	88e2      	ldrh	r2, [r4, #6]
    f6e4:	8b83      	ldrh	r3, [r0, #28]
    f6e6:	429a      	cmp	r2, r3
    f6e8:	d1e9      	bne.n	f6be <handleDataMessage+0x36>
    f6ea:	6883      	ldr	r3, [r0, #8]
    f6ec:	2b00      	cmp	r3, #0
    f6ee:	d003      	beq.n	f6f8 <handleDataMessage+0x70>
    f6f0:	7c80      	ldrb	r0, [r0, #18]
    f6f2:	003a      	movs	r2, r7
    f6f4:	2100      	movs	r1, #0
    f6f6:	4798      	blx	r3
    f6f8:	0038      	movs	r0, r7
    f6fa:	47d0      	blx	sl
    f6fc:	22ff      	movs	r2, #255	; 0xff
    f6fe:	8bbb      	ldrh	r3, [r7, #28]
    f700:	421a      	tst	r2, r3
    f702:	d1df      	bne.n	f6c4 <handleDataMessage+0x3c>
    f704:	4659      	mov	r1, fp
    f706:	0018      	movs	r0, r3
    f708:	8809      	ldrh	r1, [r1, #0]
    f70a:	4390      	bics	r0, r2
    f70c:	4288      	cmp	r0, r1
    f70e:	d0d9      	beq.n	f6c4 <handleDataMessage+0x3c>
    f710:	4a50      	ldr	r2, [pc, #320]	; (f854 <handleDataMessage+0x1cc>)
    f712:	0a1b      	lsrs	r3, r3, #8
    f714:	6812      	ldr	r2, [r2, #0]
    f716:	005b      	lsls	r3, r3, #1
    f718:	6892      	ldr	r2, [r2, #8]
    f71a:	3601      	adds	r6, #1
    f71c:	18d3      	adds	r3, r2, r3
    f71e:	220f      	movs	r2, #15
    f720:	7859      	ldrb	r1, [r3, #1]
    f722:	b2f6      	uxtb	r6, r6
    f724:	400a      	ands	r2, r1
    f726:	2130      	movs	r1, #48	; 0x30
    f728:	430a      	orrs	r2, r1
    f72a:	705a      	strb	r2, [r3, #1]
    f72c:	7a2b      	ldrb	r3, [r5, #8]
    f72e:	42b3      	cmp	r3, r6
    f730:	d8cd      	bhi.n	f6ce <handleDataMessage+0x46>
    f732:	b003      	add	sp, #12
    f734:	bc3c      	pop	{r2, r3, r4, r5}
    f736:	4690      	mov	r8, r2
    f738:	4699      	mov	r9, r3
    f73a:	46a2      	mov	sl, r4
    f73c:	46ab      	mov	fp, r5
    f73e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    f740:	7983      	ldrb	r3, [r0, #6]
    f742:	009d      	lsls	r5, r3, #2
    f744:	18ed      	adds	r5, r5, r3
    f746:	4b43      	ldr	r3, [pc, #268]	; (f854 <handleDataMessage+0x1cc>)
    f748:	00ad      	lsls	r5, r5, #2
    f74a:	469a      	mov	sl, r3
    f74c:	681b      	ldr	r3, [r3, #0]
    f74e:	6858      	ldr	r0, [r3, #4]
    f750:	4b41      	ldr	r3, [pc, #260]	; (f858 <handleDataMessage+0x1d0>)
    f752:	1940      	adds	r0, r0, r5
    f754:	4798      	blx	r3
    f756:	2800      	cmp	r0, #0
    f758:	d044      	beq.n	f7e4 <handleDataMessage+0x15c>
    f75a:	4653      	mov	r3, sl
    f75c:	681b      	ldr	r3, [r3, #0]
    f75e:	685b      	ldr	r3, [r3, #4]
    f760:	195d      	adds	r5, r3, r5
    f762:	68ab      	ldr	r3, [r5, #8]
    f764:	60eb      	str	r3, [r5, #12]
    f766:	4b3d      	ldr	r3, [pc, #244]	; (f85c <handleDataMessage+0x1d4>)
    f768:	7a1d      	ldrb	r5, [r3, #8]
    f76a:	4698      	mov	r8, r3
    f76c:	2d00      	cmp	r5, #0
    f76e:	d0e0      	beq.n	f732 <handleDataMessage+0xaa>
    f770:	21ff      	movs	r1, #255	; 0xff
    f772:	4b37      	ldr	r3, [pc, #220]	; (f850 <handleDataMessage+0x1c8>)
    f774:	469b      	mov	fp, r3
    f776:	881a      	ldrh	r2, [r3, #0]
    f778:	88e3      	ldrh	r3, [r4, #6]
    f77a:	438b      	bics	r3, r1
    f77c:	429a      	cmp	r2, r3
    f77e:	d1d8      	bne.n	f732 <handleDataMessage+0xaa>
    f780:	4b31      	ldr	r3, [pc, #196]	; (f848 <handleDataMessage+0x1c0>)
    f782:	2700      	movs	r7, #0
    f784:	9301      	str	r3, [sp, #4]
    f786:	4b36      	ldr	r3, [pc, #216]	; (f860 <handleDataMessage+0x1d8>)
    f788:	4699      	mov	r9, r3
    f78a:	e00d      	b.n	f7a8 <handleDataMessage+0x120>
    f78c:	4a35      	ldr	r2, [pc, #212]	; (f864 <handleDataMessage+0x1dc>)
    f78e:	4293      	cmp	r3, r2
    f790:	d102      	bne.n	f798 <handleDataMessage+0x110>
    f792:	8982      	ldrh	r2, [r0, #12]
    f794:	428a      	cmp	r2, r1
    f796:	d011      	beq.n	f7bc <handleDataMessage+0x134>
    f798:	0031      	movs	r1, r6
    f79a:	4640      	mov	r0, r8
    f79c:	4b29      	ldr	r3, [pc, #164]	; (f844 <handleDataMessage+0x1bc>)
    f79e:	4798      	blx	r3
    f7a0:	3701      	adds	r7, #1
    f7a2:	b2ff      	uxtb	r7, r7
    f7a4:	42bd      	cmp	r5, r7
    f7a6:	d0c4      	beq.n	f732 <handleDataMessage+0xaa>
    f7a8:	2100      	movs	r1, #0
    f7aa:	4640      	mov	r0, r8
    f7ac:	9b01      	ldr	r3, [sp, #4]
    f7ae:	4798      	blx	r3
    f7b0:	1e06      	subs	r6, r0, #0
    f7b2:	d0be      	beq.n	f732 <handleDataMessage+0xaa>
    f7b4:	88e1      	ldrh	r1, [r4, #6]
    f7b6:	8b83      	ldrh	r3, [r0, #28]
    f7b8:	4299      	cmp	r1, r3
    f7ba:	d1e7      	bne.n	f78c <handleDataMessage+0x104>
    f7bc:	7e72      	ldrb	r2, [r6, #25]
    f7be:	06d2      	lsls	r2, r2, #27
    f7c0:	d503      	bpl.n	f7ca <handleDataMessage+0x142>
    f7c2:	465a      	mov	r2, fp
    f7c4:	8812      	ldrh	r2, [r2, #0]
    f7c6:	4293      	cmp	r3, r2
    f7c8:	d010      	beq.n	f7ec <handleDataMessage+0x164>
    f7ca:	4a27      	ldr	r2, [pc, #156]	; (f868 <handleDataMessage+0x1e0>)
    f7cc:	0030      	movs	r0, r6
    f7ce:	4b27      	ldr	r3, [pc, #156]	; (f86c <handleDataMessage+0x1e4>)
    f7d0:	4798      	blx	r3
    f7d2:	2800      	cmp	r0, #0
    f7d4:	d029      	beq.n	f82a <handleDataMessage+0x1a2>
    f7d6:	2300      	movs	r3, #0
    f7d8:	0031      	movs	r1, r6
    f7da:	7473      	strb	r3, [r6, #17]
    f7dc:	4648      	mov	r0, r9
    f7de:	4b19      	ldr	r3, [pc, #100]	; (f844 <handleDataMessage+0x1bc>)
    f7e0:	4798      	blx	r3
    f7e2:	e7dd      	b.n	f7a0 <handleDataMessage+0x118>
    f7e4:	88e0      	ldrh	r0, [r4, #6]
    f7e6:	4b22      	ldr	r3, [pc, #136]	; (f870 <handleDataMessage+0x1e8>)
    f7e8:	4798      	blx	r3
    f7ea:	e7a2      	b.n	f732 <handleDataMessage+0xaa>
    f7ec:	4651      	mov	r1, sl
    f7ee:	2233      	movs	r2, #51	; 0x33
    f7f0:	6809      	ldr	r1, [r1, #0]
    f7f2:	5c88      	ldrb	r0, [r1, r2]
    f7f4:	0019      	movs	r1, r3
    f7f6:	3001      	adds	r0, #1
    f7f8:	4b1e      	ldr	r3, [pc, #120]	; (f874 <handleDataMessage+0x1ec>)
    f7fa:	b2c0      	uxtb	r0, r0
    f7fc:	4798      	blx	r3
    f7fe:	4652      	mov	r2, sl
    f800:	233e      	movs	r3, #62	; 0x3e
    f802:	6812      	ldr	r2, [r2, #0]
    f804:	7430      	strb	r0, [r6, #16]
    f806:	5cd3      	ldrb	r3, [r2, r3]
    f808:	0030      	movs	r0, r6
    f80a:	3301      	adds	r3, #1
    f80c:	7473      	strb	r3, [r6, #17]
    f80e:	88e1      	ldrh	r1, [r4, #6]
    f810:	4a19      	ldr	r2, [pc, #100]	; (f878 <handleDataMessage+0x1f0>)
    f812:	4b16      	ldr	r3, [pc, #88]	; (f86c <handleDataMessage+0x1e4>)
    f814:	4798      	blx	r3
    f816:	2800      	cmp	r0, #0
    f818:	d102      	bne.n	f820 <handleDataMessage+0x198>
    f81a:	7c73      	ldrb	r3, [r6, #17]
    f81c:	3b01      	subs	r3, #1
    f81e:	7473      	strb	r3, [r6, #17]
    f820:	0031      	movs	r1, r6
    f822:	4807      	ldr	r0, [pc, #28]	; (f840 <handleDataMessage+0x1b8>)
    f824:	4b07      	ldr	r3, [pc, #28]	; (f844 <handleDataMessage+0x1bc>)
    f826:	4798      	blx	r3
    f828:	e7ba      	b.n	f7a0 <handleDataMessage+0x118>
    f82a:	68b3      	ldr	r3, [r6, #8]
    f82c:	2b00      	cmp	r3, #0
    f82e:	d003      	beq.n	f838 <handleDataMessage+0x1b0>
    f830:	7cb0      	ldrb	r0, [r6, #18]
    f832:	0032      	movs	r2, r6
    f834:	2101      	movs	r1, #1
    f836:	4798      	blx	r3
    f838:	0030      	movs	r0, r6
    f83a:	4b04      	ldr	r3, [pc, #16]	; (f84c <handleDataMessage+0x1c4>)
    f83c:	4798      	blx	r3
    f83e:	e778      	b.n	f732 <handleDataMessage+0xaa>
    f840:	2000287c 	.word	0x2000287c
    f844:	0000be65 	.word	0x0000be65
    f848:	0000be9d 	.word	0x0000be9d
    f84c:	0000bd25 	.word	0x0000bd25
    f850:	200028b8 	.word	0x200028b8
    f854:	2000285c 	.word	0x2000285c
    f858:	00011861 	.word	0x00011861
    f85c:	20002850 	.word	0x20002850
    f860:	20002844 	.word	0x20002844
    f864:	0000ffff 	.word	0x0000ffff
    f868:	0000d351 	.word	0x0000d351
    f86c:	0000f2ad 	.word	0x0000f2ad
    f870:	000117d9 	.word	0x000117d9
    f874:	0000dbb9 	.word	0x0000dbb9
    f878:	0000d57d 	.word	0x0000d57d

0000f87c <indirectDataTimerHandler>:
    f87c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    f87e:	46ce      	mov	lr, r9
    f880:	4647      	mov	r7, r8
    f882:	b580      	push	{r7, lr}
    f884:	4e18      	ldr	r6, [pc, #96]	; (f8e8 <indirectDataTimerHandler+0x6c>)
    f886:	7a33      	ldrb	r3, [r6, #8]
    f888:	2b00      	cmp	r3, #0
    f88a:	d029      	beq.n	f8e0 <indirectDataTimerHandler+0x64>
    f88c:	4b17      	ldr	r3, [pc, #92]	; (f8ec <indirectDataTimerHandler+0x70>)
    f88e:	2500      	movs	r5, #0
    f890:	4698      	mov	r8, r3
    f892:	4b17      	ldr	r3, [pc, #92]	; (f8f0 <indirectDataTimerHandler+0x74>)
    f894:	4f17      	ldr	r7, [pc, #92]	; (f8f4 <indirectDataTimerHandler+0x78>)
    f896:	4699      	mov	r9, r3
    f898:	e00d      	b.n	f8b6 <indirectDataTimerHandler+0x3a>
    f89a:	6883      	ldr	r3, [r0, #8]
    f89c:	2b00      	cmp	r3, #0
    f89e:	d003      	beq.n	f8a8 <indirectDataTimerHandler+0x2c>
    f8a0:	7c80      	ldrb	r0, [r0, #18]
    f8a2:	0022      	movs	r2, r4
    f8a4:	2105      	movs	r1, #5
    f8a6:	4798      	blx	r3
    f8a8:	0020      	movs	r0, r4
    f8aa:	47c8      	blx	r9
    f8ac:	3501      	adds	r5, #1
    f8ae:	7a33      	ldrb	r3, [r6, #8]
    f8b0:	b2ed      	uxtb	r5, r5
    f8b2:	42ab      	cmp	r3, r5
    f8b4:	d914      	bls.n	f8e0 <indirectDataTimerHandler+0x64>
    f8b6:	2100      	movs	r1, #0
    f8b8:	0030      	movs	r0, r6
    f8ba:	47b8      	blx	r7
    f8bc:	1e04      	subs	r4, r0, #0
    f8be:	d00f      	beq.n	f8e0 <indirectDataTimerHandler+0x64>
    f8c0:	7c03      	ldrb	r3, [r0, #16]
    f8c2:	2b00      	cmp	r3, #0
    f8c4:	d004      	beq.n	f8d0 <indirectDataTimerHandler+0x54>
    f8c6:	3b01      	subs	r3, #1
    f8c8:	b2db      	uxtb	r3, r3
    f8ca:	7403      	strb	r3, [r0, #16]
    f8cc:	2b00      	cmp	r3, #0
    f8ce:	d0e4      	beq.n	f89a <indirectDataTimerHandler+0x1e>
    f8d0:	0021      	movs	r1, r4
    f8d2:	0030      	movs	r0, r6
    f8d4:	47c0      	blx	r8
    f8d6:	3501      	adds	r5, #1
    f8d8:	7a33      	ldrb	r3, [r6, #8]
    f8da:	b2ed      	uxtb	r5, r5
    f8dc:	42ab      	cmp	r3, r5
    f8de:	d8ea      	bhi.n	f8b6 <indirectDataTimerHandler+0x3a>
    f8e0:	bc0c      	pop	{r2, r3}
    f8e2:	4690      	mov	r8, r2
    f8e4:	4699      	mov	r9, r3
    f8e6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    f8e8:	20002850 	.word	0x20002850
    f8ec:	0000be65 	.word	0x0000be65
    f8f0:	0000bd25 	.word	0x0000bd25
    f8f4:	0000be9d 	.word	0x0000be9d

0000f8f8 <addDuplicateRejectionTableEntry>:
    f8f8:	b5f0      	push	{r4, r5, r6, r7, lr}
    f8fa:	46c6      	mov	lr, r8
    f8fc:	2232      	movs	r2, #50	; 0x32
    f8fe:	b500      	push	{lr}
    f900:	4c1d      	ldr	r4, [pc, #116]	; (f978 <addDuplicateRejectionTableEntry+0x80>)
    f902:	4680      	mov	r8, r0
    f904:	6823      	ldr	r3, [r4, #0]
    f906:	468c      	mov	ip, r1
    f908:	5c9a      	ldrb	r2, [r3, r2]
    f90a:	2a00      	cmp	r2, #0
    f90c:	d014      	beq.n	f938 <addDuplicateRejectionTableEntry+0x40>
    f90e:	6a5e      	ldr	r6, [r3, #36]	; 0x24
    f910:	4f1a      	ldr	r7, [pc, #104]	; (f97c <addDuplicateRejectionTableEntry+0x84>)
    f912:	8833      	ldrh	r3, [r6, #0]
    f914:	42bb      	cmp	r3, r7
    f916:	d013      	beq.n	f940 <addDuplicateRejectionTableEntry+0x48>
    f918:	3a01      	subs	r2, #1
    f91a:	b2d2      	uxtb	r2, r2
    f91c:	3201      	adds	r2, #1
    f91e:	0092      	lsls	r2, r2, #2
    f920:	1d33      	adds	r3, r6, #4
    f922:	18b2      	adds	r2, r6, r2
    f924:	e006      	b.n	f934 <addDuplicateRejectionTableEntry+0x3c>
    f926:	1b99      	subs	r1, r3, r6
    f928:	0018      	movs	r0, r3
    f92a:	3304      	adds	r3, #4
    f92c:	1f1d      	subs	r5, r3, #4
    f92e:	882d      	ldrh	r5, [r5, #0]
    f930:	42bd      	cmp	r5, r7
    f932:	d007      	beq.n	f944 <addDuplicateRejectionTableEntry+0x4c>
    f934:	4293      	cmp	r3, r2
    f936:	d1f6      	bne.n	f926 <addDuplicateRejectionTableEntry+0x2e>
    f938:	2000      	movs	r0, #0
    f93a:	bc04      	pop	{r2}
    f93c:	4690      	mov	r8, r2
    f93e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    f940:	0030      	movs	r0, r6
    f942:	2100      	movs	r1, #0
    f944:	4643      	mov	r3, r8
    f946:	4662      	mov	r2, ip
    f948:	8003      	strh	r3, [r0, #0]
    f94a:	6823      	ldr	r3, [r4, #0]
    f94c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    f94e:	185b      	adds	r3, r3, r1
    f950:	709a      	strb	r2, [r3, #2]
    f952:	6823      	ldr	r3, [r4, #0]
    f954:	6a5a      	ldr	r2, [r3, #36]	; 0x24
    f956:	1855      	adds	r5, r2, r1
    f958:	2233      	movs	r2, #51	; 0x33
    f95a:	5c9b      	ldrb	r3, [r3, r2]
    f95c:	4641      	mov	r1, r8
    f95e:	3301      	adds	r3, #1
    f960:	b2db      	uxtb	r3, r3
    f962:	0018      	movs	r0, r3
    f964:	4b06      	ldr	r3, [pc, #24]	; (f980 <addDuplicateRejectionTableEntry+0x88>)
    f966:	4798      	blx	r3
    f968:	223e      	movs	r2, #62	; 0x3e
    f96a:	6821      	ldr	r1, [r4, #0]
    f96c:	1c83      	adds	r3, r0, #2
    f96e:	5c88      	ldrb	r0, [r1, r2]
    f970:	4358      	muls	r0, r3
    f972:	70e8      	strb	r0, [r5, #3]
    f974:	2001      	movs	r0, #1
    f976:	e7e0      	b.n	f93a <addDuplicateRejectionTableEntry+0x42>
    f978:	2000285c 	.word	0x2000285c
    f97c:	0000ffff 	.word	0x0000ffff
    f980:	0000dbb9 	.word	0x0000dbb9

0000f984 <frameParse>:
    f984:	b5f0      	push	{r4, r5, r6, r7, lr}
    f986:	46de      	mov	lr, fp
    f988:	4657      	mov	r7, sl
    f98a:	464e      	mov	r6, r9
    f98c:	4645      	mov	r5, r8
    f98e:	b5e0      	push	{r5, r6, r7, lr}
    f990:	4bc6      	ldr	r3, [pc, #792]	; (fcac <frameParse+0x328>)
    f992:	8a02      	ldrh	r2, [r0, #16]
    f994:	881b      	ldrh	r3, [r3, #0]
    f996:	b09b      	sub	sp, #108	; 0x6c
    f998:	0004      	movs	r4, r0
    f99a:	4293      	cmp	r3, r2
    f99c:	d006      	beq.n	f9ac <frameParse+0x28>
    f99e:	b01b      	add	sp, #108	; 0x6c
    f9a0:	bc3c      	pop	{r2, r3, r4, r5}
    f9a2:	4690      	mov	r8, r2
    f9a4:	4699      	mov	r9, r3
    f9a6:	46a2      	mov	sl, r4
    f9a8:	46ab      	mov	fp, r5
    f9aa:	bdf0      	pop	{r4, r5, r6, r7, pc}
    f9ac:	6886      	ldr	r6, [r0, #8]
    f9ae:	ad0a      	add	r5, sp, #40	; 0x28
    f9b0:	7832      	ldrb	r2, [r6, #0]
    f9b2:	702a      	strb	r2, [r5, #0]
    f9b4:	7872      	ldrb	r2, [r6, #1]
    f9b6:	706a      	strb	r2, [r5, #1]
    f9b8:	78b2      	ldrb	r2, [r6, #2]
    f9ba:	722a      	strb	r2, [r5, #8]
    f9bc:	7bc2      	ldrb	r2, [r0, #15]
    f9be:	2a00      	cmp	r2, #0
    f9c0:	d000      	beq.n	f9c4 <frameParse+0x40>
    f9c2:	e09c      	b.n	fafe <frameParse+0x17a>
    f9c4:	786a      	ldrb	r2, [r5, #1]
    f9c6:	0691      	lsls	r1, r2, #26
    f9c8:	d500      	bpl.n	f9cc <frameParse+0x48>
    f9ca:	e09e      	b.n	fb0a <frameParse+0x186>
    f9cc:	2308      	movs	r3, #8
    f9ce:	9304      	str	r3, [sp, #16]
    f9d0:	6863      	ldr	r3, [r4, #4]
    f9d2:	7931      	ldrb	r1, [r6, #4]
    f9d4:	4699      	mov	r9, r3
    f9d6:	78f3      	ldrb	r3, [r6, #3]
    f9d8:	0209      	lsls	r1, r1, #8
    f9da:	430b      	orrs	r3, r1
    f9dc:	79b1      	ldrb	r1, [r6, #6]
    f9de:	806b      	strh	r3, [r5, #2]
    f9e0:	7973      	ldrb	r3, [r6, #5]
    f9e2:	0209      	lsls	r1, r1, #8
    f9e4:	430b      	orrs	r3, r1
    f9e6:	7a31      	ldrb	r1, [r6, #8]
    f9e8:	80ab      	strh	r3, [r5, #4]
    f9ea:	79f3      	ldrb	r3, [r6, #7]
    f9ec:	0209      	lsls	r1, r1, #8
    f9ee:	430b      	orrs	r3, r1
    f9f0:	80eb      	strh	r3, [r5, #6]
    f9f2:	2316      	movs	r3, #22
    f9f4:	210a      	movs	r1, #10
    f9f6:	9305      	str	r3, [sp, #20]
    f9f8:	469a      	mov	sl, r3
    f9fa:	469b      	mov	fp, r3
    f9fc:	3b08      	subs	r3, #8
    f9fe:	4698      	mov	r8, r3
    fa00:	3b05      	subs	r3, #5
    fa02:	0752      	lsls	r2, r2, #29
    fa04:	d5cb      	bpl.n	f99e <frameParse+0x1a>
    fa06:	5cf3      	ldrb	r3, [r6, r3]
    fa08:	1871      	adds	r1, r6, r1
    fa0a:	742b      	strb	r3, [r5, #16]
    fa0c:	2204      	movs	r2, #4
    fa0e:	4ba8      	ldr	r3, [pc, #672]	; (fcb0 <frameParse+0x32c>)
    fa10:	a80f      	add	r0, sp, #60	; 0x3c
    fa12:	4798      	blx	r3
    fa14:	4643      	mov	r3, r8
    fa16:	2208      	movs	r2, #8
    fa18:	18f1      	adds	r1, r6, r3
    fa1a:	a810      	add	r0, sp, #64	; 0x40
    fa1c:	4ba4      	ldr	r3, [pc, #656]	; (fcb0 <frameParse+0x32c>)
    fa1e:	4798      	blx	r3
    fa20:	465b      	mov	r3, fp
    fa22:	7b20      	ldrb	r0, [r4, #12]
    fa24:	1ac0      	subs	r0, r0, r3
    fa26:	b2c3      	uxtb	r3, r0
    fa28:	4698      	mov	r8, r3
    fa2a:	9804      	ldr	r0, [sp, #16]
    fa2c:	4ba1      	ldr	r3, [pc, #644]	; (fcb4 <frameParse+0x330>)
    fa2e:	4798      	blx	r3
    fa30:	9001      	str	r0, [sp, #4]
    fa32:	68a3      	ldr	r3, [r4, #8]
    fa34:	465a      	mov	r2, fp
    fa36:	9300      	str	r3, [sp, #0]
    fa38:	a910      	add	r1, sp, #64	; 0x40
    fa3a:	4643      	mov	r3, r8
    fa3c:	0028      	movs	r0, r5
    fa3e:	4f9e      	ldr	r7, [pc, #632]	; (fcb8 <frameParse+0x334>)
    fa40:	47b8      	blx	r7
    fa42:	28ff      	cmp	r0, #255	; 0xff
    fa44:	d0ab      	beq.n	f99e <frameParse+0x1a>
    fa46:	0033      	movs	r3, r6
    fa48:	4453      	add	r3, sl
    fa4a:	9306      	str	r3, [sp, #24]
    fa4c:	4643      	mov	r3, r8
    fa4e:	1a18      	subs	r0, r3, r0
    fa50:	b2c3      	uxtb	r3, r0
    fa52:	9307      	str	r3, [sp, #28]
    fa54:	88a8      	ldrh	r0, [r5, #4]
    fa56:	4b99      	ldr	r3, [pc, #612]	; (fcbc <frameParse+0x338>)
    fa58:	4298      	cmp	r0, r3
    fa5a:	d900      	bls.n	fa5e <frameParse+0xda>
    fa5c:	e079      	b.n	fb52 <frameParse+0x1ce>
    fa5e:	4b98      	ldr	r3, [pc, #608]	; (fcc0 <frameParse+0x33c>)
    fa60:	881a      	ldrh	r2, [r3, #0]
    fa62:	4290      	cmp	r0, r2
    fa64:	d100      	bne.n	fa68 <frameParse+0xe4>
    fa66:	e153      	b.n	fd10 <frameParse+0x38c>
    fa68:	21ff      	movs	r1, #255	; 0xff
    fa6a:	0004      	movs	r4, r0
    fa6c:	881a      	ldrh	r2, [r3, #0]
    fa6e:	438c      	bics	r4, r1
    fa70:	4294      	cmp	r4, r2
    fa72:	d100      	bne.n	fa76 <frameParse+0xf2>
    fa74:	e14f      	b.n	fd16 <frameParse+0x392>
    fa76:	881a      	ldrh	r2, [r3, #0]
    fa78:	4290      	cmp	r0, r2
    fa7a:	d100      	bne.n	fa7e <frameParse+0xfa>
    fa7c:	e78f      	b.n	f99e <frameParse+0x1a>
    fa7e:	782a      	ldrb	r2, [r5, #0]
    fa80:	2a00      	cmp	r2, #0
    fa82:	d100      	bne.n	fa86 <frameParse+0x102>
    fa84:	e78b      	b.n	f99e <frameParse+0x1a>
    fa86:	498f      	ldr	r1, [pc, #572]	; (fcc4 <frameParse+0x340>)
    fa88:	7809      	ldrb	r1, [r1, #0]
    fa8a:	2906      	cmp	r1, #6
    fa8c:	d000      	beq.n	fa90 <frameParse+0x10c>
    fa8e:	e786      	b.n	f99e <frameParse+0x1a>
    fa90:	881b      	ldrh	r3, [r3, #0]
    fa92:	88e9      	ldrh	r1, [r5, #6]
    fa94:	4299      	cmp	r1, r3
    fa96:	d100      	bne.n	fa9a <frameParse+0x116>
    fa98:	e781      	b.n	f99e <frameParse+0x1a>
    fa9a:	3a01      	subs	r2, #1
    fa9c:	4b8a      	ldr	r3, [pc, #552]	; (fcc8 <frameParse+0x344>)
    fa9e:	702a      	strb	r2, [r5, #0]
    faa0:	4798      	blx	r3
    faa2:	4b8a      	ldr	r3, [pc, #552]	; (fccc <frameParse+0x348>)
    faa4:	ac12      	add	r4, sp, #72	; 0x48
    faa6:	8020      	strh	r0, [r4, #0]
    faa8:	4298      	cmp	r0, r3
    faaa:	d100      	bne.n	faae <frameParse+0x12a>
    faac:	e35c      	b.n	10168 <frameParse+0x7e4>
    faae:	2088      	movs	r0, #136	; 0x88
    fab0:	4b87      	ldr	r3, [pc, #540]	; (fcd0 <frameParse+0x34c>)
    fab2:	4798      	blx	r3
    fab4:	1e06      	subs	r6, r0, #0
    fab6:	d100      	bne.n	faba <frameParse+0x136>
    fab8:	e771      	b.n	f99e <frameParse+0x1a>
    faba:	0001      	movs	r1, r0
    fabc:	4b85      	ldr	r3, [pc, #532]	; (fcd4 <frameParse+0x350>)
    fabe:	0028      	movs	r0, r5
    fac0:	4798      	blx	r3
    fac2:	7a2b      	ldrb	r3, [r5, #8]
    fac4:	0007      	movs	r7, r0
    fac6:	70b3      	strb	r3, [r6, #2]
    fac8:	9b07      	ldr	r3, [sp, #28]
    faca:	9906      	ldr	r1, [sp, #24]
    facc:	001a      	movs	r2, r3
    face:	4698      	mov	r8, r3
    fad0:	1830      	adds	r0, r6, r0
    fad2:	4b77      	ldr	r3, [pc, #476]	; (fcb0 <frameParse+0x32c>)
    fad4:	4798      	blx	r3
    fad6:	4b80      	ldr	r3, [pc, #512]	; (fcd8 <frameParse+0x354>)
    fad8:	9401      	str	r4, [sp, #4]
    fada:	9303      	str	r3, [sp, #12]
    fadc:	2300      	movs	r3, #0
    fade:	9302      	str	r3, [sp, #8]
    fae0:	3302      	adds	r3, #2
    fae2:	9300      	str	r3, [sp, #0]
    fae4:	4642      	mov	r2, r8
    fae6:	0033      	movs	r3, r6
    fae8:	0039      	movs	r1, r7
    faea:	0028      	movs	r0, r5
    faec:	4c7b      	ldr	r4, [pc, #492]	; (fcdc <frameParse+0x358>)
    faee:	47a0      	blx	r4
    faf0:	2800      	cmp	r0, #0
    faf2:	d000      	beq.n	faf6 <frameParse+0x172>
    faf4:	e753      	b.n	f99e <frameParse+0x1a>
    faf6:	0030      	movs	r0, r6
    faf8:	4b79      	ldr	r3, [pc, #484]	; (fce0 <frameParse+0x35c>)
    fafa:	4798      	blx	r3
    fafc:	e74f      	b.n	f99e <frameParse+0x1a>
    fafe:	786a      	ldrb	r2, [r5, #1]
    fb00:	0691      	lsls	r1, r2, #26
    fb02:	d417      	bmi.n	fb34 <frameParse+0x1b0>
    fb04:	2302      	movs	r3, #2
    fb06:	9304      	str	r3, [sp, #16]
    fb08:	e762      	b.n	f9d0 <frameParse+0x4c>
    fb0a:	6862      	ldr	r2, [r4, #4]
    fb0c:	806b      	strh	r3, [r5, #2]
    fb0e:	2308      	movs	r3, #8
    fb10:	4691      	mov	r9, r2
    fb12:	9304      	str	r3, [sp, #16]
    fb14:	7823      	ldrb	r3, [r4, #0]
    fb16:	075b      	lsls	r3, r3, #29
    fb18:	d518      	bpl.n	fb4c <frameParse+0x1c8>
    fb1a:	2301      	movs	r3, #1
    fb1c:	425b      	negs	r3, r3
    fb1e:	80ab      	strh	r3, [r5, #4]
    fb20:	2310      	movs	r3, #16
    fb22:	9305      	str	r3, [sp, #20]
    fb24:	469a      	mov	sl, r3
    fb26:	469b      	mov	fp, r3
    fb28:	3b08      	subs	r3, #8
    fb2a:	4698      	mov	r8, r3
    fb2c:	786a      	ldrb	r2, [r5, #1]
    fb2e:	2104      	movs	r1, #4
    fb30:	3b05      	subs	r3, #5
    fb32:	e766      	b.n	fa02 <frameParse+0x7e>
    fb34:	6862      	ldr	r2, [r4, #4]
    fb36:	806b      	strh	r3, [r5, #2]
    fb38:	0013      	movs	r3, r2
    fb3a:	4691      	mov	r9, r2
    fb3c:	7852      	ldrb	r2, [r2, #1]
    fb3e:	781b      	ldrb	r3, [r3, #0]
    fb40:	0212      	lsls	r2, r2, #8
    fb42:	4313      	orrs	r3, r2
    fb44:	80eb      	strh	r3, [r5, #6]
    fb46:	2302      	movs	r3, #2
    fb48:	9304      	str	r3, [sp, #16]
    fb4a:	e7e3      	b.n	fb14 <frameParse+0x190>
    fb4c:	4b5c      	ldr	r3, [pc, #368]	; (fcc0 <frameParse+0x33c>)
    fb4e:	881b      	ldrh	r3, [r3, #0]
    fb50:	e7e5      	b.n	fb1e <frameParse+0x19a>
    fb52:	7a2b      	ldrb	r3, [r5, #8]
    fb54:	88ee      	ldrh	r6, [r5, #6]
    fb56:	4698      	mov	r8, r3
    fb58:	4b62      	ldr	r3, [pc, #392]	; (fce4 <frameParse+0x360>)
    fb5a:	469a      	mov	sl, r3
    fb5c:	681b      	ldr	r3, [r3, #0]
    fb5e:	7fda      	ldrb	r2, [r3, #31]
    fb60:	469c      	mov	ip, r3
    fb62:	2a00      	cmp	r2, #0
    fb64:	d014      	beq.n	fb90 <frameParse+0x20c>
    fb66:	3a01      	subs	r2, #1
    fb68:	b2d1      	uxtb	r1, r2
    fb6a:	4642      	mov	r2, r8
    fb6c:	691b      	ldr	r3, [r3, #16]
    fb6e:	3101      	adds	r1, #1
    fb70:	0089      	lsls	r1, r1, #2
    fb72:	4680      	mov	r8, r0
    fb74:	1859      	adds	r1, r3, r1
    fb76:	0010      	movs	r0, r2
    fb78:	e002      	b.n	fb80 <frameParse+0x1fc>
    fb7a:	3304      	adds	r3, #4
    fb7c:	4299      	cmp	r1, r3
    fb7e:	d006      	beq.n	fb8e <frameParse+0x20a>
    fb80:	881a      	ldrh	r2, [r3, #0]
    fb82:	42b2      	cmp	r2, r6
    fb84:	d1f9      	bne.n	fb7a <frameParse+0x1f6>
    fb86:	789a      	ldrb	r2, [r3, #2]
    fb88:	4282      	cmp	r2, r0
    fb8a:	d1f6      	bne.n	fb7a <frameParse+0x1f6>
    fb8c:	e707      	b.n	f99e <frameParse+0x1a>
    fb8e:	4640      	mov	r0, r8
    fb90:	4b4e      	ldr	r3, [pc, #312]	; (fccc <frameParse+0x348>)
    fb92:	4298      	cmp	r0, r3
    fb94:	d100      	bne.n	fb98 <frameParse+0x214>
    fb96:	e14a      	b.n	fe2e <frameParse+0x4aa>
    fb98:	2301      	movs	r3, #1
    fb9a:	4698      	mov	r8, r3
    fb9c:	2310      	movs	r3, #16
    fb9e:	7869      	ldrb	r1, [r5, #1]
    fba0:	420b      	tst	r3, r1
    fba2:	d005      	beq.n	fbb0 <frameParse+0x22c>
    fba4:	4a46      	ldr	r2, [pc, #280]	; (fcc0 <frameParse+0x33c>)
    fba6:	88a8      	ldrh	r0, [r5, #4]
    fba8:	8816      	ldrh	r6, [r2, #0]
    fbaa:	42b0      	cmp	r0, r6
    fbac:	d100      	bne.n	fbb0 <frameParse+0x22c>
    fbae:	e18f      	b.n	fed0 <frameParse+0x54c>
    fbb0:	2603      	movs	r6, #3
    fbb2:	400e      	ands	r6, r1
    fbb4:	2e01      	cmp	r6, #1
    fbb6:	d100      	bne.n	fbba <frameParse+0x236>
    fbb8:	e0ed      	b.n	fd96 <frameParse+0x412>
    fbba:	07cb      	lsls	r3, r1, #31
    fbbc:	d405      	bmi.n	fbca <frameParse+0x246>
    fbbe:	4b41      	ldr	r3, [pc, #260]	; (fcc4 <frameParse+0x340>)
    fbc0:	781b      	ldrb	r3, [r3, #0]
    fbc2:	3b06      	subs	r3, #6
    fbc4:	2b01      	cmp	r3, #1
    fbc6:	d800      	bhi.n	fbca <frameParse+0x246>
    fbc8:	e105      	b.n	fdd6 <frameParse+0x452>
    fbca:	4643      	mov	r3, r8
    fbcc:	2b00      	cmp	r3, #0
    fbce:	d100      	bne.n	fbd2 <frameParse+0x24e>
    fbd0:	e6e5      	b.n	f99e <frameParse+0x1a>
    fbd2:	782b      	ldrb	r3, [r5, #0]
    fbd4:	2b00      	cmp	r3, #0
    fbd6:	d100      	bne.n	fbda <frameParse+0x256>
    fbd8:	e6e1      	b.n	f99e <frameParse+0x1a>
    fbda:	4b3a      	ldr	r3, [pc, #232]	; (fcc4 <frameParse+0x340>)
    fbdc:	781b      	ldrb	r3, [r3, #0]
    fbde:	2b06      	cmp	r3, #6
    fbe0:	d000      	beq.n	fbe4 <frameParse+0x260>
    fbe2:	e6dc      	b.n	f99e <frameParse+0x1a>
    fbe4:	ab12      	add	r3, sp, #72	; 0x48
    fbe6:	001a      	movs	r2, r3
    fbe8:	9308      	str	r3, [sp, #32]
    fbea:	2301      	movs	r3, #1
    fbec:	425b      	negs	r3, r3
    fbee:	8013      	strh	r3, [r2, #0]
    fbf0:	2088      	movs	r0, #136	; 0x88
    fbf2:	4b37      	ldr	r3, [pc, #220]	; (fcd0 <frameParse+0x34c>)
    fbf4:	4798      	blx	r3
    fbf6:	4680      	mov	r8, r0
    fbf8:	2800      	cmp	r0, #0
    fbfa:	d100      	bne.n	fbfe <frameParse+0x27a>
    fbfc:	e6cf      	b.n	f99e <frameParse+0x1a>
    fbfe:	782b      	ldrb	r3, [r5, #0]
    fc00:	3b01      	subs	r3, #1
    fc02:	b2db      	uxtb	r3, r3
    fc04:	702b      	strb	r3, [r5, #0]
    fc06:	7003      	strb	r3, [r0, #0]
    fc08:	786b      	ldrb	r3, [r5, #1]
    fc0a:	7043      	strb	r3, [r0, #1]
    fc0c:	7a2b      	ldrb	r3, [r5, #8]
    fc0e:	7083      	strb	r3, [r0, #2]
    fc10:	786b      	ldrb	r3, [r5, #1]
    fc12:	069a      	lsls	r2, r3, #26
    fc14:	d500      	bpl.n	fc18 <frameParse+0x294>
    fc16:	e1f3      	b.n	10000 <frameParse+0x67c>
    fc18:	886a      	ldrh	r2, [r5, #2]
    fc1a:	2716      	movs	r7, #22
    fc1c:	70c2      	strb	r2, [r0, #3]
    fc1e:	886a      	ldrh	r2, [r5, #2]
    fc20:	260e      	movs	r6, #14
    fc22:	0a12      	lsrs	r2, r2, #8
    fc24:	7102      	strb	r2, [r0, #4]
    fc26:	88aa      	ldrh	r2, [r5, #4]
    fc28:	7142      	strb	r2, [r0, #5]
    fc2a:	88aa      	ldrh	r2, [r5, #4]
    fc2c:	0a12      	lsrs	r2, r2, #8
    fc2e:	7182      	strb	r2, [r0, #6]
    fc30:	88ea      	ldrh	r2, [r5, #6]
    fc32:	71c2      	strb	r2, [r0, #7]
    fc34:	88ea      	ldrh	r2, [r5, #6]
    fc36:	0a12      	lsrs	r2, r2, #8
    fc38:	7202      	strb	r2, [r0, #8]
    fc3a:	2216      	movs	r2, #22
    fc3c:	4692      	mov	sl, r2
    fc3e:	3a0d      	subs	r2, #13
    fc40:	200a      	movs	r0, #10
    fc42:	4691      	mov	r9, r2
    fc44:	9204      	str	r2, [sp, #16]
    fc46:	075b      	lsls	r3, r3, #29
    fc48:	d518      	bpl.n	fc7c <frameParse+0x2f8>
    fc4a:	4b27      	ldr	r3, [pc, #156]	; (fce8 <frameParse+0x364>)
    fc4c:	4649      	mov	r1, r9
    fc4e:	681a      	ldr	r2, [r3, #0]
    fc50:	2320      	movs	r3, #32
    fc52:	5cd3      	ldrb	r3, [r2, r3]
    fc54:	4a25      	ldr	r2, [pc, #148]	; (fcec <frameParse+0x368>)
    fc56:	742b      	strb	r3, [r5, #16]
    fc58:	6812      	ldr	r2, [r2, #0]
    fc5a:	4440      	add	r0, r8
    fc5c:	616a      	str	r2, [r5, #20]
    fc5e:	4642      	mov	r2, r8
    fc60:	5453      	strb	r3, [r2, r1]
    fc62:	2204      	movs	r2, #4
    fc64:	a90f      	add	r1, sp, #60	; 0x3c
    fc66:	4b12      	ldr	r3, [pc, #72]	; (fcb0 <frameParse+0x32c>)
    fc68:	4798      	blx	r3
    fc6a:	0030      	movs	r0, r6
    fc6c:	4b10      	ldr	r3, [pc, #64]	; (fcb0 <frameParse+0x32c>)
    fc6e:	4440      	add	r0, r8
    fc70:	2208      	movs	r2, #8
    fc72:	491f      	ldr	r1, [pc, #124]	; (fcf0 <frameParse+0x36c>)
    fc74:	4798      	blx	r3
    fc76:	4653      	mov	r3, sl
    fc78:	46b9      	mov	r9, r7
    fc7a:	9304      	str	r3, [sp, #16]
    fc7c:	4642      	mov	r2, r8
    fc7e:	7a2b      	ldrb	r3, [r5, #8]
    fc80:	7093      	strb	r3, [r2, #2]
    fc82:	4b18      	ldr	r3, [pc, #96]	; (fce4 <frameParse+0x360>)
    fc84:	469a      	mov	sl, r3
    fc86:	681b      	ldr	r3, [r3, #0]
    fc88:	7fda      	ldrb	r2, [r3, #31]
    fc8a:	2a00      	cmp	r2, #0
    fc8c:	d03c      	beq.n	fd08 <frameParse+0x384>
    fc8e:	6918      	ldr	r0, [r3, #16]
    fc90:	4e0e      	ldr	r6, [pc, #56]	; (fccc <frameParse+0x348>)
    fc92:	8803      	ldrh	r3, [r0, #0]
    fc94:	42b3      	cmp	r3, r6
    fc96:	d100      	bne.n	fc9a <frameParse+0x316>
    fc98:	e2b3      	b.n	10202 <frameParse+0x87e>
    fc9a:	3a01      	subs	r2, #1
    fc9c:	b2d1      	uxtb	r1, r2
    fc9e:	3101      	adds	r1, #1
    fca0:	0089      	lsls	r1, r1, #2
    fca2:	1d03      	adds	r3, r0, #4
    fca4:	1841      	adds	r1, r0, r1
    fca6:	46a4      	mov	ip, r4
    fca8:	e02c      	b.n	fd04 <frameParse+0x380>
    fcaa:	46c0      	nop			; (mov r8, r8)
    fcac:	200028a8 	.word	0x200028a8
    fcb0:	00014d37 	.word	0x00014d37
    fcb4:	000122c5 	.word	0x000122c5
    fcb8:	00012409 	.word	0x00012409
    fcbc:	0000fffc 	.word	0x0000fffc
    fcc0:	200028b8 	.word	0x200028b8
    fcc4:	20001ce1 	.word	0x20001ce1
    fcc8:	00011fc1 	.word	0x00011fc1
    fccc:	0000ffff 	.word	0x0000ffff
    fcd0:	0000bc69 	.word	0x0000bc69
    fcd4:	0000f0d1 	.word	0x0000f0d1
    fcd8:	0000f05d 	.word	0x0000f05d
    fcdc:	0000f15d 	.word	0x0000f15d
    fce0:	0000bd25 	.word	0x0000bd25
    fce4:	2000285c 	.word	0x2000285c
    fce8:	20002860 	.word	0x20002860
    fcec:	20002914 	.word	0x20002914
    fcf0:	20000094 	.word	0x20000094
    fcf4:	1a1c      	subs	r4, r3, r0
    fcf6:	001f      	movs	r7, r3
    fcf8:	3304      	adds	r3, #4
    fcfa:	1f1a      	subs	r2, r3, #4
    fcfc:	8812      	ldrh	r2, [r2, #0]
    fcfe:	42b2      	cmp	r2, r6
    fd00:	d100      	bne.n	fd04 <frameParse+0x380>
    fd02:	e1b1      	b.n	10068 <frameParse+0x6e4>
    fd04:	4299      	cmp	r1, r3
    fd06:	d1f5      	bne.n	fcf4 <frameParse+0x370>
    fd08:	4640      	mov	r0, r8
    fd0a:	4bc2      	ldr	r3, [pc, #776]	; (10014 <frameParse+0x690>)
    fd0c:	4798      	blx	r3
    fd0e:	e646      	b.n	f99e <frameParse+0x1a>
    fd10:	2300      	movs	r3, #0
    fd12:	4698      	mov	r8, r3
    fd14:	e742      	b.n	fb9c <frameParse+0x218>
    fd16:	4ac0      	ldr	r2, [pc, #768]	; (10018 <frameParse+0x694>)
    fd18:	7812      	ldrb	r2, [r2, #0]
    fd1a:	2a06      	cmp	r2, #6
    fd1c:	d000      	beq.n	fd20 <frameParse+0x39c>
    fd1e:	e6aa      	b.n	fa76 <frameParse+0xf2>
    fd20:	2680      	movs	r6, #128	; 0x80
    fd22:	4006      	ands	r6, r0
    fd24:	d100      	bne.n	fd28 <frameParse+0x3a4>
    fd26:	e1fb      	b.n	10120 <frameParse+0x79c>
    fd28:	2088      	movs	r0, #136	; 0x88
    fd2a:	4bbc      	ldr	r3, [pc, #752]	; (1001c <frameParse+0x698>)
    fd2c:	4798      	blx	r3
    fd2e:	1e06      	subs	r6, r0, #0
    fd30:	d100      	bne.n	fd34 <frameParse+0x3b0>
    fd32:	e634      	b.n	f99e <frameParse+0x1a>
    fd34:	782b      	ldrb	r3, [r5, #0]
    fd36:	88ea      	ldrh	r2, [r5, #6]
    fd38:	88a9      	ldrh	r1, [r5, #4]
    fd3a:	2bff      	cmp	r3, #255	; 0xff
    fd3c:	d100      	bne.n	fd40 <frameParse+0x3bc>
    fd3e:	e235      	b.n	101ac <frameParse+0x828>
    fd40:	ac12      	add	r4, sp, #72	; 0x48
    fd42:	7023      	strb	r3, [r4, #0]
    fd44:	4bb6      	ldr	r3, [pc, #728]	; (10020 <frameParse+0x69c>)
    fd46:	80e2      	strh	r2, [r4, #6]
    fd48:	881b      	ldrh	r3, [r3, #0]
    fd4a:	4ab6      	ldr	r2, [pc, #728]	; (10024 <frameParse+0x6a0>)
    fd4c:	8063      	strh	r3, [r4, #2]
    fd4e:	7813      	ldrb	r3, [r2, #0]
    fd50:	80a1      	strh	r1, [r4, #4]
    fd52:	3301      	adds	r3, #1
    fd54:	b2db      	uxtb	r3, r3
    fd56:	7013      	strb	r3, [r2, #0]
    fd58:	7223      	strb	r3, [r4, #8]
    fd5a:	786b      	ldrb	r3, [r5, #1]
    fd5c:	0031      	movs	r1, r6
    fd5e:	7063      	strb	r3, [r4, #1]
    fd60:	0020      	movs	r0, r4
    fd62:	4bb1      	ldr	r3, [pc, #708]	; (10028 <frameParse+0x6a4>)
    fd64:	4798      	blx	r3
    fd66:	7a2b      	ldrb	r3, [r5, #8]
    fd68:	9d07      	ldr	r5, [sp, #28]
    fd6a:	0007      	movs	r7, r0
    fd6c:	70b3      	strb	r3, [r6, #2]
    fd6e:	002a      	movs	r2, r5
    fd70:	9906      	ldr	r1, [sp, #24]
    fd72:	1830      	adds	r0, r6, r0
    fd74:	4bad      	ldr	r3, [pc, #692]	; (1002c <frameParse+0x6a8>)
    fd76:	4798      	blx	r3
    fd78:	4bad      	ldr	r3, [pc, #692]	; (10030 <frameParse+0x6ac>)
    fd7a:	002a      	movs	r2, r5
    fd7c:	9303      	str	r3, [sp, #12]
    fd7e:	2300      	movs	r3, #0
    fd80:	9302      	str	r3, [sp, #8]
    fd82:	ab0b      	add	r3, sp, #44	; 0x2c
    fd84:	9301      	str	r3, [sp, #4]
    fd86:	2302      	movs	r3, #2
    fd88:	0039      	movs	r1, r7
    fd8a:	9300      	str	r3, [sp, #0]
    fd8c:	0020      	movs	r0, r4
    fd8e:	0033      	movs	r3, r6
    fd90:	4ca8      	ldr	r4, [pc, #672]	; (10034 <frameParse+0x6b0>)
    fd92:	47a0      	blx	r4
    fd94:	e603      	b.n	f99e <frameParse+0x1a>
    fd96:	9b06      	ldr	r3, [sp, #24]
    fd98:	781a      	ldrb	r2, [r3, #0]
    fd9a:	230f      	movs	r3, #15
    fd9c:	0010      	movs	r0, r2
    fd9e:	4398      	bics	r0, r3
    fda0:	2820      	cmp	r0, #32
    fda2:	d100      	bne.n	fda6 <frameParse+0x422>
    fda4:	e1a6      	b.n	100f4 <frameParse+0x770>
    fda6:	d900      	bls.n	fdaa <frameParse+0x426>
    fda8:	e0f7      	b.n	ff9a <frameParse+0x616>
    fdaa:	2800      	cmp	r0, #0
    fdac:	d100      	bne.n	fdb0 <frameParse+0x42c>
    fdae:	e198      	b.n	100e2 <frameParse+0x75e>
    fdb0:	2810      	cmp	r0, #16
    fdb2:	d000      	beq.n	fdb6 <frameParse+0x432>
    fdb4:	e701      	b.n	fbba <frameParse+0x236>
    fdb6:	4b98      	ldr	r3, [pc, #608]	; (10018 <frameParse+0x694>)
    fdb8:	781b      	ldrb	r3, [r3, #0]
    fdba:	2b06      	cmp	r3, #6
    fdbc:	d000      	beq.n	fdc0 <frameParse+0x43c>
    fdbe:	e704      	b.n	fbca <frameParse+0x246>
    fdc0:	7ba3      	ldrb	r3, [r4, #14]
    fdc2:	9904      	ldr	r1, [sp, #16]
    fdc4:	9300      	str	r3, [sp, #0]
    fdc6:	464a      	mov	r2, r9
    fdc8:	9b06      	ldr	r3, [sp, #24]
    fdca:	0028      	movs	r0, r5
    fdcc:	4e9a      	ldr	r6, [pc, #616]	; (10038 <frameParse+0x6b4>)
    fdce:	47b0      	blx	r6
    fdd0:	7869      	ldrb	r1, [r5, #1]
    fdd2:	4680      	mov	r8, r0
    fdd4:	e6f1      	b.n	fbba <frameParse+0x236>
    fdd6:	88aa      	ldrh	r2, [r5, #4]
    fdd8:	4b98      	ldr	r3, [pc, #608]	; (1003c <frameParse+0x6b8>)
    fdda:	429a      	cmp	r2, r3
    fddc:	d800      	bhi.n	fde0 <frameParse+0x45c>
    fdde:	e0f6      	b.n	ffce <frameParse+0x64a>
    fde0:	20ff      	movs	r0, #255	; 0xff
    fde2:	4b97      	ldr	r3, [pc, #604]	; (10040 <frameParse+0x6bc>)
    fde4:	8819      	ldrh	r1, [r3, #0]
    fde6:	4208      	tst	r0, r1
    fde8:	d100      	bne.n	fdec <frameParse+0x468>
    fdea:	e171      	b.n	100d0 <frameParse+0x74c>
    fdec:	8819      	ldrh	r1, [r3, #0]
    fdee:	0609      	lsls	r1, r1, #24
    fdf0:	d500      	bpl.n	fdf4 <frameParse+0x470>
    fdf2:	e16d      	b.n	100d0 <frameParse+0x74c>
    fdf4:	4993      	ldr	r1, [pc, #588]	; (10044 <frameParse+0x6c0>)
    fdf6:	428a      	cmp	r2, r1
    fdf8:	d000      	beq.n	fdfc <frameParse+0x478>
    fdfa:	e6e6      	b.n	fbca <frameParse+0x246>
    fdfc:	881b      	ldrh	r3, [r3, #0]
    fdfe:	88eb      	ldrh	r3, [r5, #6]
    fe00:	a812      	add	r0, sp, #72	; 0x48
    fe02:	8003      	strh	r3, [r0, #0]
    fe04:	466b      	mov	r3, sp
    fe06:	7f1b      	ldrb	r3, [r3, #28]
    fe08:	786a      	ldrb	r2, [r5, #1]
    fe0a:	7203      	strb	r3, [r0, #8]
    fe0c:	9b06      	ldr	r3, [sp, #24]
    fe0e:	6043      	str	r3, [r0, #4]
    fe10:	7ba3      	ldrb	r3, [r4, #14]
    fe12:	7283      	strb	r3, [r0, #10]
    fe14:	7b63      	ldrb	r3, [r4, #13]
    fe16:	7243      	strb	r3, [r0, #9]
    fe18:	2303      	movs	r3, #3
    fe1a:	4013      	ands	r3, r2
    fe1c:	d000      	beq.n	fe20 <frameParse+0x49c>
    fe1e:	e175      	b.n	1010c <frameParse+0x788>
    fe20:	4b89      	ldr	r3, [pc, #548]	; (10048 <frameParse+0x6c4>)
    fe22:	681b      	ldr	r3, [r3, #0]
    fe24:	2b00      	cmp	r3, #0
    fe26:	d100      	bne.n	fe2a <frameParse+0x4a6>
    fe28:	e6cf      	b.n	fbca <frameParse+0x246>
    fe2a:	4798      	blx	r3
    fe2c:	e6cd      	b.n	fbca <frameParse+0x246>
    fe2e:	782b      	ldrb	r3, [r5, #0]
    fe30:	2b01      	cmp	r3, #1
    fe32:	dc00      	bgt.n	fe36 <frameParse+0x4b2>
    fe34:	e6b0      	b.n	fb98 <frameParse+0x214>
    fe36:	4663      	mov	r3, ip
    fe38:	7edb      	ldrb	r3, [r3, #27]
    fe3a:	2b01      	cmp	r3, #1
    fe3c:	d800      	bhi.n	fe40 <frameParse+0x4bc>
    fe3e:	e6ab      	b.n	fb98 <frameParse+0x214>
    fe40:	4652      	mov	r2, sl
    fe42:	2601      	movs	r6, #1
    fe44:	46a2      	mov	sl, r4
    fe46:	464f      	mov	r7, r9
    fe48:	4663      	mov	r3, ip
    fe4a:	0014      	movs	r4, r2
    fe4c:	e006      	b.n	fe5c <frameParse+0x4d8>
    fe4e:	6823      	ldr	r3, [r4, #0]
    fe50:	3601      	adds	r6, #1
    fe52:	7eda      	ldrb	r2, [r3, #27]
    fe54:	b2f6      	uxtb	r6, r6
    fe56:	42b2      	cmp	r2, r6
    fe58:	d800      	bhi.n	fe5c <frameParse+0x4d8>
    fe5a:	e0b5      	b.n	ffc8 <frameParse+0x644>
    fe5c:	00b0      	lsls	r0, r6, #2
    fe5e:	685b      	ldr	r3, [r3, #4]
    fe60:	1980      	adds	r0, r0, r6
    fe62:	0080      	lsls	r0, r0, #2
    fe64:	1818      	adds	r0, r3, r0
    fe66:	4b79      	ldr	r3, [pc, #484]	; (1004c <frameParse+0x6c8>)
    fe68:	4798      	blx	r3
    fe6a:	2800      	cmp	r0, #0
    fe6c:	d0ef      	beq.n	fe4e <frameParse+0x4ca>
    fe6e:	4b78      	ldr	r3, [pc, #480]	; (10050 <frameParse+0x6cc>)
    fe70:	4798      	blx	r3
    fe72:	2832      	cmp	r0, #50	; 0x32
    fe74:	d9eb      	bls.n	fe4e <frameParse+0x4ca>
    fe76:	20a0      	movs	r0, #160	; 0xa0
    fe78:	4b68      	ldr	r3, [pc, #416]	; (1001c <frameParse+0x698>)
    fe7a:	4798      	blx	r3
    fe7c:	4680      	mov	r8, r0
    fe7e:	2800      	cmp	r0, #0
    fe80:	d100      	bne.n	fe84 <frameParse+0x500>
    fe82:	e58c      	b.n	f99e <frameParse+0x1a>
    fe84:	0029      	movs	r1, r5
    fe86:	2220      	movs	r2, #32
    fe88:	4b68      	ldr	r3, [pc, #416]	; (1002c <frameParse+0x6a8>)
    fe8a:	3018      	adds	r0, #24
    fe8c:	4798      	blx	r3
    fe8e:	4641      	mov	r1, r8
    fe90:	2338      	movs	r3, #56	; 0x38
    fe92:	9a07      	ldr	r2, [sp, #28]
    fe94:	4640      	mov	r0, r8
    fe96:	54ca      	strb	r2, [r1, r3]
    fe98:	2300      	movs	r3, #0
    fe9a:	4699      	mov	r9, r3
    fe9c:	4643      	mov	r3, r8
    fe9e:	4649      	mov	r1, r9
    fea0:	3039      	adds	r0, #57	; 0x39
    fea2:	6099      	str	r1, [r3, #8]
    fea4:	9906      	ldr	r1, [sp, #24]
    fea6:	4b61      	ldr	r3, [pc, #388]	; (1002c <frameParse+0x6a8>)
    fea8:	4798      	blx	r3
    feaa:	4642      	mov	r2, r8
    feac:	2301      	movs	r3, #1
    feae:	74d3      	strb	r3, [r2, #19]
    feb0:	4b63      	ldr	r3, [pc, #396]	; (10040 <frameParse+0x6bc>)
    feb2:	4641      	mov	r1, r8
    feb4:	881b      	ldrh	r3, [r3, #0]
    feb6:	4867      	ldr	r0, [pc, #412]	; (10054 <frameParse+0x6d0>)
    feb8:	199b      	adds	r3, r3, r6
    feba:	8193      	strh	r3, [r2, #12]
    febc:	6823      	ldr	r3, [r4, #0]
    febe:	7f9b      	ldrb	r3, [r3, #30]
    fec0:	3301      	adds	r3, #1
    fec2:	7413      	strb	r3, [r2, #16]
    fec4:	4643      	mov	r3, r8
    fec6:	464a      	mov	r2, r9
    fec8:	745a      	strb	r2, [r3, #17]
    feca:	4b63      	ldr	r3, [pc, #396]	; (10058 <frameParse+0x6d4>)
    fecc:	4798      	blx	r3
    fece:	e7be      	b.n	fe4e <frameParse+0x4ca>
    fed0:	4e5a      	ldr	r6, [pc, #360]	; (1003c <frameParse+0x6b8>)
    fed2:	42b0      	cmp	r0, r6
    fed4:	d900      	bls.n	fed8 <frameParse+0x554>
    fed6:	e66b      	b.n	fbb0 <frameParse+0x22c>
    fed8:	7a29      	ldrb	r1, [r5, #8]
    feda:	8816      	ldrh	r6, [r2, #0]
    fedc:	88e8      	ldrh	r0, [r5, #6]
    fede:	9109      	str	r1, [sp, #36]	; 0x24
    fee0:	a912      	add	r1, sp, #72	; 0x48
    fee2:	46b4      	mov	ip, r6
    fee4:	9108      	str	r1, [sp, #32]
    fee6:	000e      	movs	r6, r1
    fee8:	2133      	movs	r1, #51	; 0x33
    feea:	4f5c      	ldr	r7, [pc, #368]	; (1005c <frameParse+0x6d8>)
    feec:	46ba      	mov	sl, r7
    feee:	683f      	ldr	r7, [r7, #0]
    fef0:	5c79      	ldrb	r1, [r7, r1]
    fef2:	0037      	movs	r7, r6
    fef4:	3101      	adds	r1, #1
    fef6:	7031      	strb	r1, [r6, #0]
    fef8:	2103      	movs	r1, #3
    fefa:	7876      	ldrb	r6, [r6, #1]
    fefc:	80b8      	strh	r0, [r7, #4]
    fefe:	438e      	bics	r6, r1
    ff00:	3902      	subs	r1, #2
    ff02:	430e      	orrs	r6, r1
    ff04:	3107      	adds	r1, #7
    ff06:	438e      	bics	r6, r1
    ff08:	3904      	subs	r1, #4
    ff0a:	4331      	orrs	r1, r6
    ff0c:	2620      	movs	r6, #32
    ff0e:	43b1      	bics	r1, r6
    ff10:	19b6      	adds	r6, r6, r6
    ff12:	43b1      	bics	r1, r6
    ff14:	4399      	bics	r1, r3
    ff16:	336f      	adds	r3, #111	; 0x6f
    ff18:	4019      	ands	r1, r3
    ff1a:	4b41      	ldr	r3, [pc, #260]	; (10020 <frameParse+0x69c>)
    ff1c:	4e41      	ldr	r6, [pc, #260]	; (10024 <frameParse+0x6a0>)
    ff1e:	881b      	ldrh	r3, [r3, #0]
    ff20:	7079      	strb	r1, [r7, #1]
    ff22:	807b      	strh	r3, [r7, #2]
    ff24:	4663      	mov	r3, ip
    ff26:	80fb      	strh	r3, [r7, #6]
    ff28:	7833      	ldrb	r3, [r6, #0]
    ff2a:	0039      	movs	r1, r7
    ff2c:	3301      	adds	r3, #1
    ff2e:	7033      	strb	r3, [r6, #0]
    ff30:	2724      	movs	r7, #36	; 0x24
    ff32:	466b      	mov	r3, sp
    ff34:	19db      	adds	r3, r3, r7
    ff36:	781b      	ldrb	r3, [r3, #0]
    ff38:	720b      	strb	r3, [r1, #8]
    ff3a:	23ff      	movs	r3, #255	; 0xff
    ff3c:	4218      	tst	r0, r3
    ff3e:	d005      	beq.n	ff4c <frameParse+0x5c8>
    ff40:	0001      	movs	r1, r0
    ff42:	8812      	ldrh	r2, [r2, #0]
    ff44:	4399      	bics	r1, r3
    ff46:	428a      	cmp	r2, r1
    ff48:	d100      	bne.n	ff4c <frameParse+0x5c8>
    ff4a:	e136      	b.n	101ba <frameParse+0x836>
    ff4c:	2088      	movs	r0, #136	; 0x88
    ff4e:	4b33      	ldr	r3, [pc, #204]	; (1001c <frameParse+0x698>)
    ff50:	4798      	blx	r3
    ff52:	1e07      	subs	r7, r0, #0
    ff54:	d01a      	beq.n	ff8c <frameParse+0x608>
    ff56:	9b08      	ldr	r3, [sp, #32]
    ff58:	0001      	movs	r1, r0
    ff5a:	469a      	mov	sl, r3
    ff5c:	0018      	movs	r0, r3
    ff5e:	4b32      	ldr	r3, [pc, #200]	; (10028 <frameParse+0x6a4>)
    ff60:	4798      	blx	r3
    ff62:	7833      	ldrb	r3, [r6, #0]
    ff64:	0001      	movs	r1, r0
    ff66:	3b01      	subs	r3, #1
    ff68:	7033      	strb	r3, [r6, #0]
    ff6a:	2332      	movs	r3, #50	; 0x32
    ff6c:	543b      	strb	r3, [r7, r0]
    ff6e:	4b3c      	ldr	r3, [pc, #240]	; (10060 <frameParse+0x6dc>)
    ff70:	2201      	movs	r2, #1
    ff72:	9303      	str	r3, [sp, #12]
    ff74:	2300      	movs	r3, #0
    ff76:	9302      	str	r3, [sp, #8]
    ff78:	464b      	mov	r3, r9
    ff7a:	9301      	str	r3, [sp, #4]
    ff7c:	9b04      	ldr	r3, [sp, #16]
    ff7e:	4650      	mov	r0, sl
    ff80:	9300      	str	r3, [sp, #0]
    ff82:	4e2c      	ldr	r6, [pc, #176]	; (10034 <frameParse+0x6b0>)
    ff84:	003b      	movs	r3, r7
    ff86:	47b0      	blx	r6
    ff88:	2800      	cmp	r0, #0
    ff8a:	d001      	beq.n	ff90 <frameParse+0x60c>
    ff8c:	7869      	ldrb	r1, [r5, #1]
    ff8e:	e60f      	b.n	fbb0 <frameParse+0x22c>
    ff90:	0038      	movs	r0, r7
    ff92:	4b20      	ldr	r3, [pc, #128]	; (10014 <frameParse+0x690>)
    ff94:	4798      	blx	r3
    ff96:	7869      	ldrb	r1, [r5, #1]
    ff98:	e60a      	b.n	fbb0 <frameParse+0x22c>
    ff9a:	2830      	cmp	r0, #48	; 0x30
    ff9c:	d100      	bne.n	ffa0 <frameParse+0x61c>
    ff9e:	e0af      	b.n	10100 <frameParse+0x77c>
    ffa0:	2840      	cmp	r0, #64	; 0x40
    ffa2:	d000      	beq.n	ffa6 <frameParse+0x622>
    ffa4:	e609      	b.n	fbba <frameParse+0x236>
    ffa6:	2a41      	cmp	r2, #65	; 0x41
    ffa8:	d000      	beq.n	ffac <frameParse+0x628>
    ffaa:	e606      	b.n	fbba <frameParse+0x236>
    ffac:	88ef      	ldrh	r7, [r5, #6]
    ffae:	2f00      	cmp	r7, #0
    ffb0:	d000      	beq.n	ffb4 <frameParse+0x630>
    ffb2:	e60a      	b.n	fbca <frameParse+0x246>
    ffb4:	4b2b      	ldr	r3, [pc, #172]	; (10064 <frameParse+0x6e0>)
    ffb6:	4798      	blx	r3
    ffb8:	9b06      	ldr	r3, [sp, #24]
    ffba:	785b      	ldrb	r3, [r3, #1]
    ffbc:	40d8      	lsrs	r0, r3
    ffbe:	4230      	tst	r0, r6
    ffc0:	d000      	beq.n	ffc4 <frameParse+0x640>
    ffc2:	e12c      	b.n	1021e <frameParse+0x89a>
    ffc4:	7869      	ldrb	r1, [r5, #1]
    ffc6:	e5f8      	b.n	fbba <frameParse+0x236>
    ffc8:	46b9      	mov	r9, r7
    ffca:	4654      	mov	r4, sl
    ffcc:	e5e4      	b.n	fb98 <frameParse+0x214>
    ffce:	2232      	movs	r2, #50	; 0x32
    ffd0:	4b22      	ldr	r3, [pc, #136]	; (1005c <frameParse+0x6d8>)
    ffd2:	88e8      	ldrh	r0, [r5, #6]
    ffd4:	681b      	ldr	r3, [r3, #0]
    ffd6:	7a29      	ldrb	r1, [r5, #8]
    ffd8:	5c9e      	ldrb	r6, [r3, r2]
    ffda:	2e00      	cmp	r6, #0
    ffdc:	d075      	beq.n	100ca <frameParse+0x746>
    ffde:	3e01      	subs	r6, #1
    ffe0:	b2f6      	uxtb	r6, r6
    ffe2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    ffe4:	3601      	adds	r6, #1
    ffe6:	00b6      	lsls	r6, r6, #2
    ffe8:	199e      	adds	r6, r3, r6
    ffea:	e002      	b.n	fff2 <frameParse+0x66e>
    ffec:	3304      	adds	r3, #4
    ffee:	429e      	cmp	r6, r3
    fff0:	d06b      	beq.n	100ca <frameParse+0x746>
    fff2:	881a      	ldrh	r2, [r3, #0]
    fff4:	4282      	cmp	r2, r0
    fff6:	d1f9      	bne.n	ffec <frameParse+0x668>
    fff8:	789a      	ldrb	r2, [r3, #2]
    fffa:	428a      	cmp	r2, r1
    fffc:	d1f6      	bne.n	ffec <frameParse+0x668>
    fffe:	e5e4      	b.n	fbca <frameParse+0x246>
   10000:	2210      	movs	r2, #16
   10002:	4692      	mov	sl, r2
   10004:	3a0d      	subs	r2, #13
   10006:	2710      	movs	r7, #16
   10008:	2608      	movs	r6, #8
   1000a:	2004      	movs	r0, #4
   1000c:	4691      	mov	r9, r2
   1000e:	9204      	str	r2, [sp, #16]
   10010:	e619      	b.n	fc46 <frameParse+0x2c2>
   10012:	46c0      	nop			; (mov r8, r8)
   10014:	0000bd25 	.word	0x0000bd25
   10018:	20001ce1 	.word	0x20001ce1
   1001c:	0000bc69 	.word	0x0000bc69
   10020:	200028a8 	.word	0x200028a8
   10024:	20002890 	.word	0x20002890
   10028:	0000f0d1 	.word	0x0000f0d1
   1002c:	00014d37 	.word	0x00014d37
   10030:	0000f05d 	.word	0x0000f05d
   10034:	0000f15d 	.word	0x0000f15d
   10038:	00011c0d 	.word	0x00011c0d
   1003c:	0000fffc 	.word	0x0000fffc
   10040:	200028b8 	.word	0x200028b8
   10044:	0000ffff 	.word	0x0000ffff
   10048:	20001d04 	.word	0x20001d04
   1004c:	00011861 	.word	0x00011861
   10050:	0000bda1 	.word	0x0000bda1
   10054:	20002850 	.word	0x20002850
   10058:	0000be65 	.word	0x0000be65
   1005c:	2000285c 	.word	0x2000285c
   10060:	0000efb9 	.word	0x0000efb9
   10064:	0000b379 	.word	0x0000b379
   10068:	4663      	mov	r3, ip
   1006a:	46bc      	mov	ip, r7
   1006c:	0027      	movs	r7, r4
   1006e:	001c      	movs	r4, r3
   10070:	4661      	mov	r1, ip
   10072:	88eb      	ldrh	r3, [r5, #6]
   10074:	7a2a      	ldrb	r2, [r5, #8]
   10076:	800b      	strh	r3, [r1, #0]
   10078:	4653      	mov	r3, sl
   1007a:	681b      	ldr	r3, [r3, #0]
   1007c:	4648      	mov	r0, r9
   1007e:	691b      	ldr	r3, [r3, #16]
   10080:	9906      	ldr	r1, [sp, #24]
   10082:	19db      	adds	r3, r3, r7
   10084:	709a      	strb	r2, [r3, #2]
   10086:	4653      	mov	r3, sl
   10088:	2220      	movs	r2, #32
   1008a:	681b      	ldr	r3, [r3, #0]
   1008c:	4440      	add	r0, r8
   1008e:	5c9a      	ldrb	r2, [r3, r2]
   10090:	691b      	ldr	r3, [r3, #16]
   10092:	19df      	adds	r7, r3, r7
   10094:	70fa      	strb	r2, [r7, #3]
   10096:	7b22      	ldrb	r2, [r4, #12]
   10098:	9b05      	ldr	r3, [sp, #20]
   1009a:	1ad2      	subs	r2, r2, r3
   1009c:	4b68      	ldr	r3, [pc, #416]	; (10240 <frameParse+0x8bc>)
   1009e:	4798      	blx	r3
   100a0:	465b      	mov	r3, fp
   100a2:	7b22      	ldrb	r2, [r4, #12]
   100a4:	9904      	ldr	r1, [sp, #16]
   100a6:	1ad2      	subs	r2, r2, r3
   100a8:	4b66      	ldr	r3, [pc, #408]	; (10244 <frameParse+0x8c0>)
   100aa:	b2d2      	uxtb	r2, r2
   100ac:	9303      	str	r3, [sp, #12]
   100ae:	2300      	movs	r3, #0
   100b0:	9302      	str	r3, [sp, #8]
   100b2:	9b08      	ldr	r3, [sp, #32]
   100b4:	0028      	movs	r0, r5
   100b6:	9301      	str	r3, [sp, #4]
   100b8:	2302      	movs	r3, #2
   100ba:	4c63      	ldr	r4, [pc, #396]	; (10248 <frameParse+0x8c4>)
   100bc:	9300      	str	r3, [sp, #0]
   100be:	4643      	mov	r3, r8
   100c0:	47a0      	blx	r4
   100c2:	2800      	cmp	r0, #0
   100c4:	d000      	beq.n	100c8 <frameParse+0x744>
   100c6:	e46a      	b.n	f99e <frameParse+0x1a>
   100c8:	e61e      	b.n	fd08 <frameParse+0x384>
   100ca:	4b60      	ldr	r3, [pc, #384]	; (1024c <frameParse+0x8c8>)
   100cc:	4798      	blx	r3
   100ce:	e696      	b.n	fdfe <frameParse+0x47a>
   100d0:	881b      	ldrh	r3, [r3, #0]
   100d2:	061b      	lsls	r3, r3, #24
   100d4:	d400      	bmi.n	100d8 <frameParse+0x754>
   100d6:	e692      	b.n	fdfe <frameParse+0x47a>
   100d8:	4b5d      	ldr	r3, [pc, #372]	; (10250 <frameParse+0x8cc>)
   100da:	429a      	cmp	r2, r3
   100dc:	d000      	beq.n	100e0 <frameParse+0x75c>
   100de:	e68e      	b.n	fdfe <frameParse+0x47a>
   100e0:	e573      	b.n	fbca <frameParse+0x246>
   100e2:	7ba3      	ldrb	r3, [r4, #14]
   100e4:	464a      	mov	r2, r9
   100e6:	9300      	str	r3, [sp, #0]
   100e8:	9904      	ldr	r1, [sp, #16]
   100ea:	9b06      	ldr	r3, [sp, #24]
   100ec:	0028      	movs	r0, r5
   100ee:	4c59      	ldr	r4, [pc, #356]	; (10254 <frameParse+0x8d0>)
   100f0:	47a0      	blx	r4
   100f2:	e454      	b.n	f99e <frameParse+0x1a>
   100f4:	9906      	ldr	r1, [sp, #24]
   100f6:	0028      	movs	r0, r5
   100f8:	4b57      	ldr	r3, [pc, #348]	; (10258 <frameParse+0x8d4>)
   100fa:	4798      	blx	r3
   100fc:	7869      	ldrb	r1, [r5, #1]
   100fe:	e55c      	b.n	fbba <frameParse+0x236>
   10100:	9906      	ldr	r1, [sp, #24]
   10102:	0028      	movs	r0, r5
   10104:	4b55      	ldr	r3, [pc, #340]	; (1025c <frameParse+0x8d8>)
   10106:	4798      	blx	r3
   10108:	7869      	ldrb	r1, [r5, #1]
   1010a:	e556      	b.n	fbba <frameParse+0x236>
   1010c:	2b02      	cmp	r3, #2
   1010e:	d000      	beq.n	10112 <frameParse+0x78e>
   10110:	e445      	b.n	f99e <frameParse+0x1a>
   10112:	4b53      	ldr	r3, [pc, #332]	; (10260 <frameParse+0x8dc>)
   10114:	681b      	ldr	r3, [r3, #0]
   10116:	2b00      	cmp	r3, #0
   10118:	d100      	bne.n	1011c <frameParse+0x798>
   1011a:	e556      	b.n	fbca <frameParse+0x246>
   1011c:	4798      	blx	r3
   1011e:	e554      	b.n	fbca <frameParse+0x246>
   10120:	20a0      	movs	r0, #160	; 0xa0
   10122:	4b50      	ldr	r3, [pc, #320]	; (10264 <frameParse+0x8e0>)
   10124:	4798      	blx	r3
   10126:	1e04      	subs	r4, r0, #0
   10128:	d101      	bne.n	1012e <frameParse+0x7aa>
   1012a:	f7ff fc38 	bl	f99e <frameParse+0x1a>
   1012e:	0029      	movs	r1, r5
   10130:	2220      	movs	r2, #32
   10132:	4b43      	ldr	r3, [pc, #268]	; (10240 <frameParse+0x8bc>)
   10134:	3018      	adds	r0, #24
   10136:	4798      	blx	r3
   10138:	2338      	movs	r3, #56	; 0x38
   1013a:	0020      	movs	r0, r4
   1013c:	9a07      	ldr	r2, [sp, #28]
   1013e:	9906      	ldr	r1, [sp, #24]
   10140:	54e2      	strb	r2, [r4, r3]
   10142:	60a6      	str	r6, [r4, #8]
   10144:	88ab      	ldrh	r3, [r5, #4]
   10146:	3039      	adds	r0, #57	; 0x39
   10148:	81a3      	strh	r3, [r4, #12]
   1014a:	4b3d      	ldr	r3, [pc, #244]	; (10240 <frameParse+0x8bc>)
   1014c:	4798      	blx	r3
   1014e:	2301      	movs	r3, #1
   10150:	74e3      	strb	r3, [r4, #19]
   10152:	4b45      	ldr	r3, [pc, #276]	; (10268 <frameParse+0x8e4>)
   10154:	0021      	movs	r1, r4
   10156:	681b      	ldr	r3, [r3, #0]
   10158:	4844      	ldr	r0, [pc, #272]	; (1026c <frameParse+0x8e8>)
   1015a:	7f9b      	ldrb	r3, [r3, #30]
   1015c:	3301      	adds	r3, #1
   1015e:	7423      	strb	r3, [r4, #16]
   10160:	4b43      	ldr	r3, [pc, #268]	; (10270 <frameParse+0x8ec>)
   10162:	4798      	blx	r3
   10164:	f7ff fc1b 	bl	f99e <frameParse+0x1a>
   10168:	20a0      	movs	r0, #160	; 0xa0
   1016a:	4b3e      	ldr	r3, [pc, #248]	; (10264 <frameParse+0x8e0>)
   1016c:	4798      	blx	r3
   1016e:	1e04      	subs	r4, r0, #0
   10170:	d101      	bne.n	10176 <frameParse+0x7f2>
   10172:	f7ff fc14 	bl	f99e <frameParse+0x1a>
   10176:	2220      	movs	r2, #32
   10178:	0029      	movs	r1, r5
   1017a:	4b31      	ldr	r3, [pc, #196]	; (10240 <frameParse+0x8bc>)
   1017c:	3018      	adds	r0, #24
   1017e:	4798      	blx	r3
   10180:	2338      	movs	r3, #56	; 0x38
   10182:	9a07      	ldr	r2, [sp, #28]
   10184:	0020      	movs	r0, r4
   10186:	54e2      	strb	r2, [r4, r3]
   10188:	2300      	movs	r3, #0
   1018a:	9906      	ldr	r1, [sp, #24]
   1018c:	60a3      	str	r3, [r4, #8]
   1018e:	3039      	adds	r0, #57	; 0x39
   10190:	4b2b      	ldr	r3, [pc, #172]	; (10240 <frameParse+0x8bc>)
   10192:	4798      	blx	r3
   10194:	2301      	movs	r3, #1
   10196:	74e3      	strb	r3, [r4, #19]
   10198:	88a8      	ldrh	r0, [r5, #4]
   1019a:	4b36      	ldr	r3, [pc, #216]	; (10274 <frameParse+0x8f0>)
   1019c:	4798      	blx	r3
   1019e:	2800      	cmp	r0, #0
   101a0:	d132      	bne.n	10208 <frameParse+0x884>
   101a2:	0020      	movs	r0, r4
   101a4:	4b34      	ldr	r3, [pc, #208]	; (10278 <frameParse+0x8f4>)
   101a6:	4798      	blx	r3
   101a8:	f7ff fbf9 	bl	f99e <frameParse+0x1a>
   101ac:	4b2e      	ldr	r3, [pc, #184]	; (10268 <frameParse+0x8e4>)
   101ae:	6818      	ldr	r0, [r3, #0]
   101b0:	2333      	movs	r3, #51	; 0x33
   101b2:	5cc3      	ldrb	r3, [r0, r3]
   101b4:	3301      	adds	r3, #1
   101b6:	b2db      	uxtb	r3, r3
   101b8:	e5c2      	b.n	fd40 <frameParse+0x3bc>
   101ba:	375c      	adds	r7, #92	; 0x5c
   101bc:	4007      	ands	r7, r0
   101be:	d000      	beq.n	101c2 <frameParse+0x83e>
   101c0:	e6c4      	b.n	ff4c <frameParse+0x5c8>
   101c2:	20a0      	movs	r0, #160	; 0xa0
   101c4:	4b27      	ldr	r3, [pc, #156]	; (10264 <frameParse+0x8e0>)
   101c6:	4798      	blx	r3
   101c8:	1e06      	subs	r6, r0, #0
   101ca:	d100      	bne.n	101ce <frameParse+0x84a>
   101cc:	e6de      	b.n	ff8c <frameParse+0x608>
   101ce:	2220      	movs	r2, #32
   101d0:	9908      	ldr	r1, [sp, #32]
   101d2:	4b1b      	ldr	r3, [pc, #108]	; (10240 <frameParse+0x8bc>)
   101d4:	3018      	adds	r0, #24
   101d6:	4798      	blx	r3
   101d8:	2338      	movs	r3, #56	; 0x38
   101da:	2201      	movs	r2, #1
   101dc:	54f2      	strb	r2, [r6, r3]
   101de:	2232      	movs	r2, #50	; 0x32
   101e0:	3301      	adds	r3, #1
   101e2:	60b7      	str	r7, [r6, #8]
   101e4:	54f2      	strb	r2, [r6, r3]
   101e6:	4653      	mov	r3, sl
   101e8:	681b      	ldr	r3, [r3, #0]
   101ea:	0031      	movs	r1, r6
   101ec:	7f9b      	ldrb	r3, [r3, #30]
   101ee:	481f      	ldr	r0, [pc, #124]	; (1026c <frameParse+0x8e8>)
   101f0:	3301      	adds	r3, #1
   101f2:	7433      	strb	r3, [r6, #16]
   101f4:	2301      	movs	r3, #1
   101f6:	7477      	strb	r7, [r6, #17]
   101f8:	74f3      	strb	r3, [r6, #19]
   101fa:	4b1d      	ldr	r3, [pc, #116]	; (10270 <frameParse+0x8ec>)
   101fc:	4798      	blx	r3
   101fe:	7869      	ldrb	r1, [r5, #1]
   10200:	e4d6      	b.n	fbb0 <frameParse+0x22c>
   10202:	4684      	mov	ip, r0
   10204:	2700      	movs	r7, #0
   10206:	e733      	b.n	10070 <frameParse+0x6ec>
   10208:	4b17      	ldr	r3, [pc, #92]	; (10268 <frameParse+0x8e4>)
   1020a:	0021      	movs	r1, r4
   1020c:	681b      	ldr	r3, [r3, #0]
   1020e:	481b      	ldr	r0, [pc, #108]	; (1027c <frameParse+0x8f8>)
   10210:	7f5b      	ldrb	r3, [r3, #29]
   10212:	3301      	adds	r3, #1
   10214:	7423      	strb	r3, [r4, #16]
   10216:	4b16      	ldr	r3, [pc, #88]	; (10270 <frameParse+0x8ec>)
   10218:	4798      	blx	r3
   1021a:	f7ff fbc0 	bl	f99e <frameParse+0x1a>
   1021e:	4a18      	ldr	r2, [pc, #96]	; (10280 <frameParse+0x8fc>)
   10220:	4818      	ldr	r0, [pc, #96]	; (10284 <frameParse+0x900>)
   10222:	7013      	strb	r3, [r2, #0]
   10224:	4b18      	ldr	r3, [pc, #96]	; (10288 <frameParse+0x904>)
   10226:	7307      	strb	r7, [r0, #12]
   10228:	6103      	str	r3, [r0, #16]
   1022a:	4b18      	ldr	r3, [pc, #96]	; (1028c <frameParse+0x908>)
   1022c:	6043      	str	r3, [r0, #4]
   1022e:	6083      	str	r3, [r0, #8]
   10230:	4b17      	ldr	r3, [pc, #92]	; (10290 <frameParse+0x90c>)
   10232:	4798      	blx	r3
   10234:	2005      	movs	r0, #5
   10236:	4b17      	ldr	r3, [pc, #92]	; (10294 <frameParse+0x910>)
   10238:	4798      	blx	r3
   1023a:	7869      	ldrb	r1, [r5, #1]
   1023c:	e4bd      	b.n	fbba <frameParse+0x236>
   1023e:	46c0      	nop			; (mov r8, r8)
   10240:	00014d37 	.word	0x00014d37
   10244:	0000f05d 	.word	0x0000f05d
   10248:	0000f15d 	.word	0x0000f15d
   1024c:	0000f8f9 	.word	0x0000f8f9
   10250:	0000fffd 	.word	0x0000fffd
   10254:	00010d6d 	.word	0x00010d6d
   10258:	0000ef85 	.word	0x0000ef85
   1025c:	0000f689 	.word	0x0000f689
   10260:	20001d00 	.word	0x20001d00
   10264:	0000bc69 	.word	0x0000bc69
   10268:	2000285c 	.word	0x2000285c
   1026c:	20002850 	.word	0x20002850
   10270:	0000be65 	.word	0x0000be65
   10274:	000121fd 	.word	0x000121fd
   10278:	0000bd25 	.word	0x0000bd25
   1027c:	20002908 	.word	0x20002908
   10280:	2000008f 	.word	0x2000008f
   10284:	200028dc 	.word	0x200028dc
   10288:	0000efc9 	.word	0x0000efc9
   1028c:	00003a98 	.word	0x00003a98
   10290:	0000c01d 	.word	0x0000c01d
   10294:	0000a60d 	.word	0x0000a60d

00010298 <initDuplicateRejectionTable>:
   10298:	2332      	movs	r3, #50	; 0x32
   1029a:	b530      	push	{r4, r5, lr}
   1029c:	4809      	ldr	r0, [pc, #36]	; (102c4 <initDuplicateRejectionTable+0x2c>)
   1029e:	6802      	ldr	r2, [r0, #0]
   102a0:	5cd1      	ldrb	r1, [r2, r3]
   102a2:	2300      	movs	r3, #0
   102a4:	2900      	cmp	r1, #0
   102a6:	d00b      	beq.n	102c0 <initDuplicateRejectionTable+0x28>
   102a8:	2501      	movs	r5, #1
   102aa:	2432      	movs	r4, #50	; 0x32
   102ac:	426d      	negs	r5, r5
   102ae:	6a52      	ldr	r2, [r2, #36]	; 0x24
   102b0:	0099      	lsls	r1, r3, #2
   102b2:	528d      	strh	r5, [r1, r2]
   102b4:	6802      	ldr	r2, [r0, #0]
   102b6:	3301      	adds	r3, #1
   102b8:	5d11      	ldrb	r1, [r2, r4]
   102ba:	b2db      	uxtb	r3, r3
   102bc:	4299      	cmp	r1, r3
   102be:	d8f6      	bhi.n	102ae <initDuplicateRejectionTable+0x16>
   102c0:	bd30      	pop	{r4, r5, pc}
   102c2:	46c0      	nop			; (mov r8, r8)
   102c4:	2000285c 	.word	0x2000285c

000102c8 <duplicateRejectionTimerHandler>:
   102c8:	b5f0      	push	{r4, r5, r6, r7, lr}
   102ca:	46c6      	mov	lr, r8
   102cc:	2332      	movs	r3, #50	; 0x32
   102ce:	b500      	push	{lr}
   102d0:	4e13      	ldr	r6, [pc, #76]	; (10320 <duplicateRejectionTimerHandler+0x58>)
   102d2:	6834      	ldr	r4, [r6, #0]
   102d4:	5ce7      	ldrb	r7, [r4, r3]
   102d6:	2300      	movs	r3, #0
   102d8:	2f00      	cmp	r7, #0
   102da:	d01e      	beq.n	1031a <duplicateRejectionTimerHandler+0x52>
   102dc:	2201      	movs	r2, #1
   102de:	4252      	negs	r2, r2
   102e0:	4694      	mov	ip, r2
   102e2:	3233      	adds	r2, #51	; 0x33
   102e4:	4690      	mov	r8, r2
   102e6:	4d0f      	ldr	r5, [pc, #60]	; (10324 <duplicateRejectionTimerHandler+0x5c>)
   102e8:	6a62      	ldr	r2, [r4, #36]	; 0x24
   102ea:	0098      	lsls	r0, r3, #2
   102ec:	1812      	adds	r2, r2, r0
   102ee:	8811      	ldrh	r1, [r2, #0]
   102f0:	42a9      	cmp	r1, r5
   102f2:	d00e      	beq.n	10312 <duplicateRejectionTimerHandler+0x4a>
   102f4:	78d1      	ldrb	r1, [r2, #3]
   102f6:	2900      	cmp	r1, #0
   102f8:	d00b      	beq.n	10312 <duplicateRejectionTimerHandler+0x4a>
   102fa:	3901      	subs	r1, #1
   102fc:	b2c9      	uxtb	r1, r1
   102fe:	70d1      	strb	r1, [r2, #3]
   10300:	2900      	cmp	r1, #0
   10302:	d103      	bne.n	1030c <duplicateRejectionTimerHandler+0x44>
   10304:	4661      	mov	r1, ip
   10306:	6832      	ldr	r2, [r6, #0]
   10308:	6a52      	ldr	r2, [r2, #36]	; 0x24
   1030a:	5211      	strh	r1, [r2, r0]
   1030c:	4642      	mov	r2, r8
   1030e:	6834      	ldr	r4, [r6, #0]
   10310:	5ca7      	ldrb	r7, [r4, r2]
   10312:	3301      	adds	r3, #1
   10314:	b2db      	uxtb	r3, r3
   10316:	42bb      	cmp	r3, r7
   10318:	d3e6      	bcc.n	102e8 <duplicateRejectionTimerHandler+0x20>
   1031a:	bc04      	pop	{r2}
   1031c:	4690      	mov	r8, r2
   1031e:	bdf0      	pop	{r4, r5, r6, r7, pc}
   10320:	2000285c 	.word	0x2000285c
   10324:	0000ffff 	.word	0x0000ffff

00010328 <establishTimerExpired>:
   10328:	2205      	movs	r2, #5
   1032a:	b510      	push	{r4, lr}
   1032c:	4b04      	ldr	r3, [pc, #16]	; (10340 <establishTimerExpired+0x18>)
   1032e:	4c05      	ldr	r4, [pc, #20]	; (10344 <establishTimerExpired+0x1c>)
   10330:	701a      	strb	r2, [r3, #0]
   10332:	2004      	movs	r0, #4
   10334:	6823      	ldr	r3, [r4, #0]
   10336:	4798      	blx	r3
   10338:	2300      	movs	r3, #0
   1033a:	6023      	str	r3, [r4, #0]
   1033c:	bd10      	pop	{r4, pc}
   1033e:	46c0      	nop			; (mov r8, r8)
   10340:	20001ce1 	.word	0x20001ce1
   10344:	20001d0c 	.word	0x20001d0c

00010348 <ScanChannel>:
   10348:	b5f0      	push	{r4, r5, r6, r7, lr}
   1034a:	46c6      	mov	lr, r8
   1034c:	b500      	push	{lr}
   1034e:	4f2d      	ldr	r7, [pc, #180]	; (10404 <ScanChannel+0xbc>)
   10350:	b090      	sub	sp, #64	; 0x40
   10352:	783c      	ldrb	r4, [r7, #0]
   10354:	0005      	movs	r5, r0
   10356:	2c1a      	cmp	r4, #26
   10358:	d842      	bhi.n	103e0 <ScanChannel+0x98>
   1035a:	4b2b      	ldr	r3, [pc, #172]	; (10408 <ScanChannel+0xc0>)
   1035c:	b2e2      	uxtb	r2, r4
   1035e:	2601      	movs	r6, #1
   10360:	4698      	mov	r8, r3
   10362:	e003      	b.n	1036c <ScanChannel+0x24>
   10364:	3401      	adds	r4, #1
   10366:	b2e2      	uxtb	r2, r4
   10368:	2a1a      	cmp	r2, #26
   1036a:	d839      	bhi.n	103e0 <ScanChannel+0x98>
   1036c:	686b      	ldr	r3, [r5, #4]
   1036e:	40e3      	lsrs	r3, r4
   10370:	421e      	tst	r6, r3
   10372:	d0f7      	beq.n	10364 <ScanChannel+0x1c>
   10374:	0039      	movs	r1, r7
   10376:	2000      	movs	r0, #0
   10378:	703a      	strb	r2, [r7, #0]
   1037a:	47c0      	blx	r8
   1037c:	2800      	cmp	r0, #0
   1037e:	d0f1      	beq.n	10364 <ScanChannel+0x1c>
   10380:	ab02      	add	r3, sp, #8
   10382:	469c      	mov	ip, r3
   10384:	2716      	movs	r7, #22
   10386:	2301      	movs	r3, #1
   10388:	4467      	add	r7, ip
   1038a:	425b      	negs	r3, r3
   1038c:	803b      	strh	r3, [r7, #0]
   1038e:	2088      	movs	r0, #136	; 0x88
   10390:	4b1e      	ldr	r3, [pc, #120]	; (1040c <ScanChannel+0xc4>)
   10392:	4798      	blx	r3
   10394:	1e04      	subs	r4, r0, #0
   10396:	d021      	beq.n	103dc <ScanChannel+0x94>
   10398:	aa08      	add	r2, sp, #32
   1039a:	0015      	movs	r5, r2
   1039c:	491c      	ldr	r1, [pc, #112]	; (10410 <ScanChannel+0xc8>)
   1039e:	002b      	movs	r3, r5
   103a0:	883a      	ldrh	r2, [r7, #0]
   103a2:	9505      	str	r5, [sp, #20]
   103a4:	2001      	movs	r0, #1
   103a6:	4d1b      	ldr	r5, [pc, #108]	; (10414 <ScanChannel+0xcc>)
   103a8:	47a8      	blx	r5
   103aa:	2220      	movs	r2, #32
   103ac:	9d05      	ldr	r5, [sp, #20]
   103ae:	0021      	movs	r1, r4
   103b0:	786b      	ldrb	r3, [r5, #1]
   103b2:	0028      	movs	r0, r5
   103b4:	4313      	orrs	r3, r2
   103b6:	706b      	strb	r3, [r5, #1]
   103b8:	4b17      	ldr	r3, [pc, #92]	; (10418 <ScanChannel+0xd0>)
   103ba:	4798      	blx	r3
   103bc:	4b17      	ldr	r3, [pc, #92]	; (1041c <ScanChannel+0xd4>)
   103be:	5426      	strb	r6, [r4, r0]
   103c0:	9303      	str	r3, [sp, #12]
   103c2:	2300      	movs	r3, #0
   103c4:	9302      	str	r3, [sp, #8]
   103c6:	3302      	adds	r3, #2
   103c8:	0001      	movs	r1, r0
   103ca:	9300      	str	r3, [sp, #0]
   103cc:	9701      	str	r7, [sp, #4]
   103ce:	0023      	movs	r3, r4
   103d0:	2201      	movs	r2, #1
   103d2:	0028      	movs	r0, r5
   103d4:	4c12      	ldr	r4, [pc, #72]	; (10420 <ScanChannel+0xd8>)
   103d6:	47a0      	blx	r4
   103d8:	2800      	cmp	r0, #0
   103da:	d110      	bne.n	103fe <ScanChannel+0xb6>
   103dc:	200a      	movs	r0, #10
   103de:	e00a      	b.n	103f6 <ScanChannel+0xae>
   103e0:	2205      	movs	r2, #5
   103e2:	4b10      	ldr	r3, [pc, #64]	; (10424 <ScanChannel+0xdc>)
   103e4:	4c10      	ldr	r4, [pc, #64]	; (10428 <ScanChannel+0xe0>)
   103e6:	701a      	strb	r2, [r3, #0]
   103e8:	7868      	ldrb	r0, [r5, #1]
   103ea:	6823      	ldr	r3, [r4, #0]
   103ec:	0029      	movs	r1, r5
   103ee:	4798      	blx	r3
   103f0:	2300      	movs	r3, #0
   103f2:	2000      	movs	r0, #0
   103f4:	6023      	str	r3, [r4, #0]
   103f6:	b010      	add	sp, #64	; 0x40
   103f8:	bc04      	pop	{r2}
   103fa:	4690      	mov	r8, r2
   103fc:	bdf0      	pop	{r4, r5, r6, r7, pc}
   103fe:	2000      	movs	r0, #0
   10400:	e7f9      	b.n	103f6 <ScanChannel+0xae>
   10402:	46c0      	nop			; (mov r8, r8)
   10404:	20002888 	.word	0x20002888
   10408:	0000d995 	.word	0x0000d995
   1040c:	0000bc69 	.word	0x0000bc69
   10410:	0000ffff 	.word	0x0000ffff
   10414:	0000f081 	.word	0x0000f081
   10418:	0000f0d1 	.word	0x0000f0d1
   1041c:	00010671 	.word	0x00010671
   10420:	0000f15d 	.word	0x0000f15d
   10424:	20001ce1 	.word	0x20001ce1
   10428:	20001d10 	.word	0x20001d10

0001042c <scanDurationExpired>:
   1042c:	b510      	push	{r4, lr}
   1042e:	4b0d      	ldr	r3, [pc, #52]	; (10464 <scanDurationExpired+0x38>)
   10430:	4c0d      	ldr	r4, [pc, #52]	; (10468 <scanDurationExpired+0x3c>)
   10432:	781a      	ldrb	r2, [r3, #0]
   10434:	2301      	movs	r3, #1
   10436:	4093      	lsls	r3, r2
   10438:	6820      	ldr	r0, [r4, #0]
   1043a:	6842      	ldr	r2, [r0, #4]
   1043c:	439a      	bics	r2, r3
   1043e:	6042      	str	r2, [r0, #4]
   10440:	4b0a      	ldr	r3, [pc, #40]	; (1046c <scanDurationExpired+0x40>)
   10442:	4798      	blx	r3
   10444:	2800      	cmp	r0, #0
   10446:	d00b      	beq.n	10460 <scanDurationExpired+0x34>
   10448:	2205      	movs	r2, #5
   1044a:	6823      	ldr	r3, [r4, #0]
   1044c:	7018      	strb	r0, [r3, #0]
   1044e:	4b08      	ldr	r3, [pc, #32]	; (10470 <scanDurationExpired+0x44>)
   10450:	6821      	ldr	r1, [r4, #0]
   10452:	4c08      	ldr	r4, [pc, #32]	; (10474 <scanDurationExpired+0x48>)
   10454:	701a      	strb	r2, [r3, #0]
   10456:	7848      	ldrb	r0, [r1, #1]
   10458:	6823      	ldr	r3, [r4, #0]
   1045a:	4798      	blx	r3
   1045c:	2300      	movs	r3, #0
   1045e:	6023      	str	r3, [r4, #0]
   10460:	bd10      	pop	{r4, pc}
   10462:	46c0      	nop			; (mov r8, r8)
   10464:	20002888 	.word	0x20002888
   10468:	20001d18 	.word	0x20001d18
   1046c:	00010349 	.word	0x00010349
   10470:	20001ce1 	.word	0x20001ce1
   10474:	20001d10 	.word	0x20001d10

00010478 <roleUpgradeTimerExpired>:
   10478:	b530      	push	{r4, r5, lr}
   1047a:	2088      	movs	r0, #136	; 0x88
   1047c:	b08d      	sub	sp, #52	; 0x34
   1047e:	4b15      	ldr	r3, [pc, #84]	; (104d4 <roleUpgradeTimerExpired+0x5c>)
   10480:	4798      	blx	r3
   10482:	1e04      	subs	r4, r0, #0
   10484:	d023      	beq.n	104ce <roleUpgradeTimerExpired+0x56>
   10486:	4b14      	ldr	r3, [pc, #80]	; (104d8 <roleUpgradeTimerExpired+0x60>)
   10488:	2200      	movs	r2, #0
   1048a:	8819      	ldrh	r1, [r3, #0]
   1048c:	20ff      	movs	r0, #255	; 0xff
   1048e:	b289      	uxth	r1, r1
   10490:	ab04      	add	r3, sp, #16
   10492:	4d12      	ldr	r5, [pc, #72]	; (104dc <roleUpgradeTimerExpired+0x64>)
   10494:	47a8      	blx	r5
   10496:	0021      	movs	r1, r4
   10498:	4b11      	ldr	r3, [pc, #68]	; (104e0 <roleUpgradeTimerExpired+0x68>)
   1049a:	a804      	add	r0, sp, #16
   1049c:	4798      	blx	r3
   1049e:	2305      	movs	r3, #5
   104a0:	0005      	movs	r5, r0
   104a2:	5423      	strb	r3, [r4, r0]
   104a4:	3001      	adds	r0, #1
   104a6:	b2c0      	uxtb	r0, r0
   104a8:	1820      	adds	r0, r4, r0
   104aa:	2208      	movs	r2, #8
   104ac:	490d      	ldr	r1, [pc, #52]	; (104e4 <roleUpgradeTimerExpired+0x6c>)
   104ae:	4b0e      	ldr	r3, [pc, #56]	; (104e8 <roleUpgradeTimerExpired+0x70>)
   104b0:	4798      	blx	r3
   104b2:	4b0e      	ldr	r3, [pc, #56]	; (104ec <roleUpgradeTimerExpired+0x74>)
   104b4:	2209      	movs	r2, #9
   104b6:	9303      	str	r3, [sp, #12]
   104b8:	2300      	movs	r3, #0
   104ba:	9302      	str	r3, [sp, #8]
   104bc:	4b0c      	ldr	r3, [pc, #48]	; (104f0 <roleUpgradeTimerExpired+0x78>)
   104be:	0029      	movs	r1, r5
   104c0:	9301      	str	r3, [sp, #4]
   104c2:	2302      	movs	r3, #2
   104c4:	a804      	add	r0, sp, #16
   104c6:	9300      	str	r3, [sp, #0]
   104c8:	0023      	movs	r3, r4
   104ca:	4c0a      	ldr	r4, [pc, #40]	; (104f4 <roleUpgradeTimerExpired+0x7c>)
   104cc:	47a0      	blx	r4
   104ce:	b00d      	add	sp, #52	; 0x34
   104d0:	bd30      	pop	{r4, r5, pc}
   104d2:	46c0      	nop			; (mov r8, r8)
   104d4:	0000bc69 	.word	0x0000bc69
   104d8:	200028b8 	.word	0x200028b8
   104dc:	0000f081 	.word	0x0000f081
   104e0:	0000f0d1 	.word	0x0000f0d1
   104e4:	20000094 	.word	0x20000094
   104e8:	00014d37 	.word	0x00014d37
   104ec:	0001072d 	.word	0x0001072d
   104f0:	2000009c 	.word	0x2000009c
   104f4:	0000f15d 	.word	0x0000f15d

000104f8 <commandConfcb>:
   104f8:	b510      	push	{r4, lr}
   104fa:	0010      	movs	r0, r2
   104fc:	4b01      	ldr	r3, [pc, #4]	; (10504 <commandConfcb+0xc>)
   104fe:	4798      	blx	r3
   10500:	bd10      	pop	{r4, pc}
   10502:	46c0      	nop			; (mov r8, r8)
   10504:	0000bd25 	.word	0x0000bd25

00010508 <sendKeepAlive>:
   10508:	22ff      	movs	r2, #255	; 0xff
   1050a:	b5f0      	push	{r4, r5, r6, r7, lr}
   1050c:	4e1c      	ldr	r6, [pc, #112]	; (10580 <sendKeepAlive+0x78>)
   1050e:	4d1d      	ldr	r5, [pc, #116]	; (10584 <sendKeepAlive+0x7c>)
   10510:	8833      	ldrh	r3, [r6, #0]
   10512:	b08f      	sub	sp, #60	; 0x3c
   10514:	8828      	ldrh	r0, [r5, #0]
   10516:	421a      	tst	r2, r3
   10518:	d02e      	beq.n	10578 <sendKeepAlive+0x70>
   1051a:	2416      	movs	r4, #22
   1051c:	4b1a      	ldr	r3, [pc, #104]	; (10588 <sendKeepAlive+0x80>)
   1051e:	446c      	add	r4, sp
   10520:	8020      	strh	r0, [r4, #0]
   10522:	4298      	cmp	r0, r3
   10524:	d026      	beq.n	10574 <sendKeepAlive+0x6c>
   10526:	2088      	movs	r0, #136	; 0x88
   10528:	4b18      	ldr	r3, [pc, #96]	; (1058c <sendKeepAlive+0x84>)
   1052a:	4798      	blx	r3
   1052c:	1e07      	subs	r7, r0, #0
   1052e:	d021      	beq.n	10574 <sendKeepAlive+0x6c>
   10530:	8831      	ldrh	r1, [r6, #0]
   10532:	882a      	ldrh	r2, [r5, #0]
   10534:	b289      	uxth	r1, r1
   10536:	ab06      	add	r3, sp, #24
   10538:	20ff      	movs	r0, #255	; 0xff
   1053a:	4d15      	ldr	r5, [pc, #84]	; (10590 <sendKeepAlive+0x88>)
   1053c:	47a8      	blx	r5
   1053e:	0039      	movs	r1, r7
   10540:	4b14      	ldr	r3, [pc, #80]	; (10594 <sendKeepAlive+0x8c>)
   10542:	a806      	add	r0, sp, #24
   10544:	4798      	blx	r3
   10546:	2307      	movs	r3, #7
   10548:	0005      	movs	r5, r0
   1054a:	543b      	strb	r3, [r7, r0]
   1054c:	3001      	adds	r0, #1
   1054e:	b2c0      	uxtb	r0, r0
   10550:	2208      	movs	r2, #8
   10552:	4911      	ldr	r1, [pc, #68]	; (10598 <sendKeepAlive+0x90>)
   10554:	4b11      	ldr	r3, [pc, #68]	; (1059c <sendKeepAlive+0x94>)
   10556:	1838      	adds	r0, r7, r0
   10558:	4798      	blx	r3
   1055a:	4b11      	ldr	r3, [pc, #68]	; (105a0 <sendKeepAlive+0x98>)
   1055c:	9401      	str	r4, [sp, #4]
   1055e:	9303      	str	r3, [sp, #12]
   10560:	2300      	movs	r3, #0
   10562:	9302      	str	r3, [sp, #8]
   10564:	3302      	adds	r3, #2
   10566:	9300      	str	r3, [sp, #0]
   10568:	2209      	movs	r2, #9
   1056a:	003b      	movs	r3, r7
   1056c:	0029      	movs	r1, r5
   1056e:	a806      	add	r0, sp, #24
   10570:	4c0c      	ldr	r4, [pc, #48]	; (105a4 <sendKeepAlive+0x9c>)
   10572:	47a0      	blx	r4
   10574:	b00f      	add	sp, #60	; 0x3c
   10576:	bdf0      	pop	{r4, r5, r6, r7, pc}
   10578:	4b0b      	ldr	r3, [pc, #44]	; (105a8 <sendKeepAlive+0xa0>)
   1057a:	4798      	blx	r3
   1057c:	e7cd      	b.n	1051a <sendKeepAlive+0x12>
   1057e:	46c0      	nop			; (mov r8, r8)
   10580:	200028b8 	.word	0x200028b8
   10584:	2000009c 	.word	0x2000009c
   10588:	0000ffff 	.word	0x0000ffff
   1058c:	0000bc69 	.word	0x0000bc69
   10590:	0000f081 	.word	0x0000f081
   10594:	0000f0d1 	.word	0x0000f0d1
   10598:	20000094 	.word	0x20000094
   1059c:	00014d37 	.word	0x00014d37
   105a0:	000108bd 	.word	0x000108bd
   105a4:	0000f15d 	.word	0x0000f15d
   105a8:	00011fc1 	.word	0x00011fc1

000105ac <dataWaitIntervalTimerHandler>:
   105ac:	2200      	movs	r2, #0
   105ae:	b510      	push	{r4, lr}
   105b0:	4b0f      	ldr	r3, [pc, #60]	; (105f0 <dataWaitIntervalTimerHandler+0x44>)
   105b2:	4c10      	ldr	r4, [pc, #64]	; (105f4 <dataWaitIntervalTimerHandler+0x48>)
   105b4:	701a      	strb	r2, [r3, #0]
   105b6:	0020      	movs	r0, r4
   105b8:	4b0f      	ldr	r3, [pc, #60]	; (105f8 <dataWaitIntervalTimerHandler+0x4c>)
   105ba:	4798      	blx	r3
   105bc:	4a0f      	ldr	r2, [pc, #60]	; (105fc <dataWaitIntervalTimerHandler+0x50>)
   105be:	7813      	ldrb	r3, [r2, #0]
   105c0:	3b01      	subs	r3, #1
   105c2:	b2db      	uxtb	r3, r3
   105c4:	7013      	strb	r3, [r2, #0]
   105c6:	2b00      	cmp	r3, #0
   105c8:	d102      	bne.n	105d0 <dataWaitIntervalTimerHandler+0x24>
   105ca:	2000      	movs	r0, #0
   105cc:	4b0c      	ldr	r3, [pc, #48]	; (10600 <dataWaitIntervalTimerHandler+0x54>)
   105ce:	4798      	blx	r3
   105d0:	4b0c      	ldr	r3, [pc, #48]	; (10604 <dataWaitIntervalTimerHandler+0x58>)
   105d2:	0020      	movs	r0, r4
   105d4:	6123      	str	r3, [r4, #16]
   105d6:	4b0c      	ldr	r3, [pc, #48]	; (10608 <dataWaitIntervalTimerHandler+0x5c>)
   105d8:	681b      	ldr	r3, [r3, #0]
   105da:	6b5a      	ldr	r2, [r3, #52]	; 0x34
   105dc:	23fa      	movs	r3, #250	; 0xfa
   105de:	009b      	lsls	r3, r3, #2
   105e0:	4353      	muls	r3, r2
   105e2:	6063      	str	r3, [r4, #4]
   105e4:	60a3      	str	r3, [r4, #8]
   105e6:	2300      	movs	r3, #0
   105e8:	7323      	strb	r3, [r4, #12]
   105ea:	4b08      	ldr	r3, [pc, #32]	; (1060c <dataWaitIntervalTimerHandler+0x60>)
   105ec:	4798      	blx	r3
   105ee:	bd10      	pop	{r4, pc}
   105f0:	20001d0a 	.word	0x20001d0a
   105f4:	200028bc 	.word	0x200028bc
   105f8:	0000bfb1 	.word	0x0000bfb1
   105fc:	20001ce0 	.word	0x20001ce0
   10600:	0000ac8d 	.word	0x0000ac8d
   10604:	0001094d 	.word	0x0001094d
   10608:	2000285c 	.word	0x2000285c
   1060c:	0000c01d 	.word	0x0000c01d

00010610 <EstcommandConfcb>:
   10610:	b570      	push	{r4, r5, r6, lr}
   10612:	0010      	movs	r0, r2
   10614:	4b0f      	ldr	r3, [pc, #60]	; (10654 <EstcommandConfcb+0x44>)
   10616:	000c      	movs	r4, r1
   10618:	4798      	blx	r3
   1061a:	2c00      	cmp	r4, #0
   1061c:	d009      	beq.n	10632 <EstcommandConfcb+0x22>
   1061e:	2205      	movs	r2, #5
   10620:	4b0d      	ldr	r3, [pc, #52]	; (10658 <EstcommandConfcb+0x48>)
   10622:	4d0e      	ldr	r5, [pc, #56]	; (1065c <EstcommandConfcb+0x4c>)
   10624:	701a      	strb	r2, [r3, #0]
   10626:	0020      	movs	r0, r4
   10628:	682b      	ldr	r3, [r5, #0]
   1062a:	4798      	blx	r3
   1062c:	2300      	movs	r3, #0
   1062e:	602b      	str	r3, [r5, #0]
   10630:	bd70      	pop	{r4, r5, r6, pc}
   10632:	480b      	ldr	r0, [pc, #44]	; (10660 <EstcommandConfcb+0x50>)
   10634:	4b0b      	ldr	r3, [pc, #44]	; (10664 <EstcommandConfcb+0x54>)
   10636:	6103      	str	r3, [r0, #16]
   10638:	4b0b      	ldr	r3, [pc, #44]	; (10668 <EstcommandConfcb+0x58>)
   1063a:	681a      	ldr	r2, [r3, #0]
   1063c:	233d      	movs	r3, #61	; 0x3d
   1063e:	5cd2      	ldrb	r2, [r2, r3]
   10640:	23fa      	movs	r3, #250	; 0xfa
   10642:	009b      	lsls	r3, r3, #2
   10644:	4353      	muls	r3, r2
   10646:	6043      	str	r3, [r0, #4]
   10648:	6083      	str	r3, [r0, #8]
   1064a:	4b08      	ldr	r3, [pc, #32]	; (1066c <EstcommandConfcb+0x5c>)
   1064c:	7304      	strb	r4, [r0, #12]
   1064e:	4798      	blx	r3
   10650:	e7ee      	b.n	10630 <EstcommandConfcb+0x20>
   10652:	46c0      	nop			; (mov r8, r8)
   10654:	0000bd25 	.word	0x0000bd25
   10658:	20001ce1 	.word	0x20001ce1
   1065c:	20001d0c 	.word	0x20001d0c
   10660:	200028dc 	.word	0x200028dc
   10664:	00010329 	.word	0x00010329
   10668:	2000285c 	.word	0x2000285c
   1066c:	0000c01d 	.word	0x0000c01d

00010670 <beaconReqConfcb>:
   10670:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   10672:	46ce      	mov	lr, r9
   10674:	4647      	mov	r7, r8
   10676:	0010      	movs	r0, r2
   10678:	b580      	push	{r7, lr}
   1067a:	4b21      	ldr	r3, [pc, #132]	; (10700 <beaconReqConfcb+0x90>)
   1067c:	000d      	movs	r5, r1
   1067e:	4798      	blx	r3
   10680:	2d00      	cmp	r5, #0
   10682:	d016      	beq.n	106b2 <beaconReqConfcb+0x42>
   10684:	4c1f      	ldr	r4, [pc, #124]	; (10704 <beaconReqConfcb+0x94>)
   10686:	4b20      	ldr	r3, [pc, #128]	; (10708 <beaconReqConfcb+0x98>)
   10688:	6820      	ldr	r0, [r4, #0]
   1068a:	4798      	blx	r3
   1068c:	2800      	cmp	r0, #0
   1068e:	d103      	bne.n	10698 <beaconReqConfcb+0x28>
   10690:	bc0c      	pop	{r2, r3}
   10692:	4690      	mov	r8, r2
   10694:	4699      	mov	r9, r3
   10696:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   10698:	2205      	movs	r2, #5
   1069a:	6823      	ldr	r3, [r4, #0]
   1069c:	7018      	strb	r0, [r3, #0]
   1069e:	4b1b      	ldr	r3, [pc, #108]	; (1070c <beaconReqConfcb+0x9c>)
   106a0:	6821      	ldr	r1, [r4, #0]
   106a2:	4c1b      	ldr	r4, [pc, #108]	; (10710 <beaconReqConfcb+0xa0>)
   106a4:	701a      	strb	r2, [r3, #0]
   106a6:	7848      	ldrb	r0, [r1, #1]
   106a8:	6823      	ldr	r3, [r4, #0]
   106aa:	4798      	blx	r3
   106ac:	2300      	movs	r3, #0
   106ae:	6023      	str	r3, [r4, #0]
   106b0:	e7ee      	b.n	10690 <beaconReqConfcb+0x20>
   106b2:	2401      	movs	r4, #1
   106b4:	0022      	movs	r2, r4
   106b6:	4e17      	ldr	r6, [pc, #92]	; (10714 <beaconReqConfcb+0xa4>)
   106b8:	4b17      	ldr	r3, [pc, #92]	; (10718 <beaconReqConfcb+0xa8>)
   106ba:	6133      	str	r3, [r6, #16]
   106bc:	4b17      	ldr	r3, [pc, #92]	; (1071c <beaconReqConfcb+0xac>)
   106be:	4699      	mov	r9, r3
   106c0:	781b      	ldrb	r3, [r3, #0]
   106c2:	409a      	lsls	r2, r3
   106c4:	0013      	movs	r3, r2
   106c6:	3301      	adds	r3, #1
   106c8:	0118      	lsls	r0, r3, #4
   106ca:	1ac0      	subs	r0, r0, r3
   106cc:	4b14      	ldr	r3, [pc, #80]	; (10720 <beaconReqConfcb+0xb0>)
   106ce:	0180      	lsls	r0, r0, #6
   106d0:	4698      	mov	r8, r3
   106d2:	4798      	blx	r3
   106d4:	21fa      	movs	r1, #250	; 0xfa
   106d6:	4f13      	ldr	r7, [pc, #76]	; (10724 <beaconReqConfcb+0xb4>)
   106d8:	0089      	lsls	r1, r1, #2
   106da:	47b8      	blx	r7
   106dc:	464b      	mov	r3, r9
   106de:	781b      	ldrb	r3, [r3, #0]
   106e0:	6070      	str	r0, [r6, #4]
   106e2:	409c      	lsls	r4, r3
   106e4:	3401      	adds	r4, #1
   106e6:	0120      	lsls	r0, r4, #4
   106e8:	1b00      	subs	r0, r0, r4
   106ea:	0180      	lsls	r0, r0, #6
   106ec:	47c0      	blx	r8
   106ee:	21fa      	movs	r1, #250	; 0xfa
   106f0:	0089      	lsls	r1, r1, #2
   106f2:	47b8      	blx	r7
   106f4:	4b0c      	ldr	r3, [pc, #48]	; (10728 <beaconReqConfcb+0xb8>)
   106f6:	60b0      	str	r0, [r6, #8]
   106f8:	0030      	movs	r0, r6
   106fa:	7335      	strb	r5, [r6, #12]
   106fc:	4798      	blx	r3
   106fe:	e7c7      	b.n	10690 <beaconReqConfcb+0x20>
   10700:	0000bd25 	.word	0x0000bd25
   10704:	20001d18 	.word	0x20001d18
   10708:	00010349 	.word	0x00010349
   1070c:	20001ce1 	.word	0x20001ce1
   10710:	20001d10 	.word	0x20001d10
   10714:	200028dc 	.word	0x200028dc
   10718:	0001042d 	.word	0x0001042d
   1071c:	200028d8 	.word	0x200028d8
   10720:	0000b375 	.word	0x0000b375
   10724:	000124c1 	.word	0x000124c1
   10728:	0000c01d 	.word	0x0000c01d

0001072c <roleUpGradeReqConfcb>:
   1072c:	b510      	push	{r4, lr}
   1072e:	0014      	movs	r4, r2
   10730:	2903      	cmp	r1, #3
   10732:	d009      	beq.n	10748 <roleUpGradeReqConfcb+0x1c>
   10734:	4b13      	ldr	r3, [pc, #76]	; (10784 <roleUpGradeReqConfcb+0x58>)
   10736:	681a      	ldr	r2, [r3, #0]
   10738:	233c      	movs	r3, #60	; 0x3c
   1073a:	5cd2      	ldrb	r2, [r2, r3]
   1073c:	4b12      	ldr	r3, [pc, #72]	; (10788 <roleUpGradeReqConfcb+0x5c>)
   1073e:	701a      	strb	r2, [r3, #0]
   10740:	0020      	movs	r0, r4
   10742:	4b12      	ldr	r3, [pc, #72]	; (1078c <roleUpGradeReqConfcb+0x60>)
   10744:	4798      	blx	r3
   10746:	bd10      	pop	{r4, pc}
   10748:	4a0f      	ldr	r2, [pc, #60]	; (10788 <roleUpGradeReqConfcb+0x5c>)
   1074a:	7813      	ldrb	r3, [r2, #0]
   1074c:	2b00      	cmp	r3, #0
   1074e:	d0f7      	beq.n	10740 <roleUpGradeReqConfcb+0x14>
   10750:	3b01      	subs	r3, #1
   10752:	b2db      	uxtb	r3, r3
   10754:	7013      	strb	r3, [r2, #0]
   10756:	2b00      	cmp	r3, #0
   10758:	d1f2      	bne.n	10740 <roleUpGradeReqConfcb+0x14>
   1075a:	4a0d      	ldr	r2, [pc, #52]	; (10790 <roleUpGradeReqConfcb+0x64>)
   1075c:	480d      	ldr	r0, [pc, #52]	; (10794 <roleUpGradeReqConfcb+0x68>)
   1075e:	7013      	strb	r3, [r2, #0]
   10760:	4b0d      	ldr	r3, [pc, #52]	; (10798 <roleUpGradeReqConfcb+0x6c>)
   10762:	4798      	blx	r3
   10764:	2208      	movs	r2, #8
   10766:	4b0d      	ldr	r3, [pc, #52]	; (1079c <roleUpGradeReqConfcb+0x70>)
   10768:	480d      	ldr	r0, [pc, #52]	; (107a0 <roleUpGradeReqConfcb+0x74>)
   1076a:	701a      	strb	r2, [r3, #0]
   1076c:	4b0d      	ldr	r3, [pc, #52]	; (107a4 <roleUpGradeReqConfcb+0x78>)
   1076e:	3a09      	subs	r2, #9
   10770:	801a      	strh	r2, [r3, #0]
   10772:	4b0d      	ldr	r3, [pc, #52]	; (107a8 <roleUpGradeReqConfcb+0x7c>)
   10774:	4798      	blx	r3
   10776:	4b0d      	ldr	r3, [pc, #52]	; (107ac <roleUpGradeReqConfcb+0x80>)
   10778:	681b      	ldr	r3, [r3, #0]
   1077a:	2b00      	cmp	r3, #0
   1077c:	d0e0      	beq.n	10740 <roleUpGradeReqConfcb+0x14>
   1077e:	4798      	blx	r3
   10780:	e7de      	b.n	10740 <roleUpGradeReqConfcb+0x14>
   10782:	46c0      	nop			; (mov r8, r8)
   10784:	2000285c 	.word	0x2000285c
   10788:	200028d0 	.word	0x200028d0
   1078c:	0000bd25 	.word	0x0000bd25
   10790:	20001d0a 	.word	0x20001d0a
   10794:	200028bc 	.word	0x200028bc
   10798:	0000bfb1 	.word	0x0000bfb1
   1079c:	20001ce1 	.word	0x20001ce1
   107a0:	00004001 	.word	0x00004001
   107a4:	200028b8 	.word	0x200028b8
   107a8:	0000a60d 	.word	0x0000a60d
   107ac:	20002900 	.word	0x20002900

000107b0 <dataReqConfcb>:
   107b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   107b2:	0010      	movs	r0, r2
   107b4:	4b30      	ldr	r3, [pc, #192]	; (10878 <dataReqConfcb+0xc8>)
   107b6:	000d      	movs	r5, r1
   107b8:	4798      	blx	r3
   107ba:	2d00      	cmp	r5, #0
   107bc:	d03d      	beq.n	1083a <dataReqConfcb+0x8a>
   107be:	4c2f      	ldr	r4, [pc, #188]	; (1087c <dataReqConfcb+0xcc>)
   107c0:	4e2f      	ldr	r6, [pc, #188]	; (10880 <dataReqConfcb+0xd0>)
   107c2:	0020      	movs	r0, r4
   107c4:	47b0      	blx	r6
   107c6:	4a2f      	ldr	r2, [pc, #188]	; (10884 <dataReqConfcb+0xd4>)
   107c8:	7813      	ldrb	r3, [r2, #0]
   107ca:	3b01      	subs	r3, #1
   107cc:	b2db      	uxtb	r3, r3
   107ce:	7013      	strb	r3, [r2, #0]
   107d0:	2b00      	cmp	r3, #0
   107d2:	d04d      	beq.n	10870 <dataReqConfcb+0xc0>
   107d4:	4b2c      	ldr	r3, [pc, #176]	; (10888 <dataReqConfcb+0xd8>)
   107d6:	4f2d      	ldr	r7, [pc, #180]	; (1088c <dataReqConfcb+0xdc>)
   107d8:	6123      	str	r3, [r4, #16]
   107da:	683b      	ldr	r3, [r7, #0]
   107dc:	0020      	movs	r0, r4
   107de:	6b5a      	ldr	r2, [r3, #52]	; 0x34
   107e0:	23fa      	movs	r3, #250	; 0xfa
   107e2:	009b      	lsls	r3, r3, #2
   107e4:	4353      	muls	r3, r2
   107e6:	6063      	str	r3, [r4, #4]
   107e8:	60a3      	str	r3, [r4, #8]
   107ea:	2300      	movs	r3, #0
   107ec:	7323      	strb	r3, [r4, #12]
   107ee:	4b28      	ldr	r3, [pc, #160]	; (10890 <dataReqConfcb+0xe0>)
   107f0:	4798      	blx	r3
   107f2:	2d03      	cmp	r5, #3
   107f4:	d005      	beq.n	10802 <dataReqConfcb+0x52>
   107f6:	233c      	movs	r3, #60	; 0x3c
   107f8:	683a      	ldr	r2, [r7, #0]
   107fa:	5cd2      	ldrb	r2, [r2, r3]
   107fc:	4b25      	ldr	r3, [pc, #148]	; (10894 <dataReqConfcb+0xe4>)
   107fe:	701a      	strb	r2, [r3, #0]
   10800:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   10802:	4a24      	ldr	r2, [pc, #144]	; (10894 <dataReqConfcb+0xe4>)
   10804:	7813      	ldrb	r3, [r2, #0]
   10806:	2b00      	cmp	r3, #0
   10808:	d0fa      	beq.n	10800 <dataReqConfcb+0x50>
   1080a:	3b01      	subs	r3, #1
   1080c:	b2db      	uxtb	r3, r3
   1080e:	7013      	strb	r3, [r2, #0]
   10810:	2b00      	cmp	r3, #0
   10812:	d1f5      	bne.n	10800 <dataReqConfcb+0x50>
   10814:	4a20      	ldr	r2, [pc, #128]	; (10898 <dataReqConfcb+0xe8>)
   10816:	0020      	movs	r0, r4
   10818:	7013      	strb	r3, [r2, #0]
   1081a:	47b0      	blx	r6
   1081c:	2208      	movs	r2, #8
   1081e:	4b1f      	ldr	r3, [pc, #124]	; (1089c <dataReqConfcb+0xec>)
   10820:	481f      	ldr	r0, [pc, #124]	; (108a0 <dataReqConfcb+0xf0>)
   10822:	701a      	strb	r2, [r3, #0]
   10824:	4b1f      	ldr	r3, [pc, #124]	; (108a4 <dataReqConfcb+0xf4>)
   10826:	3a09      	subs	r2, #9
   10828:	801a      	strh	r2, [r3, #0]
   1082a:	4b1f      	ldr	r3, [pc, #124]	; (108a8 <dataReqConfcb+0xf8>)
   1082c:	4798      	blx	r3
   1082e:	4b1f      	ldr	r3, [pc, #124]	; (108ac <dataReqConfcb+0xfc>)
   10830:	681b      	ldr	r3, [r3, #0]
   10832:	2b00      	cmp	r3, #0
   10834:	d0e4      	beq.n	10800 <dataReqConfcb+0x50>
   10836:	4798      	blx	r3
   10838:	e7e2      	b.n	10800 <dataReqConfcb+0x50>
   1083a:	2206      	movs	r2, #6
   1083c:	4b17      	ldr	r3, [pc, #92]	; (1089c <dataReqConfcb+0xec>)
   1083e:	3532      	adds	r5, #50	; 0x32
   10840:	701a      	strb	r2, [r3, #0]
   10842:	4b1b      	ldr	r3, [pc, #108]	; (108b0 <dataReqConfcb+0x100>)
   10844:	781b      	ldrb	r3, [r3, #0]
   10846:	2b0a      	cmp	r3, #10
   10848:	d800      	bhi.n	1084c <dataReqConfcb+0x9c>
   1084a:	3532      	adds	r5, #50	; 0x32
   1084c:	4c0b      	ldr	r4, [pc, #44]	; (1087c <dataReqConfcb+0xcc>)
   1084e:	4b0c      	ldr	r3, [pc, #48]	; (10880 <dataReqConfcb+0xd0>)
   10850:	0020      	movs	r0, r4
   10852:	4798      	blx	r3
   10854:	4b17      	ldr	r3, [pc, #92]	; (108b4 <dataReqConfcb+0x104>)
   10856:	0020      	movs	r0, r4
   10858:	6123      	str	r3, [r4, #16]
   1085a:	2300      	movs	r3, #0
   1085c:	7323      	strb	r3, [r4, #12]
   1085e:	4b0c      	ldr	r3, [pc, #48]	; (10890 <dataReqConfcb+0xe0>)
   10860:	6065      	str	r5, [r4, #4]
   10862:	60a5      	str	r5, [r4, #8]
   10864:	4798      	blx	r3
   10866:	2201      	movs	r2, #1
   10868:	4b0b      	ldr	r3, [pc, #44]	; (10898 <dataReqConfcb+0xe8>)
   1086a:	4f08      	ldr	r7, [pc, #32]	; (1088c <dataReqConfcb+0xdc>)
   1086c:	701a      	strb	r2, [r3, #0]
   1086e:	e7c2      	b.n	107f6 <dataReqConfcb+0x46>
   10870:	4b11      	ldr	r3, [pc, #68]	; (108b8 <dataReqConfcb+0x108>)
   10872:	2000      	movs	r0, #0
   10874:	4798      	blx	r3
   10876:	e7ad      	b.n	107d4 <dataReqConfcb+0x24>
   10878:	0000bd25 	.word	0x0000bd25
   1087c:	200028bc 	.word	0x200028bc
   10880:	0000bfb1 	.word	0x0000bfb1
   10884:	20001ce0 	.word	0x20001ce0
   10888:	0001094d 	.word	0x0001094d
   1088c:	2000285c 	.word	0x2000285c
   10890:	0000c01d 	.word	0x0000c01d
   10894:	200028d0 	.word	0x200028d0
   10898:	20001d0a 	.word	0x20001d0a
   1089c:	20001ce1 	.word	0x20001ce1
   108a0:	00004001 	.word	0x00004001
   108a4:	200028b8 	.word	0x200028b8
   108a8:	0000a60d 	.word	0x0000a60d
   108ac:	20002900 	.word	0x20002900
   108b0:	20002888 	.word	0x20002888
   108b4:	000105ad 	.word	0x000105ad
   108b8:	0000ac8d 	.word	0x0000ac8d

000108bc <keepAliveReqConfcb>:
   108bc:	b570      	push	{r4, r5, r6, lr}
   108be:	0015      	movs	r5, r2
   108c0:	22ff      	movs	r2, #255	; 0xff
   108c2:	4c17      	ldr	r4, [pc, #92]	; (10920 <keepAliveReqConfcb+0x64>)
   108c4:	8823      	ldrh	r3, [r4, #0]
   108c6:	421a      	tst	r2, r3
   108c8:	d103      	bne.n	108d2 <keepAliveReqConfcb+0x16>
   108ca:	0028      	movs	r0, r5
   108cc:	4b15      	ldr	r3, [pc, #84]	; (10924 <keepAliveReqConfcb+0x68>)
   108ce:	4798      	blx	r3
   108d0:	bd70      	pop	{r4, r5, r6, pc}
   108d2:	2903      	cmp	r1, #3
   108d4:	d006      	beq.n	108e4 <keepAliveReqConfcb+0x28>
   108d6:	4b14      	ldr	r3, [pc, #80]	; (10928 <keepAliveReqConfcb+0x6c>)
   108d8:	681a      	ldr	r2, [r3, #0]
   108da:	233c      	movs	r3, #60	; 0x3c
   108dc:	5cd2      	ldrb	r2, [r2, r3]
   108de:	4b13      	ldr	r3, [pc, #76]	; (1092c <keepAliveReqConfcb+0x70>)
   108e0:	701a      	strb	r2, [r3, #0]
   108e2:	e7f2      	b.n	108ca <keepAliveReqConfcb+0xe>
   108e4:	4a11      	ldr	r2, [pc, #68]	; (1092c <keepAliveReqConfcb+0x70>)
   108e6:	7813      	ldrb	r3, [r2, #0]
   108e8:	2b00      	cmp	r3, #0
   108ea:	d0ee      	beq.n	108ca <keepAliveReqConfcb+0xe>
   108ec:	3b01      	subs	r3, #1
   108ee:	b2db      	uxtb	r3, r3
   108f0:	7013      	strb	r3, [r2, #0]
   108f2:	2b00      	cmp	r3, #0
   108f4:	d1e9      	bne.n	108ca <keepAliveReqConfcb+0xe>
   108f6:	4a0e      	ldr	r2, [pc, #56]	; (10930 <keepAliveReqConfcb+0x74>)
   108f8:	480e      	ldr	r0, [pc, #56]	; (10934 <keepAliveReqConfcb+0x78>)
   108fa:	7013      	strb	r3, [r2, #0]
   108fc:	4b0e      	ldr	r3, [pc, #56]	; (10938 <keepAliveReqConfcb+0x7c>)
   108fe:	4798      	blx	r3
   10900:	2208      	movs	r2, #8
   10902:	4b0e      	ldr	r3, [pc, #56]	; (1093c <keepAliveReqConfcb+0x80>)
   10904:	480e      	ldr	r0, [pc, #56]	; (10940 <keepAliveReqConfcb+0x84>)
   10906:	701a      	strb	r2, [r3, #0]
   10908:	2301      	movs	r3, #1
   1090a:	425b      	negs	r3, r3
   1090c:	8023      	strh	r3, [r4, #0]
   1090e:	4b0d      	ldr	r3, [pc, #52]	; (10944 <keepAliveReqConfcb+0x88>)
   10910:	4798      	blx	r3
   10912:	4b0d      	ldr	r3, [pc, #52]	; (10948 <keepAliveReqConfcb+0x8c>)
   10914:	681b      	ldr	r3, [r3, #0]
   10916:	2b00      	cmp	r3, #0
   10918:	d0d7      	beq.n	108ca <keepAliveReqConfcb+0xe>
   1091a:	4798      	blx	r3
   1091c:	e7d5      	b.n	108ca <keepAliveReqConfcb+0xe>
   1091e:	46c0      	nop			; (mov r8, r8)
   10920:	200028b8 	.word	0x200028b8
   10924:	0000bd25 	.word	0x0000bd25
   10928:	2000285c 	.word	0x2000285c
   1092c:	200028d0 	.word	0x200028d0
   10930:	20001d0a 	.word	0x20001d0a
   10934:	200028bc 	.word	0x200028bc
   10938:	0000bfb1 	.word	0x0000bfb1
   1093c:	20001ce1 	.word	0x20001ce1
   10940:	00004001 	.word	0x00004001
   10944:	0000a60d 	.word	0x0000a60d
   10948:	20002900 	.word	0x20002900

0001094c <rxOffEdKeepAliveTimerHandler>:
   1094c:	b5f0      	push	{r4, r5, r6, r7, lr}
   1094e:	46de      	mov	lr, fp
   10950:	4657      	mov	r7, sl
   10952:	464e      	mov	r6, r9
   10954:	4645      	mov	r5, r8
   10956:	b5e0      	push	{r5, r6, r7, lr}
   10958:	b091      	sub	sp, #68	; 0x44
   1095a:	aa02      	add	r2, sp, #8
   1095c:	4694      	mov	ip, r2
   1095e:	2716      	movs	r7, #22
   10960:	22ff      	movs	r2, #255	; 0xff
   10962:	4e34      	ldr	r6, [pc, #208]	; (10a34 <rxOffEdKeepAliveTimerHandler+0xe8>)
   10964:	4467      	add	r7, ip
   10966:	8833      	ldrh	r3, [r6, #0]
   10968:	2088      	movs	r0, #136	; 0x88
   1096a:	4393      	bics	r3, r2
   1096c:	803b      	strh	r3, [r7, #0]
   1096e:	4b32      	ldr	r3, [pc, #200]	; (10a38 <rxOffEdKeepAliveTimerHandler+0xec>)
   10970:	4798      	blx	r3
   10972:	1e05      	subs	r5, r0, #0
   10974:	d040      	beq.n	109f8 <rxOffEdKeepAliveTimerHandler+0xac>
   10976:	4c31      	ldr	r4, [pc, #196]	; (10a3c <rxOffEdKeepAliveTimerHandler+0xf0>)
   10978:	4b31      	ldr	r3, [pc, #196]	; (10a40 <rxOffEdKeepAliveTimerHandler+0xf4>)
   1097a:	0020      	movs	r0, r4
   1097c:	4798      	blx	r3
   1097e:	22fa      	movs	r2, #250	; 0xfa
   10980:	4b30      	ldr	r3, [pc, #192]	; (10a44 <rxOffEdKeepAliveTimerHandler+0xf8>)
   10982:	0092      	lsls	r2, r2, #2
   10984:	6123      	str	r3, [r4, #16]
   10986:	4b30      	ldr	r3, [pc, #192]	; (10a48 <rxOffEdKeepAliveTimerHandler+0xfc>)
   10988:	0020      	movs	r0, r4
   1098a:	469a      	mov	sl, r3
   1098c:	681b      	ldr	r3, [r3, #0]
   1098e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   10990:	4353      	muls	r3, r2
   10992:	6063      	str	r3, [r4, #4]
   10994:	60a3      	str	r3, [r4, #8]
   10996:	2300      	movs	r3, #0
   10998:	4699      	mov	r9, r3
   1099a:	7323      	strb	r3, [r4, #12]
   1099c:	4b2b      	ldr	r3, [pc, #172]	; (10a4c <rxOffEdKeepAliveTimerHandler+0x100>)
   1099e:	469b      	mov	fp, r3
   109a0:	4798      	blx	r3
   109a2:	4b2b      	ldr	r3, [pc, #172]	; (10a50 <rxOffEdKeepAliveTimerHandler+0x104>)
   109a4:	8831      	ldrh	r1, [r6, #0]
   109a6:	4698      	mov	r8, r3
   109a8:	4642      	mov	r2, r8
   109aa:	781b      	ldrb	r3, [r3, #0]
   109ac:	ae08      	add	r6, sp, #32
   109ae:	3301      	adds	r3, #1
   109b0:	7013      	strb	r3, [r2, #0]
   109b2:	b289      	uxth	r1, r1
   109b4:	883a      	ldrh	r2, [r7, #0]
   109b6:	0033      	movs	r3, r6
   109b8:	9705      	str	r7, [sp, #20]
   109ba:	2001      	movs	r0, #1
   109bc:	4f25      	ldr	r7, [pc, #148]	; (10a54 <rxOffEdKeepAliveTimerHandler+0x108>)
   109be:	47b8      	blx	r7
   109c0:	2220      	movs	r2, #32
   109c2:	7873      	ldrb	r3, [r6, #1]
   109c4:	0029      	movs	r1, r5
   109c6:	4313      	orrs	r3, r2
   109c8:	22ef      	movs	r2, #239	; 0xef
   109ca:	4013      	ands	r3, r2
   109cc:	7073      	strb	r3, [r6, #1]
   109ce:	0030      	movs	r0, r6
   109d0:	4b21      	ldr	r3, [pc, #132]	; (10a58 <rxOffEdKeepAliveTimerHandler+0x10c>)
   109d2:	4798      	blx	r3
   109d4:	2331      	movs	r3, #49	; 0x31
   109d6:	542b      	strb	r3, [r5, r0]
   109d8:	4b20      	ldr	r3, [pc, #128]	; (10a5c <rxOffEdKeepAliveTimerHandler+0x110>)
   109da:	0001      	movs	r1, r0
   109dc:	9303      	str	r3, [sp, #12]
   109de:	464b      	mov	r3, r9
   109e0:	9302      	str	r3, [sp, #8]
   109e2:	9b05      	ldr	r3, [sp, #20]
   109e4:	0030      	movs	r0, r6
   109e6:	9301      	str	r3, [sp, #4]
   109e8:	2302      	movs	r3, #2
   109ea:	4e1d      	ldr	r6, [pc, #116]	; (10a60 <rxOffEdKeepAliveTimerHandler+0x114>)
   109ec:	9300      	str	r3, [sp, #0]
   109ee:	2201      	movs	r2, #1
   109f0:	002b      	movs	r3, r5
   109f2:	47b0      	blx	r6
   109f4:	1e06      	subs	r6, r0, #0
   109f6:	d006      	beq.n	10a06 <rxOffEdKeepAliveTimerHandler+0xba>
   109f8:	b011      	add	sp, #68	; 0x44
   109fa:	bc3c      	pop	{r2, r3, r4, r5}
   109fc:	4690      	mov	r8, r2
   109fe:	4699      	mov	r9, r3
   10a00:	46a2      	mov	sl, r4
   10a02:	46ab      	mov	fp, r5
   10a04:	bdf0      	pop	{r4, r5, r6, r7, pc}
   10a06:	0028      	movs	r0, r5
   10a08:	4b16      	ldr	r3, [pc, #88]	; (10a64 <rxOffEdKeepAliveTimerHandler+0x118>)
   10a0a:	4798      	blx	r3
   10a0c:	4643      	mov	r3, r8
   10a0e:	4642      	mov	r2, r8
   10a10:	781b      	ldrb	r3, [r3, #0]
   10a12:	0020      	movs	r0, r4
   10a14:	3b01      	subs	r3, #1
   10a16:	7013      	strb	r3, [r2, #0]
   10a18:	4b0a      	ldr	r3, [pc, #40]	; (10a44 <rxOffEdKeepAliveTimerHandler+0xf8>)
   10a1a:	22fa      	movs	r2, #250	; 0xfa
   10a1c:	6123      	str	r3, [r4, #16]
   10a1e:	4653      	mov	r3, sl
   10a20:	681b      	ldr	r3, [r3, #0]
   10a22:	0092      	lsls	r2, r2, #2
   10a24:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   10a26:	7326      	strb	r6, [r4, #12]
   10a28:	4353      	muls	r3, r2
   10a2a:	6063      	str	r3, [r4, #4]
   10a2c:	60a3      	str	r3, [r4, #8]
   10a2e:	47d8      	blx	fp
   10a30:	e7e2      	b.n	109f8 <rxOffEdKeepAliveTimerHandler+0xac>
   10a32:	46c0      	nop			; (mov r8, r8)
   10a34:	200028b8 	.word	0x200028b8
   10a38:	0000bc69 	.word	0x0000bc69
   10a3c:	200028bc 	.word	0x200028bc
   10a40:	0000bfb1 	.word	0x0000bfb1
   10a44:	0001094d 	.word	0x0001094d
   10a48:	2000285c 	.word	0x2000285c
   10a4c:	0000c01d 	.word	0x0000c01d
   10a50:	20001ce0 	.word	0x20001ce0
   10a54:	0000f081 	.word	0x0000f081
   10a58:	0000f0d1 	.word	0x0000f0d1
   10a5c:	000107b1 	.word	0x000107b1
   10a60:	0000f15d 	.word	0x0000f15d
   10a64:	0000bd25 	.word	0x0000bd25

00010a68 <MiApp_EstablishConnection>:
   10a68:	b5f0      	push	{r4, r5, r6, r7, lr}
   10a6a:	46c6      	mov	lr, r8
   10a6c:	2417      	movs	r4, #23
   10a6e:	b500      	push	{lr}
   10a70:	001e      	movs	r6, r3
   10a72:	4b33      	ldr	r3, [pc, #204]	; (10b40 <MiApp_EstablishConnection+0xd8>)
   10a74:	b090      	sub	sp, #64	; 0x40
   10a76:	681b      	ldr	r3, [r3, #0]
   10a78:	446c      	add	r4, sp
   10a7a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   10a7c:	0015      	movs	r5, r2
   10a7e:	9307      	str	r3, [sp, #28]
   10a80:	4b30      	ldr	r3, [pc, #192]	; (10b44 <MiApp_EstablishConnection+0xdc>)
   10a82:	7020      	strb	r0, [r4, #0]
   10a84:	4798      	blx	r3
   10a86:	7823      	ldrb	r3, [r4, #0]
   10a88:	40d8      	lsrs	r0, r3
   10a8a:	0003      	movs	r3, r0
   10a8c:	2001      	movs	r0, #1
   10a8e:	07db      	lsls	r3, r3, #31
   10a90:	d508      	bpl.n	10aa4 <MiApp_EstablishConnection+0x3c>
   10a92:	9b16      	ldr	r3, [sp, #88]	; 0x58
   10a94:	2b00      	cmp	r3, #0
   10a96:	d005      	beq.n	10aa4 <MiApp_EstablishConnection+0x3c>
   10a98:	4b2b      	ldr	r3, [pc, #172]	; (10b48 <MiApp_EstablishConnection+0xe0>)
   10a9a:	4698      	mov	r8, r3
   10a9c:	781b      	ldrb	r3, [r3, #0]
   10a9e:	2b00      	cmp	r3, #0
   10aa0:	d104      	bne.n	10aac <MiApp_EstablishConnection+0x44>
   10aa2:	2000      	movs	r0, #0
   10aa4:	b010      	add	sp, #64	; 0x40
   10aa6:	bc04      	pop	{r2}
   10aa8:	4690      	mov	r8, r2
   10aaa:	bdf0      	pop	{r4, r5, r6, r7, pc}
   10aac:	2088      	movs	r0, #136	; 0x88
   10aae:	4b27      	ldr	r3, [pc, #156]	; (10b4c <MiApp_EstablishConnection+0xe4>)
   10ab0:	4798      	blx	r3
   10ab2:	1e07      	subs	r7, r0, #0
   10ab4:	d0f5      	beq.n	10aa2 <MiApp_EstablishConnection+0x3a>
   10ab6:	0021      	movs	r1, r4
   10ab8:	4b25      	ldr	r3, [pc, #148]	; (10b50 <MiApp_EstablishConnection+0xe8>)
   10aba:	2000      	movs	r0, #0
   10abc:	4798      	blx	r3
   10abe:	4642      	mov	r2, r8
   10ac0:	2304      	movs	r3, #4
   10ac2:	7013      	strb	r3, [r2, #0]
   10ac4:	4b23      	ldr	r3, [pc, #140]	; (10b54 <MiApp_EstablishConnection+0xec>)
   10ac6:	4924      	ldr	r1, [pc, #144]	; (10b58 <MiApp_EstablishConnection+0xf0>)
   10ac8:	701e      	strb	r6, [r3, #0]
   10aca:	786b      	ldrb	r3, [r5, #1]
   10acc:	782a      	ldrb	r2, [r5, #0]
   10ace:	021b      	lsls	r3, r3, #8
   10ad0:	18d2      	adds	r2, r2, r3
   10ad2:	b292      	uxth	r2, r2
   10ad4:	ab08      	add	r3, sp, #32
   10ad6:	2001      	movs	r0, #1
   10ad8:	4c20      	ldr	r4, [pc, #128]	; (10b5c <MiApp_EstablishConnection+0xf4>)
   10ada:	47a0      	blx	r4
   10adc:	466b      	mov	r3, sp
   10ade:	2221      	movs	r2, #33	; 0x21
   10ae0:	189b      	adds	r3, r3, r2
   10ae2:	2220      	movs	r2, #32
   10ae4:	781b      	ldrb	r3, [r3, #0]
   10ae6:	2121      	movs	r1, #33	; 0x21
   10ae8:	4313      	orrs	r3, r2
   10aea:	466a      	mov	r2, sp
   10aec:	1852      	adds	r2, r2, r1
   10aee:	7013      	strb	r3, [r2, #0]
   10af0:	0039      	movs	r1, r7
   10af2:	a808      	add	r0, sp, #32
   10af4:	4b1a      	ldr	r3, [pc, #104]	; (10b60 <MiApp_EstablishConnection+0xf8>)
   10af6:	4798      	blx	r3
   10af8:	0003      	movs	r3, r0
   10afa:	2203      	movs	r2, #3
   10afc:	3301      	adds	r3, #1
   10afe:	b2db      	uxtb	r3, r3
   10b00:	543a      	strb	r2, [r7, r0]
   10b02:	54fa      	strb	r2, [r7, r3]
   10b04:	0003      	movs	r3, r0
   10b06:	4680      	mov	r8, r0
   10b08:	3302      	adds	r3, #2
   10b0a:	3003      	adds	r0, #3
   10b0c:	b2db      	uxtb	r3, r3
   10b0e:	b2c0      	uxtb	r0, r0
   10b10:	54fe      	strb	r6, [r7, r3]
   10b12:	a907      	add	r1, sp, #28
   10b14:	1838      	adds	r0, r7, r0
   10b16:	3201      	adds	r2, #1
   10b18:	4b12      	ldr	r3, [pc, #72]	; (10b64 <MiApp_EstablishConnection+0xfc>)
   10b1a:	4798      	blx	r3
   10b1c:	9a16      	ldr	r2, [sp, #88]	; 0x58
   10b1e:	4b12      	ldr	r3, [pc, #72]	; (10b68 <MiApp_EstablishConnection+0x100>)
   10b20:	4641      	mov	r1, r8
   10b22:	601a      	str	r2, [r3, #0]
   10b24:	4b11      	ldr	r3, [pc, #68]	; (10b6c <MiApp_EstablishConnection+0x104>)
   10b26:	9501      	str	r5, [sp, #4]
   10b28:	9303      	str	r3, [sp, #12]
   10b2a:	2300      	movs	r3, #0
   10b2c:	9302      	str	r3, [sp, #8]
   10b2e:	3302      	adds	r3, #2
   10b30:	9300      	str	r3, [sp, #0]
   10b32:	2207      	movs	r2, #7
   10b34:	003b      	movs	r3, r7
   10b36:	a808      	add	r0, sp, #32
   10b38:	4c0d      	ldr	r4, [pc, #52]	; (10b70 <MiApp_EstablishConnection+0x108>)
   10b3a:	47a0      	blx	r4
   10b3c:	e7b2      	b.n	10aa4 <MiApp_EstablishConnection+0x3c>
   10b3e:	46c0      	nop			; (mov r8, r8)
   10b40:	2000285c 	.word	0x2000285c
   10b44:	0000b379 	.word	0x0000b379
   10b48:	20001ce1 	.word	0x20001ce1
   10b4c:	0000bc69 	.word	0x0000bc69
   10b50:	0000d995 	.word	0x0000d995
   10b54:	200028fc 	.word	0x200028fc
   10b58:	0000ffff 	.word	0x0000ffff
   10b5c:	0000f081 	.word	0x0000f081
   10b60:	0000f0d1 	.word	0x0000f0d1
   10b64:	00014d37 	.word	0x00014d37
   10b68:	20001d0c 	.word	0x20001d0c
   10b6c:	00010611 	.word	0x00010611
   10b70:	0000f15d 	.word	0x0000f15d

00010b74 <MiApp_SearchConnection>:
   10b74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   10b76:	0003      	movs	r3, r0
   10b78:	2001      	movs	r0, #1
   10b7a:	2b0e      	cmp	r3, #14
   10b7c:	d80a      	bhi.n	10b94 <MiApp_SearchConnection+0x20>
   10b7e:	2a00      	cmp	r2, #0
   10b80:	d008      	beq.n	10b94 <MiApp_SearchConnection+0x20>
   10b82:	4d19      	ldr	r5, [pc, #100]	; (10be8 <MiApp_SearchConnection+0x74>)
   10b84:	2604      	movs	r6, #4
   10b86:	782c      	ldrb	r4, [r5, #0]
   10b88:	0027      	movs	r7, r4
   10b8a:	43b7      	bics	r7, r6
   10b8c:	2f01      	cmp	r7, #1
   10b8e:	d002      	beq.n	10b96 <MiApp_SearchConnection+0x22>
   10b90:	2c08      	cmp	r4, #8
   10b92:	d000      	beq.n	10b96 <MiApp_SearchConnection+0x22>
   10b94:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   10b96:	2003      	movs	r0, #3
   10b98:	7028      	strb	r0, [r5, #0]
   10b9a:	2500      	movs	r5, #0
   10b9c:	4813      	ldr	r0, [pc, #76]	; (10bec <MiApp_SearchConnection+0x78>)
   10b9e:	4c14      	ldr	r4, [pc, #80]	; (10bf0 <MiApp_SearchConnection+0x7c>)
   10ba0:	7003      	strb	r3, [r0, #0]
   10ba2:	4b14      	ldr	r3, [pc, #80]	; (10bf4 <MiApp_SearchConnection+0x80>)
   10ba4:	6019      	str	r1, [r3, #0]
   10ba6:	4b14      	ldr	r3, [pc, #80]	; (10bf8 <MiApp_SearchConnection+0x84>)
   10ba8:	681b      	ldr	r3, [r3, #0]
   10baa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   10bac:	6023      	str	r3, [r4, #0]
   10bae:	705d      	strb	r5, [r3, #1]
   10bb0:	2308      	movs	r3, #8
   10bb2:	6820      	ldr	r0, [r4, #0]
   10bb4:	7003      	strb	r3, [r0, #0]
   10bb6:	6823      	ldr	r3, [r4, #0]
   10bb8:	6059      	str	r1, [r3, #4]
   10bba:	4b10      	ldr	r3, [pc, #64]	; (10bfc <MiApp_SearchConnection+0x88>)
   10bbc:	601a      	str	r2, [r3, #0]
   10bbe:	4b10      	ldr	r3, [pc, #64]	; (10c00 <MiApp_SearchConnection+0x8c>)
   10bc0:	4798      	blx	r3
   10bc2:	4e10      	ldr	r6, [pc, #64]	; (10c04 <MiApp_SearchConnection+0x90>)
   10bc4:	2101      	movs	r1, #1
   10bc6:	7035      	strb	r5, [r6, #0]
   10bc8:	2201      	movs	r2, #1
   10bca:	07c3      	lsls	r3, r0, #31
   10bcc:	d501      	bpl.n	10bd2 <MiApp_SearchConnection+0x5e>
   10bce:	e006      	b.n	10bde <MiApp_SearchConnection+0x6a>
   10bd0:	0019      	movs	r1, r3
   10bd2:	1c4b      	adds	r3, r1, #1
   10bd4:	0052      	lsls	r2, r2, #1
   10bd6:	b2db      	uxtb	r3, r3
   10bd8:	4202      	tst	r2, r0
   10bda:	d0f9      	beq.n	10bd0 <MiApp_SearchConnection+0x5c>
   10bdc:	7031      	strb	r1, [r6, #0]
   10bde:	6820      	ldr	r0, [r4, #0]
   10be0:	4b09      	ldr	r3, [pc, #36]	; (10c08 <MiApp_SearchConnection+0x94>)
   10be2:	4798      	blx	r3
   10be4:	e7d6      	b.n	10b94 <MiApp_SearchConnection+0x20>
   10be6:	46c0      	nop			; (mov r8, r8)
   10be8:	20001ce1 	.word	0x20001ce1
   10bec:	200028d8 	.word	0x200028d8
   10bf0:	20001d18 	.word	0x20001d18
   10bf4:	200028f8 	.word	0x200028f8
   10bf8:	2000285c 	.word	0x2000285c
   10bfc:	20001d10 	.word	0x20001d10
   10c00:	0000b379 	.word	0x0000b379
   10c04:	20002888 	.word	0x20002888
   10c08:	00010349 	.word	0x00010349

00010c0c <calculatePermitCapacity>:
   10c0c:	b5f0      	push	{r4, r5, r6, r7, lr}
   10c0e:	46de      	mov	lr, fp
   10c10:	4657      	mov	r7, sl
   10c12:	4645      	mov	r5, r8
   10c14:	464e      	mov	r6, r9
   10c16:	b5e0      	push	{r5, r6, r7, lr}
   10c18:	4b51      	ldr	r3, [pc, #324]	; (10d60 <calculatePermitCapacity+0x154>)
   10c1a:	b089      	sub	sp, #36	; 0x24
   10c1c:	469b      	mov	fp, r3
   10c1e:	681b      	ldr	r3, [r3, #0]
   10c20:	9002      	str	r0, [sp, #8]
   10c22:	9103      	str	r1, [sp, #12]
   10c24:	4698      	mov	r8, r3
   10c26:	7e9b      	ldrb	r3, [r3, #26]
   10c28:	469a      	mov	sl, r3
   10c2a:	2b00      	cmp	r3, #0
   10c2c:	d100      	bne.n	10c30 <calculatePermitCapacity+0x24>
   10c2e:	e08f      	b.n	10d50 <calculatePermitCapacity+0x144>
   10c30:	2300      	movs	r3, #0
   10c32:	4e4c      	ldr	r6, [pc, #304]	; (10d64 <calculatePermitCapacity+0x158>)
   10c34:	af06      	add	r7, sp, #24
   10c36:	4699      	mov	r9, r3
   10c38:	003a      	movs	r2, r7
   10c3a:	9300      	str	r3, [sp, #0]
   10c3c:	0033      	movs	r3, r6
   10c3e:	4647      	mov	r7, r8
   10c40:	464e      	mov	r6, r9
   10c42:	2500      	movs	r5, #0
   10c44:	4699      	mov	r9, r3
   10c46:	4690      	mov	r8, r2
   10c48:	e014      	b.n	10c74 <calculatePermitCapacity+0x68>
   10c4a:	2201      	movs	r2, #1
   10c4c:	4252      	negs	r2, r2
   10c4e:	17d3      	asrs	r3, r2, #31
   10c50:	0021      	movs	r1, r4
   10c52:	9206      	str	r2, [sp, #24]
   10c54:	9307      	str	r3, [sp, #28]
   10c56:	4640      	mov	r0, r8
   10c58:	3209      	adds	r2, #9
   10c5a:	47c8      	blx	r9
   10c5c:	2800      	cmp	r0, #0
   10c5e:	d017      	beq.n	10c90 <calculatePermitCapacity+0x84>
   10c60:	465b      	mov	r3, fp
   10c62:	681f      	ldr	r7, [r3, #0]
   10c64:	3501      	adds	r5, #1
   10c66:	7ebb      	ldrb	r3, [r7, #26]
   10c68:	3601      	adds	r6, #1
   10c6a:	469a      	mov	sl, r3
   10c6c:	b2ed      	uxtb	r5, r5
   10c6e:	b2f6      	uxtb	r6, r6
   10c70:	4555      	cmp	r5, sl
   10c72:	d213      	bcs.n	10c9c <calculatePermitCapacity+0x90>
   10c74:	683b      	ldr	r3, [r7, #0]
   10c76:	2200      	movs	r2, #0
   10c78:	469c      	mov	ip, r3
   10c7a:	2300      	movs	r3, #0
   10c7c:	012c      	lsls	r4, r5, #4
   10c7e:	4464      	add	r4, ip
   10c80:	9206      	str	r2, [sp, #24]
   10c82:	9307      	str	r3, [sp, #28]
   10c84:	0021      	movs	r1, r4
   10c86:	3208      	adds	r2, #8
   10c88:	4640      	mov	r0, r8
   10c8a:	47c8      	blx	r9
   10c8c:	2800      	cmp	r0, #0
   10c8e:	d1dc      	bne.n	10c4a <calculatePermitCapacity+0x3e>
   10c90:	2301      	movs	r3, #1
   10c92:	3501      	adds	r5, #1
   10c94:	b2ed      	uxtb	r5, r5
   10c96:	9300      	str	r3, [sp, #0]
   10c98:	4555      	cmp	r5, sl
   10c9a:	d3eb      	bcc.n	10c74 <calculatePermitCapacity+0x68>
   10c9c:	4653      	mov	r3, sl
   10c9e:	2264      	movs	r2, #100	; 0x64
   10ca0:	46b8      	mov	r8, r7
   10ca2:	9304      	str	r3, [sp, #16]
   10ca4:	1b9b      	subs	r3, r3, r6
   10ca6:	435a      	muls	r2, r3
   10ca8:	9205      	str	r2, [sp, #20]
   10caa:	4643      	mov	r3, r8
   10cac:	7edb      	ldrb	r3, [r3, #27]
   10cae:	469a      	mov	sl, r3
   10cb0:	2b01      	cmp	r3, #1
   10cb2:	d952      	bls.n	10d5a <calculatePermitCapacity+0x14e>
   10cb4:	4643      	mov	r3, r8
   10cb6:	685b      	ldr	r3, [r3, #4]
   10cb8:	4e2a      	ldr	r6, [pc, #168]	; (10d64 <calculatePermitCapacity+0x158>)
   10cba:	9301      	str	r3, [sp, #4]
   10cbc:	2300      	movs	r3, #0
   10cbe:	4699      	mov	r9, r3
   10cc0:	0033      	movs	r3, r6
   10cc2:	2501      	movs	r5, #1
   10cc4:	464e      	mov	r6, r9
   10cc6:	af06      	add	r7, sp, #24
   10cc8:	4699      	mov	r9, r3
   10cca:	e013      	b.n	10cf4 <calculatePermitCapacity+0xe8>
   10ccc:	2201      	movs	r2, #1
   10cce:	4252      	negs	r2, r2
   10cd0:	17d3      	asrs	r3, r2, #31
   10cd2:	0021      	movs	r1, r4
   10cd4:	9206      	str	r2, [sp, #24]
   10cd6:	9307      	str	r3, [sp, #28]
   10cd8:	0038      	movs	r0, r7
   10cda:	3209      	adds	r2, #9
   10cdc:	47c8      	blx	r9
   10cde:	2800      	cmp	r0, #0
   10ce0:	d018      	beq.n	10d14 <calculatePermitCapacity+0x108>
   10ce2:	4643      	mov	r3, r8
   10ce4:	7edb      	ldrb	r3, [r3, #27]
   10ce6:	3501      	adds	r5, #1
   10ce8:	469a      	mov	sl, r3
   10cea:	3601      	adds	r6, #1
   10cec:	b2ed      	uxtb	r5, r5
   10cee:	b2f6      	uxtb	r6, r6
   10cf0:	4555      	cmp	r5, sl
   10cf2:	d215      	bcs.n	10d20 <calculatePermitCapacity+0x114>
   10cf4:	9b01      	ldr	r3, [sp, #4]
   10cf6:	2200      	movs	r2, #0
   10cf8:	469c      	mov	ip, r3
   10cfa:	2300      	movs	r3, #0
   10cfc:	00ac      	lsls	r4, r5, #2
   10cfe:	1964      	adds	r4, r4, r5
   10d00:	00a4      	lsls	r4, r4, #2
   10d02:	4464      	add	r4, ip
   10d04:	9206      	str	r2, [sp, #24]
   10d06:	9307      	str	r3, [sp, #28]
   10d08:	0021      	movs	r1, r4
   10d0a:	3208      	adds	r2, #8
   10d0c:	0038      	movs	r0, r7
   10d0e:	47c8      	blx	r9
   10d10:	2800      	cmp	r0, #0
   10d12:	d1db      	bne.n	10ccc <calculatePermitCapacity+0xc0>
   10d14:	2301      	movs	r3, #1
   10d16:	3501      	adds	r5, #1
   10d18:	b2ed      	uxtb	r5, r5
   10d1a:	9300      	str	r3, [sp, #0]
   10d1c:	4555      	cmp	r5, sl
   10d1e:	d3e9      	bcc.n	10cf4 <calculatePermitCapacity+0xe8>
   10d20:	0035      	movs	r5, r6
   10d22:	4c11      	ldr	r4, [pc, #68]	; (10d68 <calculatePermitCapacity+0x15c>)
   10d24:	9904      	ldr	r1, [sp, #16]
   10d26:	9805      	ldr	r0, [sp, #20]
   10d28:	47a0      	blx	r4
   10d2a:	9b02      	ldr	r3, [sp, #8]
   10d2c:	7018      	strb	r0, [r3, #0]
   10d2e:	465b      	mov	r3, fp
   10d30:	2064      	movs	r0, #100	; 0x64
   10d32:	681b      	ldr	r3, [r3, #0]
   10d34:	7ed9      	ldrb	r1, [r3, #27]
   10d36:	1b4d      	subs	r5, r1, r5
   10d38:	4368      	muls	r0, r5
   10d3a:	47a0      	blx	r4
   10d3c:	9b03      	ldr	r3, [sp, #12]
   10d3e:	7018      	strb	r0, [r3, #0]
   10d40:	9800      	ldr	r0, [sp, #0]
   10d42:	b009      	add	sp, #36	; 0x24
   10d44:	bc3c      	pop	{r2, r3, r4, r5}
   10d46:	4690      	mov	r8, r2
   10d48:	4699      	mov	r9, r3
   10d4a:	46a2      	mov	sl, r4
   10d4c:	46ab      	mov	fp, r5
   10d4e:	bdf0      	pop	{r4, r5, r6, r7, pc}
   10d50:	2300      	movs	r3, #0
   10d52:	9305      	str	r3, [sp, #20]
   10d54:	9304      	str	r3, [sp, #16]
   10d56:	9300      	str	r3, [sp, #0]
   10d58:	e7a7      	b.n	10caa <calculatePermitCapacity+0x9e>
   10d5a:	2500      	movs	r5, #0
   10d5c:	e7e1      	b.n	10d22 <calculatePermitCapacity+0x116>
   10d5e:	46c0      	nop			; (mov r8, r8)
   10d60:	2000285c 	.word	0x2000285c
   10d64:	00014d19 	.word	0x00014d19
   10d68:	000125d5 	.word	0x000125d5

00010d6c <handleJoinMessage>:
   10d6c:	b5f0      	push	{r4, r5, r6, r7, lr}
   10d6e:	464e      	mov	r6, r9
   10d70:	4657      	mov	r7, sl
   10d72:	4645      	mov	r5, r8
   10d74:	46de      	mov	lr, fp
   10d76:	001c      	movs	r4, r3
   10d78:	b5e0      	push	{r5, r6, r7, lr}
   10d7a:	b095      	sub	sp, #84	; 0x54
   10d7c:	ab1e      	add	r3, sp, #120	; 0x78
   10d7e:	781b      	ldrb	r3, [r3, #0]
   10d80:	0006      	movs	r6, r0
   10d82:	4699      	mov	r9, r3
   10d84:	7823      	ldrb	r3, [r4, #0]
   10d86:	4688      	mov	r8, r1
   10d88:	0017      	movs	r7, r2
   10d8a:	2b08      	cmp	r3, #8
   10d8c:	d84f      	bhi.n	10e2e <handleJoinMessage+0xc2>
   10d8e:	4ad9      	ldr	r2, [pc, #868]	; (110f4 <handleJoinMessage+0x388>)
   10d90:	009b      	lsls	r3, r3, #2
   10d92:	58d3      	ldr	r3, [r2, r3]
   10d94:	469f      	mov	pc, r3
   10d96:	4bd8      	ldr	r3, [pc, #864]	; (110f8 <handleJoinMessage+0x38c>)
   10d98:	781b      	ldrb	r3, [r3, #0]
   10d9a:	2b06      	cmp	r3, #6
   10d9c:	d147      	bne.n	10e2e <handleJoinMessage+0xc2>
   10d9e:	7863      	ldrb	r3, [r4, #1]
   10da0:	ae0c      	add	r6, sp, #48	; 0x30
   10da2:	079b      	lsls	r3, r3, #30
   10da4:	d000      	beq.n	10da8 <handleJoinMessage+0x3c>
   10da6:	e25a      	b.n	1125e <handleJoinMessage+0x4f2>
   10da8:	4bd4      	ldr	r3, [pc, #848]	; (110fc <handleJoinMessage+0x390>)
   10daa:	2201      	movs	r2, #1
   10dac:	8819      	ldrh	r1, [r3, #0]
   10dae:	2001      	movs	r0, #1
   10db0:	0033      	movs	r3, r6
   10db2:	b289      	uxth	r1, r1
   10db4:	4cd2      	ldr	r4, [pc, #840]	; (11100 <handleJoinMessage+0x394>)
   10db6:	47a0      	blx	r4
   10db8:	2220      	movs	r2, #32
   10dba:	7873      	ldrb	r3, [r6, #1]
   10dbc:	4313      	orrs	r3, r2
   10dbe:	7073      	strb	r3, [r6, #1]
   10dc0:	2088      	movs	r0, #136	; 0x88
   10dc2:	4bd0      	ldr	r3, [pc, #832]	; (11104 <handleJoinMessage+0x398>)
   10dc4:	4798      	blx	r3
   10dc6:	4682      	mov	sl, r0
   10dc8:	2800      	cmp	r0, #0
   10dca:	d030      	beq.n	10e2e <handleJoinMessage+0xc2>
   10dcc:	4651      	mov	r1, sl
   10dce:	4bce      	ldr	r3, [pc, #824]	; (11108 <handleJoinMessage+0x39c>)
   10dd0:	0030      	movs	r0, r6
   10dd2:	4798      	blx	r3
   10dd4:	0003      	movs	r3, r0
   10dd6:	2204      	movs	r2, #4
   10dd8:	4651      	mov	r1, sl
   10dda:	4683      	mov	fp, r0
   10ddc:	3301      	adds	r3, #1
   10dde:	b2db      	uxtb	r3, r3
   10de0:	540a      	strb	r2, [r1, r0]
   10de2:	465a      	mov	r2, fp
   10de4:	4651      	mov	r1, sl
   10de6:	1c95      	adds	r5, r2, #2
   10de8:	2201      	movs	r2, #1
   10dea:	24ff      	movs	r4, #255	; 0xff
   10dec:	54ca      	strb	r2, [r1, r3]
   10dee:	23ff      	movs	r3, #255	; 0xff
   10df0:	b2ed      	uxtb	r5, r5
   10df2:	4652      	mov	r2, sl
   10df4:	5553      	strb	r3, [r2, r5]
   10df6:	1c6b      	adds	r3, r5, #1
   10df8:	b2db      	uxtb	r3, r3
   10dfa:	54d4      	strb	r4, [r2, r3]
   10dfc:	4bc3      	ldr	r3, [pc, #780]	; (1110c <handleJoinMessage+0x3a0>)
   10dfe:	1ca8      	adds	r0, r5, #2
   10e00:	6819      	ldr	r1, [r3, #0]
   10e02:	b2c0      	uxtb	r0, r0
   10e04:	3110      	adds	r1, #16
   10e06:	2210      	movs	r2, #16
   10e08:	4bc1      	ldr	r3, [pc, #772]	; (11110 <handleJoinMessage+0x3a4>)
   10e0a:	4450      	add	r0, sl
   10e0c:	4798      	blx	r3
   10e0e:	465b      	mov	r3, fp
   10e10:	3512      	adds	r5, #18
   10e12:	1aea      	subs	r2, r5, r3
   10e14:	4bbf      	ldr	r3, [pc, #764]	; (11114 <handleJoinMessage+0x3a8>)
   10e16:	b2d2      	uxtb	r2, r2
   10e18:	9303      	str	r3, [sp, #12]
   10e1a:	2300      	movs	r3, #0
   10e1c:	9302      	str	r3, [sp, #8]
   10e1e:	4643      	mov	r3, r8
   10e20:	9701      	str	r7, [sp, #4]
   10e22:	9300      	str	r3, [sp, #0]
   10e24:	4659      	mov	r1, fp
   10e26:	4653      	mov	r3, sl
   10e28:	0030      	movs	r0, r6
   10e2a:	4cbb      	ldr	r4, [pc, #748]	; (11118 <handleJoinMessage+0x3ac>)
   10e2c:	47a0      	blx	r4
   10e2e:	b015      	add	sp, #84	; 0x54
   10e30:	bc3c      	pop	{r2, r3, r4, r5}
   10e32:	4690      	mov	r8, r2
   10e34:	4699      	mov	r9, r3
   10e36:	46a2      	mov	sl, r4
   10e38:	46ab      	mov	fp, r5
   10e3a:	bdf0      	pop	{r4, r5, r6, r7, pc}
   10e3c:	2200      	movs	r2, #0
   10e3e:	4bb7      	ldr	r3, [pc, #732]	; (1111c <handleJoinMessage+0x3b0>)
   10e40:	48b7      	ldr	r0, [pc, #732]	; (11120 <handleJoinMessage+0x3b4>)
   10e42:	701a      	strb	r2, [r3, #0]
   10e44:	4bb7      	ldr	r3, [pc, #732]	; (11124 <handleJoinMessage+0x3b8>)
   10e46:	4798      	blx	r3
   10e48:	2208      	movs	r2, #8
   10e4a:	4bab      	ldr	r3, [pc, #684]	; (110f8 <handleJoinMessage+0x38c>)
   10e4c:	48b6      	ldr	r0, [pc, #728]	; (11128 <handleJoinMessage+0x3bc>)
   10e4e:	701a      	strb	r2, [r3, #0]
   10e50:	4baa      	ldr	r3, [pc, #680]	; (110fc <handleJoinMessage+0x390>)
   10e52:	3a09      	subs	r2, #9
   10e54:	801a      	strh	r2, [r3, #0]
   10e56:	4bb5      	ldr	r3, [pc, #724]	; (1112c <handleJoinMessage+0x3c0>)
   10e58:	4798      	blx	r3
   10e5a:	4bb5      	ldr	r3, [pc, #724]	; (11130 <handleJoinMessage+0x3c4>)
   10e5c:	681b      	ldr	r3, [r3, #0]
   10e5e:	2b00      	cmp	r3, #0
   10e60:	d0e5      	beq.n	10e2e <handleJoinMessage+0xc2>
   10e62:	4798      	blx	r3
   10e64:	e7e3      	b.n	10e2e <handleJoinMessage+0xc2>
   10e66:	4ba4      	ldr	r3, [pc, #656]	; (110f8 <handleJoinMessage+0x38c>)
   10e68:	781b      	ldrb	r3, [r3, #0]
   10e6a:	2b06      	cmp	r3, #6
   10e6c:	d1df      	bne.n	10e2e <handleJoinMessage+0xc2>
   10e6e:	4bb1      	ldr	r3, [pc, #708]	; (11134 <handleJoinMessage+0x3c8>)
   10e70:	003a      	movs	r2, r7
   10e72:	4699      	mov	r9, r3
   10e74:	0018      	movs	r0, r3
   10e76:	2108      	movs	r1, #8
   10e78:	4baf      	ldr	r3, [pc, #700]	; (11138 <handleJoinMessage+0x3cc>)
   10e7a:	4798      	blx	r3
   10e7c:	2800      	cmp	r0, #0
   10e7e:	d0d6      	beq.n	10e2e <handleJoinMessage+0xc2>
   10e80:	2088      	movs	r0, #136	; 0x88
   10e82:	4ba0      	ldr	r3, [pc, #640]	; (11104 <handleJoinMessage+0x398>)
   10e84:	4798      	blx	r3
   10e86:	1e04      	subs	r4, r0, #0
   10e88:	d0d1      	beq.n	10e2e <handleJoinMessage+0xc2>
   10e8a:	4b9c      	ldr	r3, [pc, #624]	; (110fc <handleJoinMessage+0x390>)
   10e8c:	ad0c      	add	r5, sp, #48	; 0x30
   10e8e:	8819      	ldrh	r1, [r3, #0]
   10e90:	2200      	movs	r2, #0
   10e92:	002b      	movs	r3, r5
   10e94:	b289      	uxth	r1, r1
   10e96:	2001      	movs	r0, #1
   10e98:	4e99      	ldr	r6, [pc, #612]	; (11100 <handleJoinMessage+0x394>)
   10e9a:	47b0      	blx	r6
   10e9c:	2220      	movs	r2, #32
   10e9e:	786b      	ldrb	r3, [r5, #1]
   10ea0:	0021      	movs	r1, r4
   10ea2:	4313      	orrs	r3, r2
   10ea4:	706b      	strb	r3, [r5, #1]
   10ea6:	0028      	movs	r0, r5
   10ea8:	4b97      	ldr	r3, [pc, #604]	; (11108 <handleJoinMessage+0x39c>)
   10eaa:	4798      	blx	r3
   10eac:	2302      	movs	r3, #2
   10eae:	5423      	strb	r3, [r4, r0]
   10eb0:	4ba2      	ldr	r3, [pc, #648]	; (1113c <handleJoinMessage+0x3d0>)
   10eb2:	0006      	movs	r6, r0
   10eb4:	781a      	ldrb	r2, [r3, #0]
   10eb6:	1c43      	adds	r3, r0, #1
   10eb8:	b2db      	uxtb	r3, r3
   10eba:	54e2      	strb	r2, [r4, r3]
   10ebc:	4ba0      	ldr	r3, [pc, #640]	; (11140 <handleJoinMessage+0x3d4>)
   10ebe:	469a      	mov	sl, r3
   10ec0:	4ba0      	ldr	r3, [pc, #640]	; (11144 <handleJoinMessage+0x3d8>)
   10ec2:	4651      	mov	r1, sl
   10ec4:	469b      	mov	fp, r3
   10ec6:	0018      	movs	r0, r3
   10ec8:	4b9f      	ldr	r3, [pc, #636]	; (11148 <handleJoinMessage+0x3dc>)
   10eca:	4798      	blx	r3
   10ecc:	4b9f      	ldr	r3, [pc, #636]	; (1114c <handleJoinMessage+0x3e0>)
   10ece:	4649      	mov	r1, r9
   10ed0:	7018      	strb	r0, [r3, #0]
   10ed2:	1cb3      	adds	r3, r6, #2
   10ed4:	b2db      	uxtb	r3, r3
   10ed6:	54e0      	strb	r0, [r4, r3]
   10ed8:	465b      	mov	r3, fp
   10eda:	781a      	ldrb	r2, [r3, #0]
   10edc:	1cf3      	adds	r3, r6, #3
   10ede:	b2db      	uxtb	r3, r3
   10ee0:	54e2      	strb	r2, [r4, r3]
   10ee2:	4653      	mov	r3, sl
   10ee4:	1d70      	adds	r0, r6, #5
   10ee6:	781a      	ldrb	r2, [r3, #0]
   10ee8:	1d33      	adds	r3, r6, #4
   10eea:	b2db      	uxtb	r3, r3
   10eec:	b2c0      	uxtb	r0, r0
   10eee:	54e2      	strb	r2, [r4, r3]
   10ef0:	1820      	adds	r0, r4, r0
   10ef2:	2208      	movs	r2, #8
   10ef4:	4b86      	ldr	r3, [pc, #536]	; (11110 <handleJoinMessage+0x3a4>)
   10ef6:	4798      	blx	r3
   10ef8:	4b86      	ldr	r3, [pc, #536]	; (11114 <handleJoinMessage+0x3a8>)
   10efa:	9701      	str	r7, [sp, #4]
   10efc:	9303      	str	r3, [sp, #12]
   10efe:	2300      	movs	r3, #0
   10f00:	9302      	str	r3, [sp, #8]
   10f02:	4643      	mov	r3, r8
   10f04:	220d      	movs	r2, #13
   10f06:	9300      	str	r3, [sp, #0]
   10f08:	0031      	movs	r1, r6
   10f0a:	0023      	movs	r3, r4
   10f0c:	0028      	movs	r0, r5
   10f0e:	4c82      	ldr	r4, [pc, #520]	; (11118 <handleJoinMessage+0x3ac>)
   10f10:	47a0      	blx	r4
   10f12:	e78c      	b.n	10e2e <handleJoinMessage+0xc2>
   10f14:	4d78      	ldr	r5, [pc, #480]	; (110f8 <handleJoinMessage+0x38c>)
   10f16:	782b      	ldrb	r3, [r5, #0]
   10f18:	2b03      	cmp	r3, #3
   10f1a:	d000      	beq.n	10f1e <handleJoinMessage+0x1b2>
   10f1c:	e787      	b.n	10e2e <handleJoinMessage+0xc2>
   10f1e:	4f8c      	ldr	r7, [pc, #560]	; (11150 <handleJoinMessage+0x3e4>)
   10f20:	683b      	ldr	r3, [r7, #0]
   10f22:	785a      	ldrb	r2, [r3, #1]
   10f24:	4b8b      	ldr	r3, [pc, #556]	; (11154 <handleJoinMessage+0x3e8>)
   10f26:	469b      	mov	fp, r3
   10f28:	4659      	mov	r1, fp
   10f2a:	2344      	movs	r3, #68	; 0x44
   10f2c:	6809      	ldr	r1, [r1, #0]
   10f2e:	5ccb      	ldrb	r3, [r1, r3]
   10f30:	429a      	cmp	r2, r3
   10f32:	d200      	bcs.n	10f36 <handleJoinMessage+0x1ca>
   10f34:	e12c      	b.n	11190 <handleJoinMessage+0x424>
   10f36:	429a      	cmp	r2, r3
   10f38:	d000      	beq.n	10f3c <handleJoinMessage+0x1d0>
   10f3a:	e778      	b.n	10e2e <handleJoinMessage+0xc2>
   10f3c:	4886      	ldr	r0, [pc, #536]	; (11158 <handleJoinMessage+0x3ec>)
   10f3e:	4b79      	ldr	r3, [pc, #484]	; (11124 <handleJoinMessage+0x3b8>)
   10f40:	4798      	blx	r3
   10f42:	2309      	movs	r3, #9
   10f44:	683a      	ldr	r2, [r7, #0]
   10f46:	4c85      	ldr	r4, [pc, #532]	; (1115c <handleJoinMessage+0x3f0>)
   10f48:	7013      	strb	r3, [r2, #0]
   10f4a:	6839      	ldr	r1, [r7, #0]
   10f4c:	3b04      	subs	r3, #4
   10f4e:	702b      	strb	r3, [r5, #0]
   10f50:	7848      	ldrb	r0, [r1, #1]
   10f52:	6823      	ldr	r3, [r4, #0]
   10f54:	4798      	blx	r3
   10f56:	2300      	movs	r3, #0
   10f58:	6023      	str	r3, [r4, #0]
   10f5a:	e768      	b.n	10e2e <handleJoinMessage+0xc2>
   10f5c:	4f66      	ldr	r7, [pc, #408]	; (110f8 <handleJoinMessage+0x38c>)
   10f5e:	783b      	ldrb	r3, [r7, #0]
   10f60:	2b04      	cmp	r3, #4
   10f62:	d000      	beq.n	10f66 <handleJoinMessage+0x1fa>
   10f64:	e763      	b.n	10e2e <handleJoinMessage+0xc2>
   10f66:	4b7c      	ldr	r3, [pc, #496]	; (11158 <handleJoinMessage+0x3ec>)
   10f68:	0018      	movs	r0, r3
   10f6a:	4698      	mov	r8, r3
   10f6c:	4b6d      	ldr	r3, [pc, #436]	; (11124 <handleJoinMessage+0x3b8>)
   10f6e:	4798      	blx	r3
   10f70:	7860      	ldrb	r0, [r4, #1]
   10f72:	2800      	cmp	r0, #0
   10f74:	d100      	bne.n	10f78 <handleJoinMessage+0x20c>
   10f76:	e1e2      	b.n	1133e <handleJoinMessage+0x5d2>
   10f78:	2305      	movs	r3, #5
   10f7a:	703b      	strb	r3, [r7, #0]
   10f7c:	4c78      	ldr	r4, [pc, #480]	; (11160 <handleJoinMessage+0x3f4>)
   10f7e:	6823      	ldr	r3, [r4, #0]
   10f80:	4798      	blx	r3
   10f82:	2300      	movs	r3, #0
   10f84:	6023      	str	r3, [r4, #0]
   10f86:	e752      	b.n	10e2e <handleJoinMessage+0xc2>
   10f88:	4d5b      	ldr	r5, [pc, #364]	; (110f8 <handleJoinMessage+0x38c>)
   10f8a:	782b      	ldrb	r3, [r5, #0]
   10f8c:	2b07      	cmp	r3, #7
   10f8e:	d000      	beq.n	10f92 <handleJoinMessage+0x226>
   10f90:	e74d      	b.n	10e2e <handleJoinMessage+0xc2>
   10f92:	78a2      	ldrb	r2, [r4, #2]
   10f94:	7863      	ldrb	r3, [r4, #1]
   10f96:	0212      	lsls	r2, r2, #8
   10f98:	4313      	orrs	r3, r2
   10f9a:	4a58      	ldr	r2, [pc, #352]	; (110fc <handleJoinMessage+0x390>)
   10f9c:	4971      	ldr	r1, [pc, #452]	; (11164 <handleJoinMessage+0x3f8>)
   10f9e:	4690      	mov	r8, r2
   10fa0:	8013      	strh	r3, [r2, #0]
   10fa2:	88c2      	ldrh	r2, [r0, #6]
   10fa4:	4b70      	ldr	r3, [pc, #448]	; (11168 <handleJoinMessage+0x3fc>)
   10fa6:	801a      	strh	r2, [r3, #0]
   10fa8:	8843      	ldrh	r3, [r0, #2]
   10faa:	4640      	mov	r0, r8
   10fac:	800b      	strh	r3, [r1, #0]
   10fae:	4b6f      	ldr	r3, [pc, #444]	; (1116c <handleJoinMessage+0x400>)
   10fb0:	4798      	blx	r3
   10fb2:	4c5c      	ldr	r4, [pc, #368]	; (11124 <handleJoinMessage+0x3b8>)
   10fb4:	4868      	ldr	r0, [pc, #416]	; (11158 <handleJoinMessage+0x3ec>)
   10fb6:	47a0      	blx	r4
   10fb8:	4e59      	ldr	r6, [pc, #356]	; (11120 <handleJoinMessage+0x3b4>)
   10fba:	0030      	movs	r0, r6
   10fbc:	47a0      	blx	r4
   10fbe:	21fa      	movs	r1, #250	; 0xfa
   10fc0:	4b64      	ldr	r3, [pc, #400]	; (11154 <handleJoinMessage+0x3e8>)
   10fc2:	0089      	lsls	r1, r1, #2
   10fc4:	681b      	ldr	r3, [r3, #0]
   10fc6:	2432      	movs	r4, #50	; 0x32
   10fc8:	8a9f      	ldrh	r7, [r3, #20]
   10fca:	4b69      	ldr	r3, [pc, #420]	; (11170 <handleJoinMessage+0x404>)
   10fcc:	434f      	muls	r7, r1
   10fce:	0038      	movs	r0, r7
   10fd0:	4699      	mov	r9, r3
   10fd2:	4798      	blx	r3
   10fd4:	4b67      	ldr	r3, [pc, #412]	; (11174 <handleJoinMessage+0x408>)
   10fd6:	4344      	muls	r4, r0
   10fd8:	4798      	blx	r3
   10fda:	4b67      	ldr	r3, [pc, #412]	; (11178 <handleJoinMessage+0x40c>)
   10fdc:	2164      	movs	r1, #100	; 0x64
   10fde:	4798      	blx	r3
   10fe0:	20ff      	movs	r0, #255	; 0xff
   10fe2:	4001      	ands	r1, r0
   10fe4:	0060      	lsls	r0, r4, #1
   10fe6:	4348      	muls	r0, r1
   10fe8:	2164      	movs	r1, #100	; 0x64
   10fea:	47c8      	blx	r9
   10fec:	4b63      	ldr	r3, [pc, #396]	; (1117c <handleJoinMessage+0x410>)
   10fee:	1b3f      	subs	r7, r7, r4
   10ff0:	6133      	str	r3, [r6, #16]
   10ff2:	2301      	movs	r3, #1
   10ff4:	19c7      	adds	r7, r0, r7
   10ff6:	7333      	strb	r3, [r6, #12]
   10ff8:	0030      	movs	r0, r6
   10ffa:	4b61      	ldr	r3, [pc, #388]	; (11180 <handleJoinMessage+0x414>)
   10ffc:	6077      	str	r7, [r6, #4]
   10ffe:	60b7      	str	r7, [r6, #8]
   11000:	4798      	blx	r3
   11002:	2306      	movs	r3, #6
   11004:	4848      	ldr	r0, [pc, #288]	; (11128 <handleJoinMessage+0x3bc>)
   11006:	702b      	strb	r3, [r5, #0]
   11008:	4b48      	ldr	r3, [pc, #288]	; (1112c <handleJoinMessage+0x3c0>)
   1100a:	4798      	blx	r3
   1100c:	4b5d      	ldr	r3, [pc, #372]	; (11184 <handleJoinMessage+0x418>)
   1100e:	681b      	ldr	r3, [r3, #0]
   11010:	2b00      	cmp	r3, #0
   11012:	d100      	bne.n	11016 <handleJoinMessage+0x2aa>
   11014:	e70b      	b.n	10e2e <handleJoinMessage+0xc2>
   11016:	4642      	mov	r2, r8
   11018:	8810      	ldrh	r0, [r2, #0]
   1101a:	b280      	uxth	r0, r0
   1101c:	4798      	blx	r3
   1101e:	e706      	b.n	10e2e <handleJoinMessage+0xc2>
   11020:	4b35      	ldr	r3, [pc, #212]	; (110f8 <handleJoinMessage+0x38c>)
   11022:	781b      	ldrb	r3, [r3, #0]
   11024:	2b06      	cmp	r3, #6
   11026:	d000      	beq.n	1102a <handleJoinMessage+0x2be>
   11028:	e701      	b.n	10e2e <handleJoinMessage+0xc2>
   1102a:	88c7      	ldrh	r7, [r0, #6]
   1102c:	063b      	lsls	r3, r7, #24
   1102e:	d400      	bmi.n	11032 <handleJoinMessage+0x2c6>
   11030:	e6fd      	b.n	10e2e <handleJoinMessage+0xc2>
   11032:	4b48      	ldr	r3, [pc, #288]	; (11154 <handleJoinMessage+0x3e8>)
   11034:	469b      	mov	fp, r3
   11036:	681b      	ldr	r3, [r3, #0]
   11038:	7e9a      	ldrb	r2, [r3, #26]
   1103a:	4699      	mov	r9, r3
   1103c:	2a00      	cmp	r2, #0
   1103e:	d100      	bne.n	11042 <handleJoinMessage+0x2d6>
   11040:	e6f5      	b.n	10e2e <handleJoinMessage+0xc2>
   11042:	4b51      	ldr	r3, [pc, #324]	; (11188 <handleJoinMessage+0x41c>)
   11044:	46a0      	mov	r8, r4
   11046:	2500      	movs	r5, #0
   11048:	469a      	mov	sl, r3
   1104a:	464c      	mov	r4, r9
   1104c:	e005      	b.n	1105a <handleJoinMessage+0x2ee>
   1104e:	3501      	adds	r5, #1
   11050:	b2ed      	uxtb	r5, r5
   11052:	4295      	cmp	r5, r2
   11054:	d300      	bcc.n	11058 <handleJoinMessage+0x2ec>
   11056:	e6ea      	b.n	10e2e <handleJoinMessage+0xc2>
   11058:	88f7      	ldrh	r7, [r6, #6]
   1105a:	2380      	movs	r3, #128	; 0x80
   1105c:	403b      	ands	r3, r7
   1105e:	429d      	cmp	r5, r3
   11060:	d1f5      	bne.n	1104e <handleJoinMessage+0x2e2>
   11062:	6822      	ldr	r2, [r4, #0]
   11064:	012b      	lsls	r3, r5, #4
   11066:	4691      	mov	r9, r2
   11068:	4499      	add	r9, r3
   1106a:	4643      	mov	r3, r8
   1106c:	2208      	movs	r2, #8
   1106e:	1c59      	adds	r1, r3, #1
   11070:	4648      	mov	r0, r9
   11072:	47d0      	blx	sl
   11074:	2800      	cmp	r0, #0
   11076:	d106      	bne.n	11086 <handleJoinMessage+0x31a>
   11078:	464a      	mov	r2, r9
   1107a:	8de3      	ldrh	r3, [r4, #46]	; 0x2e
   1107c:	6093      	str	r3, [r2, #8]
   1107e:	465b      	mov	r3, fp
   11080:	681c      	ldr	r4, [r3, #0]
   11082:	7ea2      	ldrb	r2, [r4, #26]
   11084:	e7e3      	b.n	1104e <handleJoinMessage+0x2e2>
   11086:	23ff      	movs	r3, #255	; 0xff
   11088:	423b      	tst	r3, r7
   1108a:	d100      	bne.n	1108e <handleJoinMessage+0x322>
   1108c:	e1e2      	b.n	11454 <handleJoinMessage+0x6e8>
   1108e:	ab06      	add	r3, sp, #24
   11090:	2416      	movs	r4, #22
   11092:	469c      	mov	ip, r3
   11094:	0038      	movs	r0, r7
   11096:	4464      	add	r4, ip
   11098:	8027      	strh	r7, [r4, #0]
   1109a:	4b3c      	ldr	r3, [pc, #240]	; (1118c <handleJoinMessage+0x420>)
   1109c:	4298      	cmp	r0, r3
   1109e:	d025      	beq.n	110ec <handleJoinMessage+0x380>
   110a0:	2088      	movs	r0, #136	; 0x88
   110a2:	4b18      	ldr	r3, [pc, #96]	; (11104 <handleJoinMessage+0x398>)
   110a4:	4798      	blx	r3
   110a6:	4681      	mov	r9, r0
   110a8:	2800      	cmp	r0, #0
   110aa:	d01f      	beq.n	110ec <handleJoinMessage+0x380>
   110ac:	4b13      	ldr	r3, [pc, #76]	; (110fc <handleJoinMessage+0x390>)
   110ae:	003a      	movs	r2, r7
   110b0:	8819      	ldrh	r1, [r3, #0]
   110b2:	20ff      	movs	r0, #255	; 0xff
   110b4:	b289      	uxth	r1, r1
   110b6:	ab0c      	add	r3, sp, #48	; 0x30
   110b8:	4f11      	ldr	r7, [pc, #68]	; (11100 <handleJoinMessage+0x394>)
   110ba:	47b8      	blx	r7
   110bc:	4649      	mov	r1, r9
   110be:	4b12      	ldr	r3, [pc, #72]	; (11108 <handleJoinMessage+0x39c>)
   110c0:	a80c      	add	r0, sp, #48	; 0x30
   110c2:	4798      	blx	r3
   110c4:	2308      	movs	r3, #8
   110c6:	464a      	mov	r2, r9
   110c8:	5413      	strb	r3, [r2, r0]
   110ca:	4b12      	ldr	r3, [pc, #72]	; (11114 <handleJoinMessage+0x3a8>)
   110cc:	0001      	movs	r1, r0
   110ce:	9303      	str	r3, [sp, #12]
   110d0:	2300      	movs	r3, #0
   110d2:	9302      	str	r3, [sp, #8]
   110d4:	3302      	adds	r3, #2
   110d6:	9401      	str	r4, [sp, #4]
   110d8:	9300      	str	r3, [sp, #0]
   110da:	2201      	movs	r2, #1
   110dc:	464b      	mov	r3, r9
   110de:	4c0e      	ldr	r4, [pc, #56]	; (11118 <handleJoinMessage+0x3ac>)
   110e0:	a80c      	add	r0, sp, #48	; 0x30
   110e2:	47a0      	blx	r4
   110e4:	465b      	mov	r3, fp
   110e6:	681c      	ldr	r4, [r3, #0]
   110e8:	7ea2      	ldrb	r2, [r4, #26]
   110ea:	e7b0      	b.n	1104e <handleJoinMessage+0x2e2>
   110ec:	465b      	mov	r3, fp
   110ee:	681c      	ldr	r4, [r3, #0]
   110f0:	7ea2      	ldrb	r2, [r4, #26]
   110f2:	e7ac      	b.n	1104e <handleJoinMessage+0x2e2>
   110f4:	00016748 	.word	0x00016748
   110f8:	20001ce1 	.word	0x20001ce1
   110fc:	200028b8 	.word	0x200028b8
   11100:	0000f081 	.word	0x0000f081
   11104:	0000bc69 	.word	0x0000bc69
   11108:	0000f0d1 	.word	0x0000f0d1
   1110c:	20002860 	.word	0x20002860
   11110:	00014d37 	.word	0x00014d37
   11114:	000104f9 	.word	0x000104f9
   11118:	0000f15d 	.word	0x0000f15d
   1111c:	20001d0a 	.word	0x20001d0a
   11120:	200028bc 	.word	0x200028bc
   11124:	0000bfb1 	.word	0x0000bfb1
   11128:	00004001 	.word	0x00004001
   1112c:	0000a60d 	.word	0x0000a60d
   11130:	20002900 	.word	0x20002900
   11134:	200028f0 	.word	0x200028f0
   11138:	0000df19 	.word	0x0000df19
   1113c:	200028ba 	.word	0x200028ba
   11140:	20001d08 	.word	0x20001d08
   11144:	20001d0b 	.word	0x20001d0b
   11148:	00010c0d 	.word	0x00010c0d
   1114c:	20001d09 	.word	0x20001d09
   11150:	20001d18 	.word	0x20001d18
   11154:	2000285c 	.word	0x2000285c
   11158:	200028dc 	.word	0x200028dc
   1115c:	20001d10 	.word	0x20001d10
   11160:	20001d0c 	.word	0x20001d0c
   11164:	200028a8 	.word	0x200028a8
   11168:	2000009c 	.word	0x2000009c
   1116c:	0000ac55 	.word	0x0000ac55
   11170:	000124c1 	.word	0x000124c1
   11174:	00015381 	.word	0x00015381
   11178:	000127a1 	.word	0x000127a1
   1117c:	00010509 	.word	0x00010509
   11180:	0000c01d 	.word	0x0000c01d
   11184:	20001d14 	.word	0x20001d14
   11188:	00014d19 	.word	0x00014d19
   1118c:	0000ffff 	.word	0x0000ffff
   11190:	1de3      	adds	r3, r4, #7
   11192:	4698      	mov	r8, r3
   11194:	0018      	movs	r0, r3
   11196:	4ae1      	ldr	r2, [pc, #900]	; (1151c <handleJoinMessage+0x7b0>)
   11198:	2108      	movs	r1, #8
   1119a:	4be1      	ldr	r3, [pc, #900]	; (11520 <handleJoinMessage+0x7b4>)
   1119c:	4798      	blx	r3
   1119e:	2800      	cmp	r0, #0
   111a0:	d100      	bne.n	111a4 <handleJoinMessage+0x438>
   111a2:	e644      	b.n	10e2e <handleJoinMessage+0xc2>
   111a4:	2300      	movs	r3, #0
   111a6:	683a      	ldr	r2, [r7, #0]
   111a8:	7013      	strb	r3, [r2, #0]
   111aa:	683b      	ldr	r3, [r7, #0]
   111ac:	88f0      	ldrh	r0, [r6, #6]
   111ae:	469c      	mov	ip, r3
   111b0:	785b      	ldrb	r3, [r3, #1]
   111b2:	469a      	mov	sl, r3
   111b4:	2b00      	cmp	r3, #0
   111b6:	d018      	beq.n	111ea <handleJoinMessage+0x47e>
   111b8:	4663      	mov	r3, ip
   111ba:	8a1b      	ldrh	r3, [r3, #16]
   111bc:	4283      	cmp	r3, r0
   111be:	d100      	bne.n	111c2 <handleJoinMessage+0x456>
   111c0:	e635      	b.n	10e2e <handleJoinMessage+0xc2>
   111c2:	4652      	mov	r2, sl
   111c4:	4663      	mov	r3, ip
   111c6:	3a01      	subs	r2, #1
   111c8:	b2d2      	uxtb	r2, r2
   111ca:	00d1      	lsls	r1, r2, #3
   111cc:	1889      	adds	r1, r1, r2
   111ce:	0049      	lsls	r1, r1, #1
   111d0:	3122      	adds	r1, #34	; 0x22
   111d2:	3322      	adds	r3, #34	; 0x22
   111d4:	4461      	add	r1, ip
   111d6:	e006      	b.n	111e6 <handleJoinMessage+0x47a>
   111d8:	3312      	adds	r3, #18
   111da:	001a      	movs	r2, r3
   111dc:	3a12      	subs	r2, #18
   111de:	8812      	ldrh	r2, [r2, #0]
   111e0:	4282      	cmp	r2, r0
   111e2:	d100      	bne.n	111e6 <handleJoinMessage+0x47a>
   111e4:	e623      	b.n	10e2e <handleJoinMessage+0xc2>
   111e6:	4299      	cmp	r1, r3
   111e8:	d1f6      	bne.n	111d8 <handleJoinMessage+0x46c>
   111ea:	4653      	mov	r3, sl
   111ec:	4acd      	ldr	r2, [pc, #820]	; (11524 <handleJoinMessage+0x7b8>)
   111ee:	00db      	lsls	r3, r3, #3
   111f0:	4453      	add	r3, sl
   111f2:	7812      	ldrb	r2, [r2, #0]
   111f4:	005b      	lsls	r3, r3, #1
   111f6:	4463      	add	r3, ip
   111f8:	8218      	strh	r0, [r3, #16]
   111fa:	731a      	strb	r2, [r3, #12]
   111fc:	8872      	ldrh	r2, [r6, #2]
   111fe:	1d61      	adds	r1, r4, #5
   11200:	81da      	strh	r2, [r3, #14]
   11202:	7862      	ldrb	r2, [r4, #1]
   11204:	721a      	strb	r2, [r3, #8]
   11206:	78a2      	ldrb	r2, [r4, #2]
   11208:	725a      	strb	r2, [r3, #9]
   1120a:	78e2      	ldrb	r2, [r4, #3]
   1120c:	729a      	strb	r2, [r3, #10]
   1120e:	7922      	ldrb	r2, [r4, #4]
   11210:	4cc5      	ldr	r4, [pc, #788]	; (11528 <handleJoinMessage+0x7bc>)
   11212:	72da      	strb	r2, [r3, #11]
   11214:	4653      	mov	r3, sl
   11216:	3301      	adds	r3, #1
   11218:	00d8      	lsls	r0, r3, #3
   1121a:	18c0      	adds	r0, r0, r3
   1121c:	0040      	lsls	r0, r0, #1
   1121e:	4460      	add	r0, ip
   11220:	2208      	movs	r2, #8
   11222:	47a0      	blx	r4
   11224:	2208      	movs	r2, #8
   11226:	4641      	mov	r1, r8
   11228:	48c0      	ldr	r0, [pc, #768]	; (1152c <handleJoinMessage+0x7c0>)
   1122a:	47a0      	blx	r4
   1122c:	683a      	ldr	r2, [r7, #0]
   1122e:	4cc0      	ldr	r4, [pc, #768]	; (11530 <handleJoinMessage+0x7c4>)
   11230:	7851      	ldrb	r1, [r2, #1]
   11232:	00cb      	lsls	r3, r1, #3
   11234:	185b      	adds	r3, r3, r1
   11236:	005b      	lsls	r3, r3, #1
   11238:	18d3      	adds	r3, r2, r3
   1123a:	464a      	mov	r2, r9
   1123c:	8a18      	ldrh	r0, [r3, #16]
   1123e:	735a      	strb	r2, [r3, #13]
   11240:	0001      	movs	r1, r0
   11242:	464b      	mov	r3, r9
   11244:	2201      	movs	r2, #1
   11246:	47a0      	blx	r4
   11248:	683a      	ldr	r2, [r7, #0]
   1124a:	7853      	ldrb	r3, [r2, #1]
   1124c:	3301      	adds	r3, #1
   1124e:	7053      	strb	r3, [r2, #1]
   11250:	683b      	ldr	r3, [r7, #0]
   11252:	785a      	ldrb	r2, [r3, #1]
   11254:	465b      	mov	r3, fp
   11256:	6819      	ldr	r1, [r3, #0]
   11258:	2344      	movs	r3, #68	; 0x44
   1125a:	5ccb      	ldrb	r3, [r1, r3]
   1125c:	e66b      	b.n	10f36 <handleJoinMessage+0x1ca>
   1125e:	78a3      	ldrb	r3, [r4, #2]
   11260:	9305      	str	r3, [sp, #20]
   11262:	07db      	lsls	r3, r3, #31
   11264:	d500      	bpl.n	11268 <handleJoinMessage+0x4fc>
   11266:	e0fe      	b.n	11466 <handleJoinMessage+0x6fa>
   11268:	4bb2      	ldr	r3, [pc, #712]	; (11534 <handleJoinMessage+0x7c8>)
   1126a:	469b      	mov	fp, r3
   1126c:	681b      	ldr	r3, [r3, #0]
   1126e:	9307      	str	r3, [sp, #28]
   11270:	7edd      	ldrb	r5, [r3, #27]
   11272:	2d01      	cmp	r5, #1
   11274:	d800      	bhi.n	11278 <handleJoinMessage+0x50c>
   11276:	e24b      	b.n	11710 <handleJoinMessage+0x9a4>
   11278:	1ce3      	adds	r3, r4, #3
   1127a:	9308      	str	r3, [sp, #32]
   1127c:	9b07      	ldr	r3, [sp, #28]
   1127e:	2214      	movs	r2, #20
   11280:	685b      	ldr	r3, [r3, #4]
   11282:	46aa      	mov	sl, r5
   11284:	469c      	mov	ip, r3
   11286:	9306      	str	r3, [sp, #24]
   11288:	4bab      	ldr	r3, [pc, #684]	; (11538 <handleJoinMessage+0x7cc>)
   1128a:	4462      	add	r2, ip
   1128c:	0016      	movs	r6, r2
   1128e:	2401      	movs	r4, #1
   11290:	9304      	str	r3, [sp, #16]
   11292:	9209      	str	r2, [sp, #36]	; 0x24
   11294:	001d      	movs	r5, r3
   11296:	e005      	b.n	112a4 <handleJoinMessage+0x538>
   11298:	3401      	adds	r4, #1
   1129a:	b2e4      	uxtb	r4, r4
   1129c:	3614      	adds	r6, #20
   1129e:	45a2      	cmp	sl, r4
   112a0:	d100      	bne.n	112a4 <handleJoinMessage+0x538>
   112a2:	e1c0      	b.n	11626 <handleJoinMessage+0x8ba>
   112a4:	2208      	movs	r2, #8
   112a6:	0039      	movs	r1, r7
   112a8:	0030      	movs	r0, r6
   112aa:	47a8      	blx	r5
   112ac:	2800      	cmp	r0, #0
   112ae:	d1f3      	bne.n	11298 <handleJoinMessage+0x52c>
   112b0:	4aa2      	ldr	r2, [pc, #648]	; (1153c <handleJoinMessage+0x7d0>)
   112b2:	9b06      	ldr	r3, [sp, #24]
   112b4:	4694      	mov	ip, r2
   112b6:	4463      	add	r3, ip
   112b8:	0018      	movs	r0, r3
   112ba:	2204      	movs	r2, #4
   112bc:	4b9a      	ldr	r3, [pc, #616]	; (11528 <handleJoinMessage+0x7bc>)
   112be:	9908      	ldr	r1, [sp, #32]
   112c0:	4798      	blx	r3
   112c2:	4a9f      	ldr	r2, [pc, #636]	; (11540 <handleJoinMessage+0x7d4>)
   112c4:	9b07      	ldr	r3, [sp, #28]
   112c6:	4694      	mov	ip, r2
   112c8:	685b      	ldr	r3, [r3, #4]
   112ca:	4d9e      	ldr	r5, [pc, #632]	; (11544 <handleJoinMessage+0x7d8>)
   112cc:	4463      	add	r3, ip
   112ce:	689a      	ldr	r2, [r3, #8]
   112d0:	ae0c      	add	r6, sp, #48	; 0x30
   112d2:	60da      	str	r2, [r3, #12]
   112d4:	882b      	ldrh	r3, [r5, #0]
   112d6:	191c      	adds	r4, r3, r4
   112d8:	b2a3      	uxth	r3, r4
   112da:	9304      	str	r3, [sp, #16]
   112dc:	8829      	ldrh	r1, [r5, #0]
   112de:	0033      	movs	r3, r6
   112e0:	b289      	uxth	r1, r1
   112e2:	2201      	movs	r2, #1
   112e4:	2001      	movs	r0, #1
   112e6:	4d98      	ldr	r5, [pc, #608]	; (11548 <handleJoinMessage+0x7dc>)
   112e8:	47a8      	blx	r5
   112ea:	2220      	movs	r2, #32
   112ec:	7873      	ldrb	r3, [r6, #1]
   112ee:	2088      	movs	r0, #136	; 0x88
   112f0:	4313      	orrs	r3, r2
   112f2:	7073      	strb	r3, [r6, #1]
   112f4:	4b95      	ldr	r3, [pc, #596]	; (1154c <handleJoinMessage+0x7e0>)
   112f6:	4798      	blx	r3
   112f8:	4682      	mov	sl, r0
   112fa:	2800      	cmp	r0, #0
   112fc:	d100      	bne.n	11300 <handleJoinMessage+0x594>
   112fe:	e596      	b.n	10e2e <handleJoinMessage+0xc2>
   11300:	0001      	movs	r1, r0
   11302:	4b93      	ldr	r3, [pc, #588]	; (11550 <handleJoinMessage+0x7e4>)
   11304:	0030      	movs	r0, r6
   11306:	4798      	blx	r3
   11308:	2204      	movs	r2, #4
   1130a:	4651      	mov	r1, sl
   1130c:	0003      	movs	r3, r0
   1130e:	540a      	strb	r2, [r1, r0]
   11310:	4683      	mov	fp, r0
   11312:	4a90      	ldr	r2, [pc, #576]	; (11554 <handleJoinMessage+0x7e8>)
   11314:	9804      	ldr	r0, [sp, #16]
   11316:	3301      	adds	r3, #1
   11318:	b2db      	uxtb	r3, r3
   1131a:	4290      	cmp	r0, r2
   1131c:	d100      	bne.n	11320 <handleJoinMessage+0x5b4>
   1131e:	e560      	b.n	10de2 <handleJoinMessage+0x76>
   11320:	465a      	mov	r2, fp
   11322:	4651      	mov	r1, sl
   11324:	1c95      	adds	r5, r2, #2
   11326:	2200      	movs	r2, #0
   11328:	4c81      	ldr	r4, [pc, #516]	; (11530 <handleJoinMessage+0x7c4>)
   1132a:	54ca      	strb	r2, [r1, r3]
   1132c:	464b      	mov	r3, r9
   1132e:	0001      	movs	r1, r0
   11330:	3201      	adds	r2, #1
   11332:	47a0      	blx	r4
   11334:	9904      	ldr	r1, [sp, #16]
   11336:	b2ed      	uxtb	r5, r5
   11338:	b2cb      	uxtb	r3, r1
   1133a:	0a0c      	lsrs	r4, r1, #8
   1133c:	e559      	b.n	10df2 <handleJoinMessage+0x86>
   1133e:	78e2      	ldrb	r2, [r4, #3]
   11340:	78a3      	ldrb	r3, [r4, #2]
   11342:	4d80      	ldr	r5, [pc, #512]	; (11544 <handleJoinMessage+0x7d8>)
   11344:	0212      	lsls	r2, r2, #8
   11346:	4313      	orrs	r3, r2
   11348:	802b      	strh	r3, [r5, #0]
   1134a:	88f2      	ldrh	r2, [r6, #6]
   1134c:	4b82      	ldr	r3, [pc, #520]	; (11558 <handleJoinMessage+0x7ec>)
   1134e:	4983      	ldr	r1, [pc, #524]	; (1155c <handleJoinMessage+0x7f0>)
   11350:	801a      	strh	r2, [r3, #0]
   11352:	8873      	ldrh	r3, [r6, #2]
   11354:	0028      	movs	r0, r5
   11356:	800b      	strh	r3, [r1, #0]
   11358:	4b81      	ldr	r3, [pc, #516]	; (11560 <handleJoinMessage+0x7f4>)
   1135a:	4798      	blx	r3
   1135c:	4b75      	ldr	r3, [pc, #468]	; (11534 <handleJoinMessage+0x7c8>)
   1135e:	1d21      	adds	r1, r4, #4
   11360:	681e      	ldr	r6, [r3, #0]
   11362:	469b      	mov	fp, r3
   11364:	233c      	movs	r3, #60	; 0x3c
   11366:	5cf2      	ldrb	r2, [r6, r3]
   11368:	4b7e      	ldr	r3, [pc, #504]	; (11564 <handleJoinMessage+0x7f8>)
   1136a:	701a      	strb	r2, [r3, #0]
   1136c:	4b7e      	ldr	r3, [pc, #504]	; (11568 <handleJoinMessage+0x7fc>)
   1136e:	2210      	movs	r2, #16
   11370:	6818      	ldr	r0, [r3, #0]
   11372:	4b6d      	ldr	r3, [pc, #436]	; (11528 <handleJoinMessage+0x7bc>)
   11374:	3010      	adds	r0, #16
   11376:	4798      	blx	r3
   11378:	22ff      	movs	r2, #255	; 0xff
   1137a:	882b      	ldrh	r3, [r5, #0]
   1137c:	4691      	mov	r9, r2
   1137e:	421a      	tst	r2, r3
   11380:	d100      	bne.n	11384 <handleJoinMessage+0x618>
   11382:	e09d      	b.n	114c0 <handleJoinMessage+0x754>
   11384:	2307      	movs	r3, #7
   11386:	4642      	mov	r2, r8
   11388:	703b      	strb	r3, [r7, #0]
   1138a:	4b78      	ldr	r3, [pc, #480]	; (1156c <handleJoinMessage+0x800>)
   1138c:	4640      	mov	r0, r8
   1138e:	6113      	str	r3, [r2, #16]
   11390:	7e73      	ldrb	r3, [r6, #25]
   11392:	26fa      	movs	r6, #250	; 0xfa
   11394:	00b6      	lsls	r6, r6, #2
   11396:	4373      	muls	r3, r6
   11398:	6053      	str	r3, [r2, #4]
   1139a:	6093      	str	r3, [r2, #8]
   1139c:	2301      	movs	r3, #1
   1139e:	7313      	strb	r3, [r2, #12]
   113a0:	4b73      	ldr	r3, [pc, #460]	; (11570 <handleJoinMessage+0x804>)
   113a2:	4698      	mov	r8, r3
   113a4:	4798      	blx	r3
   113a6:	465b      	mov	r3, fp
   113a8:	681b      	ldr	r3, [r3, #0]
   113aa:	0031      	movs	r1, r6
   113ac:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
   113ae:	4f71      	ldr	r7, [pc, #452]	; (11574 <handleJoinMessage+0x808>)
   113b0:	4373      	muls	r3, r6
   113b2:	469a      	mov	sl, r3
   113b4:	0018      	movs	r0, r3
   113b6:	47b8      	blx	r7
   113b8:	2632      	movs	r6, #50	; 0x32
   113ba:	4653      	mov	r3, sl
   113bc:	4346      	muls	r6, r0
   113be:	1b9b      	subs	r3, r3, r6
   113c0:	469a      	mov	sl, r3
   113c2:	4b6d      	ldr	r3, [pc, #436]	; (11578 <handleJoinMessage+0x80c>)
   113c4:	9304      	str	r3, [sp, #16]
   113c6:	4798      	blx	r3
   113c8:	4b6c      	ldr	r3, [pc, #432]	; (1157c <handleJoinMessage+0x810>)
   113ca:	2164      	movs	r1, #100	; 0x64
   113cc:	9305      	str	r3, [sp, #20]
   113ce:	4798      	blx	r3
   113d0:	464b      	mov	r3, r9
   113d2:	0070      	lsls	r0, r6, #1
   113d4:	400b      	ands	r3, r1
   113d6:	4358      	muls	r0, r3
   113d8:	2164      	movs	r1, #100	; 0x64
   113da:	47b8      	blx	r7
   113dc:	4e68      	ldr	r6, [pc, #416]	; (11580 <handleJoinMessage+0x814>)
   113de:	4450      	add	r0, sl
   113e0:	6070      	str	r0, [r6, #4]
   113e2:	60b0      	str	r0, [r6, #8]
   113e4:	4b67      	ldr	r3, [pc, #412]	; (11584 <handleJoinMessage+0x818>)
   113e6:	0030      	movs	r0, r6
   113e8:	6133      	str	r3, [r6, #16]
   113ea:	2301      	movs	r3, #1
   113ec:	469a      	mov	sl, r3
   113ee:	7333      	strb	r3, [r6, #12]
   113f0:	47c0      	blx	r8
   113f2:	4b65      	ldr	r3, [pc, #404]	; (11588 <handleJoinMessage+0x81c>)
   113f4:	4865      	ldr	r0, [pc, #404]	; (1158c <handleJoinMessage+0x820>)
   113f6:	4798      	blx	r3
   113f8:	22ff      	movs	r2, #255	; 0xff
   113fa:	882b      	ldrh	r3, [r5, #0]
   113fc:	4691      	mov	r9, r2
   113fe:	421a      	tst	r2, r3
   11400:	d026      	beq.n	11450 <handleJoinMessage+0x6e4>
   11402:	2380      	movs	r3, #128	; 0x80
   11404:	882a      	ldrh	r2, [r5, #0]
   11406:	4013      	ands	r3, r2
   11408:	d100      	bne.n	1140c <handleJoinMessage+0x6a0>
   1140a:	e07c      	b.n	11506 <handleJoinMessage+0x79a>
   1140c:	4b5d      	ldr	r3, [pc, #372]	; (11584 <handleJoinMessage+0x818>)
   1140e:	21fa      	movs	r1, #250	; 0xfa
   11410:	6133      	str	r3, [r6, #16]
   11412:	465b      	mov	r3, fp
   11414:	681b      	ldr	r3, [r3, #0]
   11416:	0089      	lsls	r1, r1, #2
   11418:	8d9d      	ldrh	r5, [r3, #44]	; 0x2c
   1141a:	434d      	muls	r5, r1
   1141c:	0028      	movs	r0, r5
   1141e:	47b8      	blx	r7
   11420:	2332      	movs	r3, #50	; 0x32
   11422:	4343      	muls	r3, r0
   11424:	469b      	mov	fp, r3
   11426:	1aed      	subs	r5, r5, r3
   11428:	9b04      	ldr	r3, [sp, #16]
   1142a:	4798      	blx	r3
   1142c:	9b05      	ldr	r3, [sp, #20]
   1142e:	2164      	movs	r1, #100	; 0x64
   11430:	4798      	blx	r3
   11432:	464b      	mov	r3, r9
   11434:	400b      	ands	r3, r1
   11436:	0019      	movs	r1, r3
   11438:	465b      	mov	r3, fp
   1143a:	0058      	lsls	r0, r3, #1
   1143c:	4348      	muls	r0, r1
   1143e:	2164      	movs	r1, #100	; 0x64
   11440:	47b8      	blx	r7
   11442:	4653      	mov	r3, sl
   11444:	1945      	adds	r5, r0, r5
   11446:	0030      	movs	r0, r6
   11448:	6075      	str	r5, [r6, #4]
   1144a:	60b5      	str	r5, [r6, #8]
   1144c:	7333      	strb	r3, [r6, #12]
   1144e:	47c0      	blx	r8
   11450:	7860      	ldrb	r0, [r4, #1]
   11452:	e593      	b.n	10f7c <handleJoinMessage+0x210>
   11454:	4b4e      	ldr	r3, [pc, #312]	; (11590 <handleJoinMessage+0x824>)
   11456:	0038      	movs	r0, r7
   11458:	4798      	blx	r3
   1145a:	ab06      	add	r3, sp, #24
   1145c:	2416      	movs	r4, #22
   1145e:	469c      	mov	ip, r3
   11460:	4464      	add	r4, ip
   11462:	8020      	strh	r0, [r4, #0]
   11464:	e619      	b.n	1109a <handleJoinMessage+0x32e>
   11466:	4b33      	ldr	r3, [pc, #204]	; (11534 <handleJoinMessage+0x7c8>)
   11468:	469b      	mov	fp, r3
   1146a:	681b      	ldr	r3, [r3, #0]
   1146c:	9308      	str	r3, [sp, #32]
   1146e:	7e9d      	ldrb	r5, [r3, #26]
   11470:	2d00      	cmp	r5, #0
   11472:	d100      	bne.n	11476 <handleJoinMessage+0x70a>
   11474:	e498      	b.n	10da8 <handleJoinMessage+0x3c>
   11476:	681b      	ldr	r3, [r3, #0]
   11478:	46aa      	mov	sl, r5
   1147a:	9306      	str	r3, [sp, #24]
   1147c:	001e      	movs	r6, r3
   1147e:	4b2e      	ldr	r3, [pc, #184]	; (11538 <handleJoinMessage+0x7cc>)
   11480:	2400      	movs	r4, #0
   11482:	9304      	str	r3, [sp, #16]
   11484:	001d      	movs	r5, r3
   11486:	e005      	b.n	11494 <handleJoinMessage+0x728>
   11488:	3401      	adds	r4, #1
   1148a:	b2e4      	uxtb	r4, r4
   1148c:	3610      	adds	r6, #16
   1148e:	4554      	cmp	r4, sl
   11490:	d100      	bne.n	11494 <handleJoinMessage+0x728>
   11492:	e081      	b.n	11598 <handleJoinMessage+0x82c>
   11494:	2208      	movs	r2, #8
   11496:	0039      	movs	r1, r7
   11498:	0030      	movs	r0, r6
   1149a:	47a8      	blx	r5
   1149c:	2800      	cmp	r0, #0
   1149e:	d1f3      	bne.n	11488 <handleJoinMessage+0x71c>
   114a0:	22ff      	movs	r2, #255	; 0xff
   114a2:	0112      	lsls	r2, r2, #4
   114a4:	4694      	mov	ip, r2
   114a6:	9a08      	ldr	r2, [sp, #32]
   114a8:	9b06      	ldr	r3, [sp, #24]
   114aa:	8dd2      	ldrh	r2, [r2, #46]	; 0x2e
   114ac:	4d25      	ldr	r5, [pc, #148]	; (11544 <handleJoinMessage+0x7d8>)
   114ae:	4463      	add	r3, ip
   114b0:	609a      	str	r2, [r3, #8]
   114b2:	882b      	ldrh	r3, [r5, #0]
   114b4:	ae0c      	add	r6, sp, #48	; 0x30
   114b6:	3380      	adds	r3, #128	; 0x80
   114b8:	191c      	adds	r4, r3, r4
   114ba:	b2a3      	uxth	r3, r4
   114bc:	9304      	str	r3, [sp, #16]
   114be:	e70d      	b.n	112dc <handleJoinMessage+0x570>
   114c0:	2306      	movs	r3, #6
   114c2:	21fa      	movs	r1, #250	; 0xfa
   114c4:	703b      	strb	r3, [r7, #0]
   114c6:	8ab3      	ldrh	r3, [r6, #20]
   114c8:	0089      	lsls	r1, r1, #2
   114ca:	434b      	muls	r3, r1
   114cc:	4698      	mov	r8, r3
   114ce:	4f29      	ldr	r7, [pc, #164]	; (11574 <handleJoinMessage+0x808>)
   114d0:	0018      	movs	r0, r3
   114d2:	47b8      	blx	r7
   114d4:	2632      	movs	r6, #50	; 0x32
   114d6:	4643      	mov	r3, r8
   114d8:	4346      	muls	r6, r0
   114da:	1b9b      	subs	r3, r3, r6
   114dc:	4698      	mov	r8, r3
   114de:	4b26      	ldr	r3, [pc, #152]	; (11578 <handleJoinMessage+0x80c>)
   114e0:	9304      	str	r3, [sp, #16]
   114e2:	4798      	blx	r3
   114e4:	4b25      	ldr	r3, [pc, #148]	; (1157c <handleJoinMessage+0x810>)
   114e6:	2164      	movs	r1, #100	; 0x64
   114e8:	9305      	str	r3, [sp, #20]
   114ea:	4798      	blx	r3
   114ec:	464b      	mov	r3, r9
   114ee:	0070      	lsls	r0, r6, #1
   114f0:	400b      	ands	r3, r1
   114f2:	4358      	muls	r0, r3
   114f4:	2164      	movs	r1, #100	; 0x64
   114f6:	47b8      	blx	r7
   114f8:	4e21      	ldr	r6, [pc, #132]	; (11580 <handleJoinMessage+0x814>)
   114fa:	4b1d      	ldr	r3, [pc, #116]	; (11570 <handleJoinMessage+0x804>)
   114fc:	4440      	add	r0, r8
   114fe:	6070      	str	r0, [r6, #4]
   11500:	60b0      	str	r0, [r6, #8]
   11502:	4698      	mov	r8, r3
   11504:	e76e      	b.n	113e4 <handleJoinMessage+0x678>
   11506:	4a23      	ldr	r2, [pc, #140]	; (11594 <handleJoinMessage+0x828>)
   11508:	0030      	movs	r0, r6
   1150a:	6132      	str	r2, [r6, #16]
   1150c:	2232      	movs	r2, #50	; 0x32
   1150e:	7333      	strb	r3, [r6, #12]
   11510:	6072      	str	r2, [r6, #4]
   11512:	60b2      	str	r2, [r6, #8]
   11514:	47c0      	blx	r8
   11516:	7860      	ldrb	r0, [r4, #1]
   11518:	e530      	b.n	10f7c <handleJoinMessage+0x210>
   1151a:	46c0      	nop			; (mov r8, r8)
   1151c:	20000094 	.word	0x20000094
   11520:	0000df19 	.word	0x0000df19
   11524:	20002888 	.word	0x20002888
   11528:	00014d37 	.word	0x00014d37
   1152c:	200028f0 	.word	0x200028f0
   11530:	00011b3d 	.word	0x00011b3d
   11534:	2000285c 	.word	0x2000285c
   11538:	00014d19 	.word	0x00014d19
   1153c:	000013f4 	.word	0x000013f4
   11540:	000013ec 	.word	0x000013ec
   11544:	200028b8 	.word	0x200028b8
   11548:	0000f081 	.word	0x0000f081
   1154c:	0000bc69 	.word	0x0000bc69
   11550:	0000f0d1 	.word	0x0000f0d1
   11554:	0000ffff 	.word	0x0000ffff
   11558:	2000009c 	.word	0x2000009c
   1155c:	200028a8 	.word	0x200028a8
   11560:	0000ac55 	.word	0x0000ac55
   11564:	200028d0 	.word	0x200028d0
   11568:	20002860 	.word	0x20002860
   1156c:	00010479 	.word	0x00010479
   11570:	0000c01d 	.word	0x0000c01d
   11574:	000124c1 	.word	0x000124c1
   11578:	00015381 	.word	0x00015381
   1157c:	000127a1 	.word	0x000127a1
   11580:	200028bc 	.word	0x200028bc
   11584:	00010509 	.word	0x00010509
   11588:	0000a60d 	.word	0x0000a60d
   1158c:	00004001 	.word	0x00004001
   11590:	00011fc1 	.word	0x00011fc1
   11594:	0001094d 	.word	0x0001094d
   11598:	2300      	movs	r3, #0
   1159a:	9407      	str	r4, [sp, #28]
   1159c:	46ba      	mov	sl, r7
   1159e:	9d06      	ldr	r5, [sp, #24]
   115a0:	ae0c      	add	r6, sp, #48	; 0x30
   115a2:	001c      	movs	r4, r3
   115a4:	9f04      	ldr	r7, [sp, #16]
   115a6:	e011      	b.n	115cc <handleJoinMessage+0x860>
   115a8:	2201      	movs	r2, #1
   115aa:	4252      	negs	r2, r2
   115ac:	17d3      	asrs	r3, r2, #31
   115ae:	0029      	movs	r1, r5
   115b0:	920c      	str	r2, [sp, #48]	; 0x30
   115b2:	930d      	str	r3, [sp, #52]	; 0x34
   115b4:	0030      	movs	r0, r6
   115b6:	3209      	adds	r2, #9
   115b8:	47b8      	blx	r7
   115ba:	2800      	cmp	r0, #0
   115bc:	d013      	beq.n	115e6 <handleJoinMessage+0x87a>
   115be:	3401      	adds	r4, #1
   115c0:	9b07      	ldr	r3, [sp, #28]
   115c2:	b2e4      	uxtb	r4, r4
   115c4:	3510      	adds	r5, #16
   115c6:	42a3      	cmp	r3, r4
   115c8:	d100      	bne.n	115cc <handleJoinMessage+0x860>
   115ca:	e080      	b.n	116ce <handleJoinMessage+0x962>
   115cc:	9b06      	ldr	r3, [sp, #24]
   115ce:	2200      	movs	r2, #0
   115d0:	1aeb      	subs	r3, r5, r3
   115d2:	9304      	str	r3, [sp, #16]
   115d4:	2300      	movs	r3, #0
   115d6:	0029      	movs	r1, r5
   115d8:	920c      	str	r2, [sp, #48]	; 0x30
   115da:	930d      	str	r3, [sp, #52]	; 0x34
   115dc:	0030      	movs	r0, r6
   115de:	3208      	adds	r2, #8
   115e0:	47b8      	blx	r7
   115e2:	2800      	cmp	r0, #0
   115e4:	d1e0      	bne.n	115a8 <handleJoinMessage+0x83c>
   115e6:	4657      	mov	r7, sl
   115e8:	2208      	movs	r2, #8
   115ea:	0039      	movs	r1, r7
   115ec:	0028      	movs	r0, r5
   115ee:	4b4e      	ldr	r3, [pc, #312]	; (11728 <handleJoinMessage+0x9bc>)
   115f0:	4798      	blx	r3
   115f2:	465b      	mov	r3, fp
   115f4:	9804      	ldr	r0, [sp, #16]
   115f6:	4669      	mov	r1, sp
   115f8:	4684      	mov	ip, r0
   115fa:	681a      	ldr	r2, [r3, #0]
   115fc:	7d09      	ldrb	r1, [r1, #20]
   115fe:	6813      	ldr	r3, [r2, #0]
   11600:	46a2      	mov	sl, r4
   11602:	4463      	add	r3, ip
   11604:	7319      	strb	r1, [r3, #12]
   11606:	0001      	movs	r1, r0
   11608:	6810      	ldr	r0, [r2, #0]
   1160a:	8dd2      	ldrh	r2, [r2, #46]	; 0x2e
   1160c:	4683      	mov	fp, r0
   1160e:	4459      	add	r1, fp
   11610:	4b46      	ldr	r3, [pc, #280]	; (1172c <handleJoinMessage+0x9c0>)
   11612:	608a      	str	r2, [r1, #8]
   11614:	2006      	movs	r0, #6
   11616:	4798      	blx	r3
   11618:	4d45      	ldr	r5, [pc, #276]	; (11730 <handleJoinMessage+0x9c4>)
   1161a:	882c      	ldrh	r4, [r5, #0]
   1161c:	3480      	adds	r4, #128	; 0x80
   1161e:	4454      	add	r4, sl
   11620:	b2a3      	uxth	r3, r4
   11622:	9304      	str	r3, [sp, #16]
   11624:	e65a      	b.n	112dc <handleJoinMessage+0x570>
   11626:	9b09      	ldr	r3, [sp, #36]	; 0x24
   11628:	9407      	str	r4, [sp, #28]
   1162a:	469a      	mov	sl, r3
   1162c:	2301      	movs	r3, #1
   1162e:	4655      	mov	r5, sl
   11630:	ae0c      	add	r6, sp, #48	; 0x30
   11632:	001c      	movs	r4, r3
   11634:	46ba      	mov	sl, r7
   11636:	e011      	b.n	1165c <handleJoinMessage+0x8f0>
   11638:	2201      	movs	r2, #1
   1163a:	4252      	negs	r2, r2
   1163c:	17d3      	asrs	r3, r2, #31
   1163e:	0029      	movs	r1, r5
   11640:	920c      	str	r2, [sp, #48]	; 0x30
   11642:	930d      	str	r3, [sp, #52]	; 0x34
   11644:	0030      	movs	r0, r6
   11646:	3209      	adds	r2, #9
   11648:	9b04      	ldr	r3, [sp, #16]
   1164a:	4798      	blx	r3
   1164c:	2800      	cmp	r0, #0
   1164e:	d012      	beq.n	11676 <handleJoinMessage+0x90a>
   11650:	3401      	adds	r4, #1
   11652:	9b07      	ldr	r3, [sp, #28]
   11654:	b2e4      	uxtb	r4, r4
   11656:	3514      	adds	r5, #20
   11658:	42a3      	cmp	r3, r4
   1165a:	d035      	beq.n	116c8 <handleJoinMessage+0x95c>
   1165c:	9b06      	ldr	r3, [sp, #24]
   1165e:	2200      	movs	r2, #0
   11660:	1aef      	subs	r7, r5, r3
   11662:	2300      	movs	r3, #0
   11664:	0029      	movs	r1, r5
   11666:	920c      	str	r2, [sp, #48]	; 0x30
   11668:	930d      	str	r3, [sp, #52]	; 0x34
   1166a:	0030      	movs	r0, r6
   1166c:	3208      	adds	r2, #8
   1166e:	9b04      	ldr	r3, [sp, #16]
   11670:	4798      	blx	r3
   11672:	2800      	cmp	r0, #0
   11674:	d1e0      	bne.n	11638 <handleJoinMessage+0x8cc>
   11676:	4653      	mov	r3, sl
   11678:	46aa      	mov	sl, r5
   1167a:	0019      	movs	r1, r3
   1167c:	9404      	str	r4, [sp, #16]
   1167e:	2208      	movs	r2, #8
   11680:	4c29      	ldr	r4, [pc, #164]	; (11728 <handleJoinMessage+0x9bc>)
   11682:	4650      	mov	r0, sl
   11684:	003d      	movs	r5, r7
   11686:	001f      	movs	r7, r3
   11688:	47a0      	blx	r4
   1168a:	465b      	mov	r3, fp
   1168c:	466a      	mov	r2, sp
   1168e:	681b      	ldr	r3, [r3, #0]
   11690:	7d12      	ldrb	r2, [r2, #20]
   11692:	469a      	mov	sl, r3
   11694:	685b      	ldr	r3, [r3, #4]
   11696:	9908      	ldr	r1, [sp, #32]
   11698:	195b      	adds	r3, r3, r5
   1169a:	741a      	strb	r2, [r3, #16]
   1169c:	4653      	mov	r3, sl
   1169e:	685b      	ldr	r3, [r3, #4]
   116a0:	2204      	movs	r2, #4
   116a2:	1958      	adds	r0, r3, r5
   116a4:	3008      	adds	r0, #8
   116a6:	47a0      	blx	r4
   116a8:	4653      	mov	r3, sl
   116aa:	685b      	ldr	r3, [r3, #4]
   116ac:	2007      	movs	r0, #7
   116ae:	195d      	adds	r5, r3, r5
   116b0:	68ab      	ldr	r3, [r5, #8]
   116b2:	60eb      	str	r3, [r5, #12]
   116b4:	4b1d      	ldr	r3, [pc, #116]	; (1172c <handleJoinMessage+0x9c0>)
   116b6:	4798      	blx	r3
   116b8:	9b04      	ldr	r3, [sp, #16]
   116ba:	4d1d      	ldr	r5, [pc, #116]	; (11730 <handleJoinMessage+0x9c4>)
   116bc:	469c      	mov	ip, r3
   116be:	882c      	ldrh	r4, [r5, #0]
   116c0:	4464      	add	r4, ip
   116c2:	b2a3      	uxth	r3, r4
   116c4:	9304      	str	r3, [sp, #16]
   116c6:	e609      	b.n	112dc <handleJoinMessage+0x570>
   116c8:	4657      	mov	r7, sl
   116ca:	f7ff fb6d 	bl	10da8 <handleJoinMessage+0x3c>
   116ce:	9b08      	ldr	r3, [sp, #32]
   116d0:	4657      	mov	r7, sl
   116d2:	6818      	ldr	r0, [r3, #0]
   116d4:	23ff      	movs	r3, #255	; 0xff
   116d6:	011b      	lsls	r3, r3, #4
   116d8:	18c3      	adds	r3, r0, r3
   116da:	689b      	ldr	r3, [r3, #8]
   116dc:	2b00      	cmp	r3, #0
   116de:	d001      	beq.n	116e4 <handleJoinMessage+0x978>
   116e0:	f7ff fb62 	bl	10da8 <handleJoinMessage+0x3c>
   116e4:	2208      	movs	r2, #8
   116e6:	4651      	mov	r1, sl
   116e8:	4b0f      	ldr	r3, [pc, #60]	; (11728 <handleJoinMessage+0x9bc>)
   116ea:	4798      	blx	r3
   116ec:	465b      	mov	r3, fp
   116ee:	4669      	mov	r1, sp
   116f0:	681b      	ldr	r3, [r3, #0]
   116f2:	7d09      	ldrb	r1, [r1, #20]
   116f4:	681a      	ldr	r2, [r3, #0]
   116f6:	2006      	movs	r0, #6
   116f8:	7311      	strb	r1, [r2, #12]
   116fa:	681a      	ldr	r2, [r3, #0]
   116fc:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
   116fe:	6093      	str	r3, [r2, #8]
   11700:	4b0a      	ldr	r3, [pc, #40]	; (1172c <handleJoinMessage+0x9c0>)
   11702:	4798      	blx	r3
   11704:	4d0a      	ldr	r5, [pc, #40]	; (11730 <handleJoinMessage+0x9c4>)
   11706:	882c      	ldrh	r4, [r5, #0]
   11708:	3480      	adds	r4, #128	; 0x80
   1170a:	b2a3      	uxth	r3, r4
   1170c:	9304      	str	r3, [sp, #16]
   1170e:	e5e5      	b.n	112dc <handleJoinMessage+0x570>
   11710:	2201      	movs	r2, #1
   11712:	4b07      	ldr	r3, [pc, #28]	; (11730 <handleJoinMessage+0x9c4>)
   11714:	0010      	movs	r0, r2
   11716:	8819      	ldrh	r1, [r3, #0]
   11718:	4c06      	ldr	r4, [pc, #24]	; (11734 <handleJoinMessage+0x9c8>)
   1171a:	0033      	movs	r3, r6
   1171c:	b289      	uxth	r1, r1
   1171e:	47a0      	blx	r4
   11720:	7872      	ldrb	r2, [r6, #1]
   11722:	2320      	movs	r3, #32
   11724:	f7ff fb4a 	bl	10dbc <handleJoinMessage+0x50>
   11728:	00014d37 	.word	0x00014d37
   1172c:	0000a60d 	.word	0x0000a60d
   11730:	200028b8 	.word	0x200028b8
   11734:	0000f081 	.word	0x0000f081

00011738 <deviceTableInit>:
   11738:	b5f0      	push	{r4, r5, r6, r7, lr}
   1173a:	46c6      	mov	lr, r8
   1173c:	b500      	push	{lr}
   1173e:	4b24      	ldr	r3, [pc, #144]	; (117d0 <deviceTableInit+0x98>)
   11740:	681c      	ldr	r4, [r3, #0]
   11742:	4698      	mov	r8, r3
   11744:	7ea3      	ldrb	r3, [r4, #26]
   11746:	2b00      	cmp	r3, #0
   11748:	d019      	beq.n	1177e <deviceTableInit+0x46>
   1174a:	2500      	movs	r5, #0
   1174c:	4f21      	ldr	r7, [pc, #132]	; (117d4 <deviceTableInit+0x9c>)
   1174e:	6820      	ldr	r0, [r4, #0]
   11750:	012e      	lsls	r6, r5, #4
   11752:	1980      	adds	r0, r0, r6
   11754:	2208      	movs	r2, #8
   11756:	21ff      	movs	r1, #255	; 0xff
   11758:	47b8      	blx	r7
   1175a:	4643      	mov	r3, r8
   1175c:	681c      	ldr	r4, [r3, #0]
   1175e:	2204      	movs	r2, #4
   11760:	6823      	ldr	r3, [r4, #0]
   11762:	21ff      	movs	r1, #255	; 0xff
   11764:	1998      	adds	r0, r3, r6
   11766:	3008      	adds	r0, #8
   11768:	47b8      	blx	r7
   1176a:	6823      	ldr	r3, [r4, #0]
   1176c:	22ff      	movs	r2, #255	; 0xff
   1176e:	469c      	mov	ip, r3
   11770:	4466      	add	r6, ip
   11772:	7332      	strb	r2, [r6, #12]
   11774:	3501      	adds	r5, #1
   11776:	7ea3      	ldrb	r3, [r4, #26]
   11778:	b2ed      	uxtb	r5, r5
   1177a:	42ab      	cmp	r3, r5
   1177c:	d8e7      	bhi.n	1174e <deviceTableInit+0x16>
   1177e:	7ee3      	ldrb	r3, [r4, #27]
   11780:	2b00      	cmp	r3, #0
   11782:	d021      	beq.n	117c8 <deviceTableInit+0x90>
   11784:	2600      	movs	r6, #0
   11786:	4f13      	ldr	r7, [pc, #76]	; (117d4 <deviceTableInit+0x9c>)
   11788:	00b5      	lsls	r5, r6, #2
   1178a:	6860      	ldr	r0, [r4, #4]
   1178c:	19ad      	adds	r5, r5, r6
   1178e:	00ad      	lsls	r5, r5, #2
   11790:	1940      	adds	r0, r0, r5
   11792:	2208      	movs	r2, #8
   11794:	21ff      	movs	r1, #255	; 0xff
   11796:	47b8      	blx	r7
   11798:	4643      	mov	r3, r8
   1179a:	681c      	ldr	r4, [r3, #0]
   1179c:	2204      	movs	r2, #4
   1179e:	6863      	ldr	r3, [r4, #4]
   117a0:	21ff      	movs	r1, #255	; 0xff
   117a2:	1958      	adds	r0, r3, r5
   117a4:	3008      	adds	r0, #8
   117a6:	47b8      	blx	r7
   117a8:	6863      	ldr	r3, [r4, #4]
   117aa:	2204      	movs	r2, #4
   117ac:	1958      	adds	r0, r3, r5
   117ae:	300c      	adds	r0, #12
   117b0:	21ff      	movs	r1, #255	; 0xff
   117b2:	47b8      	blx	r7
   117b4:	6863      	ldr	r3, [r4, #4]
   117b6:	3601      	adds	r6, #1
   117b8:	469c      	mov	ip, r3
   117ba:	23ff      	movs	r3, #255	; 0xff
   117bc:	4465      	add	r5, ip
   117be:	742b      	strb	r3, [r5, #16]
   117c0:	7ee3      	ldrb	r3, [r4, #27]
   117c2:	b2f6      	uxtb	r6, r6
   117c4:	42b3      	cmp	r3, r6
   117c6:	d8df      	bhi.n	11788 <deviceTableInit+0x50>
   117c8:	bc04      	pop	{r2}
   117ca:	4690      	mov	r8, r2
   117cc:	bdf0      	pop	{r4, r5, r6, r7, pc}
   117ce:	46c0      	nop			; (mov r8, r8)
   117d0:	2000285c 	.word	0x2000285c
   117d4:	00014d49 	.word	0x00014d49

000117d8 <sendForceLeaveNetwork>:
   117d8:	23ff      	movs	r3, #255	; 0xff
   117da:	b570      	push	{r4, r5, r6, lr}
   117dc:	0004      	movs	r4, r0
   117de:	b08e      	sub	sp, #56	; 0x38
   117e0:	4203      	tst	r3, r0
   117e2:	d027      	beq.n	11834 <sendForceLeaveNetwork+0x5c>
   117e4:	2516      	movs	r5, #22
   117e6:	446d      	add	r5, sp
   117e8:	8028      	strh	r0, [r5, #0]
   117ea:	4b15      	ldr	r3, [pc, #84]	; (11840 <sendForceLeaveNetwork+0x68>)
   117ec:	4298      	cmp	r0, r3
   117ee:	d01f      	beq.n	11830 <sendForceLeaveNetwork+0x58>
   117f0:	2088      	movs	r0, #136	; 0x88
   117f2:	4b14      	ldr	r3, [pc, #80]	; (11844 <sendForceLeaveNetwork+0x6c>)
   117f4:	4798      	blx	r3
   117f6:	1e06      	subs	r6, r0, #0
   117f8:	d01a      	beq.n	11830 <sendForceLeaveNetwork+0x58>
   117fa:	4b13      	ldr	r3, [pc, #76]	; (11848 <sendForceLeaveNetwork+0x70>)
   117fc:	0022      	movs	r2, r4
   117fe:	8819      	ldrh	r1, [r3, #0]
   11800:	20ff      	movs	r0, #255	; 0xff
   11802:	b289      	uxth	r1, r1
   11804:	ab06      	add	r3, sp, #24
   11806:	4c11      	ldr	r4, [pc, #68]	; (1184c <sendForceLeaveNetwork+0x74>)
   11808:	47a0      	blx	r4
   1180a:	0031      	movs	r1, r6
   1180c:	4b10      	ldr	r3, [pc, #64]	; (11850 <sendForceLeaveNetwork+0x78>)
   1180e:	a806      	add	r0, sp, #24
   11810:	4798      	blx	r3
   11812:	2308      	movs	r3, #8
   11814:	5433      	strb	r3, [r6, r0]
   11816:	4b0f      	ldr	r3, [pc, #60]	; (11854 <sendForceLeaveNetwork+0x7c>)
   11818:	0001      	movs	r1, r0
   1181a:	9303      	str	r3, [sp, #12]
   1181c:	2300      	movs	r3, #0
   1181e:	9302      	str	r3, [sp, #8]
   11820:	3302      	adds	r3, #2
   11822:	9300      	str	r3, [sp, #0]
   11824:	9501      	str	r5, [sp, #4]
   11826:	0033      	movs	r3, r6
   11828:	2201      	movs	r2, #1
   1182a:	a806      	add	r0, sp, #24
   1182c:	4c0a      	ldr	r4, [pc, #40]	; (11858 <sendForceLeaveNetwork+0x80>)
   1182e:	47a0      	blx	r4
   11830:	b00e      	add	sp, #56	; 0x38
   11832:	bd70      	pop	{r4, r5, r6, pc}
   11834:	4b09      	ldr	r3, [pc, #36]	; (1185c <sendForceLeaveNetwork+0x84>)
   11836:	2516      	movs	r5, #22
   11838:	4798      	blx	r3
   1183a:	446d      	add	r5, sp
   1183c:	8028      	strh	r0, [r5, #0]
   1183e:	e7d4      	b.n	117ea <sendForceLeaveNetwork+0x12>
   11840:	0000ffff 	.word	0x0000ffff
   11844:	0000bc69 	.word	0x0000bc69
   11848:	200028b8 	.word	0x200028b8
   1184c:	0000f081 	.word	0x0000f081
   11850:	0000f0d1 	.word	0x0000f0d1
   11854:	000104f9 	.word	0x000104f9
   11858:	0000f15d 	.word	0x0000f15d
   1185c:	00011fc1 	.word	0x00011fc1

00011860 <isCorrectIeeeAddr>:
   11860:	2300      	movs	r3, #0
   11862:	2200      	movs	r2, #0
   11864:	b530      	push	{r4, r5, lr}
   11866:	b083      	sub	sp, #12
   11868:	9200      	str	r2, [sp, #0]
   1186a:	9301      	str	r3, [sp, #4]
   1186c:	0001      	movs	r1, r0
   1186e:	0005      	movs	r5, r0
   11870:	3208      	adds	r2, #8
   11872:	4668      	mov	r0, sp
   11874:	4c09      	ldr	r4, [pc, #36]	; (1189c <isCorrectIeeeAddr+0x3c>)
   11876:	47a0      	blx	r4
   11878:	0003      	movs	r3, r0
   1187a:	2000      	movs	r0, #0
   1187c:	2b00      	cmp	r3, #0
   1187e:	d00b      	beq.n	11898 <isCorrectIeeeAddr+0x38>
   11880:	2201      	movs	r2, #1
   11882:	4252      	negs	r2, r2
   11884:	17d3      	asrs	r3, r2, #31
   11886:	0029      	movs	r1, r5
   11888:	9200      	str	r2, [sp, #0]
   1188a:	9301      	str	r3, [sp, #4]
   1188c:	4668      	mov	r0, sp
   1188e:	3209      	adds	r2, #9
   11890:	47a0      	blx	r4
   11892:	1e43      	subs	r3, r0, #1
   11894:	4198      	sbcs	r0, r3
   11896:	b2c0      	uxtb	r0, r0
   11898:	b003      	add	sp, #12
   1189a:	bd30      	pop	{r4, r5, pc}
   1189c:	00014d19 	.word	0x00014d19

000118a0 <keepAliveTimerHandler>:
   118a0:	b5f0      	push	{r4, r5, r6, r7, lr}
   118a2:	46de      	mov	lr, fp
   118a4:	4657      	mov	r7, sl
   118a6:	4645      	mov	r5, r8
   118a8:	464e      	mov	r6, r9
   118aa:	b5e0      	push	{r5, r6, r7, lr}
   118ac:	4b3b      	ldr	r3, [pc, #236]	; (1199c <keepAliveTimerHandler+0xfc>)
   118ae:	b083      	sub	sp, #12
   118b0:	681d      	ldr	r5, [r3, #0]
   118b2:	469b      	mov	fp, r3
   118b4:	7eab      	ldrb	r3, [r5, #26]
   118b6:	469a      	mov	sl, r3
   118b8:	2b00      	cmp	r3, #0
   118ba:	d02a      	beq.n	11912 <keepAliveTimerHandler+0x72>
   118bc:	4b38      	ldr	r3, [pc, #224]	; (119a0 <keepAliveTimerHandler+0x100>)
   118be:	2400      	movs	r4, #0
   118c0:	46e9      	mov	r9, sp
   118c2:	4698      	mov	r8, r3
   118c4:	682b      	ldr	r3, [r5, #0]
   118c6:	0127      	lsls	r7, r4, #4
   118c8:	19de      	adds	r6, r3, r7
   118ca:	2200      	movs	r2, #0
   118cc:	2300      	movs	r3, #0
   118ce:	0031      	movs	r1, r6
   118d0:	9200      	str	r2, [sp, #0]
   118d2:	9301      	str	r3, [sp, #4]
   118d4:	4648      	mov	r0, r9
   118d6:	3208      	adds	r2, #8
   118d8:	47c0      	blx	r8
   118da:	2800      	cmp	r0, #0
   118dc:	d015      	beq.n	1190a <keepAliveTimerHandler+0x6a>
   118de:	2201      	movs	r2, #1
   118e0:	4252      	negs	r2, r2
   118e2:	17d3      	asrs	r3, r2, #31
   118e4:	0031      	movs	r1, r6
   118e6:	9200      	str	r2, [sp, #0]
   118e8:	9301      	str	r3, [sp, #4]
   118ea:	4648      	mov	r0, r9
   118ec:	3209      	adds	r2, #9
   118ee:	47c0      	blx	r8
   118f0:	2800      	cmp	r0, #0
   118f2:	d00a      	beq.n	1190a <keepAliveTimerHandler+0x6a>
   118f4:	682b      	ldr	r3, [r5, #0]
   118f6:	19df      	adds	r7, r3, r7
   118f8:	68bb      	ldr	r3, [r7, #8]
   118fa:	2b00      	cmp	r3, #0
   118fc:	d001      	beq.n	11902 <keepAliveTimerHandler+0x62>
   118fe:	3b01      	subs	r3, #1
   11900:	60bb      	str	r3, [r7, #8]
   11902:	465b      	mov	r3, fp
   11904:	681d      	ldr	r5, [r3, #0]
   11906:	7eab      	ldrb	r3, [r5, #26]
   11908:	469a      	mov	sl, r3
   1190a:	3401      	adds	r4, #1
   1190c:	b2e4      	uxtb	r4, r4
   1190e:	4554      	cmp	r4, sl
   11910:	d3d8      	bcc.n	118c4 <keepAliveTimerHandler+0x24>
   11912:	7eeb      	ldrb	r3, [r5, #27]
   11914:	469a      	mov	sl, r3
   11916:	2b01      	cmp	r3, #1
   11918:	d92e      	bls.n	11978 <keepAliveTimerHandler+0xd8>
   1191a:	4b21      	ldr	r3, [pc, #132]	; (119a0 <keepAliveTimerHandler+0x100>)
   1191c:	2401      	movs	r4, #1
   1191e:	46e9      	mov	r9, sp
   11920:	4698      	mov	r8, r3
   11922:	00a6      	lsls	r6, r4, #2
   11924:	686b      	ldr	r3, [r5, #4]
   11926:	1936      	adds	r6, r6, r4
   11928:	00b6      	lsls	r6, r6, #2
   1192a:	199f      	adds	r7, r3, r6
   1192c:	2200      	movs	r2, #0
   1192e:	2300      	movs	r3, #0
   11930:	0039      	movs	r1, r7
   11932:	9200      	str	r2, [sp, #0]
   11934:	9301      	str	r3, [sp, #4]
   11936:	4648      	mov	r0, r9
   11938:	3208      	adds	r2, #8
   1193a:	47c0      	blx	r8
   1193c:	2800      	cmp	r0, #0
   1193e:	d017      	beq.n	11970 <keepAliveTimerHandler+0xd0>
   11940:	2201      	movs	r2, #1
   11942:	4252      	negs	r2, r2
   11944:	17d3      	asrs	r3, r2, #31
   11946:	0039      	movs	r1, r7
   11948:	9200      	str	r2, [sp, #0]
   1194a:	9301      	str	r3, [sp, #4]
   1194c:	4648      	mov	r0, r9
   1194e:	3209      	adds	r2, #9
   11950:	47c0      	blx	r8
   11952:	2800      	cmp	r0, #0
   11954:	d00c      	beq.n	11970 <keepAliveTimerHandler+0xd0>
   11956:	686b      	ldr	r3, [r5, #4]
   11958:	199b      	adds	r3, r3, r6
   1195a:	68da      	ldr	r2, [r3, #12]
   1195c:	2a00      	cmp	r2, #0
   1195e:	d003      	beq.n	11968 <keepAliveTimerHandler+0xc8>
   11960:	3a01      	subs	r2, #1
   11962:	60da      	str	r2, [r3, #12]
   11964:	2a00      	cmp	r2, #0
   11966:	d00e      	beq.n	11986 <keepAliveTimerHandler+0xe6>
   11968:	465b      	mov	r3, fp
   1196a:	681d      	ldr	r5, [r3, #0]
   1196c:	7eeb      	ldrb	r3, [r5, #27]
   1196e:	469a      	mov	sl, r3
   11970:	3401      	adds	r4, #1
   11972:	b2e4      	uxtb	r4, r4
   11974:	4554      	cmp	r4, sl
   11976:	d3d4      	bcc.n	11922 <keepAliveTimerHandler+0x82>
   11978:	b003      	add	sp, #12
   1197a:	bc3c      	pop	{r2, r3, r4, r5}
   1197c:	4690      	mov	r8, r2
   1197e:	4699      	mov	r9, r3
   11980:	46a2      	mov	sl, r4
   11982:	46ab      	mov	fp, r5
   11984:	bdf0      	pop	{r4, r5, r6, r7, pc}
   11986:	6868      	ldr	r0, [r5, #4]
   11988:	2208      	movs	r2, #8
   1198a:	1980      	adds	r0, r0, r6
   1198c:	21ff      	movs	r1, #255	; 0xff
   1198e:	4b05      	ldr	r3, [pc, #20]	; (119a4 <keepAliveTimerHandler+0x104>)
   11990:	4798      	blx	r3
   11992:	4b05      	ldr	r3, [pc, #20]	; (119a8 <keepAliveTimerHandler+0x108>)
   11994:	2007      	movs	r0, #7
   11996:	4798      	blx	r3
   11998:	e7e6      	b.n	11968 <keepAliveTimerHandler+0xc8>
   1199a:	46c0      	nop			; (mov r8, r8)
   1199c:	2000285c 	.word	0x2000285c
   119a0:	00014d19 	.word	0x00014d19
   119a4:	00014d49 	.word	0x00014d49
   119a8:	0000a60d 	.word	0x0000a60d

000119ac <MiApp_SubscribeLinkFailureCallback>:
   119ac:	2800      	cmp	r0, #0
   119ae:	d003      	beq.n	119b8 <MiApp_SubscribeLinkFailureCallback+0xc>
   119b0:	4b02      	ldr	r3, [pc, #8]	; (119bc <MiApp_SubscribeLinkFailureCallback+0x10>)
   119b2:	6018      	str	r0, [r3, #0]
   119b4:	2001      	movs	r0, #1
   119b6:	4770      	bx	lr
   119b8:	2000      	movs	r0, #0
   119ba:	e7fc      	b.n	119b6 <MiApp_SubscribeLinkFailureCallback+0xa>
   119bc:	20002900 	.word	0x20002900

000119c0 <MiApp_SubscribeReConnectionCallback>:
   119c0:	2800      	cmp	r0, #0
   119c2:	d003      	beq.n	119cc <MiApp_SubscribeReConnectionCallback+0xc>
   119c4:	4b02      	ldr	r3, [pc, #8]	; (119d0 <MiApp_SubscribeReConnectionCallback+0x10>)
   119c6:	6018      	str	r0, [r3, #0]
   119c8:	2001      	movs	r0, #1
   119ca:	4770      	bx	lr
   119cc:	2000      	movs	r0, #0
   119ce:	e7fc      	b.n	119ca <MiApp_SubscribeReConnectionCallback+0xa>
   119d0:	200028d4 	.word	0x200028d4

000119d4 <checkLinkFailureAtNoAck>:
   119d4:	b510      	push	{r4, lr}
   119d6:	2803      	cmp	r0, #3
   119d8:	d006      	beq.n	119e8 <checkLinkFailureAtNoAck+0x14>
   119da:	4b12      	ldr	r3, [pc, #72]	; (11a24 <checkLinkFailureAtNoAck+0x50>)
   119dc:	681a      	ldr	r2, [r3, #0]
   119de:	233c      	movs	r3, #60	; 0x3c
   119e0:	5cd2      	ldrb	r2, [r2, r3]
   119e2:	4b11      	ldr	r3, [pc, #68]	; (11a28 <checkLinkFailureAtNoAck+0x54>)
   119e4:	701a      	strb	r2, [r3, #0]
   119e6:	bd10      	pop	{r4, pc}
   119e8:	4a0f      	ldr	r2, [pc, #60]	; (11a28 <checkLinkFailureAtNoAck+0x54>)
   119ea:	7813      	ldrb	r3, [r2, #0]
   119ec:	2b00      	cmp	r3, #0
   119ee:	d0fa      	beq.n	119e6 <checkLinkFailureAtNoAck+0x12>
   119f0:	3b01      	subs	r3, #1
   119f2:	b2db      	uxtb	r3, r3
   119f4:	7013      	strb	r3, [r2, #0]
   119f6:	2b00      	cmp	r3, #0
   119f8:	d1f5      	bne.n	119e6 <checkLinkFailureAtNoAck+0x12>
   119fa:	4a0c      	ldr	r2, [pc, #48]	; (11a2c <checkLinkFailureAtNoAck+0x58>)
   119fc:	480c      	ldr	r0, [pc, #48]	; (11a30 <checkLinkFailureAtNoAck+0x5c>)
   119fe:	7013      	strb	r3, [r2, #0]
   11a00:	4b0c      	ldr	r3, [pc, #48]	; (11a34 <checkLinkFailureAtNoAck+0x60>)
   11a02:	4798      	blx	r3
   11a04:	2208      	movs	r2, #8
   11a06:	4b0c      	ldr	r3, [pc, #48]	; (11a38 <checkLinkFailureAtNoAck+0x64>)
   11a08:	480c      	ldr	r0, [pc, #48]	; (11a3c <checkLinkFailureAtNoAck+0x68>)
   11a0a:	701a      	strb	r2, [r3, #0]
   11a0c:	4b0c      	ldr	r3, [pc, #48]	; (11a40 <checkLinkFailureAtNoAck+0x6c>)
   11a0e:	3a09      	subs	r2, #9
   11a10:	801a      	strh	r2, [r3, #0]
   11a12:	4b0c      	ldr	r3, [pc, #48]	; (11a44 <checkLinkFailureAtNoAck+0x70>)
   11a14:	4798      	blx	r3
   11a16:	4b0c      	ldr	r3, [pc, #48]	; (11a48 <checkLinkFailureAtNoAck+0x74>)
   11a18:	681b      	ldr	r3, [r3, #0]
   11a1a:	2b00      	cmp	r3, #0
   11a1c:	d0e3      	beq.n	119e6 <checkLinkFailureAtNoAck+0x12>
   11a1e:	4798      	blx	r3
   11a20:	e7e1      	b.n	119e6 <checkLinkFailureAtNoAck+0x12>
   11a22:	46c0      	nop			; (mov r8, r8)
   11a24:	2000285c 	.word	0x2000285c
   11a28:	200028d0 	.word	0x200028d0
   11a2c:	20001d0a 	.word	0x20001d0a
   11a30:	200028bc 	.word	0x200028bc
   11a34:	0000bfb1 	.word	0x0000bfb1
   11a38:	20001ce1 	.word	0x20001ce1
   11a3c:	00004001 	.word	0x00004001
   11a40:	200028b8 	.word	0x200028b8
   11a44:	0000a60d 	.word	0x0000a60d
   11a48:	20002900 	.word	0x20002900

00011a4c <generateJitterTimeout>:
   11a4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   11a4e:	000f      	movs	r7, r1
   11a50:	21fa      	movs	r1, #250	; 0xfa
   11a52:	4d0b      	ldr	r5, [pc, #44]	; (11a80 <generateJitterTimeout+0x34>)
   11a54:	0089      	lsls	r1, r1, #2
   11a56:	0006      	movs	r6, r0
   11a58:	47a8      	blx	r5
   11a5a:	00bc      	lsls	r4, r7, #2
   11a5c:	19e4      	adds	r4, r4, r7
   11a5e:	4b09      	ldr	r3, [pc, #36]	; (11a84 <generateJitterTimeout+0x38>)
   11a60:	0064      	lsls	r4, r4, #1
   11a62:	4344      	muls	r4, r0
   11a64:	4798      	blx	r3
   11a66:	4b08      	ldr	r3, [pc, #32]	; (11a88 <generateJitterTimeout+0x3c>)
   11a68:	2164      	movs	r1, #100	; 0x64
   11a6a:	4798      	blx	r3
   11a6c:	20ff      	movs	r0, #255	; 0xff
   11a6e:	1b36      	subs	r6, r6, r4
   11a70:	4008      	ands	r0, r1
   11a72:	0064      	lsls	r4, r4, #1
   11a74:	4360      	muls	r0, r4
   11a76:	2164      	movs	r1, #100	; 0x64
   11a78:	47a8      	blx	r5
   11a7a:	1980      	adds	r0, r0, r6
   11a7c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   11a7e:	46c0      	nop			; (mov r8, r8)
   11a80:	000124c1 	.word	0x000124c1
   11a84:	00015381 	.word	0x00015381
   11a88:	000127a1 	.word	0x000127a1

00011a8c <routeReplyConfcb>:
   11a8c:	b510      	push	{r4, lr}
   11a8e:	0010      	movs	r0, r2
   11a90:	4b01      	ldr	r3, [pc, #4]	; (11a98 <routeReplyConfcb+0xc>)
   11a92:	4798      	blx	r3
   11a94:	bd10      	pop	{r4, pc}
   11a96:	46c0      	nop			; (mov r8, r8)
   11a98:	0000bd25 	.word	0x0000bd25

00011a9c <routeUpdateConfcb>:
   11a9c:	b570      	push	{r4, r5, r6, lr}
   11a9e:	0015      	movs	r5, r2
   11aa0:	4c04      	ldr	r4, [pc, #16]	; (11ab4 <routeUpdateConfcb+0x18>)
   11aa2:	2008      	movs	r0, #8
   11aa4:	47a0      	blx	r4
   11aa6:	2009      	movs	r0, #9
   11aa8:	47a0      	blx	r4
   11aaa:	0028      	movs	r0, r5
   11aac:	4b02      	ldr	r3, [pc, #8]	; (11ab8 <routeUpdateConfcb+0x1c>)
   11aae:	4798      	blx	r3
   11ab0:	bd70      	pop	{r4, r5, r6, pc}
   11ab2:	46c0      	nop			; (mov r8, r8)
   11ab4:	0000a60d 	.word	0x0000a60d
   11ab8:	0000bd25 	.word	0x0000bd25

00011abc <routeReqConfcb>:
   11abc:	b510      	push	{r4, lr}
   11abe:	0010      	movs	r0, r2
   11ac0:	4b01      	ldr	r3, [pc, #4]	; (11ac8 <routeReqConfcb+0xc>)
   11ac2:	4798      	blx	r3
   11ac4:	bd10      	pop	{r4, pc}
   11ac6:	46c0      	nop			; (mov r8, r8)
   11ac8:	0000bd25 	.word	0x0000bd25

00011acc <initRouteTable>:
   11acc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   11ace:	2333      	movs	r3, #51	; 0x33
   11ad0:	4c15      	ldr	r4, [pc, #84]	; (11b28 <initRouteTable+0x5c>)
   11ad2:	6822      	ldr	r2, [r4, #0]
   11ad4:	5cd3      	ldrb	r3, [r2, r3]
   11ad6:	2b00      	cmp	r3, #0
   11ad8:	d018      	beq.n	11b0c <initRouteTable+0x40>
   11ada:	2300      	movs	r3, #0
   11adc:	27ff      	movs	r7, #255	; 0xff
   11ade:	250f      	movs	r5, #15
   11ae0:	2633      	movs	r6, #51	; 0x33
   11ae2:	6892      	ldr	r2, [r2, #8]
   11ae4:	0058      	lsls	r0, r3, #1
   11ae6:	5417      	strb	r7, [r2, r0]
   11ae8:	6822      	ldr	r2, [r4, #0]
   11aea:	3301      	adds	r3, #1
   11aec:	6891      	ldr	r1, [r2, #8]
   11aee:	b2db      	uxtb	r3, r3
   11af0:	1809      	adds	r1, r1, r0
   11af2:	784a      	ldrb	r2, [r1, #1]
   11af4:	43aa      	bics	r2, r5
   11af6:	704a      	strb	r2, [r1, #1]
   11af8:	6822      	ldr	r2, [r4, #0]
   11afa:	6892      	ldr	r2, [r2, #8]
   11afc:	1812      	adds	r2, r2, r0
   11afe:	7851      	ldrb	r1, [r2, #1]
   11b00:	4029      	ands	r1, r5
   11b02:	7051      	strb	r1, [r2, #1]
   11b04:	6822      	ldr	r2, [r4, #0]
   11b06:	5d91      	ldrb	r1, [r2, r6]
   11b08:	4299      	cmp	r1, r3
   11b0a:	d8ea      	bhi.n	11ae2 <initRouteTable+0x16>
   11b0c:	2100      	movs	r1, #0
   11b0e:	68d0      	ldr	r0, [r2, #12]
   11b10:	4b06      	ldr	r3, [pc, #24]	; (11b2c <initRouteTable+0x60>)
   11b12:	2220      	movs	r2, #32
   11b14:	4798      	blx	r3
   11b16:	4806      	ldr	r0, [pc, #24]	; (11b30 <initRouteTable+0x64>)
   11b18:	4b06      	ldr	r3, [pc, #24]	; (11b34 <initRouteTable+0x68>)
   11b1a:	4798      	blx	r3
   11b1c:	6823      	ldr	r3, [r4, #0]
   11b1e:	7f1a      	ldrb	r2, [r3, #28]
   11b20:	4b05      	ldr	r3, [pc, #20]	; (11b38 <initRouteTable+0x6c>)
   11b22:	701a      	strb	r2, [r3, #0]
   11b24:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   11b26:	46c0      	nop			; (mov r8, r8)
   11b28:	2000285c 	.word	0x2000285c
   11b2c:	00014d49 	.word	0x00014d49
   11b30:	20002908 	.word	0x20002908
   11b34:	0000be59 	.word	0x0000be59
   11b38:	20002904 	.word	0x20002904

00011b3c <addRoute>:
   11b3c:	b5f0      	push	{r4, r5, r6, r7, lr}
   11b3e:	46ce      	mov	lr, r9
   11b40:	4647      	mov	r7, r8
   11b42:	2533      	movs	r5, #51	; 0x33
   11b44:	b580      	push	{r7, lr}
   11b46:	4e30      	ldr	r6, [pc, #192]	; (11c08 <addRoute+0xcc>)
   11b48:	4684      	mov	ip, r0
   11b4a:	6837      	ldr	r7, [r6, #0]
   11b4c:	0a04      	lsrs	r4, r0, #8
   11b4e:	5d7d      	ldrb	r5, [r7, r5]
   11b50:	4699      	mov	r9, r3
   11b52:	2000      	movs	r0, #0
   11b54:	42ac      	cmp	r4, r5
   11b56:	d23c      	bcs.n	11bd2 <addRoute+0x96>
   11b58:	0a09      	lsrs	r1, r1, #8
   11b5a:	42a9      	cmp	r1, r5
   11b5c:	d239      	bcs.n	11bd2 <addRoute+0x96>
   11b5e:	25ff      	movs	r5, #255	; 0xff
   11b60:	4663      	mov	r3, ip
   11b62:	421d      	tst	r5, r3
   11b64:	d135      	bne.n	11bd2 <addRoute+0x96>
   11b66:	1c10      	adds	r0, r2, #0
   11b68:	2a0f      	cmp	r2, #15
   11b6a:	d836      	bhi.n	11bda <addRoute+0x9e>
   11b6c:	b2c2      	uxtb	r2, r0
   11b6e:	2001      	movs	r0, #1
   11b70:	4020      	ands	r0, r4
   11b72:	4684      	mov	ip, r0
   11b74:	d137      	bne.n	11be6 <addRoute+0xaa>
   11b76:	0863      	lsrs	r3, r4, #1
   11b78:	4698      	mov	r8, r3
   11b7a:	4640      	mov	r0, r8
   11b7c:	68fb      	ldr	r3, [r7, #12]
   11b7e:	5c1d      	ldrb	r5, [r3, r0]
   11b80:	092d      	lsrs	r5, r5, #4
   11b82:	2d00      	cmp	r5, #0
   11b84:	d002      	beq.n	11b8c <addRoute+0x50>
   11b86:	2000      	movs	r0, #0
   11b88:	42aa      	cmp	r2, r5
   11b8a:	d222      	bcs.n	11bd2 <addRoute+0x96>
   11b8c:	4663      	mov	r3, ip
   11b8e:	68b8      	ldr	r0, [r7, #8]
   11b90:	0064      	lsls	r4, r4, #1
   11b92:	5501      	strb	r1, [r0, r4]
   11b94:	6831      	ldr	r1, [r6, #0]
   11b96:	68c9      	ldr	r1, [r1, #12]
   11b98:	2b00      	cmp	r3, #0
   11b9a:	d02c      	beq.n	11bf6 <addRoute+0xba>
   11b9c:	200f      	movs	r0, #15
   11b9e:	4643      	mov	r3, r8
   11ba0:	4002      	ands	r2, r0
   11ba2:	0015      	movs	r5, r2
   11ba4:	5cca      	ldrb	r2, [r1, r3]
   11ba6:	4382      	bics	r2, r0
   11ba8:	432a      	orrs	r2, r5
   11baa:	54ca      	strb	r2, [r1, r3]
   11bac:	6832      	ldr	r2, [r6, #0]
   11bae:	464b      	mov	r3, r9
   11bb0:	6891      	ldr	r1, [r2, #8]
   11bb2:	220f      	movs	r2, #15
   11bb4:	1909      	adds	r1, r1, r4
   11bb6:	0918      	lsrs	r0, r3, #4
   11bb8:	784b      	ldrb	r3, [r1, #1]
   11bba:	4393      	bics	r3, r2
   11bbc:	4303      	orrs	r3, r0
   11bbe:	704b      	strb	r3, [r1, #1]
   11bc0:	6833      	ldr	r3, [r6, #0]
   11bc2:	2001      	movs	r0, #1
   11bc4:	689b      	ldr	r3, [r3, #8]
   11bc6:	191c      	adds	r4, r3, r4
   11bc8:	7863      	ldrb	r3, [r4, #1]
   11bca:	401a      	ands	r2, r3
   11bcc:	2330      	movs	r3, #48	; 0x30
   11bce:	431a      	orrs	r2, r3
   11bd0:	7062      	strb	r2, [r4, #1]
   11bd2:	bc0c      	pop	{r2, r3}
   11bd4:	4690      	mov	r8, r2
   11bd6:	4699      	mov	r9, r3
   11bd8:	bdf0      	pop	{r4, r5, r6, r7, pc}
   11bda:	200f      	movs	r0, #15
   11bdc:	b2c2      	uxtb	r2, r0
   11bde:	2001      	movs	r0, #1
   11be0:	4020      	ands	r0, r4
   11be2:	4684      	mov	ip, r0
   11be4:	d0c7      	beq.n	11b76 <addRoute+0x3a>
   11be6:	0863      	lsrs	r3, r4, #1
   11be8:	4698      	mov	r8, r3
   11bea:	4640      	mov	r0, r8
   11bec:	68fb      	ldr	r3, [r7, #12]
   11bee:	5c1d      	ldrb	r5, [r3, r0]
   11bf0:	072d      	lsls	r5, r5, #28
   11bf2:	0f2d      	lsrs	r5, r5, #28
   11bf4:	e7c5      	b.n	11b82 <addRoute+0x46>
   11bf6:	4643      	mov	r3, r8
   11bf8:	0110      	lsls	r0, r2, #4
   11bfa:	220f      	movs	r2, #15
   11bfc:	5ccd      	ldrb	r5, [r1, r3]
   11bfe:	402a      	ands	r2, r5
   11c00:	4302      	orrs	r2, r0
   11c02:	54ca      	strb	r2, [r1, r3]
   11c04:	e7d2      	b.n	11bac <addRoute+0x70>
   11c06:	46c0      	nop			; (mov r8, r8)
   11c08:	2000285c 	.word	0x2000285c

00011c0c <handleRouteMessage>:
   11c0c:	b5f0      	push	{r4, r5, r6, r7, lr}
   11c0e:	4657      	mov	r7, sl
   11c10:	46de      	mov	lr, fp
   11c12:	464e      	mov	r6, r9
   11c14:	4645      	mov	r5, r8
   11c16:	b5e0      	push	{r5, r6, r7, lr}
   11c18:	b093      	sub	sp, #76	; 0x4c
   11c1a:	a91c      	add	r1, sp, #112	; 0x70
   11c1c:	780f      	ldrb	r7, [r1, #0]
   11c1e:	7851      	ldrb	r1, [r2, #1]
   11c20:	7812      	ldrb	r2, [r2, #0]
   11c22:	468c      	mov	ip, r1
   11c24:	0209      	lsls	r1, r1, #8
   11c26:	4311      	orrs	r1, r2
   11c28:	781a      	ldrb	r2, [r3, #0]
   11c2a:	0004      	movs	r4, r0
   11c2c:	2a12      	cmp	r2, #18
   11c2e:	d100      	bne.n	11c32 <handleRouteMessage+0x26>
   11c30:	e149      	b.n	11ec6 <handleRouteMessage+0x2ba>
   11c32:	2a13      	cmp	r2, #19
   11c34:	d100      	bne.n	11c38 <handleRouteMessage+0x2c>
   11c36:	e07b      	b.n	11d30 <handleRouteMessage+0x124>
   11c38:	2a11      	cmp	r2, #17
   11c3a:	d008      	beq.n	11c4e <handleRouteMessage+0x42>
   11c3c:	2600      	movs	r6, #0
   11c3e:	0030      	movs	r0, r6
   11c40:	b013      	add	sp, #76	; 0x4c
   11c42:	bc3c      	pop	{r2, r3, r4, r5}
   11c44:	4690      	mov	r8, r2
   11c46:	4699      	mov	r9, r3
   11c48:	46a2      	mov	sl, r4
   11c4a:	46ab      	mov	fp, r5
   11c4c:	bdf0      	pop	{r4, r5, r6, r7, pc}
   11c4e:	785a      	ldrb	r2, [r3, #1]
   11c50:	789b      	ldrb	r3, [r3, #2]
   11c52:	4db6      	ldr	r5, [pc, #728]	; (11f2c <handleRouteMessage+0x320>)
   11c54:	4698      	mov	r8, r3
   11c56:	021b      	lsls	r3, r3, #8
   11c58:	431a      	orrs	r2, r3
   11c5a:	4691      	mov	r9, r2
   11c5c:	7802      	ldrb	r2, [r0, #0]
   11c5e:	003b      	movs	r3, r7
   11c60:	4252      	negs	r2, r2
   11c62:	b2d2      	uxtb	r2, r2
   11c64:	b289      	uxth	r1, r1
   11c66:	88c0      	ldrh	r0, [r0, #6]
   11c68:	47a8      	blx	r5
   11c6a:	2233      	movs	r2, #51	; 0x33
   11c6c:	4db0      	ldr	r5, [pc, #704]	; (11f30 <handleRouteMessage+0x324>)
   11c6e:	2601      	movs	r6, #1
   11c70:	682b      	ldr	r3, [r5, #0]
   11c72:	5c9a      	ldrb	r2, [r3, r2]
   11c74:	4542      	cmp	r2, r8
   11c76:	d9e2      	bls.n	11c3e <handleRouteMessage+0x32>
   11c78:	4642      	mov	r2, r8
   11c7a:	4216      	tst	r6, r2
   11c7c:	d000      	beq.n	11c80 <handleRouteMessage+0x74>
   11c7e:	e145      	b.n	11f0c <handleRouteMessage+0x300>
   11c80:	4642      	mov	r2, r8
   11c82:	68db      	ldr	r3, [r3, #12]
   11c84:	0852      	lsrs	r2, r2, #1
   11c86:	5c9f      	ldrb	r7, [r3, r2]
   11c88:	093b      	lsrs	r3, r7, #4
   11c8a:	469b      	mov	fp, r3
   11c8c:	4ba9      	ldr	r3, [pc, #676]	; (11f34 <handleRouteMessage+0x328>)
   11c8e:	469a      	mov	sl, r3
   11c90:	881b      	ldrh	r3, [r3, #0]
   11c92:	4599      	cmp	r9, r3
   11c94:	d003      	beq.n	11c9e <handleRouteMessage+0x92>
   11c96:	465b      	mov	r3, fp
   11c98:	2601      	movs	r6, #1
   11c9a:	2b00      	cmp	r3, #0
   11c9c:	d0cf      	beq.n	11c3e <handleRouteMessage+0x32>
   11c9e:	88e3      	ldrh	r3, [r4, #6]
   11ca0:	2088      	movs	r0, #136	; 0x88
   11ca2:	4699      	mov	r9, r3
   11ca4:	4ba4      	ldr	r3, [pc, #656]	; (11f38 <handleRouteMessage+0x32c>)
   11ca6:	4798      	blx	r3
   11ca8:	1e06      	subs	r6, r0, #0
   11caa:	d0c7      	beq.n	11c3c <handleRouteMessage+0x30>
   11cac:	4653      	mov	r3, sl
   11cae:	8819      	ldrh	r1, [r3, #0]
   11cb0:	ac0a      	add	r4, sp, #40	; 0x28
   11cb2:	b289      	uxth	r1, r1
   11cb4:	0023      	movs	r3, r4
   11cb6:	464a      	mov	r2, r9
   11cb8:	20ff      	movs	r0, #255	; 0xff
   11cba:	4fa0      	ldr	r7, [pc, #640]	; (11f3c <handleRouteMessage+0x330>)
   11cbc:	47b8      	blx	r7
   11cbe:	2210      	movs	r2, #16
   11cc0:	7863      	ldrb	r3, [r4, #1]
   11cc2:	0031      	movs	r1, r6
   11cc4:	4393      	bics	r3, r2
   11cc6:	7063      	strb	r3, [r4, #1]
   11cc8:	0020      	movs	r0, r4
   11cca:	4b9d      	ldr	r3, [pc, #628]	; (11f40 <handleRouteMessage+0x334>)
   11ccc:	4798      	blx	r3
   11cce:	2312      	movs	r3, #18
   11cd0:	2200      	movs	r2, #0
   11cd2:	5433      	strb	r3, [r6, r0]
   11cd4:	1c43      	adds	r3, r0, #1
   11cd6:	b2db      	uxtb	r3, r3
   11cd8:	54f2      	strb	r2, [r6, r3]
   11cda:	4642      	mov	r2, r8
   11cdc:	1c83      	adds	r3, r0, #2
   11cde:	b2db      	uxtb	r3, r3
   11ce0:	54f2      	strb	r2, [r6, r3]
   11ce2:	465a      	mov	r2, fp
   11ce4:	1cc3      	adds	r3, r0, #3
   11ce6:	0001      	movs	r1, r0
   11ce8:	2033      	movs	r0, #51	; 0x33
   11cea:	b2db      	uxtb	r3, r3
   11cec:	54f2      	strb	r2, [r6, r3]
   11cee:	464b      	mov	r3, r9
   11cf0:	682a      	ldr	r2, [r5, #0]
   11cf2:	0a1b      	lsrs	r3, r3, #8
   11cf4:	5c10      	ldrb	r0, [r2, r0]
   11cf6:	4298      	cmp	r0, r3
   11cf8:	d800      	bhi.n	11cfc <handleRouteMessage+0xf0>
   11cfa:	e10e      	b.n	11f1a <handleRouteMessage+0x30e>
   11cfc:	6892      	ldr	r2, [r2, #8]
   11cfe:	005b      	lsls	r3, r3, #1
   11d00:	5c9b      	ldrb	r3, [r3, r2]
   11d02:	2bff      	cmp	r3, #255	; 0xff
   11d04:	d100      	bne.n	11d08 <handleRouteMessage+0xfc>
   11d06:	e108      	b.n	11f1a <handleRouteMessage+0x30e>
   11d08:	021b      	lsls	r3, r3, #8
   11d0a:	a804      	add	r0, sp, #16
   11d0c:	4684      	mov	ip, r0
   11d0e:	2216      	movs	r2, #22
   11d10:	4462      	add	r2, ip
   11d12:	8013      	strh	r3, [r2, #0]
   11d14:	4b8b      	ldr	r3, [pc, #556]	; (11f44 <handleRouteMessage+0x338>)
   11d16:	9201      	str	r2, [sp, #4]
   11d18:	9303      	str	r3, [sp, #12]
   11d1a:	2300      	movs	r3, #0
   11d1c:	9302      	str	r3, [sp, #8]
   11d1e:	3302      	adds	r3, #2
   11d20:	9300      	str	r3, [sp, #0]
   11d22:	0020      	movs	r0, r4
   11d24:	0033      	movs	r3, r6
   11d26:	2204      	movs	r2, #4
   11d28:	4c87      	ldr	r4, [pc, #540]	; (11f48 <handleRouteMessage+0x33c>)
   11d2a:	47a0      	blx	r4
   11d2c:	2600      	movs	r6, #0
   11d2e:	e786      	b.n	11c3e <handleRouteMessage+0x32>
   11d30:	4a86      	ldr	r2, [pc, #536]	; (11f4c <handleRouteMessage+0x340>)
   11d32:	7816      	ldrb	r6, [r2, #0]
   11d34:	2e00      	cmp	r6, #0
   11d36:	d000      	beq.n	11d3a <handleRouteMessage+0x12e>
   11d38:	e780      	b.n	11c3c <handleRouteMessage+0x30>
   11d3a:	785a      	ldrb	r2, [r3, #1]
   11d3c:	1c9c      	adds	r4, r3, #2
   11d3e:	4693      	mov	fp, r2
   11d40:	2a00      	cmp	r2, #0
   11d42:	d100      	bne.n	11d46 <handleRouteMessage+0x13a>
   11d44:	e0eb      	b.n	11f1e <handleRouteMessage+0x312>
   11d46:	4d7a      	ldr	r5, [pc, #488]	; (11f30 <handleRouteMessage+0x324>)
   11d48:	200f      	movs	r0, #15
   11d4a:	682b      	ldr	r3, [r5, #0]
   11d4c:	9607      	str	r6, [sp, #28]
   11d4e:	68db      	ldr	r3, [r3, #12]
   11d50:	4698      	mov	r8, r3
   11d52:	093b      	lsrs	r3, r7, #4
   11d54:	001a      	movs	r2, r3
   11d56:	2702      	movs	r7, #2
   11d58:	9306      	str	r3, [sp, #24]
   11d5a:	4646      	mov	r6, r8
   11d5c:	2300      	movs	r3, #0
   11d5e:	4002      	ands	r2, r0
   11d60:	9205      	str	r2, [sp, #20]
   11d62:	9704      	str	r7, [sp, #16]
   11d64:	7822      	ldrb	r2, [r4, #0]
   11d66:	0011      	movs	r1, r2
   11d68:	4381      	bics	r1, r0
   11d6a:	d02d      	beq.n	11dc8 <handleRouteMessage+0x1bc>
   11d6c:	0911      	lsrs	r1, r2, #4
   11d6e:	3101      	adds	r1, #1
   11d70:	2910      	cmp	r1, #16
   11d72:	d100      	bne.n	11d76 <handleRouteMessage+0x16a>
   11d74:	3901      	subs	r1, #1
   11d76:	18f7      	adds	r7, r6, r3
   11d78:	46b8      	mov	r8, r7
   11d7a:	783f      	ldrb	r7, [r7, #0]
   11d7c:	46b9      	mov	r9, r7
   11d7e:	4387      	bics	r7, r0
   11d80:	d003      	beq.n	11d8a <handleRouteMessage+0x17e>
   11d82:	464f      	mov	r7, r9
   11d84:	093f      	lsrs	r7, r7, #4
   11d86:	42b9      	cmp	r1, r7
   11d88:	da1e      	bge.n	11dc8 <handleRouteMessage+0x1bc>
   11d8a:	4642      	mov	r2, r8
   11d8c:	7812      	ldrb	r2, [r2, #0]
   11d8e:	0109      	lsls	r1, r1, #4
   11d90:	4002      	ands	r2, r0
   11d92:	4311      	orrs	r1, r2
   11d94:	4642      	mov	r2, r8
   11d96:	4666      	mov	r6, ip
   11d98:	7011      	strb	r1, [r2, #0]
   11d9a:	6829      	ldr	r1, [r5, #0]
   11d9c:	009a      	lsls	r2, r3, #2
   11d9e:	6889      	ldr	r1, [r1, #8]
   11da0:	9f05      	ldr	r7, [sp, #20]
   11da2:	548e      	strb	r6, [r1, r2]
   11da4:	6829      	ldr	r1, [r5, #0]
   11da6:	688e      	ldr	r6, [r1, #8]
   11da8:	18b6      	adds	r6, r6, r2
   11daa:	7871      	ldrb	r1, [r6, #1]
   11dac:	4381      	bics	r1, r0
   11dae:	4339      	orrs	r1, r7
   11db0:	7071      	strb	r1, [r6, #1]
   11db2:	2630      	movs	r6, #48	; 0x30
   11db4:	6829      	ldr	r1, [r5, #0]
   11db6:	6889      	ldr	r1, [r1, #8]
   11db8:	188a      	adds	r2, r1, r2
   11dba:	7851      	ldrb	r1, [r2, #1]
   11dbc:	4001      	ands	r1, r0
   11dbe:	4331      	orrs	r1, r6
   11dc0:	7051      	strb	r1, [r2, #1]
   11dc2:	6829      	ldr	r1, [r5, #0]
   11dc4:	7822      	ldrb	r2, [r4, #0]
   11dc6:	68ce      	ldr	r6, [r1, #12]
   11dc8:	4210      	tst	r0, r2
   11dca:	d02a      	beq.n	11e22 <handleRouteMessage+0x216>
   11dcc:	0712      	lsls	r2, r2, #28
   11dce:	0f12      	lsrs	r2, r2, #28
   11dd0:	3201      	adds	r2, #1
   11dd2:	2a10      	cmp	r2, #16
   11dd4:	d100      	bne.n	11dd8 <handleRouteMessage+0x1cc>
   11dd6:	3a01      	subs	r2, #1
   11dd8:	18f1      	adds	r1, r6, r3
   11dda:	780f      	ldrb	r7, [r1, #0]
   11ddc:	4238      	tst	r0, r7
   11dde:	d003      	beq.n	11de8 <handleRouteMessage+0x1dc>
   11de0:	073f      	lsls	r7, r7, #28
   11de2:	0f3f      	lsrs	r7, r7, #28
   11de4:	42ba      	cmp	r2, r7
   11de6:	da1c      	bge.n	11e22 <handleRouteMessage+0x216>
   11de8:	780e      	ldrb	r6, [r1, #0]
   11dea:	4002      	ands	r2, r0
   11dec:	4386      	bics	r6, r0
   11dee:	4332      	orrs	r2, r6
   11df0:	700a      	strb	r2, [r1, #0]
   11df2:	4661      	mov	r1, ip
   11df4:	9f04      	ldr	r7, [sp, #16]
   11df6:	682a      	ldr	r2, [r5, #0]
   11df8:	46b8      	mov	r8, r7
   11dfa:	6892      	ldr	r2, [r2, #8]
   11dfc:	9e05      	ldr	r6, [sp, #20]
   11dfe:	55d1      	strb	r1, [r2, r7]
   11e00:	682a      	ldr	r2, [r5, #0]
   11e02:	6891      	ldr	r1, [r2, #8]
   11e04:	4441      	add	r1, r8
   11e06:	784a      	ldrb	r2, [r1, #1]
   11e08:	4382      	bics	r2, r0
   11e0a:	4332      	orrs	r2, r6
   11e0c:	2630      	movs	r6, #48	; 0x30
   11e0e:	704a      	strb	r2, [r1, #1]
   11e10:	682a      	ldr	r2, [r5, #0]
   11e12:	6891      	ldr	r1, [r2, #8]
   11e14:	4441      	add	r1, r8
   11e16:	784a      	ldrb	r2, [r1, #1]
   11e18:	4002      	ands	r2, r0
   11e1a:	4332      	orrs	r2, r6
   11e1c:	704a      	strb	r2, [r1, #1]
   11e1e:	682a      	ldr	r2, [r5, #0]
   11e20:	68d6      	ldr	r6, [r2, #12]
   11e22:	9a04      	ldr	r2, [sp, #16]
   11e24:	3301      	adds	r3, #1
   11e26:	3204      	adds	r2, #4
   11e28:	9204      	str	r2, [sp, #16]
   11e2a:	b2da      	uxtb	r2, r3
   11e2c:	3401      	adds	r4, #1
   11e2e:	4593      	cmp	fp, r2
   11e30:	d898      	bhi.n	11d64 <handleRouteMessage+0x158>
   11e32:	46b0      	mov	r8, r6
   11e34:	9e07      	ldr	r6, [sp, #28]
   11e36:	4663      	mov	r3, ip
   11e38:	07db      	lsls	r3, r3, #31
   11e3a:	d556      	bpl.n	11eea <handleRouteMessage+0x2de>
   11e3c:	4663      	mov	r3, ip
   11e3e:	085a      	lsrs	r2, r3, #1
   11e40:	4643      	mov	r3, r8
   11e42:	210f      	movs	r1, #15
   11e44:	5c9b      	ldrb	r3, [r3, r2]
   11e46:	438b      	bics	r3, r1
   11e48:	2101      	movs	r1, #1
   11e4a:	430b      	orrs	r3, r1
   11e4c:	4641      	mov	r1, r8
   11e4e:	548b      	strb	r3, [r1, r2]
   11e50:	4663      	mov	r3, ip
   11e52:	4662      	mov	r2, ip
   11e54:	210f      	movs	r1, #15
   11e56:	005c      	lsls	r4, r3, #1
   11e58:	682b      	ldr	r3, [r5, #0]
   11e5a:	689b      	ldr	r3, [r3, #8]
   11e5c:	551a      	strb	r2, [r3, r4]
   11e5e:	682b      	ldr	r3, [r5, #0]
   11e60:	9a06      	ldr	r2, [sp, #24]
   11e62:	6898      	ldr	r0, [r3, #8]
   11e64:	1900      	adds	r0, r0, r4
   11e66:	7843      	ldrb	r3, [r0, #1]
   11e68:	438b      	bics	r3, r1
   11e6a:	4313      	orrs	r3, r2
   11e6c:	7043      	strb	r3, [r0, #1]
   11e6e:	2030      	movs	r0, #48	; 0x30
   11e70:	682b      	ldr	r3, [r5, #0]
   11e72:	689a      	ldr	r2, [r3, #8]
   11e74:	1912      	adds	r2, r2, r4
   11e76:	7853      	ldrb	r3, [r2, #1]
   11e78:	400b      	ands	r3, r1
   11e7a:	4303      	orrs	r3, r0
   11e7c:	7053      	strb	r3, [r2, #1]
   11e7e:	4b2d      	ldr	r3, [pc, #180]	; (11f34 <handleRouteMessage+0x328>)
   11e80:	6828      	ldr	r0, [r5, #0]
   11e82:	881b      	ldrh	r3, [r3, #0]
   11e84:	6884      	ldr	r4, [r0, #8]
   11e86:	0a1b      	lsrs	r3, r3, #8
   11e88:	b2da      	uxtb	r2, r3
   11e8a:	005b      	lsls	r3, r3, #1
   11e8c:	5ce4      	ldrb	r4, [r4, r3]
   11e8e:	2cff      	cmp	r4, #255	; 0xff
   11e90:	d100      	bne.n	11e94 <handleRouteMessage+0x288>
   11e92:	e6d3      	b.n	11c3c <handleRouteMessage+0x30>
   11e94:	07d4      	lsls	r4, r2, #31
   11e96:	d533      	bpl.n	11f00 <handleRouteMessage+0x2f4>
   11e98:	68c4      	ldr	r4, [r0, #12]
   11e9a:	0852      	lsrs	r2, r2, #1
   11e9c:	5ca0      	ldrb	r0, [r4, r2]
   11e9e:	4388      	bics	r0, r1
   11ea0:	54a0      	strb	r0, [r4, r2]
   11ea2:	21ff      	movs	r1, #255	; 0xff
   11ea4:	682a      	ldr	r2, [r5, #0]
   11ea6:	6892      	ldr	r2, [r2, #8]
   11ea8:	54d1      	strb	r1, [r2, r3]
   11eaa:	682a      	ldr	r2, [r5, #0]
   11eac:	39f0      	subs	r1, #240	; 0xf0
   11eae:	6892      	ldr	r2, [r2, #8]
   11eb0:	18d2      	adds	r2, r2, r3
   11eb2:	7850      	ldrb	r0, [r2, #1]
   11eb4:	4388      	bics	r0, r1
   11eb6:	7050      	strb	r0, [r2, #1]
   11eb8:	682a      	ldr	r2, [r5, #0]
   11eba:	6892      	ldr	r2, [r2, #8]
   11ebc:	18d3      	adds	r3, r2, r3
   11ebe:	785a      	ldrb	r2, [r3, #1]
   11ec0:	4011      	ands	r1, r2
   11ec2:	7059      	strb	r1, [r3, #1]
   11ec4:	e6bb      	b.n	11c3e <handleRouteMessage+0x32>
   11ec6:	4a21      	ldr	r2, [pc, #132]	; (11f4c <handleRouteMessage+0x340>)
   11ec8:	7816      	ldrb	r6, [r2, #0]
   11eca:	2e00      	cmp	r6, #0
   11ecc:	d000      	beq.n	11ed0 <handleRouteMessage+0x2c4>
   11ece:	e6b5      	b.n	11c3c <handleRouteMessage+0x30>
   11ed0:	7858      	ldrb	r0, [r3, #1]
   11ed2:	789d      	ldrb	r5, [r3, #2]
   11ed4:	78da      	ldrb	r2, [r3, #3]
   11ed6:	7823      	ldrb	r3, [r4, #0]
   11ed8:	022d      	lsls	r5, r5, #8
   11eda:	1ad2      	subs	r2, r2, r3
   11edc:	b2d2      	uxtb	r2, r2
   11ede:	b289      	uxth	r1, r1
   11ee0:	4328      	orrs	r0, r5
   11ee2:	003b      	movs	r3, r7
   11ee4:	4c11      	ldr	r4, [pc, #68]	; (11f2c <handleRouteMessage+0x320>)
   11ee6:	47a0      	blx	r4
   11ee8:	e6a9      	b.n	11c3e <handleRouteMessage+0x32>
   11eea:	4663      	mov	r3, ip
   11eec:	085a      	lsrs	r2, r3, #1
   11eee:	4643      	mov	r3, r8
   11ef0:	5c99      	ldrb	r1, [r3, r2]
   11ef2:	230f      	movs	r3, #15
   11ef4:	400b      	ands	r3, r1
   11ef6:	2110      	movs	r1, #16
   11ef8:	430b      	orrs	r3, r1
   11efa:	4641      	mov	r1, r8
   11efc:	548b      	strb	r3, [r1, r2]
   11efe:	e7a7      	b.n	11e50 <handleRouteMessage+0x244>
   11f00:	68c0      	ldr	r0, [r0, #12]
   11f02:	0852      	lsrs	r2, r2, #1
   11f04:	5c84      	ldrb	r4, [r0, r2]
   11f06:	4021      	ands	r1, r4
   11f08:	5481      	strb	r1, [r0, r2]
   11f0a:	e7ca      	b.n	11ea2 <handleRouteMessage+0x296>
   11f0c:	68db      	ldr	r3, [r3, #12]
   11f0e:	0852      	lsrs	r2, r2, #1
   11f10:	5c9f      	ldrb	r7, [r3, r2]
   11f12:	073f      	lsls	r7, r7, #28
   11f14:	0f3b      	lsrs	r3, r7, #28
   11f16:	469b      	mov	fp, r3
   11f18:	e6b8      	b.n	11c8c <handleRouteMessage+0x80>
   11f1a:	4b0d      	ldr	r3, [pc, #52]	; (11f50 <handleRouteMessage+0x344>)
   11f1c:	e6f5      	b.n	11d0a <handleRouteMessage+0xfe>
   11f1e:	4d04      	ldr	r5, [pc, #16]	; (11f30 <handleRouteMessage+0x324>)
   11f20:	093b      	lsrs	r3, r7, #4
   11f22:	9306      	str	r3, [sp, #24]
   11f24:	682b      	ldr	r3, [r5, #0]
   11f26:	68db      	ldr	r3, [r3, #12]
   11f28:	4698      	mov	r8, r3
   11f2a:	e784      	b.n	11e36 <handleRouteMessage+0x22a>
   11f2c:	00011b3d 	.word	0x00011b3d
   11f30:	2000285c 	.word	0x2000285c
   11f34:	200028b8 	.word	0x200028b8
   11f38:	0000bc69 	.word	0x0000bc69
   11f3c:	0000f081 	.word	0x0000f081
   11f40:	0000f0d1 	.word	0x0000f0d1
   11f44:	00011a8d 	.word	0x00011a8d
   11f48:	0000f15d 	.word	0x0000f15d
   11f4c:	20001d1c 	.word	0x20001d1c
   11f50:	0000ffff 	.word	0x0000ffff

00011f54 <removeRoute>:
   11f54:	b530      	push	{r4, r5, lr}
   11f56:	4a18      	ldr	r2, [pc, #96]	; (11fb8 <removeRoute+0x64>)
   11f58:	7812      	ldrb	r2, [r2, #0]
   11f5a:	2a00      	cmp	r2, #0
   11f5c:	d122      	bne.n	11fa4 <removeRoute+0x50>
   11f5e:	0a03      	lsrs	r3, r0, #8
   11f60:	2033      	movs	r0, #51	; 0x33
   11f62:	4c16      	ldr	r4, [pc, #88]	; (11fbc <removeRoute+0x68>)
   11f64:	6821      	ldr	r1, [r4, #0]
   11f66:	5c08      	ldrb	r0, [r1, r0]
   11f68:	4298      	cmp	r0, r3
   11f6a:	d919      	bls.n	11fa0 <removeRoute+0x4c>
   11f6c:	20ff      	movs	r0, #255	; 0xff
   11f6e:	6889      	ldr	r1, [r1, #8]
   11f70:	005a      	lsls	r2, r3, #1
   11f72:	5488      	strb	r0, [r1, r2]
   11f74:	6821      	ldr	r1, [r4, #0]
   11f76:	6888      	ldr	r0, [r1, #8]
   11f78:	210f      	movs	r1, #15
   11f7a:	1880      	adds	r0, r0, r2
   11f7c:	7845      	ldrb	r5, [r0, #1]
   11f7e:	438d      	bics	r5, r1
   11f80:	7045      	strb	r5, [r0, #1]
   11f82:	6820      	ldr	r0, [r4, #0]
   11f84:	6880      	ldr	r0, [r0, #8]
   11f86:	1882      	adds	r2, r0, r2
   11f88:	7850      	ldrb	r0, [r2, #1]
   11f8a:	4008      	ands	r0, r1
   11f8c:	7050      	strb	r0, [r2, #1]
   11f8e:	07da      	lsls	r2, r3, #31
   11f90:	d40a      	bmi.n	11fa8 <removeRoute+0x54>
   11f92:	6822      	ldr	r2, [r4, #0]
   11f94:	085b      	lsrs	r3, r3, #1
   11f96:	68d2      	ldr	r2, [r2, #12]
   11f98:	5cd0      	ldrb	r0, [r2, r3]
   11f9a:	4001      	ands	r1, r0
   11f9c:	54d1      	strb	r1, [r2, r3]
   11f9e:	2201      	movs	r2, #1
   11fa0:	0010      	movs	r0, r2
   11fa2:	bd30      	pop	{r4, r5, pc}
   11fa4:	2200      	movs	r2, #0
   11fa6:	e7fb      	b.n	11fa0 <removeRoute+0x4c>
   11fa8:	6822      	ldr	r2, [r4, #0]
   11faa:	085b      	lsrs	r3, r3, #1
   11fac:	68d0      	ldr	r0, [r2, #12]
   11fae:	5cc2      	ldrb	r2, [r0, r3]
   11fb0:	438a      	bics	r2, r1
   11fb2:	54c2      	strb	r2, [r0, r3]
   11fb4:	2201      	movs	r2, #1
   11fb6:	e7f3      	b.n	11fa0 <removeRoute+0x4c>
   11fb8:	20001d1c 	.word	0x20001d1c
   11fbc:	2000285c 	.word	0x2000285c

00011fc0 <getNextHopAddr>:
   11fc0:	2233      	movs	r2, #51	; 0x33
   11fc2:	4b07      	ldr	r3, [pc, #28]	; (11fe0 <getNextHopAddr+0x20>)
   11fc4:	0a00      	lsrs	r0, r0, #8
   11fc6:	681b      	ldr	r3, [r3, #0]
   11fc8:	5c9a      	ldrb	r2, [r3, r2]
   11fca:	4282      	cmp	r2, r0
   11fcc:	d801      	bhi.n	11fd2 <getNextHopAddr+0x12>
   11fce:	4805      	ldr	r0, [pc, #20]	; (11fe4 <getNextHopAddr+0x24>)
   11fd0:	4770      	bx	lr
   11fd2:	689b      	ldr	r3, [r3, #8]
   11fd4:	0040      	lsls	r0, r0, #1
   11fd6:	5cc0      	ldrb	r0, [r0, r3]
   11fd8:	28ff      	cmp	r0, #255	; 0xff
   11fda:	d0f8      	beq.n	11fce <getNextHopAddr+0xe>
   11fdc:	0200      	lsls	r0, r0, #8
   11fde:	e7f7      	b.n	11fd0 <getNextHopAddr+0x10>
   11fe0:	2000285c 	.word	0x2000285c
   11fe4:	0000ffff 	.word	0x0000ffff

00011fe8 <routeTimerHandler>:
   11fe8:	b5f0      	push	{r4, r5, r6, r7, lr}
   11fea:	464e      	mov	r6, r9
   11fec:	46de      	mov	lr, fp
   11fee:	4657      	mov	r7, sl
   11ff0:	4645      	mov	r5, r8
   11ff2:	b5e0      	push	{r5, r6, r7, lr}
   11ff4:	4e70      	ldr	r6, [pc, #448]	; (121b8 <routeTimerHandler+0x1d0>)
   11ff6:	b08f      	sub	sp, #60	; 0x3c
   11ff8:	7a33      	ldrb	r3, [r6, #8]
   11ffa:	2b00      	cmp	r3, #0
   11ffc:	d050      	beq.n	120a0 <routeTimerHandler+0xb8>
   11ffe:	4b6f      	ldr	r3, [pc, #444]	; (121bc <routeTimerHandler+0x1d4>)
   12000:	2500      	movs	r5, #0
   12002:	4698      	mov	r8, r3
   12004:	4b6e      	ldr	r3, [pc, #440]	; (121c0 <routeTimerHandler+0x1d8>)
   12006:	4f6f      	ldr	r7, [pc, #444]	; (121c4 <routeTimerHandler+0x1dc>)
   12008:	4699      	mov	r9, r3
   1200a:	4b6f      	ldr	r3, [pc, #444]	; (121c8 <routeTimerHandler+0x1e0>)
   1200c:	469a      	mov	sl, r3
   1200e:	e032      	b.n	12076 <routeTimerHandler+0x8e>
   12010:	464b      	mov	r3, r9
   12012:	681a      	ldr	r2, [r3, #0]
   12014:	2333      	movs	r3, #51	; 0x33
   12016:	8b81      	ldrh	r1, [r0, #28]
   12018:	5cd0      	ldrb	r0, [r2, r3]
   1201a:	0a0b      	lsrs	r3, r1, #8
   1201c:	4298      	cmp	r0, r3
   1201e:	d94f      	bls.n	120c0 <routeTimerHandler+0xd8>
   12020:	6892      	ldr	r2, [r2, #8]
   12022:	005b      	lsls	r3, r3, #1
   12024:	5c9b      	ldrb	r3, [r3, r2]
   12026:	2bff      	cmp	r3, #255	; 0xff
   12028:	d04a      	beq.n	120c0 <routeTimerHandler+0xd8>
   1202a:	021b      	lsls	r3, r3, #8
   1202c:	469b      	mov	fp, r3
   1202e:	2310      	movs	r3, #16
   12030:	7e62      	ldrb	r2, [r4, #25]
   12032:	4013      	ands	r3, r2
   12034:	d04e      	beq.n	120d4 <routeTimerHandler+0xec>
   12036:	3001      	adds	r0, #1
   12038:	4b64      	ldr	r3, [pc, #400]	; (121cc <routeTimerHandler+0x1e4>)
   1203a:	b2c0      	uxtb	r0, r0
   1203c:	4798      	blx	r3
   1203e:	464a      	mov	r2, r9
   12040:	233e      	movs	r3, #62	; 0x3e
   12042:	6812      	ldr	r2, [r2, #0]
   12044:	7420      	strb	r0, [r4, #16]
   12046:	5cd3      	ldrb	r3, [r2, r3]
   12048:	4659      	mov	r1, fp
   1204a:	3301      	adds	r3, #1
   1204c:	7463      	strb	r3, [r4, #17]
   1204e:	465b      	mov	r3, fp
   12050:	4a5f      	ldr	r2, [pc, #380]	; (121d0 <routeTimerHandler+0x1e8>)
   12052:	81a3      	strh	r3, [r4, #12]
   12054:	0020      	movs	r0, r4
   12056:	4b5f      	ldr	r3, [pc, #380]	; (121d4 <routeTimerHandler+0x1ec>)
   12058:	4798      	blx	r3
   1205a:	2800      	cmp	r0, #0
   1205c:	d102      	bne.n	12064 <routeTimerHandler+0x7c>
   1205e:	7c63      	ldrb	r3, [r4, #17]
   12060:	3b01      	subs	r3, #1
   12062:	7463      	strb	r3, [r4, #17]
   12064:	0021      	movs	r1, r4
   12066:	485c      	ldr	r0, [pc, #368]	; (121d8 <routeTimerHandler+0x1f0>)
   12068:	4b54      	ldr	r3, [pc, #336]	; (121bc <routeTimerHandler+0x1d4>)
   1206a:	4798      	blx	r3
   1206c:	3501      	adds	r5, #1
   1206e:	7a33      	ldrb	r3, [r6, #8]
   12070:	b2ed      	uxtb	r5, r5
   12072:	42ab      	cmp	r3, r5
   12074:	d914      	bls.n	120a0 <routeTimerHandler+0xb8>
   12076:	2100      	movs	r1, #0
   12078:	0030      	movs	r0, r6
   1207a:	47b8      	blx	r7
   1207c:	1e04      	subs	r4, r0, #0
   1207e:	d018      	beq.n	120b2 <routeTimerHandler+0xca>
   12080:	7c03      	ldrb	r3, [r0, #16]
   12082:	2b00      	cmp	r3, #0
   12084:	d004      	beq.n	12090 <routeTimerHandler+0xa8>
   12086:	3b01      	subs	r3, #1
   12088:	b2db      	uxtb	r3, r3
   1208a:	7403      	strb	r3, [r0, #16]
   1208c:	2b00      	cmp	r3, #0
   1208e:	d0bf      	beq.n	12010 <routeTimerHandler+0x28>
   12090:	0021      	movs	r1, r4
   12092:	0030      	movs	r0, r6
   12094:	47c0      	blx	r8
   12096:	3501      	adds	r5, #1
   12098:	7a33      	ldrb	r3, [r6, #8]
   1209a:	b2ed      	uxtb	r5, r5
   1209c:	42ab      	cmp	r3, r5
   1209e:	d8ea      	bhi.n	12076 <routeTimerHandler+0x8e>
   120a0:	4b4e      	ldr	r3, [pc, #312]	; (121dc <routeTimerHandler+0x1f4>)
   120a2:	781a      	ldrb	r2, [r3, #0]
   120a4:	2a00      	cmp	r2, #0
   120a6:	d004      	beq.n	120b2 <routeTimerHandler+0xca>
   120a8:	3a01      	subs	r2, #1
   120aa:	b2d2      	uxtb	r2, r2
   120ac:	701a      	strb	r2, [r3, #0]
   120ae:	2a00      	cmp	r2, #0
   120b0:	d023      	beq.n	120fa <routeTimerHandler+0x112>
   120b2:	b00f      	add	sp, #60	; 0x3c
   120b4:	bc3c      	pop	{r2, r3, r4, r5}
   120b6:	4690      	mov	r8, r2
   120b8:	4699      	mov	r9, r3
   120ba:	46a2      	mov	sl, r4
   120bc:	46ab      	mov	fp, r5
   120be:	bdf0      	pop	{r4, r5, r6, r7, pc}
   120c0:	68a3      	ldr	r3, [r4, #8]
   120c2:	2b00      	cmp	r3, #0
   120c4:	d0d2      	beq.n	1206c <routeTimerHandler+0x84>
   120c6:	7ca0      	ldrb	r0, [r4, #18]
   120c8:	0022      	movs	r2, r4
   120ca:	2107      	movs	r1, #7
   120cc:	4798      	blx	r3
   120ce:	0020      	movs	r0, r4
   120d0:	47d0      	blx	sl
   120d2:	e7cb      	b.n	1206c <routeTimerHandler+0x84>
   120d4:	7463      	strb	r3, [r4, #17]
   120d6:	68a2      	ldr	r2, [r4, #8]
   120d8:	4659      	mov	r1, fp
   120da:	0020      	movs	r0, r4
   120dc:	4b3d      	ldr	r3, [pc, #244]	; (121d4 <routeTimerHandler+0x1ec>)
   120de:	4798      	blx	r3
   120e0:	2800      	cmp	r0, #0
   120e2:	d106      	bne.n	120f2 <routeTimerHandler+0x10a>
   120e4:	68a3      	ldr	r3, [r4, #8]
   120e6:	2b00      	cmp	r3, #0
   120e8:	d003      	beq.n	120f2 <routeTimerHandler+0x10a>
   120ea:	7ca0      	ldrb	r0, [r4, #18]
   120ec:	0022      	movs	r2, r4
   120ee:	2101      	movs	r1, #1
   120f0:	4798      	blx	r3
   120f2:	0020      	movs	r0, r4
   120f4:	4b34      	ldr	r3, [pc, #208]	; (121c8 <routeTimerHandler+0x1e0>)
   120f6:	4798      	blx	r3
   120f8:	e7b8      	b.n	1206c <routeTimerHandler+0x84>
   120fa:	4931      	ldr	r1, [pc, #196]	; (121c0 <routeTimerHandler+0x1d8>)
   120fc:	4689      	mov	r9, r1
   120fe:	6809      	ldr	r1, [r1, #0]
   12100:	7f08      	ldrb	r0, [r1, #28]
   12102:	7018      	strb	r0, [r3, #0]
   12104:	2333      	movs	r3, #51	; 0x33
   12106:	5cce      	ldrb	r6, [r1, r3]
   12108:	2e00      	cmp	r6, #0
   1210a:	d0d2      	beq.n	120b2 <routeTimerHandler+0xca>
   1210c:	3601      	adds	r6, #1
   1210e:	6889      	ldr	r1, [r1, #8]
   12110:	b2f6      	uxtb	r6, r6
   12112:	3b32      	subs	r3, #50	; 0x32
   12114:	e005      	b.n	12122 <routeTimerHandler+0x13a>
   12116:	3301      	adds	r3, #1
   12118:	b2db      	uxtb	r3, r3
   1211a:	b2c2      	uxtb	r2, r0
   1211c:	3102      	adds	r1, #2
   1211e:	429e      	cmp	r6, r3
   12120:	d00a      	beq.n	12138 <routeTimerHandler+0x150>
   12122:	780c      	ldrb	r4, [r1, #0]
   12124:	1c18      	adds	r0, r3, #0
   12126:	2cff      	cmp	r4, #255	; 0xff
   12128:	d1f5      	bne.n	12116 <routeTimerHandler+0x12e>
   1212a:	3301      	adds	r3, #1
   1212c:	1c10      	adds	r0, r2, #0
   1212e:	b2db      	uxtb	r3, r3
   12130:	b2c2      	uxtb	r2, r0
   12132:	3102      	adds	r1, #2
   12134:	429e      	cmp	r6, r3
   12136:	d1f4      	bne.n	12122 <routeTimerHandler+0x13a>
   12138:	2a00      	cmp	r2, #0
   1213a:	d0ba      	beq.n	120b2 <routeTimerHandler+0xca>
   1213c:	0854      	lsrs	r4, r2, #1
   1213e:	07d3      	lsls	r3, r2, #31
   12140:	d501      	bpl.n	12146 <routeTimerHandler+0x15e>
   12142:	0852      	lsrs	r2, r2, #1
   12144:	1c54      	adds	r4, r2, #1
   12146:	2616      	movs	r6, #22
   12148:	2303      	movs	r3, #3
   1214a:	446e      	add	r6, sp
   1214c:	425b      	negs	r3, r3
   1214e:	8033      	strh	r3, [r6, #0]
   12150:	2088      	movs	r0, #136	; 0x88
   12152:	4b23      	ldr	r3, [pc, #140]	; (121e0 <routeTimerHandler+0x1f8>)
   12154:	4798      	blx	r3
   12156:	1e07      	subs	r7, r0, #0
   12158:	d0ab      	beq.n	120b2 <routeTimerHandler+0xca>
   1215a:	4b22      	ldr	r3, [pc, #136]	; (121e4 <routeTimerHandler+0x1fc>)
   1215c:	8832      	ldrh	r2, [r6, #0]
   1215e:	8819      	ldrh	r1, [r3, #0]
   12160:	2001      	movs	r0, #1
   12162:	ab06      	add	r3, sp, #24
   12164:	b289      	uxth	r1, r1
   12166:	4d20      	ldr	r5, [pc, #128]	; (121e8 <routeTimerHandler+0x200>)
   12168:	47a8      	blx	r5
   1216a:	0039      	movs	r1, r7
   1216c:	a806      	add	r0, sp, #24
   1216e:	4b1f      	ldr	r3, [pc, #124]	; (121ec <routeTimerHandler+0x204>)
   12170:	4798      	blx	r3
   12172:	2313      	movs	r3, #19
   12174:	543b      	strb	r3, [r7, r0]
   12176:	0003      	movs	r3, r0
   12178:	3301      	adds	r3, #1
   1217a:	b2db      	uxtb	r3, r3
   1217c:	54fc      	strb	r4, [r7, r3]
   1217e:	464b      	mov	r3, r9
   12180:	4680      	mov	r8, r0
   12182:	681b      	ldr	r3, [r3, #0]
   12184:	3002      	adds	r0, #2
   12186:	b2c0      	uxtb	r0, r0
   12188:	68d9      	ldr	r1, [r3, #12]
   1218a:	0022      	movs	r2, r4
   1218c:	1838      	adds	r0, r7, r0
   1218e:	4b18      	ldr	r3, [pc, #96]	; (121f0 <routeTimerHandler+0x208>)
   12190:	4798      	blx	r3
   12192:	2301      	movs	r3, #1
   12194:	425b      	negs	r3, r3
   12196:	8033      	strh	r3, [r6, #0]
   12198:	4b16      	ldr	r3, [pc, #88]	; (121f4 <routeTimerHandler+0x20c>)
   1219a:	3402      	adds	r4, #2
   1219c:	9303      	str	r3, [sp, #12]
   1219e:	2300      	movs	r3, #0
   121a0:	9302      	str	r3, [sp, #8]
   121a2:	3302      	adds	r3, #2
   121a4:	b2e2      	uxtb	r2, r4
   121a6:	9300      	str	r3, [sp, #0]
   121a8:	9601      	str	r6, [sp, #4]
   121aa:	003b      	movs	r3, r7
   121ac:	4641      	mov	r1, r8
   121ae:	a806      	add	r0, sp, #24
   121b0:	4c11      	ldr	r4, [pc, #68]	; (121f8 <routeTimerHandler+0x210>)
   121b2:	47a0      	blx	r4
   121b4:	e77d      	b.n	120b2 <routeTimerHandler+0xca>
   121b6:	46c0      	nop			; (mov r8, r8)
   121b8:	20002908 	.word	0x20002908
   121bc:	0000be65 	.word	0x0000be65
   121c0:	2000285c 	.word	0x2000285c
   121c4:	0000be9d 	.word	0x0000be9d
   121c8:	0000bd25 	.word	0x0000bd25
   121cc:	0000dbb9 	.word	0x0000dbb9
   121d0:	0000d57d 	.word	0x0000d57d
   121d4:	0000f2ad 	.word	0x0000f2ad
   121d8:	2000287c 	.word	0x2000287c
   121dc:	20002904 	.word	0x20002904
   121e0:	0000bc69 	.word	0x0000bc69
   121e4:	200028b8 	.word	0x200028b8
   121e8:	0000f081 	.word	0x0000f081
   121ec:	0000f0d1 	.word	0x0000f0d1
   121f0:	00014d37 	.word	0x00014d37
   121f4:	00011a9d 	.word	0x00011a9d
   121f8:	0000f15d 	.word	0x0000f15d

000121fc <initiateRouteReq>:
   121fc:	b5f0      	push	{r4, r5, r6, r7, lr}
   121fe:	4646      	mov	r6, r8
   12200:	46d6      	mov	lr, sl
   12202:	464f      	mov	r7, r9
   12204:	2301      	movs	r3, #1
   12206:	b5c0      	push	{r6, r7, lr}
   12208:	2616      	movs	r6, #22
   1220a:	b08e      	sub	sp, #56	; 0x38
   1220c:	425b      	negs	r3, r3
   1220e:	446e      	add	r6, sp
   12210:	8033      	strh	r3, [r6, #0]
   12212:	4680      	mov	r8, r0
   12214:	4b23      	ldr	r3, [pc, #140]	; (122a4 <initiateRouteReq+0xa8>)
   12216:	2088      	movs	r0, #136	; 0x88
   12218:	4798      	blx	r3
   1221a:	1e04      	subs	r4, r0, #0
   1221c:	d03f      	beq.n	1229e <initiateRouteReq+0xa2>
   1221e:	4b22      	ldr	r3, [pc, #136]	; (122a8 <initiateRouteReq+0xac>)
   12220:	ad06      	add	r5, sp, #24
   12222:	8819      	ldrh	r1, [r3, #0]
   12224:	469a      	mov	sl, r3
   12226:	b289      	uxth	r1, r1
   12228:	8832      	ldrh	r2, [r6, #0]
   1222a:	002b      	movs	r3, r5
   1222c:	20ff      	movs	r0, #255	; 0xff
   1222e:	4f1f      	ldr	r7, [pc, #124]	; (122ac <initiateRouteReq+0xb0>)
   12230:	47b8      	blx	r7
   12232:	2220      	movs	r2, #32
   12234:	786b      	ldrb	r3, [r5, #1]
   12236:	0021      	movs	r1, r4
   12238:	4313      	orrs	r3, r2
   1223a:	706b      	strb	r3, [r5, #1]
   1223c:	0028      	movs	r0, r5
   1223e:	4b1c      	ldr	r3, [pc, #112]	; (122b0 <initiateRouteReq+0xb4>)
   12240:	4798      	blx	r3
   12242:	4653      	mov	r3, sl
   12244:	4681      	mov	r9, r0
   12246:	8818      	ldrh	r0, [r3, #0]
   12248:	78a1      	ldrb	r1, [r4, #2]
   1224a:	b280      	uxth	r0, r0
   1224c:	4b19      	ldr	r3, [pc, #100]	; (122b4 <initiateRouteReq+0xb8>)
   1224e:	4798      	blx	r3
   12250:	1e07      	subs	r7, r0, #0
   12252:	d020      	beq.n	12296 <initiateRouteReq+0x9a>
   12254:	2311      	movs	r3, #17
   12256:	464a      	mov	r2, r9
   12258:	54a3      	strb	r3, [r4, r2]
   1225a:	464b      	mov	r3, r9
   1225c:	2100      	movs	r1, #0
   1225e:	3301      	adds	r3, #1
   12260:	b2db      	uxtb	r3, r3
   12262:	54e1      	strb	r1, [r4, r3]
   12264:	4643      	mov	r3, r8
   12266:	3202      	adds	r2, #2
   12268:	b2d2      	uxtb	r2, r2
   1226a:	0a1b      	lsrs	r3, r3, #8
   1226c:	54a3      	strb	r3, [r4, r2]
   1226e:	4b12      	ldr	r3, [pc, #72]	; (122b8 <initiateRouteReq+0xbc>)
   12270:	9102      	str	r1, [sp, #8]
   12272:	9303      	str	r3, [sp, #12]
   12274:	2302      	movs	r3, #2
   12276:	9601      	str	r6, [sp, #4]
   12278:	9300      	str	r3, [sp, #0]
   1227a:	2203      	movs	r2, #3
   1227c:	0023      	movs	r3, r4
   1227e:	4649      	mov	r1, r9
   12280:	0028      	movs	r0, r5
   12282:	4c0e      	ldr	r4, [pc, #56]	; (122bc <initiateRouteReq+0xc0>)
   12284:	47a0      	blx	r4
   12286:	0007      	movs	r7, r0
   12288:	0038      	movs	r0, r7
   1228a:	b00e      	add	sp, #56	; 0x38
   1228c:	bc1c      	pop	{r2, r3, r4}
   1228e:	4690      	mov	r8, r2
   12290:	4699      	mov	r9, r3
   12292:	46a2      	mov	sl, r4
   12294:	bdf0      	pop	{r4, r5, r6, r7, pc}
   12296:	0020      	movs	r0, r4
   12298:	4b09      	ldr	r3, [pc, #36]	; (122c0 <initiateRouteReq+0xc4>)
   1229a:	4798      	blx	r3
   1229c:	e7f4      	b.n	12288 <initiateRouteReq+0x8c>
   1229e:	2700      	movs	r7, #0
   122a0:	e7f2      	b.n	12288 <initiateRouteReq+0x8c>
   122a2:	46c0      	nop			; (mov r8, r8)
   122a4:	0000bc69 	.word	0x0000bc69
   122a8:	200028b8 	.word	0x200028b8
   122ac:	0000f081 	.word	0x0000f081
   122b0:	0000f0d1 	.word	0x0000f0d1
   122b4:	0000f59d 	.word	0x0000f59d
   122b8:	00011abd 	.word	0x00011abd
   122bc:	0000f15d 	.word	0x0000f15d
   122c0:	0000bd25 	.word	0x0000bd25

000122c4 <keyDetermineProcedure>:
   122c4:	4b06      	ldr	r3, [pc, #24]	; (122e0 <keyDetermineProcedure+0x1c>)
   122c6:	781b      	ldrb	r3, [r3, #0]
   122c8:	3b06      	subs	r3, #6
   122ca:	2b01      	cmp	r3, #1
   122cc:	d902      	bls.n	122d4 <keyDetermineProcedure+0x10>
   122ce:	4b05      	ldr	r3, [pc, #20]	; (122e4 <keyDetermineProcedure+0x20>)
   122d0:	6818      	ldr	r0, [r3, #0]
   122d2:	4770      	bx	lr
   122d4:	2808      	cmp	r0, #8
   122d6:	d0fa      	beq.n	122ce <keyDetermineProcedure+0xa>
   122d8:	4b02      	ldr	r3, [pc, #8]	; (122e4 <keyDetermineProcedure+0x20>)
   122da:	6818      	ldr	r0, [r3, #0]
   122dc:	3010      	adds	r0, #16
   122de:	e7f8      	b.n	122d2 <keyDetermineProcedure+0xe>
   122e0:	20001ce1 	.word	0x20001ce1
   122e4:	20002860 	.word	0x20002860

000122e8 <secureFrame>:
   122e8:	b5f0      	push	{r4, r5, r6, r7, lr}
   122ea:	4657      	mov	r7, sl
   122ec:	464e      	mov	r6, r9
   122ee:	46de      	mov	lr, fp
   122f0:	4645      	mov	r5, r8
   122f2:	4681      	mov	r9, r0
   122f4:	b5e0      	push	{r5, r6, r7, lr}
   122f6:	b0af      	sub	sp, #188	; 0xbc
   122f8:	ac06      	add	r4, sp, #24
   122fa:	000e      	movs	r6, r1
   122fc:	0017      	movs	r7, r2
   122fe:	469a      	mov	sl, r3
   12300:	2210      	movs	r2, #16
   12302:	4b3a      	ldr	r3, [pc, #232]	; (123ec <secureFrame+0x104>)
   12304:	2100      	movs	r1, #0
   12306:	0020      	movs	r0, r4
   12308:	4798      	blx	r3
   1230a:	464b      	mov	r3, r9
   1230c:	7c1a      	ldrb	r2, [r3, #16]
   1230e:	2a07      	cmp	r2, #7
   12310:	d80e      	bhi.n	12330 <secureFrame+0x48>
   12312:	2301      	movs	r3, #1
   12314:	2188      	movs	r1, #136	; 0x88
   12316:	4093      	lsls	r3, r2
   12318:	4219      	tst	r1, r3
   1231a:	d152      	bne.n	123c2 <secureFrame+0xda>
   1231c:	3944      	subs	r1, #68	; 0x44
   1231e:	4219      	tst	r1, r3
   12320:	d153      	bne.n	123ca <secureFrame+0xe2>
   12322:	3922      	subs	r1, #34	; 0x22
   12324:	4219      	tst	r1, r3
   12326:	d003      	beq.n	12330 <secureFrame+0x48>
   12328:	2304      	movs	r3, #4
   1232a:	9305      	str	r3, [sp, #20]
   1232c:	469b      	mov	fp, r3
   1232e:	e002      	b.n	12336 <secureFrame+0x4e>
   12330:	2300      	movs	r3, #0
   12332:	469b      	mov	fp, r3
   12334:	9305      	str	r3, [sp, #20]
   12336:	4b2e      	ldr	r3, [pc, #184]	; (123f0 <secureFrame+0x108>)
   12338:	4d2e      	ldr	r5, [pc, #184]	; (123f4 <secureFrame+0x10c>)
   1233a:	79d9      	ldrb	r1, [r3, #7]
   1233c:	7362      	strb	r2, [r4, #13]
   1233e:	7061      	strb	r1, [r4, #1]
   12340:	7999      	ldrb	r1, [r3, #6]
   12342:	0032      	movs	r2, r6
   12344:	70a1      	strb	r1, [r4, #2]
   12346:	7959      	ldrb	r1, [r3, #5]
   12348:	a80a      	add	r0, sp, #40	; 0x28
   1234a:	70e1      	strb	r1, [r4, #3]
   1234c:	7919      	ldrb	r1, [r3, #4]
   1234e:	7121      	strb	r1, [r4, #4]
   12350:	78d9      	ldrb	r1, [r3, #3]
   12352:	7161      	strb	r1, [r4, #5]
   12354:	7899      	ldrb	r1, [r3, #2]
   12356:	71a1      	strb	r1, [r4, #6]
   12358:	7859      	ldrb	r1, [r3, #1]
   1235a:	781b      	ldrb	r3, [r3, #0]
   1235c:	71e1      	strb	r1, [r4, #7]
   1235e:	7223      	strb	r3, [r4, #8]
   12360:	78eb      	ldrb	r3, [r5, #3]
   12362:	4651      	mov	r1, sl
   12364:	7263      	strb	r3, [r4, #9]
   12366:	78ab      	ldrb	r3, [r5, #2]
   12368:	44b2      	add	sl, r6
   1236a:	72a3      	strb	r3, [r4, #10]
   1236c:	786b      	ldrb	r3, [r5, #1]
   1236e:	72e3      	strb	r3, [r4, #11]
   12370:	782b      	ldrb	r3, [r5, #0]
   12372:	7323      	strb	r3, [r4, #12]
   12374:	4b20      	ldr	r3, [pc, #128]	; (123f8 <secureFrame+0x110>)
   12376:	4698      	mov	r8, r3
   12378:	4798      	blx	r3
   1237a:	ab0a      	add	r3, sp, #40	; 0x28
   1237c:	469c      	mov	ip, r3
   1237e:	44b4      	add	ip, r6
   12380:	4663      	mov	r3, ip
   12382:	003a      	movs	r2, r7
   12384:	4651      	mov	r1, sl
   12386:	4660      	mov	r0, ip
   12388:	9304      	str	r3, [sp, #16]
   1238a:	47c0      	blx	r8
   1238c:	4b1b      	ldr	r3, [pc, #108]	; (123fc <secureFrame+0x114>)
   1238e:	20ff      	movs	r0, #255	; 0xff
   12390:	4798      	blx	r3
   12392:	2300      	movs	r3, #0
   12394:	9302      	str	r3, [sp, #8]
   12396:	464b      	mov	r3, r9
   12398:	7c1b      	ldrb	r3, [r3, #16]
   1239a:	0021      	movs	r1, r4
   1239c:	9301      	str	r3, [sp, #4]
   1239e:	9700      	str	r7, [sp, #0]
   123a0:	0033      	movs	r3, r6
   123a2:	9a38      	ldr	r2, [sp, #224]	; 0xe0
   123a4:	a80a      	add	r0, sp, #40	; 0x28
   123a6:	4c16      	ldr	r4, [pc, #88]	; (12400 <secureFrame+0x118>)
   123a8:	47a0      	blx	r4
   123aa:	2800      	cmp	r0, #0
   123ac:	d011      	beq.n	123d2 <secureFrame+0xea>
   123ae:	23ff      	movs	r3, #255	; 0xff
   123b0:	469b      	mov	fp, r3
   123b2:	4658      	mov	r0, fp
   123b4:	b02f      	add	sp, #188	; 0xbc
   123b6:	bc3c      	pop	{r2, r3, r4, r5}
   123b8:	4690      	mov	r8, r2
   123ba:	4699      	mov	r9, r3
   123bc:	46a2      	mov	sl, r4
   123be:	46ab      	mov	fp, r5
   123c0:	bdf0      	pop	{r4, r5, r6, r7, pc}
   123c2:	2310      	movs	r3, #16
   123c4:	9305      	str	r3, [sp, #20]
   123c6:	469b      	mov	fp, r3
   123c8:	e7b5      	b.n	12336 <secureFrame+0x4e>
   123ca:	2308      	movs	r3, #8
   123cc:	9305      	str	r3, [sp, #20]
   123ce:	469b      	mov	fp, r3
   123d0:	e7b1      	b.n	12336 <secureFrame+0x4e>
   123d2:	682b      	ldr	r3, [r5, #0]
   123d4:	3003      	adds	r0, #3
   123d6:	3301      	adds	r3, #1
   123d8:	602b      	str	r3, [r5, #0]
   123da:	4b0a      	ldr	r3, [pc, #40]	; (12404 <secureFrame+0x11c>)
   123dc:	4798      	blx	r3
   123de:	9b05      	ldr	r3, [sp, #20]
   123e0:	9904      	ldr	r1, [sp, #16]
   123e2:	18fa      	adds	r2, r7, r3
   123e4:	4650      	mov	r0, sl
   123e6:	47c0      	blx	r8
   123e8:	e7e3      	b.n	123b2 <secureFrame+0xca>
   123ea:	46c0      	nop			; (mov r8, r8)
   123ec:	00014d49 	.word	0x00014d49
   123f0:	20000094 	.word	0x20000094
   123f4:	20002914 	.word	0x20002914
   123f8:	00014d37 	.word	0x00014d37
   123fc:	0000ac8d 	.word	0x0000ac8d
   12400:	0000b819 	.word	0x0000b819
   12404:	0000a60d 	.word	0x0000a60d

00012408 <unsecureFrame>:
   12408:	b5f0      	push	{r4, r5, r6, r7, lr}
   1240a:	46ce      	mov	lr, r9
   1240c:	4647      	mov	r7, r8
   1240e:	0006      	movs	r6, r0
   12410:	b580      	push	{r7, lr}
   12412:	b089      	sub	sp, #36	; 0x24
   12414:	ac04      	add	r4, sp, #16
   12416:	000d      	movs	r5, r1
   12418:	4691      	mov	r9, r2
   1241a:	4698      	mov	r8, r3
   1241c:	2210      	movs	r2, #16
   1241e:	4b25      	ldr	r3, [pc, #148]	; (124b4 <unsecureFrame+0xac>)
   12420:	2100      	movs	r1, #0
   12422:	0020      	movs	r0, r4
   12424:	4798      	blx	r3
   12426:	7c33      	ldrb	r3, [r6, #16]
   12428:	2700      	movs	r7, #0
   1242a:	2b07      	cmp	r3, #7
   1242c:	d805      	bhi.n	1243a <unsecureFrame+0x32>
   1242e:	2201      	movs	r2, #1
   12430:	2188      	movs	r1, #136	; 0x88
   12432:	409a      	lsls	r2, r3
   12434:	3710      	adds	r7, #16
   12436:	4211      	tst	r1, r2
   12438:	d032      	beq.n	124a0 <unsecureFrame+0x98>
   1243a:	7363      	strb	r3, [r4, #13]
   1243c:	4643      	mov	r3, r8
   1243e:	79ea      	ldrb	r2, [r5, #7]
   12440:	20ff      	movs	r0, #255	; 0xff
   12442:	7062      	strb	r2, [r4, #1]
   12444:	79aa      	ldrb	r2, [r5, #6]
   12446:	70a2      	strb	r2, [r4, #2]
   12448:	796a      	ldrb	r2, [r5, #5]
   1244a:	70e2      	strb	r2, [r4, #3]
   1244c:	792a      	ldrb	r2, [r5, #4]
   1244e:	7122      	strb	r2, [r4, #4]
   12450:	78ea      	ldrb	r2, [r5, #3]
   12452:	7162      	strb	r2, [r4, #5]
   12454:	78aa      	ldrb	r2, [r5, #2]
   12456:	71a2      	strb	r2, [r4, #6]
   12458:	786a      	ldrb	r2, [r5, #1]
   1245a:	71e2      	strb	r2, [r4, #7]
   1245c:	782a      	ldrb	r2, [r5, #0]
   1245e:	1bdd      	subs	r5, r3, r7
   12460:	7222      	strb	r2, [r4, #8]
   12462:	7df2      	ldrb	r2, [r6, #23]
   12464:	4b14      	ldr	r3, [pc, #80]	; (124b8 <unsecureFrame+0xb0>)
   12466:	7262      	strb	r2, [r4, #9]
   12468:	7db2      	ldrb	r2, [r6, #22]
   1246a:	b2ed      	uxtb	r5, r5
   1246c:	72a2      	strb	r2, [r4, #10]
   1246e:	7d72      	ldrb	r2, [r6, #21]
   12470:	72e2      	strb	r2, [r4, #11]
   12472:	7d32      	ldrb	r2, [r6, #20]
   12474:	7322      	strb	r2, [r4, #12]
   12476:	4798      	blx	r3
   12478:	2301      	movs	r3, #1
   1247a:	9302      	str	r3, [sp, #8]
   1247c:	7c33      	ldrb	r3, [r6, #16]
   1247e:	0021      	movs	r1, r4
   12480:	9301      	str	r3, [sp, #4]
   12482:	9500      	str	r5, [sp, #0]
   12484:	464b      	mov	r3, r9
   12486:	9a11      	ldr	r2, [sp, #68]	; 0x44
   12488:	9810      	ldr	r0, [sp, #64]	; 0x40
   1248a:	4c0c      	ldr	r4, [pc, #48]	; (124bc <unsecureFrame+0xb4>)
   1248c:	47a0      	blx	r4
   1248e:	2800      	cmp	r0, #0
   12490:	d000      	beq.n	12494 <unsecureFrame+0x8c>
   12492:	27ff      	movs	r7, #255	; 0xff
   12494:	0038      	movs	r0, r7
   12496:	b009      	add	sp, #36	; 0x24
   12498:	bc0c      	pop	{r2, r3}
   1249a:	4690      	mov	r8, r2
   1249c:	4699      	mov	r9, r3
   1249e:	bdf0      	pop	{r4, r5, r6, r7, pc}
   124a0:	3944      	subs	r1, #68	; 0x44
   124a2:	3f08      	subs	r7, #8
   124a4:	4211      	tst	r1, r2
   124a6:	d1c8      	bne.n	1243a <unsecureFrame+0x32>
   124a8:	3922      	subs	r1, #34	; 0x22
   124aa:	400a      	ands	r2, r1
   124ac:	1e51      	subs	r1, r2, #1
   124ae:	418a      	sbcs	r2, r1
   124b0:	0097      	lsls	r7, r2, #2
   124b2:	e7c2      	b.n	1243a <unsecureFrame+0x32>
   124b4:	00014d49 	.word	0x00014d49
   124b8:	0000ac8d 	.word	0x0000ac8d
   124bc:	0000b819 	.word	0x0000b819

000124c0 <__udivsi3>:
   124c0:	2200      	movs	r2, #0
   124c2:	0843      	lsrs	r3, r0, #1
   124c4:	428b      	cmp	r3, r1
   124c6:	d374      	bcc.n	125b2 <__udivsi3+0xf2>
   124c8:	0903      	lsrs	r3, r0, #4
   124ca:	428b      	cmp	r3, r1
   124cc:	d35f      	bcc.n	1258e <__udivsi3+0xce>
   124ce:	0a03      	lsrs	r3, r0, #8
   124d0:	428b      	cmp	r3, r1
   124d2:	d344      	bcc.n	1255e <__udivsi3+0x9e>
   124d4:	0b03      	lsrs	r3, r0, #12
   124d6:	428b      	cmp	r3, r1
   124d8:	d328      	bcc.n	1252c <__udivsi3+0x6c>
   124da:	0c03      	lsrs	r3, r0, #16
   124dc:	428b      	cmp	r3, r1
   124de:	d30d      	bcc.n	124fc <__udivsi3+0x3c>
   124e0:	22ff      	movs	r2, #255	; 0xff
   124e2:	0209      	lsls	r1, r1, #8
   124e4:	ba12      	rev	r2, r2
   124e6:	0c03      	lsrs	r3, r0, #16
   124e8:	428b      	cmp	r3, r1
   124ea:	d302      	bcc.n	124f2 <__udivsi3+0x32>
   124ec:	1212      	asrs	r2, r2, #8
   124ee:	0209      	lsls	r1, r1, #8
   124f0:	d065      	beq.n	125be <__udivsi3+0xfe>
   124f2:	0b03      	lsrs	r3, r0, #12
   124f4:	428b      	cmp	r3, r1
   124f6:	d319      	bcc.n	1252c <__udivsi3+0x6c>
   124f8:	e000      	b.n	124fc <__udivsi3+0x3c>
   124fa:	0a09      	lsrs	r1, r1, #8
   124fc:	0bc3      	lsrs	r3, r0, #15
   124fe:	428b      	cmp	r3, r1
   12500:	d301      	bcc.n	12506 <__udivsi3+0x46>
   12502:	03cb      	lsls	r3, r1, #15
   12504:	1ac0      	subs	r0, r0, r3
   12506:	4152      	adcs	r2, r2
   12508:	0b83      	lsrs	r3, r0, #14
   1250a:	428b      	cmp	r3, r1
   1250c:	d301      	bcc.n	12512 <__udivsi3+0x52>
   1250e:	038b      	lsls	r3, r1, #14
   12510:	1ac0      	subs	r0, r0, r3
   12512:	4152      	adcs	r2, r2
   12514:	0b43      	lsrs	r3, r0, #13
   12516:	428b      	cmp	r3, r1
   12518:	d301      	bcc.n	1251e <__udivsi3+0x5e>
   1251a:	034b      	lsls	r3, r1, #13
   1251c:	1ac0      	subs	r0, r0, r3
   1251e:	4152      	adcs	r2, r2
   12520:	0b03      	lsrs	r3, r0, #12
   12522:	428b      	cmp	r3, r1
   12524:	d301      	bcc.n	1252a <__udivsi3+0x6a>
   12526:	030b      	lsls	r3, r1, #12
   12528:	1ac0      	subs	r0, r0, r3
   1252a:	4152      	adcs	r2, r2
   1252c:	0ac3      	lsrs	r3, r0, #11
   1252e:	428b      	cmp	r3, r1
   12530:	d301      	bcc.n	12536 <__udivsi3+0x76>
   12532:	02cb      	lsls	r3, r1, #11
   12534:	1ac0      	subs	r0, r0, r3
   12536:	4152      	adcs	r2, r2
   12538:	0a83      	lsrs	r3, r0, #10
   1253a:	428b      	cmp	r3, r1
   1253c:	d301      	bcc.n	12542 <__udivsi3+0x82>
   1253e:	028b      	lsls	r3, r1, #10
   12540:	1ac0      	subs	r0, r0, r3
   12542:	4152      	adcs	r2, r2
   12544:	0a43      	lsrs	r3, r0, #9
   12546:	428b      	cmp	r3, r1
   12548:	d301      	bcc.n	1254e <__udivsi3+0x8e>
   1254a:	024b      	lsls	r3, r1, #9
   1254c:	1ac0      	subs	r0, r0, r3
   1254e:	4152      	adcs	r2, r2
   12550:	0a03      	lsrs	r3, r0, #8
   12552:	428b      	cmp	r3, r1
   12554:	d301      	bcc.n	1255a <__udivsi3+0x9a>
   12556:	020b      	lsls	r3, r1, #8
   12558:	1ac0      	subs	r0, r0, r3
   1255a:	4152      	adcs	r2, r2
   1255c:	d2cd      	bcs.n	124fa <__udivsi3+0x3a>
   1255e:	09c3      	lsrs	r3, r0, #7
   12560:	428b      	cmp	r3, r1
   12562:	d301      	bcc.n	12568 <__udivsi3+0xa8>
   12564:	01cb      	lsls	r3, r1, #7
   12566:	1ac0      	subs	r0, r0, r3
   12568:	4152      	adcs	r2, r2
   1256a:	0983      	lsrs	r3, r0, #6
   1256c:	428b      	cmp	r3, r1
   1256e:	d301      	bcc.n	12574 <__udivsi3+0xb4>
   12570:	018b      	lsls	r3, r1, #6
   12572:	1ac0      	subs	r0, r0, r3
   12574:	4152      	adcs	r2, r2
   12576:	0943      	lsrs	r3, r0, #5
   12578:	428b      	cmp	r3, r1
   1257a:	d301      	bcc.n	12580 <__udivsi3+0xc0>
   1257c:	014b      	lsls	r3, r1, #5
   1257e:	1ac0      	subs	r0, r0, r3
   12580:	4152      	adcs	r2, r2
   12582:	0903      	lsrs	r3, r0, #4
   12584:	428b      	cmp	r3, r1
   12586:	d301      	bcc.n	1258c <__udivsi3+0xcc>
   12588:	010b      	lsls	r3, r1, #4
   1258a:	1ac0      	subs	r0, r0, r3
   1258c:	4152      	adcs	r2, r2
   1258e:	08c3      	lsrs	r3, r0, #3
   12590:	428b      	cmp	r3, r1
   12592:	d301      	bcc.n	12598 <__udivsi3+0xd8>
   12594:	00cb      	lsls	r3, r1, #3
   12596:	1ac0      	subs	r0, r0, r3
   12598:	4152      	adcs	r2, r2
   1259a:	0883      	lsrs	r3, r0, #2
   1259c:	428b      	cmp	r3, r1
   1259e:	d301      	bcc.n	125a4 <__udivsi3+0xe4>
   125a0:	008b      	lsls	r3, r1, #2
   125a2:	1ac0      	subs	r0, r0, r3
   125a4:	4152      	adcs	r2, r2
   125a6:	0843      	lsrs	r3, r0, #1
   125a8:	428b      	cmp	r3, r1
   125aa:	d301      	bcc.n	125b0 <__udivsi3+0xf0>
   125ac:	004b      	lsls	r3, r1, #1
   125ae:	1ac0      	subs	r0, r0, r3
   125b0:	4152      	adcs	r2, r2
   125b2:	1a41      	subs	r1, r0, r1
   125b4:	d200      	bcs.n	125b8 <__udivsi3+0xf8>
   125b6:	4601      	mov	r1, r0
   125b8:	4152      	adcs	r2, r2
   125ba:	4610      	mov	r0, r2
   125bc:	4770      	bx	lr
   125be:	e7ff      	b.n	125c0 <__udivsi3+0x100>
   125c0:	b501      	push	{r0, lr}
   125c2:	2000      	movs	r0, #0
   125c4:	f000 f8f0 	bl	127a8 <__aeabi_idiv0>
   125c8:	bd02      	pop	{r1, pc}
   125ca:	46c0      	nop			; (mov r8, r8)

000125cc <__aeabi_uidivmod>:
   125cc:	2900      	cmp	r1, #0
   125ce:	d0f7      	beq.n	125c0 <__udivsi3+0x100>
   125d0:	e776      	b.n	124c0 <__udivsi3>
   125d2:	4770      	bx	lr

000125d4 <__divsi3>:
   125d4:	4603      	mov	r3, r0
   125d6:	430b      	orrs	r3, r1
   125d8:	d47f      	bmi.n	126da <__divsi3+0x106>
   125da:	2200      	movs	r2, #0
   125dc:	0843      	lsrs	r3, r0, #1
   125de:	428b      	cmp	r3, r1
   125e0:	d374      	bcc.n	126cc <__divsi3+0xf8>
   125e2:	0903      	lsrs	r3, r0, #4
   125e4:	428b      	cmp	r3, r1
   125e6:	d35f      	bcc.n	126a8 <__divsi3+0xd4>
   125e8:	0a03      	lsrs	r3, r0, #8
   125ea:	428b      	cmp	r3, r1
   125ec:	d344      	bcc.n	12678 <__divsi3+0xa4>
   125ee:	0b03      	lsrs	r3, r0, #12
   125f0:	428b      	cmp	r3, r1
   125f2:	d328      	bcc.n	12646 <__divsi3+0x72>
   125f4:	0c03      	lsrs	r3, r0, #16
   125f6:	428b      	cmp	r3, r1
   125f8:	d30d      	bcc.n	12616 <__divsi3+0x42>
   125fa:	22ff      	movs	r2, #255	; 0xff
   125fc:	0209      	lsls	r1, r1, #8
   125fe:	ba12      	rev	r2, r2
   12600:	0c03      	lsrs	r3, r0, #16
   12602:	428b      	cmp	r3, r1
   12604:	d302      	bcc.n	1260c <__divsi3+0x38>
   12606:	1212      	asrs	r2, r2, #8
   12608:	0209      	lsls	r1, r1, #8
   1260a:	d065      	beq.n	126d8 <__divsi3+0x104>
   1260c:	0b03      	lsrs	r3, r0, #12
   1260e:	428b      	cmp	r3, r1
   12610:	d319      	bcc.n	12646 <__divsi3+0x72>
   12612:	e000      	b.n	12616 <__divsi3+0x42>
   12614:	0a09      	lsrs	r1, r1, #8
   12616:	0bc3      	lsrs	r3, r0, #15
   12618:	428b      	cmp	r3, r1
   1261a:	d301      	bcc.n	12620 <__divsi3+0x4c>
   1261c:	03cb      	lsls	r3, r1, #15
   1261e:	1ac0      	subs	r0, r0, r3
   12620:	4152      	adcs	r2, r2
   12622:	0b83      	lsrs	r3, r0, #14
   12624:	428b      	cmp	r3, r1
   12626:	d301      	bcc.n	1262c <__divsi3+0x58>
   12628:	038b      	lsls	r3, r1, #14
   1262a:	1ac0      	subs	r0, r0, r3
   1262c:	4152      	adcs	r2, r2
   1262e:	0b43      	lsrs	r3, r0, #13
   12630:	428b      	cmp	r3, r1
   12632:	d301      	bcc.n	12638 <__divsi3+0x64>
   12634:	034b      	lsls	r3, r1, #13
   12636:	1ac0      	subs	r0, r0, r3
   12638:	4152      	adcs	r2, r2
   1263a:	0b03      	lsrs	r3, r0, #12
   1263c:	428b      	cmp	r3, r1
   1263e:	d301      	bcc.n	12644 <__divsi3+0x70>
   12640:	030b      	lsls	r3, r1, #12
   12642:	1ac0      	subs	r0, r0, r3
   12644:	4152      	adcs	r2, r2
   12646:	0ac3      	lsrs	r3, r0, #11
   12648:	428b      	cmp	r3, r1
   1264a:	d301      	bcc.n	12650 <__divsi3+0x7c>
   1264c:	02cb      	lsls	r3, r1, #11
   1264e:	1ac0      	subs	r0, r0, r3
   12650:	4152      	adcs	r2, r2
   12652:	0a83      	lsrs	r3, r0, #10
   12654:	428b      	cmp	r3, r1
   12656:	d301      	bcc.n	1265c <__divsi3+0x88>
   12658:	028b      	lsls	r3, r1, #10
   1265a:	1ac0      	subs	r0, r0, r3
   1265c:	4152      	adcs	r2, r2
   1265e:	0a43      	lsrs	r3, r0, #9
   12660:	428b      	cmp	r3, r1
   12662:	d301      	bcc.n	12668 <__divsi3+0x94>
   12664:	024b      	lsls	r3, r1, #9
   12666:	1ac0      	subs	r0, r0, r3
   12668:	4152      	adcs	r2, r2
   1266a:	0a03      	lsrs	r3, r0, #8
   1266c:	428b      	cmp	r3, r1
   1266e:	d301      	bcc.n	12674 <__divsi3+0xa0>
   12670:	020b      	lsls	r3, r1, #8
   12672:	1ac0      	subs	r0, r0, r3
   12674:	4152      	adcs	r2, r2
   12676:	d2cd      	bcs.n	12614 <__divsi3+0x40>
   12678:	09c3      	lsrs	r3, r0, #7
   1267a:	428b      	cmp	r3, r1
   1267c:	d301      	bcc.n	12682 <__divsi3+0xae>
   1267e:	01cb      	lsls	r3, r1, #7
   12680:	1ac0      	subs	r0, r0, r3
   12682:	4152      	adcs	r2, r2
   12684:	0983      	lsrs	r3, r0, #6
   12686:	428b      	cmp	r3, r1
   12688:	d301      	bcc.n	1268e <__divsi3+0xba>
   1268a:	018b      	lsls	r3, r1, #6
   1268c:	1ac0      	subs	r0, r0, r3
   1268e:	4152      	adcs	r2, r2
   12690:	0943      	lsrs	r3, r0, #5
   12692:	428b      	cmp	r3, r1
   12694:	d301      	bcc.n	1269a <__divsi3+0xc6>
   12696:	014b      	lsls	r3, r1, #5
   12698:	1ac0      	subs	r0, r0, r3
   1269a:	4152      	adcs	r2, r2
   1269c:	0903      	lsrs	r3, r0, #4
   1269e:	428b      	cmp	r3, r1
   126a0:	d301      	bcc.n	126a6 <__divsi3+0xd2>
   126a2:	010b      	lsls	r3, r1, #4
   126a4:	1ac0      	subs	r0, r0, r3
   126a6:	4152      	adcs	r2, r2
   126a8:	08c3      	lsrs	r3, r0, #3
   126aa:	428b      	cmp	r3, r1
   126ac:	d301      	bcc.n	126b2 <__divsi3+0xde>
   126ae:	00cb      	lsls	r3, r1, #3
   126b0:	1ac0      	subs	r0, r0, r3
   126b2:	4152      	adcs	r2, r2
   126b4:	0883      	lsrs	r3, r0, #2
   126b6:	428b      	cmp	r3, r1
   126b8:	d301      	bcc.n	126be <__divsi3+0xea>
   126ba:	008b      	lsls	r3, r1, #2
   126bc:	1ac0      	subs	r0, r0, r3
   126be:	4152      	adcs	r2, r2
   126c0:	0843      	lsrs	r3, r0, #1
   126c2:	428b      	cmp	r3, r1
   126c4:	d301      	bcc.n	126ca <__divsi3+0xf6>
   126c6:	004b      	lsls	r3, r1, #1
   126c8:	1ac0      	subs	r0, r0, r3
   126ca:	4152      	adcs	r2, r2
   126cc:	1a41      	subs	r1, r0, r1
   126ce:	d200      	bcs.n	126d2 <__divsi3+0xfe>
   126d0:	4601      	mov	r1, r0
   126d2:	4152      	adcs	r2, r2
   126d4:	4610      	mov	r0, r2
   126d6:	4770      	bx	lr
   126d8:	e05d      	b.n	12796 <__divsi3+0x1c2>
   126da:	0fca      	lsrs	r2, r1, #31
   126dc:	d000      	beq.n	126e0 <__divsi3+0x10c>
   126de:	4249      	negs	r1, r1
   126e0:	1003      	asrs	r3, r0, #32
   126e2:	d300      	bcc.n	126e6 <__divsi3+0x112>
   126e4:	4240      	negs	r0, r0
   126e6:	4053      	eors	r3, r2
   126e8:	2200      	movs	r2, #0
   126ea:	469c      	mov	ip, r3
   126ec:	0903      	lsrs	r3, r0, #4
   126ee:	428b      	cmp	r3, r1
   126f0:	d32d      	bcc.n	1274e <__divsi3+0x17a>
   126f2:	0a03      	lsrs	r3, r0, #8
   126f4:	428b      	cmp	r3, r1
   126f6:	d312      	bcc.n	1271e <__divsi3+0x14a>
   126f8:	22fc      	movs	r2, #252	; 0xfc
   126fa:	0189      	lsls	r1, r1, #6
   126fc:	ba12      	rev	r2, r2
   126fe:	0a03      	lsrs	r3, r0, #8
   12700:	428b      	cmp	r3, r1
   12702:	d30c      	bcc.n	1271e <__divsi3+0x14a>
   12704:	0189      	lsls	r1, r1, #6
   12706:	1192      	asrs	r2, r2, #6
   12708:	428b      	cmp	r3, r1
   1270a:	d308      	bcc.n	1271e <__divsi3+0x14a>
   1270c:	0189      	lsls	r1, r1, #6
   1270e:	1192      	asrs	r2, r2, #6
   12710:	428b      	cmp	r3, r1
   12712:	d304      	bcc.n	1271e <__divsi3+0x14a>
   12714:	0189      	lsls	r1, r1, #6
   12716:	d03a      	beq.n	1278e <__divsi3+0x1ba>
   12718:	1192      	asrs	r2, r2, #6
   1271a:	e000      	b.n	1271e <__divsi3+0x14a>
   1271c:	0989      	lsrs	r1, r1, #6
   1271e:	09c3      	lsrs	r3, r0, #7
   12720:	428b      	cmp	r3, r1
   12722:	d301      	bcc.n	12728 <__divsi3+0x154>
   12724:	01cb      	lsls	r3, r1, #7
   12726:	1ac0      	subs	r0, r0, r3
   12728:	4152      	adcs	r2, r2
   1272a:	0983      	lsrs	r3, r0, #6
   1272c:	428b      	cmp	r3, r1
   1272e:	d301      	bcc.n	12734 <__divsi3+0x160>
   12730:	018b      	lsls	r3, r1, #6
   12732:	1ac0      	subs	r0, r0, r3
   12734:	4152      	adcs	r2, r2
   12736:	0943      	lsrs	r3, r0, #5
   12738:	428b      	cmp	r3, r1
   1273a:	d301      	bcc.n	12740 <__divsi3+0x16c>
   1273c:	014b      	lsls	r3, r1, #5
   1273e:	1ac0      	subs	r0, r0, r3
   12740:	4152      	adcs	r2, r2
   12742:	0903      	lsrs	r3, r0, #4
   12744:	428b      	cmp	r3, r1
   12746:	d301      	bcc.n	1274c <__divsi3+0x178>
   12748:	010b      	lsls	r3, r1, #4
   1274a:	1ac0      	subs	r0, r0, r3
   1274c:	4152      	adcs	r2, r2
   1274e:	08c3      	lsrs	r3, r0, #3
   12750:	428b      	cmp	r3, r1
   12752:	d301      	bcc.n	12758 <__divsi3+0x184>
   12754:	00cb      	lsls	r3, r1, #3
   12756:	1ac0      	subs	r0, r0, r3
   12758:	4152      	adcs	r2, r2
   1275a:	0883      	lsrs	r3, r0, #2
   1275c:	428b      	cmp	r3, r1
   1275e:	d301      	bcc.n	12764 <__divsi3+0x190>
   12760:	008b      	lsls	r3, r1, #2
   12762:	1ac0      	subs	r0, r0, r3
   12764:	4152      	adcs	r2, r2
   12766:	d2d9      	bcs.n	1271c <__divsi3+0x148>
   12768:	0843      	lsrs	r3, r0, #1
   1276a:	428b      	cmp	r3, r1
   1276c:	d301      	bcc.n	12772 <__divsi3+0x19e>
   1276e:	004b      	lsls	r3, r1, #1
   12770:	1ac0      	subs	r0, r0, r3
   12772:	4152      	adcs	r2, r2
   12774:	1a41      	subs	r1, r0, r1
   12776:	d200      	bcs.n	1277a <__divsi3+0x1a6>
   12778:	4601      	mov	r1, r0
   1277a:	4663      	mov	r3, ip
   1277c:	4152      	adcs	r2, r2
   1277e:	105b      	asrs	r3, r3, #1
   12780:	4610      	mov	r0, r2
   12782:	d301      	bcc.n	12788 <__divsi3+0x1b4>
   12784:	4240      	negs	r0, r0
   12786:	2b00      	cmp	r3, #0
   12788:	d500      	bpl.n	1278c <__divsi3+0x1b8>
   1278a:	4249      	negs	r1, r1
   1278c:	4770      	bx	lr
   1278e:	4663      	mov	r3, ip
   12790:	105b      	asrs	r3, r3, #1
   12792:	d300      	bcc.n	12796 <__divsi3+0x1c2>
   12794:	4240      	negs	r0, r0
   12796:	b501      	push	{r0, lr}
   12798:	2000      	movs	r0, #0
   1279a:	f000 f805 	bl	127a8 <__aeabi_idiv0>
   1279e:	bd02      	pop	{r1, pc}

000127a0 <__aeabi_idivmod>:
   127a0:	2900      	cmp	r1, #0
   127a2:	d0f8      	beq.n	12796 <__divsi3+0x1c2>
   127a4:	e716      	b.n	125d4 <__divsi3>
   127a6:	4770      	bx	lr

000127a8 <__aeabi_idiv0>:
   127a8:	4770      	bx	lr
   127aa:	46c0      	nop			; (mov r8, r8)

000127ac <__aeabi_cfrcmple>:
   127ac:	4684      	mov	ip, r0
   127ae:	1c08      	adds	r0, r1, #0
   127b0:	4661      	mov	r1, ip
   127b2:	e7ff      	b.n	127b4 <__aeabi_cfcmpeq>

000127b4 <__aeabi_cfcmpeq>:
   127b4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   127b6:	f000 fbb5 	bl	12f24 <__lesf2>
   127ba:	2800      	cmp	r0, #0
   127bc:	d401      	bmi.n	127c2 <__aeabi_cfcmpeq+0xe>
   127be:	2100      	movs	r1, #0
   127c0:	42c8      	cmn	r0, r1
   127c2:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

000127c4 <__aeabi_fcmpeq>:
   127c4:	b510      	push	{r4, lr}
   127c6:	f000 fb47 	bl	12e58 <__eqsf2>
   127ca:	4240      	negs	r0, r0
   127cc:	3001      	adds	r0, #1
   127ce:	bd10      	pop	{r4, pc}

000127d0 <__aeabi_fcmplt>:
   127d0:	b510      	push	{r4, lr}
   127d2:	f000 fba7 	bl	12f24 <__lesf2>
   127d6:	2800      	cmp	r0, #0
   127d8:	db01      	blt.n	127de <__aeabi_fcmplt+0xe>
   127da:	2000      	movs	r0, #0
   127dc:	bd10      	pop	{r4, pc}
   127de:	2001      	movs	r0, #1
   127e0:	bd10      	pop	{r4, pc}
   127e2:	46c0      	nop			; (mov r8, r8)

000127e4 <__aeabi_fcmple>:
   127e4:	b510      	push	{r4, lr}
   127e6:	f000 fb9d 	bl	12f24 <__lesf2>
   127ea:	2800      	cmp	r0, #0
   127ec:	dd01      	ble.n	127f2 <__aeabi_fcmple+0xe>
   127ee:	2000      	movs	r0, #0
   127f0:	bd10      	pop	{r4, pc}
   127f2:	2001      	movs	r0, #1
   127f4:	bd10      	pop	{r4, pc}
   127f6:	46c0      	nop			; (mov r8, r8)

000127f8 <__aeabi_fcmpgt>:
   127f8:	b510      	push	{r4, lr}
   127fa:	f000 fb53 	bl	12ea4 <__gesf2>
   127fe:	2800      	cmp	r0, #0
   12800:	dc01      	bgt.n	12806 <__aeabi_fcmpgt+0xe>
   12802:	2000      	movs	r0, #0
   12804:	bd10      	pop	{r4, pc}
   12806:	2001      	movs	r0, #1
   12808:	bd10      	pop	{r4, pc}
   1280a:	46c0      	nop			; (mov r8, r8)

0001280c <__aeabi_fcmpge>:
   1280c:	b510      	push	{r4, lr}
   1280e:	f000 fb49 	bl	12ea4 <__gesf2>
   12812:	2800      	cmp	r0, #0
   12814:	da01      	bge.n	1281a <__aeabi_fcmpge+0xe>
   12816:	2000      	movs	r0, #0
   12818:	bd10      	pop	{r4, pc}
   1281a:	2001      	movs	r0, #1
   1281c:	bd10      	pop	{r4, pc}
   1281e:	46c0      	nop			; (mov r8, r8)

00012820 <__aeabi_lmul>:
   12820:	b5f0      	push	{r4, r5, r6, r7, lr}
   12822:	46ce      	mov	lr, r9
   12824:	4647      	mov	r7, r8
   12826:	0415      	lsls	r5, r2, #16
   12828:	0c2d      	lsrs	r5, r5, #16
   1282a:	002e      	movs	r6, r5
   1282c:	b580      	push	{r7, lr}
   1282e:	0407      	lsls	r7, r0, #16
   12830:	0c14      	lsrs	r4, r2, #16
   12832:	0c3f      	lsrs	r7, r7, #16
   12834:	4699      	mov	r9, r3
   12836:	0c03      	lsrs	r3, r0, #16
   12838:	437e      	muls	r6, r7
   1283a:	435d      	muls	r5, r3
   1283c:	4367      	muls	r7, r4
   1283e:	4363      	muls	r3, r4
   12840:	197f      	adds	r7, r7, r5
   12842:	0c34      	lsrs	r4, r6, #16
   12844:	19e4      	adds	r4, r4, r7
   12846:	469c      	mov	ip, r3
   12848:	42a5      	cmp	r5, r4
   1284a:	d903      	bls.n	12854 <__aeabi_lmul+0x34>
   1284c:	2380      	movs	r3, #128	; 0x80
   1284e:	025b      	lsls	r3, r3, #9
   12850:	4698      	mov	r8, r3
   12852:	44c4      	add	ip, r8
   12854:	464b      	mov	r3, r9
   12856:	4351      	muls	r1, r2
   12858:	4343      	muls	r3, r0
   1285a:	0436      	lsls	r6, r6, #16
   1285c:	0c36      	lsrs	r6, r6, #16
   1285e:	0c25      	lsrs	r5, r4, #16
   12860:	0424      	lsls	r4, r4, #16
   12862:	4465      	add	r5, ip
   12864:	19a4      	adds	r4, r4, r6
   12866:	1859      	adds	r1, r3, r1
   12868:	1949      	adds	r1, r1, r5
   1286a:	0020      	movs	r0, r4
   1286c:	bc0c      	pop	{r2, r3}
   1286e:	4690      	mov	r8, r2
   12870:	4699      	mov	r9, r3
   12872:	bdf0      	pop	{r4, r5, r6, r7, pc}

00012874 <__aeabi_f2uiz>:
   12874:	219e      	movs	r1, #158	; 0x9e
   12876:	b510      	push	{r4, lr}
   12878:	05c9      	lsls	r1, r1, #23
   1287a:	1c04      	adds	r4, r0, #0
   1287c:	f7ff ffc6 	bl	1280c <__aeabi_fcmpge>
   12880:	2800      	cmp	r0, #0
   12882:	d103      	bne.n	1288c <__aeabi_f2uiz+0x18>
   12884:	1c20      	adds	r0, r4, #0
   12886:	f000 fd2b 	bl	132e0 <__aeabi_f2iz>
   1288a:	bd10      	pop	{r4, pc}
   1288c:	219e      	movs	r1, #158	; 0x9e
   1288e:	1c20      	adds	r0, r4, #0
   12890:	05c9      	lsls	r1, r1, #23
   12892:	f000 fb89 	bl	12fa8 <__aeabi_fsub>
   12896:	f000 fd23 	bl	132e0 <__aeabi_f2iz>
   1289a:	2380      	movs	r3, #128	; 0x80
   1289c:	061b      	lsls	r3, r3, #24
   1289e:	469c      	mov	ip, r3
   128a0:	4460      	add	r0, ip
   128a2:	e7f2      	b.n	1288a <__aeabi_f2uiz+0x16>

000128a4 <__aeabi_fadd>:
   128a4:	b5f0      	push	{r4, r5, r6, r7, lr}
   128a6:	46c6      	mov	lr, r8
   128a8:	024e      	lsls	r6, r1, #9
   128aa:	0247      	lsls	r7, r0, #9
   128ac:	0a76      	lsrs	r6, r6, #9
   128ae:	0a7b      	lsrs	r3, r7, #9
   128b0:	0044      	lsls	r4, r0, #1
   128b2:	0fc5      	lsrs	r5, r0, #31
   128b4:	00f7      	lsls	r7, r6, #3
   128b6:	0048      	lsls	r0, r1, #1
   128b8:	4698      	mov	r8, r3
   128ba:	b500      	push	{lr}
   128bc:	0e24      	lsrs	r4, r4, #24
   128be:	002a      	movs	r2, r5
   128c0:	00db      	lsls	r3, r3, #3
   128c2:	0e00      	lsrs	r0, r0, #24
   128c4:	0fc9      	lsrs	r1, r1, #31
   128c6:	46bc      	mov	ip, r7
   128c8:	428d      	cmp	r5, r1
   128ca:	d067      	beq.n	1299c <__aeabi_fadd+0xf8>
   128cc:	1a22      	subs	r2, r4, r0
   128ce:	2a00      	cmp	r2, #0
   128d0:	dc00      	bgt.n	128d4 <__aeabi_fadd+0x30>
   128d2:	e0a5      	b.n	12a20 <__aeabi_fadd+0x17c>
   128d4:	2800      	cmp	r0, #0
   128d6:	d13a      	bne.n	1294e <__aeabi_fadd+0xaa>
   128d8:	2f00      	cmp	r7, #0
   128da:	d100      	bne.n	128de <__aeabi_fadd+0x3a>
   128dc:	e093      	b.n	12a06 <__aeabi_fadd+0x162>
   128de:	1e51      	subs	r1, r2, #1
   128e0:	2900      	cmp	r1, #0
   128e2:	d000      	beq.n	128e6 <__aeabi_fadd+0x42>
   128e4:	e0bc      	b.n	12a60 <__aeabi_fadd+0x1bc>
   128e6:	2401      	movs	r4, #1
   128e8:	1bdb      	subs	r3, r3, r7
   128ea:	015a      	lsls	r2, r3, #5
   128ec:	d546      	bpl.n	1297c <__aeabi_fadd+0xd8>
   128ee:	019b      	lsls	r3, r3, #6
   128f0:	099e      	lsrs	r6, r3, #6
   128f2:	0030      	movs	r0, r6
   128f4:	f002 f9a0 	bl	14c38 <__clzsi2>
   128f8:	3805      	subs	r0, #5
   128fa:	4086      	lsls	r6, r0
   128fc:	4284      	cmp	r4, r0
   128fe:	dd00      	ble.n	12902 <__aeabi_fadd+0x5e>
   12900:	e09d      	b.n	12a3e <__aeabi_fadd+0x19a>
   12902:	1b04      	subs	r4, r0, r4
   12904:	0032      	movs	r2, r6
   12906:	2020      	movs	r0, #32
   12908:	3401      	adds	r4, #1
   1290a:	40e2      	lsrs	r2, r4
   1290c:	1b04      	subs	r4, r0, r4
   1290e:	40a6      	lsls	r6, r4
   12910:	0033      	movs	r3, r6
   12912:	1e5e      	subs	r6, r3, #1
   12914:	41b3      	sbcs	r3, r6
   12916:	2400      	movs	r4, #0
   12918:	4313      	orrs	r3, r2
   1291a:	075a      	lsls	r2, r3, #29
   1291c:	d004      	beq.n	12928 <__aeabi_fadd+0x84>
   1291e:	220f      	movs	r2, #15
   12920:	401a      	ands	r2, r3
   12922:	2a04      	cmp	r2, #4
   12924:	d000      	beq.n	12928 <__aeabi_fadd+0x84>
   12926:	3304      	adds	r3, #4
   12928:	015a      	lsls	r2, r3, #5
   1292a:	d529      	bpl.n	12980 <__aeabi_fadd+0xdc>
   1292c:	3401      	adds	r4, #1
   1292e:	2cff      	cmp	r4, #255	; 0xff
   12930:	d100      	bne.n	12934 <__aeabi_fadd+0x90>
   12932:	e081      	b.n	12a38 <__aeabi_fadd+0x194>
   12934:	002a      	movs	r2, r5
   12936:	019b      	lsls	r3, r3, #6
   12938:	0a5b      	lsrs	r3, r3, #9
   1293a:	b2e4      	uxtb	r4, r4
   1293c:	025b      	lsls	r3, r3, #9
   1293e:	05e4      	lsls	r4, r4, #23
   12940:	0a58      	lsrs	r0, r3, #9
   12942:	07d2      	lsls	r2, r2, #31
   12944:	4320      	orrs	r0, r4
   12946:	4310      	orrs	r0, r2
   12948:	bc04      	pop	{r2}
   1294a:	4690      	mov	r8, r2
   1294c:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1294e:	2cff      	cmp	r4, #255	; 0xff
   12950:	d0e3      	beq.n	1291a <__aeabi_fadd+0x76>
   12952:	2180      	movs	r1, #128	; 0x80
   12954:	0038      	movs	r0, r7
   12956:	04c9      	lsls	r1, r1, #19
   12958:	4308      	orrs	r0, r1
   1295a:	4684      	mov	ip, r0
   1295c:	2a1b      	cmp	r2, #27
   1295e:	dd00      	ble.n	12962 <__aeabi_fadd+0xbe>
   12960:	e082      	b.n	12a68 <__aeabi_fadd+0x1c4>
   12962:	2020      	movs	r0, #32
   12964:	4661      	mov	r1, ip
   12966:	40d1      	lsrs	r1, r2
   12968:	1a82      	subs	r2, r0, r2
   1296a:	4660      	mov	r0, ip
   1296c:	4090      	lsls	r0, r2
   1296e:	0002      	movs	r2, r0
   12970:	1e50      	subs	r0, r2, #1
   12972:	4182      	sbcs	r2, r0
   12974:	430a      	orrs	r2, r1
   12976:	1a9b      	subs	r3, r3, r2
   12978:	015a      	lsls	r2, r3, #5
   1297a:	d4b8      	bmi.n	128ee <__aeabi_fadd+0x4a>
   1297c:	075a      	lsls	r2, r3, #29
   1297e:	d1ce      	bne.n	1291e <__aeabi_fadd+0x7a>
   12980:	08de      	lsrs	r6, r3, #3
   12982:	002a      	movs	r2, r5
   12984:	2cff      	cmp	r4, #255	; 0xff
   12986:	d13a      	bne.n	129fe <__aeabi_fadd+0x15a>
   12988:	2e00      	cmp	r6, #0
   1298a:	d100      	bne.n	1298e <__aeabi_fadd+0xea>
   1298c:	e0ae      	b.n	12aec <__aeabi_fadd+0x248>
   1298e:	2380      	movs	r3, #128	; 0x80
   12990:	03db      	lsls	r3, r3, #15
   12992:	4333      	orrs	r3, r6
   12994:	025b      	lsls	r3, r3, #9
   12996:	0a5b      	lsrs	r3, r3, #9
   12998:	24ff      	movs	r4, #255	; 0xff
   1299a:	e7cf      	b.n	1293c <__aeabi_fadd+0x98>
   1299c:	1a21      	subs	r1, r4, r0
   1299e:	2900      	cmp	r1, #0
   129a0:	dd52      	ble.n	12a48 <__aeabi_fadd+0x1a4>
   129a2:	2800      	cmp	r0, #0
   129a4:	d031      	beq.n	12a0a <__aeabi_fadd+0x166>
   129a6:	2cff      	cmp	r4, #255	; 0xff
   129a8:	d0b7      	beq.n	1291a <__aeabi_fadd+0x76>
   129aa:	2080      	movs	r0, #128	; 0x80
   129ac:	003e      	movs	r6, r7
   129ae:	04c0      	lsls	r0, r0, #19
   129b0:	4306      	orrs	r6, r0
   129b2:	46b4      	mov	ip, r6
   129b4:	291b      	cmp	r1, #27
   129b6:	dd00      	ble.n	129ba <__aeabi_fadd+0x116>
   129b8:	e0aa      	b.n	12b10 <__aeabi_fadd+0x26c>
   129ba:	2620      	movs	r6, #32
   129bc:	4660      	mov	r0, ip
   129be:	40c8      	lsrs	r0, r1
   129c0:	1a71      	subs	r1, r6, r1
   129c2:	4666      	mov	r6, ip
   129c4:	408e      	lsls	r6, r1
   129c6:	0031      	movs	r1, r6
   129c8:	1e4e      	subs	r6, r1, #1
   129ca:	41b1      	sbcs	r1, r6
   129cc:	4301      	orrs	r1, r0
   129ce:	185b      	adds	r3, r3, r1
   129d0:	0159      	lsls	r1, r3, #5
   129d2:	d5d3      	bpl.n	1297c <__aeabi_fadd+0xd8>
   129d4:	3401      	adds	r4, #1
   129d6:	2cff      	cmp	r4, #255	; 0xff
   129d8:	d100      	bne.n	129dc <__aeabi_fadd+0x138>
   129da:	e087      	b.n	12aec <__aeabi_fadd+0x248>
   129dc:	2201      	movs	r2, #1
   129de:	4978      	ldr	r1, [pc, #480]	; (12bc0 <__aeabi_fadd+0x31c>)
   129e0:	401a      	ands	r2, r3
   129e2:	085b      	lsrs	r3, r3, #1
   129e4:	400b      	ands	r3, r1
   129e6:	4313      	orrs	r3, r2
   129e8:	e797      	b.n	1291a <__aeabi_fadd+0x76>
   129ea:	2c00      	cmp	r4, #0
   129ec:	d000      	beq.n	129f0 <__aeabi_fadd+0x14c>
   129ee:	e0a7      	b.n	12b40 <__aeabi_fadd+0x29c>
   129f0:	2b00      	cmp	r3, #0
   129f2:	d000      	beq.n	129f6 <__aeabi_fadd+0x152>
   129f4:	e0b6      	b.n	12b64 <__aeabi_fadd+0x2c0>
   129f6:	1e3b      	subs	r3, r7, #0
   129f8:	d162      	bne.n	12ac0 <__aeabi_fadd+0x21c>
   129fa:	2600      	movs	r6, #0
   129fc:	2200      	movs	r2, #0
   129fe:	0273      	lsls	r3, r6, #9
   12a00:	0a5b      	lsrs	r3, r3, #9
   12a02:	b2e4      	uxtb	r4, r4
   12a04:	e79a      	b.n	1293c <__aeabi_fadd+0x98>
   12a06:	0014      	movs	r4, r2
   12a08:	e787      	b.n	1291a <__aeabi_fadd+0x76>
   12a0a:	2f00      	cmp	r7, #0
   12a0c:	d04d      	beq.n	12aaa <__aeabi_fadd+0x206>
   12a0e:	1e48      	subs	r0, r1, #1
   12a10:	2800      	cmp	r0, #0
   12a12:	d157      	bne.n	12ac4 <__aeabi_fadd+0x220>
   12a14:	4463      	add	r3, ip
   12a16:	2401      	movs	r4, #1
   12a18:	015a      	lsls	r2, r3, #5
   12a1a:	d5af      	bpl.n	1297c <__aeabi_fadd+0xd8>
   12a1c:	2402      	movs	r4, #2
   12a1e:	e7dd      	b.n	129dc <__aeabi_fadd+0x138>
   12a20:	2a00      	cmp	r2, #0
   12a22:	d124      	bne.n	12a6e <__aeabi_fadd+0x1ca>
   12a24:	1c62      	adds	r2, r4, #1
   12a26:	b2d2      	uxtb	r2, r2
   12a28:	2a01      	cmp	r2, #1
   12a2a:	ddde      	ble.n	129ea <__aeabi_fadd+0x146>
   12a2c:	1bde      	subs	r6, r3, r7
   12a2e:	0172      	lsls	r2, r6, #5
   12a30:	d535      	bpl.n	12a9e <__aeabi_fadd+0x1fa>
   12a32:	1afe      	subs	r6, r7, r3
   12a34:	000d      	movs	r5, r1
   12a36:	e75c      	b.n	128f2 <__aeabi_fadd+0x4e>
   12a38:	002a      	movs	r2, r5
   12a3a:	2300      	movs	r3, #0
   12a3c:	e77e      	b.n	1293c <__aeabi_fadd+0x98>
   12a3e:	0033      	movs	r3, r6
   12a40:	4a60      	ldr	r2, [pc, #384]	; (12bc4 <__aeabi_fadd+0x320>)
   12a42:	1a24      	subs	r4, r4, r0
   12a44:	4013      	ands	r3, r2
   12a46:	e768      	b.n	1291a <__aeabi_fadd+0x76>
   12a48:	2900      	cmp	r1, #0
   12a4a:	d163      	bne.n	12b14 <__aeabi_fadd+0x270>
   12a4c:	1c61      	adds	r1, r4, #1
   12a4e:	b2c8      	uxtb	r0, r1
   12a50:	2801      	cmp	r0, #1
   12a52:	dd4e      	ble.n	12af2 <__aeabi_fadd+0x24e>
   12a54:	29ff      	cmp	r1, #255	; 0xff
   12a56:	d049      	beq.n	12aec <__aeabi_fadd+0x248>
   12a58:	4463      	add	r3, ip
   12a5a:	085b      	lsrs	r3, r3, #1
   12a5c:	000c      	movs	r4, r1
   12a5e:	e75c      	b.n	1291a <__aeabi_fadd+0x76>
   12a60:	2aff      	cmp	r2, #255	; 0xff
   12a62:	d041      	beq.n	12ae8 <__aeabi_fadd+0x244>
   12a64:	000a      	movs	r2, r1
   12a66:	e779      	b.n	1295c <__aeabi_fadd+0xb8>
   12a68:	2201      	movs	r2, #1
   12a6a:	1a9b      	subs	r3, r3, r2
   12a6c:	e784      	b.n	12978 <__aeabi_fadd+0xd4>
   12a6e:	2c00      	cmp	r4, #0
   12a70:	d01d      	beq.n	12aae <__aeabi_fadd+0x20a>
   12a72:	28ff      	cmp	r0, #255	; 0xff
   12a74:	d022      	beq.n	12abc <__aeabi_fadd+0x218>
   12a76:	2480      	movs	r4, #128	; 0x80
   12a78:	04e4      	lsls	r4, r4, #19
   12a7a:	4252      	negs	r2, r2
   12a7c:	4323      	orrs	r3, r4
   12a7e:	2a1b      	cmp	r2, #27
   12a80:	dd00      	ble.n	12a84 <__aeabi_fadd+0x1e0>
   12a82:	e08a      	b.n	12b9a <__aeabi_fadd+0x2f6>
   12a84:	001c      	movs	r4, r3
   12a86:	2520      	movs	r5, #32
   12a88:	40d4      	lsrs	r4, r2
   12a8a:	1aaa      	subs	r2, r5, r2
   12a8c:	4093      	lsls	r3, r2
   12a8e:	1e5a      	subs	r2, r3, #1
   12a90:	4193      	sbcs	r3, r2
   12a92:	4323      	orrs	r3, r4
   12a94:	4662      	mov	r2, ip
   12a96:	0004      	movs	r4, r0
   12a98:	1ad3      	subs	r3, r2, r3
   12a9a:	000d      	movs	r5, r1
   12a9c:	e725      	b.n	128ea <__aeabi_fadd+0x46>
   12a9e:	2e00      	cmp	r6, #0
   12aa0:	d000      	beq.n	12aa4 <__aeabi_fadd+0x200>
   12aa2:	e726      	b.n	128f2 <__aeabi_fadd+0x4e>
   12aa4:	2200      	movs	r2, #0
   12aa6:	2400      	movs	r4, #0
   12aa8:	e7a9      	b.n	129fe <__aeabi_fadd+0x15a>
   12aaa:	000c      	movs	r4, r1
   12aac:	e735      	b.n	1291a <__aeabi_fadd+0x76>
   12aae:	2b00      	cmp	r3, #0
   12ab0:	d04d      	beq.n	12b4e <__aeabi_fadd+0x2aa>
   12ab2:	43d2      	mvns	r2, r2
   12ab4:	2a00      	cmp	r2, #0
   12ab6:	d0ed      	beq.n	12a94 <__aeabi_fadd+0x1f0>
   12ab8:	28ff      	cmp	r0, #255	; 0xff
   12aba:	d1e0      	bne.n	12a7e <__aeabi_fadd+0x1da>
   12abc:	4663      	mov	r3, ip
   12abe:	24ff      	movs	r4, #255	; 0xff
   12ac0:	000d      	movs	r5, r1
   12ac2:	e72a      	b.n	1291a <__aeabi_fadd+0x76>
   12ac4:	29ff      	cmp	r1, #255	; 0xff
   12ac6:	d00f      	beq.n	12ae8 <__aeabi_fadd+0x244>
   12ac8:	0001      	movs	r1, r0
   12aca:	e773      	b.n	129b4 <__aeabi_fadd+0x110>
   12acc:	2b00      	cmp	r3, #0
   12ace:	d061      	beq.n	12b94 <__aeabi_fadd+0x2f0>
   12ad0:	24ff      	movs	r4, #255	; 0xff
   12ad2:	2f00      	cmp	r7, #0
   12ad4:	d100      	bne.n	12ad8 <__aeabi_fadd+0x234>
   12ad6:	e720      	b.n	1291a <__aeabi_fadd+0x76>
   12ad8:	2280      	movs	r2, #128	; 0x80
   12ada:	4641      	mov	r1, r8
   12adc:	03d2      	lsls	r2, r2, #15
   12ade:	4211      	tst	r1, r2
   12ae0:	d002      	beq.n	12ae8 <__aeabi_fadd+0x244>
   12ae2:	4216      	tst	r6, r2
   12ae4:	d100      	bne.n	12ae8 <__aeabi_fadd+0x244>
   12ae6:	003b      	movs	r3, r7
   12ae8:	24ff      	movs	r4, #255	; 0xff
   12aea:	e716      	b.n	1291a <__aeabi_fadd+0x76>
   12aec:	24ff      	movs	r4, #255	; 0xff
   12aee:	2300      	movs	r3, #0
   12af0:	e724      	b.n	1293c <__aeabi_fadd+0x98>
   12af2:	2c00      	cmp	r4, #0
   12af4:	d1ea      	bne.n	12acc <__aeabi_fadd+0x228>
   12af6:	2b00      	cmp	r3, #0
   12af8:	d058      	beq.n	12bac <__aeabi_fadd+0x308>
   12afa:	2f00      	cmp	r7, #0
   12afc:	d100      	bne.n	12b00 <__aeabi_fadd+0x25c>
   12afe:	e70c      	b.n	1291a <__aeabi_fadd+0x76>
   12b00:	4463      	add	r3, ip
   12b02:	015a      	lsls	r2, r3, #5
   12b04:	d400      	bmi.n	12b08 <__aeabi_fadd+0x264>
   12b06:	e739      	b.n	1297c <__aeabi_fadd+0xd8>
   12b08:	4a2e      	ldr	r2, [pc, #184]	; (12bc4 <__aeabi_fadd+0x320>)
   12b0a:	000c      	movs	r4, r1
   12b0c:	4013      	ands	r3, r2
   12b0e:	e704      	b.n	1291a <__aeabi_fadd+0x76>
   12b10:	2101      	movs	r1, #1
   12b12:	e75c      	b.n	129ce <__aeabi_fadd+0x12a>
   12b14:	2c00      	cmp	r4, #0
   12b16:	d11e      	bne.n	12b56 <__aeabi_fadd+0x2b2>
   12b18:	2b00      	cmp	r3, #0
   12b1a:	d040      	beq.n	12b9e <__aeabi_fadd+0x2fa>
   12b1c:	43c9      	mvns	r1, r1
   12b1e:	2900      	cmp	r1, #0
   12b20:	d00b      	beq.n	12b3a <__aeabi_fadd+0x296>
   12b22:	28ff      	cmp	r0, #255	; 0xff
   12b24:	d036      	beq.n	12b94 <__aeabi_fadd+0x2f0>
   12b26:	291b      	cmp	r1, #27
   12b28:	dc47      	bgt.n	12bba <__aeabi_fadd+0x316>
   12b2a:	001c      	movs	r4, r3
   12b2c:	2620      	movs	r6, #32
   12b2e:	40cc      	lsrs	r4, r1
   12b30:	1a71      	subs	r1, r6, r1
   12b32:	408b      	lsls	r3, r1
   12b34:	1e59      	subs	r1, r3, #1
   12b36:	418b      	sbcs	r3, r1
   12b38:	4323      	orrs	r3, r4
   12b3a:	4463      	add	r3, ip
   12b3c:	0004      	movs	r4, r0
   12b3e:	e747      	b.n	129d0 <__aeabi_fadd+0x12c>
   12b40:	2b00      	cmp	r3, #0
   12b42:	d118      	bne.n	12b76 <__aeabi_fadd+0x2d2>
   12b44:	1e3b      	subs	r3, r7, #0
   12b46:	d02d      	beq.n	12ba4 <__aeabi_fadd+0x300>
   12b48:	000d      	movs	r5, r1
   12b4a:	24ff      	movs	r4, #255	; 0xff
   12b4c:	e6e5      	b.n	1291a <__aeabi_fadd+0x76>
   12b4e:	003b      	movs	r3, r7
   12b50:	0004      	movs	r4, r0
   12b52:	000d      	movs	r5, r1
   12b54:	e6e1      	b.n	1291a <__aeabi_fadd+0x76>
   12b56:	28ff      	cmp	r0, #255	; 0xff
   12b58:	d01c      	beq.n	12b94 <__aeabi_fadd+0x2f0>
   12b5a:	2480      	movs	r4, #128	; 0x80
   12b5c:	04e4      	lsls	r4, r4, #19
   12b5e:	4249      	negs	r1, r1
   12b60:	4323      	orrs	r3, r4
   12b62:	e7e0      	b.n	12b26 <__aeabi_fadd+0x282>
   12b64:	2f00      	cmp	r7, #0
   12b66:	d100      	bne.n	12b6a <__aeabi_fadd+0x2c6>
   12b68:	e6d7      	b.n	1291a <__aeabi_fadd+0x76>
   12b6a:	1bde      	subs	r6, r3, r7
   12b6c:	0172      	lsls	r2, r6, #5
   12b6e:	d51f      	bpl.n	12bb0 <__aeabi_fadd+0x30c>
   12b70:	1afb      	subs	r3, r7, r3
   12b72:	000d      	movs	r5, r1
   12b74:	e6d1      	b.n	1291a <__aeabi_fadd+0x76>
   12b76:	24ff      	movs	r4, #255	; 0xff
   12b78:	2f00      	cmp	r7, #0
   12b7a:	d100      	bne.n	12b7e <__aeabi_fadd+0x2da>
   12b7c:	e6cd      	b.n	1291a <__aeabi_fadd+0x76>
   12b7e:	2280      	movs	r2, #128	; 0x80
   12b80:	4640      	mov	r0, r8
   12b82:	03d2      	lsls	r2, r2, #15
   12b84:	4210      	tst	r0, r2
   12b86:	d0af      	beq.n	12ae8 <__aeabi_fadd+0x244>
   12b88:	4216      	tst	r6, r2
   12b8a:	d1ad      	bne.n	12ae8 <__aeabi_fadd+0x244>
   12b8c:	003b      	movs	r3, r7
   12b8e:	000d      	movs	r5, r1
   12b90:	24ff      	movs	r4, #255	; 0xff
   12b92:	e6c2      	b.n	1291a <__aeabi_fadd+0x76>
   12b94:	4663      	mov	r3, ip
   12b96:	24ff      	movs	r4, #255	; 0xff
   12b98:	e6bf      	b.n	1291a <__aeabi_fadd+0x76>
   12b9a:	2301      	movs	r3, #1
   12b9c:	e77a      	b.n	12a94 <__aeabi_fadd+0x1f0>
   12b9e:	003b      	movs	r3, r7
   12ba0:	0004      	movs	r4, r0
   12ba2:	e6ba      	b.n	1291a <__aeabi_fadd+0x76>
   12ba4:	2680      	movs	r6, #128	; 0x80
   12ba6:	2200      	movs	r2, #0
   12ba8:	03f6      	lsls	r6, r6, #15
   12baa:	e6f0      	b.n	1298e <__aeabi_fadd+0xea>
   12bac:	003b      	movs	r3, r7
   12bae:	e6b4      	b.n	1291a <__aeabi_fadd+0x76>
   12bb0:	1e33      	subs	r3, r6, #0
   12bb2:	d000      	beq.n	12bb6 <__aeabi_fadd+0x312>
   12bb4:	e6e2      	b.n	1297c <__aeabi_fadd+0xd8>
   12bb6:	2200      	movs	r2, #0
   12bb8:	e721      	b.n	129fe <__aeabi_fadd+0x15a>
   12bba:	2301      	movs	r3, #1
   12bbc:	e7bd      	b.n	12b3a <__aeabi_fadd+0x296>
   12bbe:	46c0      	nop			; (mov r8, r8)
   12bc0:	7dffffff 	.word	0x7dffffff
   12bc4:	fbffffff 	.word	0xfbffffff

00012bc8 <__aeabi_fdiv>:
   12bc8:	b5f0      	push	{r4, r5, r6, r7, lr}
   12bca:	4657      	mov	r7, sl
   12bcc:	464e      	mov	r6, r9
   12bce:	46de      	mov	lr, fp
   12bd0:	4645      	mov	r5, r8
   12bd2:	b5e0      	push	{r5, r6, r7, lr}
   12bd4:	0244      	lsls	r4, r0, #9
   12bd6:	0043      	lsls	r3, r0, #1
   12bd8:	0fc6      	lsrs	r6, r0, #31
   12bda:	b083      	sub	sp, #12
   12bdc:	1c0f      	adds	r7, r1, #0
   12bde:	0a64      	lsrs	r4, r4, #9
   12be0:	0e1b      	lsrs	r3, r3, #24
   12be2:	46b2      	mov	sl, r6
   12be4:	d053      	beq.n	12c8e <__aeabi_fdiv+0xc6>
   12be6:	2bff      	cmp	r3, #255	; 0xff
   12be8:	d027      	beq.n	12c3a <__aeabi_fdiv+0x72>
   12bea:	2280      	movs	r2, #128	; 0x80
   12bec:	00e4      	lsls	r4, r4, #3
   12bee:	04d2      	lsls	r2, r2, #19
   12bf0:	4314      	orrs	r4, r2
   12bf2:	227f      	movs	r2, #127	; 0x7f
   12bf4:	4252      	negs	r2, r2
   12bf6:	4690      	mov	r8, r2
   12bf8:	4498      	add	r8, r3
   12bfa:	2300      	movs	r3, #0
   12bfc:	4699      	mov	r9, r3
   12bfe:	469b      	mov	fp, r3
   12c00:	027d      	lsls	r5, r7, #9
   12c02:	0078      	lsls	r0, r7, #1
   12c04:	0ffb      	lsrs	r3, r7, #31
   12c06:	0a6d      	lsrs	r5, r5, #9
   12c08:	0e00      	lsrs	r0, r0, #24
   12c0a:	9300      	str	r3, [sp, #0]
   12c0c:	d024      	beq.n	12c58 <__aeabi_fdiv+0x90>
   12c0e:	28ff      	cmp	r0, #255	; 0xff
   12c10:	d046      	beq.n	12ca0 <__aeabi_fdiv+0xd8>
   12c12:	2380      	movs	r3, #128	; 0x80
   12c14:	2100      	movs	r1, #0
   12c16:	00ed      	lsls	r5, r5, #3
   12c18:	04db      	lsls	r3, r3, #19
   12c1a:	431d      	orrs	r5, r3
   12c1c:	387f      	subs	r0, #127	; 0x7f
   12c1e:	4647      	mov	r7, r8
   12c20:	1a38      	subs	r0, r7, r0
   12c22:	464f      	mov	r7, r9
   12c24:	430f      	orrs	r7, r1
   12c26:	00bf      	lsls	r7, r7, #2
   12c28:	46b9      	mov	r9, r7
   12c2a:	0033      	movs	r3, r6
   12c2c:	9a00      	ldr	r2, [sp, #0]
   12c2e:	4f87      	ldr	r7, [pc, #540]	; (12e4c <__aeabi_fdiv+0x284>)
   12c30:	4053      	eors	r3, r2
   12c32:	464a      	mov	r2, r9
   12c34:	58ba      	ldr	r2, [r7, r2]
   12c36:	9301      	str	r3, [sp, #4]
   12c38:	4697      	mov	pc, r2
   12c3a:	2c00      	cmp	r4, #0
   12c3c:	d14e      	bne.n	12cdc <__aeabi_fdiv+0x114>
   12c3e:	2308      	movs	r3, #8
   12c40:	4699      	mov	r9, r3
   12c42:	33f7      	adds	r3, #247	; 0xf7
   12c44:	4698      	mov	r8, r3
   12c46:	3bfd      	subs	r3, #253	; 0xfd
   12c48:	469b      	mov	fp, r3
   12c4a:	027d      	lsls	r5, r7, #9
   12c4c:	0078      	lsls	r0, r7, #1
   12c4e:	0ffb      	lsrs	r3, r7, #31
   12c50:	0a6d      	lsrs	r5, r5, #9
   12c52:	0e00      	lsrs	r0, r0, #24
   12c54:	9300      	str	r3, [sp, #0]
   12c56:	d1da      	bne.n	12c0e <__aeabi_fdiv+0x46>
   12c58:	2d00      	cmp	r5, #0
   12c5a:	d126      	bne.n	12caa <__aeabi_fdiv+0xe2>
   12c5c:	2000      	movs	r0, #0
   12c5e:	2101      	movs	r1, #1
   12c60:	0033      	movs	r3, r6
   12c62:	9a00      	ldr	r2, [sp, #0]
   12c64:	4f7a      	ldr	r7, [pc, #488]	; (12e50 <__aeabi_fdiv+0x288>)
   12c66:	4053      	eors	r3, r2
   12c68:	4642      	mov	r2, r8
   12c6a:	1a10      	subs	r0, r2, r0
   12c6c:	464a      	mov	r2, r9
   12c6e:	430a      	orrs	r2, r1
   12c70:	0092      	lsls	r2, r2, #2
   12c72:	58ba      	ldr	r2, [r7, r2]
   12c74:	001d      	movs	r5, r3
   12c76:	4697      	mov	pc, r2
   12c78:	9b00      	ldr	r3, [sp, #0]
   12c7a:	002c      	movs	r4, r5
   12c7c:	469a      	mov	sl, r3
   12c7e:	468b      	mov	fp, r1
   12c80:	465b      	mov	r3, fp
   12c82:	2b02      	cmp	r3, #2
   12c84:	d131      	bne.n	12cea <__aeabi_fdiv+0x122>
   12c86:	4653      	mov	r3, sl
   12c88:	21ff      	movs	r1, #255	; 0xff
   12c8a:	2400      	movs	r4, #0
   12c8c:	e038      	b.n	12d00 <__aeabi_fdiv+0x138>
   12c8e:	2c00      	cmp	r4, #0
   12c90:	d117      	bne.n	12cc2 <__aeabi_fdiv+0xfa>
   12c92:	2304      	movs	r3, #4
   12c94:	4699      	mov	r9, r3
   12c96:	2300      	movs	r3, #0
   12c98:	4698      	mov	r8, r3
   12c9a:	3301      	adds	r3, #1
   12c9c:	469b      	mov	fp, r3
   12c9e:	e7af      	b.n	12c00 <__aeabi_fdiv+0x38>
   12ca0:	20ff      	movs	r0, #255	; 0xff
   12ca2:	2d00      	cmp	r5, #0
   12ca4:	d10b      	bne.n	12cbe <__aeabi_fdiv+0xf6>
   12ca6:	2102      	movs	r1, #2
   12ca8:	e7da      	b.n	12c60 <__aeabi_fdiv+0x98>
   12caa:	0028      	movs	r0, r5
   12cac:	f001 ffc4 	bl	14c38 <__clzsi2>
   12cb0:	1f43      	subs	r3, r0, #5
   12cb2:	409d      	lsls	r5, r3
   12cb4:	2376      	movs	r3, #118	; 0x76
   12cb6:	425b      	negs	r3, r3
   12cb8:	1a18      	subs	r0, r3, r0
   12cba:	2100      	movs	r1, #0
   12cbc:	e7af      	b.n	12c1e <__aeabi_fdiv+0x56>
   12cbe:	2103      	movs	r1, #3
   12cc0:	e7ad      	b.n	12c1e <__aeabi_fdiv+0x56>
   12cc2:	0020      	movs	r0, r4
   12cc4:	f001 ffb8 	bl	14c38 <__clzsi2>
   12cc8:	1f43      	subs	r3, r0, #5
   12cca:	409c      	lsls	r4, r3
   12ccc:	2376      	movs	r3, #118	; 0x76
   12cce:	425b      	negs	r3, r3
   12cd0:	1a1b      	subs	r3, r3, r0
   12cd2:	4698      	mov	r8, r3
   12cd4:	2300      	movs	r3, #0
   12cd6:	4699      	mov	r9, r3
   12cd8:	469b      	mov	fp, r3
   12cda:	e791      	b.n	12c00 <__aeabi_fdiv+0x38>
   12cdc:	230c      	movs	r3, #12
   12cde:	4699      	mov	r9, r3
   12ce0:	33f3      	adds	r3, #243	; 0xf3
   12ce2:	4698      	mov	r8, r3
   12ce4:	3bfc      	subs	r3, #252	; 0xfc
   12ce6:	469b      	mov	fp, r3
   12ce8:	e78a      	b.n	12c00 <__aeabi_fdiv+0x38>
   12cea:	2b03      	cmp	r3, #3
   12cec:	d100      	bne.n	12cf0 <__aeabi_fdiv+0x128>
   12cee:	e0a5      	b.n	12e3c <__aeabi_fdiv+0x274>
   12cf0:	4655      	mov	r5, sl
   12cf2:	2b01      	cmp	r3, #1
   12cf4:	d000      	beq.n	12cf8 <__aeabi_fdiv+0x130>
   12cf6:	e081      	b.n	12dfc <__aeabi_fdiv+0x234>
   12cf8:	2301      	movs	r3, #1
   12cfa:	2100      	movs	r1, #0
   12cfc:	2400      	movs	r4, #0
   12cfe:	402b      	ands	r3, r5
   12d00:	0264      	lsls	r4, r4, #9
   12d02:	05c9      	lsls	r1, r1, #23
   12d04:	0a60      	lsrs	r0, r4, #9
   12d06:	07db      	lsls	r3, r3, #31
   12d08:	4308      	orrs	r0, r1
   12d0a:	4318      	orrs	r0, r3
   12d0c:	b003      	add	sp, #12
   12d0e:	bc3c      	pop	{r2, r3, r4, r5}
   12d10:	4690      	mov	r8, r2
   12d12:	4699      	mov	r9, r3
   12d14:	46a2      	mov	sl, r4
   12d16:	46ab      	mov	fp, r5
   12d18:	bdf0      	pop	{r4, r5, r6, r7, pc}
   12d1a:	2480      	movs	r4, #128	; 0x80
   12d1c:	2300      	movs	r3, #0
   12d1e:	03e4      	lsls	r4, r4, #15
   12d20:	21ff      	movs	r1, #255	; 0xff
   12d22:	e7ed      	b.n	12d00 <__aeabi_fdiv+0x138>
   12d24:	21ff      	movs	r1, #255	; 0xff
   12d26:	2400      	movs	r4, #0
   12d28:	e7ea      	b.n	12d00 <__aeabi_fdiv+0x138>
   12d2a:	2301      	movs	r3, #1
   12d2c:	1a59      	subs	r1, r3, r1
   12d2e:	291b      	cmp	r1, #27
   12d30:	dd66      	ble.n	12e00 <__aeabi_fdiv+0x238>
   12d32:	9a01      	ldr	r2, [sp, #4]
   12d34:	4013      	ands	r3, r2
   12d36:	2100      	movs	r1, #0
   12d38:	2400      	movs	r4, #0
   12d3a:	e7e1      	b.n	12d00 <__aeabi_fdiv+0x138>
   12d3c:	2380      	movs	r3, #128	; 0x80
   12d3e:	03db      	lsls	r3, r3, #15
   12d40:	421c      	tst	r4, r3
   12d42:	d038      	beq.n	12db6 <__aeabi_fdiv+0x1ee>
   12d44:	421d      	tst	r5, r3
   12d46:	d051      	beq.n	12dec <__aeabi_fdiv+0x224>
   12d48:	431c      	orrs	r4, r3
   12d4a:	0264      	lsls	r4, r4, #9
   12d4c:	0a64      	lsrs	r4, r4, #9
   12d4e:	0033      	movs	r3, r6
   12d50:	21ff      	movs	r1, #255	; 0xff
   12d52:	e7d5      	b.n	12d00 <__aeabi_fdiv+0x138>
   12d54:	0163      	lsls	r3, r4, #5
   12d56:	016c      	lsls	r4, r5, #5
   12d58:	42a3      	cmp	r3, r4
   12d5a:	d23b      	bcs.n	12dd4 <__aeabi_fdiv+0x20c>
   12d5c:	261b      	movs	r6, #27
   12d5e:	2100      	movs	r1, #0
   12d60:	3801      	subs	r0, #1
   12d62:	2501      	movs	r5, #1
   12d64:	001f      	movs	r7, r3
   12d66:	0049      	lsls	r1, r1, #1
   12d68:	005b      	lsls	r3, r3, #1
   12d6a:	2f00      	cmp	r7, #0
   12d6c:	db01      	blt.n	12d72 <__aeabi_fdiv+0x1aa>
   12d6e:	429c      	cmp	r4, r3
   12d70:	d801      	bhi.n	12d76 <__aeabi_fdiv+0x1ae>
   12d72:	1b1b      	subs	r3, r3, r4
   12d74:	4329      	orrs	r1, r5
   12d76:	3e01      	subs	r6, #1
   12d78:	2e00      	cmp	r6, #0
   12d7a:	d1f3      	bne.n	12d64 <__aeabi_fdiv+0x19c>
   12d7c:	001c      	movs	r4, r3
   12d7e:	1e63      	subs	r3, r4, #1
   12d80:	419c      	sbcs	r4, r3
   12d82:	430c      	orrs	r4, r1
   12d84:	0001      	movs	r1, r0
   12d86:	317f      	adds	r1, #127	; 0x7f
   12d88:	2900      	cmp	r1, #0
   12d8a:	ddce      	ble.n	12d2a <__aeabi_fdiv+0x162>
   12d8c:	0763      	lsls	r3, r4, #29
   12d8e:	d004      	beq.n	12d9a <__aeabi_fdiv+0x1d2>
   12d90:	230f      	movs	r3, #15
   12d92:	4023      	ands	r3, r4
   12d94:	2b04      	cmp	r3, #4
   12d96:	d000      	beq.n	12d9a <__aeabi_fdiv+0x1d2>
   12d98:	3404      	adds	r4, #4
   12d9a:	0123      	lsls	r3, r4, #4
   12d9c:	d503      	bpl.n	12da6 <__aeabi_fdiv+0x1de>
   12d9e:	0001      	movs	r1, r0
   12da0:	4b2c      	ldr	r3, [pc, #176]	; (12e54 <__aeabi_fdiv+0x28c>)
   12da2:	3180      	adds	r1, #128	; 0x80
   12da4:	401c      	ands	r4, r3
   12da6:	29fe      	cmp	r1, #254	; 0xfe
   12da8:	dd0d      	ble.n	12dc6 <__aeabi_fdiv+0x1fe>
   12daa:	2301      	movs	r3, #1
   12dac:	9a01      	ldr	r2, [sp, #4]
   12dae:	21ff      	movs	r1, #255	; 0xff
   12db0:	4013      	ands	r3, r2
   12db2:	2400      	movs	r4, #0
   12db4:	e7a4      	b.n	12d00 <__aeabi_fdiv+0x138>
   12db6:	2380      	movs	r3, #128	; 0x80
   12db8:	03db      	lsls	r3, r3, #15
   12dba:	431c      	orrs	r4, r3
   12dbc:	0264      	lsls	r4, r4, #9
   12dbe:	0a64      	lsrs	r4, r4, #9
   12dc0:	0033      	movs	r3, r6
   12dc2:	21ff      	movs	r1, #255	; 0xff
   12dc4:	e79c      	b.n	12d00 <__aeabi_fdiv+0x138>
   12dc6:	2301      	movs	r3, #1
   12dc8:	9a01      	ldr	r2, [sp, #4]
   12dca:	01a4      	lsls	r4, r4, #6
   12dcc:	0a64      	lsrs	r4, r4, #9
   12dce:	b2c9      	uxtb	r1, r1
   12dd0:	4013      	ands	r3, r2
   12dd2:	e795      	b.n	12d00 <__aeabi_fdiv+0x138>
   12dd4:	1b1b      	subs	r3, r3, r4
   12dd6:	261a      	movs	r6, #26
   12dd8:	2101      	movs	r1, #1
   12dda:	e7c2      	b.n	12d62 <__aeabi_fdiv+0x19a>
   12ddc:	9b00      	ldr	r3, [sp, #0]
   12dde:	468b      	mov	fp, r1
   12de0:	469a      	mov	sl, r3
   12de2:	2400      	movs	r4, #0
   12de4:	e74c      	b.n	12c80 <__aeabi_fdiv+0xb8>
   12de6:	0263      	lsls	r3, r4, #9
   12de8:	d5e5      	bpl.n	12db6 <__aeabi_fdiv+0x1ee>
   12dea:	2500      	movs	r5, #0
   12dec:	2480      	movs	r4, #128	; 0x80
   12dee:	03e4      	lsls	r4, r4, #15
   12df0:	432c      	orrs	r4, r5
   12df2:	0264      	lsls	r4, r4, #9
   12df4:	0a64      	lsrs	r4, r4, #9
   12df6:	9b00      	ldr	r3, [sp, #0]
   12df8:	21ff      	movs	r1, #255	; 0xff
   12dfa:	e781      	b.n	12d00 <__aeabi_fdiv+0x138>
   12dfc:	9501      	str	r5, [sp, #4]
   12dfe:	e7c1      	b.n	12d84 <__aeabi_fdiv+0x1bc>
   12e00:	0023      	movs	r3, r4
   12e02:	2020      	movs	r0, #32
   12e04:	40cb      	lsrs	r3, r1
   12e06:	1a41      	subs	r1, r0, r1
   12e08:	408c      	lsls	r4, r1
   12e0a:	1e61      	subs	r1, r4, #1
   12e0c:	418c      	sbcs	r4, r1
   12e0e:	431c      	orrs	r4, r3
   12e10:	0763      	lsls	r3, r4, #29
   12e12:	d004      	beq.n	12e1e <__aeabi_fdiv+0x256>
   12e14:	230f      	movs	r3, #15
   12e16:	4023      	ands	r3, r4
   12e18:	2b04      	cmp	r3, #4
   12e1a:	d000      	beq.n	12e1e <__aeabi_fdiv+0x256>
   12e1c:	3404      	adds	r4, #4
   12e1e:	0163      	lsls	r3, r4, #5
   12e20:	d505      	bpl.n	12e2e <__aeabi_fdiv+0x266>
   12e22:	2301      	movs	r3, #1
   12e24:	9a01      	ldr	r2, [sp, #4]
   12e26:	2101      	movs	r1, #1
   12e28:	4013      	ands	r3, r2
   12e2a:	2400      	movs	r4, #0
   12e2c:	e768      	b.n	12d00 <__aeabi_fdiv+0x138>
   12e2e:	2301      	movs	r3, #1
   12e30:	9a01      	ldr	r2, [sp, #4]
   12e32:	01a4      	lsls	r4, r4, #6
   12e34:	0a64      	lsrs	r4, r4, #9
   12e36:	4013      	ands	r3, r2
   12e38:	2100      	movs	r1, #0
   12e3a:	e761      	b.n	12d00 <__aeabi_fdiv+0x138>
   12e3c:	2380      	movs	r3, #128	; 0x80
   12e3e:	03db      	lsls	r3, r3, #15
   12e40:	431c      	orrs	r4, r3
   12e42:	0264      	lsls	r4, r4, #9
   12e44:	0a64      	lsrs	r4, r4, #9
   12e46:	4653      	mov	r3, sl
   12e48:	21ff      	movs	r1, #255	; 0xff
   12e4a:	e759      	b.n	12d00 <__aeabi_fdiv+0x138>
   12e4c:	0001676c 	.word	0x0001676c
   12e50:	000167ac 	.word	0x000167ac
   12e54:	f7ffffff 	.word	0xf7ffffff

00012e58 <__eqsf2>:
   12e58:	b570      	push	{r4, r5, r6, lr}
   12e5a:	0042      	lsls	r2, r0, #1
   12e5c:	0245      	lsls	r5, r0, #9
   12e5e:	024e      	lsls	r6, r1, #9
   12e60:	004c      	lsls	r4, r1, #1
   12e62:	0fc3      	lsrs	r3, r0, #31
   12e64:	0a6d      	lsrs	r5, r5, #9
   12e66:	0e12      	lsrs	r2, r2, #24
   12e68:	0a76      	lsrs	r6, r6, #9
   12e6a:	0e24      	lsrs	r4, r4, #24
   12e6c:	0fc9      	lsrs	r1, r1, #31
   12e6e:	2001      	movs	r0, #1
   12e70:	2aff      	cmp	r2, #255	; 0xff
   12e72:	d006      	beq.n	12e82 <__eqsf2+0x2a>
   12e74:	2cff      	cmp	r4, #255	; 0xff
   12e76:	d003      	beq.n	12e80 <__eqsf2+0x28>
   12e78:	42a2      	cmp	r2, r4
   12e7a:	d101      	bne.n	12e80 <__eqsf2+0x28>
   12e7c:	42b5      	cmp	r5, r6
   12e7e:	d006      	beq.n	12e8e <__eqsf2+0x36>
   12e80:	bd70      	pop	{r4, r5, r6, pc}
   12e82:	2d00      	cmp	r5, #0
   12e84:	d1fc      	bne.n	12e80 <__eqsf2+0x28>
   12e86:	2cff      	cmp	r4, #255	; 0xff
   12e88:	d1fa      	bne.n	12e80 <__eqsf2+0x28>
   12e8a:	2e00      	cmp	r6, #0
   12e8c:	d1f8      	bne.n	12e80 <__eqsf2+0x28>
   12e8e:	428b      	cmp	r3, r1
   12e90:	d006      	beq.n	12ea0 <__eqsf2+0x48>
   12e92:	2001      	movs	r0, #1
   12e94:	2a00      	cmp	r2, #0
   12e96:	d1f3      	bne.n	12e80 <__eqsf2+0x28>
   12e98:	0028      	movs	r0, r5
   12e9a:	1e45      	subs	r5, r0, #1
   12e9c:	41a8      	sbcs	r0, r5
   12e9e:	e7ef      	b.n	12e80 <__eqsf2+0x28>
   12ea0:	2000      	movs	r0, #0
   12ea2:	e7ed      	b.n	12e80 <__eqsf2+0x28>

00012ea4 <__gesf2>:
   12ea4:	b5f0      	push	{r4, r5, r6, r7, lr}
   12ea6:	0042      	lsls	r2, r0, #1
   12ea8:	0245      	lsls	r5, r0, #9
   12eaa:	024c      	lsls	r4, r1, #9
   12eac:	0fc3      	lsrs	r3, r0, #31
   12eae:	0048      	lsls	r0, r1, #1
   12eb0:	0a6d      	lsrs	r5, r5, #9
   12eb2:	0e12      	lsrs	r2, r2, #24
   12eb4:	0a64      	lsrs	r4, r4, #9
   12eb6:	0e00      	lsrs	r0, r0, #24
   12eb8:	0fc9      	lsrs	r1, r1, #31
   12eba:	2aff      	cmp	r2, #255	; 0xff
   12ebc:	d01e      	beq.n	12efc <__gesf2+0x58>
   12ebe:	28ff      	cmp	r0, #255	; 0xff
   12ec0:	d021      	beq.n	12f06 <__gesf2+0x62>
   12ec2:	2a00      	cmp	r2, #0
   12ec4:	d10a      	bne.n	12edc <__gesf2+0x38>
   12ec6:	426e      	negs	r6, r5
   12ec8:	416e      	adcs	r6, r5
   12eca:	b2f6      	uxtb	r6, r6
   12ecc:	2800      	cmp	r0, #0
   12ece:	d10f      	bne.n	12ef0 <__gesf2+0x4c>
   12ed0:	2c00      	cmp	r4, #0
   12ed2:	d10d      	bne.n	12ef0 <__gesf2+0x4c>
   12ed4:	2000      	movs	r0, #0
   12ed6:	2d00      	cmp	r5, #0
   12ed8:	d009      	beq.n	12eee <__gesf2+0x4a>
   12eda:	e005      	b.n	12ee8 <__gesf2+0x44>
   12edc:	2800      	cmp	r0, #0
   12ede:	d101      	bne.n	12ee4 <__gesf2+0x40>
   12ee0:	2c00      	cmp	r4, #0
   12ee2:	d001      	beq.n	12ee8 <__gesf2+0x44>
   12ee4:	428b      	cmp	r3, r1
   12ee6:	d011      	beq.n	12f0c <__gesf2+0x68>
   12ee8:	2101      	movs	r1, #1
   12eea:	4258      	negs	r0, r3
   12eec:	4308      	orrs	r0, r1
   12eee:	bdf0      	pop	{r4, r5, r6, r7, pc}
   12ef0:	2e00      	cmp	r6, #0
   12ef2:	d0f7      	beq.n	12ee4 <__gesf2+0x40>
   12ef4:	2001      	movs	r0, #1
   12ef6:	3901      	subs	r1, #1
   12ef8:	4308      	orrs	r0, r1
   12efa:	e7f8      	b.n	12eee <__gesf2+0x4a>
   12efc:	2d00      	cmp	r5, #0
   12efe:	d0de      	beq.n	12ebe <__gesf2+0x1a>
   12f00:	2002      	movs	r0, #2
   12f02:	4240      	negs	r0, r0
   12f04:	e7f3      	b.n	12eee <__gesf2+0x4a>
   12f06:	2c00      	cmp	r4, #0
   12f08:	d0db      	beq.n	12ec2 <__gesf2+0x1e>
   12f0a:	e7f9      	b.n	12f00 <__gesf2+0x5c>
   12f0c:	4282      	cmp	r2, r0
   12f0e:	dceb      	bgt.n	12ee8 <__gesf2+0x44>
   12f10:	db04      	blt.n	12f1c <__gesf2+0x78>
   12f12:	42a5      	cmp	r5, r4
   12f14:	d8e8      	bhi.n	12ee8 <__gesf2+0x44>
   12f16:	2000      	movs	r0, #0
   12f18:	42a5      	cmp	r5, r4
   12f1a:	d2e8      	bcs.n	12eee <__gesf2+0x4a>
   12f1c:	2101      	movs	r1, #1
   12f1e:	1e58      	subs	r0, r3, #1
   12f20:	4308      	orrs	r0, r1
   12f22:	e7e4      	b.n	12eee <__gesf2+0x4a>

00012f24 <__lesf2>:
   12f24:	b5f0      	push	{r4, r5, r6, r7, lr}
   12f26:	0042      	lsls	r2, r0, #1
   12f28:	024d      	lsls	r5, r1, #9
   12f2a:	004c      	lsls	r4, r1, #1
   12f2c:	0246      	lsls	r6, r0, #9
   12f2e:	0a76      	lsrs	r6, r6, #9
   12f30:	0e12      	lsrs	r2, r2, #24
   12f32:	0fc3      	lsrs	r3, r0, #31
   12f34:	0a6d      	lsrs	r5, r5, #9
   12f36:	0e24      	lsrs	r4, r4, #24
   12f38:	0fc9      	lsrs	r1, r1, #31
   12f3a:	2aff      	cmp	r2, #255	; 0xff
   12f3c:	d016      	beq.n	12f6c <__lesf2+0x48>
   12f3e:	2cff      	cmp	r4, #255	; 0xff
   12f40:	d018      	beq.n	12f74 <__lesf2+0x50>
   12f42:	2a00      	cmp	r2, #0
   12f44:	d10a      	bne.n	12f5c <__lesf2+0x38>
   12f46:	4270      	negs	r0, r6
   12f48:	4170      	adcs	r0, r6
   12f4a:	b2c0      	uxtb	r0, r0
   12f4c:	2c00      	cmp	r4, #0
   12f4e:	d015      	beq.n	12f7c <__lesf2+0x58>
   12f50:	2800      	cmp	r0, #0
   12f52:	d005      	beq.n	12f60 <__lesf2+0x3c>
   12f54:	2001      	movs	r0, #1
   12f56:	3901      	subs	r1, #1
   12f58:	4308      	orrs	r0, r1
   12f5a:	bdf0      	pop	{r4, r5, r6, r7, pc}
   12f5c:	2c00      	cmp	r4, #0
   12f5e:	d013      	beq.n	12f88 <__lesf2+0x64>
   12f60:	4299      	cmp	r1, r3
   12f62:	d014      	beq.n	12f8e <__lesf2+0x6a>
   12f64:	2001      	movs	r0, #1
   12f66:	425b      	negs	r3, r3
   12f68:	4318      	orrs	r0, r3
   12f6a:	e7f6      	b.n	12f5a <__lesf2+0x36>
   12f6c:	2002      	movs	r0, #2
   12f6e:	2e00      	cmp	r6, #0
   12f70:	d1f3      	bne.n	12f5a <__lesf2+0x36>
   12f72:	e7e4      	b.n	12f3e <__lesf2+0x1a>
   12f74:	2002      	movs	r0, #2
   12f76:	2d00      	cmp	r5, #0
   12f78:	d1ef      	bne.n	12f5a <__lesf2+0x36>
   12f7a:	e7e2      	b.n	12f42 <__lesf2+0x1e>
   12f7c:	2d00      	cmp	r5, #0
   12f7e:	d1e7      	bne.n	12f50 <__lesf2+0x2c>
   12f80:	2000      	movs	r0, #0
   12f82:	2e00      	cmp	r6, #0
   12f84:	d0e9      	beq.n	12f5a <__lesf2+0x36>
   12f86:	e7ed      	b.n	12f64 <__lesf2+0x40>
   12f88:	2d00      	cmp	r5, #0
   12f8a:	d1e9      	bne.n	12f60 <__lesf2+0x3c>
   12f8c:	e7ea      	b.n	12f64 <__lesf2+0x40>
   12f8e:	42a2      	cmp	r2, r4
   12f90:	dc06      	bgt.n	12fa0 <__lesf2+0x7c>
   12f92:	dbdf      	blt.n	12f54 <__lesf2+0x30>
   12f94:	42ae      	cmp	r6, r5
   12f96:	d803      	bhi.n	12fa0 <__lesf2+0x7c>
   12f98:	2000      	movs	r0, #0
   12f9a:	42ae      	cmp	r6, r5
   12f9c:	d3da      	bcc.n	12f54 <__lesf2+0x30>
   12f9e:	e7dc      	b.n	12f5a <__lesf2+0x36>
   12fa0:	2001      	movs	r0, #1
   12fa2:	4249      	negs	r1, r1
   12fa4:	4308      	orrs	r0, r1
   12fa6:	e7d8      	b.n	12f5a <__lesf2+0x36>

00012fa8 <__aeabi_fsub>:
   12fa8:	b5f0      	push	{r4, r5, r6, r7, lr}
   12faa:	464f      	mov	r7, r9
   12fac:	46d6      	mov	lr, sl
   12fae:	4646      	mov	r6, r8
   12fb0:	0044      	lsls	r4, r0, #1
   12fb2:	b5c0      	push	{r6, r7, lr}
   12fb4:	0fc2      	lsrs	r2, r0, #31
   12fb6:	0247      	lsls	r7, r0, #9
   12fb8:	0248      	lsls	r0, r1, #9
   12fba:	0a40      	lsrs	r0, r0, #9
   12fbc:	4684      	mov	ip, r0
   12fbe:	4666      	mov	r6, ip
   12fc0:	0a7b      	lsrs	r3, r7, #9
   12fc2:	0048      	lsls	r0, r1, #1
   12fc4:	0fc9      	lsrs	r1, r1, #31
   12fc6:	469a      	mov	sl, r3
   12fc8:	0e24      	lsrs	r4, r4, #24
   12fca:	0015      	movs	r5, r2
   12fcc:	00db      	lsls	r3, r3, #3
   12fce:	0e00      	lsrs	r0, r0, #24
   12fd0:	4689      	mov	r9, r1
   12fd2:	00f6      	lsls	r6, r6, #3
   12fd4:	28ff      	cmp	r0, #255	; 0xff
   12fd6:	d100      	bne.n	12fda <__aeabi_fsub+0x32>
   12fd8:	e08f      	b.n	130fa <__aeabi_fsub+0x152>
   12fda:	2101      	movs	r1, #1
   12fdc:	464f      	mov	r7, r9
   12fde:	404f      	eors	r7, r1
   12fe0:	0039      	movs	r1, r7
   12fe2:	4291      	cmp	r1, r2
   12fe4:	d066      	beq.n	130b4 <__aeabi_fsub+0x10c>
   12fe6:	1a22      	subs	r2, r4, r0
   12fe8:	2a00      	cmp	r2, #0
   12fea:	dc00      	bgt.n	12fee <__aeabi_fsub+0x46>
   12fec:	e09d      	b.n	1312a <__aeabi_fsub+0x182>
   12fee:	2800      	cmp	r0, #0
   12ff0:	d13d      	bne.n	1306e <__aeabi_fsub+0xc6>
   12ff2:	2e00      	cmp	r6, #0
   12ff4:	d100      	bne.n	12ff8 <__aeabi_fsub+0x50>
   12ff6:	e08b      	b.n	13110 <__aeabi_fsub+0x168>
   12ff8:	1e51      	subs	r1, r2, #1
   12ffa:	2900      	cmp	r1, #0
   12ffc:	d000      	beq.n	13000 <__aeabi_fsub+0x58>
   12ffe:	e0b5      	b.n	1316c <__aeabi_fsub+0x1c4>
   13000:	2401      	movs	r4, #1
   13002:	1b9b      	subs	r3, r3, r6
   13004:	015a      	lsls	r2, r3, #5
   13006:	d544      	bpl.n	13092 <__aeabi_fsub+0xea>
   13008:	019b      	lsls	r3, r3, #6
   1300a:	099f      	lsrs	r7, r3, #6
   1300c:	0038      	movs	r0, r7
   1300e:	f001 fe13 	bl	14c38 <__clzsi2>
   13012:	3805      	subs	r0, #5
   13014:	4087      	lsls	r7, r0
   13016:	4284      	cmp	r4, r0
   13018:	dd00      	ble.n	1301c <__aeabi_fsub+0x74>
   1301a:	e096      	b.n	1314a <__aeabi_fsub+0x1a2>
   1301c:	1b04      	subs	r4, r0, r4
   1301e:	003a      	movs	r2, r7
   13020:	2020      	movs	r0, #32
   13022:	3401      	adds	r4, #1
   13024:	40e2      	lsrs	r2, r4
   13026:	1b04      	subs	r4, r0, r4
   13028:	40a7      	lsls	r7, r4
   1302a:	003b      	movs	r3, r7
   1302c:	1e5f      	subs	r7, r3, #1
   1302e:	41bb      	sbcs	r3, r7
   13030:	2400      	movs	r4, #0
   13032:	4313      	orrs	r3, r2
   13034:	075a      	lsls	r2, r3, #29
   13036:	d004      	beq.n	13042 <__aeabi_fsub+0x9a>
   13038:	220f      	movs	r2, #15
   1303a:	401a      	ands	r2, r3
   1303c:	2a04      	cmp	r2, #4
   1303e:	d000      	beq.n	13042 <__aeabi_fsub+0x9a>
   13040:	3304      	adds	r3, #4
   13042:	015a      	lsls	r2, r3, #5
   13044:	d527      	bpl.n	13096 <__aeabi_fsub+0xee>
   13046:	3401      	adds	r4, #1
   13048:	2cff      	cmp	r4, #255	; 0xff
   1304a:	d100      	bne.n	1304e <__aeabi_fsub+0xa6>
   1304c:	e079      	b.n	13142 <__aeabi_fsub+0x19a>
   1304e:	2201      	movs	r2, #1
   13050:	019b      	lsls	r3, r3, #6
   13052:	0a5b      	lsrs	r3, r3, #9
   13054:	b2e4      	uxtb	r4, r4
   13056:	402a      	ands	r2, r5
   13058:	025b      	lsls	r3, r3, #9
   1305a:	05e4      	lsls	r4, r4, #23
   1305c:	0a58      	lsrs	r0, r3, #9
   1305e:	07d2      	lsls	r2, r2, #31
   13060:	4320      	orrs	r0, r4
   13062:	4310      	orrs	r0, r2
   13064:	bc1c      	pop	{r2, r3, r4}
   13066:	4690      	mov	r8, r2
   13068:	4699      	mov	r9, r3
   1306a:	46a2      	mov	sl, r4
   1306c:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1306e:	2cff      	cmp	r4, #255	; 0xff
   13070:	d0e0      	beq.n	13034 <__aeabi_fsub+0x8c>
   13072:	2180      	movs	r1, #128	; 0x80
   13074:	04c9      	lsls	r1, r1, #19
   13076:	430e      	orrs	r6, r1
   13078:	2a1b      	cmp	r2, #27
   1307a:	dc7b      	bgt.n	13174 <__aeabi_fsub+0x1cc>
   1307c:	0031      	movs	r1, r6
   1307e:	2020      	movs	r0, #32
   13080:	40d1      	lsrs	r1, r2
   13082:	1a82      	subs	r2, r0, r2
   13084:	4096      	lsls	r6, r2
   13086:	1e72      	subs	r2, r6, #1
   13088:	4196      	sbcs	r6, r2
   1308a:	430e      	orrs	r6, r1
   1308c:	1b9b      	subs	r3, r3, r6
   1308e:	015a      	lsls	r2, r3, #5
   13090:	d4ba      	bmi.n	13008 <__aeabi_fsub+0x60>
   13092:	075a      	lsls	r2, r3, #29
   13094:	d1d0      	bne.n	13038 <__aeabi_fsub+0x90>
   13096:	2201      	movs	r2, #1
   13098:	08df      	lsrs	r7, r3, #3
   1309a:	402a      	ands	r2, r5
   1309c:	2cff      	cmp	r4, #255	; 0xff
   1309e:	d133      	bne.n	13108 <__aeabi_fsub+0x160>
   130a0:	2f00      	cmp	r7, #0
   130a2:	d100      	bne.n	130a6 <__aeabi_fsub+0xfe>
   130a4:	e0a8      	b.n	131f8 <__aeabi_fsub+0x250>
   130a6:	2380      	movs	r3, #128	; 0x80
   130a8:	03db      	lsls	r3, r3, #15
   130aa:	433b      	orrs	r3, r7
   130ac:	025b      	lsls	r3, r3, #9
   130ae:	0a5b      	lsrs	r3, r3, #9
   130b0:	24ff      	movs	r4, #255	; 0xff
   130b2:	e7d1      	b.n	13058 <__aeabi_fsub+0xb0>
   130b4:	1a21      	subs	r1, r4, r0
   130b6:	2900      	cmp	r1, #0
   130b8:	dd4c      	ble.n	13154 <__aeabi_fsub+0x1ac>
   130ba:	2800      	cmp	r0, #0
   130bc:	d02a      	beq.n	13114 <__aeabi_fsub+0x16c>
   130be:	2cff      	cmp	r4, #255	; 0xff
   130c0:	d0b8      	beq.n	13034 <__aeabi_fsub+0x8c>
   130c2:	2080      	movs	r0, #128	; 0x80
   130c4:	04c0      	lsls	r0, r0, #19
   130c6:	4306      	orrs	r6, r0
   130c8:	291b      	cmp	r1, #27
   130ca:	dd00      	ble.n	130ce <__aeabi_fsub+0x126>
   130cc:	e0af      	b.n	1322e <__aeabi_fsub+0x286>
   130ce:	0030      	movs	r0, r6
   130d0:	2720      	movs	r7, #32
   130d2:	40c8      	lsrs	r0, r1
   130d4:	1a79      	subs	r1, r7, r1
   130d6:	408e      	lsls	r6, r1
   130d8:	1e71      	subs	r1, r6, #1
   130da:	418e      	sbcs	r6, r1
   130dc:	4306      	orrs	r6, r0
   130de:	199b      	adds	r3, r3, r6
   130e0:	0159      	lsls	r1, r3, #5
   130e2:	d5d6      	bpl.n	13092 <__aeabi_fsub+0xea>
   130e4:	3401      	adds	r4, #1
   130e6:	2cff      	cmp	r4, #255	; 0xff
   130e8:	d100      	bne.n	130ec <__aeabi_fsub+0x144>
   130ea:	e085      	b.n	131f8 <__aeabi_fsub+0x250>
   130ec:	2201      	movs	r2, #1
   130ee:	497a      	ldr	r1, [pc, #488]	; (132d8 <__aeabi_fsub+0x330>)
   130f0:	401a      	ands	r2, r3
   130f2:	085b      	lsrs	r3, r3, #1
   130f4:	400b      	ands	r3, r1
   130f6:	4313      	orrs	r3, r2
   130f8:	e79c      	b.n	13034 <__aeabi_fsub+0x8c>
   130fa:	2e00      	cmp	r6, #0
   130fc:	d000      	beq.n	13100 <__aeabi_fsub+0x158>
   130fe:	e770      	b.n	12fe2 <__aeabi_fsub+0x3a>
   13100:	e76b      	b.n	12fda <__aeabi_fsub+0x32>
   13102:	1e3b      	subs	r3, r7, #0
   13104:	d1c5      	bne.n	13092 <__aeabi_fsub+0xea>
   13106:	2200      	movs	r2, #0
   13108:	027b      	lsls	r3, r7, #9
   1310a:	0a5b      	lsrs	r3, r3, #9
   1310c:	b2e4      	uxtb	r4, r4
   1310e:	e7a3      	b.n	13058 <__aeabi_fsub+0xb0>
   13110:	0014      	movs	r4, r2
   13112:	e78f      	b.n	13034 <__aeabi_fsub+0x8c>
   13114:	2e00      	cmp	r6, #0
   13116:	d04d      	beq.n	131b4 <__aeabi_fsub+0x20c>
   13118:	1e48      	subs	r0, r1, #1
   1311a:	2800      	cmp	r0, #0
   1311c:	d157      	bne.n	131ce <__aeabi_fsub+0x226>
   1311e:	199b      	adds	r3, r3, r6
   13120:	2401      	movs	r4, #1
   13122:	015a      	lsls	r2, r3, #5
   13124:	d5b5      	bpl.n	13092 <__aeabi_fsub+0xea>
   13126:	2402      	movs	r4, #2
   13128:	e7e0      	b.n	130ec <__aeabi_fsub+0x144>
   1312a:	2a00      	cmp	r2, #0
   1312c:	d125      	bne.n	1317a <__aeabi_fsub+0x1d2>
   1312e:	1c62      	adds	r2, r4, #1
   13130:	b2d2      	uxtb	r2, r2
   13132:	2a01      	cmp	r2, #1
   13134:	dd72      	ble.n	1321c <__aeabi_fsub+0x274>
   13136:	1b9f      	subs	r7, r3, r6
   13138:	017a      	lsls	r2, r7, #5
   1313a:	d535      	bpl.n	131a8 <__aeabi_fsub+0x200>
   1313c:	1af7      	subs	r7, r6, r3
   1313e:	000d      	movs	r5, r1
   13140:	e764      	b.n	1300c <__aeabi_fsub+0x64>
   13142:	2201      	movs	r2, #1
   13144:	2300      	movs	r3, #0
   13146:	402a      	ands	r2, r5
   13148:	e786      	b.n	13058 <__aeabi_fsub+0xb0>
   1314a:	003b      	movs	r3, r7
   1314c:	4a63      	ldr	r2, [pc, #396]	; (132dc <__aeabi_fsub+0x334>)
   1314e:	1a24      	subs	r4, r4, r0
   13150:	4013      	ands	r3, r2
   13152:	e76f      	b.n	13034 <__aeabi_fsub+0x8c>
   13154:	2900      	cmp	r1, #0
   13156:	d16c      	bne.n	13232 <__aeabi_fsub+0x28a>
   13158:	1c61      	adds	r1, r4, #1
   1315a:	b2c8      	uxtb	r0, r1
   1315c:	2801      	cmp	r0, #1
   1315e:	dd4e      	ble.n	131fe <__aeabi_fsub+0x256>
   13160:	29ff      	cmp	r1, #255	; 0xff
   13162:	d049      	beq.n	131f8 <__aeabi_fsub+0x250>
   13164:	199b      	adds	r3, r3, r6
   13166:	085b      	lsrs	r3, r3, #1
   13168:	000c      	movs	r4, r1
   1316a:	e763      	b.n	13034 <__aeabi_fsub+0x8c>
   1316c:	2aff      	cmp	r2, #255	; 0xff
   1316e:	d041      	beq.n	131f4 <__aeabi_fsub+0x24c>
   13170:	000a      	movs	r2, r1
   13172:	e781      	b.n	13078 <__aeabi_fsub+0xd0>
   13174:	2601      	movs	r6, #1
   13176:	1b9b      	subs	r3, r3, r6
   13178:	e789      	b.n	1308e <__aeabi_fsub+0xe6>
   1317a:	2c00      	cmp	r4, #0
   1317c:	d01c      	beq.n	131b8 <__aeabi_fsub+0x210>
   1317e:	28ff      	cmp	r0, #255	; 0xff
   13180:	d021      	beq.n	131c6 <__aeabi_fsub+0x21e>
   13182:	2480      	movs	r4, #128	; 0x80
   13184:	04e4      	lsls	r4, r4, #19
   13186:	4252      	negs	r2, r2
   13188:	4323      	orrs	r3, r4
   1318a:	2a1b      	cmp	r2, #27
   1318c:	dd00      	ble.n	13190 <__aeabi_fsub+0x1e8>
   1318e:	e096      	b.n	132be <__aeabi_fsub+0x316>
   13190:	001c      	movs	r4, r3
   13192:	2520      	movs	r5, #32
   13194:	40d4      	lsrs	r4, r2
   13196:	1aaa      	subs	r2, r5, r2
   13198:	4093      	lsls	r3, r2
   1319a:	1e5a      	subs	r2, r3, #1
   1319c:	4193      	sbcs	r3, r2
   1319e:	4323      	orrs	r3, r4
   131a0:	1af3      	subs	r3, r6, r3
   131a2:	0004      	movs	r4, r0
   131a4:	000d      	movs	r5, r1
   131a6:	e72d      	b.n	13004 <__aeabi_fsub+0x5c>
   131a8:	2f00      	cmp	r7, #0
   131aa:	d000      	beq.n	131ae <__aeabi_fsub+0x206>
   131ac:	e72e      	b.n	1300c <__aeabi_fsub+0x64>
   131ae:	2200      	movs	r2, #0
   131b0:	2400      	movs	r4, #0
   131b2:	e7a9      	b.n	13108 <__aeabi_fsub+0x160>
   131b4:	000c      	movs	r4, r1
   131b6:	e73d      	b.n	13034 <__aeabi_fsub+0x8c>
   131b8:	2b00      	cmp	r3, #0
   131ba:	d058      	beq.n	1326e <__aeabi_fsub+0x2c6>
   131bc:	43d2      	mvns	r2, r2
   131be:	2a00      	cmp	r2, #0
   131c0:	d0ee      	beq.n	131a0 <__aeabi_fsub+0x1f8>
   131c2:	28ff      	cmp	r0, #255	; 0xff
   131c4:	d1e1      	bne.n	1318a <__aeabi_fsub+0x1e2>
   131c6:	0033      	movs	r3, r6
   131c8:	24ff      	movs	r4, #255	; 0xff
   131ca:	000d      	movs	r5, r1
   131cc:	e732      	b.n	13034 <__aeabi_fsub+0x8c>
   131ce:	29ff      	cmp	r1, #255	; 0xff
   131d0:	d010      	beq.n	131f4 <__aeabi_fsub+0x24c>
   131d2:	0001      	movs	r1, r0
   131d4:	e778      	b.n	130c8 <__aeabi_fsub+0x120>
   131d6:	2b00      	cmp	r3, #0
   131d8:	d06e      	beq.n	132b8 <__aeabi_fsub+0x310>
   131da:	24ff      	movs	r4, #255	; 0xff
   131dc:	2e00      	cmp	r6, #0
   131de:	d100      	bne.n	131e2 <__aeabi_fsub+0x23a>
   131e0:	e728      	b.n	13034 <__aeabi_fsub+0x8c>
   131e2:	2280      	movs	r2, #128	; 0x80
   131e4:	4651      	mov	r1, sl
   131e6:	03d2      	lsls	r2, r2, #15
   131e8:	4211      	tst	r1, r2
   131ea:	d003      	beq.n	131f4 <__aeabi_fsub+0x24c>
   131ec:	4661      	mov	r1, ip
   131ee:	4211      	tst	r1, r2
   131f0:	d100      	bne.n	131f4 <__aeabi_fsub+0x24c>
   131f2:	0033      	movs	r3, r6
   131f4:	24ff      	movs	r4, #255	; 0xff
   131f6:	e71d      	b.n	13034 <__aeabi_fsub+0x8c>
   131f8:	24ff      	movs	r4, #255	; 0xff
   131fa:	2300      	movs	r3, #0
   131fc:	e72c      	b.n	13058 <__aeabi_fsub+0xb0>
   131fe:	2c00      	cmp	r4, #0
   13200:	d1e9      	bne.n	131d6 <__aeabi_fsub+0x22e>
   13202:	2b00      	cmp	r3, #0
   13204:	d063      	beq.n	132ce <__aeabi_fsub+0x326>
   13206:	2e00      	cmp	r6, #0
   13208:	d100      	bne.n	1320c <__aeabi_fsub+0x264>
   1320a:	e713      	b.n	13034 <__aeabi_fsub+0x8c>
   1320c:	199b      	adds	r3, r3, r6
   1320e:	015a      	lsls	r2, r3, #5
   13210:	d400      	bmi.n	13214 <__aeabi_fsub+0x26c>
   13212:	e73e      	b.n	13092 <__aeabi_fsub+0xea>
   13214:	4a31      	ldr	r2, [pc, #196]	; (132dc <__aeabi_fsub+0x334>)
   13216:	000c      	movs	r4, r1
   13218:	4013      	ands	r3, r2
   1321a:	e70b      	b.n	13034 <__aeabi_fsub+0x8c>
   1321c:	2c00      	cmp	r4, #0
   1321e:	d11e      	bne.n	1325e <__aeabi_fsub+0x2b6>
   13220:	2b00      	cmp	r3, #0
   13222:	d12f      	bne.n	13284 <__aeabi_fsub+0x2dc>
   13224:	2e00      	cmp	r6, #0
   13226:	d04f      	beq.n	132c8 <__aeabi_fsub+0x320>
   13228:	0033      	movs	r3, r6
   1322a:	000d      	movs	r5, r1
   1322c:	e702      	b.n	13034 <__aeabi_fsub+0x8c>
   1322e:	2601      	movs	r6, #1
   13230:	e755      	b.n	130de <__aeabi_fsub+0x136>
   13232:	2c00      	cmp	r4, #0
   13234:	d11f      	bne.n	13276 <__aeabi_fsub+0x2ce>
   13236:	2b00      	cmp	r3, #0
   13238:	d043      	beq.n	132c2 <__aeabi_fsub+0x31a>
   1323a:	43c9      	mvns	r1, r1
   1323c:	2900      	cmp	r1, #0
   1323e:	d00b      	beq.n	13258 <__aeabi_fsub+0x2b0>
   13240:	28ff      	cmp	r0, #255	; 0xff
   13242:	d039      	beq.n	132b8 <__aeabi_fsub+0x310>
   13244:	291b      	cmp	r1, #27
   13246:	dc44      	bgt.n	132d2 <__aeabi_fsub+0x32a>
   13248:	001c      	movs	r4, r3
   1324a:	2720      	movs	r7, #32
   1324c:	40cc      	lsrs	r4, r1
   1324e:	1a79      	subs	r1, r7, r1
   13250:	408b      	lsls	r3, r1
   13252:	1e59      	subs	r1, r3, #1
   13254:	418b      	sbcs	r3, r1
   13256:	4323      	orrs	r3, r4
   13258:	199b      	adds	r3, r3, r6
   1325a:	0004      	movs	r4, r0
   1325c:	e740      	b.n	130e0 <__aeabi_fsub+0x138>
   1325e:	2b00      	cmp	r3, #0
   13260:	d11a      	bne.n	13298 <__aeabi_fsub+0x2f0>
   13262:	2e00      	cmp	r6, #0
   13264:	d124      	bne.n	132b0 <__aeabi_fsub+0x308>
   13266:	2780      	movs	r7, #128	; 0x80
   13268:	2200      	movs	r2, #0
   1326a:	03ff      	lsls	r7, r7, #15
   1326c:	e71b      	b.n	130a6 <__aeabi_fsub+0xfe>
   1326e:	0033      	movs	r3, r6
   13270:	0004      	movs	r4, r0
   13272:	000d      	movs	r5, r1
   13274:	e6de      	b.n	13034 <__aeabi_fsub+0x8c>
   13276:	28ff      	cmp	r0, #255	; 0xff
   13278:	d01e      	beq.n	132b8 <__aeabi_fsub+0x310>
   1327a:	2480      	movs	r4, #128	; 0x80
   1327c:	04e4      	lsls	r4, r4, #19
   1327e:	4249      	negs	r1, r1
   13280:	4323      	orrs	r3, r4
   13282:	e7df      	b.n	13244 <__aeabi_fsub+0x29c>
   13284:	2e00      	cmp	r6, #0
   13286:	d100      	bne.n	1328a <__aeabi_fsub+0x2e2>
   13288:	e6d4      	b.n	13034 <__aeabi_fsub+0x8c>
   1328a:	1b9f      	subs	r7, r3, r6
   1328c:	017a      	lsls	r2, r7, #5
   1328e:	d400      	bmi.n	13292 <__aeabi_fsub+0x2ea>
   13290:	e737      	b.n	13102 <__aeabi_fsub+0x15a>
   13292:	1af3      	subs	r3, r6, r3
   13294:	000d      	movs	r5, r1
   13296:	e6cd      	b.n	13034 <__aeabi_fsub+0x8c>
   13298:	24ff      	movs	r4, #255	; 0xff
   1329a:	2e00      	cmp	r6, #0
   1329c:	d100      	bne.n	132a0 <__aeabi_fsub+0x2f8>
   1329e:	e6c9      	b.n	13034 <__aeabi_fsub+0x8c>
   132a0:	2280      	movs	r2, #128	; 0x80
   132a2:	4650      	mov	r0, sl
   132a4:	03d2      	lsls	r2, r2, #15
   132a6:	4210      	tst	r0, r2
   132a8:	d0a4      	beq.n	131f4 <__aeabi_fsub+0x24c>
   132aa:	4660      	mov	r0, ip
   132ac:	4210      	tst	r0, r2
   132ae:	d1a1      	bne.n	131f4 <__aeabi_fsub+0x24c>
   132b0:	0033      	movs	r3, r6
   132b2:	000d      	movs	r5, r1
   132b4:	24ff      	movs	r4, #255	; 0xff
   132b6:	e6bd      	b.n	13034 <__aeabi_fsub+0x8c>
   132b8:	0033      	movs	r3, r6
   132ba:	24ff      	movs	r4, #255	; 0xff
   132bc:	e6ba      	b.n	13034 <__aeabi_fsub+0x8c>
   132be:	2301      	movs	r3, #1
   132c0:	e76e      	b.n	131a0 <__aeabi_fsub+0x1f8>
   132c2:	0033      	movs	r3, r6
   132c4:	0004      	movs	r4, r0
   132c6:	e6b5      	b.n	13034 <__aeabi_fsub+0x8c>
   132c8:	2700      	movs	r7, #0
   132ca:	2200      	movs	r2, #0
   132cc:	e71c      	b.n	13108 <__aeabi_fsub+0x160>
   132ce:	0033      	movs	r3, r6
   132d0:	e6b0      	b.n	13034 <__aeabi_fsub+0x8c>
   132d2:	2301      	movs	r3, #1
   132d4:	e7c0      	b.n	13258 <__aeabi_fsub+0x2b0>
   132d6:	46c0      	nop			; (mov r8, r8)
   132d8:	7dffffff 	.word	0x7dffffff
   132dc:	fbffffff 	.word	0xfbffffff

000132e0 <__aeabi_f2iz>:
   132e0:	0241      	lsls	r1, r0, #9
   132e2:	0043      	lsls	r3, r0, #1
   132e4:	0fc2      	lsrs	r2, r0, #31
   132e6:	0a49      	lsrs	r1, r1, #9
   132e8:	0e1b      	lsrs	r3, r3, #24
   132ea:	2000      	movs	r0, #0
   132ec:	2b7e      	cmp	r3, #126	; 0x7e
   132ee:	dd0d      	ble.n	1330c <__aeabi_f2iz+0x2c>
   132f0:	2b9d      	cmp	r3, #157	; 0x9d
   132f2:	dc0c      	bgt.n	1330e <__aeabi_f2iz+0x2e>
   132f4:	2080      	movs	r0, #128	; 0x80
   132f6:	0400      	lsls	r0, r0, #16
   132f8:	4301      	orrs	r1, r0
   132fa:	2b95      	cmp	r3, #149	; 0x95
   132fc:	dc0a      	bgt.n	13314 <__aeabi_f2iz+0x34>
   132fe:	2096      	movs	r0, #150	; 0x96
   13300:	1ac3      	subs	r3, r0, r3
   13302:	40d9      	lsrs	r1, r3
   13304:	4248      	negs	r0, r1
   13306:	2a00      	cmp	r2, #0
   13308:	d100      	bne.n	1330c <__aeabi_f2iz+0x2c>
   1330a:	0008      	movs	r0, r1
   1330c:	4770      	bx	lr
   1330e:	4b03      	ldr	r3, [pc, #12]	; (1331c <__aeabi_f2iz+0x3c>)
   13310:	18d0      	adds	r0, r2, r3
   13312:	e7fb      	b.n	1330c <__aeabi_f2iz+0x2c>
   13314:	3b96      	subs	r3, #150	; 0x96
   13316:	4099      	lsls	r1, r3
   13318:	e7f4      	b.n	13304 <__aeabi_f2iz+0x24>
   1331a:	46c0      	nop			; (mov r8, r8)
   1331c:	7fffffff 	.word	0x7fffffff

00013320 <__aeabi_ui2f>:
   13320:	b510      	push	{r4, lr}
   13322:	1e04      	subs	r4, r0, #0
   13324:	d027      	beq.n	13376 <__aeabi_ui2f+0x56>
   13326:	f001 fc87 	bl	14c38 <__clzsi2>
   1332a:	239e      	movs	r3, #158	; 0x9e
   1332c:	1a1b      	subs	r3, r3, r0
   1332e:	2b96      	cmp	r3, #150	; 0x96
   13330:	dc0a      	bgt.n	13348 <__aeabi_ui2f+0x28>
   13332:	2296      	movs	r2, #150	; 0x96
   13334:	1ad2      	subs	r2, r2, r3
   13336:	4094      	lsls	r4, r2
   13338:	0264      	lsls	r4, r4, #9
   1333a:	0a64      	lsrs	r4, r4, #9
   1333c:	b2db      	uxtb	r3, r3
   1333e:	0264      	lsls	r4, r4, #9
   13340:	05db      	lsls	r3, r3, #23
   13342:	0a60      	lsrs	r0, r4, #9
   13344:	4318      	orrs	r0, r3
   13346:	bd10      	pop	{r4, pc}
   13348:	2b99      	cmp	r3, #153	; 0x99
   1334a:	dc17      	bgt.n	1337c <__aeabi_ui2f+0x5c>
   1334c:	2299      	movs	r2, #153	; 0x99
   1334e:	1ad2      	subs	r2, r2, r3
   13350:	2a00      	cmp	r2, #0
   13352:	dd27      	ble.n	133a4 <__aeabi_ui2f+0x84>
   13354:	4094      	lsls	r4, r2
   13356:	0022      	movs	r2, r4
   13358:	4c13      	ldr	r4, [pc, #76]	; (133a8 <__aeabi_ui2f+0x88>)
   1335a:	4014      	ands	r4, r2
   1335c:	0751      	lsls	r1, r2, #29
   1335e:	d004      	beq.n	1336a <__aeabi_ui2f+0x4a>
   13360:	210f      	movs	r1, #15
   13362:	400a      	ands	r2, r1
   13364:	2a04      	cmp	r2, #4
   13366:	d000      	beq.n	1336a <__aeabi_ui2f+0x4a>
   13368:	3404      	adds	r4, #4
   1336a:	0162      	lsls	r2, r4, #5
   1336c:	d412      	bmi.n	13394 <__aeabi_ui2f+0x74>
   1336e:	01a4      	lsls	r4, r4, #6
   13370:	0a64      	lsrs	r4, r4, #9
   13372:	b2db      	uxtb	r3, r3
   13374:	e7e3      	b.n	1333e <__aeabi_ui2f+0x1e>
   13376:	2300      	movs	r3, #0
   13378:	2400      	movs	r4, #0
   1337a:	e7e0      	b.n	1333e <__aeabi_ui2f+0x1e>
   1337c:	22b9      	movs	r2, #185	; 0xb9
   1337e:	0021      	movs	r1, r4
   13380:	1ad2      	subs	r2, r2, r3
   13382:	4091      	lsls	r1, r2
   13384:	000a      	movs	r2, r1
   13386:	1e51      	subs	r1, r2, #1
   13388:	418a      	sbcs	r2, r1
   1338a:	2105      	movs	r1, #5
   1338c:	1a09      	subs	r1, r1, r0
   1338e:	40cc      	lsrs	r4, r1
   13390:	4314      	orrs	r4, r2
   13392:	e7db      	b.n	1334c <__aeabi_ui2f+0x2c>
   13394:	4b04      	ldr	r3, [pc, #16]	; (133a8 <__aeabi_ui2f+0x88>)
   13396:	401c      	ands	r4, r3
   13398:	239f      	movs	r3, #159	; 0x9f
   1339a:	01a4      	lsls	r4, r4, #6
   1339c:	1a1b      	subs	r3, r3, r0
   1339e:	0a64      	lsrs	r4, r4, #9
   133a0:	b2db      	uxtb	r3, r3
   133a2:	e7cc      	b.n	1333e <__aeabi_ui2f+0x1e>
   133a4:	0022      	movs	r2, r4
   133a6:	e7d7      	b.n	13358 <__aeabi_ui2f+0x38>
   133a8:	fbffffff 	.word	0xfbffffff

000133ac <__aeabi_dadd>:
   133ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   133ae:	4645      	mov	r5, r8
   133b0:	46de      	mov	lr, fp
   133b2:	4657      	mov	r7, sl
   133b4:	464e      	mov	r6, r9
   133b6:	030c      	lsls	r4, r1, #12
   133b8:	b5e0      	push	{r5, r6, r7, lr}
   133ba:	004e      	lsls	r6, r1, #1
   133bc:	0fc9      	lsrs	r1, r1, #31
   133be:	4688      	mov	r8, r1
   133c0:	000d      	movs	r5, r1
   133c2:	0a61      	lsrs	r1, r4, #9
   133c4:	0f44      	lsrs	r4, r0, #29
   133c6:	430c      	orrs	r4, r1
   133c8:	00c7      	lsls	r7, r0, #3
   133ca:	0319      	lsls	r1, r3, #12
   133cc:	0058      	lsls	r0, r3, #1
   133ce:	0fdb      	lsrs	r3, r3, #31
   133d0:	469b      	mov	fp, r3
   133d2:	0a4b      	lsrs	r3, r1, #9
   133d4:	0f51      	lsrs	r1, r2, #29
   133d6:	430b      	orrs	r3, r1
   133d8:	0d76      	lsrs	r6, r6, #21
   133da:	0d40      	lsrs	r0, r0, #21
   133dc:	0019      	movs	r1, r3
   133de:	00d2      	lsls	r2, r2, #3
   133e0:	45d8      	cmp	r8, fp
   133e2:	d100      	bne.n	133e6 <__aeabi_dadd+0x3a>
   133e4:	e0ae      	b.n	13544 <__aeabi_dadd+0x198>
   133e6:	1a35      	subs	r5, r6, r0
   133e8:	2d00      	cmp	r5, #0
   133ea:	dc00      	bgt.n	133ee <__aeabi_dadd+0x42>
   133ec:	e0f6      	b.n	135dc <__aeabi_dadd+0x230>
   133ee:	2800      	cmp	r0, #0
   133f0:	d10f      	bne.n	13412 <__aeabi_dadd+0x66>
   133f2:	4313      	orrs	r3, r2
   133f4:	d100      	bne.n	133f8 <__aeabi_dadd+0x4c>
   133f6:	e0db      	b.n	135b0 <__aeabi_dadd+0x204>
   133f8:	1e6b      	subs	r3, r5, #1
   133fa:	2b00      	cmp	r3, #0
   133fc:	d000      	beq.n	13400 <__aeabi_dadd+0x54>
   133fe:	e137      	b.n	13670 <__aeabi_dadd+0x2c4>
   13400:	1aba      	subs	r2, r7, r2
   13402:	4297      	cmp	r7, r2
   13404:	41bf      	sbcs	r7, r7
   13406:	1a64      	subs	r4, r4, r1
   13408:	427f      	negs	r7, r7
   1340a:	1be4      	subs	r4, r4, r7
   1340c:	2601      	movs	r6, #1
   1340e:	0017      	movs	r7, r2
   13410:	e024      	b.n	1345c <__aeabi_dadd+0xb0>
   13412:	4bc6      	ldr	r3, [pc, #792]	; (1372c <__aeabi_dadd+0x380>)
   13414:	429e      	cmp	r6, r3
   13416:	d04d      	beq.n	134b4 <__aeabi_dadd+0x108>
   13418:	2380      	movs	r3, #128	; 0x80
   1341a:	041b      	lsls	r3, r3, #16
   1341c:	4319      	orrs	r1, r3
   1341e:	2d38      	cmp	r5, #56	; 0x38
   13420:	dd00      	ble.n	13424 <__aeabi_dadd+0x78>
   13422:	e107      	b.n	13634 <__aeabi_dadd+0x288>
   13424:	2d1f      	cmp	r5, #31
   13426:	dd00      	ble.n	1342a <__aeabi_dadd+0x7e>
   13428:	e138      	b.n	1369c <__aeabi_dadd+0x2f0>
   1342a:	2020      	movs	r0, #32
   1342c:	1b43      	subs	r3, r0, r5
   1342e:	469a      	mov	sl, r3
   13430:	000b      	movs	r3, r1
   13432:	4650      	mov	r0, sl
   13434:	4083      	lsls	r3, r0
   13436:	4699      	mov	r9, r3
   13438:	0013      	movs	r3, r2
   1343a:	4648      	mov	r0, r9
   1343c:	40eb      	lsrs	r3, r5
   1343e:	4318      	orrs	r0, r3
   13440:	0003      	movs	r3, r0
   13442:	4650      	mov	r0, sl
   13444:	4082      	lsls	r2, r0
   13446:	1e50      	subs	r0, r2, #1
   13448:	4182      	sbcs	r2, r0
   1344a:	40e9      	lsrs	r1, r5
   1344c:	431a      	orrs	r2, r3
   1344e:	1aba      	subs	r2, r7, r2
   13450:	1a61      	subs	r1, r4, r1
   13452:	4297      	cmp	r7, r2
   13454:	41a4      	sbcs	r4, r4
   13456:	0017      	movs	r7, r2
   13458:	4264      	negs	r4, r4
   1345a:	1b0c      	subs	r4, r1, r4
   1345c:	0223      	lsls	r3, r4, #8
   1345e:	d562      	bpl.n	13526 <__aeabi_dadd+0x17a>
   13460:	0264      	lsls	r4, r4, #9
   13462:	0a65      	lsrs	r5, r4, #9
   13464:	2d00      	cmp	r5, #0
   13466:	d100      	bne.n	1346a <__aeabi_dadd+0xbe>
   13468:	e0df      	b.n	1362a <__aeabi_dadd+0x27e>
   1346a:	0028      	movs	r0, r5
   1346c:	f001 fbe4 	bl	14c38 <__clzsi2>
   13470:	0003      	movs	r3, r0
   13472:	3b08      	subs	r3, #8
   13474:	2b1f      	cmp	r3, #31
   13476:	dd00      	ble.n	1347a <__aeabi_dadd+0xce>
   13478:	e0d2      	b.n	13620 <__aeabi_dadd+0x274>
   1347a:	2220      	movs	r2, #32
   1347c:	003c      	movs	r4, r7
   1347e:	1ad2      	subs	r2, r2, r3
   13480:	409d      	lsls	r5, r3
   13482:	40d4      	lsrs	r4, r2
   13484:	409f      	lsls	r7, r3
   13486:	4325      	orrs	r5, r4
   13488:	429e      	cmp	r6, r3
   1348a:	dd00      	ble.n	1348e <__aeabi_dadd+0xe2>
   1348c:	e0c4      	b.n	13618 <__aeabi_dadd+0x26c>
   1348e:	1b9e      	subs	r6, r3, r6
   13490:	1c73      	adds	r3, r6, #1
   13492:	2b1f      	cmp	r3, #31
   13494:	dd00      	ble.n	13498 <__aeabi_dadd+0xec>
   13496:	e0f1      	b.n	1367c <__aeabi_dadd+0x2d0>
   13498:	2220      	movs	r2, #32
   1349a:	0038      	movs	r0, r7
   1349c:	0029      	movs	r1, r5
   1349e:	1ad2      	subs	r2, r2, r3
   134a0:	40d8      	lsrs	r0, r3
   134a2:	4091      	lsls	r1, r2
   134a4:	4097      	lsls	r7, r2
   134a6:	002c      	movs	r4, r5
   134a8:	4301      	orrs	r1, r0
   134aa:	1e78      	subs	r0, r7, #1
   134ac:	4187      	sbcs	r7, r0
   134ae:	40dc      	lsrs	r4, r3
   134b0:	2600      	movs	r6, #0
   134b2:	430f      	orrs	r7, r1
   134b4:	077b      	lsls	r3, r7, #29
   134b6:	d009      	beq.n	134cc <__aeabi_dadd+0x120>
   134b8:	230f      	movs	r3, #15
   134ba:	403b      	ands	r3, r7
   134bc:	2b04      	cmp	r3, #4
   134be:	d005      	beq.n	134cc <__aeabi_dadd+0x120>
   134c0:	1d3b      	adds	r3, r7, #4
   134c2:	42bb      	cmp	r3, r7
   134c4:	41bf      	sbcs	r7, r7
   134c6:	427f      	negs	r7, r7
   134c8:	19e4      	adds	r4, r4, r7
   134ca:	001f      	movs	r7, r3
   134cc:	0223      	lsls	r3, r4, #8
   134ce:	d52c      	bpl.n	1352a <__aeabi_dadd+0x17e>
   134d0:	4b96      	ldr	r3, [pc, #600]	; (1372c <__aeabi_dadd+0x380>)
   134d2:	3601      	adds	r6, #1
   134d4:	429e      	cmp	r6, r3
   134d6:	d100      	bne.n	134da <__aeabi_dadd+0x12e>
   134d8:	e09a      	b.n	13610 <__aeabi_dadd+0x264>
   134da:	4645      	mov	r5, r8
   134dc:	4b94      	ldr	r3, [pc, #592]	; (13730 <__aeabi_dadd+0x384>)
   134de:	08ff      	lsrs	r7, r7, #3
   134e0:	401c      	ands	r4, r3
   134e2:	0760      	lsls	r0, r4, #29
   134e4:	0576      	lsls	r6, r6, #21
   134e6:	0264      	lsls	r4, r4, #9
   134e8:	4307      	orrs	r7, r0
   134ea:	0b24      	lsrs	r4, r4, #12
   134ec:	0d76      	lsrs	r6, r6, #21
   134ee:	2100      	movs	r1, #0
   134f0:	0324      	lsls	r4, r4, #12
   134f2:	0b23      	lsrs	r3, r4, #12
   134f4:	0d0c      	lsrs	r4, r1, #20
   134f6:	4a8f      	ldr	r2, [pc, #572]	; (13734 <__aeabi_dadd+0x388>)
   134f8:	0524      	lsls	r4, r4, #20
   134fa:	431c      	orrs	r4, r3
   134fc:	4014      	ands	r4, r2
   134fe:	0533      	lsls	r3, r6, #20
   13500:	4323      	orrs	r3, r4
   13502:	005b      	lsls	r3, r3, #1
   13504:	07ed      	lsls	r5, r5, #31
   13506:	085b      	lsrs	r3, r3, #1
   13508:	432b      	orrs	r3, r5
   1350a:	0038      	movs	r0, r7
   1350c:	0019      	movs	r1, r3
   1350e:	bc3c      	pop	{r2, r3, r4, r5}
   13510:	4690      	mov	r8, r2
   13512:	4699      	mov	r9, r3
   13514:	46a2      	mov	sl, r4
   13516:	46ab      	mov	fp, r5
   13518:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1351a:	4664      	mov	r4, ip
   1351c:	4304      	orrs	r4, r0
   1351e:	d100      	bne.n	13522 <__aeabi_dadd+0x176>
   13520:	e211      	b.n	13946 <__aeabi_dadd+0x59a>
   13522:	0004      	movs	r4, r0
   13524:	4667      	mov	r7, ip
   13526:	077b      	lsls	r3, r7, #29
   13528:	d1c6      	bne.n	134b8 <__aeabi_dadd+0x10c>
   1352a:	4645      	mov	r5, r8
   1352c:	0760      	lsls	r0, r4, #29
   1352e:	08ff      	lsrs	r7, r7, #3
   13530:	4307      	orrs	r7, r0
   13532:	08e4      	lsrs	r4, r4, #3
   13534:	4b7d      	ldr	r3, [pc, #500]	; (1372c <__aeabi_dadd+0x380>)
   13536:	429e      	cmp	r6, r3
   13538:	d030      	beq.n	1359c <__aeabi_dadd+0x1f0>
   1353a:	0324      	lsls	r4, r4, #12
   1353c:	0576      	lsls	r6, r6, #21
   1353e:	0b24      	lsrs	r4, r4, #12
   13540:	0d76      	lsrs	r6, r6, #21
   13542:	e7d4      	b.n	134ee <__aeabi_dadd+0x142>
   13544:	1a33      	subs	r3, r6, r0
   13546:	469a      	mov	sl, r3
   13548:	2b00      	cmp	r3, #0
   1354a:	dd78      	ble.n	1363e <__aeabi_dadd+0x292>
   1354c:	2800      	cmp	r0, #0
   1354e:	d031      	beq.n	135b4 <__aeabi_dadd+0x208>
   13550:	4876      	ldr	r0, [pc, #472]	; (1372c <__aeabi_dadd+0x380>)
   13552:	4286      	cmp	r6, r0
   13554:	d0ae      	beq.n	134b4 <__aeabi_dadd+0x108>
   13556:	2080      	movs	r0, #128	; 0x80
   13558:	0400      	lsls	r0, r0, #16
   1355a:	4301      	orrs	r1, r0
   1355c:	4653      	mov	r3, sl
   1355e:	2b38      	cmp	r3, #56	; 0x38
   13560:	dc00      	bgt.n	13564 <__aeabi_dadd+0x1b8>
   13562:	e0e9      	b.n	13738 <__aeabi_dadd+0x38c>
   13564:	430a      	orrs	r2, r1
   13566:	1e51      	subs	r1, r2, #1
   13568:	418a      	sbcs	r2, r1
   1356a:	2100      	movs	r1, #0
   1356c:	19d2      	adds	r2, r2, r7
   1356e:	42ba      	cmp	r2, r7
   13570:	41bf      	sbcs	r7, r7
   13572:	1909      	adds	r1, r1, r4
   13574:	427c      	negs	r4, r7
   13576:	0017      	movs	r7, r2
   13578:	190c      	adds	r4, r1, r4
   1357a:	0223      	lsls	r3, r4, #8
   1357c:	d5d3      	bpl.n	13526 <__aeabi_dadd+0x17a>
   1357e:	4b6b      	ldr	r3, [pc, #428]	; (1372c <__aeabi_dadd+0x380>)
   13580:	3601      	adds	r6, #1
   13582:	429e      	cmp	r6, r3
   13584:	d100      	bne.n	13588 <__aeabi_dadd+0x1dc>
   13586:	e13a      	b.n	137fe <__aeabi_dadd+0x452>
   13588:	2001      	movs	r0, #1
   1358a:	4b69      	ldr	r3, [pc, #420]	; (13730 <__aeabi_dadd+0x384>)
   1358c:	401c      	ands	r4, r3
   1358e:	087b      	lsrs	r3, r7, #1
   13590:	4007      	ands	r7, r0
   13592:	431f      	orrs	r7, r3
   13594:	07e0      	lsls	r0, r4, #31
   13596:	4307      	orrs	r7, r0
   13598:	0864      	lsrs	r4, r4, #1
   1359a:	e78b      	b.n	134b4 <__aeabi_dadd+0x108>
   1359c:	0023      	movs	r3, r4
   1359e:	433b      	orrs	r3, r7
   135a0:	d100      	bne.n	135a4 <__aeabi_dadd+0x1f8>
   135a2:	e1cb      	b.n	1393c <__aeabi_dadd+0x590>
   135a4:	2280      	movs	r2, #128	; 0x80
   135a6:	0312      	lsls	r2, r2, #12
   135a8:	4314      	orrs	r4, r2
   135aa:	0324      	lsls	r4, r4, #12
   135ac:	0b24      	lsrs	r4, r4, #12
   135ae:	e79e      	b.n	134ee <__aeabi_dadd+0x142>
   135b0:	002e      	movs	r6, r5
   135b2:	e77f      	b.n	134b4 <__aeabi_dadd+0x108>
   135b4:	0008      	movs	r0, r1
   135b6:	4310      	orrs	r0, r2
   135b8:	d100      	bne.n	135bc <__aeabi_dadd+0x210>
   135ba:	e0b4      	b.n	13726 <__aeabi_dadd+0x37a>
   135bc:	1e58      	subs	r0, r3, #1
   135be:	2800      	cmp	r0, #0
   135c0:	d000      	beq.n	135c4 <__aeabi_dadd+0x218>
   135c2:	e0de      	b.n	13782 <__aeabi_dadd+0x3d6>
   135c4:	18ba      	adds	r2, r7, r2
   135c6:	42ba      	cmp	r2, r7
   135c8:	419b      	sbcs	r3, r3
   135ca:	1864      	adds	r4, r4, r1
   135cc:	425b      	negs	r3, r3
   135ce:	18e4      	adds	r4, r4, r3
   135d0:	0017      	movs	r7, r2
   135d2:	2601      	movs	r6, #1
   135d4:	0223      	lsls	r3, r4, #8
   135d6:	d5a6      	bpl.n	13526 <__aeabi_dadd+0x17a>
   135d8:	2602      	movs	r6, #2
   135da:	e7d5      	b.n	13588 <__aeabi_dadd+0x1dc>
   135dc:	2d00      	cmp	r5, #0
   135de:	d16e      	bne.n	136be <__aeabi_dadd+0x312>
   135e0:	1c70      	adds	r0, r6, #1
   135e2:	0540      	lsls	r0, r0, #21
   135e4:	0d40      	lsrs	r0, r0, #21
   135e6:	2801      	cmp	r0, #1
   135e8:	dc00      	bgt.n	135ec <__aeabi_dadd+0x240>
   135ea:	e0f9      	b.n	137e0 <__aeabi_dadd+0x434>
   135ec:	1ab8      	subs	r0, r7, r2
   135ee:	4684      	mov	ip, r0
   135f0:	4287      	cmp	r7, r0
   135f2:	4180      	sbcs	r0, r0
   135f4:	1ae5      	subs	r5, r4, r3
   135f6:	4240      	negs	r0, r0
   135f8:	1a2d      	subs	r5, r5, r0
   135fa:	0228      	lsls	r0, r5, #8
   135fc:	d400      	bmi.n	13600 <__aeabi_dadd+0x254>
   135fe:	e089      	b.n	13714 <__aeabi_dadd+0x368>
   13600:	1bd7      	subs	r7, r2, r7
   13602:	42ba      	cmp	r2, r7
   13604:	4192      	sbcs	r2, r2
   13606:	1b1c      	subs	r4, r3, r4
   13608:	4252      	negs	r2, r2
   1360a:	1aa5      	subs	r5, r4, r2
   1360c:	46d8      	mov	r8, fp
   1360e:	e729      	b.n	13464 <__aeabi_dadd+0xb8>
   13610:	4645      	mov	r5, r8
   13612:	2400      	movs	r4, #0
   13614:	2700      	movs	r7, #0
   13616:	e76a      	b.n	134ee <__aeabi_dadd+0x142>
   13618:	4c45      	ldr	r4, [pc, #276]	; (13730 <__aeabi_dadd+0x384>)
   1361a:	1af6      	subs	r6, r6, r3
   1361c:	402c      	ands	r4, r5
   1361e:	e749      	b.n	134b4 <__aeabi_dadd+0x108>
   13620:	003d      	movs	r5, r7
   13622:	3828      	subs	r0, #40	; 0x28
   13624:	4085      	lsls	r5, r0
   13626:	2700      	movs	r7, #0
   13628:	e72e      	b.n	13488 <__aeabi_dadd+0xdc>
   1362a:	0038      	movs	r0, r7
   1362c:	f001 fb04 	bl	14c38 <__clzsi2>
   13630:	3020      	adds	r0, #32
   13632:	e71d      	b.n	13470 <__aeabi_dadd+0xc4>
   13634:	430a      	orrs	r2, r1
   13636:	1e51      	subs	r1, r2, #1
   13638:	418a      	sbcs	r2, r1
   1363a:	2100      	movs	r1, #0
   1363c:	e707      	b.n	1344e <__aeabi_dadd+0xa2>
   1363e:	2b00      	cmp	r3, #0
   13640:	d000      	beq.n	13644 <__aeabi_dadd+0x298>
   13642:	e0f3      	b.n	1382c <__aeabi_dadd+0x480>
   13644:	1c70      	adds	r0, r6, #1
   13646:	0543      	lsls	r3, r0, #21
   13648:	0d5b      	lsrs	r3, r3, #21
   1364a:	2b01      	cmp	r3, #1
   1364c:	dc00      	bgt.n	13650 <__aeabi_dadd+0x2a4>
   1364e:	e0ad      	b.n	137ac <__aeabi_dadd+0x400>
   13650:	4b36      	ldr	r3, [pc, #216]	; (1372c <__aeabi_dadd+0x380>)
   13652:	4298      	cmp	r0, r3
   13654:	d100      	bne.n	13658 <__aeabi_dadd+0x2ac>
   13656:	e0d1      	b.n	137fc <__aeabi_dadd+0x450>
   13658:	18ba      	adds	r2, r7, r2
   1365a:	42ba      	cmp	r2, r7
   1365c:	41bf      	sbcs	r7, r7
   1365e:	1864      	adds	r4, r4, r1
   13660:	427f      	negs	r7, r7
   13662:	19e4      	adds	r4, r4, r7
   13664:	07e7      	lsls	r7, r4, #31
   13666:	0852      	lsrs	r2, r2, #1
   13668:	4317      	orrs	r7, r2
   1366a:	0864      	lsrs	r4, r4, #1
   1366c:	0006      	movs	r6, r0
   1366e:	e721      	b.n	134b4 <__aeabi_dadd+0x108>
   13670:	482e      	ldr	r0, [pc, #184]	; (1372c <__aeabi_dadd+0x380>)
   13672:	4285      	cmp	r5, r0
   13674:	d100      	bne.n	13678 <__aeabi_dadd+0x2cc>
   13676:	e093      	b.n	137a0 <__aeabi_dadd+0x3f4>
   13678:	001d      	movs	r5, r3
   1367a:	e6d0      	b.n	1341e <__aeabi_dadd+0x72>
   1367c:	0029      	movs	r1, r5
   1367e:	3e1f      	subs	r6, #31
   13680:	40f1      	lsrs	r1, r6
   13682:	2b20      	cmp	r3, #32
   13684:	d100      	bne.n	13688 <__aeabi_dadd+0x2dc>
   13686:	e08d      	b.n	137a4 <__aeabi_dadd+0x3f8>
   13688:	2240      	movs	r2, #64	; 0x40
   1368a:	1ad3      	subs	r3, r2, r3
   1368c:	409d      	lsls	r5, r3
   1368e:	432f      	orrs	r7, r5
   13690:	1e7d      	subs	r5, r7, #1
   13692:	41af      	sbcs	r7, r5
   13694:	2400      	movs	r4, #0
   13696:	430f      	orrs	r7, r1
   13698:	2600      	movs	r6, #0
   1369a:	e744      	b.n	13526 <__aeabi_dadd+0x17a>
   1369c:	002b      	movs	r3, r5
   1369e:	0008      	movs	r0, r1
   136a0:	3b20      	subs	r3, #32
   136a2:	40d8      	lsrs	r0, r3
   136a4:	0003      	movs	r3, r0
   136a6:	2d20      	cmp	r5, #32
   136a8:	d100      	bne.n	136ac <__aeabi_dadd+0x300>
   136aa:	e07d      	b.n	137a8 <__aeabi_dadd+0x3fc>
   136ac:	2040      	movs	r0, #64	; 0x40
   136ae:	1b45      	subs	r5, r0, r5
   136b0:	40a9      	lsls	r1, r5
   136b2:	430a      	orrs	r2, r1
   136b4:	1e51      	subs	r1, r2, #1
   136b6:	418a      	sbcs	r2, r1
   136b8:	2100      	movs	r1, #0
   136ba:	431a      	orrs	r2, r3
   136bc:	e6c7      	b.n	1344e <__aeabi_dadd+0xa2>
   136be:	2e00      	cmp	r6, #0
   136c0:	d050      	beq.n	13764 <__aeabi_dadd+0x3b8>
   136c2:	4e1a      	ldr	r6, [pc, #104]	; (1372c <__aeabi_dadd+0x380>)
   136c4:	42b0      	cmp	r0, r6
   136c6:	d057      	beq.n	13778 <__aeabi_dadd+0x3cc>
   136c8:	2680      	movs	r6, #128	; 0x80
   136ca:	426b      	negs	r3, r5
   136cc:	4699      	mov	r9, r3
   136ce:	0436      	lsls	r6, r6, #16
   136d0:	4334      	orrs	r4, r6
   136d2:	464b      	mov	r3, r9
   136d4:	2b38      	cmp	r3, #56	; 0x38
   136d6:	dd00      	ble.n	136da <__aeabi_dadd+0x32e>
   136d8:	e0d6      	b.n	13888 <__aeabi_dadd+0x4dc>
   136da:	2b1f      	cmp	r3, #31
   136dc:	dd00      	ble.n	136e0 <__aeabi_dadd+0x334>
   136de:	e135      	b.n	1394c <__aeabi_dadd+0x5a0>
   136e0:	2620      	movs	r6, #32
   136e2:	1af5      	subs	r5, r6, r3
   136e4:	0026      	movs	r6, r4
   136e6:	40ae      	lsls	r6, r5
   136e8:	46b2      	mov	sl, r6
   136ea:	003e      	movs	r6, r7
   136ec:	40de      	lsrs	r6, r3
   136ee:	46ac      	mov	ip, r5
   136f0:	0035      	movs	r5, r6
   136f2:	4656      	mov	r6, sl
   136f4:	432e      	orrs	r6, r5
   136f6:	4665      	mov	r5, ip
   136f8:	40af      	lsls	r7, r5
   136fa:	1e7d      	subs	r5, r7, #1
   136fc:	41af      	sbcs	r7, r5
   136fe:	40dc      	lsrs	r4, r3
   13700:	4337      	orrs	r7, r6
   13702:	1bd7      	subs	r7, r2, r7
   13704:	42ba      	cmp	r2, r7
   13706:	4192      	sbcs	r2, r2
   13708:	1b0c      	subs	r4, r1, r4
   1370a:	4252      	negs	r2, r2
   1370c:	1aa4      	subs	r4, r4, r2
   1370e:	0006      	movs	r6, r0
   13710:	46d8      	mov	r8, fp
   13712:	e6a3      	b.n	1345c <__aeabi_dadd+0xb0>
   13714:	4664      	mov	r4, ip
   13716:	4667      	mov	r7, ip
   13718:	432c      	orrs	r4, r5
   1371a:	d000      	beq.n	1371e <__aeabi_dadd+0x372>
   1371c:	e6a2      	b.n	13464 <__aeabi_dadd+0xb8>
   1371e:	2500      	movs	r5, #0
   13720:	2600      	movs	r6, #0
   13722:	2700      	movs	r7, #0
   13724:	e706      	b.n	13534 <__aeabi_dadd+0x188>
   13726:	001e      	movs	r6, r3
   13728:	e6c4      	b.n	134b4 <__aeabi_dadd+0x108>
   1372a:	46c0      	nop			; (mov r8, r8)
   1372c:	000007ff 	.word	0x000007ff
   13730:	ff7fffff 	.word	0xff7fffff
   13734:	800fffff 	.word	0x800fffff
   13738:	2b1f      	cmp	r3, #31
   1373a:	dc63      	bgt.n	13804 <__aeabi_dadd+0x458>
   1373c:	2020      	movs	r0, #32
   1373e:	1ac3      	subs	r3, r0, r3
   13740:	0008      	movs	r0, r1
   13742:	4098      	lsls	r0, r3
   13744:	469c      	mov	ip, r3
   13746:	4683      	mov	fp, r0
   13748:	4653      	mov	r3, sl
   1374a:	0010      	movs	r0, r2
   1374c:	40d8      	lsrs	r0, r3
   1374e:	0003      	movs	r3, r0
   13750:	4658      	mov	r0, fp
   13752:	4318      	orrs	r0, r3
   13754:	4663      	mov	r3, ip
   13756:	409a      	lsls	r2, r3
   13758:	1e53      	subs	r3, r2, #1
   1375a:	419a      	sbcs	r2, r3
   1375c:	4653      	mov	r3, sl
   1375e:	4302      	orrs	r2, r0
   13760:	40d9      	lsrs	r1, r3
   13762:	e703      	b.n	1356c <__aeabi_dadd+0x1c0>
   13764:	0026      	movs	r6, r4
   13766:	433e      	orrs	r6, r7
   13768:	d006      	beq.n	13778 <__aeabi_dadd+0x3cc>
   1376a:	43eb      	mvns	r3, r5
   1376c:	4699      	mov	r9, r3
   1376e:	2b00      	cmp	r3, #0
   13770:	d0c7      	beq.n	13702 <__aeabi_dadd+0x356>
   13772:	4e94      	ldr	r6, [pc, #592]	; (139c4 <__aeabi_dadd+0x618>)
   13774:	42b0      	cmp	r0, r6
   13776:	d1ac      	bne.n	136d2 <__aeabi_dadd+0x326>
   13778:	000c      	movs	r4, r1
   1377a:	0017      	movs	r7, r2
   1377c:	0006      	movs	r6, r0
   1377e:	46d8      	mov	r8, fp
   13780:	e698      	b.n	134b4 <__aeabi_dadd+0x108>
   13782:	4b90      	ldr	r3, [pc, #576]	; (139c4 <__aeabi_dadd+0x618>)
   13784:	459a      	cmp	sl, r3
   13786:	d00b      	beq.n	137a0 <__aeabi_dadd+0x3f4>
   13788:	4682      	mov	sl, r0
   1378a:	e6e7      	b.n	1355c <__aeabi_dadd+0x1b0>
   1378c:	2800      	cmp	r0, #0
   1378e:	d000      	beq.n	13792 <__aeabi_dadd+0x3e6>
   13790:	e09e      	b.n	138d0 <__aeabi_dadd+0x524>
   13792:	0018      	movs	r0, r3
   13794:	4310      	orrs	r0, r2
   13796:	d100      	bne.n	1379a <__aeabi_dadd+0x3ee>
   13798:	e0e9      	b.n	1396e <__aeabi_dadd+0x5c2>
   1379a:	001c      	movs	r4, r3
   1379c:	0017      	movs	r7, r2
   1379e:	46d8      	mov	r8, fp
   137a0:	4e88      	ldr	r6, [pc, #544]	; (139c4 <__aeabi_dadd+0x618>)
   137a2:	e687      	b.n	134b4 <__aeabi_dadd+0x108>
   137a4:	2500      	movs	r5, #0
   137a6:	e772      	b.n	1368e <__aeabi_dadd+0x2e2>
   137a8:	2100      	movs	r1, #0
   137aa:	e782      	b.n	136b2 <__aeabi_dadd+0x306>
   137ac:	0023      	movs	r3, r4
   137ae:	433b      	orrs	r3, r7
   137b0:	2e00      	cmp	r6, #0
   137b2:	d000      	beq.n	137b6 <__aeabi_dadd+0x40a>
   137b4:	e0ab      	b.n	1390e <__aeabi_dadd+0x562>
   137b6:	2b00      	cmp	r3, #0
   137b8:	d100      	bne.n	137bc <__aeabi_dadd+0x410>
   137ba:	e0e7      	b.n	1398c <__aeabi_dadd+0x5e0>
   137bc:	000b      	movs	r3, r1
   137be:	4313      	orrs	r3, r2
   137c0:	d100      	bne.n	137c4 <__aeabi_dadd+0x418>
   137c2:	e677      	b.n	134b4 <__aeabi_dadd+0x108>
   137c4:	18ba      	adds	r2, r7, r2
   137c6:	42ba      	cmp	r2, r7
   137c8:	41bf      	sbcs	r7, r7
   137ca:	1864      	adds	r4, r4, r1
   137cc:	427f      	negs	r7, r7
   137ce:	19e4      	adds	r4, r4, r7
   137d0:	0223      	lsls	r3, r4, #8
   137d2:	d400      	bmi.n	137d6 <__aeabi_dadd+0x42a>
   137d4:	e0f2      	b.n	139bc <__aeabi_dadd+0x610>
   137d6:	4b7c      	ldr	r3, [pc, #496]	; (139c8 <__aeabi_dadd+0x61c>)
   137d8:	0017      	movs	r7, r2
   137da:	401c      	ands	r4, r3
   137dc:	0006      	movs	r6, r0
   137de:	e669      	b.n	134b4 <__aeabi_dadd+0x108>
   137e0:	0020      	movs	r0, r4
   137e2:	4338      	orrs	r0, r7
   137e4:	2e00      	cmp	r6, #0
   137e6:	d1d1      	bne.n	1378c <__aeabi_dadd+0x3e0>
   137e8:	2800      	cmp	r0, #0
   137ea:	d15b      	bne.n	138a4 <__aeabi_dadd+0x4f8>
   137ec:	001c      	movs	r4, r3
   137ee:	4314      	orrs	r4, r2
   137f0:	d100      	bne.n	137f4 <__aeabi_dadd+0x448>
   137f2:	e0a8      	b.n	13946 <__aeabi_dadd+0x59a>
   137f4:	001c      	movs	r4, r3
   137f6:	0017      	movs	r7, r2
   137f8:	46d8      	mov	r8, fp
   137fa:	e65b      	b.n	134b4 <__aeabi_dadd+0x108>
   137fc:	0006      	movs	r6, r0
   137fe:	2400      	movs	r4, #0
   13800:	2700      	movs	r7, #0
   13802:	e697      	b.n	13534 <__aeabi_dadd+0x188>
   13804:	4650      	mov	r0, sl
   13806:	000b      	movs	r3, r1
   13808:	3820      	subs	r0, #32
   1380a:	40c3      	lsrs	r3, r0
   1380c:	4699      	mov	r9, r3
   1380e:	4653      	mov	r3, sl
   13810:	2b20      	cmp	r3, #32
   13812:	d100      	bne.n	13816 <__aeabi_dadd+0x46a>
   13814:	e095      	b.n	13942 <__aeabi_dadd+0x596>
   13816:	2340      	movs	r3, #64	; 0x40
   13818:	4650      	mov	r0, sl
   1381a:	1a1b      	subs	r3, r3, r0
   1381c:	4099      	lsls	r1, r3
   1381e:	430a      	orrs	r2, r1
   13820:	1e51      	subs	r1, r2, #1
   13822:	418a      	sbcs	r2, r1
   13824:	464b      	mov	r3, r9
   13826:	2100      	movs	r1, #0
   13828:	431a      	orrs	r2, r3
   1382a:	e69f      	b.n	1356c <__aeabi_dadd+0x1c0>
   1382c:	2e00      	cmp	r6, #0
   1382e:	d130      	bne.n	13892 <__aeabi_dadd+0x4e6>
   13830:	0026      	movs	r6, r4
   13832:	433e      	orrs	r6, r7
   13834:	d067      	beq.n	13906 <__aeabi_dadd+0x55a>
   13836:	43db      	mvns	r3, r3
   13838:	469a      	mov	sl, r3
   1383a:	2b00      	cmp	r3, #0
   1383c:	d01c      	beq.n	13878 <__aeabi_dadd+0x4cc>
   1383e:	4e61      	ldr	r6, [pc, #388]	; (139c4 <__aeabi_dadd+0x618>)
   13840:	42b0      	cmp	r0, r6
   13842:	d060      	beq.n	13906 <__aeabi_dadd+0x55a>
   13844:	4653      	mov	r3, sl
   13846:	2b38      	cmp	r3, #56	; 0x38
   13848:	dd00      	ble.n	1384c <__aeabi_dadd+0x4a0>
   1384a:	e096      	b.n	1397a <__aeabi_dadd+0x5ce>
   1384c:	2b1f      	cmp	r3, #31
   1384e:	dd00      	ble.n	13852 <__aeabi_dadd+0x4a6>
   13850:	e09f      	b.n	13992 <__aeabi_dadd+0x5e6>
   13852:	2620      	movs	r6, #32
   13854:	1af3      	subs	r3, r6, r3
   13856:	0026      	movs	r6, r4
   13858:	409e      	lsls	r6, r3
   1385a:	469c      	mov	ip, r3
   1385c:	46b3      	mov	fp, r6
   1385e:	4653      	mov	r3, sl
   13860:	003e      	movs	r6, r7
   13862:	40de      	lsrs	r6, r3
   13864:	0033      	movs	r3, r6
   13866:	465e      	mov	r6, fp
   13868:	431e      	orrs	r6, r3
   1386a:	4663      	mov	r3, ip
   1386c:	409f      	lsls	r7, r3
   1386e:	1e7b      	subs	r3, r7, #1
   13870:	419f      	sbcs	r7, r3
   13872:	4653      	mov	r3, sl
   13874:	40dc      	lsrs	r4, r3
   13876:	4337      	orrs	r7, r6
   13878:	18bf      	adds	r7, r7, r2
   1387a:	4297      	cmp	r7, r2
   1387c:	4192      	sbcs	r2, r2
   1387e:	1864      	adds	r4, r4, r1
   13880:	4252      	negs	r2, r2
   13882:	18a4      	adds	r4, r4, r2
   13884:	0006      	movs	r6, r0
   13886:	e678      	b.n	1357a <__aeabi_dadd+0x1ce>
   13888:	4327      	orrs	r7, r4
   1388a:	1e7c      	subs	r4, r7, #1
   1388c:	41a7      	sbcs	r7, r4
   1388e:	2400      	movs	r4, #0
   13890:	e737      	b.n	13702 <__aeabi_dadd+0x356>
   13892:	4e4c      	ldr	r6, [pc, #304]	; (139c4 <__aeabi_dadd+0x618>)
   13894:	42b0      	cmp	r0, r6
   13896:	d036      	beq.n	13906 <__aeabi_dadd+0x55a>
   13898:	2680      	movs	r6, #128	; 0x80
   1389a:	425b      	negs	r3, r3
   1389c:	0436      	lsls	r6, r6, #16
   1389e:	469a      	mov	sl, r3
   138a0:	4334      	orrs	r4, r6
   138a2:	e7cf      	b.n	13844 <__aeabi_dadd+0x498>
   138a4:	0018      	movs	r0, r3
   138a6:	4310      	orrs	r0, r2
   138a8:	d100      	bne.n	138ac <__aeabi_dadd+0x500>
   138aa:	e603      	b.n	134b4 <__aeabi_dadd+0x108>
   138ac:	1ab8      	subs	r0, r7, r2
   138ae:	4684      	mov	ip, r0
   138b0:	4567      	cmp	r7, ip
   138b2:	41ad      	sbcs	r5, r5
   138b4:	1ae0      	subs	r0, r4, r3
   138b6:	426d      	negs	r5, r5
   138b8:	1b40      	subs	r0, r0, r5
   138ba:	0205      	lsls	r5, r0, #8
   138bc:	d400      	bmi.n	138c0 <__aeabi_dadd+0x514>
   138be:	e62c      	b.n	1351a <__aeabi_dadd+0x16e>
   138c0:	1bd7      	subs	r7, r2, r7
   138c2:	42ba      	cmp	r2, r7
   138c4:	4192      	sbcs	r2, r2
   138c6:	1b1c      	subs	r4, r3, r4
   138c8:	4252      	negs	r2, r2
   138ca:	1aa4      	subs	r4, r4, r2
   138cc:	46d8      	mov	r8, fp
   138ce:	e5f1      	b.n	134b4 <__aeabi_dadd+0x108>
   138d0:	0018      	movs	r0, r3
   138d2:	4310      	orrs	r0, r2
   138d4:	d100      	bne.n	138d8 <__aeabi_dadd+0x52c>
   138d6:	e763      	b.n	137a0 <__aeabi_dadd+0x3f4>
   138d8:	08f8      	lsrs	r0, r7, #3
   138da:	0767      	lsls	r7, r4, #29
   138dc:	4307      	orrs	r7, r0
   138de:	2080      	movs	r0, #128	; 0x80
   138e0:	08e4      	lsrs	r4, r4, #3
   138e2:	0300      	lsls	r0, r0, #12
   138e4:	4204      	tst	r4, r0
   138e6:	d008      	beq.n	138fa <__aeabi_dadd+0x54e>
   138e8:	08dd      	lsrs	r5, r3, #3
   138ea:	4205      	tst	r5, r0
   138ec:	d105      	bne.n	138fa <__aeabi_dadd+0x54e>
   138ee:	08d2      	lsrs	r2, r2, #3
   138f0:	0759      	lsls	r1, r3, #29
   138f2:	4311      	orrs	r1, r2
   138f4:	000f      	movs	r7, r1
   138f6:	002c      	movs	r4, r5
   138f8:	46d8      	mov	r8, fp
   138fa:	0f7b      	lsrs	r3, r7, #29
   138fc:	00e4      	lsls	r4, r4, #3
   138fe:	431c      	orrs	r4, r3
   13900:	00ff      	lsls	r7, r7, #3
   13902:	4e30      	ldr	r6, [pc, #192]	; (139c4 <__aeabi_dadd+0x618>)
   13904:	e5d6      	b.n	134b4 <__aeabi_dadd+0x108>
   13906:	000c      	movs	r4, r1
   13908:	0017      	movs	r7, r2
   1390a:	0006      	movs	r6, r0
   1390c:	e5d2      	b.n	134b4 <__aeabi_dadd+0x108>
   1390e:	2b00      	cmp	r3, #0
   13910:	d038      	beq.n	13984 <__aeabi_dadd+0x5d8>
   13912:	000b      	movs	r3, r1
   13914:	4313      	orrs	r3, r2
   13916:	d100      	bne.n	1391a <__aeabi_dadd+0x56e>
   13918:	e742      	b.n	137a0 <__aeabi_dadd+0x3f4>
   1391a:	08f8      	lsrs	r0, r7, #3
   1391c:	0767      	lsls	r7, r4, #29
   1391e:	4307      	orrs	r7, r0
   13920:	2080      	movs	r0, #128	; 0x80
   13922:	08e4      	lsrs	r4, r4, #3
   13924:	0300      	lsls	r0, r0, #12
   13926:	4204      	tst	r4, r0
   13928:	d0e7      	beq.n	138fa <__aeabi_dadd+0x54e>
   1392a:	08cb      	lsrs	r3, r1, #3
   1392c:	4203      	tst	r3, r0
   1392e:	d1e4      	bne.n	138fa <__aeabi_dadd+0x54e>
   13930:	08d2      	lsrs	r2, r2, #3
   13932:	0749      	lsls	r1, r1, #29
   13934:	4311      	orrs	r1, r2
   13936:	000f      	movs	r7, r1
   13938:	001c      	movs	r4, r3
   1393a:	e7de      	b.n	138fa <__aeabi_dadd+0x54e>
   1393c:	2700      	movs	r7, #0
   1393e:	2400      	movs	r4, #0
   13940:	e5d5      	b.n	134ee <__aeabi_dadd+0x142>
   13942:	2100      	movs	r1, #0
   13944:	e76b      	b.n	1381e <__aeabi_dadd+0x472>
   13946:	2500      	movs	r5, #0
   13948:	2700      	movs	r7, #0
   1394a:	e5f3      	b.n	13534 <__aeabi_dadd+0x188>
   1394c:	464e      	mov	r6, r9
   1394e:	0025      	movs	r5, r4
   13950:	3e20      	subs	r6, #32
   13952:	40f5      	lsrs	r5, r6
   13954:	464b      	mov	r3, r9
   13956:	002e      	movs	r6, r5
   13958:	2b20      	cmp	r3, #32
   1395a:	d02d      	beq.n	139b8 <__aeabi_dadd+0x60c>
   1395c:	2540      	movs	r5, #64	; 0x40
   1395e:	1aed      	subs	r5, r5, r3
   13960:	40ac      	lsls	r4, r5
   13962:	4327      	orrs	r7, r4
   13964:	1e7c      	subs	r4, r7, #1
   13966:	41a7      	sbcs	r7, r4
   13968:	2400      	movs	r4, #0
   1396a:	4337      	orrs	r7, r6
   1396c:	e6c9      	b.n	13702 <__aeabi_dadd+0x356>
   1396e:	2480      	movs	r4, #128	; 0x80
   13970:	2500      	movs	r5, #0
   13972:	0324      	lsls	r4, r4, #12
   13974:	4e13      	ldr	r6, [pc, #76]	; (139c4 <__aeabi_dadd+0x618>)
   13976:	2700      	movs	r7, #0
   13978:	e5dc      	b.n	13534 <__aeabi_dadd+0x188>
   1397a:	4327      	orrs	r7, r4
   1397c:	1e7c      	subs	r4, r7, #1
   1397e:	41a7      	sbcs	r7, r4
   13980:	2400      	movs	r4, #0
   13982:	e779      	b.n	13878 <__aeabi_dadd+0x4cc>
   13984:	000c      	movs	r4, r1
   13986:	0017      	movs	r7, r2
   13988:	4e0e      	ldr	r6, [pc, #56]	; (139c4 <__aeabi_dadd+0x618>)
   1398a:	e593      	b.n	134b4 <__aeabi_dadd+0x108>
   1398c:	000c      	movs	r4, r1
   1398e:	0017      	movs	r7, r2
   13990:	e590      	b.n	134b4 <__aeabi_dadd+0x108>
   13992:	4656      	mov	r6, sl
   13994:	0023      	movs	r3, r4
   13996:	3e20      	subs	r6, #32
   13998:	40f3      	lsrs	r3, r6
   1399a:	4699      	mov	r9, r3
   1399c:	4653      	mov	r3, sl
   1399e:	2b20      	cmp	r3, #32
   139a0:	d00e      	beq.n	139c0 <__aeabi_dadd+0x614>
   139a2:	2340      	movs	r3, #64	; 0x40
   139a4:	4656      	mov	r6, sl
   139a6:	1b9b      	subs	r3, r3, r6
   139a8:	409c      	lsls	r4, r3
   139aa:	4327      	orrs	r7, r4
   139ac:	1e7c      	subs	r4, r7, #1
   139ae:	41a7      	sbcs	r7, r4
   139b0:	464b      	mov	r3, r9
   139b2:	2400      	movs	r4, #0
   139b4:	431f      	orrs	r7, r3
   139b6:	e75f      	b.n	13878 <__aeabi_dadd+0x4cc>
   139b8:	2400      	movs	r4, #0
   139ba:	e7d2      	b.n	13962 <__aeabi_dadd+0x5b6>
   139bc:	0017      	movs	r7, r2
   139be:	e5b2      	b.n	13526 <__aeabi_dadd+0x17a>
   139c0:	2400      	movs	r4, #0
   139c2:	e7f2      	b.n	139aa <__aeabi_dadd+0x5fe>
   139c4:	000007ff 	.word	0x000007ff
   139c8:	ff7fffff 	.word	0xff7fffff

000139cc <__aeabi_ddiv>:
   139cc:	b5f0      	push	{r4, r5, r6, r7, lr}
   139ce:	4657      	mov	r7, sl
   139d0:	4645      	mov	r5, r8
   139d2:	46de      	mov	lr, fp
   139d4:	464e      	mov	r6, r9
   139d6:	b5e0      	push	{r5, r6, r7, lr}
   139d8:	004c      	lsls	r4, r1, #1
   139da:	030e      	lsls	r6, r1, #12
   139dc:	b087      	sub	sp, #28
   139de:	4683      	mov	fp, r0
   139e0:	4692      	mov	sl, r2
   139e2:	001d      	movs	r5, r3
   139e4:	4680      	mov	r8, r0
   139e6:	0b36      	lsrs	r6, r6, #12
   139e8:	0d64      	lsrs	r4, r4, #21
   139ea:	0fcf      	lsrs	r7, r1, #31
   139ec:	2c00      	cmp	r4, #0
   139ee:	d04f      	beq.n	13a90 <__aeabi_ddiv+0xc4>
   139f0:	4b6f      	ldr	r3, [pc, #444]	; (13bb0 <__aeabi_ddiv+0x1e4>)
   139f2:	429c      	cmp	r4, r3
   139f4:	d035      	beq.n	13a62 <__aeabi_ddiv+0x96>
   139f6:	2380      	movs	r3, #128	; 0x80
   139f8:	0f42      	lsrs	r2, r0, #29
   139fa:	041b      	lsls	r3, r3, #16
   139fc:	00f6      	lsls	r6, r6, #3
   139fe:	4313      	orrs	r3, r2
   13a00:	4333      	orrs	r3, r6
   13a02:	4699      	mov	r9, r3
   13a04:	00c3      	lsls	r3, r0, #3
   13a06:	4698      	mov	r8, r3
   13a08:	4b6a      	ldr	r3, [pc, #424]	; (13bb4 <__aeabi_ddiv+0x1e8>)
   13a0a:	2600      	movs	r6, #0
   13a0c:	469c      	mov	ip, r3
   13a0e:	2300      	movs	r3, #0
   13a10:	4464      	add	r4, ip
   13a12:	9303      	str	r3, [sp, #12]
   13a14:	032b      	lsls	r3, r5, #12
   13a16:	0b1b      	lsrs	r3, r3, #12
   13a18:	469b      	mov	fp, r3
   13a1a:	006b      	lsls	r3, r5, #1
   13a1c:	0fed      	lsrs	r5, r5, #31
   13a1e:	4650      	mov	r0, sl
   13a20:	0d5b      	lsrs	r3, r3, #21
   13a22:	9501      	str	r5, [sp, #4]
   13a24:	d05e      	beq.n	13ae4 <__aeabi_ddiv+0x118>
   13a26:	4a62      	ldr	r2, [pc, #392]	; (13bb0 <__aeabi_ddiv+0x1e4>)
   13a28:	4293      	cmp	r3, r2
   13a2a:	d053      	beq.n	13ad4 <__aeabi_ddiv+0x108>
   13a2c:	465a      	mov	r2, fp
   13a2e:	00d1      	lsls	r1, r2, #3
   13a30:	2280      	movs	r2, #128	; 0x80
   13a32:	0f40      	lsrs	r0, r0, #29
   13a34:	0412      	lsls	r2, r2, #16
   13a36:	4302      	orrs	r2, r0
   13a38:	430a      	orrs	r2, r1
   13a3a:	4693      	mov	fp, r2
   13a3c:	4652      	mov	r2, sl
   13a3e:	00d1      	lsls	r1, r2, #3
   13a40:	4a5c      	ldr	r2, [pc, #368]	; (13bb4 <__aeabi_ddiv+0x1e8>)
   13a42:	4694      	mov	ip, r2
   13a44:	2200      	movs	r2, #0
   13a46:	4463      	add	r3, ip
   13a48:	0038      	movs	r0, r7
   13a4a:	4068      	eors	r0, r5
   13a4c:	4684      	mov	ip, r0
   13a4e:	9002      	str	r0, [sp, #8]
   13a50:	1ae4      	subs	r4, r4, r3
   13a52:	4316      	orrs	r6, r2
   13a54:	2e0f      	cmp	r6, #15
   13a56:	d900      	bls.n	13a5a <__aeabi_ddiv+0x8e>
   13a58:	e0b4      	b.n	13bc4 <__aeabi_ddiv+0x1f8>
   13a5a:	4b57      	ldr	r3, [pc, #348]	; (13bb8 <__aeabi_ddiv+0x1ec>)
   13a5c:	00b6      	lsls	r6, r6, #2
   13a5e:	599b      	ldr	r3, [r3, r6]
   13a60:	469f      	mov	pc, r3
   13a62:	0003      	movs	r3, r0
   13a64:	4333      	orrs	r3, r6
   13a66:	4699      	mov	r9, r3
   13a68:	d16c      	bne.n	13b44 <__aeabi_ddiv+0x178>
   13a6a:	2300      	movs	r3, #0
   13a6c:	4698      	mov	r8, r3
   13a6e:	3302      	adds	r3, #2
   13a70:	2608      	movs	r6, #8
   13a72:	9303      	str	r3, [sp, #12]
   13a74:	e7ce      	b.n	13a14 <__aeabi_ddiv+0x48>
   13a76:	46cb      	mov	fp, r9
   13a78:	4641      	mov	r1, r8
   13a7a:	9a03      	ldr	r2, [sp, #12]
   13a7c:	9701      	str	r7, [sp, #4]
   13a7e:	2a02      	cmp	r2, #2
   13a80:	d165      	bne.n	13b4e <__aeabi_ddiv+0x182>
   13a82:	9b01      	ldr	r3, [sp, #4]
   13a84:	4c4a      	ldr	r4, [pc, #296]	; (13bb0 <__aeabi_ddiv+0x1e4>)
   13a86:	469c      	mov	ip, r3
   13a88:	2300      	movs	r3, #0
   13a8a:	2200      	movs	r2, #0
   13a8c:	4698      	mov	r8, r3
   13a8e:	e06b      	b.n	13b68 <__aeabi_ddiv+0x19c>
   13a90:	0003      	movs	r3, r0
   13a92:	4333      	orrs	r3, r6
   13a94:	4699      	mov	r9, r3
   13a96:	d04e      	beq.n	13b36 <__aeabi_ddiv+0x16a>
   13a98:	2e00      	cmp	r6, #0
   13a9a:	d100      	bne.n	13a9e <__aeabi_ddiv+0xd2>
   13a9c:	e1bc      	b.n	13e18 <__aeabi_ddiv+0x44c>
   13a9e:	0030      	movs	r0, r6
   13aa0:	f001 f8ca 	bl	14c38 <__clzsi2>
   13aa4:	0003      	movs	r3, r0
   13aa6:	3b0b      	subs	r3, #11
   13aa8:	2b1c      	cmp	r3, #28
   13aaa:	dd00      	ble.n	13aae <__aeabi_ddiv+0xe2>
   13aac:	e1ac      	b.n	13e08 <__aeabi_ddiv+0x43c>
   13aae:	221d      	movs	r2, #29
   13ab0:	1ad3      	subs	r3, r2, r3
   13ab2:	465a      	mov	r2, fp
   13ab4:	0001      	movs	r1, r0
   13ab6:	40da      	lsrs	r2, r3
   13ab8:	3908      	subs	r1, #8
   13aba:	408e      	lsls	r6, r1
   13abc:	0013      	movs	r3, r2
   13abe:	4333      	orrs	r3, r6
   13ac0:	4699      	mov	r9, r3
   13ac2:	465b      	mov	r3, fp
   13ac4:	408b      	lsls	r3, r1
   13ac6:	4698      	mov	r8, r3
   13ac8:	2300      	movs	r3, #0
   13aca:	4c3c      	ldr	r4, [pc, #240]	; (13bbc <__aeabi_ddiv+0x1f0>)
   13acc:	2600      	movs	r6, #0
   13ace:	1a24      	subs	r4, r4, r0
   13ad0:	9303      	str	r3, [sp, #12]
   13ad2:	e79f      	b.n	13a14 <__aeabi_ddiv+0x48>
   13ad4:	4651      	mov	r1, sl
   13ad6:	465a      	mov	r2, fp
   13ad8:	4311      	orrs	r1, r2
   13ada:	d129      	bne.n	13b30 <__aeabi_ddiv+0x164>
   13adc:	2200      	movs	r2, #0
   13ade:	4693      	mov	fp, r2
   13ae0:	3202      	adds	r2, #2
   13ae2:	e7b1      	b.n	13a48 <__aeabi_ddiv+0x7c>
   13ae4:	4659      	mov	r1, fp
   13ae6:	4301      	orrs	r1, r0
   13ae8:	d01e      	beq.n	13b28 <__aeabi_ddiv+0x15c>
   13aea:	465b      	mov	r3, fp
   13aec:	2b00      	cmp	r3, #0
   13aee:	d100      	bne.n	13af2 <__aeabi_ddiv+0x126>
   13af0:	e19e      	b.n	13e30 <__aeabi_ddiv+0x464>
   13af2:	4658      	mov	r0, fp
   13af4:	f001 f8a0 	bl	14c38 <__clzsi2>
   13af8:	0003      	movs	r3, r0
   13afa:	3b0b      	subs	r3, #11
   13afc:	2b1c      	cmp	r3, #28
   13afe:	dd00      	ble.n	13b02 <__aeabi_ddiv+0x136>
   13b00:	e18f      	b.n	13e22 <__aeabi_ddiv+0x456>
   13b02:	0002      	movs	r2, r0
   13b04:	4659      	mov	r1, fp
   13b06:	3a08      	subs	r2, #8
   13b08:	4091      	lsls	r1, r2
   13b0a:	468b      	mov	fp, r1
   13b0c:	211d      	movs	r1, #29
   13b0e:	1acb      	subs	r3, r1, r3
   13b10:	4651      	mov	r1, sl
   13b12:	40d9      	lsrs	r1, r3
   13b14:	000b      	movs	r3, r1
   13b16:	4659      	mov	r1, fp
   13b18:	430b      	orrs	r3, r1
   13b1a:	4651      	mov	r1, sl
   13b1c:	469b      	mov	fp, r3
   13b1e:	4091      	lsls	r1, r2
   13b20:	4b26      	ldr	r3, [pc, #152]	; (13bbc <__aeabi_ddiv+0x1f0>)
   13b22:	2200      	movs	r2, #0
   13b24:	1a1b      	subs	r3, r3, r0
   13b26:	e78f      	b.n	13a48 <__aeabi_ddiv+0x7c>
   13b28:	2300      	movs	r3, #0
   13b2a:	2201      	movs	r2, #1
   13b2c:	469b      	mov	fp, r3
   13b2e:	e78b      	b.n	13a48 <__aeabi_ddiv+0x7c>
   13b30:	4651      	mov	r1, sl
   13b32:	2203      	movs	r2, #3
   13b34:	e788      	b.n	13a48 <__aeabi_ddiv+0x7c>
   13b36:	2300      	movs	r3, #0
   13b38:	4698      	mov	r8, r3
   13b3a:	3301      	adds	r3, #1
   13b3c:	2604      	movs	r6, #4
   13b3e:	2400      	movs	r4, #0
   13b40:	9303      	str	r3, [sp, #12]
   13b42:	e767      	b.n	13a14 <__aeabi_ddiv+0x48>
   13b44:	2303      	movs	r3, #3
   13b46:	46b1      	mov	r9, r6
   13b48:	9303      	str	r3, [sp, #12]
   13b4a:	260c      	movs	r6, #12
   13b4c:	e762      	b.n	13a14 <__aeabi_ddiv+0x48>
   13b4e:	2a03      	cmp	r2, #3
   13b50:	d100      	bne.n	13b54 <__aeabi_ddiv+0x188>
   13b52:	e25c      	b.n	1400e <__aeabi_ddiv+0x642>
   13b54:	9b01      	ldr	r3, [sp, #4]
   13b56:	2a01      	cmp	r2, #1
   13b58:	d000      	beq.n	13b5c <__aeabi_ddiv+0x190>
   13b5a:	e1e4      	b.n	13f26 <__aeabi_ddiv+0x55a>
   13b5c:	4013      	ands	r3, r2
   13b5e:	469c      	mov	ip, r3
   13b60:	2300      	movs	r3, #0
   13b62:	2400      	movs	r4, #0
   13b64:	2200      	movs	r2, #0
   13b66:	4698      	mov	r8, r3
   13b68:	2100      	movs	r1, #0
   13b6a:	0312      	lsls	r2, r2, #12
   13b6c:	0b13      	lsrs	r3, r2, #12
   13b6e:	0d0a      	lsrs	r2, r1, #20
   13b70:	0512      	lsls	r2, r2, #20
   13b72:	431a      	orrs	r2, r3
   13b74:	0523      	lsls	r3, r4, #20
   13b76:	4c12      	ldr	r4, [pc, #72]	; (13bc0 <__aeabi_ddiv+0x1f4>)
   13b78:	4640      	mov	r0, r8
   13b7a:	4022      	ands	r2, r4
   13b7c:	4313      	orrs	r3, r2
   13b7e:	4662      	mov	r2, ip
   13b80:	005b      	lsls	r3, r3, #1
   13b82:	07d2      	lsls	r2, r2, #31
   13b84:	085b      	lsrs	r3, r3, #1
   13b86:	4313      	orrs	r3, r2
   13b88:	0019      	movs	r1, r3
   13b8a:	b007      	add	sp, #28
   13b8c:	bc3c      	pop	{r2, r3, r4, r5}
   13b8e:	4690      	mov	r8, r2
   13b90:	4699      	mov	r9, r3
   13b92:	46a2      	mov	sl, r4
   13b94:	46ab      	mov	fp, r5
   13b96:	bdf0      	pop	{r4, r5, r6, r7, pc}
   13b98:	2300      	movs	r3, #0
   13b9a:	2280      	movs	r2, #128	; 0x80
   13b9c:	469c      	mov	ip, r3
   13b9e:	0312      	lsls	r2, r2, #12
   13ba0:	4698      	mov	r8, r3
   13ba2:	4c03      	ldr	r4, [pc, #12]	; (13bb0 <__aeabi_ddiv+0x1e4>)
   13ba4:	e7e0      	b.n	13b68 <__aeabi_ddiv+0x19c>
   13ba6:	2300      	movs	r3, #0
   13ba8:	4c01      	ldr	r4, [pc, #4]	; (13bb0 <__aeabi_ddiv+0x1e4>)
   13baa:	2200      	movs	r2, #0
   13bac:	4698      	mov	r8, r3
   13bae:	e7db      	b.n	13b68 <__aeabi_ddiv+0x19c>
   13bb0:	000007ff 	.word	0x000007ff
   13bb4:	fffffc01 	.word	0xfffffc01
   13bb8:	000167ec 	.word	0x000167ec
   13bbc:	fffffc0d 	.word	0xfffffc0d
   13bc0:	800fffff 	.word	0x800fffff
   13bc4:	45d9      	cmp	r9, fp
   13bc6:	d900      	bls.n	13bca <__aeabi_ddiv+0x1fe>
   13bc8:	e139      	b.n	13e3e <__aeabi_ddiv+0x472>
   13bca:	d100      	bne.n	13bce <__aeabi_ddiv+0x202>
   13bcc:	e134      	b.n	13e38 <__aeabi_ddiv+0x46c>
   13bce:	2300      	movs	r3, #0
   13bd0:	4646      	mov	r6, r8
   13bd2:	464d      	mov	r5, r9
   13bd4:	469a      	mov	sl, r3
   13bd6:	3c01      	subs	r4, #1
   13bd8:	465b      	mov	r3, fp
   13bda:	0e0a      	lsrs	r2, r1, #24
   13bdc:	021b      	lsls	r3, r3, #8
   13bde:	431a      	orrs	r2, r3
   13be0:	020b      	lsls	r3, r1, #8
   13be2:	0c17      	lsrs	r7, r2, #16
   13be4:	9303      	str	r3, [sp, #12]
   13be6:	0413      	lsls	r3, r2, #16
   13be8:	0c1b      	lsrs	r3, r3, #16
   13bea:	0039      	movs	r1, r7
   13bec:	0028      	movs	r0, r5
   13bee:	4690      	mov	r8, r2
   13bf0:	9301      	str	r3, [sp, #4]
   13bf2:	f7fe fc65 	bl	124c0 <__udivsi3>
   13bf6:	0002      	movs	r2, r0
   13bf8:	9b01      	ldr	r3, [sp, #4]
   13bfa:	4683      	mov	fp, r0
   13bfc:	435a      	muls	r2, r3
   13bfe:	0028      	movs	r0, r5
   13c00:	0039      	movs	r1, r7
   13c02:	4691      	mov	r9, r2
   13c04:	f7fe fce2 	bl	125cc <__aeabi_uidivmod>
   13c08:	0c35      	lsrs	r5, r6, #16
   13c0a:	0409      	lsls	r1, r1, #16
   13c0c:	430d      	orrs	r5, r1
   13c0e:	45a9      	cmp	r9, r5
   13c10:	d90d      	bls.n	13c2e <__aeabi_ddiv+0x262>
   13c12:	465b      	mov	r3, fp
   13c14:	4445      	add	r5, r8
   13c16:	3b01      	subs	r3, #1
   13c18:	45a8      	cmp	r8, r5
   13c1a:	d900      	bls.n	13c1e <__aeabi_ddiv+0x252>
   13c1c:	e13a      	b.n	13e94 <__aeabi_ddiv+0x4c8>
   13c1e:	45a9      	cmp	r9, r5
   13c20:	d800      	bhi.n	13c24 <__aeabi_ddiv+0x258>
   13c22:	e137      	b.n	13e94 <__aeabi_ddiv+0x4c8>
   13c24:	2302      	movs	r3, #2
   13c26:	425b      	negs	r3, r3
   13c28:	469c      	mov	ip, r3
   13c2a:	4445      	add	r5, r8
   13c2c:	44e3      	add	fp, ip
   13c2e:	464b      	mov	r3, r9
   13c30:	1aeb      	subs	r3, r5, r3
   13c32:	0039      	movs	r1, r7
   13c34:	0018      	movs	r0, r3
   13c36:	9304      	str	r3, [sp, #16]
   13c38:	f7fe fc42 	bl	124c0 <__udivsi3>
   13c3c:	9b01      	ldr	r3, [sp, #4]
   13c3e:	0005      	movs	r5, r0
   13c40:	4343      	muls	r3, r0
   13c42:	0039      	movs	r1, r7
   13c44:	9804      	ldr	r0, [sp, #16]
   13c46:	4699      	mov	r9, r3
   13c48:	f7fe fcc0 	bl	125cc <__aeabi_uidivmod>
   13c4c:	0433      	lsls	r3, r6, #16
   13c4e:	0409      	lsls	r1, r1, #16
   13c50:	0c1b      	lsrs	r3, r3, #16
   13c52:	430b      	orrs	r3, r1
   13c54:	4599      	cmp	r9, r3
   13c56:	d909      	bls.n	13c6c <__aeabi_ddiv+0x2a0>
   13c58:	4443      	add	r3, r8
   13c5a:	1e6a      	subs	r2, r5, #1
   13c5c:	4598      	cmp	r8, r3
   13c5e:	d900      	bls.n	13c62 <__aeabi_ddiv+0x296>
   13c60:	e11a      	b.n	13e98 <__aeabi_ddiv+0x4cc>
   13c62:	4599      	cmp	r9, r3
   13c64:	d800      	bhi.n	13c68 <__aeabi_ddiv+0x29c>
   13c66:	e117      	b.n	13e98 <__aeabi_ddiv+0x4cc>
   13c68:	3d02      	subs	r5, #2
   13c6a:	4443      	add	r3, r8
   13c6c:	464a      	mov	r2, r9
   13c6e:	1a9b      	subs	r3, r3, r2
   13c70:	465a      	mov	r2, fp
   13c72:	0412      	lsls	r2, r2, #16
   13c74:	432a      	orrs	r2, r5
   13c76:	9903      	ldr	r1, [sp, #12]
   13c78:	4693      	mov	fp, r2
   13c7a:	0c10      	lsrs	r0, r2, #16
   13c7c:	0c0a      	lsrs	r2, r1, #16
   13c7e:	4691      	mov	r9, r2
   13c80:	0409      	lsls	r1, r1, #16
   13c82:	465a      	mov	r2, fp
   13c84:	0c09      	lsrs	r1, r1, #16
   13c86:	464e      	mov	r6, r9
   13c88:	000d      	movs	r5, r1
   13c8a:	0412      	lsls	r2, r2, #16
   13c8c:	0c12      	lsrs	r2, r2, #16
   13c8e:	4345      	muls	r5, r0
   13c90:	9105      	str	r1, [sp, #20]
   13c92:	4351      	muls	r1, r2
   13c94:	4372      	muls	r2, r6
   13c96:	4370      	muls	r0, r6
   13c98:	1952      	adds	r2, r2, r5
   13c9a:	0c0e      	lsrs	r6, r1, #16
   13c9c:	18b2      	adds	r2, r6, r2
   13c9e:	4295      	cmp	r5, r2
   13ca0:	d903      	bls.n	13caa <__aeabi_ddiv+0x2de>
   13ca2:	2580      	movs	r5, #128	; 0x80
   13ca4:	026d      	lsls	r5, r5, #9
   13ca6:	46ac      	mov	ip, r5
   13ca8:	4460      	add	r0, ip
   13caa:	0c15      	lsrs	r5, r2, #16
   13cac:	0409      	lsls	r1, r1, #16
   13cae:	0412      	lsls	r2, r2, #16
   13cb0:	0c09      	lsrs	r1, r1, #16
   13cb2:	1828      	adds	r0, r5, r0
   13cb4:	1852      	adds	r2, r2, r1
   13cb6:	4283      	cmp	r3, r0
   13cb8:	d200      	bcs.n	13cbc <__aeabi_ddiv+0x2f0>
   13cba:	e0ce      	b.n	13e5a <__aeabi_ddiv+0x48e>
   13cbc:	d100      	bne.n	13cc0 <__aeabi_ddiv+0x2f4>
   13cbe:	e0c8      	b.n	13e52 <__aeabi_ddiv+0x486>
   13cc0:	1a1d      	subs	r5, r3, r0
   13cc2:	4653      	mov	r3, sl
   13cc4:	1a9e      	subs	r6, r3, r2
   13cc6:	45b2      	cmp	sl, r6
   13cc8:	4192      	sbcs	r2, r2
   13cca:	4252      	negs	r2, r2
   13ccc:	1aab      	subs	r3, r5, r2
   13cce:	469a      	mov	sl, r3
   13cd0:	4598      	cmp	r8, r3
   13cd2:	d100      	bne.n	13cd6 <__aeabi_ddiv+0x30a>
   13cd4:	e117      	b.n	13f06 <__aeabi_ddiv+0x53a>
   13cd6:	0039      	movs	r1, r7
   13cd8:	0018      	movs	r0, r3
   13cda:	f7fe fbf1 	bl	124c0 <__udivsi3>
   13cde:	9b01      	ldr	r3, [sp, #4]
   13ce0:	0005      	movs	r5, r0
   13ce2:	4343      	muls	r3, r0
   13ce4:	0039      	movs	r1, r7
   13ce6:	4650      	mov	r0, sl
   13ce8:	9304      	str	r3, [sp, #16]
   13cea:	f7fe fc6f 	bl	125cc <__aeabi_uidivmod>
   13cee:	9804      	ldr	r0, [sp, #16]
   13cf0:	040b      	lsls	r3, r1, #16
   13cf2:	0c31      	lsrs	r1, r6, #16
   13cf4:	4319      	orrs	r1, r3
   13cf6:	4288      	cmp	r0, r1
   13cf8:	d909      	bls.n	13d0e <__aeabi_ddiv+0x342>
   13cfa:	4441      	add	r1, r8
   13cfc:	1e6b      	subs	r3, r5, #1
   13cfe:	4588      	cmp	r8, r1
   13d00:	d900      	bls.n	13d04 <__aeabi_ddiv+0x338>
   13d02:	e107      	b.n	13f14 <__aeabi_ddiv+0x548>
   13d04:	4288      	cmp	r0, r1
   13d06:	d800      	bhi.n	13d0a <__aeabi_ddiv+0x33e>
   13d08:	e104      	b.n	13f14 <__aeabi_ddiv+0x548>
   13d0a:	3d02      	subs	r5, #2
   13d0c:	4441      	add	r1, r8
   13d0e:	9b04      	ldr	r3, [sp, #16]
   13d10:	1acb      	subs	r3, r1, r3
   13d12:	0018      	movs	r0, r3
   13d14:	0039      	movs	r1, r7
   13d16:	9304      	str	r3, [sp, #16]
   13d18:	f7fe fbd2 	bl	124c0 <__udivsi3>
   13d1c:	9b01      	ldr	r3, [sp, #4]
   13d1e:	4682      	mov	sl, r0
   13d20:	4343      	muls	r3, r0
   13d22:	0039      	movs	r1, r7
   13d24:	9804      	ldr	r0, [sp, #16]
   13d26:	9301      	str	r3, [sp, #4]
   13d28:	f7fe fc50 	bl	125cc <__aeabi_uidivmod>
   13d2c:	9801      	ldr	r0, [sp, #4]
   13d2e:	040b      	lsls	r3, r1, #16
   13d30:	0431      	lsls	r1, r6, #16
   13d32:	0c09      	lsrs	r1, r1, #16
   13d34:	4319      	orrs	r1, r3
   13d36:	4288      	cmp	r0, r1
   13d38:	d90d      	bls.n	13d56 <__aeabi_ddiv+0x38a>
   13d3a:	4653      	mov	r3, sl
   13d3c:	4441      	add	r1, r8
   13d3e:	3b01      	subs	r3, #1
   13d40:	4588      	cmp	r8, r1
   13d42:	d900      	bls.n	13d46 <__aeabi_ddiv+0x37a>
   13d44:	e0e8      	b.n	13f18 <__aeabi_ddiv+0x54c>
   13d46:	4288      	cmp	r0, r1
   13d48:	d800      	bhi.n	13d4c <__aeabi_ddiv+0x380>
   13d4a:	e0e5      	b.n	13f18 <__aeabi_ddiv+0x54c>
   13d4c:	2302      	movs	r3, #2
   13d4e:	425b      	negs	r3, r3
   13d50:	469c      	mov	ip, r3
   13d52:	4441      	add	r1, r8
   13d54:	44e2      	add	sl, ip
   13d56:	9b01      	ldr	r3, [sp, #4]
   13d58:	042d      	lsls	r5, r5, #16
   13d5a:	1ace      	subs	r6, r1, r3
   13d5c:	4651      	mov	r1, sl
   13d5e:	4329      	orrs	r1, r5
   13d60:	9d05      	ldr	r5, [sp, #20]
   13d62:	464f      	mov	r7, r9
   13d64:	002a      	movs	r2, r5
   13d66:	040b      	lsls	r3, r1, #16
   13d68:	0c08      	lsrs	r0, r1, #16
   13d6a:	0c1b      	lsrs	r3, r3, #16
   13d6c:	435a      	muls	r2, r3
   13d6e:	4345      	muls	r5, r0
   13d70:	437b      	muls	r3, r7
   13d72:	4378      	muls	r0, r7
   13d74:	195b      	adds	r3, r3, r5
   13d76:	0c17      	lsrs	r7, r2, #16
   13d78:	18fb      	adds	r3, r7, r3
   13d7a:	429d      	cmp	r5, r3
   13d7c:	d903      	bls.n	13d86 <__aeabi_ddiv+0x3ba>
   13d7e:	2580      	movs	r5, #128	; 0x80
   13d80:	026d      	lsls	r5, r5, #9
   13d82:	46ac      	mov	ip, r5
   13d84:	4460      	add	r0, ip
   13d86:	0c1d      	lsrs	r5, r3, #16
   13d88:	0412      	lsls	r2, r2, #16
   13d8a:	041b      	lsls	r3, r3, #16
   13d8c:	0c12      	lsrs	r2, r2, #16
   13d8e:	1828      	adds	r0, r5, r0
   13d90:	189b      	adds	r3, r3, r2
   13d92:	4286      	cmp	r6, r0
   13d94:	d200      	bcs.n	13d98 <__aeabi_ddiv+0x3cc>
   13d96:	e093      	b.n	13ec0 <__aeabi_ddiv+0x4f4>
   13d98:	d100      	bne.n	13d9c <__aeabi_ddiv+0x3d0>
   13d9a:	e08e      	b.n	13eba <__aeabi_ddiv+0x4ee>
   13d9c:	2301      	movs	r3, #1
   13d9e:	4319      	orrs	r1, r3
   13da0:	4ba0      	ldr	r3, [pc, #640]	; (14024 <__aeabi_ddiv+0x658>)
   13da2:	18e3      	adds	r3, r4, r3
   13da4:	2b00      	cmp	r3, #0
   13da6:	dc00      	bgt.n	13daa <__aeabi_ddiv+0x3de>
   13da8:	e099      	b.n	13ede <__aeabi_ddiv+0x512>
   13daa:	074a      	lsls	r2, r1, #29
   13dac:	d000      	beq.n	13db0 <__aeabi_ddiv+0x3e4>
   13dae:	e09e      	b.n	13eee <__aeabi_ddiv+0x522>
   13db0:	465a      	mov	r2, fp
   13db2:	01d2      	lsls	r2, r2, #7
   13db4:	d506      	bpl.n	13dc4 <__aeabi_ddiv+0x3f8>
   13db6:	465a      	mov	r2, fp
   13db8:	4b9b      	ldr	r3, [pc, #620]	; (14028 <__aeabi_ddiv+0x65c>)
   13dba:	401a      	ands	r2, r3
   13dbc:	2380      	movs	r3, #128	; 0x80
   13dbe:	4693      	mov	fp, r2
   13dc0:	00db      	lsls	r3, r3, #3
   13dc2:	18e3      	adds	r3, r4, r3
   13dc4:	4a99      	ldr	r2, [pc, #612]	; (1402c <__aeabi_ddiv+0x660>)
   13dc6:	4293      	cmp	r3, r2
   13dc8:	dd68      	ble.n	13e9c <__aeabi_ddiv+0x4d0>
   13dca:	2301      	movs	r3, #1
   13dcc:	9a02      	ldr	r2, [sp, #8]
   13dce:	4c98      	ldr	r4, [pc, #608]	; (14030 <__aeabi_ddiv+0x664>)
   13dd0:	401a      	ands	r2, r3
   13dd2:	2300      	movs	r3, #0
   13dd4:	4694      	mov	ip, r2
   13dd6:	4698      	mov	r8, r3
   13dd8:	2200      	movs	r2, #0
   13dda:	e6c5      	b.n	13b68 <__aeabi_ddiv+0x19c>
   13ddc:	2280      	movs	r2, #128	; 0x80
   13dde:	464b      	mov	r3, r9
   13de0:	0312      	lsls	r2, r2, #12
   13de2:	4213      	tst	r3, r2
   13de4:	d00a      	beq.n	13dfc <__aeabi_ddiv+0x430>
   13de6:	465b      	mov	r3, fp
   13de8:	4213      	tst	r3, r2
   13dea:	d106      	bne.n	13dfa <__aeabi_ddiv+0x42e>
   13dec:	431a      	orrs	r2, r3
   13dee:	0312      	lsls	r2, r2, #12
   13df0:	0b12      	lsrs	r2, r2, #12
   13df2:	46ac      	mov	ip, r5
   13df4:	4688      	mov	r8, r1
   13df6:	4c8e      	ldr	r4, [pc, #568]	; (14030 <__aeabi_ddiv+0x664>)
   13df8:	e6b6      	b.n	13b68 <__aeabi_ddiv+0x19c>
   13dfa:	464b      	mov	r3, r9
   13dfc:	431a      	orrs	r2, r3
   13dfe:	0312      	lsls	r2, r2, #12
   13e00:	0b12      	lsrs	r2, r2, #12
   13e02:	46bc      	mov	ip, r7
   13e04:	4c8a      	ldr	r4, [pc, #552]	; (14030 <__aeabi_ddiv+0x664>)
   13e06:	e6af      	b.n	13b68 <__aeabi_ddiv+0x19c>
   13e08:	0003      	movs	r3, r0
   13e0a:	465a      	mov	r2, fp
   13e0c:	3b28      	subs	r3, #40	; 0x28
   13e0e:	409a      	lsls	r2, r3
   13e10:	2300      	movs	r3, #0
   13e12:	4691      	mov	r9, r2
   13e14:	4698      	mov	r8, r3
   13e16:	e657      	b.n	13ac8 <__aeabi_ddiv+0xfc>
   13e18:	4658      	mov	r0, fp
   13e1a:	f000 ff0d 	bl	14c38 <__clzsi2>
   13e1e:	3020      	adds	r0, #32
   13e20:	e640      	b.n	13aa4 <__aeabi_ddiv+0xd8>
   13e22:	0003      	movs	r3, r0
   13e24:	4652      	mov	r2, sl
   13e26:	3b28      	subs	r3, #40	; 0x28
   13e28:	409a      	lsls	r2, r3
   13e2a:	2100      	movs	r1, #0
   13e2c:	4693      	mov	fp, r2
   13e2e:	e677      	b.n	13b20 <__aeabi_ddiv+0x154>
   13e30:	f000 ff02 	bl	14c38 <__clzsi2>
   13e34:	3020      	adds	r0, #32
   13e36:	e65f      	b.n	13af8 <__aeabi_ddiv+0x12c>
   13e38:	4588      	cmp	r8, r1
   13e3a:	d200      	bcs.n	13e3e <__aeabi_ddiv+0x472>
   13e3c:	e6c7      	b.n	13bce <__aeabi_ddiv+0x202>
   13e3e:	464b      	mov	r3, r9
   13e40:	07de      	lsls	r6, r3, #31
   13e42:	085d      	lsrs	r5, r3, #1
   13e44:	4643      	mov	r3, r8
   13e46:	085b      	lsrs	r3, r3, #1
   13e48:	431e      	orrs	r6, r3
   13e4a:	4643      	mov	r3, r8
   13e4c:	07db      	lsls	r3, r3, #31
   13e4e:	469a      	mov	sl, r3
   13e50:	e6c2      	b.n	13bd8 <__aeabi_ddiv+0x20c>
   13e52:	2500      	movs	r5, #0
   13e54:	4592      	cmp	sl, r2
   13e56:	d300      	bcc.n	13e5a <__aeabi_ddiv+0x48e>
   13e58:	e733      	b.n	13cc2 <__aeabi_ddiv+0x2f6>
   13e5a:	9e03      	ldr	r6, [sp, #12]
   13e5c:	4659      	mov	r1, fp
   13e5e:	46b4      	mov	ip, r6
   13e60:	44e2      	add	sl, ip
   13e62:	45b2      	cmp	sl, r6
   13e64:	41ad      	sbcs	r5, r5
   13e66:	426d      	negs	r5, r5
   13e68:	4445      	add	r5, r8
   13e6a:	18eb      	adds	r3, r5, r3
   13e6c:	3901      	subs	r1, #1
   13e6e:	4598      	cmp	r8, r3
   13e70:	d207      	bcs.n	13e82 <__aeabi_ddiv+0x4b6>
   13e72:	4298      	cmp	r0, r3
   13e74:	d900      	bls.n	13e78 <__aeabi_ddiv+0x4ac>
   13e76:	e07f      	b.n	13f78 <__aeabi_ddiv+0x5ac>
   13e78:	d100      	bne.n	13e7c <__aeabi_ddiv+0x4b0>
   13e7a:	e0bc      	b.n	13ff6 <__aeabi_ddiv+0x62a>
   13e7c:	1a1d      	subs	r5, r3, r0
   13e7e:	468b      	mov	fp, r1
   13e80:	e71f      	b.n	13cc2 <__aeabi_ddiv+0x2f6>
   13e82:	4598      	cmp	r8, r3
   13e84:	d1fa      	bne.n	13e7c <__aeabi_ddiv+0x4b0>
   13e86:	9d03      	ldr	r5, [sp, #12]
   13e88:	4555      	cmp	r5, sl
   13e8a:	d9f2      	bls.n	13e72 <__aeabi_ddiv+0x4a6>
   13e8c:	4643      	mov	r3, r8
   13e8e:	468b      	mov	fp, r1
   13e90:	1a1d      	subs	r5, r3, r0
   13e92:	e716      	b.n	13cc2 <__aeabi_ddiv+0x2f6>
   13e94:	469b      	mov	fp, r3
   13e96:	e6ca      	b.n	13c2e <__aeabi_ddiv+0x262>
   13e98:	0015      	movs	r5, r2
   13e9a:	e6e7      	b.n	13c6c <__aeabi_ddiv+0x2a0>
   13e9c:	465a      	mov	r2, fp
   13e9e:	08c9      	lsrs	r1, r1, #3
   13ea0:	0752      	lsls	r2, r2, #29
   13ea2:	430a      	orrs	r2, r1
   13ea4:	055b      	lsls	r3, r3, #21
   13ea6:	4690      	mov	r8, r2
   13ea8:	0d5c      	lsrs	r4, r3, #21
   13eaa:	465a      	mov	r2, fp
   13eac:	2301      	movs	r3, #1
   13eae:	9902      	ldr	r1, [sp, #8]
   13eb0:	0252      	lsls	r2, r2, #9
   13eb2:	4019      	ands	r1, r3
   13eb4:	0b12      	lsrs	r2, r2, #12
   13eb6:	468c      	mov	ip, r1
   13eb8:	e656      	b.n	13b68 <__aeabi_ddiv+0x19c>
   13eba:	2b00      	cmp	r3, #0
   13ebc:	d100      	bne.n	13ec0 <__aeabi_ddiv+0x4f4>
   13ebe:	e76f      	b.n	13da0 <__aeabi_ddiv+0x3d4>
   13ec0:	4446      	add	r6, r8
   13ec2:	1e4a      	subs	r2, r1, #1
   13ec4:	45b0      	cmp	r8, r6
   13ec6:	d929      	bls.n	13f1c <__aeabi_ddiv+0x550>
   13ec8:	0011      	movs	r1, r2
   13eca:	4286      	cmp	r6, r0
   13ecc:	d000      	beq.n	13ed0 <__aeabi_ddiv+0x504>
   13ece:	e765      	b.n	13d9c <__aeabi_ddiv+0x3d0>
   13ed0:	9a03      	ldr	r2, [sp, #12]
   13ed2:	4293      	cmp	r3, r2
   13ed4:	d000      	beq.n	13ed8 <__aeabi_ddiv+0x50c>
   13ed6:	e761      	b.n	13d9c <__aeabi_ddiv+0x3d0>
   13ed8:	e762      	b.n	13da0 <__aeabi_ddiv+0x3d4>
   13eda:	2101      	movs	r1, #1
   13edc:	4249      	negs	r1, r1
   13ede:	2001      	movs	r0, #1
   13ee0:	1ac2      	subs	r2, r0, r3
   13ee2:	2a38      	cmp	r2, #56	; 0x38
   13ee4:	dd21      	ble.n	13f2a <__aeabi_ddiv+0x55e>
   13ee6:	9b02      	ldr	r3, [sp, #8]
   13ee8:	4003      	ands	r3, r0
   13eea:	469c      	mov	ip, r3
   13eec:	e638      	b.n	13b60 <__aeabi_ddiv+0x194>
   13eee:	220f      	movs	r2, #15
   13ef0:	400a      	ands	r2, r1
   13ef2:	2a04      	cmp	r2, #4
   13ef4:	d100      	bne.n	13ef8 <__aeabi_ddiv+0x52c>
   13ef6:	e75b      	b.n	13db0 <__aeabi_ddiv+0x3e4>
   13ef8:	000a      	movs	r2, r1
   13efa:	1d11      	adds	r1, r2, #4
   13efc:	4291      	cmp	r1, r2
   13efe:	4192      	sbcs	r2, r2
   13f00:	4252      	negs	r2, r2
   13f02:	4493      	add	fp, r2
   13f04:	e754      	b.n	13db0 <__aeabi_ddiv+0x3e4>
   13f06:	4b47      	ldr	r3, [pc, #284]	; (14024 <__aeabi_ddiv+0x658>)
   13f08:	18e3      	adds	r3, r4, r3
   13f0a:	2b00      	cmp	r3, #0
   13f0c:	dde5      	ble.n	13eda <__aeabi_ddiv+0x50e>
   13f0e:	2201      	movs	r2, #1
   13f10:	4252      	negs	r2, r2
   13f12:	e7f2      	b.n	13efa <__aeabi_ddiv+0x52e>
   13f14:	001d      	movs	r5, r3
   13f16:	e6fa      	b.n	13d0e <__aeabi_ddiv+0x342>
   13f18:	469a      	mov	sl, r3
   13f1a:	e71c      	b.n	13d56 <__aeabi_ddiv+0x38a>
   13f1c:	42b0      	cmp	r0, r6
   13f1e:	d839      	bhi.n	13f94 <__aeabi_ddiv+0x5c8>
   13f20:	d06e      	beq.n	14000 <__aeabi_ddiv+0x634>
   13f22:	0011      	movs	r1, r2
   13f24:	e73a      	b.n	13d9c <__aeabi_ddiv+0x3d0>
   13f26:	9302      	str	r3, [sp, #8]
   13f28:	e73a      	b.n	13da0 <__aeabi_ddiv+0x3d4>
   13f2a:	2a1f      	cmp	r2, #31
   13f2c:	dc3c      	bgt.n	13fa8 <__aeabi_ddiv+0x5dc>
   13f2e:	2320      	movs	r3, #32
   13f30:	1a9b      	subs	r3, r3, r2
   13f32:	000c      	movs	r4, r1
   13f34:	4658      	mov	r0, fp
   13f36:	4099      	lsls	r1, r3
   13f38:	4098      	lsls	r0, r3
   13f3a:	1e4b      	subs	r3, r1, #1
   13f3c:	4199      	sbcs	r1, r3
   13f3e:	465b      	mov	r3, fp
   13f40:	40d4      	lsrs	r4, r2
   13f42:	40d3      	lsrs	r3, r2
   13f44:	4320      	orrs	r0, r4
   13f46:	4308      	orrs	r0, r1
   13f48:	001a      	movs	r2, r3
   13f4a:	0743      	lsls	r3, r0, #29
   13f4c:	d009      	beq.n	13f62 <__aeabi_ddiv+0x596>
   13f4e:	230f      	movs	r3, #15
   13f50:	4003      	ands	r3, r0
   13f52:	2b04      	cmp	r3, #4
   13f54:	d005      	beq.n	13f62 <__aeabi_ddiv+0x596>
   13f56:	0001      	movs	r1, r0
   13f58:	1d08      	adds	r0, r1, #4
   13f5a:	4288      	cmp	r0, r1
   13f5c:	419b      	sbcs	r3, r3
   13f5e:	425b      	negs	r3, r3
   13f60:	18d2      	adds	r2, r2, r3
   13f62:	0213      	lsls	r3, r2, #8
   13f64:	d53a      	bpl.n	13fdc <__aeabi_ddiv+0x610>
   13f66:	2301      	movs	r3, #1
   13f68:	9a02      	ldr	r2, [sp, #8]
   13f6a:	2401      	movs	r4, #1
   13f6c:	401a      	ands	r2, r3
   13f6e:	2300      	movs	r3, #0
   13f70:	4694      	mov	ip, r2
   13f72:	4698      	mov	r8, r3
   13f74:	2200      	movs	r2, #0
   13f76:	e5f7      	b.n	13b68 <__aeabi_ddiv+0x19c>
   13f78:	2102      	movs	r1, #2
   13f7a:	4249      	negs	r1, r1
   13f7c:	468c      	mov	ip, r1
   13f7e:	9d03      	ldr	r5, [sp, #12]
   13f80:	44e3      	add	fp, ip
   13f82:	46ac      	mov	ip, r5
   13f84:	44e2      	add	sl, ip
   13f86:	45aa      	cmp	sl, r5
   13f88:	41ad      	sbcs	r5, r5
   13f8a:	426d      	negs	r5, r5
   13f8c:	4445      	add	r5, r8
   13f8e:	18ed      	adds	r5, r5, r3
   13f90:	1a2d      	subs	r5, r5, r0
   13f92:	e696      	b.n	13cc2 <__aeabi_ddiv+0x2f6>
   13f94:	1e8a      	subs	r2, r1, #2
   13f96:	9903      	ldr	r1, [sp, #12]
   13f98:	004d      	lsls	r5, r1, #1
   13f9a:	428d      	cmp	r5, r1
   13f9c:	4189      	sbcs	r1, r1
   13f9e:	4249      	negs	r1, r1
   13fa0:	4441      	add	r1, r8
   13fa2:	1876      	adds	r6, r6, r1
   13fa4:	9503      	str	r5, [sp, #12]
   13fa6:	e78f      	b.n	13ec8 <__aeabi_ddiv+0x4fc>
   13fa8:	201f      	movs	r0, #31
   13faa:	4240      	negs	r0, r0
   13fac:	1ac3      	subs	r3, r0, r3
   13fae:	4658      	mov	r0, fp
   13fb0:	40d8      	lsrs	r0, r3
   13fb2:	0003      	movs	r3, r0
   13fb4:	2a20      	cmp	r2, #32
   13fb6:	d028      	beq.n	1400a <__aeabi_ddiv+0x63e>
   13fb8:	2040      	movs	r0, #64	; 0x40
   13fba:	465d      	mov	r5, fp
   13fbc:	1a82      	subs	r2, r0, r2
   13fbe:	4095      	lsls	r5, r2
   13fc0:	4329      	orrs	r1, r5
   13fc2:	1e4a      	subs	r2, r1, #1
   13fc4:	4191      	sbcs	r1, r2
   13fc6:	4319      	orrs	r1, r3
   13fc8:	2307      	movs	r3, #7
   13fca:	2200      	movs	r2, #0
   13fcc:	400b      	ands	r3, r1
   13fce:	d009      	beq.n	13fe4 <__aeabi_ddiv+0x618>
   13fd0:	230f      	movs	r3, #15
   13fd2:	2200      	movs	r2, #0
   13fd4:	400b      	ands	r3, r1
   13fd6:	0008      	movs	r0, r1
   13fd8:	2b04      	cmp	r3, #4
   13fda:	d1bd      	bne.n	13f58 <__aeabi_ddiv+0x58c>
   13fdc:	0001      	movs	r1, r0
   13fde:	0753      	lsls	r3, r2, #29
   13fe0:	0252      	lsls	r2, r2, #9
   13fe2:	0b12      	lsrs	r2, r2, #12
   13fe4:	08c9      	lsrs	r1, r1, #3
   13fe6:	4319      	orrs	r1, r3
   13fe8:	2301      	movs	r3, #1
   13fea:	4688      	mov	r8, r1
   13fec:	9902      	ldr	r1, [sp, #8]
   13fee:	2400      	movs	r4, #0
   13ff0:	4019      	ands	r1, r3
   13ff2:	468c      	mov	ip, r1
   13ff4:	e5b8      	b.n	13b68 <__aeabi_ddiv+0x19c>
   13ff6:	4552      	cmp	r2, sl
   13ff8:	d8be      	bhi.n	13f78 <__aeabi_ddiv+0x5ac>
   13ffa:	468b      	mov	fp, r1
   13ffc:	2500      	movs	r5, #0
   13ffe:	e660      	b.n	13cc2 <__aeabi_ddiv+0x2f6>
   14000:	9d03      	ldr	r5, [sp, #12]
   14002:	429d      	cmp	r5, r3
   14004:	d3c6      	bcc.n	13f94 <__aeabi_ddiv+0x5c8>
   14006:	0011      	movs	r1, r2
   14008:	e762      	b.n	13ed0 <__aeabi_ddiv+0x504>
   1400a:	2500      	movs	r5, #0
   1400c:	e7d8      	b.n	13fc0 <__aeabi_ddiv+0x5f4>
   1400e:	2280      	movs	r2, #128	; 0x80
   14010:	465b      	mov	r3, fp
   14012:	0312      	lsls	r2, r2, #12
   14014:	431a      	orrs	r2, r3
   14016:	9b01      	ldr	r3, [sp, #4]
   14018:	0312      	lsls	r2, r2, #12
   1401a:	0b12      	lsrs	r2, r2, #12
   1401c:	469c      	mov	ip, r3
   1401e:	4688      	mov	r8, r1
   14020:	4c03      	ldr	r4, [pc, #12]	; (14030 <__aeabi_ddiv+0x664>)
   14022:	e5a1      	b.n	13b68 <__aeabi_ddiv+0x19c>
   14024:	000003ff 	.word	0x000003ff
   14028:	feffffff 	.word	0xfeffffff
   1402c:	000007fe 	.word	0x000007fe
   14030:	000007ff 	.word	0x000007ff

00014034 <__aeabi_dmul>:
   14034:	b5f0      	push	{r4, r5, r6, r7, lr}
   14036:	4657      	mov	r7, sl
   14038:	4645      	mov	r5, r8
   1403a:	46de      	mov	lr, fp
   1403c:	464e      	mov	r6, r9
   1403e:	b5e0      	push	{r5, r6, r7, lr}
   14040:	030c      	lsls	r4, r1, #12
   14042:	4698      	mov	r8, r3
   14044:	004e      	lsls	r6, r1, #1
   14046:	0b23      	lsrs	r3, r4, #12
   14048:	b087      	sub	sp, #28
   1404a:	0007      	movs	r7, r0
   1404c:	4692      	mov	sl, r2
   1404e:	469b      	mov	fp, r3
   14050:	0d76      	lsrs	r6, r6, #21
   14052:	0fcd      	lsrs	r5, r1, #31
   14054:	2e00      	cmp	r6, #0
   14056:	d06b      	beq.n	14130 <__aeabi_dmul+0xfc>
   14058:	4b6d      	ldr	r3, [pc, #436]	; (14210 <__aeabi_dmul+0x1dc>)
   1405a:	429e      	cmp	r6, r3
   1405c:	d035      	beq.n	140ca <__aeabi_dmul+0x96>
   1405e:	2480      	movs	r4, #128	; 0x80
   14060:	465b      	mov	r3, fp
   14062:	0f42      	lsrs	r2, r0, #29
   14064:	0424      	lsls	r4, r4, #16
   14066:	00db      	lsls	r3, r3, #3
   14068:	4314      	orrs	r4, r2
   1406a:	431c      	orrs	r4, r3
   1406c:	00c3      	lsls	r3, r0, #3
   1406e:	4699      	mov	r9, r3
   14070:	4b68      	ldr	r3, [pc, #416]	; (14214 <__aeabi_dmul+0x1e0>)
   14072:	46a3      	mov	fp, r4
   14074:	469c      	mov	ip, r3
   14076:	2300      	movs	r3, #0
   14078:	2700      	movs	r7, #0
   1407a:	4466      	add	r6, ip
   1407c:	9302      	str	r3, [sp, #8]
   1407e:	4643      	mov	r3, r8
   14080:	031c      	lsls	r4, r3, #12
   14082:	005a      	lsls	r2, r3, #1
   14084:	0fdb      	lsrs	r3, r3, #31
   14086:	4650      	mov	r0, sl
   14088:	0b24      	lsrs	r4, r4, #12
   1408a:	0d52      	lsrs	r2, r2, #21
   1408c:	4698      	mov	r8, r3
   1408e:	d100      	bne.n	14092 <__aeabi_dmul+0x5e>
   14090:	e076      	b.n	14180 <__aeabi_dmul+0x14c>
   14092:	4b5f      	ldr	r3, [pc, #380]	; (14210 <__aeabi_dmul+0x1dc>)
   14094:	429a      	cmp	r2, r3
   14096:	d06d      	beq.n	14174 <__aeabi_dmul+0x140>
   14098:	2380      	movs	r3, #128	; 0x80
   1409a:	0f41      	lsrs	r1, r0, #29
   1409c:	041b      	lsls	r3, r3, #16
   1409e:	430b      	orrs	r3, r1
   140a0:	495c      	ldr	r1, [pc, #368]	; (14214 <__aeabi_dmul+0x1e0>)
   140a2:	00e4      	lsls	r4, r4, #3
   140a4:	468c      	mov	ip, r1
   140a6:	431c      	orrs	r4, r3
   140a8:	00c3      	lsls	r3, r0, #3
   140aa:	2000      	movs	r0, #0
   140ac:	4462      	add	r2, ip
   140ae:	4641      	mov	r1, r8
   140b0:	18b6      	adds	r6, r6, r2
   140b2:	4069      	eors	r1, r5
   140b4:	1c72      	adds	r2, r6, #1
   140b6:	9101      	str	r1, [sp, #4]
   140b8:	4694      	mov	ip, r2
   140ba:	4307      	orrs	r7, r0
   140bc:	2f0f      	cmp	r7, #15
   140be:	d900      	bls.n	140c2 <__aeabi_dmul+0x8e>
   140c0:	e0b0      	b.n	14224 <__aeabi_dmul+0x1f0>
   140c2:	4a55      	ldr	r2, [pc, #340]	; (14218 <__aeabi_dmul+0x1e4>)
   140c4:	00bf      	lsls	r7, r7, #2
   140c6:	59d2      	ldr	r2, [r2, r7]
   140c8:	4697      	mov	pc, r2
   140ca:	465b      	mov	r3, fp
   140cc:	4303      	orrs	r3, r0
   140ce:	4699      	mov	r9, r3
   140d0:	d000      	beq.n	140d4 <__aeabi_dmul+0xa0>
   140d2:	e087      	b.n	141e4 <__aeabi_dmul+0x1b0>
   140d4:	2300      	movs	r3, #0
   140d6:	469b      	mov	fp, r3
   140d8:	3302      	adds	r3, #2
   140da:	2708      	movs	r7, #8
   140dc:	9302      	str	r3, [sp, #8]
   140de:	e7ce      	b.n	1407e <__aeabi_dmul+0x4a>
   140e0:	4642      	mov	r2, r8
   140e2:	9201      	str	r2, [sp, #4]
   140e4:	2802      	cmp	r0, #2
   140e6:	d067      	beq.n	141b8 <__aeabi_dmul+0x184>
   140e8:	2803      	cmp	r0, #3
   140ea:	d100      	bne.n	140ee <__aeabi_dmul+0xba>
   140ec:	e20e      	b.n	1450c <__aeabi_dmul+0x4d8>
   140ee:	2801      	cmp	r0, #1
   140f0:	d000      	beq.n	140f4 <__aeabi_dmul+0xc0>
   140f2:	e162      	b.n	143ba <__aeabi_dmul+0x386>
   140f4:	2300      	movs	r3, #0
   140f6:	2400      	movs	r4, #0
   140f8:	2200      	movs	r2, #0
   140fa:	4699      	mov	r9, r3
   140fc:	9901      	ldr	r1, [sp, #4]
   140fe:	4001      	ands	r1, r0
   14100:	b2cd      	uxtb	r5, r1
   14102:	2100      	movs	r1, #0
   14104:	0312      	lsls	r2, r2, #12
   14106:	0d0b      	lsrs	r3, r1, #20
   14108:	0b12      	lsrs	r2, r2, #12
   1410a:	051b      	lsls	r3, r3, #20
   1410c:	4313      	orrs	r3, r2
   1410e:	4a43      	ldr	r2, [pc, #268]	; (1421c <__aeabi_dmul+0x1e8>)
   14110:	0524      	lsls	r4, r4, #20
   14112:	4013      	ands	r3, r2
   14114:	431c      	orrs	r4, r3
   14116:	0064      	lsls	r4, r4, #1
   14118:	07ed      	lsls	r5, r5, #31
   1411a:	0864      	lsrs	r4, r4, #1
   1411c:	432c      	orrs	r4, r5
   1411e:	4648      	mov	r0, r9
   14120:	0021      	movs	r1, r4
   14122:	b007      	add	sp, #28
   14124:	bc3c      	pop	{r2, r3, r4, r5}
   14126:	4690      	mov	r8, r2
   14128:	4699      	mov	r9, r3
   1412a:	46a2      	mov	sl, r4
   1412c:	46ab      	mov	fp, r5
   1412e:	bdf0      	pop	{r4, r5, r6, r7, pc}
   14130:	4303      	orrs	r3, r0
   14132:	4699      	mov	r9, r3
   14134:	d04f      	beq.n	141d6 <__aeabi_dmul+0x1a2>
   14136:	465b      	mov	r3, fp
   14138:	2b00      	cmp	r3, #0
   1413a:	d100      	bne.n	1413e <__aeabi_dmul+0x10a>
   1413c:	e189      	b.n	14452 <__aeabi_dmul+0x41e>
   1413e:	4658      	mov	r0, fp
   14140:	f000 fd7a 	bl	14c38 <__clzsi2>
   14144:	0003      	movs	r3, r0
   14146:	3b0b      	subs	r3, #11
   14148:	2b1c      	cmp	r3, #28
   1414a:	dd00      	ble.n	1414e <__aeabi_dmul+0x11a>
   1414c:	e17a      	b.n	14444 <__aeabi_dmul+0x410>
   1414e:	221d      	movs	r2, #29
   14150:	1ad3      	subs	r3, r2, r3
   14152:	003a      	movs	r2, r7
   14154:	0001      	movs	r1, r0
   14156:	465c      	mov	r4, fp
   14158:	40da      	lsrs	r2, r3
   1415a:	3908      	subs	r1, #8
   1415c:	408c      	lsls	r4, r1
   1415e:	0013      	movs	r3, r2
   14160:	408f      	lsls	r7, r1
   14162:	4323      	orrs	r3, r4
   14164:	469b      	mov	fp, r3
   14166:	46b9      	mov	r9, r7
   14168:	2300      	movs	r3, #0
   1416a:	4e2d      	ldr	r6, [pc, #180]	; (14220 <__aeabi_dmul+0x1ec>)
   1416c:	2700      	movs	r7, #0
   1416e:	1a36      	subs	r6, r6, r0
   14170:	9302      	str	r3, [sp, #8]
   14172:	e784      	b.n	1407e <__aeabi_dmul+0x4a>
   14174:	4653      	mov	r3, sl
   14176:	4323      	orrs	r3, r4
   14178:	d12a      	bne.n	141d0 <__aeabi_dmul+0x19c>
   1417a:	2400      	movs	r4, #0
   1417c:	2002      	movs	r0, #2
   1417e:	e796      	b.n	140ae <__aeabi_dmul+0x7a>
   14180:	4653      	mov	r3, sl
   14182:	4323      	orrs	r3, r4
   14184:	d020      	beq.n	141c8 <__aeabi_dmul+0x194>
   14186:	2c00      	cmp	r4, #0
   14188:	d100      	bne.n	1418c <__aeabi_dmul+0x158>
   1418a:	e157      	b.n	1443c <__aeabi_dmul+0x408>
   1418c:	0020      	movs	r0, r4
   1418e:	f000 fd53 	bl	14c38 <__clzsi2>
   14192:	0003      	movs	r3, r0
   14194:	3b0b      	subs	r3, #11
   14196:	2b1c      	cmp	r3, #28
   14198:	dd00      	ble.n	1419c <__aeabi_dmul+0x168>
   1419a:	e149      	b.n	14430 <__aeabi_dmul+0x3fc>
   1419c:	211d      	movs	r1, #29
   1419e:	1acb      	subs	r3, r1, r3
   141a0:	4651      	mov	r1, sl
   141a2:	0002      	movs	r2, r0
   141a4:	40d9      	lsrs	r1, r3
   141a6:	4653      	mov	r3, sl
   141a8:	3a08      	subs	r2, #8
   141aa:	4094      	lsls	r4, r2
   141ac:	4093      	lsls	r3, r2
   141ae:	430c      	orrs	r4, r1
   141b0:	4a1b      	ldr	r2, [pc, #108]	; (14220 <__aeabi_dmul+0x1ec>)
   141b2:	1a12      	subs	r2, r2, r0
   141b4:	2000      	movs	r0, #0
   141b6:	e77a      	b.n	140ae <__aeabi_dmul+0x7a>
   141b8:	2501      	movs	r5, #1
   141ba:	9b01      	ldr	r3, [sp, #4]
   141bc:	4c14      	ldr	r4, [pc, #80]	; (14210 <__aeabi_dmul+0x1dc>)
   141be:	401d      	ands	r5, r3
   141c0:	2300      	movs	r3, #0
   141c2:	2200      	movs	r2, #0
   141c4:	4699      	mov	r9, r3
   141c6:	e79c      	b.n	14102 <__aeabi_dmul+0xce>
   141c8:	2400      	movs	r4, #0
   141ca:	2200      	movs	r2, #0
   141cc:	2001      	movs	r0, #1
   141ce:	e76e      	b.n	140ae <__aeabi_dmul+0x7a>
   141d0:	4653      	mov	r3, sl
   141d2:	2003      	movs	r0, #3
   141d4:	e76b      	b.n	140ae <__aeabi_dmul+0x7a>
   141d6:	2300      	movs	r3, #0
   141d8:	469b      	mov	fp, r3
   141da:	3301      	adds	r3, #1
   141dc:	2704      	movs	r7, #4
   141de:	2600      	movs	r6, #0
   141e0:	9302      	str	r3, [sp, #8]
   141e2:	e74c      	b.n	1407e <__aeabi_dmul+0x4a>
   141e4:	2303      	movs	r3, #3
   141e6:	4681      	mov	r9, r0
   141e8:	270c      	movs	r7, #12
   141ea:	9302      	str	r3, [sp, #8]
   141ec:	e747      	b.n	1407e <__aeabi_dmul+0x4a>
   141ee:	2280      	movs	r2, #128	; 0x80
   141f0:	2300      	movs	r3, #0
   141f2:	2500      	movs	r5, #0
   141f4:	0312      	lsls	r2, r2, #12
   141f6:	4699      	mov	r9, r3
   141f8:	4c05      	ldr	r4, [pc, #20]	; (14210 <__aeabi_dmul+0x1dc>)
   141fa:	e782      	b.n	14102 <__aeabi_dmul+0xce>
   141fc:	465c      	mov	r4, fp
   141fe:	464b      	mov	r3, r9
   14200:	9802      	ldr	r0, [sp, #8]
   14202:	e76f      	b.n	140e4 <__aeabi_dmul+0xb0>
   14204:	465c      	mov	r4, fp
   14206:	464b      	mov	r3, r9
   14208:	9501      	str	r5, [sp, #4]
   1420a:	9802      	ldr	r0, [sp, #8]
   1420c:	e76a      	b.n	140e4 <__aeabi_dmul+0xb0>
   1420e:	46c0      	nop			; (mov r8, r8)
   14210:	000007ff 	.word	0x000007ff
   14214:	fffffc01 	.word	0xfffffc01
   14218:	0001682c 	.word	0x0001682c
   1421c:	800fffff 	.word	0x800fffff
   14220:	fffffc0d 	.word	0xfffffc0d
   14224:	464a      	mov	r2, r9
   14226:	4649      	mov	r1, r9
   14228:	0c17      	lsrs	r7, r2, #16
   1422a:	0c1a      	lsrs	r2, r3, #16
   1422c:	041b      	lsls	r3, r3, #16
   1422e:	0c1b      	lsrs	r3, r3, #16
   14230:	0408      	lsls	r0, r1, #16
   14232:	0019      	movs	r1, r3
   14234:	0c00      	lsrs	r0, r0, #16
   14236:	4341      	muls	r1, r0
   14238:	0015      	movs	r5, r2
   1423a:	4688      	mov	r8, r1
   1423c:	0019      	movs	r1, r3
   1423e:	437d      	muls	r5, r7
   14240:	4379      	muls	r1, r7
   14242:	9503      	str	r5, [sp, #12]
   14244:	4689      	mov	r9, r1
   14246:	0029      	movs	r1, r5
   14248:	0015      	movs	r5, r2
   1424a:	4345      	muls	r5, r0
   1424c:	444d      	add	r5, r9
   1424e:	9502      	str	r5, [sp, #8]
   14250:	4645      	mov	r5, r8
   14252:	0c2d      	lsrs	r5, r5, #16
   14254:	46aa      	mov	sl, r5
   14256:	9d02      	ldr	r5, [sp, #8]
   14258:	4455      	add	r5, sl
   1425a:	45a9      	cmp	r9, r5
   1425c:	d906      	bls.n	1426c <__aeabi_dmul+0x238>
   1425e:	468a      	mov	sl, r1
   14260:	2180      	movs	r1, #128	; 0x80
   14262:	0249      	lsls	r1, r1, #9
   14264:	4689      	mov	r9, r1
   14266:	44ca      	add	sl, r9
   14268:	4651      	mov	r1, sl
   1426a:	9103      	str	r1, [sp, #12]
   1426c:	0c29      	lsrs	r1, r5, #16
   1426e:	9104      	str	r1, [sp, #16]
   14270:	4641      	mov	r1, r8
   14272:	0409      	lsls	r1, r1, #16
   14274:	042d      	lsls	r5, r5, #16
   14276:	0c09      	lsrs	r1, r1, #16
   14278:	4688      	mov	r8, r1
   1427a:	0029      	movs	r1, r5
   1427c:	0c25      	lsrs	r5, r4, #16
   1427e:	0424      	lsls	r4, r4, #16
   14280:	4441      	add	r1, r8
   14282:	0c24      	lsrs	r4, r4, #16
   14284:	9105      	str	r1, [sp, #20]
   14286:	0021      	movs	r1, r4
   14288:	4341      	muls	r1, r0
   1428a:	4688      	mov	r8, r1
   1428c:	0021      	movs	r1, r4
   1428e:	4379      	muls	r1, r7
   14290:	468a      	mov	sl, r1
   14292:	4368      	muls	r0, r5
   14294:	4641      	mov	r1, r8
   14296:	4450      	add	r0, sl
   14298:	4681      	mov	r9, r0
   1429a:	0c08      	lsrs	r0, r1, #16
   1429c:	4448      	add	r0, r9
   1429e:	436f      	muls	r7, r5
   142a0:	4582      	cmp	sl, r0
   142a2:	d903      	bls.n	142ac <__aeabi_dmul+0x278>
   142a4:	2180      	movs	r1, #128	; 0x80
   142a6:	0249      	lsls	r1, r1, #9
   142a8:	4689      	mov	r9, r1
   142aa:	444f      	add	r7, r9
   142ac:	0c01      	lsrs	r1, r0, #16
   142ae:	4689      	mov	r9, r1
   142b0:	0039      	movs	r1, r7
   142b2:	4449      	add	r1, r9
   142b4:	9102      	str	r1, [sp, #8]
   142b6:	4641      	mov	r1, r8
   142b8:	040f      	lsls	r7, r1, #16
   142ba:	9904      	ldr	r1, [sp, #16]
   142bc:	0c3f      	lsrs	r7, r7, #16
   142be:	4688      	mov	r8, r1
   142c0:	0400      	lsls	r0, r0, #16
   142c2:	19c0      	adds	r0, r0, r7
   142c4:	4480      	add	r8, r0
   142c6:	4641      	mov	r1, r8
   142c8:	9104      	str	r1, [sp, #16]
   142ca:	4659      	mov	r1, fp
   142cc:	0c0f      	lsrs	r7, r1, #16
   142ce:	0409      	lsls	r1, r1, #16
   142d0:	0c09      	lsrs	r1, r1, #16
   142d2:	4688      	mov	r8, r1
   142d4:	4359      	muls	r1, r3
   142d6:	468a      	mov	sl, r1
   142d8:	0039      	movs	r1, r7
   142da:	4351      	muls	r1, r2
   142dc:	4689      	mov	r9, r1
   142de:	4641      	mov	r1, r8
   142e0:	434a      	muls	r2, r1
   142e2:	4651      	mov	r1, sl
   142e4:	0c09      	lsrs	r1, r1, #16
   142e6:	468b      	mov	fp, r1
   142e8:	437b      	muls	r3, r7
   142ea:	18d2      	adds	r2, r2, r3
   142ec:	445a      	add	r2, fp
   142ee:	4293      	cmp	r3, r2
   142f0:	d903      	bls.n	142fa <__aeabi_dmul+0x2c6>
   142f2:	2380      	movs	r3, #128	; 0x80
   142f4:	025b      	lsls	r3, r3, #9
   142f6:	469b      	mov	fp, r3
   142f8:	44d9      	add	r9, fp
   142fa:	4651      	mov	r1, sl
   142fc:	0409      	lsls	r1, r1, #16
   142fe:	0c09      	lsrs	r1, r1, #16
   14300:	468a      	mov	sl, r1
   14302:	4641      	mov	r1, r8
   14304:	4361      	muls	r1, r4
   14306:	437c      	muls	r4, r7
   14308:	0c13      	lsrs	r3, r2, #16
   1430a:	0412      	lsls	r2, r2, #16
   1430c:	444b      	add	r3, r9
   1430e:	4452      	add	r2, sl
   14310:	46a1      	mov	r9, r4
   14312:	468a      	mov	sl, r1
   14314:	003c      	movs	r4, r7
   14316:	4641      	mov	r1, r8
   14318:	436c      	muls	r4, r5
   1431a:	434d      	muls	r5, r1
   1431c:	4651      	mov	r1, sl
   1431e:	444d      	add	r5, r9
   14320:	0c0f      	lsrs	r7, r1, #16
   14322:	197d      	adds	r5, r7, r5
   14324:	45a9      	cmp	r9, r5
   14326:	d903      	bls.n	14330 <__aeabi_dmul+0x2fc>
   14328:	2180      	movs	r1, #128	; 0x80
   1432a:	0249      	lsls	r1, r1, #9
   1432c:	4688      	mov	r8, r1
   1432e:	4444      	add	r4, r8
   14330:	9f04      	ldr	r7, [sp, #16]
   14332:	9903      	ldr	r1, [sp, #12]
   14334:	46b8      	mov	r8, r7
   14336:	4441      	add	r1, r8
   14338:	468b      	mov	fp, r1
   1433a:	4583      	cmp	fp, r0
   1433c:	4180      	sbcs	r0, r0
   1433e:	4241      	negs	r1, r0
   14340:	4688      	mov	r8, r1
   14342:	4651      	mov	r1, sl
   14344:	0408      	lsls	r0, r1, #16
   14346:	042f      	lsls	r7, r5, #16
   14348:	0c00      	lsrs	r0, r0, #16
   1434a:	183f      	adds	r7, r7, r0
   1434c:	4658      	mov	r0, fp
   1434e:	9902      	ldr	r1, [sp, #8]
   14350:	1810      	adds	r0, r2, r0
   14352:	4689      	mov	r9, r1
   14354:	4290      	cmp	r0, r2
   14356:	4192      	sbcs	r2, r2
   14358:	444f      	add	r7, r9
   1435a:	46ba      	mov	sl, r7
   1435c:	4252      	negs	r2, r2
   1435e:	4699      	mov	r9, r3
   14360:	4693      	mov	fp, r2
   14362:	44c2      	add	sl, r8
   14364:	44d1      	add	r9, sl
   14366:	44cb      	add	fp, r9
   14368:	428f      	cmp	r7, r1
   1436a:	41bf      	sbcs	r7, r7
   1436c:	45c2      	cmp	sl, r8
   1436e:	4189      	sbcs	r1, r1
   14370:	4599      	cmp	r9, r3
   14372:	419b      	sbcs	r3, r3
   14374:	4593      	cmp	fp, r2
   14376:	4192      	sbcs	r2, r2
   14378:	427f      	negs	r7, r7
   1437a:	4249      	negs	r1, r1
   1437c:	0c2d      	lsrs	r5, r5, #16
   1437e:	4252      	negs	r2, r2
   14380:	430f      	orrs	r7, r1
   14382:	425b      	negs	r3, r3
   14384:	4313      	orrs	r3, r2
   14386:	197f      	adds	r7, r7, r5
   14388:	18ff      	adds	r7, r7, r3
   1438a:	465b      	mov	r3, fp
   1438c:	193c      	adds	r4, r7, r4
   1438e:	0ddb      	lsrs	r3, r3, #23
   14390:	9a05      	ldr	r2, [sp, #20]
   14392:	0264      	lsls	r4, r4, #9
   14394:	431c      	orrs	r4, r3
   14396:	0243      	lsls	r3, r0, #9
   14398:	4313      	orrs	r3, r2
   1439a:	1e5d      	subs	r5, r3, #1
   1439c:	41ab      	sbcs	r3, r5
   1439e:	465a      	mov	r2, fp
   143a0:	0dc0      	lsrs	r0, r0, #23
   143a2:	4303      	orrs	r3, r0
   143a4:	0252      	lsls	r2, r2, #9
   143a6:	4313      	orrs	r3, r2
   143a8:	01e2      	lsls	r2, r4, #7
   143aa:	d556      	bpl.n	1445a <__aeabi_dmul+0x426>
   143ac:	2001      	movs	r0, #1
   143ae:	085a      	lsrs	r2, r3, #1
   143b0:	4003      	ands	r3, r0
   143b2:	4313      	orrs	r3, r2
   143b4:	07e2      	lsls	r2, r4, #31
   143b6:	4313      	orrs	r3, r2
   143b8:	0864      	lsrs	r4, r4, #1
   143ba:	485a      	ldr	r0, [pc, #360]	; (14524 <__aeabi_dmul+0x4f0>)
   143bc:	4460      	add	r0, ip
   143be:	2800      	cmp	r0, #0
   143c0:	dd4d      	ble.n	1445e <__aeabi_dmul+0x42a>
   143c2:	075a      	lsls	r2, r3, #29
   143c4:	d009      	beq.n	143da <__aeabi_dmul+0x3a6>
   143c6:	220f      	movs	r2, #15
   143c8:	401a      	ands	r2, r3
   143ca:	2a04      	cmp	r2, #4
   143cc:	d005      	beq.n	143da <__aeabi_dmul+0x3a6>
   143ce:	1d1a      	adds	r2, r3, #4
   143d0:	429a      	cmp	r2, r3
   143d2:	419b      	sbcs	r3, r3
   143d4:	425b      	negs	r3, r3
   143d6:	18e4      	adds	r4, r4, r3
   143d8:	0013      	movs	r3, r2
   143da:	01e2      	lsls	r2, r4, #7
   143dc:	d504      	bpl.n	143e8 <__aeabi_dmul+0x3b4>
   143de:	2080      	movs	r0, #128	; 0x80
   143e0:	4a51      	ldr	r2, [pc, #324]	; (14528 <__aeabi_dmul+0x4f4>)
   143e2:	00c0      	lsls	r0, r0, #3
   143e4:	4014      	ands	r4, r2
   143e6:	4460      	add	r0, ip
   143e8:	4a50      	ldr	r2, [pc, #320]	; (1452c <__aeabi_dmul+0x4f8>)
   143ea:	4290      	cmp	r0, r2
   143ec:	dd00      	ble.n	143f0 <__aeabi_dmul+0x3bc>
   143ee:	e6e3      	b.n	141b8 <__aeabi_dmul+0x184>
   143f0:	2501      	movs	r5, #1
   143f2:	08db      	lsrs	r3, r3, #3
   143f4:	0762      	lsls	r2, r4, #29
   143f6:	431a      	orrs	r2, r3
   143f8:	0264      	lsls	r4, r4, #9
   143fa:	9b01      	ldr	r3, [sp, #4]
   143fc:	4691      	mov	r9, r2
   143fe:	0b22      	lsrs	r2, r4, #12
   14400:	0544      	lsls	r4, r0, #21
   14402:	0d64      	lsrs	r4, r4, #21
   14404:	401d      	ands	r5, r3
   14406:	e67c      	b.n	14102 <__aeabi_dmul+0xce>
   14408:	2280      	movs	r2, #128	; 0x80
   1440a:	4659      	mov	r1, fp
   1440c:	0312      	lsls	r2, r2, #12
   1440e:	4211      	tst	r1, r2
   14410:	d008      	beq.n	14424 <__aeabi_dmul+0x3f0>
   14412:	4214      	tst	r4, r2
   14414:	d106      	bne.n	14424 <__aeabi_dmul+0x3f0>
   14416:	4322      	orrs	r2, r4
   14418:	0312      	lsls	r2, r2, #12
   1441a:	0b12      	lsrs	r2, r2, #12
   1441c:	4645      	mov	r5, r8
   1441e:	4699      	mov	r9, r3
   14420:	4c43      	ldr	r4, [pc, #268]	; (14530 <__aeabi_dmul+0x4fc>)
   14422:	e66e      	b.n	14102 <__aeabi_dmul+0xce>
   14424:	465b      	mov	r3, fp
   14426:	431a      	orrs	r2, r3
   14428:	0312      	lsls	r2, r2, #12
   1442a:	0b12      	lsrs	r2, r2, #12
   1442c:	4c40      	ldr	r4, [pc, #256]	; (14530 <__aeabi_dmul+0x4fc>)
   1442e:	e668      	b.n	14102 <__aeabi_dmul+0xce>
   14430:	0003      	movs	r3, r0
   14432:	4654      	mov	r4, sl
   14434:	3b28      	subs	r3, #40	; 0x28
   14436:	409c      	lsls	r4, r3
   14438:	2300      	movs	r3, #0
   1443a:	e6b9      	b.n	141b0 <__aeabi_dmul+0x17c>
   1443c:	f000 fbfc 	bl	14c38 <__clzsi2>
   14440:	3020      	adds	r0, #32
   14442:	e6a6      	b.n	14192 <__aeabi_dmul+0x15e>
   14444:	0003      	movs	r3, r0
   14446:	3b28      	subs	r3, #40	; 0x28
   14448:	409f      	lsls	r7, r3
   1444a:	2300      	movs	r3, #0
   1444c:	46bb      	mov	fp, r7
   1444e:	4699      	mov	r9, r3
   14450:	e68a      	b.n	14168 <__aeabi_dmul+0x134>
   14452:	f000 fbf1 	bl	14c38 <__clzsi2>
   14456:	3020      	adds	r0, #32
   14458:	e674      	b.n	14144 <__aeabi_dmul+0x110>
   1445a:	46b4      	mov	ip, r6
   1445c:	e7ad      	b.n	143ba <__aeabi_dmul+0x386>
   1445e:	2501      	movs	r5, #1
   14460:	1a2a      	subs	r2, r5, r0
   14462:	2a38      	cmp	r2, #56	; 0x38
   14464:	dd06      	ble.n	14474 <__aeabi_dmul+0x440>
   14466:	9b01      	ldr	r3, [sp, #4]
   14468:	2400      	movs	r4, #0
   1446a:	401d      	ands	r5, r3
   1446c:	2300      	movs	r3, #0
   1446e:	2200      	movs	r2, #0
   14470:	4699      	mov	r9, r3
   14472:	e646      	b.n	14102 <__aeabi_dmul+0xce>
   14474:	2a1f      	cmp	r2, #31
   14476:	dc21      	bgt.n	144bc <__aeabi_dmul+0x488>
   14478:	2520      	movs	r5, #32
   1447a:	0020      	movs	r0, r4
   1447c:	1aad      	subs	r5, r5, r2
   1447e:	001e      	movs	r6, r3
   14480:	40ab      	lsls	r3, r5
   14482:	40a8      	lsls	r0, r5
   14484:	40d6      	lsrs	r6, r2
   14486:	1e5d      	subs	r5, r3, #1
   14488:	41ab      	sbcs	r3, r5
   1448a:	4330      	orrs	r0, r6
   1448c:	4318      	orrs	r0, r3
   1448e:	40d4      	lsrs	r4, r2
   14490:	0743      	lsls	r3, r0, #29
   14492:	d009      	beq.n	144a8 <__aeabi_dmul+0x474>
   14494:	230f      	movs	r3, #15
   14496:	4003      	ands	r3, r0
   14498:	2b04      	cmp	r3, #4
   1449a:	d005      	beq.n	144a8 <__aeabi_dmul+0x474>
   1449c:	0003      	movs	r3, r0
   1449e:	1d18      	adds	r0, r3, #4
   144a0:	4298      	cmp	r0, r3
   144a2:	419b      	sbcs	r3, r3
   144a4:	425b      	negs	r3, r3
   144a6:	18e4      	adds	r4, r4, r3
   144a8:	0223      	lsls	r3, r4, #8
   144aa:	d521      	bpl.n	144f0 <__aeabi_dmul+0x4bc>
   144ac:	2501      	movs	r5, #1
   144ae:	9b01      	ldr	r3, [sp, #4]
   144b0:	2401      	movs	r4, #1
   144b2:	401d      	ands	r5, r3
   144b4:	2300      	movs	r3, #0
   144b6:	2200      	movs	r2, #0
   144b8:	4699      	mov	r9, r3
   144ba:	e622      	b.n	14102 <__aeabi_dmul+0xce>
   144bc:	251f      	movs	r5, #31
   144be:	0021      	movs	r1, r4
   144c0:	426d      	negs	r5, r5
   144c2:	1a28      	subs	r0, r5, r0
   144c4:	40c1      	lsrs	r1, r0
   144c6:	0008      	movs	r0, r1
   144c8:	2a20      	cmp	r2, #32
   144ca:	d01d      	beq.n	14508 <__aeabi_dmul+0x4d4>
   144cc:	355f      	adds	r5, #95	; 0x5f
   144ce:	1aaa      	subs	r2, r5, r2
   144d0:	4094      	lsls	r4, r2
   144d2:	4323      	orrs	r3, r4
   144d4:	1e5c      	subs	r4, r3, #1
   144d6:	41a3      	sbcs	r3, r4
   144d8:	2507      	movs	r5, #7
   144da:	4303      	orrs	r3, r0
   144dc:	401d      	ands	r5, r3
   144de:	2200      	movs	r2, #0
   144e0:	2d00      	cmp	r5, #0
   144e2:	d009      	beq.n	144f8 <__aeabi_dmul+0x4c4>
   144e4:	220f      	movs	r2, #15
   144e6:	2400      	movs	r4, #0
   144e8:	401a      	ands	r2, r3
   144ea:	0018      	movs	r0, r3
   144ec:	2a04      	cmp	r2, #4
   144ee:	d1d6      	bne.n	1449e <__aeabi_dmul+0x46a>
   144f0:	0003      	movs	r3, r0
   144f2:	0765      	lsls	r5, r4, #29
   144f4:	0264      	lsls	r4, r4, #9
   144f6:	0b22      	lsrs	r2, r4, #12
   144f8:	08db      	lsrs	r3, r3, #3
   144fa:	432b      	orrs	r3, r5
   144fc:	2501      	movs	r5, #1
   144fe:	4699      	mov	r9, r3
   14500:	9b01      	ldr	r3, [sp, #4]
   14502:	2400      	movs	r4, #0
   14504:	401d      	ands	r5, r3
   14506:	e5fc      	b.n	14102 <__aeabi_dmul+0xce>
   14508:	2400      	movs	r4, #0
   1450a:	e7e2      	b.n	144d2 <__aeabi_dmul+0x49e>
   1450c:	2280      	movs	r2, #128	; 0x80
   1450e:	2501      	movs	r5, #1
   14510:	0312      	lsls	r2, r2, #12
   14512:	4322      	orrs	r2, r4
   14514:	9901      	ldr	r1, [sp, #4]
   14516:	0312      	lsls	r2, r2, #12
   14518:	0b12      	lsrs	r2, r2, #12
   1451a:	400d      	ands	r5, r1
   1451c:	4699      	mov	r9, r3
   1451e:	4c04      	ldr	r4, [pc, #16]	; (14530 <__aeabi_dmul+0x4fc>)
   14520:	e5ef      	b.n	14102 <__aeabi_dmul+0xce>
   14522:	46c0      	nop			; (mov r8, r8)
   14524:	000003ff 	.word	0x000003ff
   14528:	feffffff 	.word	0xfeffffff
   1452c:	000007fe 	.word	0x000007fe
   14530:	000007ff 	.word	0x000007ff

00014534 <__aeabi_dsub>:
   14534:	b5f0      	push	{r4, r5, r6, r7, lr}
   14536:	4646      	mov	r6, r8
   14538:	46d6      	mov	lr, sl
   1453a:	464f      	mov	r7, r9
   1453c:	030c      	lsls	r4, r1, #12
   1453e:	b5c0      	push	{r6, r7, lr}
   14540:	0fcd      	lsrs	r5, r1, #31
   14542:	004e      	lsls	r6, r1, #1
   14544:	0a61      	lsrs	r1, r4, #9
   14546:	0f44      	lsrs	r4, r0, #29
   14548:	430c      	orrs	r4, r1
   1454a:	00c1      	lsls	r1, r0, #3
   1454c:	0058      	lsls	r0, r3, #1
   1454e:	0d40      	lsrs	r0, r0, #21
   14550:	4684      	mov	ip, r0
   14552:	468a      	mov	sl, r1
   14554:	000f      	movs	r7, r1
   14556:	0319      	lsls	r1, r3, #12
   14558:	0f50      	lsrs	r0, r2, #29
   1455a:	0a49      	lsrs	r1, r1, #9
   1455c:	4301      	orrs	r1, r0
   1455e:	48c6      	ldr	r0, [pc, #792]	; (14878 <__aeabi_dsub+0x344>)
   14560:	0d76      	lsrs	r6, r6, #21
   14562:	46a8      	mov	r8, r5
   14564:	0fdb      	lsrs	r3, r3, #31
   14566:	00d2      	lsls	r2, r2, #3
   14568:	4584      	cmp	ip, r0
   1456a:	d100      	bne.n	1456e <__aeabi_dsub+0x3a>
   1456c:	e0d8      	b.n	14720 <__aeabi_dsub+0x1ec>
   1456e:	2001      	movs	r0, #1
   14570:	4043      	eors	r3, r0
   14572:	42ab      	cmp	r3, r5
   14574:	d100      	bne.n	14578 <__aeabi_dsub+0x44>
   14576:	e0a6      	b.n	146c6 <__aeabi_dsub+0x192>
   14578:	4660      	mov	r0, ip
   1457a:	1a35      	subs	r5, r6, r0
   1457c:	2d00      	cmp	r5, #0
   1457e:	dc00      	bgt.n	14582 <__aeabi_dsub+0x4e>
   14580:	e105      	b.n	1478e <__aeabi_dsub+0x25a>
   14582:	2800      	cmp	r0, #0
   14584:	d110      	bne.n	145a8 <__aeabi_dsub+0x74>
   14586:	000b      	movs	r3, r1
   14588:	4313      	orrs	r3, r2
   1458a:	d100      	bne.n	1458e <__aeabi_dsub+0x5a>
   1458c:	e0d7      	b.n	1473e <__aeabi_dsub+0x20a>
   1458e:	1e6b      	subs	r3, r5, #1
   14590:	2b00      	cmp	r3, #0
   14592:	d000      	beq.n	14596 <__aeabi_dsub+0x62>
   14594:	e14b      	b.n	1482e <__aeabi_dsub+0x2fa>
   14596:	4653      	mov	r3, sl
   14598:	1a9f      	subs	r7, r3, r2
   1459a:	45ba      	cmp	sl, r7
   1459c:	4180      	sbcs	r0, r0
   1459e:	1a64      	subs	r4, r4, r1
   145a0:	4240      	negs	r0, r0
   145a2:	1a24      	subs	r4, r4, r0
   145a4:	2601      	movs	r6, #1
   145a6:	e01e      	b.n	145e6 <__aeabi_dsub+0xb2>
   145a8:	4bb3      	ldr	r3, [pc, #716]	; (14878 <__aeabi_dsub+0x344>)
   145aa:	429e      	cmp	r6, r3
   145ac:	d048      	beq.n	14640 <__aeabi_dsub+0x10c>
   145ae:	2380      	movs	r3, #128	; 0x80
   145b0:	041b      	lsls	r3, r3, #16
   145b2:	4319      	orrs	r1, r3
   145b4:	2d38      	cmp	r5, #56	; 0x38
   145b6:	dd00      	ble.n	145ba <__aeabi_dsub+0x86>
   145b8:	e119      	b.n	147ee <__aeabi_dsub+0x2ba>
   145ba:	2d1f      	cmp	r5, #31
   145bc:	dd00      	ble.n	145c0 <__aeabi_dsub+0x8c>
   145be:	e14c      	b.n	1485a <__aeabi_dsub+0x326>
   145c0:	2320      	movs	r3, #32
   145c2:	000f      	movs	r7, r1
   145c4:	1b5b      	subs	r3, r3, r5
   145c6:	0010      	movs	r0, r2
   145c8:	409a      	lsls	r2, r3
   145ca:	409f      	lsls	r7, r3
   145cc:	40e8      	lsrs	r0, r5
   145ce:	1e53      	subs	r3, r2, #1
   145d0:	419a      	sbcs	r2, r3
   145d2:	40e9      	lsrs	r1, r5
   145d4:	4307      	orrs	r7, r0
   145d6:	4317      	orrs	r7, r2
   145d8:	4653      	mov	r3, sl
   145da:	1bdf      	subs	r7, r3, r7
   145dc:	1a61      	subs	r1, r4, r1
   145de:	45ba      	cmp	sl, r7
   145e0:	41a4      	sbcs	r4, r4
   145e2:	4264      	negs	r4, r4
   145e4:	1b0c      	subs	r4, r1, r4
   145e6:	0223      	lsls	r3, r4, #8
   145e8:	d400      	bmi.n	145ec <__aeabi_dsub+0xb8>
   145ea:	e0c5      	b.n	14778 <__aeabi_dsub+0x244>
   145ec:	0264      	lsls	r4, r4, #9
   145ee:	0a65      	lsrs	r5, r4, #9
   145f0:	2d00      	cmp	r5, #0
   145f2:	d100      	bne.n	145f6 <__aeabi_dsub+0xc2>
   145f4:	e0f6      	b.n	147e4 <__aeabi_dsub+0x2b0>
   145f6:	0028      	movs	r0, r5
   145f8:	f000 fb1e 	bl	14c38 <__clzsi2>
   145fc:	0003      	movs	r3, r0
   145fe:	3b08      	subs	r3, #8
   14600:	2b1f      	cmp	r3, #31
   14602:	dd00      	ble.n	14606 <__aeabi_dsub+0xd2>
   14604:	e0e9      	b.n	147da <__aeabi_dsub+0x2a6>
   14606:	2220      	movs	r2, #32
   14608:	003c      	movs	r4, r7
   1460a:	1ad2      	subs	r2, r2, r3
   1460c:	409d      	lsls	r5, r3
   1460e:	40d4      	lsrs	r4, r2
   14610:	409f      	lsls	r7, r3
   14612:	4325      	orrs	r5, r4
   14614:	429e      	cmp	r6, r3
   14616:	dd00      	ble.n	1461a <__aeabi_dsub+0xe6>
   14618:	e0db      	b.n	147d2 <__aeabi_dsub+0x29e>
   1461a:	1b9e      	subs	r6, r3, r6
   1461c:	1c73      	adds	r3, r6, #1
   1461e:	2b1f      	cmp	r3, #31
   14620:	dd00      	ble.n	14624 <__aeabi_dsub+0xf0>
   14622:	e10a      	b.n	1483a <__aeabi_dsub+0x306>
   14624:	2220      	movs	r2, #32
   14626:	0038      	movs	r0, r7
   14628:	1ad2      	subs	r2, r2, r3
   1462a:	0029      	movs	r1, r5
   1462c:	4097      	lsls	r7, r2
   1462e:	002c      	movs	r4, r5
   14630:	4091      	lsls	r1, r2
   14632:	40d8      	lsrs	r0, r3
   14634:	1e7a      	subs	r2, r7, #1
   14636:	4197      	sbcs	r7, r2
   14638:	40dc      	lsrs	r4, r3
   1463a:	2600      	movs	r6, #0
   1463c:	4301      	orrs	r1, r0
   1463e:	430f      	orrs	r7, r1
   14640:	077b      	lsls	r3, r7, #29
   14642:	d009      	beq.n	14658 <__aeabi_dsub+0x124>
   14644:	230f      	movs	r3, #15
   14646:	403b      	ands	r3, r7
   14648:	2b04      	cmp	r3, #4
   1464a:	d005      	beq.n	14658 <__aeabi_dsub+0x124>
   1464c:	1d3b      	adds	r3, r7, #4
   1464e:	42bb      	cmp	r3, r7
   14650:	41bf      	sbcs	r7, r7
   14652:	427f      	negs	r7, r7
   14654:	19e4      	adds	r4, r4, r7
   14656:	001f      	movs	r7, r3
   14658:	0223      	lsls	r3, r4, #8
   1465a:	d525      	bpl.n	146a8 <__aeabi_dsub+0x174>
   1465c:	4b86      	ldr	r3, [pc, #536]	; (14878 <__aeabi_dsub+0x344>)
   1465e:	3601      	adds	r6, #1
   14660:	429e      	cmp	r6, r3
   14662:	d100      	bne.n	14666 <__aeabi_dsub+0x132>
   14664:	e0af      	b.n	147c6 <__aeabi_dsub+0x292>
   14666:	4b85      	ldr	r3, [pc, #532]	; (1487c <__aeabi_dsub+0x348>)
   14668:	2501      	movs	r5, #1
   1466a:	401c      	ands	r4, r3
   1466c:	4643      	mov	r3, r8
   1466e:	0762      	lsls	r2, r4, #29
   14670:	08ff      	lsrs	r7, r7, #3
   14672:	0264      	lsls	r4, r4, #9
   14674:	0576      	lsls	r6, r6, #21
   14676:	4317      	orrs	r7, r2
   14678:	0b24      	lsrs	r4, r4, #12
   1467a:	0d76      	lsrs	r6, r6, #21
   1467c:	401d      	ands	r5, r3
   1467e:	2100      	movs	r1, #0
   14680:	0324      	lsls	r4, r4, #12
   14682:	0b23      	lsrs	r3, r4, #12
   14684:	0d0c      	lsrs	r4, r1, #20
   14686:	4a7e      	ldr	r2, [pc, #504]	; (14880 <__aeabi_dsub+0x34c>)
   14688:	0524      	lsls	r4, r4, #20
   1468a:	431c      	orrs	r4, r3
   1468c:	4014      	ands	r4, r2
   1468e:	0533      	lsls	r3, r6, #20
   14690:	4323      	orrs	r3, r4
   14692:	005b      	lsls	r3, r3, #1
   14694:	07ed      	lsls	r5, r5, #31
   14696:	085b      	lsrs	r3, r3, #1
   14698:	432b      	orrs	r3, r5
   1469a:	0038      	movs	r0, r7
   1469c:	0019      	movs	r1, r3
   1469e:	bc1c      	pop	{r2, r3, r4}
   146a0:	4690      	mov	r8, r2
   146a2:	4699      	mov	r9, r3
   146a4:	46a2      	mov	sl, r4
   146a6:	bdf0      	pop	{r4, r5, r6, r7, pc}
   146a8:	2501      	movs	r5, #1
   146aa:	4643      	mov	r3, r8
   146ac:	0762      	lsls	r2, r4, #29
   146ae:	08ff      	lsrs	r7, r7, #3
   146b0:	4317      	orrs	r7, r2
   146b2:	08e4      	lsrs	r4, r4, #3
   146b4:	401d      	ands	r5, r3
   146b6:	4b70      	ldr	r3, [pc, #448]	; (14878 <__aeabi_dsub+0x344>)
   146b8:	429e      	cmp	r6, r3
   146ba:	d036      	beq.n	1472a <__aeabi_dsub+0x1f6>
   146bc:	0324      	lsls	r4, r4, #12
   146be:	0576      	lsls	r6, r6, #21
   146c0:	0b24      	lsrs	r4, r4, #12
   146c2:	0d76      	lsrs	r6, r6, #21
   146c4:	e7db      	b.n	1467e <__aeabi_dsub+0x14a>
   146c6:	4663      	mov	r3, ip
   146c8:	1af3      	subs	r3, r6, r3
   146ca:	2b00      	cmp	r3, #0
   146cc:	dc00      	bgt.n	146d0 <__aeabi_dsub+0x19c>
   146ce:	e094      	b.n	147fa <__aeabi_dsub+0x2c6>
   146d0:	4660      	mov	r0, ip
   146d2:	2800      	cmp	r0, #0
   146d4:	d035      	beq.n	14742 <__aeabi_dsub+0x20e>
   146d6:	4868      	ldr	r0, [pc, #416]	; (14878 <__aeabi_dsub+0x344>)
   146d8:	4286      	cmp	r6, r0
   146da:	d0b1      	beq.n	14640 <__aeabi_dsub+0x10c>
   146dc:	2780      	movs	r7, #128	; 0x80
   146de:	043f      	lsls	r7, r7, #16
   146e0:	4339      	orrs	r1, r7
   146e2:	2b38      	cmp	r3, #56	; 0x38
   146e4:	dc00      	bgt.n	146e8 <__aeabi_dsub+0x1b4>
   146e6:	e0fd      	b.n	148e4 <__aeabi_dsub+0x3b0>
   146e8:	430a      	orrs	r2, r1
   146ea:	0017      	movs	r7, r2
   146ec:	2100      	movs	r1, #0
   146ee:	1e7a      	subs	r2, r7, #1
   146f0:	4197      	sbcs	r7, r2
   146f2:	4457      	add	r7, sl
   146f4:	4557      	cmp	r7, sl
   146f6:	4180      	sbcs	r0, r0
   146f8:	1909      	adds	r1, r1, r4
   146fa:	4244      	negs	r4, r0
   146fc:	190c      	adds	r4, r1, r4
   146fe:	0223      	lsls	r3, r4, #8
   14700:	d53a      	bpl.n	14778 <__aeabi_dsub+0x244>
   14702:	4b5d      	ldr	r3, [pc, #372]	; (14878 <__aeabi_dsub+0x344>)
   14704:	3601      	adds	r6, #1
   14706:	429e      	cmp	r6, r3
   14708:	d100      	bne.n	1470c <__aeabi_dsub+0x1d8>
   1470a:	e14b      	b.n	149a4 <__aeabi_dsub+0x470>
   1470c:	2201      	movs	r2, #1
   1470e:	4b5b      	ldr	r3, [pc, #364]	; (1487c <__aeabi_dsub+0x348>)
   14710:	401c      	ands	r4, r3
   14712:	087b      	lsrs	r3, r7, #1
   14714:	4017      	ands	r7, r2
   14716:	431f      	orrs	r7, r3
   14718:	07e2      	lsls	r2, r4, #31
   1471a:	4317      	orrs	r7, r2
   1471c:	0864      	lsrs	r4, r4, #1
   1471e:	e78f      	b.n	14640 <__aeabi_dsub+0x10c>
   14720:	0008      	movs	r0, r1
   14722:	4310      	orrs	r0, r2
   14724:	d000      	beq.n	14728 <__aeabi_dsub+0x1f4>
   14726:	e724      	b.n	14572 <__aeabi_dsub+0x3e>
   14728:	e721      	b.n	1456e <__aeabi_dsub+0x3a>
   1472a:	0023      	movs	r3, r4
   1472c:	433b      	orrs	r3, r7
   1472e:	d100      	bne.n	14732 <__aeabi_dsub+0x1fe>
   14730:	e1b9      	b.n	14aa6 <__aeabi_dsub+0x572>
   14732:	2280      	movs	r2, #128	; 0x80
   14734:	0312      	lsls	r2, r2, #12
   14736:	4314      	orrs	r4, r2
   14738:	0324      	lsls	r4, r4, #12
   1473a:	0b24      	lsrs	r4, r4, #12
   1473c:	e79f      	b.n	1467e <__aeabi_dsub+0x14a>
   1473e:	002e      	movs	r6, r5
   14740:	e77e      	b.n	14640 <__aeabi_dsub+0x10c>
   14742:	0008      	movs	r0, r1
   14744:	4310      	orrs	r0, r2
   14746:	d100      	bne.n	1474a <__aeabi_dsub+0x216>
   14748:	e0ca      	b.n	148e0 <__aeabi_dsub+0x3ac>
   1474a:	1e58      	subs	r0, r3, #1
   1474c:	4684      	mov	ip, r0
   1474e:	2800      	cmp	r0, #0
   14750:	d000      	beq.n	14754 <__aeabi_dsub+0x220>
   14752:	e0e7      	b.n	14924 <__aeabi_dsub+0x3f0>
   14754:	4452      	add	r2, sl
   14756:	4552      	cmp	r2, sl
   14758:	4180      	sbcs	r0, r0
   1475a:	1864      	adds	r4, r4, r1
   1475c:	4240      	negs	r0, r0
   1475e:	1824      	adds	r4, r4, r0
   14760:	0017      	movs	r7, r2
   14762:	2601      	movs	r6, #1
   14764:	0223      	lsls	r3, r4, #8
   14766:	d507      	bpl.n	14778 <__aeabi_dsub+0x244>
   14768:	2602      	movs	r6, #2
   1476a:	e7cf      	b.n	1470c <__aeabi_dsub+0x1d8>
   1476c:	4664      	mov	r4, ip
   1476e:	432c      	orrs	r4, r5
   14770:	d100      	bne.n	14774 <__aeabi_dsub+0x240>
   14772:	e1b3      	b.n	14adc <__aeabi_dsub+0x5a8>
   14774:	002c      	movs	r4, r5
   14776:	4667      	mov	r7, ip
   14778:	077b      	lsls	r3, r7, #29
   1477a:	d000      	beq.n	1477e <__aeabi_dsub+0x24a>
   1477c:	e762      	b.n	14644 <__aeabi_dsub+0x110>
   1477e:	0763      	lsls	r3, r4, #29
   14780:	08ff      	lsrs	r7, r7, #3
   14782:	431f      	orrs	r7, r3
   14784:	2501      	movs	r5, #1
   14786:	4643      	mov	r3, r8
   14788:	08e4      	lsrs	r4, r4, #3
   1478a:	401d      	ands	r5, r3
   1478c:	e793      	b.n	146b6 <__aeabi_dsub+0x182>
   1478e:	2d00      	cmp	r5, #0
   14790:	d178      	bne.n	14884 <__aeabi_dsub+0x350>
   14792:	1c75      	adds	r5, r6, #1
   14794:	056d      	lsls	r5, r5, #21
   14796:	0d6d      	lsrs	r5, r5, #21
   14798:	2d01      	cmp	r5, #1
   1479a:	dc00      	bgt.n	1479e <__aeabi_dsub+0x26a>
   1479c:	e0f2      	b.n	14984 <__aeabi_dsub+0x450>
   1479e:	4650      	mov	r0, sl
   147a0:	1a80      	subs	r0, r0, r2
   147a2:	4582      	cmp	sl, r0
   147a4:	41bf      	sbcs	r7, r7
   147a6:	1a65      	subs	r5, r4, r1
   147a8:	427f      	negs	r7, r7
   147aa:	1bed      	subs	r5, r5, r7
   147ac:	4684      	mov	ip, r0
   147ae:	0228      	lsls	r0, r5, #8
   147b0:	d400      	bmi.n	147b4 <__aeabi_dsub+0x280>
   147b2:	e08c      	b.n	148ce <__aeabi_dsub+0x39a>
   147b4:	4650      	mov	r0, sl
   147b6:	1a17      	subs	r7, r2, r0
   147b8:	42ba      	cmp	r2, r7
   147ba:	4192      	sbcs	r2, r2
   147bc:	1b0c      	subs	r4, r1, r4
   147be:	4255      	negs	r5, r2
   147c0:	1b65      	subs	r5, r4, r5
   147c2:	4698      	mov	r8, r3
   147c4:	e714      	b.n	145f0 <__aeabi_dsub+0xbc>
   147c6:	2501      	movs	r5, #1
   147c8:	4643      	mov	r3, r8
   147ca:	2400      	movs	r4, #0
   147cc:	401d      	ands	r5, r3
   147ce:	2700      	movs	r7, #0
   147d0:	e755      	b.n	1467e <__aeabi_dsub+0x14a>
   147d2:	4c2a      	ldr	r4, [pc, #168]	; (1487c <__aeabi_dsub+0x348>)
   147d4:	1af6      	subs	r6, r6, r3
   147d6:	402c      	ands	r4, r5
   147d8:	e732      	b.n	14640 <__aeabi_dsub+0x10c>
   147da:	003d      	movs	r5, r7
   147dc:	3828      	subs	r0, #40	; 0x28
   147de:	4085      	lsls	r5, r0
   147e0:	2700      	movs	r7, #0
   147e2:	e717      	b.n	14614 <__aeabi_dsub+0xe0>
   147e4:	0038      	movs	r0, r7
   147e6:	f000 fa27 	bl	14c38 <__clzsi2>
   147ea:	3020      	adds	r0, #32
   147ec:	e706      	b.n	145fc <__aeabi_dsub+0xc8>
   147ee:	430a      	orrs	r2, r1
   147f0:	0017      	movs	r7, r2
   147f2:	2100      	movs	r1, #0
   147f4:	1e7a      	subs	r2, r7, #1
   147f6:	4197      	sbcs	r7, r2
   147f8:	e6ee      	b.n	145d8 <__aeabi_dsub+0xa4>
   147fa:	2b00      	cmp	r3, #0
   147fc:	d000      	beq.n	14800 <__aeabi_dsub+0x2cc>
   147fe:	e0e5      	b.n	149cc <__aeabi_dsub+0x498>
   14800:	1c73      	adds	r3, r6, #1
   14802:	469c      	mov	ip, r3
   14804:	055b      	lsls	r3, r3, #21
   14806:	0d5b      	lsrs	r3, r3, #21
   14808:	2b01      	cmp	r3, #1
   1480a:	dc00      	bgt.n	1480e <__aeabi_dsub+0x2da>
   1480c:	e09f      	b.n	1494e <__aeabi_dsub+0x41a>
   1480e:	4b1a      	ldr	r3, [pc, #104]	; (14878 <__aeabi_dsub+0x344>)
   14810:	459c      	cmp	ip, r3
   14812:	d100      	bne.n	14816 <__aeabi_dsub+0x2e2>
   14814:	e0c5      	b.n	149a2 <__aeabi_dsub+0x46e>
   14816:	4452      	add	r2, sl
   14818:	4552      	cmp	r2, sl
   1481a:	4180      	sbcs	r0, r0
   1481c:	1864      	adds	r4, r4, r1
   1481e:	4240      	negs	r0, r0
   14820:	1824      	adds	r4, r4, r0
   14822:	07e7      	lsls	r7, r4, #31
   14824:	0852      	lsrs	r2, r2, #1
   14826:	4317      	orrs	r7, r2
   14828:	0864      	lsrs	r4, r4, #1
   1482a:	4666      	mov	r6, ip
   1482c:	e708      	b.n	14640 <__aeabi_dsub+0x10c>
   1482e:	4812      	ldr	r0, [pc, #72]	; (14878 <__aeabi_dsub+0x344>)
   14830:	4285      	cmp	r5, r0
   14832:	d100      	bne.n	14836 <__aeabi_dsub+0x302>
   14834:	e085      	b.n	14942 <__aeabi_dsub+0x40e>
   14836:	001d      	movs	r5, r3
   14838:	e6bc      	b.n	145b4 <__aeabi_dsub+0x80>
   1483a:	0029      	movs	r1, r5
   1483c:	3e1f      	subs	r6, #31
   1483e:	40f1      	lsrs	r1, r6
   14840:	2b20      	cmp	r3, #32
   14842:	d100      	bne.n	14846 <__aeabi_dsub+0x312>
   14844:	e07f      	b.n	14946 <__aeabi_dsub+0x412>
   14846:	2240      	movs	r2, #64	; 0x40
   14848:	1ad3      	subs	r3, r2, r3
   1484a:	409d      	lsls	r5, r3
   1484c:	432f      	orrs	r7, r5
   1484e:	1e7d      	subs	r5, r7, #1
   14850:	41af      	sbcs	r7, r5
   14852:	2400      	movs	r4, #0
   14854:	430f      	orrs	r7, r1
   14856:	2600      	movs	r6, #0
   14858:	e78e      	b.n	14778 <__aeabi_dsub+0x244>
   1485a:	002b      	movs	r3, r5
   1485c:	000f      	movs	r7, r1
   1485e:	3b20      	subs	r3, #32
   14860:	40df      	lsrs	r7, r3
   14862:	2d20      	cmp	r5, #32
   14864:	d071      	beq.n	1494a <__aeabi_dsub+0x416>
   14866:	2340      	movs	r3, #64	; 0x40
   14868:	1b5d      	subs	r5, r3, r5
   1486a:	40a9      	lsls	r1, r5
   1486c:	430a      	orrs	r2, r1
   1486e:	1e51      	subs	r1, r2, #1
   14870:	418a      	sbcs	r2, r1
   14872:	2100      	movs	r1, #0
   14874:	4317      	orrs	r7, r2
   14876:	e6af      	b.n	145d8 <__aeabi_dsub+0xa4>
   14878:	000007ff 	.word	0x000007ff
   1487c:	ff7fffff 	.word	0xff7fffff
   14880:	800fffff 	.word	0x800fffff
   14884:	2e00      	cmp	r6, #0
   14886:	d03e      	beq.n	14906 <__aeabi_dsub+0x3d2>
   14888:	4eb3      	ldr	r6, [pc, #716]	; (14b58 <__aeabi_dsub+0x624>)
   1488a:	45b4      	cmp	ip, r6
   1488c:	d045      	beq.n	1491a <__aeabi_dsub+0x3e6>
   1488e:	2680      	movs	r6, #128	; 0x80
   14890:	0436      	lsls	r6, r6, #16
   14892:	426d      	negs	r5, r5
   14894:	4334      	orrs	r4, r6
   14896:	2d38      	cmp	r5, #56	; 0x38
   14898:	dd00      	ble.n	1489c <__aeabi_dsub+0x368>
   1489a:	e0a8      	b.n	149ee <__aeabi_dsub+0x4ba>
   1489c:	2d1f      	cmp	r5, #31
   1489e:	dd00      	ble.n	148a2 <__aeabi_dsub+0x36e>
   148a0:	e11f      	b.n	14ae2 <__aeabi_dsub+0x5ae>
   148a2:	2620      	movs	r6, #32
   148a4:	0027      	movs	r7, r4
   148a6:	4650      	mov	r0, sl
   148a8:	1b76      	subs	r6, r6, r5
   148aa:	40b7      	lsls	r7, r6
   148ac:	40e8      	lsrs	r0, r5
   148ae:	4307      	orrs	r7, r0
   148b0:	4650      	mov	r0, sl
   148b2:	40b0      	lsls	r0, r6
   148b4:	1e46      	subs	r6, r0, #1
   148b6:	41b0      	sbcs	r0, r6
   148b8:	40ec      	lsrs	r4, r5
   148ba:	4338      	orrs	r0, r7
   148bc:	1a17      	subs	r7, r2, r0
   148be:	42ba      	cmp	r2, r7
   148c0:	4192      	sbcs	r2, r2
   148c2:	1b0c      	subs	r4, r1, r4
   148c4:	4252      	negs	r2, r2
   148c6:	1aa4      	subs	r4, r4, r2
   148c8:	4666      	mov	r6, ip
   148ca:	4698      	mov	r8, r3
   148cc:	e68b      	b.n	145e6 <__aeabi_dsub+0xb2>
   148ce:	4664      	mov	r4, ip
   148d0:	4667      	mov	r7, ip
   148d2:	432c      	orrs	r4, r5
   148d4:	d000      	beq.n	148d8 <__aeabi_dsub+0x3a4>
   148d6:	e68b      	b.n	145f0 <__aeabi_dsub+0xbc>
   148d8:	2500      	movs	r5, #0
   148da:	2600      	movs	r6, #0
   148dc:	2700      	movs	r7, #0
   148de:	e6ea      	b.n	146b6 <__aeabi_dsub+0x182>
   148e0:	001e      	movs	r6, r3
   148e2:	e6ad      	b.n	14640 <__aeabi_dsub+0x10c>
   148e4:	2b1f      	cmp	r3, #31
   148e6:	dc60      	bgt.n	149aa <__aeabi_dsub+0x476>
   148e8:	2720      	movs	r7, #32
   148ea:	1af8      	subs	r0, r7, r3
   148ec:	000f      	movs	r7, r1
   148ee:	4684      	mov	ip, r0
   148f0:	4087      	lsls	r7, r0
   148f2:	0010      	movs	r0, r2
   148f4:	40d8      	lsrs	r0, r3
   148f6:	4307      	orrs	r7, r0
   148f8:	4660      	mov	r0, ip
   148fa:	4082      	lsls	r2, r0
   148fc:	1e50      	subs	r0, r2, #1
   148fe:	4182      	sbcs	r2, r0
   14900:	40d9      	lsrs	r1, r3
   14902:	4317      	orrs	r7, r2
   14904:	e6f5      	b.n	146f2 <__aeabi_dsub+0x1be>
   14906:	0026      	movs	r6, r4
   14908:	4650      	mov	r0, sl
   1490a:	4306      	orrs	r6, r0
   1490c:	d005      	beq.n	1491a <__aeabi_dsub+0x3e6>
   1490e:	43ed      	mvns	r5, r5
   14910:	2d00      	cmp	r5, #0
   14912:	d0d3      	beq.n	148bc <__aeabi_dsub+0x388>
   14914:	4e90      	ldr	r6, [pc, #576]	; (14b58 <__aeabi_dsub+0x624>)
   14916:	45b4      	cmp	ip, r6
   14918:	d1bd      	bne.n	14896 <__aeabi_dsub+0x362>
   1491a:	000c      	movs	r4, r1
   1491c:	0017      	movs	r7, r2
   1491e:	4666      	mov	r6, ip
   14920:	4698      	mov	r8, r3
   14922:	e68d      	b.n	14640 <__aeabi_dsub+0x10c>
   14924:	488c      	ldr	r0, [pc, #560]	; (14b58 <__aeabi_dsub+0x624>)
   14926:	4283      	cmp	r3, r0
   14928:	d00b      	beq.n	14942 <__aeabi_dsub+0x40e>
   1492a:	4663      	mov	r3, ip
   1492c:	e6d9      	b.n	146e2 <__aeabi_dsub+0x1ae>
   1492e:	2d00      	cmp	r5, #0
   14930:	d000      	beq.n	14934 <__aeabi_dsub+0x400>
   14932:	e096      	b.n	14a62 <__aeabi_dsub+0x52e>
   14934:	0008      	movs	r0, r1
   14936:	4310      	orrs	r0, r2
   14938:	d100      	bne.n	1493c <__aeabi_dsub+0x408>
   1493a:	e0e2      	b.n	14b02 <__aeabi_dsub+0x5ce>
   1493c:	000c      	movs	r4, r1
   1493e:	0017      	movs	r7, r2
   14940:	4698      	mov	r8, r3
   14942:	4e85      	ldr	r6, [pc, #532]	; (14b58 <__aeabi_dsub+0x624>)
   14944:	e67c      	b.n	14640 <__aeabi_dsub+0x10c>
   14946:	2500      	movs	r5, #0
   14948:	e780      	b.n	1484c <__aeabi_dsub+0x318>
   1494a:	2100      	movs	r1, #0
   1494c:	e78e      	b.n	1486c <__aeabi_dsub+0x338>
   1494e:	0023      	movs	r3, r4
   14950:	4650      	mov	r0, sl
   14952:	4303      	orrs	r3, r0
   14954:	2e00      	cmp	r6, #0
   14956:	d000      	beq.n	1495a <__aeabi_dsub+0x426>
   14958:	e0a8      	b.n	14aac <__aeabi_dsub+0x578>
   1495a:	2b00      	cmp	r3, #0
   1495c:	d100      	bne.n	14960 <__aeabi_dsub+0x42c>
   1495e:	e0de      	b.n	14b1e <__aeabi_dsub+0x5ea>
   14960:	000b      	movs	r3, r1
   14962:	4313      	orrs	r3, r2
   14964:	d100      	bne.n	14968 <__aeabi_dsub+0x434>
   14966:	e66b      	b.n	14640 <__aeabi_dsub+0x10c>
   14968:	4452      	add	r2, sl
   1496a:	4552      	cmp	r2, sl
   1496c:	4180      	sbcs	r0, r0
   1496e:	1864      	adds	r4, r4, r1
   14970:	4240      	negs	r0, r0
   14972:	1824      	adds	r4, r4, r0
   14974:	0017      	movs	r7, r2
   14976:	0223      	lsls	r3, r4, #8
   14978:	d400      	bmi.n	1497c <__aeabi_dsub+0x448>
   1497a:	e6fd      	b.n	14778 <__aeabi_dsub+0x244>
   1497c:	4b77      	ldr	r3, [pc, #476]	; (14b5c <__aeabi_dsub+0x628>)
   1497e:	4666      	mov	r6, ip
   14980:	401c      	ands	r4, r3
   14982:	e65d      	b.n	14640 <__aeabi_dsub+0x10c>
   14984:	0025      	movs	r5, r4
   14986:	4650      	mov	r0, sl
   14988:	4305      	orrs	r5, r0
   1498a:	2e00      	cmp	r6, #0
   1498c:	d1cf      	bne.n	1492e <__aeabi_dsub+0x3fa>
   1498e:	2d00      	cmp	r5, #0
   14990:	d14f      	bne.n	14a32 <__aeabi_dsub+0x4fe>
   14992:	000c      	movs	r4, r1
   14994:	4314      	orrs	r4, r2
   14996:	d100      	bne.n	1499a <__aeabi_dsub+0x466>
   14998:	e0a0      	b.n	14adc <__aeabi_dsub+0x5a8>
   1499a:	000c      	movs	r4, r1
   1499c:	0017      	movs	r7, r2
   1499e:	4698      	mov	r8, r3
   149a0:	e64e      	b.n	14640 <__aeabi_dsub+0x10c>
   149a2:	4666      	mov	r6, ip
   149a4:	2400      	movs	r4, #0
   149a6:	2700      	movs	r7, #0
   149a8:	e685      	b.n	146b6 <__aeabi_dsub+0x182>
   149aa:	001f      	movs	r7, r3
   149ac:	0008      	movs	r0, r1
   149ae:	3f20      	subs	r7, #32
   149b0:	40f8      	lsrs	r0, r7
   149b2:	0007      	movs	r7, r0
   149b4:	2b20      	cmp	r3, #32
   149b6:	d100      	bne.n	149ba <__aeabi_dsub+0x486>
   149b8:	e08e      	b.n	14ad8 <__aeabi_dsub+0x5a4>
   149ba:	2040      	movs	r0, #64	; 0x40
   149bc:	1ac3      	subs	r3, r0, r3
   149be:	4099      	lsls	r1, r3
   149c0:	430a      	orrs	r2, r1
   149c2:	1e51      	subs	r1, r2, #1
   149c4:	418a      	sbcs	r2, r1
   149c6:	2100      	movs	r1, #0
   149c8:	4317      	orrs	r7, r2
   149ca:	e692      	b.n	146f2 <__aeabi_dsub+0x1be>
   149cc:	2e00      	cmp	r6, #0
   149ce:	d114      	bne.n	149fa <__aeabi_dsub+0x4c6>
   149d0:	0026      	movs	r6, r4
   149d2:	4650      	mov	r0, sl
   149d4:	4306      	orrs	r6, r0
   149d6:	d062      	beq.n	14a9e <__aeabi_dsub+0x56a>
   149d8:	43db      	mvns	r3, r3
   149da:	2b00      	cmp	r3, #0
   149dc:	d15c      	bne.n	14a98 <__aeabi_dsub+0x564>
   149de:	1887      	adds	r7, r0, r2
   149e0:	4297      	cmp	r7, r2
   149e2:	4192      	sbcs	r2, r2
   149e4:	1864      	adds	r4, r4, r1
   149e6:	4252      	negs	r2, r2
   149e8:	18a4      	adds	r4, r4, r2
   149ea:	4666      	mov	r6, ip
   149ec:	e687      	b.n	146fe <__aeabi_dsub+0x1ca>
   149ee:	4650      	mov	r0, sl
   149f0:	4320      	orrs	r0, r4
   149f2:	1e44      	subs	r4, r0, #1
   149f4:	41a0      	sbcs	r0, r4
   149f6:	2400      	movs	r4, #0
   149f8:	e760      	b.n	148bc <__aeabi_dsub+0x388>
   149fa:	4e57      	ldr	r6, [pc, #348]	; (14b58 <__aeabi_dsub+0x624>)
   149fc:	45b4      	cmp	ip, r6
   149fe:	d04e      	beq.n	14a9e <__aeabi_dsub+0x56a>
   14a00:	2680      	movs	r6, #128	; 0x80
   14a02:	0436      	lsls	r6, r6, #16
   14a04:	425b      	negs	r3, r3
   14a06:	4334      	orrs	r4, r6
   14a08:	2b38      	cmp	r3, #56	; 0x38
   14a0a:	dd00      	ble.n	14a0e <__aeabi_dsub+0x4da>
   14a0c:	e07f      	b.n	14b0e <__aeabi_dsub+0x5da>
   14a0e:	2b1f      	cmp	r3, #31
   14a10:	dd00      	ble.n	14a14 <__aeabi_dsub+0x4e0>
   14a12:	e08b      	b.n	14b2c <__aeabi_dsub+0x5f8>
   14a14:	2620      	movs	r6, #32
   14a16:	0027      	movs	r7, r4
   14a18:	4650      	mov	r0, sl
   14a1a:	1af6      	subs	r6, r6, r3
   14a1c:	40b7      	lsls	r7, r6
   14a1e:	40d8      	lsrs	r0, r3
   14a20:	4307      	orrs	r7, r0
   14a22:	4650      	mov	r0, sl
   14a24:	40b0      	lsls	r0, r6
   14a26:	1e46      	subs	r6, r0, #1
   14a28:	41b0      	sbcs	r0, r6
   14a2a:	4307      	orrs	r7, r0
   14a2c:	40dc      	lsrs	r4, r3
   14a2e:	18bf      	adds	r7, r7, r2
   14a30:	e7d6      	b.n	149e0 <__aeabi_dsub+0x4ac>
   14a32:	000d      	movs	r5, r1
   14a34:	4315      	orrs	r5, r2
   14a36:	d100      	bne.n	14a3a <__aeabi_dsub+0x506>
   14a38:	e602      	b.n	14640 <__aeabi_dsub+0x10c>
   14a3a:	4650      	mov	r0, sl
   14a3c:	1a80      	subs	r0, r0, r2
   14a3e:	4582      	cmp	sl, r0
   14a40:	41bf      	sbcs	r7, r7
   14a42:	1a65      	subs	r5, r4, r1
   14a44:	427f      	negs	r7, r7
   14a46:	1bed      	subs	r5, r5, r7
   14a48:	4684      	mov	ip, r0
   14a4a:	0228      	lsls	r0, r5, #8
   14a4c:	d400      	bmi.n	14a50 <__aeabi_dsub+0x51c>
   14a4e:	e68d      	b.n	1476c <__aeabi_dsub+0x238>
   14a50:	4650      	mov	r0, sl
   14a52:	1a17      	subs	r7, r2, r0
   14a54:	42ba      	cmp	r2, r7
   14a56:	4192      	sbcs	r2, r2
   14a58:	1b0c      	subs	r4, r1, r4
   14a5a:	4252      	negs	r2, r2
   14a5c:	1aa4      	subs	r4, r4, r2
   14a5e:	4698      	mov	r8, r3
   14a60:	e5ee      	b.n	14640 <__aeabi_dsub+0x10c>
   14a62:	000d      	movs	r5, r1
   14a64:	4315      	orrs	r5, r2
   14a66:	d100      	bne.n	14a6a <__aeabi_dsub+0x536>
   14a68:	e76b      	b.n	14942 <__aeabi_dsub+0x40e>
   14a6a:	4650      	mov	r0, sl
   14a6c:	0767      	lsls	r7, r4, #29
   14a6e:	08c0      	lsrs	r0, r0, #3
   14a70:	4307      	orrs	r7, r0
   14a72:	2080      	movs	r0, #128	; 0x80
   14a74:	08e4      	lsrs	r4, r4, #3
   14a76:	0300      	lsls	r0, r0, #12
   14a78:	4204      	tst	r4, r0
   14a7a:	d007      	beq.n	14a8c <__aeabi_dsub+0x558>
   14a7c:	08cd      	lsrs	r5, r1, #3
   14a7e:	4205      	tst	r5, r0
   14a80:	d104      	bne.n	14a8c <__aeabi_dsub+0x558>
   14a82:	002c      	movs	r4, r5
   14a84:	4698      	mov	r8, r3
   14a86:	08d7      	lsrs	r7, r2, #3
   14a88:	0749      	lsls	r1, r1, #29
   14a8a:	430f      	orrs	r7, r1
   14a8c:	0f7b      	lsrs	r3, r7, #29
   14a8e:	00e4      	lsls	r4, r4, #3
   14a90:	431c      	orrs	r4, r3
   14a92:	00ff      	lsls	r7, r7, #3
   14a94:	4e30      	ldr	r6, [pc, #192]	; (14b58 <__aeabi_dsub+0x624>)
   14a96:	e5d3      	b.n	14640 <__aeabi_dsub+0x10c>
   14a98:	4e2f      	ldr	r6, [pc, #188]	; (14b58 <__aeabi_dsub+0x624>)
   14a9a:	45b4      	cmp	ip, r6
   14a9c:	d1b4      	bne.n	14a08 <__aeabi_dsub+0x4d4>
   14a9e:	000c      	movs	r4, r1
   14aa0:	0017      	movs	r7, r2
   14aa2:	4666      	mov	r6, ip
   14aa4:	e5cc      	b.n	14640 <__aeabi_dsub+0x10c>
   14aa6:	2700      	movs	r7, #0
   14aa8:	2400      	movs	r4, #0
   14aaa:	e5e8      	b.n	1467e <__aeabi_dsub+0x14a>
   14aac:	2b00      	cmp	r3, #0
   14aae:	d039      	beq.n	14b24 <__aeabi_dsub+0x5f0>
   14ab0:	000b      	movs	r3, r1
   14ab2:	4313      	orrs	r3, r2
   14ab4:	d100      	bne.n	14ab8 <__aeabi_dsub+0x584>
   14ab6:	e744      	b.n	14942 <__aeabi_dsub+0x40e>
   14ab8:	08c0      	lsrs	r0, r0, #3
   14aba:	0767      	lsls	r7, r4, #29
   14abc:	4307      	orrs	r7, r0
   14abe:	2080      	movs	r0, #128	; 0x80
   14ac0:	08e4      	lsrs	r4, r4, #3
   14ac2:	0300      	lsls	r0, r0, #12
   14ac4:	4204      	tst	r4, r0
   14ac6:	d0e1      	beq.n	14a8c <__aeabi_dsub+0x558>
   14ac8:	08cb      	lsrs	r3, r1, #3
   14aca:	4203      	tst	r3, r0
   14acc:	d1de      	bne.n	14a8c <__aeabi_dsub+0x558>
   14ace:	08d7      	lsrs	r7, r2, #3
   14ad0:	0749      	lsls	r1, r1, #29
   14ad2:	430f      	orrs	r7, r1
   14ad4:	001c      	movs	r4, r3
   14ad6:	e7d9      	b.n	14a8c <__aeabi_dsub+0x558>
   14ad8:	2100      	movs	r1, #0
   14ada:	e771      	b.n	149c0 <__aeabi_dsub+0x48c>
   14adc:	2500      	movs	r5, #0
   14ade:	2700      	movs	r7, #0
   14ae0:	e5e9      	b.n	146b6 <__aeabi_dsub+0x182>
   14ae2:	002e      	movs	r6, r5
   14ae4:	0027      	movs	r7, r4
   14ae6:	3e20      	subs	r6, #32
   14ae8:	40f7      	lsrs	r7, r6
   14aea:	2d20      	cmp	r5, #32
   14aec:	d02f      	beq.n	14b4e <__aeabi_dsub+0x61a>
   14aee:	2640      	movs	r6, #64	; 0x40
   14af0:	1b75      	subs	r5, r6, r5
   14af2:	40ac      	lsls	r4, r5
   14af4:	4650      	mov	r0, sl
   14af6:	4320      	orrs	r0, r4
   14af8:	1e44      	subs	r4, r0, #1
   14afa:	41a0      	sbcs	r0, r4
   14afc:	2400      	movs	r4, #0
   14afe:	4338      	orrs	r0, r7
   14b00:	e6dc      	b.n	148bc <__aeabi_dsub+0x388>
   14b02:	2480      	movs	r4, #128	; 0x80
   14b04:	2500      	movs	r5, #0
   14b06:	0324      	lsls	r4, r4, #12
   14b08:	4e13      	ldr	r6, [pc, #76]	; (14b58 <__aeabi_dsub+0x624>)
   14b0a:	2700      	movs	r7, #0
   14b0c:	e5d3      	b.n	146b6 <__aeabi_dsub+0x182>
   14b0e:	4650      	mov	r0, sl
   14b10:	4320      	orrs	r0, r4
   14b12:	0007      	movs	r7, r0
   14b14:	1e78      	subs	r0, r7, #1
   14b16:	4187      	sbcs	r7, r0
   14b18:	2400      	movs	r4, #0
   14b1a:	18bf      	adds	r7, r7, r2
   14b1c:	e760      	b.n	149e0 <__aeabi_dsub+0x4ac>
   14b1e:	000c      	movs	r4, r1
   14b20:	0017      	movs	r7, r2
   14b22:	e58d      	b.n	14640 <__aeabi_dsub+0x10c>
   14b24:	000c      	movs	r4, r1
   14b26:	0017      	movs	r7, r2
   14b28:	4e0b      	ldr	r6, [pc, #44]	; (14b58 <__aeabi_dsub+0x624>)
   14b2a:	e589      	b.n	14640 <__aeabi_dsub+0x10c>
   14b2c:	001e      	movs	r6, r3
   14b2e:	0027      	movs	r7, r4
   14b30:	3e20      	subs	r6, #32
   14b32:	40f7      	lsrs	r7, r6
   14b34:	2b20      	cmp	r3, #32
   14b36:	d00c      	beq.n	14b52 <__aeabi_dsub+0x61e>
   14b38:	2640      	movs	r6, #64	; 0x40
   14b3a:	1af3      	subs	r3, r6, r3
   14b3c:	409c      	lsls	r4, r3
   14b3e:	4650      	mov	r0, sl
   14b40:	4320      	orrs	r0, r4
   14b42:	1e44      	subs	r4, r0, #1
   14b44:	41a0      	sbcs	r0, r4
   14b46:	4307      	orrs	r7, r0
   14b48:	2400      	movs	r4, #0
   14b4a:	18bf      	adds	r7, r7, r2
   14b4c:	e748      	b.n	149e0 <__aeabi_dsub+0x4ac>
   14b4e:	2400      	movs	r4, #0
   14b50:	e7d0      	b.n	14af4 <__aeabi_dsub+0x5c0>
   14b52:	2400      	movs	r4, #0
   14b54:	e7f3      	b.n	14b3e <__aeabi_dsub+0x60a>
   14b56:	46c0      	nop			; (mov r8, r8)
   14b58:	000007ff 	.word	0x000007ff
   14b5c:	ff7fffff 	.word	0xff7fffff

00014b60 <__aeabi_d2iz>:
   14b60:	b530      	push	{r4, r5, lr}
   14b62:	4d13      	ldr	r5, [pc, #76]	; (14bb0 <__aeabi_d2iz+0x50>)
   14b64:	030a      	lsls	r2, r1, #12
   14b66:	004b      	lsls	r3, r1, #1
   14b68:	0b12      	lsrs	r2, r2, #12
   14b6a:	0d5b      	lsrs	r3, r3, #21
   14b6c:	0fc9      	lsrs	r1, r1, #31
   14b6e:	2400      	movs	r4, #0
   14b70:	42ab      	cmp	r3, r5
   14b72:	dd10      	ble.n	14b96 <__aeabi_d2iz+0x36>
   14b74:	4c0f      	ldr	r4, [pc, #60]	; (14bb4 <__aeabi_d2iz+0x54>)
   14b76:	42a3      	cmp	r3, r4
   14b78:	dc0f      	bgt.n	14b9a <__aeabi_d2iz+0x3a>
   14b7a:	2480      	movs	r4, #128	; 0x80
   14b7c:	4d0e      	ldr	r5, [pc, #56]	; (14bb8 <__aeabi_d2iz+0x58>)
   14b7e:	0364      	lsls	r4, r4, #13
   14b80:	4322      	orrs	r2, r4
   14b82:	1aed      	subs	r5, r5, r3
   14b84:	2d1f      	cmp	r5, #31
   14b86:	dd0b      	ble.n	14ba0 <__aeabi_d2iz+0x40>
   14b88:	480c      	ldr	r0, [pc, #48]	; (14bbc <__aeabi_d2iz+0x5c>)
   14b8a:	1ac3      	subs	r3, r0, r3
   14b8c:	40da      	lsrs	r2, r3
   14b8e:	4254      	negs	r4, r2
   14b90:	2900      	cmp	r1, #0
   14b92:	d100      	bne.n	14b96 <__aeabi_d2iz+0x36>
   14b94:	0014      	movs	r4, r2
   14b96:	0020      	movs	r0, r4
   14b98:	bd30      	pop	{r4, r5, pc}
   14b9a:	4b09      	ldr	r3, [pc, #36]	; (14bc0 <__aeabi_d2iz+0x60>)
   14b9c:	18cc      	adds	r4, r1, r3
   14b9e:	e7fa      	b.n	14b96 <__aeabi_d2iz+0x36>
   14ba0:	4c08      	ldr	r4, [pc, #32]	; (14bc4 <__aeabi_d2iz+0x64>)
   14ba2:	40e8      	lsrs	r0, r5
   14ba4:	46a4      	mov	ip, r4
   14ba6:	4463      	add	r3, ip
   14ba8:	409a      	lsls	r2, r3
   14baa:	4302      	orrs	r2, r0
   14bac:	e7ef      	b.n	14b8e <__aeabi_d2iz+0x2e>
   14bae:	46c0      	nop			; (mov r8, r8)
   14bb0:	000003fe 	.word	0x000003fe
   14bb4:	0000041d 	.word	0x0000041d
   14bb8:	00000433 	.word	0x00000433
   14bbc:	00000413 	.word	0x00000413
   14bc0:	7fffffff 	.word	0x7fffffff
   14bc4:	fffffbed 	.word	0xfffffbed

00014bc8 <__aeabi_ui2d>:
   14bc8:	b510      	push	{r4, lr}
   14bca:	1e04      	subs	r4, r0, #0
   14bcc:	d028      	beq.n	14c20 <__aeabi_ui2d+0x58>
   14bce:	f000 f833 	bl	14c38 <__clzsi2>
   14bd2:	4b15      	ldr	r3, [pc, #84]	; (14c28 <__aeabi_ui2d+0x60>)
   14bd4:	4a15      	ldr	r2, [pc, #84]	; (14c2c <__aeabi_ui2d+0x64>)
   14bd6:	1a1b      	subs	r3, r3, r0
   14bd8:	1ad2      	subs	r2, r2, r3
   14bda:	2a1f      	cmp	r2, #31
   14bdc:	dd15      	ble.n	14c0a <__aeabi_ui2d+0x42>
   14bde:	4a14      	ldr	r2, [pc, #80]	; (14c30 <__aeabi_ui2d+0x68>)
   14be0:	1ad2      	subs	r2, r2, r3
   14be2:	4094      	lsls	r4, r2
   14be4:	2200      	movs	r2, #0
   14be6:	0324      	lsls	r4, r4, #12
   14be8:	055b      	lsls	r3, r3, #21
   14bea:	0b24      	lsrs	r4, r4, #12
   14bec:	0d5b      	lsrs	r3, r3, #21
   14bee:	2100      	movs	r1, #0
   14bf0:	0010      	movs	r0, r2
   14bf2:	0324      	lsls	r4, r4, #12
   14bf4:	0d0a      	lsrs	r2, r1, #20
   14bf6:	0b24      	lsrs	r4, r4, #12
   14bf8:	0512      	lsls	r2, r2, #20
   14bfa:	4322      	orrs	r2, r4
   14bfc:	4c0d      	ldr	r4, [pc, #52]	; (14c34 <__aeabi_ui2d+0x6c>)
   14bfe:	051b      	lsls	r3, r3, #20
   14c00:	4022      	ands	r2, r4
   14c02:	4313      	orrs	r3, r2
   14c04:	005b      	lsls	r3, r3, #1
   14c06:	0859      	lsrs	r1, r3, #1
   14c08:	bd10      	pop	{r4, pc}
   14c0a:	0021      	movs	r1, r4
   14c0c:	4091      	lsls	r1, r2
   14c0e:	000a      	movs	r2, r1
   14c10:	210b      	movs	r1, #11
   14c12:	1a08      	subs	r0, r1, r0
   14c14:	40c4      	lsrs	r4, r0
   14c16:	055b      	lsls	r3, r3, #21
   14c18:	0324      	lsls	r4, r4, #12
   14c1a:	0b24      	lsrs	r4, r4, #12
   14c1c:	0d5b      	lsrs	r3, r3, #21
   14c1e:	e7e6      	b.n	14bee <__aeabi_ui2d+0x26>
   14c20:	2300      	movs	r3, #0
   14c22:	2400      	movs	r4, #0
   14c24:	2200      	movs	r2, #0
   14c26:	e7e2      	b.n	14bee <__aeabi_ui2d+0x26>
   14c28:	0000041e 	.word	0x0000041e
   14c2c:	00000433 	.word	0x00000433
   14c30:	00000413 	.word	0x00000413
   14c34:	800fffff 	.word	0x800fffff

00014c38 <__clzsi2>:
   14c38:	211c      	movs	r1, #28
   14c3a:	2301      	movs	r3, #1
   14c3c:	041b      	lsls	r3, r3, #16
   14c3e:	4298      	cmp	r0, r3
   14c40:	d301      	bcc.n	14c46 <__clzsi2+0xe>
   14c42:	0c00      	lsrs	r0, r0, #16
   14c44:	3910      	subs	r1, #16
   14c46:	0a1b      	lsrs	r3, r3, #8
   14c48:	4298      	cmp	r0, r3
   14c4a:	d301      	bcc.n	14c50 <__clzsi2+0x18>
   14c4c:	0a00      	lsrs	r0, r0, #8
   14c4e:	3908      	subs	r1, #8
   14c50:	091b      	lsrs	r3, r3, #4
   14c52:	4298      	cmp	r0, r3
   14c54:	d301      	bcc.n	14c5a <__clzsi2+0x22>
   14c56:	0900      	lsrs	r0, r0, #4
   14c58:	3904      	subs	r1, #4
   14c5a:	a202      	add	r2, pc, #8	; (adr r2, 14c64 <__clzsi2+0x2c>)
   14c5c:	5c10      	ldrb	r0, [r2, r0]
   14c5e:	1840      	adds	r0, r0, r1
   14c60:	4770      	bx	lr
   14c62:	46c0      	nop			; (mov r8, r8)
   14c64:	02020304 	.word	0x02020304
   14c68:	01010101 	.word	0x01010101
	...

00014c74 <__assert_func>:
   14c74:	b530      	push	{r4, r5, lr}
   14c76:	001c      	movs	r4, r3
   14c78:	4b09      	ldr	r3, [pc, #36]	; (14ca0 <__assert_func+0x2c>)
   14c7a:	0005      	movs	r5, r0
   14c7c:	681b      	ldr	r3, [r3, #0]
   14c7e:	b085      	sub	sp, #20
   14c80:	68d8      	ldr	r0, [r3, #12]
   14c82:	4b08      	ldr	r3, [pc, #32]	; (14ca4 <__assert_func+0x30>)
   14c84:	2a00      	cmp	r2, #0
   14c86:	d101      	bne.n	14c8c <__assert_func+0x18>
   14c88:	4b07      	ldr	r3, [pc, #28]	; (14ca8 <__assert_func+0x34>)
   14c8a:	001a      	movs	r2, r3
   14c8c:	9202      	str	r2, [sp, #8]
   14c8e:	9301      	str	r3, [sp, #4]
   14c90:	9100      	str	r1, [sp, #0]
   14c92:	002b      	movs	r3, r5
   14c94:	0022      	movs	r2, r4
   14c96:	4905      	ldr	r1, [pc, #20]	; (14cac <__assert_func+0x38>)
   14c98:	f000 f80a 	bl	14cb0 <fiprintf>
   14c9c:	f000 fd2e 	bl	156fc <abort>
   14ca0:	200000a0 	.word	0x200000a0
   14ca4:	0001686c 	.word	0x0001686c
   14ca8:	000168a7 	.word	0x000168a7
   14cac:	00016879 	.word	0x00016879

00014cb0 <fiprintf>:
   14cb0:	b40e      	push	{r1, r2, r3}
   14cb2:	b503      	push	{r0, r1, lr}
   14cb4:	0001      	movs	r1, r0
   14cb6:	ab03      	add	r3, sp, #12
   14cb8:	4804      	ldr	r0, [pc, #16]	; (14ccc <fiprintf+0x1c>)
   14cba:	cb04      	ldmia	r3!, {r2}
   14cbc:	6800      	ldr	r0, [r0, #0]
   14cbe:	9301      	str	r3, [sp, #4]
   14cc0:	f000 f872 	bl	14da8 <_vfiprintf_r>
   14cc4:	b002      	add	sp, #8
   14cc6:	bc08      	pop	{r3}
   14cc8:	b003      	add	sp, #12
   14cca:	4718      	bx	r3
   14ccc:	200000a0 	.word	0x200000a0

00014cd0 <__libc_init_array>:
   14cd0:	b570      	push	{r4, r5, r6, lr}
   14cd2:	2600      	movs	r6, #0
   14cd4:	4d0c      	ldr	r5, [pc, #48]	; (14d08 <__libc_init_array+0x38>)
   14cd6:	4c0d      	ldr	r4, [pc, #52]	; (14d0c <__libc_init_array+0x3c>)
   14cd8:	1b64      	subs	r4, r4, r5
   14cda:	10a4      	asrs	r4, r4, #2
   14cdc:	42a6      	cmp	r6, r4
   14cde:	d109      	bne.n	14cf4 <__libc_init_array+0x24>
   14ce0:	2600      	movs	r6, #0
   14ce2:	f001 fe2d 	bl	16940 <_init>
   14ce6:	4d0a      	ldr	r5, [pc, #40]	; (14d10 <__libc_init_array+0x40>)
   14ce8:	4c0a      	ldr	r4, [pc, #40]	; (14d14 <__libc_init_array+0x44>)
   14cea:	1b64      	subs	r4, r4, r5
   14cec:	10a4      	asrs	r4, r4, #2
   14cee:	42a6      	cmp	r6, r4
   14cf0:	d105      	bne.n	14cfe <__libc_init_array+0x2e>
   14cf2:	bd70      	pop	{r4, r5, r6, pc}
   14cf4:	00b3      	lsls	r3, r6, #2
   14cf6:	58eb      	ldr	r3, [r5, r3]
   14cf8:	4798      	blx	r3
   14cfa:	3601      	adds	r6, #1
   14cfc:	e7ee      	b.n	14cdc <__libc_init_array+0xc>
   14cfe:	00b3      	lsls	r3, r6, #2
   14d00:	58eb      	ldr	r3, [r5, r3]
   14d02:	4798      	blx	r3
   14d04:	3601      	adds	r6, #1
   14d06:	e7f2      	b.n	14cee <__libc_init_array+0x1e>
   14d08:	0001694c 	.word	0x0001694c
   14d0c:	0001694c 	.word	0x0001694c
   14d10:	0001694c 	.word	0x0001694c
   14d14:	00016950 	.word	0x00016950

00014d18 <memcmp>:
   14d18:	b530      	push	{r4, r5, lr}
   14d1a:	2400      	movs	r4, #0
   14d1c:	42a2      	cmp	r2, r4
   14d1e:	d101      	bne.n	14d24 <memcmp+0xc>
   14d20:	2000      	movs	r0, #0
   14d22:	e005      	b.n	14d30 <memcmp+0x18>
   14d24:	5d03      	ldrb	r3, [r0, r4]
   14d26:	1c65      	adds	r5, r4, #1
   14d28:	5d0c      	ldrb	r4, [r1, r4]
   14d2a:	42a3      	cmp	r3, r4
   14d2c:	d001      	beq.n	14d32 <memcmp+0x1a>
   14d2e:	1b18      	subs	r0, r3, r4
   14d30:	bd30      	pop	{r4, r5, pc}
   14d32:	002c      	movs	r4, r5
   14d34:	e7f2      	b.n	14d1c <memcmp+0x4>

00014d36 <memcpy>:
   14d36:	2300      	movs	r3, #0
   14d38:	b510      	push	{r4, lr}
   14d3a:	429a      	cmp	r2, r3
   14d3c:	d100      	bne.n	14d40 <memcpy+0xa>
   14d3e:	bd10      	pop	{r4, pc}
   14d40:	5ccc      	ldrb	r4, [r1, r3]
   14d42:	54c4      	strb	r4, [r0, r3]
   14d44:	3301      	adds	r3, #1
   14d46:	e7f8      	b.n	14d3a <memcpy+0x4>

00014d48 <memset>:
   14d48:	0003      	movs	r3, r0
   14d4a:	1882      	adds	r2, r0, r2
   14d4c:	4293      	cmp	r3, r2
   14d4e:	d100      	bne.n	14d52 <memset+0xa>
   14d50:	4770      	bx	lr
   14d52:	7019      	strb	r1, [r3, #0]
   14d54:	3301      	adds	r3, #1
   14d56:	e7f9      	b.n	14d4c <memset+0x4>

00014d58 <__sfputc_r>:
   14d58:	6893      	ldr	r3, [r2, #8]
   14d5a:	b510      	push	{r4, lr}
   14d5c:	3b01      	subs	r3, #1
   14d5e:	6093      	str	r3, [r2, #8]
   14d60:	2b00      	cmp	r3, #0
   14d62:	da05      	bge.n	14d70 <__sfputc_r+0x18>
   14d64:	6994      	ldr	r4, [r2, #24]
   14d66:	42a3      	cmp	r3, r4
   14d68:	db08      	blt.n	14d7c <__sfputc_r+0x24>
   14d6a:	b2cb      	uxtb	r3, r1
   14d6c:	2b0a      	cmp	r3, #10
   14d6e:	d005      	beq.n	14d7c <__sfputc_r+0x24>
   14d70:	6813      	ldr	r3, [r2, #0]
   14d72:	1c58      	adds	r0, r3, #1
   14d74:	6010      	str	r0, [r2, #0]
   14d76:	7019      	strb	r1, [r3, #0]
   14d78:	b2c8      	uxtb	r0, r1
   14d7a:	bd10      	pop	{r4, pc}
   14d7c:	f000 fbf2 	bl	15564 <__swbuf_r>
   14d80:	e7fb      	b.n	14d7a <__sfputc_r+0x22>

00014d82 <__sfputs_r>:
   14d82:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   14d84:	0006      	movs	r6, r0
   14d86:	000f      	movs	r7, r1
   14d88:	0014      	movs	r4, r2
   14d8a:	18d5      	adds	r5, r2, r3
   14d8c:	42ac      	cmp	r4, r5
   14d8e:	d101      	bne.n	14d94 <__sfputs_r+0x12>
   14d90:	2000      	movs	r0, #0
   14d92:	e007      	b.n	14da4 <__sfputs_r+0x22>
   14d94:	7821      	ldrb	r1, [r4, #0]
   14d96:	003a      	movs	r2, r7
   14d98:	0030      	movs	r0, r6
   14d9a:	f7ff ffdd 	bl	14d58 <__sfputc_r>
   14d9e:	3401      	adds	r4, #1
   14da0:	1c43      	adds	r3, r0, #1
   14da2:	d1f3      	bne.n	14d8c <__sfputs_r+0xa>
   14da4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   14da6:	Address 0x00014da6 is out of bounds.


00014da8 <_vfiprintf_r>:
   14da8:	b5f0      	push	{r4, r5, r6, r7, lr}
   14daa:	b09f      	sub	sp, #124	; 0x7c
   14dac:	0006      	movs	r6, r0
   14dae:	000f      	movs	r7, r1
   14db0:	0014      	movs	r4, r2
   14db2:	9305      	str	r3, [sp, #20]
   14db4:	2800      	cmp	r0, #0
   14db6:	d004      	beq.n	14dc2 <_vfiprintf_r+0x1a>
   14db8:	6983      	ldr	r3, [r0, #24]
   14dba:	2b00      	cmp	r3, #0
   14dbc:	d101      	bne.n	14dc2 <_vfiprintf_r+0x1a>
   14dbe:	f000 fd9d 	bl	158fc <__sinit>
   14dc2:	4b7f      	ldr	r3, [pc, #508]	; (14fc0 <_vfiprintf_r+0x218>)
   14dc4:	429f      	cmp	r7, r3
   14dc6:	d15c      	bne.n	14e82 <_vfiprintf_r+0xda>
   14dc8:	6877      	ldr	r7, [r6, #4]
   14dca:	89bb      	ldrh	r3, [r7, #12]
   14dcc:	071b      	lsls	r3, r3, #28
   14dce:	d562      	bpl.n	14e96 <_vfiprintf_r+0xee>
   14dd0:	693b      	ldr	r3, [r7, #16]
   14dd2:	2b00      	cmp	r3, #0
   14dd4:	d05f      	beq.n	14e96 <_vfiprintf_r+0xee>
   14dd6:	2300      	movs	r3, #0
   14dd8:	ad06      	add	r5, sp, #24
   14dda:	616b      	str	r3, [r5, #20]
   14ddc:	3320      	adds	r3, #32
   14dde:	766b      	strb	r3, [r5, #25]
   14de0:	3310      	adds	r3, #16
   14de2:	76ab      	strb	r3, [r5, #26]
   14de4:	9402      	str	r4, [sp, #8]
   14de6:	9c02      	ldr	r4, [sp, #8]
   14de8:	7823      	ldrb	r3, [r4, #0]
   14dea:	2b00      	cmp	r3, #0
   14dec:	d15d      	bne.n	14eaa <_vfiprintf_r+0x102>
   14dee:	9b02      	ldr	r3, [sp, #8]
   14df0:	1ae3      	subs	r3, r4, r3
   14df2:	9304      	str	r3, [sp, #16]
   14df4:	d00d      	beq.n	14e12 <_vfiprintf_r+0x6a>
   14df6:	9b04      	ldr	r3, [sp, #16]
   14df8:	9a02      	ldr	r2, [sp, #8]
   14dfa:	0039      	movs	r1, r7
   14dfc:	0030      	movs	r0, r6
   14dfe:	f7ff ffc0 	bl	14d82 <__sfputs_r>
   14e02:	1c43      	adds	r3, r0, #1
   14e04:	d100      	bne.n	14e08 <_vfiprintf_r+0x60>
   14e06:	e0cc      	b.n	14fa2 <_vfiprintf_r+0x1fa>
   14e08:	696a      	ldr	r2, [r5, #20]
   14e0a:	9b04      	ldr	r3, [sp, #16]
   14e0c:	4694      	mov	ip, r2
   14e0e:	4463      	add	r3, ip
   14e10:	616b      	str	r3, [r5, #20]
   14e12:	7823      	ldrb	r3, [r4, #0]
   14e14:	2b00      	cmp	r3, #0
   14e16:	d100      	bne.n	14e1a <_vfiprintf_r+0x72>
   14e18:	e0c3      	b.n	14fa2 <_vfiprintf_r+0x1fa>
   14e1a:	2201      	movs	r2, #1
   14e1c:	2300      	movs	r3, #0
   14e1e:	4252      	negs	r2, r2
   14e20:	606a      	str	r2, [r5, #4]
   14e22:	a902      	add	r1, sp, #8
   14e24:	3254      	adds	r2, #84	; 0x54
   14e26:	1852      	adds	r2, r2, r1
   14e28:	3401      	adds	r4, #1
   14e2a:	602b      	str	r3, [r5, #0]
   14e2c:	60eb      	str	r3, [r5, #12]
   14e2e:	60ab      	str	r3, [r5, #8]
   14e30:	7013      	strb	r3, [r2, #0]
   14e32:	65ab      	str	r3, [r5, #88]	; 0x58
   14e34:	7821      	ldrb	r1, [r4, #0]
   14e36:	2205      	movs	r2, #5
   14e38:	4862      	ldr	r0, [pc, #392]	; (14fc4 <_vfiprintf_r+0x21c>)
   14e3a:	f000 fe6b 	bl	15b14 <memchr>
   14e3e:	1c63      	adds	r3, r4, #1
   14e40:	469c      	mov	ip, r3
   14e42:	2800      	cmp	r0, #0
   14e44:	d135      	bne.n	14eb2 <_vfiprintf_r+0x10a>
   14e46:	6829      	ldr	r1, [r5, #0]
   14e48:	06cb      	lsls	r3, r1, #27
   14e4a:	d504      	bpl.n	14e56 <_vfiprintf_r+0xae>
   14e4c:	2353      	movs	r3, #83	; 0x53
   14e4e:	aa02      	add	r2, sp, #8
   14e50:	3020      	adds	r0, #32
   14e52:	189b      	adds	r3, r3, r2
   14e54:	7018      	strb	r0, [r3, #0]
   14e56:	070b      	lsls	r3, r1, #28
   14e58:	d504      	bpl.n	14e64 <_vfiprintf_r+0xbc>
   14e5a:	2353      	movs	r3, #83	; 0x53
   14e5c:	202b      	movs	r0, #43	; 0x2b
   14e5e:	aa02      	add	r2, sp, #8
   14e60:	189b      	adds	r3, r3, r2
   14e62:	7018      	strb	r0, [r3, #0]
   14e64:	7823      	ldrb	r3, [r4, #0]
   14e66:	2b2a      	cmp	r3, #42	; 0x2a
   14e68:	d02c      	beq.n	14ec4 <_vfiprintf_r+0x11c>
   14e6a:	2000      	movs	r0, #0
   14e6c:	210a      	movs	r1, #10
   14e6e:	9b09      	ldr	r3, [sp, #36]	; 0x24
   14e70:	7822      	ldrb	r2, [r4, #0]
   14e72:	3a30      	subs	r2, #48	; 0x30
   14e74:	2a09      	cmp	r2, #9
   14e76:	d800      	bhi.n	14e7a <_vfiprintf_r+0xd2>
   14e78:	e06b      	b.n	14f52 <_vfiprintf_r+0x1aa>
   14e7a:	2800      	cmp	r0, #0
   14e7c:	d02a      	beq.n	14ed4 <_vfiprintf_r+0x12c>
   14e7e:	9309      	str	r3, [sp, #36]	; 0x24
   14e80:	e028      	b.n	14ed4 <_vfiprintf_r+0x12c>
   14e82:	4b51      	ldr	r3, [pc, #324]	; (14fc8 <_vfiprintf_r+0x220>)
   14e84:	429f      	cmp	r7, r3
   14e86:	d101      	bne.n	14e8c <_vfiprintf_r+0xe4>
   14e88:	68b7      	ldr	r7, [r6, #8]
   14e8a:	e79e      	b.n	14dca <_vfiprintf_r+0x22>
   14e8c:	4b4f      	ldr	r3, [pc, #316]	; (14fcc <_vfiprintf_r+0x224>)
   14e8e:	429f      	cmp	r7, r3
   14e90:	d19b      	bne.n	14dca <_vfiprintf_r+0x22>
   14e92:	68f7      	ldr	r7, [r6, #12]
   14e94:	e799      	b.n	14dca <_vfiprintf_r+0x22>
   14e96:	0039      	movs	r1, r7
   14e98:	0030      	movs	r0, r6
   14e9a:	f000 fbb9 	bl	15610 <__swsetup_r>
   14e9e:	2800      	cmp	r0, #0
   14ea0:	d099      	beq.n	14dd6 <_vfiprintf_r+0x2e>
   14ea2:	2001      	movs	r0, #1
   14ea4:	4240      	negs	r0, r0
   14ea6:	b01f      	add	sp, #124	; 0x7c
   14ea8:	bdf0      	pop	{r4, r5, r6, r7, pc}
   14eaa:	2b25      	cmp	r3, #37	; 0x25
   14eac:	d09f      	beq.n	14dee <_vfiprintf_r+0x46>
   14eae:	3401      	adds	r4, #1
   14eb0:	e79a      	b.n	14de8 <_vfiprintf_r+0x40>
   14eb2:	4b44      	ldr	r3, [pc, #272]	; (14fc4 <_vfiprintf_r+0x21c>)
   14eb4:	6829      	ldr	r1, [r5, #0]
   14eb6:	1ac0      	subs	r0, r0, r3
   14eb8:	2301      	movs	r3, #1
   14eba:	4083      	lsls	r3, r0
   14ebc:	430b      	orrs	r3, r1
   14ebe:	602b      	str	r3, [r5, #0]
   14ec0:	4664      	mov	r4, ip
   14ec2:	e7b7      	b.n	14e34 <_vfiprintf_r+0x8c>
   14ec4:	9b05      	ldr	r3, [sp, #20]
   14ec6:	1d18      	adds	r0, r3, #4
   14ec8:	681b      	ldr	r3, [r3, #0]
   14eca:	9005      	str	r0, [sp, #20]
   14ecc:	2b00      	cmp	r3, #0
   14ece:	db3a      	blt.n	14f46 <_vfiprintf_r+0x19e>
   14ed0:	9309      	str	r3, [sp, #36]	; 0x24
   14ed2:	4664      	mov	r4, ip
   14ed4:	7823      	ldrb	r3, [r4, #0]
   14ed6:	2b2e      	cmp	r3, #46	; 0x2e
   14ed8:	d10b      	bne.n	14ef2 <_vfiprintf_r+0x14a>
   14eda:	7863      	ldrb	r3, [r4, #1]
   14edc:	1c62      	adds	r2, r4, #1
   14ede:	2b2a      	cmp	r3, #42	; 0x2a
   14ee0:	d13f      	bne.n	14f62 <_vfiprintf_r+0x1ba>
   14ee2:	9b05      	ldr	r3, [sp, #20]
   14ee4:	3402      	adds	r4, #2
   14ee6:	1d1a      	adds	r2, r3, #4
   14ee8:	681b      	ldr	r3, [r3, #0]
   14eea:	9205      	str	r2, [sp, #20]
   14eec:	2b00      	cmp	r3, #0
   14eee:	db35      	blt.n	14f5c <_vfiprintf_r+0x1b4>
   14ef0:	9307      	str	r3, [sp, #28]
   14ef2:	7821      	ldrb	r1, [r4, #0]
   14ef4:	2203      	movs	r2, #3
   14ef6:	4836      	ldr	r0, [pc, #216]	; (14fd0 <_vfiprintf_r+0x228>)
   14ef8:	f000 fe0c 	bl	15b14 <memchr>
   14efc:	2800      	cmp	r0, #0
   14efe:	d007      	beq.n	14f10 <_vfiprintf_r+0x168>
   14f00:	4b33      	ldr	r3, [pc, #204]	; (14fd0 <_vfiprintf_r+0x228>)
   14f02:	682a      	ldr	r2, [r5, #0]
   14f04:	1ac0      	subs	r0, r0, r3
   14f06:	2340      	movs	r3, #64	; 0x40
   14f08:	4083      	lsls	r3, r0
   14f0a:	4313      	orrs	r3, r2
   14f0c:	602b      	str	r3, [r5, #0]
   14f0e:	3401      	adds	r4, #1
   14f10:	7821      	ldrb	r1, [r4, #0]
   14f12:	1c63      	adds	r3, r4, #1
   14f14:	2206      	movs	r2, #6
   14f16:	482f      	ldr	r0, [pc, #188]	; (14fd4 <_vfiprintf_r+0x22c>)
   14f18:	9302      	str	r3, [sp, #8]
   14f1a:	7629      	strb	r1, [r5, #24]
   14f1c:	f000 fdfa 	bl	15b14 <memchr>
   14f20:	2800      	cmp	r0, #0
   14f22:	d044      	beq.n	14fae <_vfiprintf_r+0x206>
   14f24:	4b2c      	ldr	r3, [pc, #176]	; (14fd8 <_vfiprintf_r+0x230>)
   14f26:	2b00      	cmp	r3, #0
   14f28:	d12f      	bne.n	14f8a <_vfiprintf_r+0x1e2>
   14f2a:	6829      	ldr	r1, [r5, #0]
   14f2c:	9b05      	ldr	r3, [sp, #20]
   14f2e:	2207      	movs	r2, #7
   14f30:	05c9      	lsls	r1, r1, #23
   14f32:	d528      	bpl.n	14f86 <_vfiprintf_r+0x1de>
   14f34:	189b      	adds	r3, r3, r2
   14f36:	4393      	bics	r3, r2
   14f38:	3308      	adds	r3, #8
   14f3a:	9305      	str	r3, [sp, #20]
   14f3c:	696b      	ldr	r3, [r5, #20]
   14f3e:	9a03      	ldr	r2, [sp, #12]
   14f40:	189b      	adds	r3, r3, r2
   14f42:	616b      	str	r3, [r5, #20]
   14f44:	e74f      	b.n	14de6 <_vfiprintf_r+0x3e>
   14f46:	425b      	negs	r3, r3
   14f48:	60eb      	str	r3, [r5, #12]
   14f4a:	2302      	movs	r3, #2
   14f4c:	430b      	orrs	r3, r1
   14f4e:	602b      	str	r3, [r5, #0]
   14f50:	e7bf      	b.n	14ed2 <_vfiprintf_r+0x12a>
   14f52:	434b      	muls	r3, r1
   14f54:	3401      	adds	r4, #1
   14f56:	189b      	adds	r3, r3, r2
   14f58:	2001      	movs	r0, #1
   14f5a:	e789      	b.n	14e70 <_vfiprintf_r+0xc8>
   14f5c:	2301      	movs	r3, #1
   14f5e:	425b      	negs	r3, r3
   14f60:	e7c6      	b.n	14ef0 <_vfiprintf_r+0x148>
   14f62:	2300      	movs	r3, #0
   14f64:	0014      	movs	r4, r2
   14f66:	200a      	movs	r0, #10
   14f68:	001a      	movs	r2, r3
   14f6a:	606b      	str	r3, [r5, #4]
   14f6c:	7821      	ldrb	r1, [r4, #0]
   14f6e:	3930      	subs	r1, #48	; 0x30
   14f70:	2909      	cmp	r1, #9
   14f72:	d903      	bls.n	14f7c <_vfiprintf_r+0x1d4>
   14f74:	2b00      	cmp	r3, #0
   14f76:	d0bc      	beq.n	14ef2 <_vfiprintf_r+0x14a>
   14f78:	9207      	str	r2, [sp, #28]
   14f7a:	e7ba      	b.n	14ef2 <_vfiprintf_r+0x14a>
   14f7c:	4342      	muls	r2, r0
   14f7e:	3401      	adds	r4, #1
   14f80:	1852      	adds	r2, r2, r1
   14f82:	2301      	movs	r3, #1
   14f84:	e7f2      	b.n	14f6c <_vfiprintf_r+0x1c4>
   14f86:	3307      	adds	r3, #7
   14f88:	e7d5      	b.n	14f36 <_vfiprintf_r+0x18e>
   14f8a:	ab05      	add	r3, sp, #20
   14f8c:	9300      	str	r3, [sp, #0]
   14f8e:	003a      	movs	r2, r7
   14f90:	4b12      	ldr	r3, [pc, #72]	; (14fdc <_vfiprintf_r+0x234>)
   14f92:	0029      	movs	r1, r5
   14f94:	0030      	movs	r0, r6
   14f96:	e000      	b.n	14f9a <_vfiprintf_r+0x1f2>
   14f98:	bf00      	nop
   14f9a:	9003      	str	r0, [sp, #12]
   14f9c:	9b03      	ldr	r3, [sp, #12]
   14f9e:	3301      	adds	r3, #1
   14fa0:	d1cc      	bne.n	14f3c <_vfiprintf_r+0x194>
   14fa2:	89bb      	ldrh	r3, [r7, #12]
   14fa4:	065b      	lsls	r3, r3, #25
   14fa6:	d500      	bpl.n	14faa <_vfiprintf_r+0x202>
   14fa8:	e77b      	b.n	14ea2 <_vfiprintf_r+0xfa>
   14faa:	980b      	ldr	r0, [sp, #44]	; 0x2c
   14fac:	e77b      	b.n	14ea6 <_vfiprintf_r+0xfe>
   14fae:	ab05      	add	r3, sp, #20
   14fb0:	9300      	str	r3, [sp, #0]
   14fb2:	003a      	movs	r2, r7
   14fb4:	4b09      	ldr	r3, [pc, #36]	; (14fdc <_vfiprintf_r+0x234>)
   14fb6:	0029      	movs	r1, r5
   14fb8:	0030      	movs	r0, r6
   14fba:	f000 f87f 	bl	150bc <_printf_i>
   14fbe:	e7ec      	b.n	14f9a <_vfiprintf_r+0x1f2>
   14fc0:	00016900 	.word	0x00016900
   14fc4:	000168ac 	.word	0x000168ac
   14fc8:	00016920 	.word	0x00016920
   14fcc:	000168e0 	.word	0x000168e0
   14fd0:	000168b2 	.word	0x000168b2
   14fd4:	000168b6 	.word	0x000168b6
   14fd8:	00000000 	.word	0x00000000
   14fdc:	00014d83 	.word	0x00014d83

00014fe0 <_printf_common>:
   14fe0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   14fe2:	0015      	movs	r5, r2
   14fe4:	9301      	str	r3, [sp, #4]
   14fe6:	688a      	ldr	r2, [r1, #8]
   14fe8:	690b      	ldr	r3, [r1, #16]
   14fea:	9000      	str	r0, [sp, #0]
   14fec:	000c      	movs	r4, r1
   14fee:	4293      	cmp	r3, r2
   14ff0:	da00      	bge.n	14ff4 <_printf_common+0x14>
   14ff2:	0013      	movs	r3, r2
   14ff4:	0022      	movs	r2, r4
   14ff6:	602b      	str	r3, [r5, #0]
   14ff8:	3243      	adds	r2, #67	; 0x43
   14ffa:	7812      	ldrb	r2, [r2, #0]
   14ffc:	2a00      	cmp	r2, #0
   14ffe:	d001      	beq.n	15004 <_printf_common+0x24>
   15000:	3301      	adds	r3, #1
   15002:	602b      	str	r3, [r5, #0]
   15004:	6823      	ldr	r3, [r4, #0]
   15006:	069b      	lsls	r3, r3, #26
   15008:	d502      	bpl.n	15010 <_printf_common+0x30>
   1500a:	682b      	ldr	r3, [r5, #0]
   1500c:	3302      	adds	r3, #2
   1500e:	602b      	str	r3, [r5, #0]
   15010:	2706      	movs	r7, #6
   15012:	6823      	ldr	r3, [r4, #0]
   15014:	401f      	ands	r7, r3
   15016:	d027      	beq.n	15068 <_printf_common+0x88>
   15018:	0023      	movs	r3, r4
   1501a:	3343      	adds	r3, #67	; 0x43
   1501c:	781b      	ldrb	r3, [r3, #0]
   1501e:	1e5a      	subs	r2, r3, #1
   15020:	4193      	sbcs	r3, r2
   15022:	6822      	ldr	r2, [r4, #0]
   15024:	0692      	lsls	r2, r2, #26
   15026:	d430      	bmi.n	1508a <_printf_common+0xaa>
   15028:	0022      	movs	r2, r4
   1502a:	9901      	ldr	r1, [sp, #4]
   1502c:	3243      	adds	r2, #67	; 0x43
   1502e:	9800      	ldr	r0, [sp, #0]
   15030:	9e08      	ldr	r6, [sp, #32]
   15032:	47b0      	blx	r6
   15034:	1c43      	adds	r3, r0, #1
   15036:	d025      	beq.n	15084 <_printf_common+0xa4>
   15038:	2306      	movs	r3, #6
   1503a:	6820      	ldr	r0, [r4, #0]
   1503c:	682a      	ldr	r2, [r5, #0]
   1503e:	68e1      	ldr	r1, [r4, #12]
   15040:	4003      	ands	r3, r0
   15042:	2500      	movs	r5, #0
   15044:	2b04      	cmp	r3, #4
   15046:	d103      	bne.n	15050 <_printf_common+0x70>
   15048:	1a8d      	subs	r5, r1, r2
   1504a:	43eb      	mvns	r3, r5
   1504c:	17db      	asrs	r3, r3, #31
   1504e:	401d      	ands	r5, r3
   15050:	68a3      	ldr	r3, [r4, #8]
   15052:	6922      	ldr	r2, [r4, #16]
   15054:	4293      	cmp	r3, r2
   15056:	dd01      	ble.n	1505c <_printf_common+0x7c>
   15058:	1a9b      	subs	r3, r3, r2
   1505a:	18ed      	adds	r5, r5, r3
   1505c:	2700      	movs	r7, #0
   1505e:	42bd      	cmp	r5, r7
   15060:	d120      	bne.n	150a4 <_printf_common+0xc4>
   15062:	2000      	movs	r0, #0
   15064:	e010      	b.n	15088 <_printf_common+0xa8>
   15066:	3701      	adds	r7, #1
   15068:	68e3      	ldr	r3, [r4, #12]
   1506a:	682a      	ldr	r2, [r5, #0]
   1506c:	1a9b      	subs	r3, r3, r2
   1506e:	429f      	cmp	r7, r3
   15070:	dad2      	bge.n	15018 <_printf_common+0x38>
   15072:	0022      	movs	r2, r4
   15074:	2301      	movs	r3, #1
   15076:	3219      	adds	r2, #25
   15078:	9901      	ldr	r1, [sp, #4]
   1507a:	9800      	ldr	r0, [sp, #0]
   1507c:	9e08      	ldr	r6, [sp, #32]
   1507e:	47b0      	blx	r6
   15080:	1c43      	adds	r3, r0, #1
   15082:	d1f0      	bne.n	15066 <_printf_common+0x86>
   15084:	2001      	movs	r0, #1
   15086:	4240      	negs	r0, r0
   15088:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
   1508a:	2030      	movs	r0, #48	; 0x30
   1508c:	18e1      	adds	r1, r4, r3
   1508e:	3143      	adds	r1, #67	; 0x43
   15090:	7008      	strb	r0, [r1, #0]
   15092:	0021      	movs	r1, r4
   15094:	1c5a      	adds	r2, r3, #1
   15096:	3145      	adds	r1, #69	; 0x45
   15098:	7809      	ldrb	r1, [r1, #0]
   1509a:	18a2      	adds	r2, r4, r2
   1509c:	3243      	adds	r2, #67	; 0x43
   1509e:	3302      	adds	r3, #2
   150a0:	7011      	strb	r1, [r2, #0]
   150a2:	e7c1      	b.n	15028 <_printf_common+0x48>
   150a4:	0022      	movs	r2, r4
   150a6:	2301      	movs	r3, #1
   150a8:	321a      	adds	r2, #26
   150aa:	9901      	ldr	r1, [sp, #4]
   150ac:	9800      	ldr	r0, [sp, #0]
   150ae:	9e08      	ldr	r6, [sp, #32]
   150b0:	47b0      	blx	r6
   150b2:	1c43      	adds	r3, r0, #1
   150b4:	d0e6      	beq.n	15084 <_printf_common+0xa4>
   150b6:	3701      	adds	r7, #1
   150b8:	e7d1      	b.n	1505e <_printf_common+0x7e>
   150ba:	Address 0x000150ba is out of bounds.


000150bc <_printf_i>:
   150bc:	b5f0      	push	{r4, r5, r6, r7, lr}
   150be:	b08b      	sub	sp, #44	; 0x2c
   150c0:	9206      	str	r2, [sp, #24]
   150c2:	000a      	movs	r2, r1
   150c4:	3243      	adds	r2, #67	; 0x43
   150c6:	9307      	str	r3, [sp, #28]
   150c8:	9005      	str	r0, [sp, #20]
   150ca:	9204      	str	r2, [sp, #16]
   150cc:	7e0a      	ldrb	r2, [r1, #24]
   150ce:	000c      	movs	r4, r1
   150d0:	9b10      	ldr	r3, [sp, #64]	; 0x40
   150d2:	2a6e      	cmp	r2, #110	; 0x6e
   150d4:	d100      	bne.n	150d8 <_printf_i+0x1c>
   150d6:	e08f      	b.n	151f8 <_printf_i+0x13c>
   150d8:	d817      	bhi.n	1510a <_printf_i+0x4e>
   150da:	2a63      	cmp	r2, #99	; 0x63
   150dc:	d02c      	beq.n	15138 <_printf_i+0x7c>
   150de:	d808      	bhi.n	150f2 <_printf_i+0x36>
   150e0:	2a00      	cmp	r2, #0
   150e2:	d100      	bne.n	150e6 <_printf_i+0x2a>
   150e4:	e099      	b.n	1521a <_printf_i+0x15e>
   150e6:	2a58      	cmp	r2, #88	; 0x58
   150e8:	d054      	beq.n	15194 <_printf_i+0xd8>
   150ea:	0026      	movs	r6, r4
   150ec:	3642      	adds	r6, #66	; 0x42
   150ee:	7032      	strb	r2, [r6, #0]
   150f0:	e029      	b.n	15146 <_printf_i+0x8a>
   150f2:	2a64      	cmp	r2, #100	; 0x64
   150f4:	d001      	beq.n	150fa <_printf_i+0x3e>
   150f6:	2a69      	cmp	r2, #105	; 0x69
   150f8:	d1f7      	bne.n	150ea <_printf_i+0x2e>
   150fa:	6821      	ldr	r1, [r4, #0]
   150fc:	681a      	ldr	r2, [r3, #0]
   150fe:	0608      	lsls	r0, r1, #24
   15100:	d523      	bpl.n	1514a <_printf_i+0x8e>
   15102:	1d11      	adds	r1, r2, #4
   15104:	6019      	str	r1, [r3, #0]
   15106:	6815      	ldr	r5, [r2, #0]
   15108:	e025      	b.n	15156 <_printf_i+0x9a>
   1510a:	2a73      	cmp	r2, #115	; 0x73
   1510c:	d100      	bne.n	15110 <_printf_i+0x54>
   1510e:	e088      	b.n	15222 <_printf_i+0x166>
   15110:	d808      	bhi.n	15124 <_printf_i+0x68>
   15112:	2a6f      	cmp	r2, #111	; 0x6f
   15114:	d029      	beq.n	1516a <_printf_i+0xae>
   15116:	2a70      	cmp	r2, #112	; 0x70
   15118:	d1e7      	bne.n	150ea <_printf_i+0x2e>
   1511a:	2220      	movs	r2, #32
   1511c:	6809      	ldr	r1, [r1, #0]
   1511e:	430a      	orrs	r2, r1
   15120:	6022      	str	r2, [r4, #0]
   15122:	e003      	b.n	1512c <_printf_i+0x70>
   15124:	2a75      	cmp	r2, #117	; 0x75
   15126:	d020      	beq.n	1516a <_printf_i+0xae>
   15128:	2a78      	cmp	r2, #120	; 0x78
   1512a:	d1de      	bne.n	150ea <_printf_i+0x2e>
   1512c:	0022      	movs	r2, r4
   1512e:	2178      	movs	r1, #120	; 0x78
   15130:	3245      	adds	r2, #69	; 0x45
   15132:	7011      	strb	r1, [r2, #0]
   15134:	4a6c      	ldr	r2, [pc, #432]	; (152e8 <_printf_i+0x22c>)
   15136:	e030      	b.n	1519a <_printf_i+0xde>
   15138:	000e      	movs	r6, r1
   1513a:	681a      	ldr	r2, [r3, #0]
   1513c:	3642      	adds	r6, #66	; 0x42
   1513e:	1d11      	adds	r1, r2, #4
   15140:	6019      	str	r1, [r3, #0]
   15142:	6813      	ldr	r3, [r2, #0]
   15144:	7033      	strb	r3, [r6, #0]
   15146:	2301      	movs	r3, #1
   15148:	e079      	b.n	1523e <_printf_i+0x182>
   1514a:	0649      	lsls	r1, r1, #25
   1514c:	d5d9      	bpl.n	15102 <_printf_i+0x46>
   1514e:	1d11      	adds	r1, r2, #4
   15150:	6019      	str	r1, [r3, #0]
   15152:	2300      	movs	r3, #0
   15154:	5ed5      	ldrsh	r5, [r2, r3]
   15156:	2d00      	cmp	r5, #0
   15158:	da03      	bge.n	15162 <_printf_i+0xa6>
   1515a:	232d      	movs	r3, #45	; 0x2d
   1515c:	9a04      	ldr	r2, [sp, #16]
   1515e:	426d      	negs	r5, r5
   15160:	7013      	strb	r3, [r2, #0]
   15162:	4b62      	ldr	r3, [pc, #392]	; (152ec <_printf_i+0x230>)
   15164:	270a      	movs	r7, #10
   15166:	9303      	str	r3, [sp, #12]
   15168:	e02f      	b.n	151ca <_printf_i+0x10e>
   1516a:	6820      	ldr	r0, [r4, #0]
   1516c:	6819      	ldr	r1, [r3, #0]
   1516e:	0605      	lsls	r5, r0, #24
   15170:	d503      	bpl.n	1517a <_printf_i+0xbe>
   15172:	1d08      	adds	r0, r1, #4
   15174:	6018      	str	r0, [r3, #0]
   15176:	680d      	ldr	r5, [r1, #0]
   15178:	e005      	b.n	15186 <_printf_i+0xca>
   1517a:	0640      	lsls	r0, r0, #25
   1517c:	d5f9      	bpl.n	15172 <_printf_i+0xb6>
   1517e:	680d      	ldr	r5, [r1, #0]
   15180:	1d08      	adds	r0, r1, #4
   15182:	6018      	str	r0, [r3, #0]
   15184:	b2ad      	uxth	r5, r5
   15186:	4b59      	ldr	r3, [pc, #356]	; (152ec <_printf_i+0x230>)
   15188:	2708      	movs	r7, #8
   1518a:	9303      	str	r3, [sp, #12]
   1518c:	2a6f      	cmp	r2, #111	; 0x6f
   1518e:	d018      	beq.n	151c2 <_printf_i+0x106>
   15190:	270a      	movs	r7, #10
   15192:	e016      	b.n	151c2 <_printf_i+0x106>
   15194:	3145      	adds	r1, #69	; 0x45
   15196:	700a      	strb	r2, [r1, #0]
   15198:	4a54      	ldr	r2, [pc, #336]	; (152ec <_printf_i+0x230>)
   1519a:	9203      	str	r2, [sp, #12]
   1519c:	681a      	ldr	r2, [r3, #0]
   1519e:	6821      	ldr	r1, [r4, #0]
   151a0:	1d10      	adds	r0, r2, #4
   151a2:	6018      	str	r0, [r3, #0]
   151a4:	6815      	ldr	r5, [r2, #0]
   151a6:	0608      	lsls	r0, r1, #24
   151a8:	d522      	bpl.n	151f0 <_printf_i+0x134>
   151aa:	07cb      	lsls	r3, r1, #31
   151ac:	d502      	bpl.n	151b4 <_printf_i+0xf8>
   151ae:	2320      	movs	r3, #32
   151b0:	4319      	orrs	r1, r3
   151b2:	6021      	str	r1, [r4, #0]
   151b4:	2710      	movs	r7, #16
   151b6:	2d00      	cmp	r5, #0
   151b8:	d103      	bne.n	151c2 <_printf_i+0x106>
   151ba:	2320      	movs	r3, #32
   151bc:	6822      	ldr	r2, [r4, #0]
   151be:	439a      	bics	r2, r3
   151c0:	6022      	str	r2, [r4, #0]
   151c2:	0023      	movs	r3, r4
   151c4:	2200      	movs	r2, #0
   151c6:	3343      	adds	r3, #67	; 0x43
   151c8:	701a      	strb	r2, [r3, #0]
   151ca:	6863      	ldr	r3, [r4, #4]
   151cc:	60a3      	str	r3, [r4, #8]
   151ce:	2b00      	cmp	r3, #0
   151d0:	db5c      	blt.n	1528c <_printf_i+0x1d0>
   151d2:	2204      	movs	r2, #4
   151d4:	6821      	ldr	r1, [r4, #0]
   151d6:	4391      	bics	r1, r2
   151d8:	6021      	str	r1, [r4, #0]
   151da:	2d00      	cmp	r5, #0
   151dc:	d158      	bne.n	15290 <_printf_i+0x1d4>
   151de:	9e04      	ldr	r6, [sp, #16]
   151e0:	2b00      	cmp	r3, #0
   151e2:	d064      	beq.n	152ae <_printf_i+0x1f2>
   151e4:	0026      	movs	r6, r4
   151e6:	9b03      	ldr	r3, [sp, #12]
   151e8:	3642      	adds	r6, #66	; 0x42
   151ea:	781b      	ldrb	r3, [r3, #0]
   151ec:	7033      	strb	r3, [r6, #0]
   151ee:	e05e      	b.n	152ae <_printf_i+0x1f2>
   151f0:	0648      	lsls	r0, r1, #25
   151f2:	d5da      	bpl.n	151aa <_printf_i+0xee>
   151f4:	b2ad      	uxth	r5, r5
   151f6:	e7d8      	b.n	151aa <_printf_i+0xee>
   151f8:	6809      	ldr	r1, [r1, #0]
   151fa:	681a      	ldr	r2, [r3, #0]
   151fc:	0608      	lsls	r0, r1, #24
   151fe:	d505      	bpl.n	1520c <_printf_i+0x150>
   15200:	1d11      	adds	r1, r2, #4
   15202:	6019      	str	r1, [r3, #0]
   15204:	6813      	ldr	r3, [r2, #0]
   15206:	6962      	ldr	r2, [r4, #20]
   15208:	601a      	str	r2, [r3, #0]
   1520a:	e006      	b.n	1521a <_printf_i+0x15e>
   1520c:	0649      	lsls	r1, r1, #25
   1520e:	d5f7      	bpl.n	15200 <_printf_i+0x144>
   15210:	1d11      	adds	r1, r2, #4
   15212:	6019      	str	r1, [r3, #0]
   15214:	6813      	ldr	r3, [r2, #0]
   15216:	8aa2      	ldrh	r2, [r4, #20]
   15218:	801a      	strh	r2, [r3, #0]
   1521a:	2300      	movs	r3, #0
   1521c:	9e04      	ldr	r6, [sp, #16]
   1521e:	6123      	str	r3, [r4, #16]
   15220:	e054      	b.n	152cc <_printf_i+0x210>
   15222:	681a      	ldr	r2, [r3, #0]
   15224:	1d11      	adds	r1, r2, #4
   15226:	6019      	str	r1, [r3, #0]
   15228:	6816      	ldr	r6, [r2, #0]
   1522a:	2100      	movs	r1, #0
   1522c:	6862      	ldr	r2, [r4, #4]
   1522e:	0030      	movs	r0, r6
   15230:	f000 fc70 	bl	15b14 <memchr>
   15234:	2800      	cmp	r0, #0
   15236:	d001      	beq.n	1523c <_printf_i+0x180>
   15238:	1b80      	subs	r0, r0, r6
   1523a:	6060      	str	r0, [r4, #4]
   1523c:	6863      	ldr	r3, [r4, #4]
   1523e:	6123      	str	r3, [r4, #16]
   15240:	2300      	movs	r3, #0
   15242:	9a04      	ldr	r2, [sp, #16]
   15244:	7013      	strb	r3, [r2, #0]
   15246:	e041      	b.n	152cc <_printf_i+0x210>
   15248:	6923      	ldr	r3, [r4, #16]
   1524a:	0032      	movs	r2, r6
   1524c:	9906      	ldr	r1, [sp, #24]
   1524e:	9805      	ldr	r0, [sp, #20]
   15250:	9d07      	ldr	r5, [sp, #28]
   15252:	47a8      	blx	r5
   15254:	1c43      	adds	r3, r0, #1
   15256:	d043      	beq.n	152e0 <_printf_i+0x224>
   15258:	6823      	ldr	r3, [r4, #0]
   1525a:	2500      	movs	r5, #0
   1525c:	079b      	lsls	r3, r3, #30
   1525e:	d40f      	bmi.n	15280 <_printf_i+0x1c4>
   15260:	9b09      	ldr	r3, [sp, #36]	; 0x24
   15262:	68e0      	ldr	r0, [r4, #12]
   15264:	4298      	cmp	r0, r3
   15266:	da3d      	bge.n	152e4 <_printf_i+0x228>
   15268:	0018      	movs	r0, r3
   1526a:	e03b      	b.n	152e4 <_printf_i+0x228>
   1526c:	0022      	movs	r2, r4
   1526e:	2301      	movs	r3, #1
   15270:	3219      	adds	r2, #25
   15272:	9906      	ldr	r1, [sp, #24]
   15274:	9805      	ldr	r0, [sp, #20]
   15276:	9e07      	ldr	r6, [sp, #28]
   15278:	47b0      	blx	r6
   1527a:	1c43      	adds	r3, r0, #1
   1527c:	d030      	beq.n	152e0 <_printf_i+0x224>
   1527e:	3501      	adds	r5, #1
   15280:	68e3      	ldr	r3, [r4, #12]
   15282:	9a09      	ldr	r2, [sp, #36]	; 0x24
   15284:	1a9b      	subs	r3, r3, r2
   15286:	429d      	cmp	r5, r3
   15288:	dbf0      	blt.n	1526c <_printf_i+0x1b0>
   1528a:	e7e9      	b.n	15260 <_printf_i+0x1a4>
   1528c:	2d00      	cmp	r5, #0
   1528e:	d0a9      	beq.n	151e4 <_printf_i+0x128>
   15290:	9e04      	ldr	r6, [sp, #16]
   15292:	0028      	movs	r0, r5
   15294:	0039      	movs	r1, r7
   15296:	f7fd f999 	bl	125cc <__aeabi_uidivmod>
   1529a:	9b03      	ldr	r3, [sp, #12]
   1529c:	3e01      	subs	r6, #1
   1529e:	5c5b      	ldrb	r3, [r3, r1]
   152a0:	0028      	movs	r0, r5
   152a2:	7033      	strb	r3, [r6, #0]
   152a4:	0039      	movs	r1, r7
   152a6:	f7fd f90b 	bl	124c0 <__udivsi3>
   152aa:	1e05      	subs	r5, r0, #0
   152ac:	d1f1      	bne.n	15292 <_printf_i+0x1d6>
   152ae:	2f08      	cmp	r7, #8
   152b0:	d109      	bne.n	152c6 <_printf_i+0x20a>
   152b2:	6823      	ldr	r3, [r4, #0]
   152b4:	07db      	lsls	r3, r3, #31
   152b6:	d506      	bpl.n	152c6 <_printf_i+0x20a>
   152b8:	6863      	ldr	r3, [r4, #4]
   152ba:	6922      	ldr	r2, [r4, #16]
   152bc:	4293      	cmp	r3, r2
   152be:	dc02      	bgt.n	152c6 <_printf_i+0x20a>
   152c0:	2330      	movs	r3, #48	; 0x30
   152c2:	3e01      	subs	r6, #1
   152c4:	7033      	strb	r3, [r6, #0]
   152c6:	9b04      	ldr	r3, [sp, #16]
   152c8:	1b9b      	subs	r3, r3, r6
   152ca:	6123      	str	r3, [r4, #16]
   152cc:	9b07      	ldr	r3, [sp, #28]
   152ce:	aa09      	add	r2, sp, #36	; 0x24
   152d0:	9300      	str	r3, [sp, #0]
   152d2:	0021      	movs	r1, r4
   152d4:	9b06      	ldr	r3, [sp, #24]
   152d6:	9805      	ldr	r0, [sp, #20]
   152d8:	f7ff fe82 	bl	14fe0 <_printf_common>
   152dc:	1c43      	adds	r3, r0, #1
   152de:	d1b3      	bne.n	15248 <_printf_i+0x18c>
   152e0:	2001      	movs	r0, #1
   152e2:	4240      	negs	r0, r0
   152e4:	b00b      	add	sp, #44	; 0x2c
   152e6:	bdf0      	pop	{r4, r5, r6, r7, pc}
   152e8:	000168ce 	.word	0x000168ce
   152ec:	000168bd 	.word	0x000168bd

000152f0 <iprintf>:
   152f0:	b40f      	push	{r0, r1, r2, r3}
   152f2:	4b0b      	ldr	r3, [pc, #44]	; (15320 <iprintf+0x30>)
   152f4:	b513      	push	{r0, r1, r4, lr}
   152f6:	681c      	ldr	r4, [r3, #0]
   152f8:	2c00      	cmp	r4, #0
   152fa:	d005      	beq.n	15308 <iprintf+0x18>
   152fc:	69a3      	ldr	r3, [r4, #24]
   152fe:	2b00      	cmp	r3, #0
   15300:	d102      	bne.n	15308 <iprintf+0x18>
   15302:	0020      	movs	r0, r4
   15304:	f000 fafa 	bl	158fc <__sinit>
   15308:	ab05      	add	r3, sp, #20
   1530a:	9a04      	ldr	r2, [sp, #16]
   1530c:	68a1      	ldr	r1, [r4, #8]
   1530e:	0020      	movs	r0, r4
   15310:	9301      	str	r3, [sp, #4]
   15312:	f7ff fd49 	bl	14da8 <_vfiprintf_r>
   15316:	bc16      	pop	{r1, r2, r4}
   15318:	bc08      	pop	{r3}
   1531a:	b004      	add	sp, #16
   1531c:	4718      	bx	r3
   1531e:	46c0      	nop			; (mov r8, r8)
   15320:	200000a0 	.word	0x200000a0

00015324 <srand>:
   15324:	4b10      	ldr	r3, [pc, #64]	; (15368 <srand+0x44>)
   15326:	b570      	push	{r4, r5, r6, lr}
   15328:	681c      	ldr	r4, [r3, #0]
   1532a:	0005      	movs	r5, r0
   1532c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   1532e:	2b00      	cmp	r3, #0
   15330:	d115      	bne.n	1535e <srand+0x3a>
   15332:	2018      	movs	r0, #24
   15334:	f000 fbe4 	bl	15b00 <malloc>
   15338:	4b0c      	ldr	r3, [pc, #48]	; (1536c <srand+0x48>)
   1533a:	63a0      	str	r0, [r4, #56]	; 0x38
   1533c:	8003      	strh	r3, [r0, #0]
   1533e:	4b0c      	ldr	r3, [pc, #48]	; (15370 <srand+0x4c>)
   15340:	2201      	movs	r2, #1
   15342:	8043      	strh	r3, [r0, #2]
   15344:	4b0b      	ldr	r3, [pc, #44]	; (15374 <srand+0x50>)
   15346:	8083      	strh	r3, [r0, #4]
   15348:	4b0b      	ldr	r3, [pc, #44]	; (15378 <srand+0x54>)
   1534a:	80c3      	strh	r3, [r0, #6]
   1534c:	4b0b      	ldr	r3, [pc, #44]	; (1537c <srand+0x58>)
   1534e:	8103      	strh	r3, [r0, #8]
   15350:	2305      	movs	r3, #5
   15352:	8143      	strh	r3, [r0, #10]
   15354:	3306      	adds	r3, #6
   15356:	8183      	strh	r3, [r0, #12]
   15358:	2300      	movs	r3, #0
   1535a:	6102      	str	r2, [r0, #16]
   1535c:	6143      	str	r3, [r0, #20]
   1535e:	2200      	movs	r2, #0
   15360:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   15362:	611d      	str	r5, [r3, #16]
   15364:	615a      	str	r2, [r3, #20]
   15366:	bd70      	pop	{r4, r5, r6, pc}
   15368:	200000a0 	.word	0x200000a0
   1536c:	0000330e 	.word	0x0000330e
   15370:	ffffabcd 	.word	0xffffabcd
   15374:	00001234 	.word	0x00001234
   15378:	ffffe66d 	.word	0xffffe66d
   1537c:	ffffdeec 	.word	0xffffdeec

00015380 <rand>:
   15380:	4b15      	ldr	r3, [pc, #84]	; (153d8 <rand+0x58>)
   15382:	b510      	push	{r4, lr}
   15384:	681c      	ldr	r4, [r3, #0]
   15386:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   15388:	2b00      	cmp	r3, #0
   1538a:	d115      	bne.n	153b8 <rand+0x38>
   1538c:	2018      	movs	r0, #24
   1538e:	f000 fbb7 	bl	15b00 <malloc>
   15392:	4b12      	ldr	r3, [pc, #72]	; (153dc <rand+0x5c>)
   15394:	63a0      	str	r0, [r4, #56]	; 0x38
   15396:	8003      	strh	r3, [r0, #0]
   15398:	4b11      	ldr	r3, [pc, #68]	; (153e0 <rand+0x60>)
   1539a:	2201      	movs	r2, #1
   1539c:	8043      	strh	r3, [r0, #2]
   1539e:	4b11      	ldr	r3, [pc, #68]	; (153e4 <rand+0x64>)
   153a0:	8083      	strh	r3, [r0, #4]
   153a2:	4b11      	ldr	r3, [pc, #68]	; (153e8 <rand+0x68>)
   153a4:	80c3      	strh	r3, [r0, #6]
   153a6:	4b11      	ldr	r3, [pc, #68]	; (153ec <rand+0x6c>)
   153a8:	8103      	strh	r3, [r0, #8]
   153aa:	2305      	movs	r3, #5
   153ac:	8143      	strh	r3, [r0, #10]
   153ae:	3306      	adds	r3, #6
   153b0:	8183      	strh	r3, [r0, #12]
   153b2:	2300      	movs	r3, #0
   153b4:	6102      	str	r2, [r0, #16]
   153b6:	6143      	str	r3, [r0, #20]
   153b8:	6ba4      	ldr	r4, [r4, #56]	; 0x38
   153ba:	4a0d      	ldr	r2, [pc, #52]	; (153f0 <rand+0x70>)
   153bc:	6920      	ldr	r0, [r4, #16]
   153be:	6961      	ldr	r1, [r4, #20]
   153c0:	4b0c      	ldr	r3, [pc, #48]	; (153f4 <rand+0x74>)
   153c2:	f7fd fa2d 	bl	12820 <__aeabi_lmul>
   153c6:	2201      	movs	r2, #1
   153c8:	2300      	movs	r3, #0
   153ca:	1880      	adds	r0, r0, r2
   153cc:	4159      	adcs	r1, r3
   153ce:	6120      	str	r0, [r4, #16]
   153d0:	6161      	str	r1, [r4, #20]
   153d2:	0048      	lsls	r0, r1, #1
   153d4:	0840      	lsrs	r0, r0, #1
   153d6:	bd10      	pop	{r4, pc}
   153d8:	200000a0 	.word	0x200000a0
   153dc:	0000330e 	.word	0x0000330e
   153e0:	ffffabcd 	.word	0xffffabcd
   153e4:	00001234 	.word	0x00001234
   153e8:	ffffe66d 	.word	0xffffe66d
   153ec:	ffffdeec 	.word	0xffffdeec
   153f0:	4c957f2d 	.word	0x4c957f2d
   153f4:	5851f42d 	.word	0x5851f42d

000153f8 <setbuf>:
   153f8:	424a      	negs	r2, r1
   153fa:	414a      	adcs	r2, r1
   153fc:	2380      	movs	r3, #128	; 0x80
   153fe:	b510      	push	{r4, lr}
   15400:	0052      	lsls	r2, r2, #1
   15402:	00db      	lsls	r3, r3, #3
   15404:	f000 f802 	bl	1540c <setvbuf>
   15408:	bd10      	pop	{r4, pc}
   1540a:	Address 0x0001540a is out of bounds.


0001540c <setvbuf>:
   1540c:	b5f0      	push	{r4, r5, r6, r7, lr}
   1540e:	001d      	movs	r5, r3
   15410:	4b4f      	ldr	r3, [pc, #316]	; (15550 <setvbuf+0x144>)
   15412:	b085      	sub	sp, #20
   15414:	681e      	ldr	r6, [r3, #0]
   15416:	0004      	movs	r4, r0
   15418:	000f      	movs	r7, r1
   1541a:	9200      	str	r2, [sp, #0]
   1541c:	2e00      	cmp	r6, #0
   1541e:	d005      	beq.n	1542c <setvbuf+0x20>
   15420:	69b3      	ldr	r3, [r6, #24]
   15422:	2b00      	cmp	r3, #0
   15424:	d102      	bne.n	1542c <setvbuf+0x20>
   15426:	0030      	movs	r0, r6
   15428:	f000 fa68 	bl	158fc <__sinit>
   1542c:	4b49      	ldr	r3, [pc, #292]	; (15554 <setvbuf+0x148>)
   1542e:	429c      	cmp	r4, r3
   15430:	d150      	bne.n	154d4 <setvbuf+0xc8>
   15432:	6874      	ldr	r4, [r6, #4]
   15434:	9b00      	ldr	r3, [sp, #0]
   15436:	2b02      	cmp	r3, #2
   15438:	d005      	beq.n	15446 <setvbuf+0x3a>
   1543a:	2b01      	cmp	r3, #1
   1543c:	d900      	bls.n	15440 <setvbuf+0x34>
   1543e:	e084      	b.n	1554a <setvbuf+0x13e>
   15440:	2d00      	cmp	r5, #0
   15442:	da00      	bge.n	15446 <setvbuf+0x3a>
   15444:	e081      	b.n	1554a <setvbuf+0x13e>
   15446:	0021      	movs	r1, r4
   15448:	0030      	movs	r0, r6
   1544a:	f000 f9e9 	bl	15820 <_fflush_r>
   1544e:	6b61      	ldr	r1, [r4, #52]	; 0x34
   15450:	2900      	cmp	r1, #0
   15452:	d008      	beq.n	15466 <setvbuf+0x5a>
   15454:	0023      	movs	r3, r4
   15456:	3344      	adds	r3, #68	; 0x44
   15458:	4299      	cmp	r1, r3
   1545a:	d002      	beq.n	15462 <setvbuf+0x56>
   1545c:	0030      	movs	r0, r6
   1545e:	f000 fb65 	bl	15b2c <_free_r>
   15462:	2300      	movs	r3, #0
   15464:	6363      	str	r3, [r4, #52]	; 0x34
   15466:	2300      	movs	r3, #0
   15468:	61a3      	str	r3, [r4, #24]
   1546a:	6063      	str	r3, [r4, #4]
   1546c:	89a3      	ldrh	r3, [r4, #12]
   1546e:	061b      	lsls	r3, r3, #24
   15470:	d503      	bpl.n	1547a <setvbuf+0x6e>
   15472:	6921      	ldr	r1, [r4, #16]
   15474:	0030      	movs	r0, r6
   15476:	f000 fb59 	bl	15b2c <_free_r>
   1547a:	89a3      	ldrh	r3, [r4, #12]
   1547c:	4a36      	ldr	r2, [pc, #216]	; (15558 <setvbuf+0x14c>)
   1547e:	4013      	ands	r3, r2
   15480:	81a3      	strh	r3, [r4, #12]
   15482:	9b00      	ldr	r3, [sp, #0]
   15484:	2b02      	cmp	r3, #2
   15486:	d05a      	beq.n	1553e <setvbuf+0x132>
   15488:	ab03      	add	r3, sp, #12
   1548a:	aa02      	add	r2, sp, #8
   1548c:	0021      	movs	r1, r4
   1548e:	0030      	movs	r0, r6
   15490:	f000 faca 	bl	15a28 <__swhatbuf_r>
   15494:	89a3      	ldrh	r3, [r4, #12]
   15496:	4318      	orrs	r0, r3
   15498:	81a0      	strh	r0, [r4, #12]
   1549a:	2d00      	cmp	r5, #0
   1549c:	d124      	bne.n	154e8 <setvbuf+0xdc>
   1549e:	9d02      	ldr	r5, [sp, #8]
   154a0:	0028      	movs	r0, r5
   154a2:	f000 fb2d 	bl	15b00 <malloc>
   154a6:	9501      	str	r5, [sp, #4]
   154a8:	1e07      	subs	r7, r0, #0
   154aa:	d142      	bne.n	15532 <setvbuf+0x126>
   154ac:	9b02      	ldr	r3, [sp, #8]
   154ae:	9301      	str	r3, [sp, #4]
   154b0:	42ab      	cmp	r3, r5
   154b2:	d139      	bne.n	15528 <setvbuf+0x11c>
   154b4:	2001      	movs	r0, #1
   154b6:	4240      	negs	r0, r0
   154b8:	2302      	movs	r3, #2
   154ba:	89a2      	ldrh	r2, [r4, #12]
   154bc:	4313      	orrs	r3, r2
   154be:	81a3      	strh	r3, [r4, #12]
   154c0:	2300      	movs	r3, #0
   154c2:	60a3      	str	r3, [r4, #8]
   154c4:	0023      	movs	r3, r4
   154c6:	3347      	adds	r3, #71	; 0x47
   154c8:	6023      	str	r3, [r4, #0]
   154ca:	6123      	str	r3, [r4, #16]
   154cc:	2301      	movs	r3, #1
   154ce:	6163      	str	r3, [r4, #20]
   154d0:	b005      	add	sp, #20
   154d2:	bdf0      	pop	{r4, r5, r6, r7, pc}
   154d4:	4b21      	ldr	r3, [pc, #132]	; (1555c <setvbuf+0x150>)
   154d6:	429c      	cmp	r4, r3
   154d8:	d101      	bne.n	154de <setvbuf+0xd2>
   154da:	68b4      	ldr	r4, [r6, #8]
   154dc:	e7aa      	b.n	15434 <setvbuf+0x28>
   154de:	4b20      	ldr	r3, [pc, #128]	; (15560 <setvbuf+0x154>)
   154e0:	429c      	cmp	r4, r3
   154e2:	d1a7      	bne.n	15434 <setvbuf+0x28>
   154e4:	68f4      	ldr	r4, [r6, #12]
   154e6:	e7a5      	b.n	15434 <setvbuf+0x28>
   154e8:	2f00      	cmp	r7, #0
   154ea:	d0d9      	beq.n	154a0 <setvbuf+0x94>
   154ec:	69b3      	ldr	r3, [r6, #24]
   154ee:	2b00      	cmp	r3, #0
   154f0:	d102      	bne.n	154f8 <setvbuf+0xec>
   154f2:	0030      	movs	r0, r6
   154f4:	f000 fa02 	bl	158fc <__sinit>
   154f8:	9b00      	ldr	r3, [sp, #0]
   154fa:	2b01      	cmp	r3, #1
   154fc:	d103      	bne.n	15506 <setvbuf+0xfa>
   154fe:	89a3      	ldrh	r3, [r4, #12]
   15500:	9a00      	ldr	r2, [sp, #0]
   15502:	431a      	orrs	r2, r3
   15504:	81a2      	strh	r2, [r4, #12]
   15506:	2008      	movs	r0, #8
   15508:	89a3      	ldrh	r3, [r4, #12]
   1550a:	6027      	str	r7, [r4, #0]
   1550c:	6127      	str	r7, [r4, #16]
   1550e:	6165      	str	r5, [r4, #20]
   15510:	4018      	ands	r0, r3
   15512:	d018      	beq.n	15546 <setvbuf+0x13a>
   15514:	2001      	movs	r0, #1
   15516:	4018      	ands	r0, r3
   15518:	2300      	movs	r3, #0
   1551a:	4298      	cmp	r0, r3
   1551c:	d011      	beq.n	15542 <setvbuf+0x136>
   1551e:	426d      	negs	r5, r5
   15520:	60a3      	str	r3, [r4, #8]
   15522:	61a5      	str	r5, [r4, #24]
   15524:	0018      	movs	r0, r3
   15526:	e7d3      	b.n	154d0 <setvbuf+0xc4>
   15528:	9801      	ldr	r0, [sp, #4]
   1552a:	f000 fae9 	bl	15b00 <malloc>
   1552e:	1e07      	subs	r7, r0, #0
   15530:	d0c0      	beq.n	154b4 <setvbuf+0xa8>
   15532:	2380      	movs	r3, #128	; 0x80
   15534:	89a2      	ldrh	r2, [r4, #12]
   15536:	9d01      	ldr	r5, [sp, #4]
   15538:	4313      	orrs	r3, r2
   1553a:	81a3      	strh	r3, [r4, #12]
   1553c:	e7d6      	b.n	154ec <setvbuf+0xe0>
   1553e:	2000      	movs	r0, #0
   15540:	e7ba      	b.n	154b8 <setvbuf+0xac>
   15542:	60a5      	str	r5, [r4, #8]
   15544:	e7c4      	b.n	154d0 <setvbuf+0xc4>
   15546:	60a0      	str	r0, [r4, #8]
   15548:	e7c2      	b.n	154d0 <setvbuf+0xc4>
   1554a:	2001      	movs	r0, #1
   1554c:	4240      	negs	r0, r0
   1554e:	e7bf      	b.n	154d0 <setvbuf+0xc4>
   15550:	200000a0 	.word	0x200000a0
   15554:	00016900 	.word	0x00016900
   15558:	fffff35c 	.word	0xfffff35c
   1555c:	00016920 	.word	0x00016920
   15560:	000168e0 	.word	0x000168e0

00015564 <__swbuf_r>:
   15564:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   15566:	0005      	movs	r5, r0
   15568:	000e      	movs	r6, r1
   1556a:	0014      	movs	r4, r2
   1556c:	2800      	cmp	r0, #0
   1556e:	d004      	beq.n	1557a <__swbuf_r+0x16>
   15570:	6983      	ldr	r3, [r0, #24]
   15572:	2b00      	cmp	r3, #0
   15574:	d101      	bne.n	1557a <__swbuf_r+0x16>
   15576:	f000 f9c1 	bl	158fc <__sinit>
   1557a:	4b22      	ldr	r3, [pc, #136]	; (15604 <__swbuf_r+0xa0>)
   1557c:	429c      	cmp	r4, r3
   1557e:	d12d      	bne.n	155dc <__swbuf_r+0x78>
   15580:	686c      	ldr	r4, [r5, #4]
   15582:	69a3      	ldr	r3, [r4, #24]
   15584:	60a3      	str	r3, [r4, #8]
   15586:	89a3      	ldrh	r3, [r4, #12]
   15588:	071b      	lsls	r3, r3, #28
   1558a:	d531      	bpl.n	155f0 <__swbuf_r+0x8c>
   1558c:	6923      	ldr	r3, [r4, #16]
   1558e:	2b00      	cmp	r3, #0
   15590:	d02e      	beq.n	155f0 <__swbuf_r+0x8c>
   15592:	6823      	ldr	r3, [r4, #0]
   15594:	6922      	ldr	r2, [r4, #16]
   15596:	b2f7      	uxtb	r7, r6
   15598:	1a98      	subs	r0, r3, r2
   1559a:	6963      	ldr	r3, [r4, #20]
   1559c:	b2f6      	uxtb	r6, r6
   1559e:	4298      	cmp	r0, r3
   155a0:	db05      	blt.n	155ae <__swbuf_r+0x4a>
   155a2:	0021      	movs	r1, r4
   155a4:	0028      	movs	r0, r5
   155a6:	f000 f93b 	bl	15820 <_fflush_r>
   155aa:	2800      	cmp	r0, #0
   155ac:	d126      	bne.n	155fc <__swbuf_r+0x98>
   155ae:	68a3      	ldr	r3, [r4, #8]
   155b0:	3001      	adds	r0, #1
   155b2:	3b01      	subs	r3, #1
   155b4:	60a3      	str	r3, [r4, #8]
   155b6:	6823      	ldr	r3, [r4, #0]
   155b8:	1c5a      	adds	r2, r3, #1
   155ba:	6022      	str	r2, [r4, #0]
   155bc:	701f      	strb	r7, [r3, #0]
   155be:	6963      	ldr	r3, [r4, #20]
   155c0:	4298      	cmp	r0, r3
   155c2:	d004      	beq.n	155ce <__swbuf_r+0x6a>
   155c4:	89a3      	ldrh	r3, [r4, #12]
   155c6:	07db      	lsls	r3, r3, #31
   155c8:	d51a      	bpl.n	15600 <__swbuf_r+0x9c>
   155ca:	2e0a      	cmp	r6, #10
   155cc:	d118      	bne.n	15600 <__swbuf_r+0x9c>
   155ce:	0021      	movs	r1, r4
   155d0:	0028      	movs	r0, r5
   155d2:	f000 f925 	bl	15820 <_fflush_r>
   155d6:	2800      	cmp	r0, #0
   155d8:	d012      	beq.n	15600 <__swbuf_r+0x9c>
   155da:	e00f      	b.n	155fc <__swbuf_r+0x98>
   155dc:	4b0a      	ldr	r3, [pc, #40]	; (15608 <__swbuf_r+0xa4>)
   155de:	429c      	cmp	r4, r3
   155e0:	d101      	bne.n	155e6 <__swbuf_r+0x82>
   155e2:	68ac      	ldr	r4, [r5, #8]
   155e4:	e7cd      	b.n	15582 <__swbuf_r+0x1e>
   155e6:	4b09      	ldr	r3, [pc, #36]	; (1560c <__swbuf_r+0xa8>)
   155e8:	429c      	cmp	r4, r3
   155ea:	d1ca      	bne.n	15582 <__swbuf_r+0x1e>
   155ec:	68ec      	ldr	r4, [r5, #12]
   155ee:	e7c8      	b.n	15582 <__swbuf_r+0x1e>
   155f0:	0021      	movs	r1, r4
   155f2:	0028      	movs	r0, r5
   155f4:	f000 f80c 	bl	15610 <__swsetup_r>
   155f8:	2800      	cmp	r0, #0
   155fa:	d0ca      	beq.n	15592 <__swbuf_r+0x2e>
   155fc:	2601      	movs	r6, #1
   155fe:	4276      	negs	r6, r6
   15600:	0030      	movs	r0, r6
   15602:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   15604:	00016900 	.word	0x00016900
   15608:	00016920 	.word	0x00016920
   1560c:	000168e0 	.word	0x000168e0

00015610 <__swsetup_r>:
   15610:	4b36      	ldr	r3, [pc, #216]	; (156ec <__swsetup_r+0xdc>)
   15612:	b570      	push	{r4, r5, r6, lr}
   15614:	681d      	ldr	r5, [r3, #0]
   15616:	0006      	movs	r6, r0
   15618:	000c      	movs	r4, r1
   1561a:	2d00      	cmp	r5, #0
   1561c:	d005      	beq.n	1562a <__swsetup_r+0x1a>
   1561e:	69ab      	ldr	r3, [r5, #24]
   15620:	2b00      	cmp	r3, #0
   15622:	d102      	bne.n	1562a <__swsetup_r+0x1a>
   15624:	0028      	movs	r0, r5
   15626:	f000 f969 	bl	158fc <__sinit>
   1562a:	4b31      	ldr	r3, [pc, #196]	; (156f0 <__swsetup_r+0xe0>)
   1562c:	429c      	cmp	r4, r3
   1562e:	d10f      	bne.n	15650 <__swsetup_r+0x40>
   15630:	686c      	ldr	r4, [r5, #4]
   15632:	230c      	movs	r3, #12
   15634:	5ee2      	ldrsh	r2, [r4, r3]
   15636:	b293      	uxth	r3, r2
   15638:	0719      	lsls	r1, r3, #28
   1563a:	d42d      	bmi.n	15698 <__swsetup_r+0x88>
   1563c:	06d9      	lsls	r1, r3, #27
   1563e:	d411      	bmi.n	15664 <__swsetup_r+0x54>
   15640:	2309      	movs	r3, #9
   15642:	2001      	movs	r0, #1
   15644:	6033      	str	r3, [r6, #0]
   15646:	3337      	adds	r3, #55	; 0x37
   15648:	4313      	orrs	r3, r2
   1564a:	81a3      	strh	r3, [r4, #12]
   1564c:	4240      	negs	r0, r0
   1564e:	bd70      	pop	{r4, r5, r6, pc}
   15650:	4b28      	ldr	r3, [pc, #160]	; (156f4 <__swsetup_r+0xe4>)
   15652:	429c      	cmp	r4, r3
   15654:	d101      	bne.n	1565a <__swsetup_r+0x4a>
   15656:	68ac      	ldr	r4, [r5, #8]
   15658:	e7eb      	b.n	15632 <__swsetup_r+0x22>
   1565a:	4b27      	ldr	r3, [pc, #156]	; (156f8 <__swsetup_r+0xe8>)
   1565c:	429c      	cmp	r4, r3
   1565e:	d1e8      	bne.n	15632 <__swsetup_r+0x22>
   15660:	68ec      	ldr	r4, [r5, #12]
   15662:	e7e6      	b.n	15632 <__swsetup_r+0x22>
   15664:	075b      	lsls	r3, r3, #29
   15666:	d513      	bpl.n	15690 <__swsetup_r+0x80>
   15668:	6b61      	ldr	r1, [r4, #52]	; 0x34
   1566a:	2900      	cmp	r1, #0
   1566c:	d008      	beq.n	15680 <__swsetup_r+0x70>
   1566e:	0023      	movs	r3, r4
   15670:	3344      	adds	r3, #68	; 0x44
   15672:	4299      	cmp	r1, r3
   15674:	d002      	beq.n	1567c <__swsetup_r+0x6c>
   15676:	0030      	movs	r0, r6
   15678:	f000 fa58 	bl	15b2c <_free_r>
   1567c:	2300      	movs	r3, #0
   1567e:	6363      	str	r3, [r4, #52]	; 0x34
   15680:	2224      	movs	r2, #36	; 0x24
   15682:	89a3      	ldrh	r3, [r4, #12]
   15684:	4393      	bics	r3, r2
   15686:	81a3      	strh	r3, [r4, #12]
   15688:	2300      	movs	r3, #0
   1568a:	6063      	str	r3, [r4, #4]
   1568c:	6923      	ldr	r3, [r4, #16]
   1568e:	6023      	str	r3, [r4, #0]
   15690:	2308      	movs	r3, #8
   15692:	89a2      	ldrh	r2, [r4, #12]
   15694:	4313      	orrs	r3, r2
   15696:	81a3      	strh	r3, [r4, #12]
   15698:	6923      	ldr	r3, [r4, #16]
   1569a:	2b00      	cmp	r3, #0
   1569c:	d10b      	bne.n	156b6 <__swsetup_r+0xa6>
   1569e:	21a0      	movs	r1, #160	; 0xa0
   156a0:	2280      	movs	r2, #128	; 0x80
   156a2:	89a3      	ldrh	r3, [r4, #12]
   156a4:	0089      	lsls	r1, r1, #2
   156a6:	0092      	lsls	r2, r2, #2
   156a8:	400b      	ands	r3, r1
   156aa:	4293      	cmp	r3, r2
   156ac:	d003      	beq.n	156b6 <__swsetup_r+0xa6>
   156ae:	0021      	movs	r1, r4
   156b0:	0030      	movs	r0, r6
   156b2:	f000 f9e1 	bl	15a78 <__smakebuf_r>
   156b6:	2301      	movs	r3, #1
   156b8:	89a2      	ldrh	r2, [r4, #12]
   156ba:	4013      	ands	r3, r2
   156bc:	d011      	beq.n	156e2 <__swsetup_r+0xd2>
   156be:	2300      	movs	r3, #0
   156c0:	60a3      	str	r3, [r4, #8]
   156c2:	6963      	ldr	r3, [r4, #20]
   156c4:	425b      	negs	r3, r3
   156c6:	61a3      	str	r3, [r4, #24]
   156c8:	2000      	movs	r0, #0
   156ca:	6923      	ldr	r3, [r4, #16]
   156cc:	4283      	cmp	r3, r0
   156ce:	d1be      	bne.n	1564e <__swsetup_r+0x3e>
   156d0:	230c      	movs	r3, #12
   156d2:	5ee2      	ldrsh	r2, [r4, r3]
   156d4:	0613      	lsls	r3, r2, #24
   156d6:	d5ba      	bpl.n	1564e <__swsetup_r+0x3e>
   156d8:	2340      	movs	r3, #64	; 0x40
   156da:	4313      	orrs	r3, r2
   156dc:	81a3      	strh	r3, [r4, #12]
   156de:	3801      	subs	r0, #1
   156e0:	e7b5      	b.n	1564e <__swsetup_r+0x3e>
   156e2:	0792      	lsls	r2, r2, #30
   156e4:	d400      	bmi.n	156e8 <__swsetup_r+0xd8>
   156e6:	6963      	ldr	r3, [r4, #20]
   156e8:	60a3      	str	r3, [r4, #8]
   156ea:	e7ed      	b.n	156c8 <__swsetup_r+0xb8>
   156ec:	200000a0 	.word	0x200000a0
   156f0:	00016900 	.word	0x00016900
   156f4:	00016920 	.word	0x00016920
   156f8:	000168e0 	.word	0x000168e0

000156fc <abort>:
   156fc:	b510      	push	{r4, lr}
   156fe:	2006      	movs	r0, #6
   15700:	f000 faf8 	bl	15cf4 <raise>
   15704:	2001      	movs	r0, #1
   15706:	f7f3 faf3 	bl	8cf0 <_exit>
   1570a:	Address 0x0001570a is out of bounds.


0001570c <__sflush_r>:
   1570c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   1570e:	898a      	ldrh	r2, [r1, #12]
   15710:	0005      	movs	r5, r0
   15712:	000c      	movs	r4, r1
   15714:	0713      	lsls	r3, r2, #28
   15716:	d460      	bmi.n	157da <__sflush_r+0xce>
   15718:	684b      	ldr	r3, [r1, #4]
   1571a:	2b00      	cmp	r3, #0
   1571c:	dc04      	bgt.n	15728 <__sflush_r+0x1c>
   1571e:	6c0b      	ldr	r3, [r1, #64]	; 0x40
   15720:	2b00      	cmp	r3, #0
   15722:	dc01      	bgt.n	15728 <__sflush_r+0x1c>
   15724:	2000      	movs	r0, #0
   15726:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
   15728:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
   1572a:	2f00      	cmp	r7, #0
   1572c:	d0fa      	beq.n	15724 <__sflush_r+0x18>
   1572e:	2300      	movs	r3, #0
   15730:	682e      	ldr	r6, [r5, #0]
   15732:	602b      	str	r3, [r5, #0]
   15734:	2380      	movs	r3, #128	; 0x80
   15736:	015b      	lsls	r3, r3, #5
   15738:	401a      	ands	r2, r3
   1573a:	d034      	beq.n	157a6 <__sflush_r+0x9a>
   1573c:	6d60      	ldr	r0, [r4, #84]	; 0x54
   1573e:	89a3      	ldrh	r3, [r4, #12]
   15740:	075b      	lsls	r3, r3, #29
   15742:	d506      	bpl.n	15752 <__sflush_r+0x46>
   15744:	6863      	ldr	r3, [r4, #4]
   15746:	1ac0      	subs	r0, r0, r3
   15748:	6b63      	ldr	r3, [r4, #52]	; 0x34
   1574a:	2b00      	cmp	r3, #0
   1574c:	d001      	beq.n	15752 <__sflush_r+0x46>
   1574e:	6c23      	ldr	r3, [r4, #64]	; 0x40
   15750:	1ac0      	subs	r0, r0, r3
   15752:	0002      	movs	r2, r0
   15754:	6a21      	ldr	r1, [r4, #32]
   15756:	2300      	movs	r3, #0
   15758:	0028      	movs	r0, r5
   1575a:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
   1575c:	47b8      	blx	r7
   1575e:	89a1      	ldrh	r1, [r4, #12]
   15760:	1c43      	adds	r3, r0, #1
   15762:	d106      	bne.n	15772 <__sflush_r+0x66>
   15764:	682b      	ldr	r3, [r5, #0]
   15766:	2b1d      	cmp	r3, #29
   15768:	d831      	bhi.n	157ce <__sflush_r+0xc2>
   1576a:	4a2c      	ldr	r2, [pc, #176]	; (1581c <__sflush_r+0x110>)
   1576c:	40da      	lsrs	r2, r3
   1576e:	07d3      	lsls	r3, r2, #31
   15770:	d52d      	bpl.n	157ce <__sflush_r+0xc2>
   15772:	2300      	movs	r3, #0
   15774:	6063      	str	r3, [r4, #4]
   15776:	6923      	ldr	r3, [r4, #16]
   15778:	6023      	str	r3, [r4, #0]
   1577a:	04cb      	lsls	r3, r1, #19
   1577c:	d505      	bpl.n	1578a <__sflush_r+0x7e>
   1577e:	1c43      	adds	r3, r0, #1
   15780:	d102      	bne.n	15788 <__sflush_r+0x7c>
   15782:	682b      	ldr	r3, [r5, #0]
   15784:	2b00      	cmp	r3, #0
   15786:	d100      	bne.n	1578a <__sflush_r+0x7e>
   15788:	6560      	str	r0, [r4, #84]	; 0x54
   1578a:	6b61      	ldr	r1, [r4, #52]	; 0x34
   1578c:	602e      	str	r6, [r5, #0]
   1578e:	2900      	cmp	r1, #0
   15790:	d0c8      	beq.n	15724 <__sflush_r+0x18>
   15792:	0023      	movs	r3, r4
   15794:	3344      	adds	r3, #68	; 0x44
   15796:	4299      	cmp	r1, r3
   15798:	d002      	beq.n	157a0 <__sflush_r+0x94>
   1579a:	0028      	movs	r0, r5
   1579c:	f000 f9c6 	bl	15b2c <_free_r>
   157a0:	2000      	movs	r0, #0
   157a2:	6360      	str	r0, [r4, #52]	; 0x34
   157a4:	e7bf      	b.n	15726 <__sflush_r+0x1a>
   157a6:	2301      	movs	r3, #1
   157a8:	6a21      	ldr	r1, [r4, #32]
   157aa:	0028      	movs	r0, r5
   157ac:	47b8      	blx	r7
   157ae:	1c43      	adds	r3, r0, #1
   157b0:	d1c5      	bne.n	1573e <__sflush_r+0x32>
   157b2:	682b      	ldr	r3, [r5, #0]
   157b4:	2b00      	cmp	r3, #0
   157b6:	d0c2      	beq.n	1573e <__sflush_r+0x32>
   157b8:	2b1d      	cmp	r3, #29
   157ba:	d001      	beq.n	157c0 <__sflush_r+0xb4>
   157bc:	2b16      	cmp	r3, #22
   157be:	d101      	bne.n	157c4 <__sflush_r+0xb8>
   157c0:	602e      	str	r6, [r5, #0]
   157c2:	e7af      	b.n	15724 <__sflush_r+0x18>
   157c4:	2340      	movs	r3, #64	; 0x40
   157c6:	89a2      	ldrh	r2, [r4, #12]
   157c8:	4313      	orrs	r3, r2
   157ca:	81a3      	strh	r3, [r4, #12]
   157cc:	e7ab      	b.n	15726 <__sflush_r+0x1a>
   157ce:	2340      	movs	r3, #64	; 0x40
   157d0:	430b      	orrs	r3, r1
   157d2:	2001      	movs	r0, #1
   157d4:	81a3      	strh	r3, [r4, #12]
   157d6:	4240      	negs	r0, r0
   157d8:	e7a5      	b.n	15726 <__sflush_r+0x1a>
   157da:	690f      	ldr	r7, [r1, #16]
   157dc:	2f00      	cmp	r7, #0
   157de:	d0a1      	beq.n	15724 <__sflush_r+0x18>
   157e0:	680b      	ldr	r3, [r1, #0]
   157e2:	600f      	str	r7, [r1, #0]
   157e4:	1bdb      	subs	r3, r3, r7
   157e6:	9301      	str	r3, [sp, #4]
   157e8:	2300      	movs	r3, #0
   157ea:	0792      	lsls	r2, r2, #30
   157ec:	d100      	bne.n	157f0 <__sflush_r+0xe4>
   157ee:	694b      	ldr	r3, [r1, #20]
   157f0:	60a3      	str	r3, [r4, #8]
   157f2:	9b01      	ldr	r3, [sp, #4]
   157f4:	2b00      	cmp	r3, #0
   157f6:	dc00      	bgt.n	157fa <__sflush_r+0xee>
   157f8:	e794      	b.n	15724 <__sflush_r+0x18>
   157fa:	9b01      	ldr	r3, [sp, #4]
   157fc:	003a      	movs	r2, r7
   157fe:	6a21      	ldr	r1, [r4, #32]
   15800:	0028      	movs	r0, r5
   15802:	6aa6      	ldr	r6, [r4, #40]	; 0x28
   15804:	47b0      	blx	r6
   15806:	2800      	cmp	r0, #0
   15808:	dc03      	bgt.n	15812 <__sflush_r+0x106>
   1580a:	2340      	movs	r3, #64	; 0x40
   1580c:	89a2      	ldrh	r2, [r4, #12]
   1580e:	4313      	orrs	r3, r2
   15810:	e7df      	b.n	157d2 <__sflush_r+0xc6>
   15812:	9b01      	ldr	r3, [sp, #4]
   15814:	183f      	adds	r7, r7, r0
   15816:	1a1b      	subs	r3, r3, r0
   15818:	9301      	str	r3, [sp, #4]
   1581a:	e7ea      	b.n	157f2 <__sflush_r+0xe6>
   1581c:	20400001 	.word	0x20400001

00015820 <_fflush_r>:
   15820:	690b      	ldr	r3, [r1, #16]
   15822:	b570      	push	{r4, r5, r6, lr}
   15824:	0005      	movs	r5, r0
   15826:	000c      	movs	r4, r1
   15828:	2b00      	cmp	r3, #0
   1582a:	d101      	bne.n	15830 <_fflush_r+0x10>
   1582c:	2000      	movs	r0, #0
   1582e:	bd70      	pop	{r4, r5, r6, pc}
   15830:	2800      	cmp	r0, #0
   15832:	d004      	beq.n	1583e <_fflush_r+0x1e>
   15834:	6983      	ldr	r3, [r0, #24]
   15836:	2b00      	cmp	r3, #0
   15838:	d101      	bne.n	1583e <_fflush_r+0x1e>
   1583a:	f000 f85f 	bl	158fc <__sinit>
   1583e:	4b0b      	ldr	r3, [pc, #44]	; (1586c <_fflush_r+0x4c>)
   15840:	429c      	cmp	r4, r3
   15842:	d109      	bne.n	15858 <_fflush_r+0x38>
   15844:	686c      	ldr	r4, [r5, #4]
   15846:	220c      	movs	r2, #12
   15848:	5ea3      	ldrsh	r3, [r4, r2]
   1584a:	2b00      	cmp	r3, #0
   1584c:	d0ee      	beq.n	1582c <_fflush_r+0xc>
   1584e:	0021      	movs	r1, r4
   15850:	0028      	movs	r0, r5
   15852:	f7ff ff5b 	bl	1570c <__sflush_r>
   15856:	e7ea      	b.n	1582e <_fflush_r+0xe>
   15858:	4b05      	ldr	r3, [pc, #20]	; (15870 <_fflush_r+0x50>)
   1585a:	429c      	cmp	r4, r3
   1585c:	d101      	bne.n	15862 <_fflush_r+0x42>
   1585e:	68ac      	ldr	r4, [r5, #8]
   15860:	e7f1      	b.n	15846 <_fflush_r+0x26>
   15862:	4b04      	ldr	r3, [pc, #16]	; (15874 <_fflush_r+0x54>)
   15864:	429c      	cmp	r4, r3
   15866:	d1ee      	bne.n	15846 <_fflush_r+0x26>
   15868:	68ec      	ldr	r4, [r5, #12]
   1586a:	e7ec      	b.n	15846 <_fflush_r+0x26>
   1586c:	00016900 	.word	0x00016900
   15870:	00016920 	.word	0x00016920
   15874:	000168e0 	.word	0x000168e0

00015878 <_cleanup_r>:
   15878:	b510      	push	{r4, lr}
   1587a:	4902      	ldr	r1, [pc, #8]	; (15884 <_cleanup_r+0xc>)
   1587c:	f000 f8b2 	bl	159e4 <_fwalk_reent>
   15880:	bd10      	pop	{r4, pc}
   15882:	46c0      	nop			; (mov r8, r8)
   15884:	00015821 	.word	0x00015821

00015888 <std.isra.0>:
   15888:	2300      	movs	r3, #0
   1588a:	b510      	push	{r4, lr}
   1588c:	0004      	movs	r4, r0
   1588e:	6003      	str	r3, [r0, #0]
   15890:	6043      	str	r3, [r0, #4]
   15892:	6083      	str	r3, [r0, #8]
   15894:	8181      	strh	r1, [r0, #12]
   15896:	6643      	str	r3, [r0, #100]	; 0x64
   15898:	81c2      	strh	r2, [r0, #14]
   1589a:	6103      	str	r3, [r0, #16]
   1589c:	6143      	str	r3, [r0, #20]
   1589e:	6183      	str	r3, [r0, #24]
   158a0:	0019      	movs	r1, r3
   158a2:	2208      	movs	r2, #8
   158a4:	305c      	adds	r0, #92	; 0x5c
   158a6:	f7ff fa4f 	bl	14d48 <memset>
   158aa:	4b05      	ldr	r3, [pc, #20]	; (158c0 <std.isra.0+0x38>)
   158ac:	6224      	str	r4, [r4, #32]
   158ae:	6263      	str	r3, [r4, #36]	; 0x24
   158b0:	4b04      	ldr	r3, [pc, #16]	; (158c4 <std.isra.0+0x3c>)
   158b2:	62a3      	str	r3, [r4, #40]	; 0x28
   158b4:	4b04      	ldr	r3, [pc, #16]	; (158c8 <std.isra.0+0x40>)
   158b6:	62e3      	str	r3, [r4, #44]	; 0x2c
   158b8:	4b04      	ldr	r3, [pc, #16]	; (158cc <std.isra.0+0x44>)
   158ba:	6323      	str	r3, [r4, #48]	; 0x30
   158bc:	bd10      	pop	{r4, pc}
   158be:	46c0      	nop			; (mov r8, r8)
   158c0:	00015d35 	.word	0x00015d35
   158c4:	00015d5d 	.word	0x00015d5d
   158c8:	00015d95 	.word	0x00015d95
   158cc:	00015dc1 	.word	0x00015dc1

000158d0 <__sfmoreglue>:
   158d0:	b570      	push	{r4, r5, r6, lr}
   158d2:	2568      	movs	r5, #104	; 0x68
   158d4:	1e4a      	subs	r2, r1, #1
   158d6:	4355      	muls	r5, r2
   158d8:	000e      	movs	r6, r1
   158da:	0029      	movs	r1, r5
   158dc:	3174      	adds	r1, #116	; 0x74
   158de:	f000 f96f 	bl	15bc0 <_malloc_r>
   158e2:	1e04      	subs	r4, r0, #0
   158e4:	d008      	beq.n	158f8 <__sfmoreglue+0x28>
   158e6:	2100      	movs	r1, #0
   158e8:	002a      	movs	r2, r5
   158ea:	6001      	str	r1, [r0, #0]
   158ec:	6046      	str	r6, [r0, #4]
   158ee:	300c      	adds	r0, #12
   158f0:	60a0      	str	r0, [r4, #8]
   158f2:	3268      	adds	r2, #104	; 0x68
   158f4:	f7ff fa28 	bl	14d48 <memset>
   158f8:	0020      	movs	r0, r4
   158fa:	bd70      	pop	{r4, r5, r6, pc}

000158fc <__sinit>:
   158fc:	6983      	ldr	r3, [r0, #24]
   158fe:	b513      	push	{r0, r1, r4, lr}
   15900:	0004      	movs	r4, r0
   15902:	2b00      	cmp	r3, #0
   15904:	d128      	bne.n	15958 <__sinit+0x5c>
   15906:	6483      	str	r3, [r0, #72]	; 0x48
   15908:	64c3      	str	r3, [r0, #76]	; 0x4c
   1590a:	6503      	str	r3, [r0, #80]	; 0x50
   1590c:	4b13      	ldr	r3, [pc, #76]	; (1595c <__sinit+0x60>)
   1590e:	4a14      	ldr	r2, [pc, #80]	; (15960 <__sinit+0x64>)
   15910:	681b      	ldr	r3, [r3, #0]
   15912:	6282      	str	r2, [r0, #40]	; 0x28
   15914:	9301      	str	r3, [sp, #4]
   15916:	4298      	cmp	r0, r3
   15918:	d101      	bne.n	1591e <__sinit+0x22>
   1591a:	2301      	movs	r3, #1
   1591c:	6183      	str	r3, [r0, #24]
   1591e:	0020      	movs	r0, r4
   15920:	f000 f820 	bl	15964 <__sfp>
   15924:	6060      	str	r0, [r4, #4]
   15926:	0020      	movs	r0, r4
   15928:	f000 f81c 	bl	15964 <__sfp>
   1592c:	60a0      	str	r0, [r4, #8]
   1592e:	0020      	movs	r0, r4
   15930:	f000 f818 	bl	15964 <__sfp>
   15934:	2200      	movs	r2, #0
   15936:	60e0      	str	r0, [r4, #12]
   15938:	2104      	movs	r1, #4
   1593a:	6860      	ldr	r0, [r4, #4]
   1593c:	f7ff ffa4 	bl	15888 <std.isra.0>
   15940:	2201      	movs	r2, #1
   15942:	2109      	movs	r1, #9
   15944:	68a0      	ldr	r0, [r4, #8]
   15946:	f7ff ff9f 	bl	15888 <std.isra.0>
   1594a:	2202      	movs	r2, #2
   1594c:	2112      	movs	r1, #18
   1594e:	68e0      	ldr	r0, [r4, #12]
   15950:	f7ff ff9a 	bl	15888 <std.isra.0>
   15954:	2301      	movs	r3, #1
   15956:	61a3      	str	r3, [r4, #24]
   15958:	bd13      	pop	{r0, r1, r4, pc}
   1595a:	46c0      	nop			; (mov r8, r8)
   1595c:	000168a8 	.word	0x000168a8
   15960:	00015879 	.word	0x00015879

00015964 <__sfp>:
   15964:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   15966:	4b1e      	ldr	r3, [pc, #120]	; (159e0 <__sfp+0x7c>)
   15968:	0007      	movs	r7, r0
   1596a:	681e      	ldr	r6, [r3, #0]
   1596c:	69b3      	ldr	r3, [r6, #24]
   1596e:	2b00      	cmp	r3, #0
   15970:	d102      	bne.n	15978 <__sfp+0x14>
   15972:	0030      	movs	r0, r6
   15974:	f7ff ffc2 	bl	158fc <__sinit>
   15978:	3648      	adds	r6, #72	; 0x48
   1597a:	68b4      	ldr	r4, [r6, #8]
   1597c:	6873      	ldr	r3, [r6, #4]
   1597e:	3b01      	subs	r3, #1
   15980:	d504      	bpl.n	1598c <__sfp+0x28>
   15982:	6833      	ldr	r3, [r6, #0]
   15984:	2b00      	cmp	r3, #0
   15986:	d007      	beq.n	15998 <__sfp+0x34>
   15988:	6836      	ldr	r6, [r6, #0]
   1598a:	e7f6      	b.n	1597a <__sfp+0x16>
   1598c:	220c      	movs	r2, #12
   1598e:	5ea5      	ldrsh	r5, [r4, r2]
   15990:	2d00      	cmp	r5, #0
   15992:	d00d      	beq.n	159b0 <__sfp+0x4c>
   15994:	3468      	adds	r4, #104	; 0x68
   15996:	e7f2      	b.n	1597e <__sfp+0x1a>
   15998:	2104      	movs	r1, #4
   1599a:	0038      	movs	r0, r7
   1599c:	f7ff ff98 	bl	158d0 <__sfmoreglue>
   159a0:	6030      	str	r0, [r6, #0]
   159a2:	2800      	cmp	r0, #0
   159a4:	d1f0      	bne.n	15988 <__sfp+0x24>
   159a6:	230c      	movs	r3, #12
   159a8:	0004      	movs	r4, r0
   159aa:	603b      	str	r3, [r7, #0]
   159ac:	0020      	movs	r0, r4
   159ae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   159b0:	2301      	movs	r3, #1
   159b2:	0020      	movs	r0, r4
   159b4:	425b      	negs	r3, r3
   159b6:	81e3      	strh	r3, [r4, #14]
   159b8:	3302      	adds	r3, #2
   159ba:	81a3      	strh	r3, [r4, #12]
   159bc:	6665      	str	r5, [r4, #100]	; 0x64
   159be:	6025      	str	r5, [r4, #0]
   159c0:	60a5      	str	r5, [r4, #8]
   159c2:	6065      	str	r5, [r4, #4]
   159c4:	6125      	str	r5, [r4, #16]
   159c6:	6165      	str	r5, [r4, #20]
   159c8:	61a5      	str	r5, [r4, #24]
   159ca:	2208      	movs	r2, #8
   159cc:	0029      	movs	r1, r5
   159ce:	305c      	adds	r0, #92	; 0x5c
   159d0:	f7ff f9ba 	bl	14d48 <memset>
   159d4:	6365      	str	r5, [r4, #52]	; 0x34
   159d6:	63a5      	str	r5, [r4, #56]	; 0x38
   159d8:	64a5      	str	r5, [r4, #72]	; 0x48
   159da:	64e5      	str	r5, [r4, #76]	; 0x4c
   159dc:	e7e6      	b.n	159ac <__sfp+0x48>
   159de:	46c0      	nop			; (mov r8, r8)
   159e0:	000168a8 	.word	0x000168a8

000159e4 <_fwalk_reent>:
   159e4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   159e6:	0004      	movs	r4, r0
   159e8:	0007      	movs	r7, r0
   159ea:	2600      	movs	r6, #0
   159ec:	9101      	str	r1, [sp, #4]
   159ee:	3448      	adds	r4, #72	; 0x48
   159f0:	2c00      	cmp	r4, #0
   159f2:	d101      	bne.n	159f8 <_fwalk_reent+0x14>
   159f4:	0030      	movs	r0, r6
   159f6:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
   159f8:	6863      	ldr	r3, [r4, #4]
   159fa:	68a5      	ldr	r5, [r4, #8]
   159fc:	9300      	str	r3, [sp, #0]
   159fe:	9b00      	ldr	r3, [sp, #0]
   15a00:	3b01      	subs	r3, #1
   15a02:	9300      	str	r3, [sp, #0]
   15a04:	d501      	bpl.n	15a0a <_fwalk_reent+0x26>
   15a06:	6824      	ldr	r4, [r4, #0]
   15a08:	e7f2      	b.n	159f0 <_fwalk_reent+0xc>
   15a0a:	89ab      	ldrh	r3, [r5, #12]
   15a0c:	2b01      	cmp	r3, #1
   15a0e:	d908      	bls.n	15a22 <_fwalk_reent+0x3e>
   15a10:	220e      	movs	r2, #14
   15a12:	5eab      	ldrsh	r3, [r5, r2]
   15a14:	3301      	adds	r3, #1
   15a16:	d004      	beq.n	15a22 <_fwalk_reent+0x3e>
   15a18:	0029      	movs	r1, r5
   15a1a:	0038      	movs	r0, r7
   15a1c:	9b01      	ldr	r3, [sp, #4]
   15a1e:	4798      	blx	r3
   15a20:	4306      	orrs	r6, r0
   15a22:	3568      	adds	r5, #104	; 0x68
   15a24:	e7eb      	b.n	159fe <_fwalk_reent+0x1a>
   15a26:	Address 0x00015a26 is out of bounds.


00015a28 <__swhatbuf_r>:
   15a28:	b570      	push	{r4, r5, r6, lr}
   15a2a:	000e      	movs	r6, r1
   15a2c:	001d      	movs	r5, r3
   15a2e:	230e      	movs	r3, #14
   15a30:	5ec9      	ldrsh	r1, [r1, r3]
   15a32:	b090      	sub	sp, #64	; 0x40
   15a34:	0014      	movs	r4, r2
   15a36:	2900      	cmp	r1, #0
   15a38:	da07      	bge.n	15a4a <__swhatbuf_r+0x22>
   15a3a:	2300      	movs	r3, #0
   15a3c:	602b      	str	r3, [r5, #0]
   15a3e:	89b3      	ldrh	r3, [r6, #12]
   15a40:	061b      	lsls	r3, r3, #24
   15a42:	d411      	bmi.n	15a68 <__swhatbuf_r+0x40>
   15a44:	2380      	movs	r3, #128	; 0x80
   15a46:	00db      	lsls	r3, r3, #3
   15a48:	e00f      	b.n	15a6a <__swhatbuf_r+0x42>
   15a4a:	aa01      	add	r2, sp, #4
   15a4c:	f000 f9e4 	bl	15e18 <_fstat_r>
   15a50:	2800      	cmp	r0, #0
   15a52:	dbf2      	blt.n	15a3a <__swhatbuf_r+0x12>
   15a54:	22f0      	movs	r2, #240	; 0xf0
   15a56:	9b02      	ldr	r3, [sp, #8]
   15a58:	0212      	lsls	r2, r2, #8
   15a5a:	4013      	ands	r3, r2
   15a5c:	4a05      	ldr	r2, [pc, #20]	; (15a74 <__swhatbuf_r+0x4c>)
   15a5e:	189b      	adds	r3, r3, r2
   15a60:	425a      	negs	r2, r3
   15a62:	4153      	adcs	r3, r2
   15a64:	602b      	str	r3, [r5, #0]
   15a66:	e7ed      	b.n	15a44 <__swhatbuf_r+0x1c>
   15a68:	2340      	movs	r3, #64	; 0x40
   15a6a:	2000      	movs	r0, #0
   15a6c:	6023      	str	r3, [r4, #0]
   15a6e:	b010      	add	sp, #64	; 0x40
   15a70:	bd70      	pop	{r4, r5, r6, pc}
   15a72:	46c0      	nop			; (mov r8, r8)
   15a74:	ffffe000 	.word	0xffffe000

00015a78 <__smakebuf_r>:
   15a78:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   15a7a:	2602      	movs	r6, #2
   15a7c:	898b      	ldrh	r3, [r1, #12]
   15a7e:	0005      	movs	r5, r0
   15a80:	000c      	movs	r4, r1
   15a82:	4233      	tst	r3, r6
   15a84:	d006      	beq.n	15a94 <__smakebuf_r+0x1c>
   15a86:	0023      	movs	r3, r4
   15a88:	3347      	adds	r3, #71	; 0x47
   15a8a:	6023      	str	r3, [r4, #0]
   15a8c:	6123      	str	r3, [r4, #16]
   15a8e:	2301      	movs	r3, #1
   15a90:	6163      	str	r3, [r4, #20]
   15a92:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
   15a94:	ab01      	add	r3, sp, #4
   15a96:	466a      	mov	r2, sp
   15a98:	f7ff ffc6 	bl	15a28 <__swhatbuf_r>
   15a9c:	9900      	ldr	r1, [sp, #0]
   15a9e:	0007      	movs	r7, r0
   15aa0:	0028      	movs	r0, r5
   15aa2:	f000 f88d 	bl	15bc0 <_malloc_r>
   15aa6:	2800      	cmp	r0, #0
   15aa8:	d108      	bne.n	15abc <__smakebuf_r+0x44>
   15aaa:	220c      	movs	r2, #12
   15aac:	5ea3      	ldrsh	r3, [r4, r2]
   15aae:	059a      	lsls	r2, r3, #22
   15ab0:	d4ef      	bmi.n	15a92 <__smakebuf_r+0x1a>
   15ab2:	2203      	movs	r2, #3
   15ab4:	4393      	bics	r3, r2
   15ab6:	431e      	orrs	r6, r3
   15ab8:	81a6      	strh	r6, [r4, #12]
   15aba:	e7e4      	b.n	15a86 <__smakebuf_r+0xe>
   15abc:	4b0f      	ldr	r3, [pc, #60]	; (15afc <__smakebuf_r+0x84>)
   15abe:	62ab      	str	r3, [r5, #40]	; 0x28
   15ac0:	2380      	movs	r3, #128	; 0x80
   15ac2:	89a2      	ldrh	r2, [r4, #12]
   15ac4:	6020      	str	r0, [r4, #0]
   15ac6:	4313      	orrs	r3, r2
   15ac8:	81a3      	strh	r3, [r4, #12]
   15aca:	9b00      	ldr	r3, [sp, #0]
   15acc:	6120      	str	r0, [r4, #16]
   15ace:	6163      	str	r3, [r4, #20]
   15ad0:	9b01      	ldr	r3, [sp, #4]
   15ad2:	2b00      	cmp	r3, #0
   15ad4:	d00d      	beq.n	15af2 <__smakebuf_r+0x7a>
   15ad6:	230e      	movs	r3, #14
   15ad8:	5ee1      	ldrsh	r1, [r4, r3]
   15ada:	0028      	movs	r0, r5
   15adc:	f000 f9ae 	bl	15e3c <_isatty_r>
   15ae0:	2800      	cmp	r0, #0
   15ae2:	d006      	beq.n	15af2 <__smakebuf_r+0x7a>
   15ae4:	2203      	movs	r2, #3
   15ae6:	89a3      	ldrh	r3, [r4, #12]
   15ae8:	4393      	bics	r3, r2
   15aea:	001a      	movs	r2, r3
   15aec:	2301      	movs	r3, #1
   15aee:	4313      	orrs	r3, r2
   15af0:	81a3      	strh	r3, [r4, #12]
   15af2:	89a0      	ldrh	r0, [r4, #12]
   15af4:	4338      	orrs	r0, r7
   15af6:	81a0      	strh	r0, [r4, #12]
   15af8:	e7cb      	b.n	15a92 <__smakebuf_r+0x1a>
   15afa:	46c0      	nop			; (mov r8, r8)
   15afc:	00015879 	.word	0x00015879

00015b00 <malloc>:
   15b00:	b510      	push	{r4, lr}
   15b02:	4b03      	ldr	r3, [pc, #12]	; (15b10 <malloc+0x10>)
   15b04:	0001      	movs	r1, r0
   15b06:	6818      	ldr	r0, [r3, #0]
   15b08:	f000 f85a 	bl	15bc0 <_malloc_r>
   15b0c:	bd10      	pop	{r4, pc}
   15b0e:	46c0      	nop			; (mov r8, r8)
   15b10:	200000a0 	.word	0x200000a0

00015b14 <memchr>:
   15b14:	b2c9      	uxtb	r1, r1
   15b16:	1882      	adds	r2, r0, r2
   15b18:	4290      	cmp	r0, r2
   15b1a:	d101      	bne.n	15b20 <memchr+0xc>
   15b1c:	2000      	movs	r0, #0
   15b1e:	4770      	bx	lr
   15b20:	7803      	ldrb	r3, [r0, #0]
   15b22:	428b      	cmp	r3, r1
   15b24:	d0fb      	beq.n	15b1e <memchr+0xa>
   15b26:	3001      	adds	r0, #1
   15b28:	e7f6      	b.n	15b18 <memchr+0x4>
   15b2a:	Address 0x00015b2a is out of bounds.


00015b2c <_free_r>:
   15b2c:	b570      	push	{r4, r5, r6, lr}
   15b2e:	0005      	movs	r5, r0
   15b30:	2900      	cmp	r1, #0
   15b32:	d010      	beq.n	15b56 <_free_r+0x2a>
   15b34:	1f0c      	subs	r4, r1, #4
   15b36:	6823      	ldr	r3, [r4, #0]
   15b38:	2b00      	cmp	r3, #0
   15b3a:	da00      	bge.n	15b3e <_free_r+0x12>
   15b3c:	18e4      	adds	r4, r4, r3
   15b3e:	0028      	movs	r0, r5
   15b40:	f000 f9a2 	bl	15e88 <__malloc_lock>
   15b44:	4a1d      	ldr	r2, [pc, #116]	; (15bbc <_free_r+0x90>)
   15b46:	6813      	ldr	r3, [r2, #0]
   15b48:	2b00      	cmp	r3, #0
   15b4a:	d105      	bne.n	15b58 <_free_r+0x2c>
   15b4c:	6063      	str	r3, [r4, #4]
   15b4e:	6014      	str	r4, [r2, #0]
   15b50:	0028      	movs	r0, r5
   15b52:	f000 f99a 	bl	15e8a <__malloc_unlock>
   15b56:	bd70      	pop	{r4, r5, r6, pc}
   15b58:	42a3      	cmp	r3, r4
   15b5a:	d909      	bls.n	15b70 <_free_r+0x44>
   15b5c:	6821      	ldr	r1, [r4, #0]
   15b5e:	1860      	adds	r0, r4, r1
   15b60:	4283      	cmp	r3, r0
   15b62:	d1f3      	bne.n	15b4c <_free_r+0x20>
   15b64:	6818      	ldr	r0, [r3, #0]
   15b66:	685b      	ldr	r3, [r3, #4]
   15b68:	1841      	adds	r1, r0, r1
   15b6a:	6021      	str	r1, [r4, #0]
   15b6c:	e7ee      	b.n	15b4c <_free_r+0x20>
   15b6e:	0013      	movs	r3, r2
   15b70:	685a      	ldr	r2, [r3, #4]
   15b72:	2a00      	cmp	r2, #0
   15b74:	d001      	beq.n	15b7a <_free_r+0x4e>
   15b76:	42a2      	cmp	r2, r4
   15b78:	d9f9      	bls.n	15b6e <_free_r+0x42>
   15b7a:	6819      	ldr	r1, [r3, #0]
   15b7c:	1858      	adds	r0, r3, r1
   15b7e:	42a0      	cmp	r0, r4
   15b80:	d10b      	bne.n	15b9a <_free_r+0x6e>
   15b82:	6820      	ldr	r0, [r4, #0]
   15b84:	1809      	adds	r1, r1, r0
   15b86:	1858      	adds	r0, r3, r1
   15b88:	6019      	str	r1, [r3, #0]
   15b8a:	4282      	cmp	r2, r0
   15b8c:	d1e0      	bne.n	15b50 <_free_r+0x24>
   15b8e:	6810      	ldr	r0, [r2, #0]
   15b90:	6852      	ldr	r2, [r2, #4]
   15b92:	1841      	adds	r1, r0, r1
   15b94:	6019      	str	r1, [r3, #0]
   15b96:	605a      	str	r2, [r3, #4]
   15b98:	e7da      	b.n	15b50 <_free_r+0x24>
   15b9a:	42a0      	cmp	r0, r4
   15b9c:	d902      	bls.n	15ba4 <_free_r+0x78>
   15b9e:	230c      	movs	r3, #12
   15ba0:	602b      	str	r3, [r5, #0]
   15ba2:	e7d5      	b.n	15b50 <_free_r+0x24>
   15ba4:	6821      	ldr	r1, [r4, #0]
   15ba6:	1860      	adds	r0, r4, r1
   15ba8:	4282      	cmp	r2, r0
   15baa:	d103      	bne.n	15bb4 <_free_r+0x88>
   15bac:	6810      	ldr	r0, [r2, #0]
   15bae:	6852      	ldr	r2, [r2, #4]
   15bb0:	1841      	adds	r1, r0, r1
   15bb2:	6021      	str	r1, [r4, #0]
   15bb4:	6062      	str	r2, [r4, #4]
   15bb6:	605c      	str	r4, [r3, #4]
   15bb8:	e7ca      	b.n	15b50 <_free_r+0x24>
   15bba:	46c0      	nop			; (mov r8, r8)
   15bbc:	20001d20 	.word	0x20001d20

00015bc0 <_malloc_r>:
   15bc0:	2303      	movs	r3, #3
   15bc2:	b570      	push	{r4, r5, r6, lr}
   15bc4:	1ccd      	adds	r5, r1, #3
   15bc6:	439d      	bics	r5, r3
   15bc8:	3508      	adds	r5, #8
   15bca:	0006      	movs	r6, r0
   15bcc:	2d0c      	cmp	r5, #12
   15bce:	d21e      	bcs.n	15c0e <_malloc_r+0x4e>
   15bd0:	250c      	movs	r5, #12
   15bd2:	42a9      	cmp	r1, r5
   15bd4:	d81d      	bhi.n	15c12 <_malloc_r+0x52>
   15bd6:	0030      	movs	r0, r6
   15bd8:	f000 f956 	bl	15e88 <__malloc_lock>
   15bdc:	4a25      	ldr	r2, [pc, #148]	; (15c74 <_malloc_r+0xb4>)
   15bde:	6814      	ldr	r4, [r2, #0]
   15be0:	0021      	movs	r1, r4
   15be2:	2900      	cmp	r1, #0
   15be4:	d119      	bne.n	15c1a <_malloc_r+0x5a>
   15be6:	4c24      	ldr	r4, [pc, #144]	; (15c78 <_malloc_r+0xb8>)
   15be8:	6823      	ldr	r3, [r4, #0]
   15bea:	2b00      	cmp	r3, #0
   15bec:	d103      	bne.n	15bf6 <_malloc_r+0x36>
   15bee:	0030      	movs	r0, r6
   15bf0:	f000 f844 	bl	15c7c <_sbrk_r>
   15bf4:	6020      	str	r0, [r4, #0]
   15bf6:	0029      	movs	r1, r5
   15bf8:	0030      	movs	r0, r6
   15bfa:	f000 f83f 	bl	15c7c <_sbrk_r>
   15bfe:	1c43      	adds	r3, r0, #1
   15c00:	d12c      	bne.n	15c5c <_malloc_r+0x9c>
   15c02:	230c      	movs	r3, #12
   15c04:	0030      	movs	r0, r6
   15c06:	6033      	str	r3, [r6, #0]
   15c08:	f000 f93f 	bl	15e8a <__malloc_unlock>
   15c0c:	e003      	b.n	15c16 <_malloc_r+0x56>
   15c0e:	2d00      	cmp	r5, #0
   15c10:	dadf      	bge.n	15bd2 <_malloc_r+0x12>
   15c12:	230c      	movs	r3, #12
   15c14:	6033      	str	r3, [r6, #0]
   15c16:	2000      	movs	r0, #0
   15c18:	bd70      	pop	{r4, r5, r6, pc}
   15c1a:	680b      	ldr	r3, [r1, #0]
   15c1c:	1b5b      	subs	r3, r3, r5
   15c1e:	d41a      	bmi.n	15c56 <_malloc_r+0x96>
   15c20:	2b0b      	cmp	r3, #11
   15c22:	d903      	bls.n	15c2c <_malloc_r+0x6c>
   15c24:	600b      	str	r3, [r1, #0]
   15c26:	18cc      	adds	r4, r1, r3
   15c28:	6025      	str	r5, [r4, #0]
   15c2a:	e003      	b.n	15c34 <_malloc_r+0x74>
   15c2c:	428c      	cmp	r4, r1
   15c2e:	d10e      	bne.n	15c4e <_malloc_r+0x8e>
   15c30:	6863      	ldr	r3, [r4, #4]
   15c32:	6013      	str	r3, [r2, #0]
   15c34:	0030      	movs	r0, r6
   15c36:	f000 f928 	bl	15e8a <__malloc_unlock>
   15c3a:	0020      	movs	r0, r4
   15c3c:	2207      	movs	r2, #7
   15c3e:	300b      	adds	r0, #11
   15c40:	1d23      	adds	r3, r4, #4
   15c42:	4390      	bics	r0, r2
   15c44:	1ac3      	subs	r3, r0, r3
   15c46:	d0e7      	beq.n	15c18 <_malloc_r+0x58>
   15c48:	425a      	negs	r2, r3
   15c4a:	50e2      	str	r2, [r4, r3]
   15c4c:	e7e4      	b.n	15c18 <_malloc_r+0x58>
   15c4e:	684b      	ldr	r3, [r1, #4]
   15c50:	6063      	str	r3, [r4, #4]
   15c52:	000c      	movs	r4, r1
   15c54:	e7ee      	b.n	15c34 <_malloc_r+0x74>
   15c56:	000c      	movs	r4, r1
   15c58:	6849      	ldr	r1, [r1, #4]
   15c5a:	e7c2      	b.n	15be2 <_malloc_r+0x22>
   15c5c:	2303      	movs	r3, #3
   15c5e:	1cc4      	adds	r4, r0, #3
   15c60:	439c      	bics	r4, r3
   15c62:	42a0      	cmp	r0, r4
   15c64:	d0e0      	beq.n	15c28 <_malloc_r+0x68>
   15c66:	1a21      	subs	r1, r4, r0
   15c68:	0030      	movs	r0, r6
   15c6a:	f000 f807 	bl	15c7c <_sbrk_r>
   15c6e:	1c43      	adds	r3, r0, #1
   15c70:	d1da      	bne.n	15c28 <_malloc_r+0x68>
   15c72:	e7c6      	b.n	15c02 <_malloc_r+0x42>
   15c74:	20001d20 	.word	0x20001d20
   15c78:	20001d24 	.word	0x20001d24

00015c7c <_sbrk_r>:
   15c7c:	2300      	movs	r3, #0
   15c7e:	b570      	push	{r4, r5, r6, lr}
   15c80:	4c06      	ldr	r4, [pc, #24]	; (15c9c <_sbrk_r+0x20>)
   15c82:	0005      	movs	r5, r0
   15c84:	0008      	movs	r0, r1
   15c86:	6023      	str	r3, [r4, #0]
   15c88:	f7f3 f814 	bl	8cb4 <_sbrk>
   15c8c:	1c43      	adds	r3, r0, #1
   15c8e:	d103      	bne.n	15c98 <_sbrk_r+0x1c>
   15c90:	6823      	ldr	r3, [r4, #0]
   15c92:	2b00      	cmp	r3, #0
   15c94:	d000      	beq.n	15c98 <_sbrk_r+0x1c>
   15c96:	602b      	str	r3, [r5, #0]
   15c98:	bd70      	pop	{r4, r5, r6, pc}
   15c9a:	46c0      	nop			; (mov r8, r8)
   15c9c:	20002918 	.word	0x20002918

00015ca0 <_raise_r>:
   15ca0:	b570      	push	{r4, r5, r6, lr}
   15ca2:	0004      	movs	r4, r0
   15ca4:	000d      	movs	r5, r1
   15ca6:	291f      	cmp	r1, #31
   15ca8:	d904      	bls.n	15cb4 <_raise_r+0x14>
   15caa:	2316      	movs	r3, #22
   15cac:	6003      	str	r3, [r0, #0]
   15cae:	2001      	movs	r0, #1
   15cb0:	4240      	negs	r0, r0
   15cb2:	bd70      	pop	{r4, r5, r6, pc}
   15cb4:	6c43      	ldr	r3, [r0, #68]	; 0x44
   15cb6:	2b00      	cmp	r3, #0
   15cb8:	d004      	beq.n	15cc4 <_raise_r+0x24>
   15cba:	008a      	lsls	r2, r1, #2
   15cbc:	189b      	adds	r3, r3, r2
   15cbe:	681a      	ldr	r2, [r3, #0]
   15cc0:	2a00      	cmp	r2, #0
   15cc2:	d108      	bne.n	15cd6 <_raise_r+0x36>
   15cc4:	0020      	movs	r0, r4
   15cc6:	f000 f831 	bl	15d2c <_getpid_r>
   15cca:	002a      	movs	r2, r5
   15ccc:	0001      	movs	r1, r0
   15cce:	0020      	movs	r0, r4
   15cd0:	f000 f81a 	bl	15d08 <_kill_r>
   15cd4:	e7ed      	b.n	15cb2 <_raise_r+0x12>
   15cd6:	2000      	movs	r0, #0
   15cd8:	2a01      	cmp	r2, #1
   15cda:	d0ea      	beq.n	15cb2 <_raise_r+0x12>
   15cdc:	1c51      	adds	r1, r2, #1
   15cde:	d103      	bne.n	15ce8 <_raise_r+0x48>
   15ce0:	2316      	movs	r3, #22
   15ce2:	3001      	adds	r0, #1
   15ce4:	6023      	str	r3, [r4, #0]
   15ce6:	e7e4      	b.n	15cb2 <_raise_r+0x12>
   15ce8:	2400      	movs	r4, #0
   15cea:	0028      	movs	r0, r5
   15cec:	601c      	str	r4, [r3, #0]
   15cee:	4790      	blx	r2
   15cf0:	0020      	movs	r0, r4
   15cf2:	e7de      	b.n	15cb2 <_raise_r+0x12>

00015cf4 <raise>:
   15cf4:	b510      	push	{r4, lr}
   15cf6:	4b03      	ldr	r3, [pc, #12]	; (15d04 <raise+0x10>)
   15cf8:	0001      	movs	r1, r0
   15cfa:	6818      	ldr	r0, [r3, #0]
   15cfc:	f7ff ffd0 	bl	15ca0 <_raise_r>
   15d00:	bd10      	pop	{r4, pc}
   15d02:	46c0      	nop			; (mov r8, r8)
   15d04:	200000a0 	.word	0x200000a0

00015d08 <_kill_r>:
   15d08:	2300      	movs	r3, #0
   15d0a:	b570      	push	{r4, r5, r6, lr}
   15d0c:	4c06      	ldr	r4, [pc, #24]	; (15d28 <_kill_r+0x20>)
   15d0e:	0005      	movs	r5, r0
   15d10:	0008      	movs	r0, r1
   15d12:	0011      	movs	r1, r2
   15d14:	6023      	str	r3, [r4, #0]
   15d16:	f7f2 ffed 	bl	8cf4 <_kill>
   15d1a:	1c43      	adds	r3, r0, #1
   15d1c:	d103      	bne.n	15d26 <_kill_r+0x1e>
   15d1e:	6823      	ldr	r3, [r4, #0]
   15d20:	2b00      	cmp	r3, #0
   15d22:	d000      	beq.n	15d26 <_kill_r+0x1e>
   15d24:	602b      	str	r3, [r5, #0]
   15d26:	bd70      	pop	{r4, r5, r6, pc}
   15d28:	20002918 	.word	0x20002918

00015d2c <_getpid_r>:
   15d2c:	b510      	push	{r4, lr}
   15d2e:	f7f2 ffe2 	bl	8cf6 <_getpid>
   15d32:	bd10      	pop	{r4, pc}

00015d34 <__sread>:
   15d34:	b570      	push	{r4, r5, r6, lr}
   15d36:	000c      	movs	r4, r1
   15d38:	250e      	movs	r5, #14
   15d3a:	5f49      	ldrsh	r1, [r1, r5]
   15d3c:	f000 f8a6 	bl	15e8c <_read_r>
   15d40:	2800      	cmp	r0, #0
   15d42:	db03      	blt.n	15d4c <__sread+0x18>
   15d44:	6d63      	ldr	r3, [r4, #84]	; 0x54
   15d46:	181b      	adds	r3, r3, r0
   15d48:	6563      	str	r3, [r4, #84]	; 0x54
   15d4a:	bd70      	pop	{r4, r5, r6, pc}
   15d4c:	89a3      	ldrh	r3, [r4, #12]
   15d4e:	4a02      	ldr	r2, [pc, #8]	; (15d58 <__sread+0x24>)
   15d50:	4013      	ands	r3, r2
   15d52:	81a3      	strh	r3, [r4, #12]
   15d54:	e7f9      	b.n	15d4a <__sread+0x16>
   15d56:	46c0      	nop			; (mov r8, r8)
   15d58:	ffffefff 	.word	0xffffefff

00015d5c <__swrite>:
   15d5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   15d5e:	001f      	movs	r7, r3
   15d60:	898b      	ldrh	r3, [r1, #12]
   15d62:	0005      	movs	r5, r0
   15d64:	000c      	movs	r4, r1
   15d66:	0016      	movs	r6, r2
   15d68:	05db      	lsls	r3, r3, #23
   15d6a:	d505      	bpl.n	15d78 <__swrite+0x1c>
   15d6c:	230e      	movs	r3, #14
   15d6e:	5ec9      	ldrsh	r1, [r1, r3]
   15d70:	2200      	movs	r2, #0
   15d72:	2302      	movs	r3, #2
   15d74:	f000 f874 	bl	15e60 <_lseek_r>
   15d78:	89a3      	ldrh	r3, [r4, #12]
   15d7a:	4a05      	ldr	r2, [pc, #20]	; (15d90 <__swrite+0x34>)
   15d7c:	0028      	movs	r0, r5
   15d7e:	4013      	ands	r3, r2
   15d80:	81a3      	strh	r3, [r4, #12]
   15d82:	0032      	movs	r2, r6
   15d84:	230e      	movs	r3, #14
   15d86:	5ee1      	ldrsh	r1, [r4, r3]
   15d88:	003b      	movs	r3, r7
   15d8a:	f000 f81f 	bl	15dcc <_write_r>
   15d8e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   15d90:	ffffefff 	.word	0xffffefff

00015d94 <__sseek>:
   15d94:	b570      	push	{r4, r5, r6, lr}
   15d96:	000c      	movs	r4, r1
   15d98:	250e      	movs	r5, #14
   15d9a:	5f49      	ldrsh	r1, [r1, r5]
   15d9c:	f000 f860 	bl	15e60 <_lseek_r>
   15da0:	89a3      	ldrh	r3, [r4, #12]
   15da2:	1c42      	adds	r2, r0, #1
   15da4:	d103      	bne.n	15dae <__sseek+0x1a>
   15da6:	4a05      	ldr	r2, [pc, #20]	; (15dbc <__sseek+0x28>)
   15da8:	4013      	ands	r3, r2
   15daa:	81a3      	strh	r3, [r4, #12]
   15dac:	bd70      	pop	{r4, r5, r6, pc}
   15dae:	2280      	movs	r2, #128	; 0x80
   15db0:	0152      	lsls	r2, r2, #5
   15db2:	4313      	orrs	r3, r2
   15db4:	81a3      	strh	r3, [r4, #12]
   15db6:	6560      	str	r0, [r4, #84]	; 0x54
   15db8:	e7f8      	b.n	15dac <__sseek+0x18>
   15dba:	46c0      	nop			; (mov r8, r8)
   15dbc:	ffffefff 	.word	0xffffefff

00015dc0 <__sclose>:
   15dc0:	b510      	push	{r4, lr}
   15dc2:	230e      	movs	r3, #14
   15dc4:	5ec9      	ldrsh	r1, [r1, r3]
   15dc6:	f000 f815 	bl	15df4 <_close_r>
   15dca:	bd10      	pop	{r4, pc}

00015dcc <_write_r>:
   15dcc:	b570      	push	{r4, r5, r6, lr}
   15dce:	0005      	movs	r5, r0
   15dd0:	0008      	movs	r0, r1
   15dd2:	0011      	movs	r1, r2
   15dd4:	2200      	movs	r2, #0
   15dd6:	4c06      	ldr	r4, [pc, #24]	; (15df0 <_write_r+0x24>)
   15dd8:	6022      	str	r2, [r4, #0]
   15dda:	001a      	movs	r2, r3
   15ddc:	f7f2 ff42 	bl	8c64 <_write>
   15de0:	1c43      	adds	r3, r0, #1
   15de2:	d103      	bne.n	15dec <_write_r+0x20>
   15de4:	6823      	ldr	r3, [r4, #0]
   15de6:	2b00      	cmp	r3, #0
   15de8:	d000      	beq.n	15dec <_write_r+0x20>
   15dea:	602b      	str	r3, [r5, #0]
   15dec:	bd70      	pop	{r4, r5, r6, pc}
   15dee:	46c0      	nop			; (mov r8, r8)
   15df0:	20002918 	.word	0x20002918

00015df4 <_close_r>:
   15df4:	2300      	movs	r3, #0
   15df6:	b570      	push	{r4, r5, r6, lr}
   15df8:	4c06      	ldr	r4, [pc, #24]	; (15e14 <_close_r+0x20>)
   15dfa:	0005      	movs	r5, r0
   15dfc:	0008      	movs	r0, r1
   15dfe:	6023      	str	r3, [r4, #0]
   15e00:	f7f2 ff6a 	bl	8cd8 <_close>
   15e04:	1c43      	adds	r3, r0, #1
   15e06:	d103      	bne.n	15e10 <_close_r+0x1c>
   15e08:	6823      	ldr	r3, [r4, #0]
   15e0a:	2b00      	cmp	r3, #0
   15e0c:	d000      	beq.n	15e10 <_close_r+0x1c>
   15e0e:	602b      	str	r3, [r5, #0]
   15e10:	bd70      	pop	{r4, r5, r6, pc}
   15e12:	46c0      	nop			; (mov r8, r8)
   15e14:	20002918 	.word	0x20002918

00015e18 <_fstat_r>:
   15e18:	2300      	movs	r3, #0
   15e1a:	b570      	push	{r4, r5, r6, lr}
   15e1c:	4c06      	ldr	r4, [pc, #24]	; (15e38 <_fstat_r+0x20>)
   15e1e:	0005      	movs	r5, r0
   15e20:	0008      	movs	r0, r1
   15e22:	0011      	movs	r1, r2
   15e24:	6023      	str	r3, [r4, #0]
   15e26:	f7f2 ff5a 	bl	8cde <_fstat>
   15e2a:	1c43      	adds	r3, r0, #1
   15e2c:	d103      	bne.n	15e36 <_fstat_r+0x1e>
   15e2e:	6823      	ldr	r3, [r4, #0]
   15e30:	2b00      	cmp	r3, #0
   15e32:	d000      	beq.n	15e36 <_fstat_r+0x1e>
   15e34:	602b      	str	r3, [r5, #0]
   15e36:	bd70      	pop	{r4, r5, r6, pc}
   15e38:	20002918 	.word	0x20002918

00015e3c <_isatty_r>:
   15e3c:	2300      	movs	r3, #0
   15e3e:	b570      	push	{r4, r5, r6, lr}
   15e40:	4c06      	ldr	r4, [pc, #24]	; (15e5c <_isatty_r+0x20>)
   15e42:	0005      	movs	r5, r0
   15e44:	0008      	movs	r0, r1
   15e46:	6023      	str	r3, [r4, #0]
   15e48:	f7f2 ff4e 	bl	8ce8 <_isatty>
   15e4c:	1c43      	adds	r3, r0, #1
   15e4e:	d103      	bne.n	15e58 <_isatty_r+0x1c>
   15e50:	6823      	ldr	r3, [r4, #0]
   15e52:	2b00      	cmp	r3, #0
   15e54:	d000      	beq.n	15e58 <_isatty_r+0x1c>
   15e56:	602b      	str	r3, [r5, #0]
   15e58:	bd70      	pop	{r4, r5, r6, pc}
   15e5a:	46c0      	nop			; (mov r8, r8)
   15e5c:	20002918 	.word	0x20002918

00015e60 <_lseek_r>:
   15e60:	b570      	push	{r4, r5, r6, lr}
   15e62:	0005      	movs	r5, r0
   15e64:	0008      	movs	r0, r1
   15e66:	0011      	movs	r1, r2
   15e68:	2200      	movs	r2, #0
   15e6a:	4c06      	ldr	r4, [pc, #24]	; (15e84 <_lseek_r+0x24>)
   15e6c:	6022      	str	r2, [r4, #0]
   15e6e:	001a      	movs	r2, r3
   15e70:	f7f2 ff3c 	bl	8cec <_lseek>
   15e74:	1c43      	adds	r3, r0, #1
   15e76:	d103      	bne.n	15e80 <_lseek_r+0x20>
   15e78:	6823      	ldr	r3, [r4, #0]
   15e7a:	2b00      	cmp	r3, #0
   15e7c:	d000      	beq.n	15e80 <_lseek_r+0x20>
   15e7e:	602b      	str	r3, [r5, #0]
   15e80:	bd70      	pop	{r4, r5, r6, pc}
   15e82:	46c0      	nop			; (mov r8, r8)
   15e84:	20002918 	.word	0x20002918

00015e88 <__malloc_lock>:
   15e88:	4770      	bx	lr

00015e8a <__malloc_unlock>:
   15e8a:	4770      	bx	lr

00015e8c <_read_r>:
   15e8c:	b570      	push	{r4, r5, r6, lr}
   15e8e:	0005      	movs	r5, r0
   15e90:	0008      	movs	r0, r1
   15e92:	0011      	movs	r1, r2
   15e94:	2200      	movs	r2, #0
   15e96:	4c06      	ldr	r4, [pc, #24]	; (15eb0 <_read_r+0x24>)
   15e98:	6022      	str	r2, [r4, #0]
   15e9a:	001a      	movs	r2, r3
   15e9c:	f7f2 fec0 	bl	8c20 <_read>
   15ea0:	1c43      	adds	r3, r0, #1
   15ea2:	d103      	bne.n	15eac <_read_r+0x20>
   15ea4:	6823      	ldr	r3, [r4, #0]
   15ea6:	2b00      	cmp	r3, #0
   15ea8:	d000      	beq.n	15eac <_read_r+0x20>
   15eaa:	602b      	str	r3, [r5, #0]
   15eac:	bd70      	pop	{r4, r5, r6, pc}
   15eae:	46c0      	nop			; (mov r8, r8)
   15eb0:	20002918 	.word	0x20002918
   15eb4:	000063dc 	.word	0x000063dc
   15eb8:	00006420 	.word	0x00006420
   15ebc:	0000640e 	.word	0x0000640e
   15ec0:	00006420 	.word	0x00006420
   15ec4:	00006420 	.word	0x00006420
   15ec8:	00006420 	.word	0x00006420
   15ecc:	000063dc 	.word	0x000063dc
   15ed0:	000063dc 	.word	0x000063dc
   15ed4:	00006424 	.word	0x00006424
   15ed8:	00006420 	.word	0x00006420
   15edc:	00006480 	.word	0x00006480
   15ee0:	65636552 	.word	0x65636552
   15ee4:	64657669 	.word	0x64657669
   15ee8:	74614420 	.word	0x74614420
   15eec:	25203a61 	.word	0x25203a61
   15ef0:	000a0d75 	.word	0x000a0d75
   15ef4:	00006970 	.word	0x00006970
   15ef8:	00006970 	.word	0x00006970
   15efc:	0000694c 	.word	0x0000694c
   15f00:	00006970 	.word	0x00006970
   15f04:	0000694c 	.word	0x0000694c
   15f08:	00006932 	.word	0x00006932
   15f0c:	00006932 	.word	0x00006932
   15f10:	00006970 	.word	0x00006970
   15f14:	00006970 	.word	0x00006970
   15f18:	00006970 	.word	0x00006970
   15f1c:	00006970 	.word	0x00006970
   15f20:	00006970 	.word	0x00006970
   15f24:	00006970 	.word	0x00006970
   15f28:	00006970 	.word	0x00006970
   15f2c:	00006970 	.word	0x00006970
   15f30:	00006970 	.word	0x00006970
   15f34:	00006970 	.word	0x00006970
   15f38:	00006970 	.word	0x00006970
   15f3c:	00006970 	.word	0x00006970
   15f40:	00006970 	.word	0x00006970
   15f44:	00006970 	.word	0x00006970
   15f48:	00006970 	.word	0x00006970
   15f4c:	00006970 	.word	0x00006970
   15f50:	00006970 	.word	0x00006970
   15f54:	00006970 	.word	0x00006970
   15f58:	00006970 	.word	0x00006970
   15f5c:	00006970 	.word	0x00006970
   15f60:	00006970 	.word	0x00006970
   15f64:	00006970 	.word	0x00006970
   15f68:	00006970 	.word	0x00006970
   15f6c:	00006970 	.word	0x00006970
   15f70:	00006970 	.word	0x00006970
   15f74:	00006970 	.word	0x00006970
   15f78:	00006970 	.word	0x00006970
   15f7c:	00006970 	.word	0x00006970
   15f80:	00006970 	.word	0x00006970
   15f84:	00006970 	.word	0x00006970
   15f88:	00006970 	.word	0x00006970
   15f8c:	00006970 	.word	0x00006970
   15f90:	00006970 	.word	0x00006970
   15f94:	00006970 	.word	0x00006970
   15f98:	00006970 	.word	0x00006970
   15f9c:	00006970 	.word	0x00006970
   15fa0:	00006970 	.word	0x00006970
   15fa4:	00006970 	.word	0x00006970
   15fa8:	00006970 	.word	0x00006970
   15fac:	00006970 	.word	0x00006970
   15fb0:	00006970 	.word	0x00006970
   15fb4:	00006970 	.word	0x00006970
   15fb8:	00006970 	.word	0x00006970
   15fbc:	00006970 	.word	0x00006970
   15fc0:	00006970 	.word	0x00006970
   15fc4:	00006970 	.word	0x00006970
   15fc8:	00006970 	.word	0x00006970
   15fcc:	00006970 	.word	0x00006970
   15fd0:	00006970 	.word	0x00006970
   15fd4:	00006970 	.word	0x00006970
   15fd8:	00006970 	.word	0x00006970
   15fdc:	00006970 	.word	0x00006970
   15fe0:	00006970 	.word	0x00006970
   15fe4:	00006970 	.word	0x00006970
   15fe8:	00006970 	.word	0x00006970
   15fec:	00006970 	.word	0x00006970
   15ff0:	00006970 	.word	0x00006970
   15ff4:	0000694c 	.word	0x0000694c
   15ff8:	0000694c 	.word	0x0000694c
   15ffc:	00006954 	.word	0x00006954
   16000:	00006954 	.word	0x00006954
   16004:	00006954 	.word	0x00006954
   16008:	00006954 	.word	0x00006954
   1600c:	42000800 	.word	0x42000800
   16010:	42000c00 	.word	0x42000c00
   16014:	42001000 	.word	0x42001000
   16018:	42001400 	.word	0x42001400
   1601c:	42001800 	.word	0x42001800
   16020:	42001c00 	.word	0x42001c00
   16024:	00007eee 	.word	0x00007eee
   16028:	00007eea 	.word	0x00007eea
   1602c:	00007eea 	.word	0x00007eea
   16030:	00007f50 	.word	0x00007f50
   16034:	00007f50 	.word	0x00007f50
   16038:	00007f02 	.word	0x00007f02
   1603c:	00007ef4 	.word	0x00007ef4
   16040:	00007f08 	.word	0x00007f08
   16044:	00007f3e 	.word	0x00007f3e
   16048:	0000818c 	.word	0x0000818c
   1604c:	0000816c 	.word	0x0000816c
   16050:	0000816c 	.word	0x0000816c
   16054:	000081f8 	.word	0x000081f8
   16058:	0000817e 	.word	0x0000817e
   1605c:	0000819a 	.word	0x0000819a
   16060:	00008170 	.word	0x00008170
   16064:	000081a8 	.word	0x000081a8
   16068:	000081e8 	.word	0x000081e8
   1606c:	42002c00 	.word	0x42002c00
   16070:	42003000 	.word	0x42003000
   16074:	42003400 	.word	0x42003400
   16078:	626d756e 	.word	0x626d756e
   1607c:	664f7265 	.word	0x664f7265
   16080:	65747942 	.word	0x65747942
   16084:	00000073 	.word	0x00000073
   16088:	732f2e2e 	.word	0x732f2e2e
   1608c:	412f6372 	.word	0x412f6372
   16090:	742f4653 	.word	0x742f4653
   16094:	64726968 	.word	0x64726968
   16098:	74726170 	.word	0x74726170
   1609c:	69772f79 	.word	0x69772f79
   160a0:	656c6572 	.word	0x656c6572
   160a4:	6d2f7373 	.word	0x6d2f7373
   160a8:	2f697769 	.word	0x2f697769
   160ac:	76726573 	.word	0x76726573
   160b0:	73656369 	.word	0x73656369
   160b4:	7364702f 	.word	0x7364702f
   160b8:	6372732f 	.word	0x6372732f
   160bc:	2f766e2f 	.word	0x2f766e2f
   160c0:	764e5f44 	.word	0x764e5f44
   160c4:	0000632e 	.word	0x0000632e
   160c8:	72646461 	.word	0x72646461
   160cc:	20737365 	.word	0x20737365
   160d0:	44203d3c 	.word	0x44203d3c
   160d4:	5f564e5f 	.word	0x5f564e5f
   160d8:	4f4d454d 	.word	0x4f4d454d
   160dc:	455f5952 	.word	0x455f5952
   160e0:	0000444e 	.word	0x0000444e
   160e4:	64646128 	.word	0x64646128
   160e8:	73736572 	.word	0x73736572
   160ec:	6e202b20 	.word	0x6e202b20
   160f0:	65626d75 	.word	0x65626d75
   160f4:	42664f72 	.word	0x42664f72
   160f8:	73657479 	.word	0x73657479
   160fc:	3d3c2029 	.word	0x3d3c2029
   16100:	5f442820 	.word	0x5f442820
   16104:	4d5f564e 	.word	0x4d5f564e
   16108:	524f4d45 	.word	0x524f4d45
   1610c:	4e455f59 	.word	0x4e455f59
   16110:	202b2044 	.word	0x202b2044
   16114:	00295531 	.word	0x00295531
   16118:	66666f28 	.word	0x66666f28
   1611c:	20746573 	.word	0x20746573
   16120:	756e202b 	.word	0x756e202b
   16124:	7265626d 	.word	0x7265626d
   16128:	7942664f 	.word	0x7942664f
   1612c:	29736574 	.word	0x29736574
   16130:	203d3c20 	.word	0x203d3c20
   16134:	564e5f44 	.word	0x564e5f44
   16138:	4345535f 	.word	0x4345535f
   1613c:	5f524f54 	.word	0x5f524f54
   16140:	455a4953 	.word	0x455a4953
   16144:	ffffff00 	.word	0xffffff00
   16148:	4e5f4428 	.word	0x4e5f4428
   1614c:	454d5f56 	.word	0x454d5f56
   16150:	59524f4d 	.word	0x59524f4d
   16154:	4154535f 	.word	0x4154535f
   16158:	25205452 	.word	0x25205452
   1615c:	4d564e20 	.word	0x4d564e20
   16160:	4c525443 	.word	0x4c525443
   16164:	574f525f 	.word	0x574f525f
   16168:	5a49535f 	.word	0x5a49535f
   1616c:	3d202945 	.word	0x3d202945
   16170:	5530203d 	.word	0x5530203d
   16174:	00000000 	.word	0x00000000
   16178:	4e5f4428 	.word	0x4e5f4428
   1617c:	454d5f56 	.word	0x454d5f56
   16180:	59524f4d 	.word	0x59524f4d
   16184:	444e455f 	.word	0x444e455f
   16188:	44202d20 	.word	0x44202d20
   1618c:	5f564e5f 	.word	0x5f564e5f
   16190:	4f4d454d 	.word	0x4f4d454d
   16194:	535f5952 	.word	0x535f5952
   16198:	54524154 	.word	0x54524154
   1619c:	31202b20 	.word	0x31202b20
   161a0:	3d202955 	.word	0x3d202955
   161a4:	5f44203d 	.word	0x5f44203d
   161a8:	4d5f564e 	.word	0x4d5f564e
   161ac:	524f4d45 	.word	0x524f4d45
   161b0:	49535f59 	.word	0x49535f59
   161b4:	ff00455a 	.word	0xff00455a

000161b8 <__func__.11827>:
   161b8:	764e5f44 696e495f ffff0074              D_Nv_Init...

000161c4 <__func__.11839>:
   161c4:	764e5f44 6165525f 6d495f64 ff006c70     D_Nv_Read_Impl..

000161d4 <__func__.11852>:
   161d4:	764e5f44 6972575f 495f6574 006c706d     D_Nv_Write_Impl.

000161e4 <__func__.11864>:
   161e4:	764e5f44 6172455f 65536573 726f7463     D_Nv_EraseSector
   161f4:	706d495f ffff006c                       _Impl...

000161fc <__func__.11877>:
   161fc:	706d6f43 44657261 00617461 68636163     CompareData.cach
   1620c:	3d212065 4c554e20 ffff004c 736c6166     e != NULL...fals
   1621c:	ffff0065 646e6946 6d657449 68636143     e...FindItemCach
   1622c:	64692865 3d3d2029 4c554e20 0000004c     e(id) == NULL...
   1623c:	74695f73 6f436d65 20746e75 414d203c     s_itemCount < MA
   1624c:	54495f58 435f4d45 544e554f ffffff00     X_ITEM_COUNT....
   1625c:	646e6946 6d657449 68636143 64692865     FindItemCache(id
   1626c:	3d212029 4c554e20 ffff004c 68636163     ) != NULL...cach
   1627c:	6c3e2d65 42747361 6b636f6c 203d2120     e->lastBlock != 
   1628c:	30307830 00003030 732f2e2e 412f6372     0x0000..../src/A
   1629c:	742f4653 64726968 74726170 69772f79     SF/thirdparty/wi
   162ac:	656c6572 6d2f7373 2f697769 76726573     reless/miwi/serv
   162bc:	73656369 7364702f 6372732f 2f766e2f     ices/pds/src/nv/
   162cc:	764e5f53 6d61532d 2e313252 ffff0063     S_Nv-SamR21.c...
   162dc:	20646928 30203d21 26202975 69282026     (id != 0u) && (i
   162ec:	203c2064 30467830 29753030 20262620     d < 0xF000u) && 
   162fc:	65746928 6e654c6d 20687467 4d203d3c     (itemLength <= M
   1630c:	495f5841 5f4d4554 474e454c 00294854     AX_ITEM_LENGTH).
   1631c:	21206469 7530203d ffffff00 20646928     id != 0u....(id 
   1632c:	30203d21 26202975 70282026 61746144     != 0u) && (pData
   1633c:	203d2120 4c4c554e ffff0029               != NULL)...

00016348 <__func__.11868>:
   16348:	706d6f63 53746361 6f746365 6d695472     compactSectorTim
   16358:	69467265 00646572                       erFired.

00016360 <__func__.11904>:
   16360:	646e6946 6d657449 68636143 ffff0065     FindItemCache...

00016370 <__func__.11911>:
   16370:	61657243 74496574 61436d65 00656863     CreateItemCache.

00016380 <__func__.11916>:
   16380:	656c6544 74496574 61436d65 00656863     DeleteItemCache.

00016390 <__func__.12009>:
   16390:	64616f4c 74636553 ff00726f              LoadSector..

0001639c <__func__.12031>:
   1639c:	706d6f43 53746361 6f746365 ffff0072     CompactSector...

000163ac <__func__.12051>:
   163ac:	706d6f43 53746361 6f746365 4e664972     CompactSectorIfN
   163bc:	65646565 ffff0064                       eeded...

000163c4 <__func__.12058>:
   163c4:	706d6f43 49746361 006d6574              CompactItem.

000163d0 <__func__.12082>:
   163d0:	764e5f53 7261455f 6e49796c ff007469     S_Nv_EarlyInit..

000163e0 <__func__.12092>:
   163e0:	764e5f53 6574495f 696e496d 6d495f74     S_Nv_ItemInit_Im
   163f0:	ff006c70                                pl..

000163f4 <__func__.12105>:
   163f4:	764e5f53 6972575f 495f6574 006c706d     S_Nv_Write_Impl.

00016404 <__func__.12116>:
   16404:	764e5f53 6165525f 6d495f64 ff006c70     S_Nv_Read_Impl..

00016414 <__func__.12121>:
   16414:	764e5f53 6574495f 6e654c6d 5f687467     S_Nv_ItemLength_
   16424:	6c706d49 ffffff00 20553028 69203d21     Impl....(0U != i
   16434:	446d6574 72637365 6574692e 7a69536d     temDescr.itemSiz
   16444:	26202965 4e282026 204c4c55 69203d21     e) && (NULL != i
   16454:	446d6574 72637365 6574692e 7461446d     temDescr.itemDat
   16464:	00002961 732f2e2e 412f6372 742f4653     a)..../src/ASF/t
   16474:	64726968 74726170 69772f79 656c6572     hirdparty/wirele
   16484:	6d2f7373 2f697769 76726573 73656369     ss/miwi/services
   16494:	7364702f 6372732f 2f6c772f 64506c77     /pds/src/wl/wlPd
   164a4:	74614473 72655361 2e726576 00000063     sDataServer.c...
   164b4:	4e5f5328 65525f76 6e727574 756c6156     (S_Nv_ReturnValu
   164c4:	69445f65 746f4e64 73697845 3d3d2074     e_DidNotExist ==
   164d4:	74657220 7c7c2029 5f532820 525f764e      ret) || (S_Nv_R
   164e4:	72757465 6c61566e 4f5f6575 3d3d206b     eturnValue_Ok ==
   164f4:	74657220 ffff0029                        ret)...

000164fc <__func__.11783>:
   164fc:	53736470 65726f74 6d657449 6b736154     pdsStoreItemTask
   1650c:	646e6148 0072656c                       Handler.

00016514 <__func__.11803>:
   16514:	53736470 65726f74 6d657449 ffffff00     pdsStoreItem....

00016524 <__func__.11810>:
   16524:	52736470 6f747365 74496572 ff006d65     pdsRestoreItem..
   16534:	20746572 53203d3d 5f764e5f 75746552     ret == S_Nv_Retu
   16544:	61566e72 5f65756c ff006b4f 6d657469     rnValue_Ok..item
   16554:	63736544 6574692e 7a69536d 00000065     Desc.itemSize...
   16564:	732f2e2e 412f6372 742f4653 64726968     ../src/ASF/third
   16574:	74726170 69772f79 656c6572 6d2f7373     party/wireless/m
   16584:	2f697769 76726573 73656369 7364702f     iwi/services/pds
   16594:	6372732f 2f6c772f 64506c77 696e4973     /src/wl/wlPdsIni
   165a4:	00632e74                                t.c.

000165a8 <__func__.11541>:
   165a8:	5f534450 74696e49 6d657449 ffff0073     PDS_InitItems...
   165b8:	0000aba4 0000aa6a 0000aba4 0000aba4     ....j...........
   165c8:	0000aba4 0000aba4 0000aa84 0000aad6     ................
   165d8:	0000ab24 0000aa18 0000aba4 0000aa6a     $...........j...
   165e8:	0000aba4 0000aba4 0000aba4 0000aba4     ................
   165f8:	0000aa84 0000aad2 0000ab24 0000aa1e     ........$.......

00016608 <__func__.11989>:
   16608:	61647075 6f4e6574 656c536e 65447065     updateNonSleepDe
   16618:	62615476 ff00656c                       vTable..

00016620 <__func__.12001>:
   16620:	61647075 6c536574 44706565 61547665     updateSleepDevTa
   16630:	00656c62                                ble.

00016634 <__func__.12013>:
   16634:	61647075 6f436574 5264726f 6574756f     updateCoordRoute
   16644:	6c626154 ffff0065                       Table...

0001664c <__func__.12025>:
   1664c:	61647075 6f436574 4864726f 6154706f     updateCoordHopTa
   1665c:	00656c62                                ble.

00016660 <__func__.12045>:
   16660:	69726576 74497966 69536d65 0073657a     verifyItemSizes.
   16670:	4970616d 2e6d6574 67616c66 20262073     mapItem.flags & 
   16680:	455a4953 444f4d5f 43494649 4f495441     SIZE_MODIFICATIO
   16690:	4c415f4e 45574f4c 00000044 732f2e2e     N_ALLOWED...../s
   166a0:	412f6372 742f4653 64726968 74726170     rc/ASF/thirdpart
   166b0:	69772f79 656c6572 6d2f7373 2f697769     y/wireless/miwi/
   166c0:	76726573 73656369 7364702f 6372732f     services/pds/src
   166d0:	2f6c772f 64506c77 70795473 6f437365     /wl/wlPdsTypesCo
   166e0:	7265766e 2e726574 00000063              nverter.c...

000166ec <MiWiItemIdsTable>:
   166ec:	00020001 00040003 00070006 00090008     ................
   166fc:	0000b888 0000b9d2 0000b860 0000b9da     ........`.......
   1670c:	0000b868 0000b870 0000b878 0000b880     h...p...x.......

0001671c <tc_interrupt_vectors.11960>:
   1671c:	ff141312 00020028 2000008c 00000000     ....(...... ....
   1672c:	0000db62 0000db6c 0000db7c 0000db80     b...l...|.......
   1673c:	0000db92 0000db84 0000db58 00010e2e     ........X.......
   1674c:	00010e66 00010f14 00010d96 00010f5c     f...........\...
   1675c:	00010e2e 00010f88 00011020 00010e3c     ........ ...<...
   1676c:	00012d54 00012d24 00012d36 00012c78     T-..$-..6-..x,..
   1677c:	00012d36 00012d1a 00012d36 00012c78     6-...-..6-..x,..
   1678c:	00012d24 00012d24 00012d1a 00012c78     $-..$-...-..x,..
   1679c:	00012c80 00012c80 00012c80 00012d3c     .,...,...,..<-..
   167ac:	00012d24 00012d24 00012cf8 00012ddc     $-..$-...,...-..
   167bc:	00012cf8 00012d1a 00012cf8 00012ddc     .,...-...,...-..
   167cc:	00012d24 00012d24 00012d1a 00012ddc     $-..$-...-...-..
   167dc:	00012c80 00012c80 00012c80 00012de6     .,...,...,...-..
   167ec:	00013bc4 00013ba6 00013b60 00013a7e     .;...;..`;..~:..
   167fc:	00013b60 00013b98 00013b60 00013a7e     `;...;..`;..~:..
   1680c:	00013ba6 00013ba6 00013b98 00013a7e     .;...;...;..~:..
   1681c:	00013a76 00013a76 00013a76 00013ddc     v:..v:..v:...=..
   1682c:	00014224 000140e4 000140e4 000140e0     $B...@...@...@..
   1683c:	000141fc 000141fc 000141ee 000140e0     .A...A...A...@..
   1684c:	000141fc 000141ee 000141fc 000140e0     .A...A...A...@..
   1685c:	00014204 00014204 00014204 00014408     .B...B...B...D..
   1686c:	7566202c 6974636e 203a6e6f 73736100     , function: .ass
   1687c:	69747265 22206e6f 20227325 6c696166     ertion "%s" fail
   1688c:	203a6465 656c6966 73252220 6c202c22     ed: file "%s", l
   1689c:	20656e69 73256425 000a7325              ine %d%s%s..

000168a8 <_global_impure_ptr>:
   168a8:	200000a4 2b302d23 6c680020 6665004c     ... #-0+ .hlL.ef
   168b8:	47464567 32313000 36353433 41393837     gEFG.0123456789A
   168c8:	45444342 31300046 35343332 39383736     BCDEF.0123456789
   168d8:	64636261 ff006665                       abcdef..

000168e0 <__sf_fake_stderr>:
	...

00016900 <__sf_fake_stdin>:
	...

00016920 <__sf_fake_stdout>:
	...

00016940 <_init>:
   16940:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   16942:	46c0      	nop			; (mov r8, r8)
   16944:	bcf8      	pop	{r3, r4, r5, r6, r7}
   16946:	bc08      	pop	{r3}
   16948:	469e      	mov	lr, r3
   1694a:	4770      	bx	lr

0001694c <__init_array_start>:
   1694c:	000061c1 	.word	0x000061c1

00016950 <_fini>:
   16950:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   16952:	46c0      	nop			; (mov r8, r8)
   16954:	bcf8      	pop	{r3, r4, r5, r6, r7}
   16956:	bc08      	pop	{r3}
   16958:	469e      	mov	lr, r3
   1695a:	4770      	bx	lr

0001695c <__fini_array_start>:
   1695c:	00006199 	.word	0x00006199
